
STM32F4_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028ca4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005e1c  08028e38  08028e38  00038e38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802ec54  0802ec54  0004026c  2**0
                  CONTENTS
  4 .ARM          00000008  0802ec54  0802ec54  0003ec54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802ec5c  0802ec5c  0004026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802ec5c  0802ec5c  0003ec5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802ec60  0802ec60  0003ec60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  0802ec64  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004026c  2**0
                  CONTENTS
 10 .bss          0001627c  2000026c  2000026c  0004026c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200164e8  200164e8  0004026c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004026c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004029c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0004a8af  00000000  00000000  000402df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000b60e  00000000  00000000  0008ab8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003608  00000000  00000000  000961a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002bff  00000000  00000000  000997a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b5f9  00000000  00000000  0009c3a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00052068  00000000  00000000  000d79a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010407c  00000000  00000000  00129a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000f944  00000000  00000000  0022da84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0023d3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000026c 	.word	0x2000026c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08028e1c 	.word	0x08028e1c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000270 	.word	0x20000270
 80001cc:	08028e1c 	.word	0x08028e1c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000be6:	f000 b9cf 	b.w	8000f88 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f861 	bl	8000cc0 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f854 	bl	8000cc0 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f843 	bl	8000cc0 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f835 	bl	8000cc0 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b984 	b.w	8000f88 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f81a 	bl	8000cc0 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__popcountsi2>:
 8000c98:	0843      	lsrs	r3, r0, #1
 8000c9a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 8000c9e:	1ac0      	subs	r0, r0, r3
 8000ca0:	0883      	lsrs	r3, r0, #2
 8000ca2:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 8000ca6:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 8000caa:	4418      	add	r0, r3
 8000cac:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 8000cb0:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 8000cb4:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 8000cb8:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 8000cbc:	0e00      	lsrs	r0, r0, #24
 8000cbe:	4770      	bx	lr

08000cc0 <__udivmoddi4>:
 8000cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc4:	9e08      	ldr	r6, [sp, #32]
 8000cc6:	460d      	mov	r5, r1
 8000cc8:	4604      	mov	r4, r0
 8000cca:	460f      	mov	r7, r1
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d14a      	bne.n	8000d66 <__udivmoddi4+0xa6>
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	4694      	mov	ip, r2
 8000cd4:	d965      	bls.n	8000da2 <__udivmoddi4+0xe2>
 8000cd6:	fab2 f382 	clz	r3, r2
 8000cda:	b143      	cbz	r3, 8000cee <__udivmoddi4+0x2e>
 8000cdc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ce0:	f1c3 0220 	rsb	r2, r3, #32
 8000ce4:	409f      	lsls	r7, r3
 8000ce6:	fa20 f202 	lsr.w	r2, r0, r2
 8000cea:	4317      	orrs	r7, r2
 8000cec:	409c      	lsls	r4, r3
 8000cee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cf2:	fa1f f58c 	uxth.w	r5, ip
 8000cf6:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cfa:	0c22      	lsrs	r2, r4, #16
 8000cfc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d00:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d04:	fb01 f005 	mul.w	r0, r1, r5
 8000d08:	4290      	cmp	r0, r2
 8000d0a:	d90a      	bls.n	8000d22 <__udivmoddi4+0x62>
 8000d0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d10:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000d14:	f080 811c 	bcs.w	8000f50 <__udivmoddi4+0x290>
 8000d18:	4290      	cmp	r0, r2
 8000d1a:	f240 8119 	bls.w	8000f50 <__udivmoddi4+0x290>
 8000d1e:	3902      	subs	r1, #2
 8000d20:	4462      	add	r2, ip
 8000d22:	1a12      	subs	r2, r2, r0
 8000d24:	b2a4      	uxth	r4, r4
 8000d26:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d2a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d2e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d32:	fb00 f505 	mul.w	r5, r0, r5
 8000d36:	42a5      	cmp	r5, r4
 8000d38:	d90a      	bls.n	8000d50 <__udivmoddi4+0x90>
 8000d3a:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d42:	f080 8107 	bcs.w	8000f54 <__udivmoddi4+0x294>
 8000d46:	42a5      	cmp	r5, r4
 8000d48:	f240 8104 	bls.w	8000f54 <__udivmoddi4+0x294>
 8000d4c:	4464      	add	r4, ip
 8000d4e:	3802      	subs	r0, #2
 8000d50:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	2100      	movs	r1, #0
 8000d58:	b11e      	cbz	r6, 8000d62 <__udivmoddi4+0xa2>
 8000d5a:	40dc      	lsrs	r4, r3
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	e9c6 4300 	strd	r4, r3, [r6]
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0xbc>
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	f000 80ed 	beq.w	8000f4a <__udivmoddi4+0x28a>
 8000d70:	2100      	movs	r1, #0
 8000d72:	e9c6 0500 	strd	r0, r5, [r6]
 8000d76:	4608      	mov	r0, r1
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	fab3 f183 	clz	r1, r3
 8000d80:	2900      	cmp	r1, #0
 8000d82:	d149      	bne.n	8000e18 <__udivmoddi4+0x158>
 8000d84:	42ab      	cmp	r3, r5
 8000d86:	d302      	bcc.n	8000d8e <__udivmoddi4+0xce>
 8000d88:	4282      	cmp	r2, r0
 8000d8a:	f200 80f8 	bhi.w	8000f7e <__udivmoddi4+0x2be>
 8000d8e:	1a84      	subs	r4, r0, r2
 8000d90:	eb65 0203 	sbc.w	r2, r5, r3
 8000d94:	2001      	movs	r0, #1
 8000d96:	4617      	mov	r7, r2
 8000d98:	2e00      	cmp	r6, #0
 8000d9a:	d0e2      	beq.n	8000d62 <__udivmoddi4+0xa2>
 8000d9c:	e9c6 4700 	strd	r4, r7, [r6]
 8000da0:	e7df      	b.n	8000d62 <__udivmoddi4+0xa2>
 8000da2:	b902      	cbnz	r2, 8000da6 <__udivmoddi4+0xe6>
 8000da4:	deff      	udf	#255	; 0xff
 8000da6:	fab2 f382 	clz	r3, r2
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 8090 	bne.w	8000ed0 <__udivmoddi4+0x210>
 8000db0:	1a8a      	subs	r2, r1, r2
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2101      	movs	r1, #1
 8000dbc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dc0:	fb07 2015 	mls	r0, r7, r5, r2
 8000dc4:	0c22      	lsrs	r2, r4, #16
 8000dc6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dca:	fb0e f005 	mul.w	r0, lr, r5
 8000dce:	4290      	cmp	r0, r2
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x124>
 8000dd2:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x122>
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2b8>
 8000de2:	4645      	mov	r5, r8
 8000de4:	1a12      	subs	r2, r2, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dec:	fb07 2210 	mls	r2, r7, r0, r2
 8000df0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x14e>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x14c>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2c2>
 8000e0c:	4610      	mov	r0, r2
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e16:	e79f      	b.n	8000d58 <__udivmoddi4+0x98>
 8000e18:	f1c1 0720 	rsb	r7, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa05 f401 	lsl.w	r4, r5, r1
 8000e2a:	fa20 f307 	lsr.w	r3, r0, r7
 8000e2e:	40fd      	lsrs	r5, r7
 8000e30:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e34:	4323      	orrs	r3, r4
 8000e36:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e3a:	fa1f fe8c 	uxth.w	lr, ip
 8000e3e:	fb09 5518 	mls	r5, r9, r8, r5
 8000e42:	0c1c      	lsrs	r4, r3, #16
 8000e44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e48:	fb08 f50e 	mul.w	r5, r8, lr
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e52:	fa00 f001 	lsl.w	r0, r0, r1
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b0>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2b4>
 8000e64:	42a5      	cmp	r5, r4
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2b4>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4464      	add	r4, ip
 8000e70:	1b64      	subs	r4, r4, r5
 8000e72:	b29d      	uxth	r5, r3
 8000e74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e78:	fb09 4413 	mls	r4, r9, r3, r4
 8000e7c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e80:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1da>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2ac>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2ac>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e9e:	fba3 9502 	umull	r9, r5, r3, r2
 8000ea2:	eba4 040e 	sub.w	r4, r4, lr
 8000ea6:	42ac      	cmp	r4, r5
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46ae      	mov	lr, r5
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x29c>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x298>
 8000eb0:	b156      	cbz	r6, 8000ec8 <__udivmoddi4+0x208>
 8000eb2:	ebb0 0208 	subs.w	r2, r0, r8
 8000eb6:	eb64 040e 	sbc.w	r4, r4, lr
 8000eba:	fa04 f707 	lsl.w	r7, r4, r7
 8000ebe:	40ca      	lsrs	r2, r1
 8000ec0:	40cc      	lsrs	r4, r1
 8000ec2:	4317      	orrs	r7, r2
 8000ec4:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	2100      	movs	r1, #0
 8000ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed0:	f1c3 0120 	rsb	r1, r3, #32
 8000ed4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed8:	fa20 f201 	lsr.w	r2, r0, r1
 8000edc:	fa25 f101 	lsr.w	r1, r5, r1
 8000ee0:	409d      	lsls	r5, r3
 8000ee2:	432a      	orrs	r2, r5
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ef0:	fb07 1510 	mls	r5, r7, r0, r1
 8000ef4:	0c11      	lsrs	r1, r2, #16
 8000ef6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000efa:	fb00 f50e 	mul.w	r5, r0, lr
 8000efe:	428d      	cmp	r5, r1
 8000f00:	fa04 f403 	lsl.w	r4, r4, r3
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x258>
 8000f06:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b0>
 8000f10:	428d      	cmp	r5, r1
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b0>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4461      	add	r1, ip
 8000f18:	1b49      	subs	r1, r1, r5
 8000f1a:	b292      	uxth	r2, r2
 8000f1c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f20:	fb07 1115 	mls	r1, r7, r5, r1
 8000f24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f28:	fb05 f10e 	mul.w	r1, r5, lr
 8000f2c:	4291      	cmp	r1, r2
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x282>
 8000f30:	eb1c 0202 	adds.w	r2, ip, r2
 8000f34:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2a8>
 8000f3a:	4291      	cmp	r1, r2
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2a8>
 8000f3e:	3d02      	subs	r5, #2
 8000f40:	4462      	add	r2, ip
 8000f42:	1a52      	subs	r2, r2, r1
 8000f44:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0xfc>
 8000f4a:	4631      	mov	r1, r6
 8000f4c:	4630      	mov	r0, r6
 8000f4e:	e708      	b.n	8000d62 <__udivmoddi4+0xa2>
 8000f50:	4639      	mov	r1, r7
 8000f52:	e6e6      	b.n	8000d22 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e6fb      	b.n	8000d50 <__udivmoddi4+0x90>
 8000f58:	4548      	cmp	r0, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f0>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f64:	3b01      	subs	r3, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f0>
 8000f68:	4645      	mov	r5, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x282>
 8000f6c:	462b      	mov	r3, r5
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1da>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x258>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b0>
 8000f78:	3d02      	subs	r5, #2
 8000f7a:	4462      	add	r2, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x124>
 8000f7e:	4608      	mov	r0, r1
 8000f80:	e70a      	b.n	8000d98 <__udivmoddi4+0xd8>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x14e>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <AdapterSSD1306_Init>:
void AdapterSSD1306_SetDisplayColor(bool dark_mode);



void AdapterSSD1306_Init()
{
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8000f92:	af00      	add	r7, sp, #0
    ssd1306_Init();
 8000f94:	f022 fa36 	bl	8023404 <ssd1306_Init>
    AdapterSSD1306_SetDisplayColor(darkMode);
 8000f98:	4b42      	ldr	r3, [pc, #264]	; (80010a4 <AdapterSSD1306_Init+0x118>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 f983 	bl	80012a8 <AdapterSSD1306_SetDisplayColor>

    MenuData_t menuItems[NUM_MENU_PAGES] =
 8000fa2:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000fa6:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000faa:	4618      	mov	r0, r3
 8000fac:	f240 2337 	movw	r3, #567	; 0x237
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	f024 f8ca 	bl	802514c <memset>
 8000fb8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000fbc:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 8000fc0:	4a39      	ldr	r2, [pc, #228]	; (80010a8 <AdapterSSD1306_Init+0x11c>)
 8000fc2:	461c      	mov	r4, r3
 8000fc4:	4615      	mov	r5, r2
 8000fc6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fca:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000fce:	6020      	str	r0, [r4, #0]
 8000fd0:	3404      	adds	r4, #4
 8000fd2:	7021      	strb	r1, [r4, #0]
 8000fd4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000fd8:	f5a3 750e 	sub.w	r5, r3, #568	; 0x238
 8000fdc:	4b33      	ldr	r3, [pc, #204]	; (80010ac <AdapterSSD1306_Init+0x120>)
 8000fde:	f105 0415 	add.w	r4, r5, #21
 8000fe2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000fe4:	6020      	str	r0, [r4, #0]
 8000fe6:	6061      	str	r1, [r4, #4]
 8000fe8:	60a2      	str	r2, [r4, #8]
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	81a3      	strh	r3, [r4, #12]
 8000fee:	f105 0323 	add.w	r3, r5, #35	; 0x23
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	f8c3 2003 	str.w	r2, [r3, #3]
 8000ffa:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8000ffe:	f5a3 760e 	sub.w	r6, r3, #568	; 0x238
 8001002:	4b2b      	ldr	r3, [pc, #172]	; (80010b0 <AdapterSSD1306_Init+0x124>)
 8001004:	f106 042a 	add.w	r4, r6, #42	; 0x2a
 8001008:	461d      	mov	r5, r3
 800100a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100c:	6020      	str	r0, [r4, #0]
 800100e:	6061      	str	r1, [r4, #4]
 8001010:	60a2      	str	r2, [r4, #8]
 8001012:	60e3      	str	r3, [r4, #12]
 8001014:	f106 033a 	add.w	r3, r6, #58	; 0x3a
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	711a      	strb	r2, [r3, #4]
 800101e:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001022:	f5a3 750e 	sub.w	r5, r3, #568	; 0x238
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <AdapterSSD1306_Init+0x128>)
 8001028:	f105 04bd 	add.w	r4, r5, #189	; 0xbd
 800102c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800102e:	6020      	str	r0, [r4, #0]
 8001030:	6061      	str	r1, [r4, #4]
 8001032:	60a2      	str	r2, [r4, #8]
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	81a3      	strh	r3, [r4, #12]
 8001038:	f105 03cb 	add.w	r3, r5, #203	; 0xcb
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	f8c3 2003 	str.w	r2, [r3, #3]
 8001044:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8001048:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 800104c:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <AdapterSSD1306_Init+0x12c>)
 800104e:	f103 05d2 	add.w	r5, r3, #210	; 0xd2
 8001052:	4614      	mov	r4, r2
 8001054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001056:	6028      	str	r0, [r5, #0]
 8001058:	6069      	str	r1, [r5, #4]
 800105a:	60aa      	str	r2, [r5, #8]
 800105c:	60eb      	str	r3, [r5, #12]
 800105e:	6820      	ldr	r0, [r4, #0]
 8001060:	6128      	str	r0, [r5, #16]
 8001062:	7923      	ldrb	r3, [r4, #4]
 8001064:	752b      	strb	r3, [r5, #20]
 8001066:	f507 730e 	add.w	r3, r7, #568	; 0x238
 800106a:	f5a3 760e 	sub.w	r6, r3, #568	; 0x238
 800106e:	4b13      	ldr	r3, [pc, #76]	; (80010bc <AdapterSSD1306_Init+0x130>)
 8001070:	f106 05e7 	add.w	r5, r6, #231	; 0xe7
 8001074:	461c      	mov	r4, r3
 8001076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001078:	6028      	str	r0, [r5, #0]
 800107a:	6069      	str	r1, [r5, #4]
 800107c:	60aa      	str	r2, [r5, #8]
 800107e:	60eb      	str	r3, [r5, #12]
 8001080:	8823      	ldrh	r3, [r4, #0]
 8001082:	822b      	strh	r3, [r5, #16]
 8001084:	f106 03f9 	add.w	r3, r6, #249	; 0xf9
 8001088:	2200      	movs	r2, #0
 800108a:	801a      	strh	r2, [r3, #0]
 800108c:	709a      	strb	r2, [r3, #2]
        {{"CFG:DC Port:0", "ROT:DC SUP:DC FAB:DC", "MODBUS_DRIVER 1.0"}} // Menu 2
        // Adicione mais menus aqui, se necessário
    };

    // Escreve as informações do menu no display
    AdapterSSD1306_WriteMenu( menuItems);
 800108e:	463b      	mov	r3, r7
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f957 	bl	8001344 <AdapterSSD1306_WriteMenu>

    // Inicializa a tarefa de atualização do display
    AdapterSSD1306_InitUpdateTask();
 8001096:	f000 fad9 	bl	800164c <AdapterSSD1306_InitUpdateTask>
}
 800109a:	bf00      	nop
 800109c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	08028e38 	.word	0x08028e38
 80010ac:	08028e50 	.word	0x08028e50
 80010b0:	08028e68 	.word	0x08028e68
 80010b4:	08028e80 	.word	0x08028e80
 80010b8:	08028e98 	.word	0x08028e98
 80010bc:	08028eb0 	.word	0x08028eb0

080010c0 <AdapterSSD1306_LoadMenus>:


void AdapterSSD1306_LoadMenus()
{
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80010c6:	af00      	add	r7, sp, #0

	AdapterSSD1306_SetDisplayColor(darkMode);
 80010c8:	4b6c      	ldr	r3, [pc, #432]	; (800127c <AdapterSSD1306_LoadMenus+0x1bc>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 f8eb 	bl	80012a8 <AdapterSSD1306_SetDisplayColor>
  // Definição dos itens do menu
	MenuData_t menuItems[NUM_MENU_PAGES] =
 80010d2:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010d6:	f5a3 730f 	sub.w	r3, r3, #572	; 0x23c
 80010da:	4618      	mov	r0, r3
 80010dc:	f240 2337 	movw	r3, #567	; 0x237
 80010e0:	461a      	mov	r2, r3
 80010e2:	2100      	movs	r1, #0
 80010e4:	f024 f832 	bl	802514c <memset>
 80010e8:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80010ec:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 80010f0:	4b63      	ldr	r3, [pc, #396]	; (8001280 <AdapterSSD1306_LoadMenus+0x1c0>)
 80010f2:	462c      	mov	r4, r5
 80010f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010f6:	c407      	stmia	r4!, {r0, r1, r2}
 80010f8:	7023      	strb	r3, [r4, #0]
 80010fa:	f105 030d 	add.w	r3, r5, #13
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001108:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 800110c:	4b5d      	ldr	r3, [pc, #372]	; (8001284 <AdapterSSD1306_LoadMenus+0x1c4>)
 800110e:	f105 0415 	add.w	r4, r5, #21
 8001112:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001114:	6020      	str	r0, [r4, #0]
 8001116:	6061      	str	r1, [r4, #4]
 8001118:	60a2      	str	r2, [r4, #8]
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	7323      	strb	r3, [r4, #12]
 800111e:	f105 0322 	add.w	r3, r5, #34	; 0x22
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800112c:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 8001130:	4b55      	ldr	r3, [pc, #340]	; (8001288 <AdapterSSD1306_LoadMenus+0x1c8>)
 8001132:	f105 042a 	add.w	r4, r5, #42	; 0x2a
 8001136:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001138:	6020      	str	r0, [r4, #0]
 800113a:	6061      	str	r1, [r4, #4]
 800113c:	60a2      	str	r2, [r4, #8]
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	7323      	strb	r3, [r4, #12]
 8001142:	f105 0337 	add.w	r3, r5, #55	; 0x37
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001150:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 8001154:	4b4d      	ldr	r3, [pc, #308]	; (800128c <AdapterSSD1306_LoadMenus+0x1cc>)
 8001156:	f105 04bd 	add.w	r4, r5, #189	; 0xbd
 800115a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800115c:	6020      	str	r0, [r4, #0]
 800115e:	6061      	str	r1, [r4, #4]
 8001160:	60a2      	str	r2, [r4, #8]
 8001162:	881b      	ldrh	r3, [r3, #0]
 8001164:	81a3      	strh	r3, [r4, #12]
 8001166:	f105 03cb 	add.w	r3, r5, #203	; 0xcb
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	f8c3 2003 	str.w	r2, [r3, #3]
 8001172:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001176:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 800117a:	4b45      	ldr	r3, [pc, #276]	; (8001290 <AdapterSSD1306_LoadMenus+0x1d0>)
 800117c:	f105 04d2 	add.w	r4, r5, #210	; 0xd2
 8001180:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001182:	6020      	str	r0, [r4, #0]
 8001184:	6061      	str	r1, [r4, #4]
 8001186:	60a2      	str	r2, [r4, #8]
 8001188:	f105 03de 	add.w	r3, r5, #222	; 0xde
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	721a      	strb	r2, [r3, #8]
 8001194:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001198:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 800119c:	4b3d      	ldr	r3, [pc, #244]	; (8001294 <AdapterSSD1306_LoadMenus+0x1d4>)
 800119e:	f105 04e7 	add.w	r4, r5, #231	; 0xe7
 80011a2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80011a4:	6020      	str	r0, [r4, #0]
 80011a6:	6061      	str	r1, [r4, #4]
 80011a8:	60a2      	str	r2, [r4, #8]
 80011aa:	f105 03f3 	add.w	r3, r5, #243	; 0xf3
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	721a      	strb	r2, [r3, #8]
 80011b6:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80011ba:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 80011be:	4b36      	ldr	r3, [pc, #216]	; (8001298 <AdapterSSD1306_LoadMenus+0x1d8>)
 80011c0:	f505 74bd 	add.w	r4, r5, #378	; 0x17a
 80011c4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80011c6:	6020      	str	r0, [r4, #0]
 80011c8:	6061      	str	r1, [r4, #4]
 80011ca:	60a2      	str	r2, [r4, #8]
 80011cc:	881a      	ldrh	r2, [r3, #0]
 80011ce:	789b      	ldrb	r3, [r3, #2]
 80011d0:	81a2      	strh	r2, [r4, #12]
 80011d2:	73a3      	strb	r3, [r4, #14]
 80011d4:	f205 1389 	addw	r3, r5, #393	; 0x189
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	809a      	strh	r2, [r3, #4]
 80011de:	f507 7310 	add.w	r3, r7, #576	; 0x240
 80011e2:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 80011e6:	4b2d      	ldr	r3, [pc, #180]	; (800129c <AdapterSSD1306_LoadMenus+0x1dc>)
 80011e8:	f205 148f 	addw	r4, r5, #399	; 0x18f
 80011ec:	cb07      	ldmia	r3!, {r0, r1, r2}
 80011ee:	6020      	str	r0, [r4, #0]
 80011f0:	6061      	str	r1, [r4, #4]
 80011f2:	60a2      	str	r2, [r4, #8]
 80011f4:	881a      	ldrh	r2, [r3, #0]
 80011f6:	789b      	ldrb	r3, [r3, #2]
 80011f8:	81a2      	strh	r2, [r4, #12]
 80011fa:	73a3      	strb	r3, [r4, #14]
 80011fc:	f505 73cf 	add.w	r3, r5, #414	; 0x19e
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	809a      	strh	r2, [r3, #4]
 8001206:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800120a:	f5a3 750f 	sub.w	r5, r3, #572	; 0x23c
 800120e:	4b24      	ldr	r3, [pc, #144]	; (80012a0 <AdapterSSD1306_LoadMenus+0x1e0>)
 8001210:	f505 74d2 	add.w	r4, r5, #420	; 0x1a4
 8001214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001216:	c407      	stmia	r4!, {r0, r1, r2}
 8001218:	8023      	strh	r3, [r4, #0]
 800121a:	3402      	adds	r4, #2
 800121c:	0c1b      	lsrs	r3, r3, #16
 800121e:	7023      	strb	r3, [r4, #0]
 8001220:	f205 13b3 	addw	r3, r5, #435	; 0x1b3
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	809a      	strh	r2, [r3, #4]
		{{"ROT:Port:22000","SUP:Port:22001", "FAB:Port:22002"}}// Menu 2
		// Adicione mais menus aqui, se necessário
	};

	// Copiar os itens definidos para a estrutura menuDisplay
	for (int page = 0; page < NUM_MENU_PAGES; ++page)
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8001230:	e018      	b.n	8001264 <AdapterSSD1306_LoadMenus+0x1a4>
	{
		memcpy(menuDisplay.items[page], menuItems[page].items, sizeof(menuItems[page].items));
 8001232:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8001236:	4613      	mov	r3, r2
 8001238:	019b      	lsls	r3, r3, #6
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <AdapterSSD1306_LoadMenus+0x1e4>)
 800123e:	1898      	adds	r0, r3, r2
 8001240:	1d39      	adds	r1, r7, #4
 8001242:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8001246:	4613      	mov	r3, r2
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	4413      	add	r3, r2
 800124c:	019a      	lsls	r2, r3, #6
 800124e:	1ad2      	subs	r2, r2, r3
 8001250:	188b      	adds	r3, r1, r2
 8001252:	22bd      	movs	r2, #189	; 0xbd
 8001254:	4619      	mov	r1, r3
 8001256:	f025 fa72 	bl	802673e <memcpy>
	for (int page = 0; page < NUM_MENU_PAGES; ++page)
 800125a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800125e:	3301      	adds	r3, #1
 8001260:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8001264:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001268:	2b02      	cmp	r3, #2
 800126a:	dde2      	ble.n	8001232 <AdapterSSD1306_LoadMenus+0x172>
	}

	// Escreve as informações do menu no display
	AdapterSSD1306_WriteMenu(&menuDisplay);
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <AdapterSSD1306_LoadMenus+0x1e4>)
 800126e:	f000 f869 	bl	8001344 <AdapterSSD1306_WriteMenu>
}
 8001272:	bf00      	nop
 8001274:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8001278:	46bd      	mov	sp, r7
 800127a:	bdb0      	pop	{r4, r5, r7, pc}
 800127c:	20000000 	.word	0x20000000
 8001280:	08028ec8 	.word	0x08028ec8
 8001284:	08028ee0 	.word	0x08028ee0
 8001288:	08028ef8 	.word	0x08028ef8
 800128c:	08028f10 	.word	0x08028f10
 8001290:	08028f28 	.word	0x08028f28
 8001294:	08028f40 	.word	0x08028f40
 8001298:	08028f58 	.word	0x08028f58
 800129c:	08028f70 	.word	0x08028f70
 80012a0:	08028f88 	.word	0x08028f88
 80012a4:	20000290 	.word	0x20000290

080012a8 <AdapterSSD1306_SetDisplayColor>:




void AdapterSSD1306_SetDisplayColor(bool dark_mode)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
    darkMode = dark_mode;
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <AdapterSSD1306_SetDisplayColor+0x34>)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	7013      	strb	r3, [r2, #0]
    if (darkMode)
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <AdapterSSD1306_SetDisplayColor+0x34>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <AdapterSSD1306_SetDisplayColor+0x20>
    {
        ssd1306_Fill(Black);
 80012c0:	2000      	movs	r0, #0
 80012c2:	f022 f907 	bl	80234d4 <ssd1306_Fill>
 80012c6:	e002      	b.n	80012ce <AdapterSSD1306_SetDisplayColor+0x26>
    }
    else
    {
        ssd1306_Fill(White);
 80012c8:	2001      	movs	r0, #1
 80012ca:	f022 f903 	bl	80234d4 <ssd1306_Fill>
    }
    osDelay(50);
 80012ce:	2032      	movs	r0, #50	; 0x32
 80012d0:	f008 ff48 	bl	800a164 <osDelay>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000000 	.word	0x20000000

080012e0 <AdapterSSD1306_Refresh>:

void AdapterSSD1306_Refresh(uint16_t page, uint16_t line)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b0b2      	sub	sp, #200	; 0xc8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	460a      	mov	r2, r1
 80012ea:	80fb      	strh	r3, [r7, #6]
 80012ec:	4613      	mov	r3, r2
 80012ee:	80bb      	strh	r3, [r7, #4]

	MenuData_t menu = { 0 };
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	22bd      	movs	r2, #189	; 0xbd
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f023 ff27 	bl	802514c <memset>

	snprintf(menu.items[page][line], sizeof(menu.items[page][line]),"                    ");
 80012fe:	88f9      	ldrh	r1, [r7, #6]
 8001300:	88ba      	ldrh	r2, [r7, #4]
 8001302:	f107 0008 	add.w	r0, r7, #8
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	00da      	lsls	r2, r3, #3
 800130e:	1ad2      	subs	r2, r2, r3
 8001310:	460b      	mov	r3, r1
 8001312:	019b      	lsls	r3, r3, #6
 8001314:	1a5b      	subs	r3, r3, r1
 8001316:	4413      	add	r3, r2
 8001318:	4403      	add	r3, r0
 800131a:	4a09      	ldr	r2, [pc, #36]	; (8001340 <AdapterSSD1306_Refresh+0x60>)
 800131c:	2115      	movs	r1, #21
 800131e:	4618      	mov	r0, r3
 8001320:	f023 fdbc 	bl	8024e9c <sniprintf>

	portENTER_CRITICAL();
 8001324:	f00b ff3e 	bl	800d1a4 <vPortEnterCritical>
	AdapterSSD1306_WriteMenu(&menu);
 8001328:	f107 0308 	add.w	r3, r7, #8
 800132c:	4618      	mov	r0, r3
 800132e:	f000 f809 	bl	8001344 <AdapterSSD1306_WriteMenu>
	portEXIT_CRITICAL();
 8001332:	f00b ff67 	bl	800d204 <vPortExitCritical>
}
 8001336:	bf00      	nop
 8001338:	37c8      	adds	r7, #200	; 0xc8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	08028fa0 	.word	0x08028fa0

08001344 <AdapterSSD1306_WriteMenu>:


void AdapterSSD1306_WriteMenu(const MenuData_t *menu_data)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
    // Limpa o display antes de escrever as novas informações
    // clear_display();

    // Escreve cada linha do menu no display
    int start_index = current_page * MENU_ITEMS_PER_PAGE;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <AdapterSSD1306_WriteMenu+0x64>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	4613      	mov	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	4413      	add	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
    int end_index = start_index + MENU_ITEMS_PER_PAGE;
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	3303      	adds	r3, #3
 800135c:	60fb      	str	r3, [r7, #12]

    for (int i = start_index; i < end_index; i++)
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	e018      	b.n	8001396 <AdapterSSD1306_WriteMenu+0x52>
    {
        AdapterSSD1306_WriteLine(menu_data->items[current_page][i - start_index], i - start_index);
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <AdapterSSD1306_WriteMenu+0x64>)
 8001366:	6819      	ldr	r1, [r3, #0]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad2      	subs	r2, r2, r3
 800136e:	4613      	mov	r3, r2
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4413      	add	r3, r2
 8001374:	00da      	lsls	r2, r3, #3
 8001376:	1ad2      	subs	r2, r2, r3
 8001378:	460b      	mov	r3, r1
 800137a:	019b      	lsls	r3, r3, #6
 800137c:	1a5b      	subs	r3, r3, r1
 800137e:	4413      	add	r3, r2
 8001380:	687a      	ldr	r2, [r7, #4]
 8001382:	18d0      	adds	r0, r2, r3
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	4619      	mov	r1, r3
 800138c:	f000 f80e 	bl	80013ac <AdapterSSD1306_WriteLine>
    for (int i = start_index; i < end_index; i++)
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	3301      	adds	r3, #1
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbe2      	blt.n	8001364 <AdapterSSD1306_WriteMenu+0x20>
    }
    // Atualiza o display
    //update_display();
}
 800139e:	bf00      	nop
 80013a0:	bf00      	nop
 80013a2:	3718      	adds	r7, #24
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000288 	.word	0x20000288

080013ac <AdapterSSD1306_WriteLine>:

// Função para escrever uma linha do menu no display
void AdapterSSD1306_WriteLine(const char *text, int line_number)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    // Define a posição vertical da linha baseada no número da linha
    int vertical_position = 2 + line_number * 10; // Ajuste conforme necessário
 80013b6:	683a      	ldr	r2, [r7, #0]
 80013b8:	4613      	mov	r3, r2
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	4413      	add	r3, r2
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	3302      	adds	r3, #2
 80013c2:	60fb      	str	r3, [r7, #12]
    ssd1306_SetCursor(1, vertical_position);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	b2db      	uxtb	r3, r3
 80013c8:	4619      	mov	r1, r3
 80013ca:	2001      	movs	r0, #1
 80013cc:	f022 f9c4 	bl	8023758 <ssd1306_SetCursor>

    if (darkMode)
 80013d0:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <AdapterSSD1306_WriteLine+0x54>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d006      	beq.n	80013e6 <AdapterSSD1306_WriteLine+0x3a>
    {
        ssd1306_WriteString(text, Font_6x8, White);
 80013d8:	4a0a      	ldr	r2, [pc, #40]	; (8001404 <AdapterSSD1306_WriteLine+0x58>)
 80013da:	2301      	movs	r3, #1
 80013dc:	ca06      	ldmia	r2, {r1, r2}
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f022 f994 	bl	802370c <ssd1306_WriteString>
 80013e4:	e005      	b.n	80013f2 <AdapterSSD1306_WriteLine+0x46>
    }
    else
    {
        ssd1306_WriteString(text, Font_6x8, Black);
 80013e6:	4a07      	ldr	r2, [pc, #28]	; (8001404 <AdapterSSD1306_WriteLine+0x58>)
 80013e8:	2300      	movs	r3, #0
 80013ea:	ca06      	ldmia	r2, {r1, r2}
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f022 f98d 	bl	802370c <ssd1306_WriteString>
    }

    ssd1306_UpdateScreen();
 80013f2:	f022 f887 	bl	8023504 <ssd1306_UpdateScreen>
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000
 8001404:	20000038 	.word	0x20000038

08001408 <AdapterSSD1306_NextPage>:

void AdapterSSD1306_NextPage()
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
    current_page = (current_page + 1) % NUM_MENU_PAGES;
 800140c:	4b0b      	ldr	r3, [pc, #44]	; (800143c <AdapterSSD1306_NextPage+0x34>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	1c59      	adds	r1, r3, #1
 8001412:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <AdapterSSD1306_NextPage+0x38>)
 8001414:	fb83 3201 	smull	r3, r2, r3, r1
 8001418:	17cb      	asrs	r3, r1, #31
 800141a:	1ad2      	subs	r2, r2, r3
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	1aca      	subs	r2, r1, r3
 8001424:	4b05      	ldr	r3, [pc, #20]	; (800143c <AdapterSSD1306_NextPage+0x34>)
 8001426:	601a      	str	r2, [r3, #0]
    AdapterSSD1306_SetDisplayColor(darkMode);
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <AdapterSSD1306_NextPage+0x3c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff3b 	bl	80012a8 <AdapterSSD1306_SetDisplayColor>
    AdapterSSD1306_WriteMenu(&menuDisplay);
 8001432:	4805      	ldr	r0, [pc, #20]	; (8001448 <AdapterSSD1306_NextPage+0x40>)
 8001434:	f7ff ff86 	bl	8001344 <AdapterSSD1306_WriteMenu>
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000288 	.word	0x20000288
 8001440:	55555556 	.word	0x55555556
 8001444:	20000000 	.word	0x20000000
 8001448:	20000290 	.word	0x20000290

0800144c <AdapterSSD1306_PreviousPage>:

void AdapterSSD1306_PreviousPage()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
    current_page = (current_page - 1 + NUM_MENU_PAGES) % NUM_MENU_PAGES;
 8001450:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <AdapterSSD1306_PreviousPage+0x34>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	1c99      	adds	r1, r3, #2
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <AdapterSSD1306_PreviousPage+0x38>)
 8001458:	fb83 3201 	smull	r3, r2, r3, r1
 800145c:	17cb      	asrs	r3, r1, #31
 800145e:	1ad2      	subs	r2, r2, r3
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	1aca      	subs	r2, r1, r3
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <AdapterSSD1306_PreviousPage+0x34>)
 800146a:	601a      	str	r2, [r3, #0]
    AdapterSSD1306_SetDisplayColor(darkMode);
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <AdapterSSD1306_PreviousPage+0x3c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff19 	bl	80012a8 <AdapterSSD1306_SetDisplayColor>
    AdapterSSD1306_WriteMenu(&menuDisplay);
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <AdapterSSD1306_PreviousPage+0x40>)
 8001478:	f7ff ff64 	bl	8001344 <AdapterSSD1306_WriteMenu>
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000288 	.word	0x20000288
 8001484:	55555556 	.word	0x55555556
 8001488:	20000000 	.word	0x20000000
 800148c:	20000290 	.word	0x20000290

08001490 <AdapterSSD1306_DarkMode>:

void AdapterSSD1306_DarkMode(bool enable)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	4603      	mov	r3, r0
 8001498:	71fb      	strb	r3, [r7, #7]
    AdapterSSD1306_SetDisplayColor(enable);
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff03 	bl	80012a8 <AdapterSSD1306_SetDisplayColor>
    AdapterSSD1306_WriteMenu(&menuDisplay);
 80014a2:	4803      	ldr	r0, [pc, #12]	; (80014b0 <AdapterSSD1306_DarkMode+0x20>)
 80014a4:	f7ff ff4e 	bl	8001344 <AdapterSSD1306_WriteMenu>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000290 	.word	0x20000290

080014b4 <AdapterSSD1306_UpdateTask>:


void AdapterSSD1306_UpdateTask(void const *argument)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0b2      	sub	sp, #200	; 0xc8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

	osDelay(2000);
 80014bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014c0:	f008 fe50 	bl	800a164 <osDelay>

	AdapterSSD1306_LoadMenus();
 80014c4:	f7ff fdfc 	bl	80010c0 <AdapterSSD1306_LoadMenus>
    MenuData_t receivedMenu = {0};
 80014c8:	f107 0308 	add.w	r3, r7, #8
 80014cc:	22bd      	movs	r2, #189	; 0xbd
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f023 fe3b 	bl	802514c <memset>

    while (1)
    {
        if (xQueueReceive(menuQueueHandle, &receivedMenu, portMAX_DELAY) == pdPASS)
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <AdapterSSD1306_UpdateTask+0x68>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f107 0108 	add.w	r1, r7, #8
 80014de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014e2:	4618      	mov	r0, r3
 80014e4:	f009 fd1e 	bl	800af24 <xQueueReceive>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d112      	bne.n	8001514 <AdapterSSD1306_UpdateTask+0x60>
        {
            if (AdapterSSD1306_RefreshDisplay(&receivedMenu, &menuDisplay))
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	490b      	ldr	r1, [pc, #44]	; (8001520 <AdapterSSD1306_UpdateTask+0x6c>)
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f815 	bl	8001524 <AdapterSSD1306_RefreshDisplay>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d002      	beq.n	8001506 <AdapterSSD1306_UpdateTask+0x52>
            {
                AdapterSSD1306_WriteMenu(&menuDisplay);
 8001500:	4807      	ldr	r0, [pc, #28]	; (8001520 <AdapterSSD1306_UpdateTask+0x6c>)
 8001502:	f7ff ff1f 	bl	8001344 <AdapterSSD1306_WriteMenu>
            }
            memset(&receivedMenu, 0, sizeof(MenuData_t));
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	22bd      	movs	r2, #189	; 0xbd
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f023 fe1c 	bl	802514c <memset>
        }
        osDelay(10);
 8001514:	200a      	movs	r0, #10
 8001516:	f008 fe25 	bl	800a164 <osDelay>
        if (xQueueReceive(menuQueueHandle, &receivedMenu, portMAX_DELAY) == pdPASS)
 800151a:	e7dc      	b.n	80014d6 <AdapterSSD1306_UpdateTask+0x22>
 800151c:	20001718 	.word	0x20001718
 8001520:	20000290 	.word	0x20000290

08001524 <AdapterSSD1306_RefreshDisplay>:
    }
}

bool AdapterSSD1306_RefreshDisplay(MenuData_t *receivedMenu, MenuData_t *menuDisplay)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
    bool ret = false;
 800152e:	2300      	movs	r3, #0
 8001530:	75fb      	strb	r3, [r7, #23]
    // Verificar se receivedMenu e menuDisplay são válidos
    if (receivedMenu == NULL || menuDisplay == NULL)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d002      	beq.n	800153e <AdapterSSD1306_RefreshDisplay+0x1a>
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <AdapterSSD1306_RefreshDisplay+0x1e>
    {
        return ret; // Retorna sem fazer nada se algum deles for nulo
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	e067      	b.n	8001612 <AdapterSSD1306_RefreshDisplay+0xee>
    }

    // Iterar sobre todas as páginas e itens do menu
    for (int i = 0; i < NUM_MENU_PAGES; ++i)
 8001542:	2300      	movs	r3, #0
 8001544:	613b      	str	r3, [r7, #16]
 8001546:	e060      	b.n	800160a <AdapterSSD1306_RefreshDisplay+0xe6>
    {
        for (int j = 0; j < MENU_ITEMS_PER_PAGE; ++j)
 8001548:	2300      	movs	r3, #0
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	e057      	b.n	80015fe <AdapterSSD1306_RefreshDisplay+0xda>
        {
            // Verificar se o índice está dentro dos limites do array
            if (i < NUM_MENU_PAGES && j < MENU_ITEMS_PER_PAGE)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	2b02      	cmp	r3, #2
 8001552:	dc51      	bgt.n	80015f8 <AdapterSSD1306_RefreshDisplay+0xd4>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b02      	cmp	r3, #2
 8001558:	dc4e      	bgt.n	80015f8 <AdapterSSD1306_RefreshDisplay+0xd4>
            {
                // Verificar se o item atual difere do item recebido
                if (strcmp(menuDisplay->items[i][j], receivedMenu->items[i][j]) != 0)
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4613      	mov	r3, r2
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	4413      	add	r3, r2
 8001562:	00da      	lsls	r2, r3, #3
 8001564:	1ad2      	subs	r2, r2, r3
 8001566:	6939      	ldr	r1, [r7, #16]
 8001568:	460b      	mov	r3, r1
 800156a:	019b      	lsls	r3, r3, #6
 800156c:	1a5b      	subs	r3, r3, r1
 800156e:	4413      	add	r3, r2
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	18d0      	adds	r0, r2, r3
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	00da      	lsls	r2, r3, #3
 800157e:	1ad2      	subs	r2, r2, r3
 8001580:	6939      	ldr	r1, [r7, #16]
 8001582:	460b      	mov	r3, r1
 8001584:	019b      	lsls	r3, r3, #6
 8001586:	1a5b      	subs	r3, r3, r1
 8001588:	4413      	add	r3, r2
 800158a:	687a      	ldr	r2, [r7, #4]
 800158c:	4413      	add	r3, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7fe fe1e 	bl	80001d0 <strcmp>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d02e      	beq.n	80015f8 <AdapterSSD1306_RefreshDisplay+0xd4>
                {
                    // Se houver diferença, copiar o novo item para o menuDisplay
                    if (strcmp(receivedMenu->items[i][j], "") != 0)
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	4613      	mov	r3, r2
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	4413      	add	r3, r2
 80015a2:	00da      	lsls	r2, r3, #3
 80015a4:	1ad2      	subs	r2, r2, r3
 80015a6:	6939      	ldr	r1, [r7, #16]
 80015a8:	460b      	mov	r3, r1
 80015aa:	019b      	lsls	r3, r3, #6
 80015ac:	1a5b      	subs	r3, r3, r1
 80015ae:	4413      	add	r3, r2
 80015b0:	687a      	ldr	r2, [r7, #4]
 80015b2:	4413      	add	r3, r2
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d01e      	beq.n	80015f8 <AdapterSSD1306_RefreshDisplay+0xd4>
                    {
                        strcpy(menuDisplay->items[i][j], receivedMenu->items[i][j]);
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	00da      	lsls	r2, r3, #3
 80015c4:	1ad2      	subs	r2, r2, r3
 80015c6:	6939      	ldr	r1, [r7, #16]
 80015c8:	460b      	mov	r3, r1
 80015ca:	019b      	lsls	r3, r3, #6
 80015cc:	1a5b      	subs	r3, r3, r1
 80015ce:	4413      	add	r3, r2
 80015d0:	683a      	ldr	r2, [r7, #0]
 80015d2:	18d0      	adds	r0, r2, r3
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	00da      	lsls	r2, r3, #3
 80015de:	1ad2      	subs	r2, r2, r3
 80015e0:	6939      	ldr	r1, [r7, #16]
 80015e2:	460b      	mov	r3, r1
 80015e4:	019b      	lsls	r3, r3, #6
 80015e6:	1a5b      	subs	r3, r3, r1
 80015e8:	4413      	add	r3, r2
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f025 f89d 	bl	802672e <strcpy>
                        ret = true;
 80015f4:	2301      	movs	r3, #1
 80015f6:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < MENU_ITEMS_PER_PAGE; ++j)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	3301      	adds	r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2b02      	cmp	r3, #2
 8001602:	dda4      	ble.n	800154e <AdapterSSD1306_RefreshDisplay+0x2a>
    for (int i = 0; i < NUM_MENU_PAGES; ++i)
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	3301      	adds	r3, #1
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	2b02      	cmp	r3, #2
 800160e:	dd9b      	ble.n	8001548 <AdapterSSD1306_RefreshDisplay+0x24>
                    }
                }
            }
        }
    }
    return ret;
 8001610:	7dfb      	ldrb	r3, [r7, #23]
}
 8001612:	4618      	mov	r0, r3
 8001614:	3718      	adds	r7, #24
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <AdapterSSD1306_SendDataToMenuQueueUpdate>:

void AdapterSSD1306_SendDataToMenuQueueUpdate(const MenuData_t *menu_data)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    // Tenta enviar os dados para a fila, aguardando até que haja espaço na fila
    if (xQueueSend(menuQueueHandle, menu_data, portMAX_DELAY) != pdPASS)
 8001624:	4b08      	ldr	r3, [pc, #32]	; (8001648 <AdapterSSD1306_SendDataToMenuQueueUpdate+0x2c>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	f009 fa52 	bl	800aad8 <xQueueGenericSend>
 8001634:	4603      	mov	r3, r0
 8001636:	2b01      	cmp	r3, #1
 8001638:	d002      	beq.n	8001640 <AdapterSSD1306_SendDataToMenuQueueUpdate+0x24>
    {
        vTaskDelay(pdMS_TO_TICKS(50));
 800163a:	2032      	movs	r0, #50	; 0x32
 800163c:	f00a fa98 	bl	800bb70 <vTaskDelay>
    }
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}
 8001648:	20001718 	.word	0x20001718

0800164c <AdapterSSD1306_InitUpdateTask>:

void AdapterSSD1306_InitUpdateTask()
{
 800164c:	b5b0      	push	{r4, r5, r7, lr}
 800164e:	b088      	sub	sp, #32
 8001650:	af00      	add	r7, sp, #0
    /* definition and creation of tcpServerTask */
    osThreadDef(updateDisplayTask, AdapterSSD1306_UpdateTask, osPriorityBelowNormal, 0, UPDATE_DISPLAY_TASK_STACK_SIZE);
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <AdapterSSD1306_InitUpdateTask+0x30>)
 8001654:	1d3c      	adds	r4, r7, #4
 8001656:	461d      	mov	r5, r3
 8001658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800165a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800165c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001660:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    updateDisplayTaskHandle = osThreadCreate(osThread(updateDisplayTask), NULL);
 8001664:	1d3b      	adds	r3, r7, #4
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f008 fd2f 	bl	800a0cc <osThreadCreate>
 800166e:	4603      	mov	r3, r0
 8001670:	4a03      	ldr	r2, [pc, #12]	; (8001680 <AdapterSSD1306_InitUpdateTask+0x34>)
 8001672:	6013      	str	r3, [r2, #0]
}
 8001674:	bf00      	nop
 8001676:	3720      	adds	r7, #32
 8001678:	46bd      	mov	sp, r7
 800167a:	bdb0      	pop	{r4, r5, r7, pc}
 800167c:	08028fcc 	.word	0x08028fcc
 8001680:	2000028c 	.word	0x2000028c

08001684 <FileSystemInit>:
 *         - Criação de diretórios;
 *         - Leitura do arquivo de configurações;
 * @retval Nonecfg
 */
int FileSystemInit()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0

	  LOG2("Iniciando sistema de arquivos ... ");

	  int status = lfs_storage_init(&cfg);
 800168a:	4829      	ldr	r0, [pc, #164]	; (8001730 <FileSystemInit+0xac>)
 800168c:	f001 f9ce 	bl	8002a2c <lfs_storage_init>
 8001690:	6078      	str	r0, [r7, #4]

	  if (!status)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <FileSystemInit+0x18>
	  {
		  LOG2( "erro: %i", status);
	    return status;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	e045      	b.n	8001728 <FileSystemInit+0xa4>
	  }

	  LOG2("File system start.");

  lfs_get_default_config(&cfg);
 800169c:	4824      	ldr	r0, [pc, #144]	; (8001730 <FileSystemInit+0xac>)
 800169e:	f001 f9af 	bl	8002a00 <lfs_get_default_config>

  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 80016a2:	2300      	movs	r3, #0
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	e016      	b.n	80016d6 <FileSystemInit+0x52>
  {
    openFile[i].number = 0;
 80016a8:	4a22      	ldr	r2, [pc, #136]	; (8001734 <FileSystemInit+0xb0>)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	2158      	movs	r1, #88	; 0x58
 80016ae:	fb01 f303 	mul.w	r3, r1, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
    memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	2258      	movs	r2, #88	; 0x58
 80016bc:	fb02 f303 	mul.w	r3, r2, r3
 80016c0:	4a1c      	ldr	r2, [pc, #112]	; (8001734 <FileSystemInit+0xb0>)
 80016c2:	4413      	add	r3, r2
 80016c4:	3304      	adds	r3, #4
 80016c6:	2254      	movs	r2, #84	; 0x54
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f023 fd3e 	bl	802514c <memset>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2b03      	cmp	r3, #3
 80016da:	dde5      	ble.n	80016a8 <FileSystemInit+0x24>
  }


  LOG2("Mount file system  ... ");

  status = lfs_mount(&lfs, &cfg);
 80016dc:	4914      	ldr	r1, [pc, #80]	; (8001730 <FileSystemInit+0xac>)
 80016de:	4816      	ldr	r0, [pc, #88]	; (8001738 <FileSystemInit+0xb4>)
 80016e0:	f012 f91e 	bl	8013920 <lfs_mount>
 80016e4:	6078      	str	r0, [r7, #4]
  if (status)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d008      	beq.n	80016fe <FileSystemInit+0x7a>
  {
	  LOG2("erro: %i", status);
    // Se sistema de arquivos corrompido
    if (status == LFS_ERR_CORRUPT)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80016f2:	d104      	bne.n	80016fe <FileSystemInit+0x7a>
    {
      // Formata o sistema de arquivos
    	LOG2("Format file system ... ");
      status = lfs_format(&lfs, &cfg);
 80016f4:	490e      	ldr	r1, [pc, #56]	; (8001730 <FileSystemInit+0xac>)
 80016f6:	4810      	ldr	r0, [pc, #64]	; (8001738 <FileSystemInit+0xb4>)
 80016f8:	f012 f8fc 	bl	80138f4 <lfs_format>
 80016fc:	6078      	str	r0, [r7, #4]
    	  LOG2("erro: %d", status);
      }
    }
  }

  if (status == LFS_ERR_OK)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d110      	bne.n	8001726 <FileSystemInit+0xa2>
  {
	  LOG2("OK");
    lfs_mounted = 1;
 8001704:	4b0d      	ldr	r3, [pc, #52]	; (800173c <FileSystemInit+0xb8>)
 8001706:	2201      	movs	r2, #1
 8001708:	601a      	str	r2, [r3, #0]

    // Cria diretório de configurações
    lfs_mkdir(&lfs, FILESYSTEM_FOLDER_MAP);
 800170a:	490d      	ldr	r1, [pc, #52]	; (8001740 <FileSystemInit+0xbc>)
 800170c:	480a      	ldr	r0, [pc, #40]	; (8001738 <FileSystemInit+0xb4>)
 800170e:	f012 fa25 	bl	8013b5c <lfs_mkdir>
    lfs_mkdir(&lfs, FILESYSTEM_FOLDER_CONFIG);
 8001712:	490c      	ldr	r1, [pc, #48]	; (8001744 <FileSystemInit+0xc0>)
 8001714:	4808      	ldr	r0, [pc, #32]	; (8001738 <FileSystemInit+0xb4>)
 8001716:	f012 fa21 	bl	8013b5c <lfs_mkdir>
    lfs_mkdir(&lfs,  FILESYSTEM_FOLDER_BOOTLOADER);
 800171a:	490b      	ldr	r1, [pc, #44]	; (8001748 <FileSystemInit+0xc4>)
 800171c:	4806      	ldr	r0, [pc, #24]	; (8001738 <FileSystemInit+0xb4>)
 800171e:	f012 fa1d 	bl	8013b5c <lfs_mkdir>
    list_dir();
 8001722:	f000 f99b 	bl	8001a5c <list_dir>

  }

  return status;
 8001726:	687b      	ldr	r3, [r7, #4]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20011f74 	.word	0x20011f74
 8001734:	20000350 	.word	0x20000350
 8001738:	20011efc 	.word	0x20011efc
 800173c:	20011ef8 	.word	0x20011ef8
 8001740:	08028fe8 	.word	0x08028fe8
 8001744:	08028fec 	.word	0x08028fec
 8001748:	08028ff0 	.word	0x08028ff0

0800174c <__sflags>:
 * Return the (stdio) flags for a given mode.
 * Based on https://android.googlesource.com/platform/bionic/+/ics-mr0/libc/stdio/flags.c
 * Return 0 on error.
 */
static int __sflags(const char *mode)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  int ret, m, o;
  switch (*mode++)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b77      	cmp	r3, #119	; 0x77
 800175e:	d00a      	beq.n	8001776 <__sflags+0x2a>
 8001760:	2b77      	cmp	r3, #119	; 0x77
 8001762:	dc14      	bgt.n	800178e <__sflags+0x42>
 8001764:	2b61      	cmp	r3, #97	; 0x61
 8001766:	d00c      	beq.n	8001782 <__sflags+0x36>
 8001768:	2b72      	cmp	r3, #114	; 0x72
 800176a:	d110      	bne.n	800178e <__sflags+0x42>
  {
    case 'r': /* open for reading */
      m = LFS_O_RDONLY;
 800176c:	2301      	movs	r3, #1
 800176e:	617b      	str	r3, [r7, #20]
      o = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	613b      	str	r3, [r7, #16]
      break;
 8001774:	e010      	b.n	8001798 <__sflags+0x4c>
    case 'w': /* open for writing */
      m = LFS_O_WRONLY;
 8001776:	2302      	movs	r3, #2
 8001778:	617b      	str	r3, [r7, #20]
      o = LFS_O_CREAT | LFS_O_TRUNC;
 800177a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800177e:	613b      	str	r3, [r7, #16]
      break;
 8001780:	e00a      	b.n	8001798 <__sflags+0x4c>
    case 'a': /* open for appending */
      m = LFS_O_WRONLY;
 8001782:	2302      	movs	r3, #2
 8001784:	617b      	str	r3, [r7, #20]
      o = LFS_O_CREAT | LFS_O_APPEND;
 8001786:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800178a:	613b      	str	r3, [r7, #16]
      break;
 800178c:	e004      	b.n	8001798 <__sflags+0x4c>
    default: /* illegal mode */
      errno = EINVAL;
 800178e:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <__sflags+0x80>)
 8001790:	2216      	movs	r2, #22
 8001792:	601a      	str	r2, [r3, #0]
      return (0);
 8001794:	2300      	movs	r3, #0
 8001796:	e013      	b.n	80017c0 <__sflags+0x74>
  }
  /* [rwa]\+ or [rwa]b\+ means read and write */
  if (*mode == '+' || (*mode == 'b' && mode[1] == '+'))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b2b      	cmp	r3, #43	; 0x2b
 800179e:	d008      	beq.n	80017b2 <__sflags+0x66>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b62      	cmp	r3, #98	; 0x62
 80017a6:	d106      	bne.n	80017b6 <__sflags+0x6a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3301      	adds	r3, #1
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b2b      	cmp	r3, #43	; 0x2b
 80017b0:	d101      	bne.n	80017b6 <__sflags+0x6a>
  {
    m = LFS_O_RDWR;
 80017b2:	2303      	movs	r3, #3
 80017b4:	617b      	str	r3, [r7, #20]
  }
  ret = m | o;
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	60fb      	str	r3, [r7, #12]
  return (ret);
 80017be:	68fb      	ldr	r3, [r7, #12]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	371c      	adds	r7, #28
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	200164e0 	.word	0x200164e0

080017d0 <file_open>:
 * @param  path  Ponteiro para a string contendo o path do arquivo
 * @param  mode  C string contendo o modo de acesso do arquivo
 * @retval file  Ponteiro para o struct de controle do arquivo
 */
FILE_POINTER file_open(const char *path, const char *mode)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  int flags;
  int count = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]

  if (openFilesCount >= MAX_OPEN_FILES)
 80017de:	4b36      	ldr	r3, [pc, #216]	; (80018b8 <file_open+0xe8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	dd01      	ble.n	80017ea <file_open+0x1a>
    return NULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	e062      	b.n	80018b0 <file_open+0xe0>

  if ((flags = __sflags(mode)) == 0)
 80017ea:	6838      	ldr	r0, [r7, #0]
 80017ec:	f7ff ffae 	bl	800174c <__sflags>
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <file_open+0x2c>
    return (NULL);
 80017f8:	2300      	movs	r3, #0
 80017fa:	e059      	b.n	80018b0 <file_open+0xe0>

  // Remove line feed and carriage return from path
  char *pchar = (char*)path;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	613b      	str	r3, [r7, #16]
  while (*pchar != 0)
 8001800:	e00d      	b.n	800181e <file_open+0x4e>
  {
    if ((*pchar == '\r') || (*pchar == '\n'))
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b0d      	cmp	r3, #13
 8001808:	d003      	beq.n	8001812 <file_open+0x42>
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b0a      	cmp	r3, #10
 8001810:	d102      	bne.n	8001818 <file_open+0x48>
      *pchar = 0;
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
    pchar++;
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	3301      	adds	r3, #1
 800181c:	613b      	str	r3, [r7, #16]
  while (*pchar != 0)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1ed      	bne.n	8001802 <file_open+0x32>
  }

  // Create a entry for the file in openFile structure
  for (count = 0; count < MAX_OPEN_FILES; ++count)
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
 800182a:	e018      	b.n	800185e <file_open+0x8e>
  {
    if (openFile[count].number == 0)
 800182c:	4a23      	ldr	r2, [pc, #140]	; (80018bc <file_open+0xec>)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2158      	movs	r1, #88	; 0x58
 8001832:	fb01 f303 	mul.w	r3, r1, r3
 8001836:	4413      	add	r3, r2
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d10c      	bne.n	8001858 <file_open+0x88>
    {
      openFile[count].number = openFilesCount++;
 800183e:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <file_open+0xe8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	491c      	ldr	r1, [pc, #112]	; (80018b8 <file_open+0xe8>)
 8001846:	600a      	str	r2, [r1, #0]
 8001848:	491c      	ldr	r1, [pc, #112]	; (80018bc <file_open+0xec>)
 800184a:	697a      	ldr	r2, [r7, #20]
 800184c:	2058      	movs	r0, #88	; 0x58
 800184e:	fb00 f202 	mul.w	r2, r0, r2
 8001852:	440a      	add	r2, r1
 8001854:	6013      	str	r3, [r2, #0]
      break;
 8001856:	e005      	b.n	8001864 <file_open+0x94>
  for (count = 0; count < MAX_OPEN_FILES; ++count)
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	3301      	adds	r3, #1
 800185c:	617b      	str	r3, [r7, #20]
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	2b03      	cmp	r3, #3
 8001862:	dde3      	ble.n	800182c <file_open+0x5c>
    }
  }

  int status = lfs_file_open(&lfs, &(openFile[count].file), path, flags);
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	2258      	movs	r2, #88	; 0x58
 8001868:	fb02 f303 	mul.w	r3, r2, r3
 800186c:	4a13      	ldr	r2, [pc, #76]	; (80018bc <file_open+0xec>)
 800186e:	4413      	add	r3, r2
 8001870:	1d19      	adds	r1, r3, #4
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	4812      	ldr	r0, [pc, #72]	; (80018c0 <file_open+0xf0>)
 8001878:	f012 f880 	bl	801397c <lfs_file_open>
 800187c:	60b8      	str	r0, [r7, #8]

  if (status != LFS_ERR_OK)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d00e      	beq.n	80018a2 <file_open+0xd2>
  {
    openFile[count].number = 0;
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <file_open+0xec>)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	2158      	movs	r1, #88	; 0x58
 800188a:	fb01 f303 	mul.w	r3, r1, r3
 800188e:	4413      	add	r3, r2
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
    openFilesCount--;
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <file_open+0xe8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3b01      	subs	r3, #1
 800189a:	4a07      	ldr	r2, [pc, #28]	; (80018b8 <file_open+0xe8>)
 800189c:	6013      	str	r3, [r2, #0]
    LOG2("Error lfs_file_open - file %s - ret = %i", path, status);
    return NULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	e006      	b.n	80018b0 <file_open+0xe0>
  }

  LOG2("lfs_file_open - file %s - ret = %i", path, status);
  return &openFile[count].file;
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2258      	movs	r2, #88	; 0x58
 80018a6:	fb02 f303 	mul.w	r3, r2, r3
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <file_open+0xec>)
 80018ac:	4413      	add	r3, r2
 80018ae:	3304      	adds	r3, #4
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	200004b0 	.word	0x200004b0
 80018bc:	20000350 	.word	0x20000350
 80018c0:	20011efc 	.word	0x20011efc

080018c4 <file_close>:
 * @brief  Função de fechamento do arquivo
 * @param  file Ponteiro para o struct de controle do arquivo
 * @retval int  Status da operação
 */
int file_close(FILE_POINTER file)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  //***FS_Flush(lfs, file);
  int status = lfs_file_close(&lfs, file);
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	481d      	ldr	r0, [pc, #116]	; (8001944 <file_close+0x80>)
 80018d0:	f012 f888 	bl	80139e4 <lfs_file_close>
 80018d4:	60b8      	str	r0, [r7, #8]

  // Delete the entry assigned to file in openFile structure
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	e021      	b.n	8001920 <file_close+0x5c>
  {
    if (&(openFile[i].file) == file)
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2258      	movs	r2, #88	; 0x58
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	4a18      	ldr	r2, [pc, #96]	; (8001948 <file_close+0x84>)
 80018e6:	4413      	add	r3, r2
 80018e8:	3304      	adds	r3, #4
 80018ea:	687a      	ldr	r2, [r7, #4]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d114      	bne.n	800191a <file_close+0x56>
    {
      openFile[i].number = 0;
 80018f0:	4a15      	ldr	r2, [pc, #84]	; (8001948 <file_close+0x84>)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2158      	movs	r1, #88	; 0x58
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
      memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2258      	movs	r2, #88	; 0x58
 8001904:	fb02 f303 	mul.w	r3, r2, r3
 8001908:	4a0f      	ldr	r2, [pc, #60]	; (8001948 <file_close+0x84>)
 800190a:	4413      	add	r3, r2
 800190c:	3304      	adds	r3, #4
 800190e:	2254      	movs	r2, #84	; 0x54
 8001910:	2100      	movs	r1, #0
 8001912:	4618      	mov	r0, r3
 8001914:	f023 fc1a 	bl	802514c <memset>
      break;
 8001918:	e005      	b.n	8001926 <file_close+0x62>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	3301      	adds	r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2b03      	cmp	r3, #3
 8001924:	ddda      	ble.n	80018dc <file_close+0x18>
    }
  }

  if (status != LFS_ERR_OK)
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <file_close+0x6c>
  {
	  LOG2("Erro lfs_file_close - ret = %i", status);
    return status;
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	e005      	b.n	800193c <file_close+0x78>
  }

  openFilesCount--;
 8001930:	4b06      	ldr	r3, [pc, #24]	; (800194c <file_close+0x88>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	3b01      	subs	r3, #1
 8001936:	4a05      	ldr	r2, [pc, #20]	; (800194c <file_close+0x88>)
 8001938:	6013      	str	r3, [r2, #0]
  LOG2("lfs_file_close - ret = %i",
            status);
  return status;
 800193a:	68bb      	ldr	r3, [r7, #8]
}
 800193c:	4618      	mov	r0, r3
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20011efc 	.word	0x20011efc
 8001948:	20000350 	.word	0x20000350
 800194c:	200004b0 	.word	0x200004b0

08001950 <file_read>:
 * @param  size Quantidade de bytes solicitados para leitura
 * @param  count Quantidade de leituras
 * @retval int  Quantidade de bytes lidos
 */
size_t file_read(void *ptr, size_t size, size_t count, FILE_POINTER file)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
 800195c:	603b      	str	r3, [r7, #0]
  lfs_ssize_t qtdBytes = lfs_file_read(&lfs, file, ptr, size * count);
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	fb02 f303 	mul.w	r3, r2, r3
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	6839      	ldr	r1, [r7, #0]
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <file_read+0x38>)
 800196c:	f012 f866 	bl	8013a3c <lfs_file_read>
 8001970:	6178      	str	r0, [r7, #20]
  if (qtdBytes < 0)
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2b00      	cmp	r3, #0
 8001976:	da01      	bge.n	800197c <file_read+0x2c>
  {
	  LOG2("Erro lfs_file_read - ret = %li", qtdBytes);
    return 0;
 8001978:	2300      	movs	r3, #0
 800197a:	e000      	b.n	800197e <file_read+0x2e>
  }
  if (qtdBytes != (size * count))
  {
	  LOG2("Erro lfs_file_read - Quantidade de bytes lidos (%li) diferente do solicitado (%li)", qtdBytes, size);
  }
  return qtdBytes;
 800197c:	697b      	ldr	r3, [r7, #20]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	20011efc 	.word	0x20011efc

0800198c <file_write>:
 * @param  path Ponteiro para o buffer que receberá os dados escritos
 * @param  size Quantidade de bytes solicitados para escrita
 * @retval int  Quantidade de bytes escritos
 */
size_t file_write(const void *ptr, lfs_size_t size, size_t count, FILE_POINTER file)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  lfs_ssize_t qtdBytes = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  if (file->flags & (LFS_O_RDWR | LFS_O_APPEND | LFS_O_WRONLY))     // Verifica o status da flag do arquivo aberto
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019a2:	f640 0303 	movw	r3, #2051	; 0x803
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00e      	beq.n	80019ca <file_write+0x3e>
  {
    qtdBytes = lfs_file_write(&lfs, file, ptr, size * count);
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	fb02 f303 	mul.w	r3, r2, r3
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	6839      	ldr	r1, [r7, #0]
 80019b8:	4808      	ldr	r0, [pc, #32]	; (80019dc <file_write+0x50>)
 80019ba:	f012 f86f 	bl	8013a9c <lfs_file_write>
 80019be:	6178      	str	r0, [r7, #20]
    if (qtdBytes < 0)
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	da01      	bge.n	80019ca <file_write+0x3e>
    {
    	LOG2("Erro lfs_file_write - ret = %li", qtdBytes);
      return 0;
 80019c6:	2300      	movs	r3, #0
 80019c8:	e003      	b.n	80019d2 <file_write+0x46>
  else
  {
    // Caso o arquivo não seja compativel com a operação requerida, apenas informa que não foi executado
	  LOG2("Arquivo não alterado, flag do file [ 0x%lx ]", file->flags);
  }
  return (size_t)(qtdBytes / size);
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20011efc 	.word	0x20011efc

080019e0 <file_exists>:
 * @brief verifica a existencia do path de arquivo ou diretório
 * @param path  Ponteiro para a string contendo o path do arquivo ou diretório
 * @return int  Status da operação
 */
int file_exists(const char *path)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b0c6      	sub	sp, #280	; 0x118
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019ea:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019ee:	6018      	str	r0, [r3, #0]
  struct lfs_info info;

  // Remove line feed and carriage return from path
  char *pchar = (char*)path;
 80019f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  while (*pchar != 0)
 80019fe:	e012      	b.n	8001a26 <file_exists+0x46>
  {
    if ((*pchar == '\r') || (*pchar == '\n'))
 8001a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b0d      	cmp	r3, #13
 8001a08:	d004      	beq.n	8001a14 <file_exists+0x34>
 8001a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b0a      	cmp	r3, #10
 8001a12:	d103      	bne.n	8001a1c <file_exists+0x3c>
      *pchar = 0;
 8001a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
    pchar++;
 8001a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a20:	3301      	adds	r3, #1
 8001a22:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  while (*pchar != 0)
 8001a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1e7      	bne.n	8001a00 <file_exists+0x20>
  }

  int status = lfs_stat(&lfs, path, &info);
 8001a30:	f107 0208 	add.w	r2, r7, #8
 8001a34:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a38:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a3c:	6819      	ldr	r1, [r3, #0]
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <file_exists+0x78>)
 8001a40:	f011 ff84 	bl	801394c <lfs_stat>
 8001a44:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  return status;
 8001a48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20011efc 	.word	0x20011efc

08001a5c <list_dir>:



int list_dir()

{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b0d2      	sub	sp, #328	; 0x148
 8001a60:	af00      	add	r7, sp, #0
	lfs_dir_t dir;
	struct lfs_info info;
	const char *path = "/"; // O caminho do diretório raiz ou outro caminho que deseja listar
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <list_dir+0x58>)
 8001a64:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

	// Abra o diretório
	int err = lfs_dir_open(&lfs, &dir, path);
 8001a68:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001a6c:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001a70:	4619      	mov	r1, r3
 8001a72:	4811      	ldr	r0, [pc, #68]	; (8001ab8 <list_dir+0x5c>)
 8001a74:	f012 f888 	bl	8013b88 <lfs_dir_open>
 8001a78:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
	if (err)
 8001a7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d110      	bne.n	8001aa6 <list_dir+0x4a>
	else
	{
		LOG("Listando diretórios em: %s \r\n", path);

		// Leia as entradas no diretório
		while (lfs_dir_read(&lfs, &dir, &info) > 0)
 8001a84:	bf00      	nop
 8001a86:	1d3a      	adds	r2, r7, #4
 8001a88:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	480a      	ldr	r0, [pc, #40]	; (8001ab8 <list_dir+0x5c>)
 8001a90:	f012 f8c2 	bl	8013c18 <lfs_dir_read>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	dcf5      	bgt.n	8001a86 <list_dir+0x2a>
			}
		}

		// Feche o diretório
		// Feche o diretório
		lfs_dir_close(&lfs, &dir);
 8001a9a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <list_dir+0x5c>)
 8001aa2:	f012 f8a3 	bl	8013bec <lfs_dir_close>
	}

}
 8001aa6:	bf00      	nop
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	08028ff8 	.word	0x08028ff8
 8001ab8:	20011efc 	.word	0x20011efc

08001abc <file_size>:
 * @brief return file size
 * @param file  point to file
 * @return  file size or error (negative value)
 */
int file_size(FILE_POINTER file)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  int status;
  if ((status = lfs_file_seek(&lfs, file, 0, LFS_SEEK_CUR)) < 0)
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	4811      	ldr	r0, [pc, #68]	; (8001b10 <file_size+0x54>)
 8001acc:	f012 f816 	bl	8013afc <lfs_file_seek>
 8001ad0:	60f8      	str	r0, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	da01      	bge.n	8001adc <file_size+0x20>
    return status;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	e014      	b.n	8001b06 <file_size+0x4a>
  int currentPosition = status;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	60bb      	str	r3, [r7, #8]
  if ((status = lfs_file_seek(&lfs, file, 0, LFS_SEEK_END)) < 0)
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	480a      	ldr	r0, [pc, #40]	; (8001b10 <file_size+0x54>)
 8001ae8:	f012 f808 	bl	8013afc <lfs_file_seek>
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	da01      	bge.n	8001af8 <file_size+0x3c>
    return status;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	e006      	b.n	8001b06 <file_size+0x4a>
  lfs_file_seek(&lfs, file, currentPosition, LFS_SEEK_SET);
 8001af8:	2300      	movs	r3, #0
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	6879      	ldr	r1, [r7, #4]
 8001afe:	4804      	ldr	r0, [pc, #16]	; (8001b10 <file_size+0x54>)
 8001b00:	f011 fffc 	bl	8013afc <lfs_file_seek>
  return status;
 8001b04:	68fb      	ldr	r3, [r7, #12]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20011efc 	.word	0x20011efc

08001b14 <CfgFiles_getBuffer>:
 * @fn uint8_t *CfgFiles_getBuffer()
 * @brief function to get a buffer address to be used
 * @return return the buffer pointer to be used
 */
uint8_t *CfgFiles_getBuffer()
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
  for (int count = 0; count < sizeof(Cfg_buffers) / sizeof(Cfg_buffers[0]); count++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	e02b      	b.n	8001b78 <CfgFiles_getBuffer+0x64>
  {
    if (!Cfg_buffers[count].busy)
 8001b20:	4919      	ldr	r1, [pc, #100]	; (8001b88 <CfgFiles_getBuffer+0x74>)
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	02db      	lsls	r3, r3, #11
 8001b28:	4413      	add	r3, r2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	f083 0301 	eor.w	r3, r3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d01c      	beq.n	8001b72 <CfgFiles_getBuffer+0x5e>
    {
      Cfg_buffers[count].busy = true;
 8001b38:	4913      	ldr	r1, [pc, #76]	; (8001b88 <CfgFiles_getBuffer+0x74>)
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	02db      	lsls	r3, r3, #11
 8001b40:	4413      	add	r3, r2
 8001b42:	440b      	add	r3, r1
 8001b44:	2201      	movs	r2, #1
 8001b46:	701a      	strb	r2, [r3, #0]
      memset(Cfg_buffers[count].buffer, 0, sizeof(Cfg_buffers[count].buffer)/sizeof(Cfg_buffers[count].buffer[0]));
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	02db      	lsls	r3, r3, #11
 8001b4e:	4413      	add	r3, r2
 8001b50:	4a0d      	ldr	r2, [pc, #52]	; (8001b88 <CfgFiles_getBuffer+0x74>)
 8001b52:	4413      	add	r3, r2
 8001b54:	3301      	adds	r3, #1
 8001b56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f023 faf5 	bl	802514c <memset>
      return Cfg_buffers[count].buffer;
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	02db      	lsls	r3, r3, #11
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a07      	ldr	r2, [pc, #28]	; (8001b88 <CfgFiles_getBuffer+0x74>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	3301      	adds	r3, #1
 8001b70:	e006      	b.n	8001b80 <CfgFiles_getBuffer+0x6c>
  for (int count = 0; count < sizeof(Cfg_buffers) / sizeof(Cfg_buffers[0]); count++)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3301      	adds	r3, #1
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0d0      	beq.n	8001b20 <CfgFiles_getBuffer+0xc>
    }
  }
  return NULL;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000de4 	.word	0x20000de4

08001b8c <CfgFiles_freeBuffer>:
 * @fn void CfgFiles_freeBuffer(uint8_t *)
 * @brief free a specific buffer to be used latter
 * @param buf buffer pointer to be freed
 */
void CfgFiles_freeBuffer(uint8_t *buf)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e015      	b.n	8001bc6 <CfgFiles_freeBuffer+0x3a>
  {
    if (buf == &(Cfg_buffers[count].buffer[0]))
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	02db      	lsls	r3, r3, #11
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <CfgFiles_freeBuffer+0x50>)
 8001ba4:	4413      	add	r3, r2
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d108      	bne.n	8001bc0 <CfgFiles_freeBuffer+0x34>
    {
      Cfg_buffers[count].busy = false;
 8001bae:	490b      	ldr	r1, [pc, #44]	; (8001bdc <CfgFiles_freeBuffer+0x50>)
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	02db      	lsls	r3, r3, #11
 8001bb6:	4413      	add	r3, r2
 8001bb8:	440b      	add	r3, r1
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
      break;
 8001bbe:	e006      	b.n	8001bce <CfgFiles_freeBuffer+0x42>
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0e6      	beq.n	8001b9a <CfgFiles_freeBuffer+0xe>
    }
  }
}
 8001bcc:	bf00      	nop
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000de4 	.word	0x20000de4

08001be0 <CfgFiles_cleanBuffers>:
/**
 * @fn void CfgFiles_cleanBuffers()
 * @brief clean all buffers that are used for read/write on file
 */
void CfgFiles_cleanBuffers()
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	e017      	b.n	8001c1c <CfgFiles_cleanBuffers+0x3c>
  {
    Cfg_buffers[count].busy = false;
 8001bec:	490f      	ldr	r1, [pc, #60]	; (8001c2c <CfgFiles_cleanBuffers+0x4c>)
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	02db      	lsls	r3, r3, #11
 8001bf4:	4413      	add	r3, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
    memset(Cfg_buffers[count].buffer, 0, sizeof(Cfg_buffers[count].buffer)/sizeof(Cfg_buffers[count].buffer[0]));
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4613      	mov	r3, r2
 8001c00:	02db      	lsls	r3, r3, #11
 8001c02:	4413      	add	r3, r2
 8001c04:	4a09      	ldr	r2, [pc, #36]	; (8001c2c <CfgFiles_cleanBuffers+0x4c>)
 8001c06:	4413      	add	r3, r2
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f023 fa9b 	bl	802514c <memset>
  for (int count = 0;count < sizeof(Cfg_buffers)/sizeof(Cfg_buffers[0]); count++)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0e4      	beq.n	8001bec <CfgFiles_cleanBuffers+0xc>
  }
}
 8001c22:	bf00      	nop
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	20000de4 	.word	0x20000de4

08001c30 <CfgFilesGeFilePathByIndex>:
 * @param  fileName Pointer to file name output
 * @retval  True: Success
 * @retval  False: Fail
 */
bool CfgFilesGeFilePathByIndex(uint16_t fileIndex, char *fileName)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	80fb      	strh	r3, [r7, #6]
  if ((fileIndex < TOTAL_CFG_FILES) && (fileName))
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d81c      	bhi.n	8001c7c <CfgFilesGeFilePathByIndex+0x4c>
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d019      	beq.n	8001c7c <CfgFilesGeFilePathByIndex+0x4c>
  {
    strcat (fileName,(char*) &listCfgFiles[fileIndex].dirPath);
 8001c48:	88fa      	ldrh	r2, [r7, #6]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	011b      	lsls	r3, r3, #4
 8001c4e:	1a9b      	subs	r3, r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	3328      	adds	r3, #40	; 0x28
 8001c54:	4a0c      	ldr	r2, [pc, #48]	; (8001c88 <CfgFilesGeFilePathByIndex+0x58>)
 8001c56:	4413      	add	r3, r2
 8001c58:	3305      	adds	r3, #5
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	6838      	ldr	r0, [r7, #0]
 8001c5e:	f023 fa7d 	bl	802515c <strcat>
    strcat(fileName, (char*) &listCfgFiles [fileIndex].name);
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	4613      	mov	r3, r2
 8001c66:	011b      	lsls	r3, r3, #4
 8001c68:	1a9b      	subs	r3, r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <CfgFilesGeFilePathByIndex+0x58>)
 8001c6e:	4413      	add	r3, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	6838      	ldr	r0, [r7, #0]
 8001c74:	f023 fa72 	bl	802515c <strcat>
    return (true);
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e000      	b.n	8001c7e <CfgFilesGeFilePathByIndex+0x4e>
  }
  return (false);
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200015e8 	.word	0x200015e8

08001c8c <SetListCfgFile>:


static void SetListCfgFile(int fileIndex, const char *fileName, const char *dirName, void *fileMessage)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
 8001c98:	603b      	str	r3, [r7, #0]
  strcpy(listCfgFiles [fileIndex].name, fileName);
 8001c9a:	68fa      	ldr	r2, [r7, #12]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4a11      	ldr	r2, [pc, #68]	; (8001cec <SetListCfgFile+0x60>)
 8001ca6:	4413      	add	r3, r2
 8001ca8:	68b9      	ldr	r1, [r7, #8]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f024 fd3f 	bl	802672e <strcpy>
  strcpy(listCfgFiles [fileIndex].dirPath, dirName);
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	3328      	adds	r3, #40	; 0x28
 8001cbc:	4a0b      	ldr	r2, [pc, #44]	; (8001cec <SetListCfgFile+0x60>)
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3305      	adds	r3, #5
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f024 fd32 	bl	802672e <strcpy>

  if (fileMessage)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d009      	beq.n	8001ce4 <SetListCfgFile+0x58>
  {
    listCfgFiles [fileIndex].fileContent = fileMessage;
 8001cd0:	4906      	ldr	r1, [pc, #24]	; (8001cec <SetListCfgFile+0x60>)
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	011b      	lsls	r3, r3, #4
 8001cd8:	1a9b      	subs	r3, r3, r2
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	440b      	add	r3, r1
 8001cde:	3338      	adds	r3, #56	; 0x38
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	601a      	str	r2, [r3, #0]

  }
}
 8001ce4:	bf00      	nop
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200015e8 	.word	0x200015e8

08001cf0 <CfgFilesDecodeFiles>:




static void CfgFilesDecodeFiles(uint16_t fileIndex, void *fileDataBuffer, size_t fileSize, bool isInitialDecode)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60b9      	str	r1, [r7, #8]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	81fb      	strh	r3, [r7, #14]
 8001d00:	4613      	mov	r3, r2
 8001d02:	737b      	strb	r3, [r7, #13]
  void *file = NULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
  size_t size = 0;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]

  switch (fileIndex)
 8001d0c:	89fb      	ldrh	r3, [r7, #14]
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	d824      	bhi.n	8001d5c <CfgFilesDecodeFiles+0x6c>
 8001d12:	a201      	add	r2, pc, #4	; (adr r2, 8001d18 <CfgFilesDecodeFiles+0x28>)
 8001d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d18:	08001d29 	.word	0x08001d29
 8001d1c:	08001d5d 	.word	0x08001d5d
 8001d20:	08001d5d 	.word	0x08001d5d
 8001d24:	08001d43 	.word	0x08001d43
  {
  case MAP_FILE_IDX:
  {
	size = sizeof(TModbusMap);
 8001d28:	f240 437a 	movw	r3, #1146	; 0x47a
 8001d2c:	613b      	str	r3, [r7, #16]
	file = pvPortMalloc(size);
 8001d2e:	6938      	ldr	r0, [r7, #16]
 8001d30:	f00b fb5a 	bl	800d3e8 <pvPortMalloc>
 8001d34:	6178      	str	r0, [r7, #20]
	memcpy(file, fileDataBuffer, size);
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	68b9      	ldr	r1, [r7, #8]
 8001d3a:	6978      	ldr	r0, [r7, #20]
 8001d3c:	f024 fcff 	bl	802673e <memcpy>

	break;
 8001d40:	e00d      	b.n	8001d5e <CfgFilesDecodeFiles+0x6e>
	// Implementação para BOOT_FILE_IDX
	break;

  case LOG_FILE_IDX:

	size = sizeof(Log_config);
 8001d42:	f240 43b4 	movw	r3, #1204	; 0x4b4
 8001d46:	613b      	str	r3, [r7, #16]
	file = pvPortMalloc(size);
 8001d48:	6938      	ldr	r0, [r7, #16]
 8001d4a:	f00b fb4d 	bl	800d3e8 <pvPortMalloc>
 8001d4e:	6178      	str	r0, [r7, #20]
	memcpy(file, fileDataBuffer, size);
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	68b9      	ldr	r1, [r7, #8]
 8001d54:	6978      	ldr	r0, [r7, #20]
 8001d56:	f024 fcf2 	bl	802673e <memcpy>

	break;
 8001d5a:	e000      	b.n	8001d5e <CfgFilesDecodeFiles+0x6e>

  default:
	break;
 8001d5c:	bf00      	nop
  }

  if (file)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d042      	beq.n	8001dea <CfgFilesDecodeFiles+0xfa>
  {
	if (size > 0)
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d03a      	beq.n	8001de0 <CfgFilesDecodeFiles+0xf0>
	{
	  if (isInitialDecode)
 8001d6a:	7b7b      	ldrb	r3, [r7, #13]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00e      	beq.n	8001d8e <CfgFilesDecodeFiles+0x9e>
	  {
		// Fill file message with decoded data
		memcpy(listCfgFiles[fileIndex].fileContent, file, size);
 8001d70:	89fa      	ldrh	r2, [r7, #14]
 8001d72:	4920      	ldr	r1, [pc, #128]	; (8001df4 <CfgFilesDecodeFiles+0x104>)
 8001d74:	4613      	mov	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3338      	adds	r3, #56	; 0x38
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	6979      	ldr	r1, [r7, #20]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f024 fcd9 	bl	802673e <memcpy>
 8001d8c:	e028      	b.n	8001de0 <CfgFilesDecodeFiles+0xf0>
	  }
	  else
	  {
		// Compares current message to the new decoded message
		if (memcmp(listCfgFiles[fileIndex].fileContent, file, size) != 0)
 8001d8e:	89fa      	ldrh	r2, [r7, #14]
 8001d90:	4918      	ldr	r1, [pc, #96]	; (8001df4 <CfgFilesDecodeFiles+0x104>)
 8001d92:	4613      	mov	r3, r2
 8001d94:	011b      	lsls	r3, r3, #4
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	440b      	add	r3, r1
 8001d9c:	3338      	adds	r3, #56	; 0x38
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	6979      	ldr	r1, [r7, #20]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f023 f9a7 	bl	80250f8 <memcmp>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d017      	beq.n	8001de0 <CfgFilesDecodeFiles+0xf0>
		{
		  // Cfg File has changed; update file message
		  memcpy(listCfgFiles[fileIndex].fileContent, file, size);
 8001db0:	89fa      	ldrh	r2, [r7, #14]
 8001db2:	4910      	ldr	r1, [pc, #64]	; (8001df4 <CfgFilesDecodeFiles+0x104>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3338      	adds	r3, #56	; 0x38
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	6979      	ldr	r1, [r7, #20]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f024 fcb9 	bl	802673e <memcpy>
		  listCfgFiles[fileIndex].changed = true;
 8001dcc:	89fa      	ldrh	r2, [r7, #14]
 8001dce:	4909      	ldr	r1, [pc, #36]	; (8001df4 <CfgFilesDecodeFiles+0x104>)
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	3324      	adds	r3, #36	; 0x24
 8001ddc:	2201      	movs	r2, #1
 8001dde:	701a      	strb	r2, [r3, #0]
		}
	  }
	}

	vPortFree(file);
 8001de0:	6978      	ldr	r0, [r7, #20]
 8001de2:	f00b fbcd 	bl	800d580 <vPortFree>
	file = NULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  }

}
 8001dea:	bf00      	nop
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200015e8 	.word	0x200015e8

08001df8 <CfgFilesEncode>:


static bool CfgFilesEncode(uint16_t fileIndex, void *fileDataBuffer,
	size_t *fileSize, bool setDefaultValues)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	60b9      	str	r1, [r7, #8]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	461a      	mov	r2, r3
 8001e04:	4603      	mov	r3, r0
 8001e06:	81fb      	strh	r3, [r7, #14]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	737b      	strb	r3, [r7, #13]

  switch (fileIndex)
 8001e0c:	89fb      	ldrh	r3, [r7, #14]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d84d      	bhi.n	8001eae <CfgFilesEncode+0xb6>
 8001e12:	a201      	add	r2, pc, #4	; (adr r2, 8001e18 <CfgFilesEncode+0x20>)
 8001e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e18:	08001e29 	.word	0x08001e29
 8001e1c:	08001eaf 	.word	0x08001eaf
 8001e20:	08001eaf 	.word	0x08001eaf
 8001e24:	08001e65 	.word	0x08001e65
  {
  case MAP_FILE_IDX:

	TModbusMap *modbusFile = (TModbusMap*) listCfgFiles[fileIndex].fileContent;
 8001e28:	89fa      	ldrh	r2, [r7, #14]
 8001e2a:	4923      	ldr	r1, [pc, #140]	; (8001eb8 <CfgFilesEncode+0xc0>)
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3338      	adds	r3, #56	; 0x38
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	613b      	str	r3, [r7, #16]

	if (setDefaultValues)
 8001e3c:	7b7b      	ldrb	r3, [r7, #13]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d004      	beq.n	8001e4c <CfgFilesEncode+0x54>
	{
	  CreateDefaultModbusMap(fileDataBuffer, modbusFile);
 8001e42:	6939      	ldr	r1, [r7, #16]
 8001e44:	68b8      	ldr	r0, [r7, #8]
 8001e46:	f021 fa49 	bl	80232dc <CreateDefaultModbusMap>
 8001e4a:	e005      	b.n	8001e58 <CfgFilesEncode+0x60>

	}
	else
	{

	  memcpy(fileDataBuffer, modbusFile, sizeof(TModbusMap));
 8001e4c:	f240 427a 	movw	r2, #1146	; 0x47a
 8001e50:	6939      	ldr	r1, [r7, #16]
 8001e52:	68b8      	ldr	r0, [r7, #8]
 8001e54:	f024 fc73 	bl	802673e <memcpy>
	}

	*fileSize = sizeof(TModbusMap);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	f240 427a 	movw	r2, #1146	; 0x47a
 8001e5e:	601a      	str	r2, [r3, #0]

	return true;
 8001e60:	2301      	movs	r3, #1
 8001e62:	e025      	b.n	8001eb0 <CfgFilesEncode+0xb8>

	break;

  case LOG_FILE_IDX:

	Log_config *logConfig = (Log_config*) listCfgFiles[fileIndex].fileContent;
 8001e64:	89fa      	ldrh	r2, [r7, #14]
 8001e66:	4914      	ldr	r1, [pc, #80]	; (8001eb8 <CfgFilesEncode+0xc0>)
 8001e68:	4613      	mov	r3, r2
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	3338      	adds	r3, #56	; 0x38
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	617b      	str	r3, [r7, #20]

	if (setDefaultValues)
 8001e78:	7b7b      	ldrb	r3, [r7, #13]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00c      	beq.n	8001e98 <CfgFilesEncode+0xa0>
	{
	  memset(logConfig, 0, sizeof(Log_config));
 8001e7e:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8001e82:	2100      	movs	r1, #0
 8001e84:	6978      	ldr	r0, [r7, #20]
 8001e86:	f023 f961 	bl	802514c <memset>

	 logConfig->enable = true;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
	 logConfig->logList_count = 0;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2200      	movs	r2, #0
 8001e94:	805a      	strh	r2, [r3, #2]
 8001e96:	e005      	b.n	8001ea4 <CfgFilesEncode+0xac>

	}
	else
	{

	  memcpy(fileDataBuffer, logConfig, sizeof(Log_config));
 8001e98:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8001e9c:	6979      	ldr	r1, [r7, #20]
 8001e9e:	68b8      	ldr	r0, [r7, #8]
 8001ea0:	f024 fc4d 	bl	802673e <memcpy>
	}

	*fileSize = sizeof(Log_config);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8001eaa:	601a      	str	r2, [r3, #0]
	break;
 8001eac:	bf00      	nop

  default:

  }

  return false;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	200015e8 	.word	0x200015e8

08001ebc <CfgFilesInit>:
 * @fn void CfgFilesInit()
 * @brief  Initializes control struct list for Configuration Files Management
 * @retval None
 */
void CfgFilesInit()
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	f5ad 6d03 	sub.w	sp, sp, #2096	; 0x830
 8001ec2:	af00      	add	r7, sp, #0

  /*Initialize all buffer to read/write on files*/
  CfgFiles_cleanBuffers();
 8001ec4:	f7ff fe8c 	bl	8001be0 <CfgFiles_cleanBuffers>

  //------------------------------------------------------------------------------------
  //                    Fill List of Configuration Files
  //------------------------------------------------------------------------------------
  //             FILE_INDEX     FILE_NAME              DIR_NAME        TYPE_TIPE
  SetListCfgFile(MAP_FILE_IDX,  MODBUS_MAP_FILE_PATH,  MAP_DIR_PATH,   &modbusMapFile);
 8001ec8:	4b71      	ldr	r3, [pc, #452]	; (8002090 <CfgFilesInit+0x1d4>)
 8001eca:	4a72      	ldr	r2, [pc, #456]	; (8002094 <CfgFilesInit+0x1d8>)
 8001ecc:	4972      	ldr	r1, [pc, #456]	; (8002098 <CfgFilesInit+0x1dc>)
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff fedc 	bl	8001c8c <SetListCfgFile>
  SetListCfgFile(COMM_FILE_IDX, COMM_FILE,             CFG_DIR_PATH,   NULL);
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	4a71      	ldr	r2, [pc, #452]	; (800209c <CfgFilesInit+0x1e0>)
 8001ed8:	4971      	ldr	r1, [pc, #452]	; (80020a0 <CfgFilesInit+0x1e4>)
 8001eda:	2001      	movs	r0, #1
 8001edc:	f7ff fed6 	bl	8001c8c <SetListCfgFile>
  SetListCfgFile(BOOT_FILE_IDX, BOOT_FILE,             BOOT_DIR_PATH,  NULL);
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	4a70      	ldr	r2, [pc, #448]	; (80020a4 <CfgFilesInit+0x1e8>)
 8001ee4:	4970      	ldr	r1, [pc, #448]	; (80020a8 <CfgFilesInit+0x1ec>)
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f7ff fed0 	bl	8001c8c <SetListCfgFile>
  SetListCfgFile(LOG_FILE_IDX,  LOG_FILE_CONFIG,       MAP_DIR_PATH,   &logConfigFile);
 8001eec:	4b6f      	ldr	r3, [pc, #444]	; (80020ac <CfgFilesInit+0x1f0>)
 8001eee:	4a69      	ldr	r2, [pc, #420]	; (8002094 <CfgFilesInit+0x1d8>)
 8001ef0:	496f      	ldr	r1, [pc, #444]	; (80020b0 <CfgFilesInit+0x1f4>)
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f7ff feca 	bl	8001c8c <SetListCfgFile>


  //------------------------------------------------------------------------------------

  for (int i = 0; i < TOTAL_CFG_FILES; i ++)
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8001efe:	e0bb      	b.n	8002078 <CfgFilesInit+0x1bc>
  {
    // Print Remote File Paths
    char fileName[32] = { 0 };
 8001f00:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8001f04:	f6a3 032c 	subw	r3, r3, #2092	; 0x82c
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	615a      	str	r2, [r3, #20]
 8001f1c:	619a      	str	r2, [r3, #24]

    if (CfgFilesGeFilePathByIndex(i, fileName))
 8001f1e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	1d3a      	adds	r2, r7, #4
 8001f26:	4611      	mov	r1, r2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fe81 	bl	8001c30 <CfgFilesGeFilePathByIndex>
    {
      LOG("index = %d erro to get file path: %s", i, fileName);

    }
    // Open/Create file
    uint8_t fileDataBuffer [1024 * 2 /*LPBDRIVER_OUT_BUFFER_SIZE*/] = { 0 };
 8001f2e:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8001f32:	f6a3 030c 	subw	r3, r3, #2060	; 0x80c
 8001f36:	2200      	movs	r2, #0
 8001f38:	601a      	str	r2, [r3, #0]
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f023 f902 	bl	802514c <memset>
    size_t fileSize = 0;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
    FILE_POINTER file = NULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	f8c7 3828 	str.w	r3, [r7, #2088]	; 0x828

    /*verify if file exists in file system*/
    if (file_exists((char*)fileName) == LFS_ERR_OK)
 8001f54:	1d3b      	adds	r3, r7, #4
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fd42 	bl	80019e0 <file_exists>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d106      	bne.n	8001f70 <CfgFilesInit+0xb4>
    {
      file = file_open((char*) fileName, "r"); //read-only
 8001f62:	1d3b      	adds	r3, r7, #4
 8001f64:	4953      	ldr	r1, [pc, #332]	; (80020b4 <CfgFilesInit+0x1f8>)
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fc32 	bl	80017d0 <file_open>
 8001f6c:	f8c7 0828 	str.w	r0, [r7, #2088]	; 0x828
    }

    /*if have a file*/
    if (file)
 8001f70:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d006      	beq.n	8001f86 <CfgFilesInit+0xca>
    {
      fileSize = file_size(file);
 8001f78:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8001f7c:	f7ff fd9e 	bl	8001abc <file_size>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
    }

    if (fileSize == 0) // File is empty or is a new file
 8001f86:	f8d7 3824 	ldr.w	r3, [r7, #2084]	; 0x824
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d14b      	bne.n	8002026 <CfgFilesInit+0x16a>
    {
      //------------------------------------
      if (file != NULL)
 8001f8e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d003      	beq.n	8001f9e <CfgFilesInit+0xe2>
      {
        file_close(file);
 8001f96:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8001f9a:	f7ff fc93 	bl	80018c4 <file_close>
      }

      file = file_open((char*) fileName, "w");  // Open file as "write-only"
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	4945      	ldr	r1, [pc, #276]	; (80020b8 <CfgFilesInit+0x1fc>)
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fc14 	bl	80017d0 <file_open>
 8001fa8:	f8c7 0828 	str.w	r0, [r7, #2088]	; 0x828

      if (!file)
 8001fac:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d05b      	beq.n	800206c <CfgFilesInit+0x1b0>
      {
        LOG("New File - Error: file not opened for writing; File Index = %03d; File Name: %s", i, listCfgFiles [i].name);
        continue;
      }

      if (!CfgFilesEncode(i, fileDataBuffer, &fileSize, true))
 8001fb4:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8001fb8:	b298      	uxth	r0, r3
 8001fba:	f607 0224 	addw	r2, r7, #2084	; 0x824
 8001fbe:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f7ff ff18 	bl	8001df8 <CfgFilesEncode>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f083 0301 	eor.w	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d004      	beq.n	8001fde <CfgFilesInit+0x122>
      {
        file_close(file); // error to encode data; close file and continue
 8001fd4:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8001fd8:	f7ff fc74 	bl	80018c4 <file_close>
        continue;
 8001fdc:	e047      	b.n	800206e <CfgFilesInit+0x1b2>
      }

      // Write file content
       listCfgFiles[i].size = file_write(fileDataBuffer, 1, fileSize, file);
 8001fde:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8001fe2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001fe6:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8001fea:	2101      	movs	r1, #1
 8001fec:	f7ff fcce 	bl	800198c <file_write>
 8001ff0:	4601      	mov	r1, r0
 8001ff2:	4832      	ldr	r0, [pc, #200]	; (80020bc <CfgFilesInit+0x200>)
 8001ff4:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4403      	add	r3, r0
 8002002:	3320      	adds	r3, #32
 8002004:	6019      	str	r1, [r3, #0]
       {
         LOG("Data size written in file differs from the size requested; written = %lu bytes | requested = %d bytes", listCfgFiles[i].size, fileSize);

       }
       // New file, set as "changed"
      listCfgFiles[i].changed = true;
 8002006:	492d      	ldr	r1, [pc, #180]	; (80020bc <CfgFilesInit+0x200>)
 8002008:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 800200c:	4613      	mov	r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	3324      	adds	r3, #36	; 0x24
 8002018:	2201      	movs	r2, #1
 800201a:	701a      	strb	r2, [r3, #0]

      file_close(file);
 800201c:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8002020:	f7ff fc50 	bl	80018c4 <file_close>
 8002024:	e023      	b.n	800206e <CfgFilesInit+0x1b2>
    }
    else
    {
      // Read file content
      listCfgFiles [i].size = file_read(fileDataBuffer, 1, fileSize, file);
 8002026:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 800202a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800202e:	f8d7 3828 	ldr.w	r3, [r7, #2088]	; 0x828
 8002032:	2101      	movs	r1, #1
 8002034:	f7ff fc8c 	bl	8001950 <file_read>
 8002038:	4601      	mov	r1, r0
 800203a:	4820      	ldr	r0, [pc, #128]	; (80020bc <CfgFilesInit+0x200>)
 800203c:	f8d7 282c 	ldr.w	r2, [r7, #2092]	; 0x82c
 8002040:	4613      	mov	r3, r2
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	1a9b      	subs	r3, r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4403      	add	r3, r0
 800204a:	3320      	adds	r3, #32
 800204c:	6019      	str	r1, [r3, #0]
      if (listCfgFiles [i].size != fileSize)
      {
        LOG("Data size read from file differs from the size requested; read = %lu bytes | requested = %d bytes", listCfgFiles [i].size, fileSize);
      }

      CfgFilesDecodeFiles(i, fileDataBuffer, fileSize, true /* sempre true na inicialização */);
 800204e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8002052:	b298      	uxth	r0, r3
 8002054:	f8d7 2824 	ldr.w	r2, [r7, #2084]	; 0x824
 8002058:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800205c:	2301      	movs	r3, #1
 800205e:	f7ff fe47 	bl	8001cf0 <CfgFilesDecodeFiles>
      file_close(file);
 8002062:	f8d7 0828 	ldr.w	r0, [r7, #2088]	; 0x828
 8002066:	f7ff fc2d 	bl	80018c4 <file_close>
 800206a:	e000      	b.n	800206e <CfgFilesInit+0x1b2>
        continue;
 800206c:	bf00      	nop
  for (int i = 0; i < TOTAL_CFG_FILES; i ++)
 800206e:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 8002072:	3301      	adds	r3, #1
 8002074:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8002078:	f8d7 382c 	ldr.w	r3, [r7, #2092]	; 0x82c
 800207c:	2b03      	cmp	r3, #3
 800207e:	f77f af3f 	ble.w	8001f00 <CfgFilesInit+0x44>
    }

  }

}
 8002082:	bf00      	nop
 8002084:	bf00      	nop
 8002086:	f507 6703 	add.w	r7, r7, #2096	; 0x830
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	200004b4 	.word	0x200004b4
 8002094:	080290a8 	.word	0x080290a8
 8002098:	080290b0 	.word	0x080290b0
 800209c:	080290bc 	.word	0x080290bc
 80020a0:	080290c4 	.word	0x080290c4
 80020a4:	080290d0 	.word	0x080290d0
 80020a8:	080290d8 	.word	0x080290d8
 80020ac:	20000930 	.word	0x20000930
 80020b0:	080290e4 	.word	0x080290e4
 80020b4:	080290f4 	.word	0x080290f4
 80020b8:	080290f8 	.word	0x080290f8
 80020bc:	200015e8 	.word	0x200015e8

080020c0 <CfgFiles_UpdateCfgFileByIndex>:

bool CfgFiles_UpdateCfgFileByIndex(uint16_t fileIndex, bool setDefaultValues)

{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b08f      	sub	sp, #60	; 0x3c
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	460a      	mov	r2, r1
 80020ca:	80fb      	strh	r3, [r7, #6]
 80020cc:	4613      	mov	r3, r2
 80020ce:	717b      	strb	r3, [r7, #5]
  // Print Remote File Paths
  char fileName [32] = { 0 };
 80020d0:	2300      	movs	r3, #0
 80020d2:	613b      	str	r3, [r7, #16]
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
 80020e4:	615a      	str	r2, [r3, #20]
 80020e6:	619a      	str	r2, [r3, #24]

  if (!CfgFilesGeFilePathByIndex(fileIndex, fileName))
 80020e8:	f107 0210 	add.w	r2, r7, #16
 80020ec:	88fb      	ldrh	r3, [r7, #6]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fd9d 	bl	8001c30 <CfgFilesGeFilePathByIndex>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f083 0301 	eor.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <CfgFiles_UpdateCfgFileByIndex+0x46>
  {
    return false;
 8002102:	2300      	movs	r3, #0
 8002104:	e040      	b.n	8002188 <CfgFiles_UpdateCfgFileByIndex+0xc8>
  }

  LOG("Updating config file; File Index = %d; File Name: %s", fileIndex, fileName);

  // Open/Create file
  uint8_t *fileDataBuffer = CfgFiles_getBuffer();
 8002106:	f7ff fd05 	bl	8001b14 <CfgFiles_getBuffer>
 800210a:	6378      	str	r0, [r7, #52]	; 0x34
  if (!fileDataBuffer)
 800210c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <CfgFiles_UpdateCfgFileByIndex+0x56>
  {
    return false;
 8002112:	2300      	movs	r3, #0
 8002114:	e038      	b.n	8002188 <CfgFiles_UpdateCfgFileByIndex+0xc8>
  }

  size_t fileSize = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	60fb      	str	r3, [r7, #12]
  FILE_POINTER file = NULL;
 800211a:	2300      	movs	r3, #0
 800211c:	633b      	str	r3, [r7, #48]	; 0x30
  file = file_open((char*) fileName, "w"); //write-only
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	491b      	ldr	r1, [pc, #108]	; (8002190 <CfgFiles_UpdateCfgFileByIndex+0xd0>)
 8002124:	4618      	mov	r0, r3
 8002126:	f7ff fb53 	bl	80017d0 <file_open>
 800212a:	6338      	str	r0, [r7, #48]	; 0x30
  fileSize = file_size(file);
 800212c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800212e:	f7ff fcc5 	bl	8001abc <file_size>
 8002132:	4603      	mov	r3, r0
 8002134:	60fb      	str	r3, [r7, #12]

  if (!CfgFilesEncode(fileIndex, fileDataBuffer, &fileSize, setDefaultValues))
 8002136:	797b      	ldrb	r3, [r7, #5]
 8002138:	f107 020c 	add.w	r2, r7, #12
 800213c:	88f8      	ldrh	r0, [r7, #6]
 800213e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002140:	f7ff fe5a 	bl	8001df8 <CfgFilesEncode>
 8002144:	4603      	mov	r3, r0
 8002146:	f083 0301 	eor.w	r3, r3, #1
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <CfgFiles_UpdateCfgFileByIndex+0x9a>
  {
    file_close(file); // error to encode data; close file and continue
 8002150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002152:	f7ff fbb7 	bl	80018c4 <file_close>
    return false;
 8002156:	2300      	movs	r3, #0
 8002158:	e016      	b.n	8002188 <CfgFiles_UpdateCfgFileByIndex+0xc8>
  }

  // Write file content
  listCfgFiles [fileIndex].size = file_write(fileDataBuffer, 1, fileSize, file);
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	88fc      	ldrh	r4, [r7, #6]
 800215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002160:	2101      	movs	r1, #1
 8002162:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002164:	f7ff fc12 	bl	800198c <file_write>
 8002168:	4602      	mov	r2, r0
 800216a:	490a      	ldr	r1, [pc, #40]	; (8002194 <CfgFiles_UpdateCfgFileByIndex+0xd4>)
 800216c:	4623      	mov	r3, r4
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1b1b      	subs	r3, r3, r4
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	3320      	adds	r3, #32
 8002178:	601a      	str	r2, [r3, #0]
  {

    LOG("Data size written in file differs from the size requested; written = %lu bytes | requested = %d bytes", listCfgFiles [fileIndex].size, fileSize);
  }

  file_close(file);
 800217a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800217c:	f7ff fba2 	bl	80018c4 <file_close>
  CfgFiles_freeBuffer(fileDataBuffer);
 8002180:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002182:	f7ff fd03 	bl	8001b8c <CfgFiles_freeBuffer>
  return true;
 8002186:	2301      	movs	r3, #1

}
 8002188:	4618      	mov	r0, r3
 800218a:	373c      	adds	r7, #60	; 0x3c
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}
 8002190:	080290f8 	.word	0x080290f8
 8002194:	200015e8 	.word	0x200015e8

08002198 <DateTimeGetString>:




char *DateTimeGetString ()
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b090      	sub	sp, #64	; 0x40
 800219c:	af00      	add	r7, sp, #0
  struct tm tmTime = {0};
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	2224      	movs	r2, #36	; 0x24
 80021a4:	2100      	movs	r1, #0
 80021a6:	4618      	mov	r0, r3
 80021a8:	f022 ffd0 	bl	802514c <memset>
  static char array[50];


  /* Get date time from RTC */

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	2200      	movs	r2, #0
 80021b2:	4619      	mov	r1, r3
 80021b4:	4810      	ldr	r0, [pc, #64]	; (80021f8 <DateTimeGetString+0x60>)
 80021b6:	f005 fad6 	bl	8007766 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80021ba:	1d3b      	adds	r3, r7, #4
 80021bc:	2200      	movs	r2, #0
 80021be:	4619      	mov	r1, r3
 80021c0:	480d      	ldr	r0, [pc, #52]	; (80021f8 <DateTimeGetString+0x60>)
 80021c2:	f005 fbb2 	bl	800792a <HAL_RTC_GetDate>

  tmTime.tm_hour = sTime.Hours;
 80021c6:	7a3b      	ldrb	r3, [r7, #8]
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  tmTime.tm_min = sTime.Minutes;
 80021ca:	7a7b      	ldrb	r3, [r7, #9]
 80021cc:	623b      	str	r3, [r7, #32]
  tmTime.tm_sec = sTime.Seconds;
 80021ce:	7abb      	ldrb	r3, [r7, #10]
 80021d0:	61fb      	str	r3, [r7, #28]
  tmTime.tm_mday = sDate.Date;
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	62bb      	str	r3, [r7, #40]	; 0x28
  tmTime.tm_mon = sDate.Month - 1;
 80021d6:	797b      	ldrb	r3, [r7, #5]
 80021d8:	3b01      	subs	r3, #1
 80021da:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmTime.tm_year = sDate.Year;
 80021dc:	79fb      	ldrb	r3, [r7, #7]
 80021de:	633b      	str	r3, [r7, #48]	; 0x30

  // Usando strftime para formatar a data e a hora
     strftime(array, sizeof(array), DATETIME_STRINGFORMAT_DEFAULT, &tmTime);
 80021e0:	f107 031c 	add.w	r3, r7, #28
 80021e4:	4a05      	ldr	r2, [pc, #20]	; (80021fc <DateTimeGetString+0x64>)
 80021e6:	2132      	movs	r1, #50	; 0x32
 80021e8:	4805      	ldr	r0, [pc, #20]	; (8002200 <DateTimeGetString+0x68>)
 80021ea:	f023 fee7 	bl	8025fbc <strftime>

    return array;
 80021ee:	4b04      	ldr	r3, [pc, #16]	; (8002200 <DateTimeGetString+0x68>)

}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3740      	adds	r7, #64	; 0x40
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	20001f48 	.word	0x20001f48
 80021fc:	080290fc 	.word	0x080290fc
 8002200:	200016d8 	.word	0x200016d8

08002204 <DateTimeGetTm>:



void DateTimeGetTm(struct tm *tmTime)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef sTime;
  RTC_DateTypeDef sDate;

  /* Get date time from RTC */

  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800220c:	f107 030c 	add.w	r3, r7, #12
 8002210:	2200      	movs	r2, #0
 8002212:	4619      	mov	r1, r3
 8002214:	4812      	ldr	r0, [pc, #72]	; (8002260 <DateTimeGetTm+0x5c>)
 8002216:	f005 faa6 	bl	8007766 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800221a:	f107 0308 	add.w	r3, r7, #8
 800221e:	2200      	movs	r2, #0
 8002220:	4619      	mov	r1, r3
 8002222:	480f      	ldr	r0, [pc, #60]	; (8002260 <DateTimeGetTm+0x5c>)
 8002224:	f005 fb81 	bl	800792a <HAL_RTC_GetDate>

  tmTime->tm_hour = sTime.Hours;
 8002228:	7b3b      	ldrb	r3, [r7, #12]
 800222a:	461a      	mov	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	609a      	str	r2, [r3, #8]
  tmTime->tm_min = sTime.Minutes;
 8002230:	7b7b      	ldrb	r3, [r7, #13]
 8002232:	461a      	mov	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	605a      	str	r2, [r3, #4]
  tmTime->tm_sec = sTime.Seconds;
 8002238:	7bbb      	ldrb	r3, [r7, #14]
 800223a:	461a      	mov	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	601a      	str	r2, [r3, #0]
  tmTime->tm_mday = sDate.Date;
 8002240:	7abb      	ldrb	r3, [r7, #10]
 8002242:	461a      	mov	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	60da      	str	r2, [r3, #12]
  tmTime->tm_mon = sDate.Month - 1;
 8002248:	7a7b      	ldrb	r3, [r7, #9]
 800224a:	1e5a      	subs	r2, r3, #1
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	611a      	str	r2, [r3, #16]
  tmTime->tm_year = sDate.Year;
 8002250:	7afb      	ldrb	r3, [r7, #11]
 8002252:	461a      	mov	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	615a      	str	r2, [r3, #20]

}
 8002258:	bf00      	nop
 800225a:	3720      	adds	r7, #32
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	20001f48 	.word	0x20001f48

08002264 <DateTimeSetTm>:
}



void DateTimeSetTm(struct tm* tmTime)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  RTC_TimeTypeDef sTime = { 0 };
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = { 0 };
 800227c:	2300      	movs	r3, #0
 800227e:	60bb      	str	r3, [r7, #8]

  sDate.Year = tmTime->tm_year;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	72fb      	strb	r3, [r7, #11]
  sDate.Date = tmTime->tm_mday;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	72bb      	strb	r3, [r7, #10]
  sDate.Month = tmTime->tm_mon + 1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	3301      	adds	r3, #1
 8002298:	b2db      	uxtb	r3, r3
 800229a:	727b      	strb	r3, [r7, #9]
  sTime.Hours = tmTime->tm_hour;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	733b      	strb	r3, [r7, #12]
  sTime.Minutes = tmTime->tm_min;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	737b      	strb	r3, [r7, #13]
  sTime.Seconds = tmTime->tm_sec;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	73bb      	strb	r3, [r7, #14]
  sTime.DayLightSaving = 0;
 80022b4:	2300      	movs	r3, #0
 80022b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	2200      	movs	r2, #0
 80022be:	4619      	mov	r1, r3
 80022c0:	4809      	ldr	r0, [pc, #36]	; (80022e8 <DateTimeSetTm+0x84>)
 80022c2:	f005 f9b6 	bl	8007632 <HAL_RTC_SetTime>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d109      	bne.n	80022e0 <DateTimeSetTm+0x7c>

	//printf("Erro ao configurar a hora no RTC \r\n");
	return;
  }

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	2200      	movs	r2, #0
 80022d2:	4619      	mov	r1, r3
 80022d4:	4804      	ldr	r0, [pc, #16]	; (80022e8 <DateTimeSetTm+0x84>)
 80022d6:	f005 faa4 	bl	8007822 <HAL_RTC_SetDate>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	e000      	b.n	80022e2 <DateTimeSetTm+0x7e>
	return;
 80022e0:	bf00      	nop

	//printf("Erro ao configurar a data no RTC \r\n");
	return;
  }

}
 80022e2:	3720      	adds	r7, #32
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	20001f48 	.word	0x20001f48

080022ec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a07      	ldr	r2, [pc, #28]	; (8002318 <vApplicationGetIdleTaskMemory+0x2c>)
 80022fc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	4a06      	ldr	r2, [pc, #24]	; (800231c <vApplicationGetIdleTaskMemory+0x30>)
 8002302:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2280      	movs	r2, #128	; 0x80
 8002308:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	2000171c 	.word	0x2000171c
 800231c:	200017bc 	.word	0x200017bc

08002320 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <vApplicationGetTimerTaskMemory+0x2c>)
 8002330:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	4a06      	ldr	r2, [pc, #24]	; (8002350 <vApplicationGetTimerTaskMemory+0x30>)
 8002336:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800233e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	200019bc 	.word	0x200019bc
 8002350:	20001a5c 	.word	0x20001a5c

08002354 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002354:	b5b0      	push	{r4, r5, r7, lr}
 8002356:	b09a      	sub	sp, #104	; 0x68
 8002358:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of menuQueue */
  osMessageQDef(menuQueue, 6, MenuData_t);
 800235a:	4b29      	ldr	r3, [pc, #164]	; (8002400 <MX_FREERTOS_Init+0xac>)
 800235c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002360:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002362:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  menuQueueHandle = osMessageCreate(osMessageQ(menuQueue), NULL);
 8002366:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800236a:	2100      	movs	r1, #0
 800236c:	4618      	mov	r0, r3
 800236e:	f008 f872 	bl	800a456 <osMessageCreate>
 8002372:	4603      	mov	r3, r0
 8002374:	4a23      	ldr	r2, [pc, #140]	; (8002404 <MX_FREERTOS_Init+0xb0>)
 8002376:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ethernetStatusT */
  osThreadDef(ethernetStatusT, EthernetStatusTask, osPriorityNormal, 0, 1024);
 8002378:	4b23      	ldr	r3, [pc, #140]	; (8002408 <MX_FREERTOS_Init+0xb4>)
 800237a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800237e:	461d      	mov	r5, r3
 8002380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002382:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002384:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002388:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetStatusTHandle = osThreadCreate(osThread(ethernetStatusT), NULL);
 800238c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f007 fe9a 	bl	800a0cc <osThreadCreate>
 8002398:	4603      	mov	r3, r0
 800239a:	4a1c      	ldr	r2, [pc, #112]	; (800240c <MX_FREERTOS_Init+0xb8>)
 800239c:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonsTask */
  osThreadDef(buttonsTask, ButtonsTask, osPriorityBelowNormal, 0, 1024);
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <MX_FREERTOS_Init+0xbc>)
 80023a0:	f107 0420 	add.w	r4, r7, #32
 80023a4:	461d      	mov	r5, r3
 80023a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonsTaskHandle = osThreadCreate(osThread(buttonsTask), NULL);
 80023b2:	f107 0320 	add.w	r3, r7, #32
 80023b6:	2100      	movs	r1, #0
 80023b8:	4618      	mov	r0, r3
 80023ba:	f007 fe87 	bl	800a0cc <osThreadCreate>
 80023be:	4603      	mov	r3, r0
 80023c0:	4a14      	ldr	r2, [pc, #80]	; (8002414 <MX_FREERTOS_Init+0xc0>)
 80023c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of ledsTask */
  osThreadDef(ledsTask, LedsTask, osPriorityIdle, 0, 512);
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <MX_FREERTOS_Init+0xc4>)
 80023c6:	1d3c      	adds	r4, r7, #4
 80023c8:	461d      	mov	r5, r3
 80023ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ce:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80023d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ledsTaskHandle = osThreadCreate(osThread(ledsTask), (void*) operationMode);
 80023d6:	4b11      	ldr	r3, [pc, #68]	; (800241c <MX_FREERTOS_Init+0xc8>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	1d3b      	adds	r3, r7, #4
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f007 fe73 	bl	800a0cc <osThreadCreate>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4a0d      	ldr	r2, [pc, #52]	; (8002420 <MX_FREERTOS_Init+0xcc>)
 80023ea:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */


  HorusOperationMode(operationMode);
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <MX_FREERTOS_Init+0xc8>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 fe59 	bl	80030a8 <HorusOperationMode>


  /* USER CODE END RTOS_THREADS */

}
 80023f6:	bf00      	nop
 80023f8:	3768      	adds	r7, #104	; 0x68
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bdb0      	pop	{r4, r5, r7, pc}
 80023fe:	bf00      	nop
 8002400:	08029110 	.word	0x08029110
 8002404:	20001718 	.word	0x20001718
 8002408:	08029130 	.word	0x08029130
 800240c:	2000170c 	.word	0x2000170c
 8002410:	08029158 	.word	0x08029158
 8002414:	20001710 	.word	0x20001710
 8002418:	08029180 	.word	0x08029180
 800241c:	20001f20 	.word	0x20001f20
 8002420:	20001714 	.word	0x20001714

08002424 <EthernetStatusTask>:
  * @param  argument: Not used
  * @retval None
 */
/* USER CODE END Header_EthernetStatusTask */
void EthernetStatusTask(void const * argument)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0c4      	sub	sp, #272	; 0x110
 8002428:	af00      	add	r7, sp, #0
 800242a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800242e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002432:	6018      	str	r0, [r3, #0]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002434:	f007 f80a 	bl	800944c <MX_LWIP_Init>
  /* USER CODE BEGIN EthernetStatusTask */
	MenuData_t menu_data = {0};
 8002438:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800243c:	22bd      	movs	r2, #189	; 0xbd
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f022 fe83 	bl	802514c <memset>
	char ipad[21] = {0};
 8002446:	2300      	movs	r3, #0
 8002448:	63bb      	str	r3, [r7, #56]	; 0x38
 800244a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	741a      	strb	r2, [r3, #16]
	char mask[21] = {0};
 800245a:	2300      	movs	r3, #0
 800245c:	623b      	str	r3, [r7, #32]
 800245e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
 800246c:	741a      	strb	r2, [r3, #16]
	char gway[21] = {0};
 800246e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	3304      	adds	r3, #4
 800247c:	2200      	movs	r2, #0
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	609a      	str	r2, [r3, #8]
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	741a      	strb	r2, [r3, #16]


	/* Infinite loop */
	for (;;)
	{
		if (netif_is_up(&gnetif))
 8002488:	4b37      	ldr	r3, [pc, #220]	; (8002568 <EthernetStatusTask+0x144>)
 800248a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	b2db      	uxtb	r3, r3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d062      	beq.n	800255e <EthernetStatusTask+0x13a>
		{
			sprintf(ipad, "IPAD:%s", ip4addr_ntoa(netif_ip4_addr(&gnetif)));
 8002498:	4834      	ldr	r0, [pc, #208]	; (800256c <EthernetStatusTask+0x148>)
 800249a:	f01f faa5 	bl	80219e8 <ip4addr_ntoa>
 800249e:	4602      	mov	r2, r0
 80024a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024a4:	4932      	ldr	r1, [pc, #200]	; (8002570 <EthernetStatusTask+0x14c>)
 80024a6:	4618      	mov	r0, r3
 80024a8:	f022 fd2c 	bl	8024f04 <siprintf>
			sprintf(mask, "MASK:%s", ip4addr_ntoa(netif_ip4_netmask(&gnetif)));
 80024ac:	4831      	ldr	r0, [pc, #196]	; (8002574 <EthernetStatusTask+0x150>)
 80024ae:	f01f fa9b 	bl	80219e8 <ip4addr_ntoa>
 80024b2:	4602      	mov	r2, r0
 80024b4:	f107 0320 	add.w	r3, r7, #32
 80024b8:	492f      	ldr	r1, [pc, #188]	; (8002578 <EthernetStatusTask+0x154>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f022 fd22 	bl	8024f04 <siprintf>
			sprintf(gway, "GWAY:%s", ip4addr_ntoa(netif_ip4_gw(&gnetif)));
 80024c0:	482e      	ldr	r0, [pc, #184]	; (800257c <EthernetStatusTask+0x158>)
 80024c2:	f01f fa91 	bl	80219e8 <ip4addr_ntoa>
 80024c6:	4602      	mov	r2, r0
 80024c8:	f107 0308 	add.w	r3, r7, #8
 80024cc:	492c      	ldr	r1, [pc, #176]	; (8002580 <EthernetStatusTask+0x15c>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f022 fd18 	bl	8024f04 <siprintf>

			if (strcmp(menu_data.items[PAGE_0][LINE_0], ipad) != 0 ||
 80024d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80024d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024dc:	4611      	mov	r1, r2
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fd fe76 	bl	80001d0 <strcmp>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d117      	bne.n	800251a <EthernetStatusTask+0xf6>
				strcmp(menu_data.items[PAGE_0][LINE_1], mask) != 0 ||
 80024ea:	f107 0220 	add.w	r2, r7, #32
 80024ee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80024f2:	3315      	adds	r3, #21
 80024f4:	4611      	mov	r1, r2
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fd fe6a 	bl	80001d0 <strcmp>
 80024fc:	4603      	mov	r3, r0
			if (strcmp(menu_data.items[PAGE_0][LINE_0], ipad) != 0 ||
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d10b      	bne.n	800251a <EthernetStatusTask+0xf6>
				strcmp(menu_data.items[PAGE_0][LINE_2], gway) != 0)
 8002502:	f107 0208 	add.w	r2, r7, #8
 8002506:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800250a:	332a      	adds	r3, #42	; 0x2a
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f7fd fe5e 	bl	80001d0 <strcmp>
 8002514:	4603      	mov	r3, r0
				strcmp(menu_data.items[PAGE_0][LINE_1], mask) != 0 ||
 8002516:	2b00      	cmp	r3, #0
 8002518:	d021      	beq.n	800255e <EthernetStatusTask+0x13a>
			{
				strcpy(menu_data.items[PAGE_0][LINE_0], ipad);
 800251a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800251e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002522:	4611      	mov	r1, r2
 8002524:	4618      	mov	r0, r3
 8002526:	f024 f902 	bl	802672e <strcpy>
				strcpy(menu_data.items[PAGE_0][LINE_1], mask);
 800252a:	f107 0220 	add.w	r2, r7, #32
 800252e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002532:	3315      	adds	r3, #21
 8002534:	4611      	mov	r1, r2
 8002536:	4618      	mov	r0, r3
 8002538:	f024 f8f9 	bl	802672e <strcpy>
				strcpy(menu_data.items[PAGE_0][LINE_2], gway);
 800253c:	f107 0208 	add.w	r2, r7, #8
 8002540:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002544:	332a      	adds	r3, #42	; 0x2a
 8002546:	4611      	mov	r1, r2
 8002548:	4618      	mov	r0, r3
 800254a:	f024 f8f0 	bl	802672e <strcpy>
				AdapterSSD1306_SendDataToMenuQueueUpdate(&menu_data);
 800254e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff f862 	bl	800161c <AdapterSSD1306_SendDataToMenuQueueUpdate>
				osDelay(100);
 8002558:	2064      	movs	r0, #100	; 0x64
 800255a:	f007 fe03 	bl	800a164 <osDelay>
			}
		}

		osDelay(100);
 800255e:	2064      	movs	r0, #100	; 0x64
 8002560:	f007 fe00 	bl	800a164 <osDelay>
		if (netif_is_up(&gnetif))
 8002564:	e790      	b.n	8002488 <EthernetStatusTask+0x64>
 8002566:	bf00      	nop
 8002568:	20002078 	.word	0x20002078
 800256c:	2000207c 	.word	0x2000207c
 8002570:	0802919c 	.word	0x0802919c
 8002574:	20002080 	.word	0x20002080
 8002578:	080291a4 	.word	0x080291a4
 800257c:	20002084 	.word	0x20002084
 8002580:	080291ac 	.word	0x080291ac

08002584 <ButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonsTask */
void ButtonsTask(void const * argument)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonsTask */
	/* Infinite loop */

	bool activeDarkMode = false;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
	for (;;)
	{
		if (HAL_GPIO_ReadPin(BT_SW1_GPIO_Port, BT_SW1_Pin) == RESET)
 8002590:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002594:	4822      	ldr	r0, [pc, #136]	; (8002620 <ButtonsTask+0x9c>)
 8002596:	f003 fd63 	bl	8006060 <HAL_GPIO_ReadPin>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d109      	bne.n	80025b4 <ButtonsTask+0x30>
		{

			AdapterSSD1306_NextPage();
 80025a0:	f7fe ff32 	bl	8001408 <AdapterSSD1306_NextPage>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80025a4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025a8:	481d      	ldr	r0, [pc, #116]	; (8002620 <ButtonsTask+0x9c>)
 80025aa:	f003 fd8a 	bl	80060c2 <HAL_GPIO_TogglePin>

			osDelay(250);
 80025ae:	20fa      	movs	r0, #250	; 0xfa
 80025b0:	f007 fdd8 	bl	800a164 <osDelay>
		}

		if (HAL_GPIO_ReadPin(BT_SW2_GPIO_Port, BT_SW2_Pin) == RESET)
 80025b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025b8:	4819      	ldr	r0, [pc, #100]	; (8002620 <ButtonsTask+0x9c>)
 80025ba:	f003 fd51 	bl	8006060 <HAL_GPIO_ReadPin>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d109      	bne.n	80025d8 <ButtonsTask+0x54>
		{

			AdapterSSD1306_PreviousPage();
 80025c4:	f7fe ff42 	bl	800144c <AdapterSSD1306_PreviousPage>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80025c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025cc:	4814      	ldr	r0, [pc, #80]	; (8002620 <ButtonsTask+0x9c>)
 80025ce:	f003 fd78 	bl	80060c2 <HAL_GPIO_TogglePin>

			osDelay(250);
 80025d2:	20fa      	movs	r0, #250	; 0xfa
 80025d4:	f007 fdc6 	bl	800a164 <osDelay>
		}

		if (HAL_GPIO_ReadPin(BT_SW3_GPIO_Port, BT_SW3_Pin) == RESET)
 80025d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025dc:	4810      	ldr	r0, [pc, #64]	; (8002620 <ButtonsTask+0x9c>)
 80025de:	f003 fd3f 	bl	8006060 <HAL_GPIO_ReadPin>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d117      	bne.n	8002618 <ButtonsTask+0x94>
		{

			if (activeDarkMode)
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <ButtonsTask+0x78>
			{
				AdapterSSD1306_DarkMode(activeDarkMode);
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe ff4d 	bl	8001490 <AdapterSSD1306_DarkMode>
				activeDarkMode = false;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
 80025fa:	e005      	b.n	8002608 <ButtonsTask+0x84>

			}
			else
			{
				AdapterSSD1306_DarkMode(activeDarkMode);
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe ff46 	bl	8001490 <AdapterSSD1306_DarkMode>
				activeDarkMode = true;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]

			}

		    HAL_GPIO_TogglePin(LED2_GPIO_Port, LED3_Pin);
 8002608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800260c:	4804      	ldr	r0, [pc, #16]	; (8002620 <ButtonsTask+0x9c>)
 800260e:	f003 fd58 	bl	80060c2 <HAL_GPIO_TogglePin>
			osDelay(250);
 8002612:	20fa      	movs	r0, #250	; 0xfa
 8002614:	f007 fda6 	bl	800a164 <osDelay>
		}

		osDelay(10);
 8002618:	200a      	movs	r0, #10
 800261a:	f007 fda3 	bl	800a164 <osDelay>
		if (HAL_GPIO_ReadPin(BT_SW1_GPIO_Port, BT_SW1_Pin) == RESET)
 800261e:	e7b7      	b.n	8002590 <ButtonsTask+0xc>
 8002620:	40021000 	.word	0x40021000

08002624 <LedsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedsTask */
void LedsTask(void const * argument)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedsTask */

  /* Infinite loop */

  TOperationMode operationMode = (TOperationMode) argument;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]

  for (;;)
  {

	switch (operationMode)
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	2b02      	cmp	r3, #2
 8002634:	d030      	beq.n	8002698 <LedsTask+0x74>
 8002636:	2b02      	cmp	r3, #2
 8002638:	dc4e      	bgt.n	80026d8 <LedsTask+0xb4>
 800263a:	2b00      	cmp	r3, #0
 800263c:	d002      	beq.n	8002644 <LedsTask+0x20>
 800263e:	2b01      	cmp	r3, #1
 8002640:	d00a      	beq.n	8002658 <LedsTask+0x34>
	  osDelay(1000);
	  break;

	default:

	  break;
 8002642:	e049      	b.n	80026d8 <LedsTask+0xb4>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8002644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002648:	4824      	ldr	r0, [pc, #144]	; (80026dc <LedsTask+0xb8>)
 800264a:	f003 fd3a 	bl	80060c2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 800264e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002652:	f007 fd87 	bl	800a164 <osDelay>
	  break;
 8002656:	e040      	b.n	80026da <LedsTask+0xb6>
	  for (int i = 0; i < 2; i++)
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
 800265c:	e014      	b.n	8002688 <LedsTask+0x64>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 800265e:	2200      	movs	r2, #0
 8002660:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002664:	481d      	ldr	r0, [pc, #116]	; (80026dc <LedsTask+0xb8>)
 8002666:	f003 fd13 	bl	8006090 <HAL_GPIO_WritePin>
		osDelay(250);
 800266a:	20fa      	movs	r0, #250	; 0xfa
 800266c:	f007 fd7a 	bl	800a164 <osDelay>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8002670:	2201      	movs	r2, #1
 8002672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002676:	4819      	ldr	r0, [pc, #100]	; (80026dc <LedsTask+0xb8>)
 8002678:	f003 fd0a 	bl	8006090 <HAL_GPIO_WritePin>
		osDelay(250);
 800267c:	20fa      	movs	r0, #250	; 0xfa
 800267e:	f007 fd71 	bl	800a164 <osDelay>
	  for (int i = 0; i < 2; i++)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2b01      	cmp	r3, #1
 800268c:	dde7      	ble.n	800265e <LedsTask+0x3a>
	  osDelay(1000);
 800268e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002692:	f007 fd67 	bl	800a164 <osDelay>
	  break;
 8002696:	e020      	b.n	80026da <LedsTask+0xb6>
	  for (int i = 0; i < 3; i++)
 8002698:	2300      	movs	r3, #0
 800269a:	613b      	str	r3, [r7, #16]
 800269c:	e014      	b.n	80026c8 <LedsTask+0xa4>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 800269e:	2200      	movs	r2, #0
 80026a0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026a4:	480d      	ldr	r0, [pc, #52]	; (80026dc <LedsTask+0xb8>)
 80026a6:	f003 fcf3 	bl	8006090 <HAL_GPIO_WritePin>
		osDelay(250);
 80026aa:	20fa      	movs	r0, #250	; 0xfa
 80026ac:	f007 fd5a 	bl	800a164 <osDelay>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b6:	4809      	ldr	r0, [pc, #36]	; (80026dc <LedsTask+0xb8>)
 80026b8:	f003 fcea 	bl	8006090 <HAL_GPIO_WritePin>
		osDelay(250);
 80026bc:	20fa      	movs	r0, #250	; 0xfa
 80026be:	f007 fd51 	bl	800a164 <osDelay>
	  for (int i = 0; i < 3; i++)
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	3301      	adds	r3, #1
 80026c6:	613b      	str	r3, [r7, #16]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	dde7      	ble.n	800269e <LedsTask+0x7a>
	  osDelay(1000);
 80026ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026d2:	f007 fd47 	bl	800a164 <osDelay>
	  break;
 80026d6:	e000      	b.n	80026da <LedsTask+0xb6>
	  break;
 80026d8:	bf00      	nop
	switch (operationMode)
 80026da:	e7a9      	b.n	8002630 <LedsTask+0xc>
 80026dc:	40021000 	.word	0x40021000

080026e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b08a      	sub	sp, #40	; 0x28
 80026e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e6:	f107 0314 	add.w	r3, r7, #20
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 80026f2:	60da      	str	r2, [r3, #12]
 80026f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b41      	ldr	r3, [pc, #260]	; (8002800 <MX_GPIO_Init+0x120>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a40      	ldr	r2, [pc, #256]	; (8002800 <MX_GPIO_Init+0x120>)
 8002700:	f043 0310 	orr.w	r3, r3, #16
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <MX_GPIO_Init+0x120>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <MX_GPIO_Init+0x120>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a39      	ldr	r2, [pc, #228]	; (8002800 <MX_GPIO_Init+0x120>)
 800271c:	f043 0304 	orr.w	r3, r3, #4
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b37      	ldr	r3, [pc, #220]	; (8002800 <MX_GPIO_Init+0x120>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <MX_GPIO_Init+0x120>)
 8002734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002736:	4a32      	ldr	r2, [pc, #200]	; (8002800 <MX_GPIO_Init+0x120>)
 8002738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800273c:	6313      	str	r3, [r2, #48]	; 0x30
 800273e:	4b30      	ldr	r3, [pc, #192]	; (8002800 <MX_GPIO_Init+0x120>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	607b      	str	r3, [r7, #4]
 800274e:	4b2c      	ldr	r3, [pc, #176]	; (8002800 <MX_GPIO_Init+0x120>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a2b      	ldr	r2, [pc, #172]	; (8002800 <MX_GPIO_Init+0x120>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b29      	ldr	r3, [pc, #164]	; (8002800 <MX_GPIO_Init+0x120>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	607b      	str	r3, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002766:	2300      	movs	r3, #0
 8002768:	603b      	str	r3, [r7, #0]
 800276a:	4b25      	ldr	r3, [pc, #148]	; (8002800 <MX_GPIO_Init+0x120>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	4a24      	ldr	r2, [pc, #144]	; (8002800 <MX_GPIO_Init+0x120>)
 8002770:	f043 0302 	orr.w	r3, r3, #2
 8002774:	6313      	str	r3, [r2, #48]	; 0x30
 8002776:	4b22      	ldr	r3, [pc, #136]	; (8002800 <MX_GPIO_Init+0x120>)
 8002778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	603b      	str	r3, [r7, #0]
 8002780:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin, GPIO_PIN_RESET);
 8002782:	2200      	movs	r2, #0
 8002784:	f44f 7184 	mov.w	r1, #264	; 0x108
 8002788:	481e      	ldr	r0, [pc, #120]	; (8002804 <MX_GPIO_Init+0x124>)
 800278a:	f003 fc81 	bl	8006090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin|SPI1_RESET_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800278e:	2200      	movs	r2, #0
 8002790:	2119      	movs	r1, #25
 8002792:	481d      	ldr	r0, [pc, #116]	; (8002808 <MX_GPIO_Init+0x128>)
 8002794:	f003 fc7c 	bl	8006090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8002798:	2201      	movs	r2, #1
 800279a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800279e:	4819      	ldr	r0, [pc, #100]	; (8002804 <MX_GPIO_Init+0x124>)
 80027a0:	f003 fc76 	bl	8006090 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 80027a4:	f24e 1308 	movw	r3, #57608	; 0xe108
 80027a8:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027aa:	2301      	movs	r3, #1
 80027ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b2:	2300      	movs	r3, #0
 80027b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027b6:	f107 0314 	add.w	r3, r7, #20
 80027ba:	4619      	mov	r1, r3
 80027bc:	4811      	ldr	r0, [pc, #68]	; (8002804 <MX_GPIO_Init+0x124>)
 80027be:	f003 fab3 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|SPI1_RESET_Pin|SPI1_CS_Pin;
 80027c2:	2319      	movs	r3, #25
 80027c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027c6:	2301      	movs	r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d2:	f107 0314 	add.w	r3, r7, #20
 80027d6:	4619      	mov	r1, r3
 80027d8:	480b      	ldr	r0, [pc, #44]	; (8002808 <MX_GPIO_Init+0x128>)
 80027da:	f003 faa5 	bl	8005d28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = BT_SW1_Pin|BT_SW2_Pin|BT_SW3_Pin;
 80027de:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80027e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4619      	mov	r1, r3
 80027f2:	4804      	ldr	r0, [pc, #16]	; (8002804 <MX_GPIO_Init+0x124>)
 80027f4:	f003 fa98 	bl	8005d28 <HAL_GPIO_Init>

}
 80027f8:	bf00      	nop
 80027fa:	3728      	adds	r7, #40	; 0x28
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	40021000 	.word	0x40021000
 8002808:	40020000 	.word	0x40020000

0800280c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002810:	4b12      	ldr	r3, [pc, #72]	; (800285c <MX_I2C1_Init+0x50>)
 8002812:	4a13      	ldr	r2, [pc, #76]	; (8002860 <MX_I2C1_Init+0x54>)
 8002814:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002816:	4b11      	ldr	r3, [pc, #68]	; (800285c <MX_I2C1_Init+0x50>)
 8002818:	4a12      	ldr	r2, [pc, #72]	; (8002864 <MX_I2C1_Init+0x58>)
 800281a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800281c:	4b0f      	ldr	r3, [pc, #60]	; (800285c <MX_I2C1_Init+0x50>)
 800281e:	2200      	movs	r2, #0
 8002820:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002822:	4b0e      	ldr	r3, [pc, #56]	; (800285c <MX_I2C1_Init+0x50>)
 8002824:	2200      	movs	r2, #0
 8002826:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <MX_I2C1_Init+0x50>)
 800282a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800282e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <MX_I2C1_Init+0x50>)
 8002832:	2200      	movs	r2, #0
 8002834:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002836:	4b09      	ldr	r3, [pc, #36]	; (800285c <MX_I2C1_Init+0x50>)
 8002838:	2200      	movs	r2, #0
 800283a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <MX_I2C1_Init+0x50>)
 800283e:	2200      	movs	r2, #0
 8002840:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002842:	4b06      	ldr	r3, [pc, #24]	; (800285c <MX_I2C1_Init+0x50>)
 8002844:	2200      	movs	r2, #0
 8002846:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002848:	4804      	ldr	r0, [pc, #16]	; (800285c <MX_I2C1_Init+0x50>)
 800284a:	f003 fc55 	bl	80060f8 <HAL_I2C_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002854:	f000 fccc 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20001e5c 	.word	0x20001e5c
 8002860:	40005400 	.word	0x40005400
 8002864:	00061a80 	.word	0x00061a80

08002868 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	; 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	; (80028ec <HAL_I2C_MspInit+0x84>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d12c      	bne.n	80028e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	4b18      	ldr	r3, [pc, #96]	; (80028f0 <HAL_I2C_MspInit+0x88>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a17      	ldr	r2, [pc, #92]	; (80028f0 <HAL_I2C_MspInit+0x88>)
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b15      	ldr	r3, [pc, #84]	; (80028f0 <HAL_I2C_MspInit+0x88>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80028a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028ac:	2312      	movs	r3, #18
 80028ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b4:	2303      	movs	r3, #3
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028b8:	2304      	movs	r3, #4
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028bc:	f107 0314 	add.w	r3, r7, #20
 80028c0:	4619      	mov	r1, r3
 80028c2:	480c      	ldr	r0, [pc, #48]	; (80028f4 <HAL_I2C_MspInit+0x8c>)
 80028c4:	f003 fa30 	bl	8005d28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <HAL_I2C_MspInit+0x88>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	4a07      	ldr	r2, [pc, #28]	; (80028f0 <HAL_I2C_MspInit+0x88>)
 80028d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028d6:	6413      	str	r3, [r2, #64]	; 0x40
 80028d8:	4b05      	ldr	r3, [pc, #20]	; (80028f0 <HAL_I2C_MspInit+0x88>)
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e0:	60fb      	str	r3, [r7, #12]
 80028e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80028e4:	bf00      	nop
 80028e6:	3728      	adds	r7, #40	; 0x28
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	40005400 	.word	0x40005400
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40020400 	.word	0x40020400

080028f8 <lfs_w25qflash_config_init>:



void lfs_w25qflash_config_init ()

{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0

littlefs_config.read = lfs_w25qflash_read;
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <lfs_w25qflash_config_init+0x60>)
 80028fe:	4a17      	ldr	r2, [pc, #92]	; (800295c <lfs_w25qflash_config_init+0x64>)
 8002900:	605a      	str	r2, [r3, #4]
littlefs_config.prog = lfs_w25qflash_prog;
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <lfs_w25qflash_config_init+0x60>)
 8002904:	4a16      	ldr	r2, [pc, #88]	; (8002960 <lfs_w25qflash_config_init+0x68>)
 8002906:	609a      	str	r2, [r3, #8]
littlefs_config.erase = lfs_w25qflash_erase;
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <lfs_w25qflash_config_init+0x60>)
 800290a:	4a16      	ldr	r2, [pc, #88]	; (8002964 <lfs_w25qflash_config_init+0x6c>)
 800290c:	60da      	str	r2, [r3, #12]
littlefs_config.sync = lfs_w25qflash_sync;
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <lfs_w25qflash_config_init+0x60>)
 8002910:	4a15      	ldr	r2, [pc, #84]	; (8002968 <lfs_w25qflash_config_init+0x70>)
 8002912:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
littlefs_config.lock = lfs_lock;
littlefs_config.unlock = lfs_unlock;
#endif

 littlefs_config.read_size = w25qxx.PageSize;
 8002914:	4b15      	ldr	r3, [pc, #84]	; (800296c <lfs_w25qflash_config_init+0x74>)
 8002916:	895b      	ldrh	r3, [r3, #10]
 8002918:	461a      	mov	r2, r3
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <lfs_w25qflash_config_init+0x60>)
 800291c:	615a      	str	r2, [r3, #20]
 littlefs_config.prog_size = w25qxx.PageSize;
 800291e:	4b13      	ldr	r3, [pc, #76]	; (800296c <lfs_w25qflash_config_init+0x74>)
 8002920:	895b      	ldrh	r3, [r3, #10]
 8002922:	461a      	mov	r2, r3
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <lfs_w25qflash_config_init+0x60>)
 8002926:	619a      	str	r2, [r3, #24]
 littlefs_config.block_size = w25qxx.SectorSize;
 8002928:	4b10      	ldr	r3, [pc, #64]	; (800296c <lfs_w25qflash_config_init+0x74>)
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <lfs_w25qflash_config_init+0x60>)
 800292e:	61d3      	str	r3, [r2, #28]
 littlefs_config.block_count = w25qxx.SectorCount;
 8002930:	4b0e      	ldr	r3, [pc, #56]	; (800296c <lfs_w25qflash_config_init+0x74>)
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	4a08      	ldr	r2, [pc, #32]	; (8002958 <lfs_w25qflash_config_init+0x60>)
 8002936:	6213      	str	r3, [r2, #32]
 littlefs_config.block_cycles = 100;
 8002938:	4b07      	ldr	r3, [pc, #28]	; (8002958 <lfs_w25qflash_config_init+0x60>)
 800293a:	2264      	movs	r2, #100	; 0x64
 800293c:	625a      	str	r2, [r3, #36]	; 0x24
 littlefs_config.cache_size = LITTLEFS_CACHE_SIZE;
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <lfs_w25qflash_config_init+0x60>)
 8002940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002944:	629a      	str	r2, [r3, #40]	; 0x28
 littlefs_config.lookahead_size = LITTLEFS_LOOKAHEAD_SIZE;
 8002946:	4b04      	ldr	r3, [pc, #16]	; (8002958 <lfs_w25qflash_config_init+0x60>)
 8002948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800294e:	bf00      	nop
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	20001eb0 	.word	0x20001eb0
 800295c:	08002971 	.word	0x08002971
 8002960:	080029a1 	.word	0x080029a1
 8002964:	080029d1 	.word	0x080029d1
 8002968:	080029eb 	.word	0x080029eb
 800296c:	20016350 	.word	0x20016350

08002970 <lfs_w25qflash_read>:


/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de leitura
 */
int lfs_w25qflash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	603b      	str	r3, [r7, #0]

	if (W25qxx_ReadSector((uint8_t*) buffer, block, off, size)) {
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	6838      	ldr	r0, [r7, #0]
 8002986:	f021 fae1 	bl	8023f4c <W25qxx_ReadSector>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <lfs_w25qflash_read+0x24>

		LOG2("Leitura da flash no  - bloco %lu - off %lu - %lu bytes lidos\r\n", block, off, size);

		return LFS_ERR_OK;
 8002990:	2300      	movs	r3, #0
 8002992:	e001      	b.n	8002998 <lfs_w25qflash_read+0x28>

	} else {

	  return LFS_ERR_CORRUPT;
 8002994:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <lfs_w25qflash_prog>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de escrita
 */

int lfs_w25qflash_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	603b      	str	r3, [r7, #0]

	if (W25qxx_WriteSector((uint8_t*) buffer, block, off, size)) {
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	68b9      	ldr	r1, [r7, #8]
 80029b4:	6838      	ldr	r0, [r7, #0]
 80029b6:	f021 f9e7 	bl	8023d88 <W25qxx_WriteSector>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <lfs_w25qflash_prog+0x24>

		LOG2("Escrita da flash no - bloco %lu - off %lu  - %lu bytes escritos\r\n", block, off, size);

		return LFS_ERR_OK;
 80029c0:	2300      	movs	r3, #0
 80029c2:	e001      	b.n	80029c8 <lfs_w25qflash_prog+0x28>

	} else {

		return LFS_ERR_CORRUPT;
 80029c4:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <lfs_w25qflash_erase>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de apagamento (erase)
 */
int lfs_w25qflash_erase(const struct lfs_config *c, lfs_block_t block) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]

  	 W25qxx_EraseSector(block);
 80029da:	6838      	ldr	r0, [r7, #0]
 80029dc:	f021 f8e0 	bl	8023ba0 <W25qxx_EraseSector>
	return LFS_ERR_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3708      	adds	r7, #8
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <lfs_w25qflash_sync>:
/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de sincronismo
 * 		  (para a Flash NAND esta função não é necessária, apenas retorna OK)
 */

int lfs_w25qflash_sync(const struct lfs_config *c) {
 80029ea:	b480      	push	{r7}
 80029ec:	b083      	sub	sp, #12
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]

	return LFS_ERR_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <lfs_get_default_config>:


int lfs_get_default_config(struct lfs_config *lfsc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]

	lfs_w25qflash_config_init();
 8002a08:	f7ff ff76 	bl	80028f8 <lfs_w25qflash_config_init>

    *lfsc = littlefs_config; /* copy pre-initialized lfs config structure */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <lfs_get_default_config+0x28>)
 8002a10:	4618      	mov	r0, r3
 8002a12:	4611      	mov	r1, r2
 8002a14:	234c      	movs	r3, #76	; 0x4c
 8002a16:	461a      	mov	r2, r3
 8002a18:	f023 fe91 	bl	802673e <memcpy>
    return 0;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20001eb0 	.word	0x20001eb0

08002a2c <lfs_storage_init>:

int lfs_storage_init(const struct lfs_config *lfsc)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
    uint16_t status;

    /* initialize mflash */
    status = W25qxx_Init();
 8002a34:	f020 ffe2 	bl	80239fc <W25qxx_Init>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	81fb      	strh	r3, [r7, #14]

    return status;
 8002a3c:	89fb      	ldrh	r3, [r7, #14]
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <Log_returnLevelString>:
  }
  return Log_level_disable + 1;
}

char* Log_returnLevelString(Log_level_t level)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	4603      	mov	r3, r0
 8002a50:	71fb      	strb	r3, [r7, #7]
  switch (level)
 8002a52:	79fb      	ldrb	r3, [r7, #7]
 8002a54:	2b06      	cmp	r3, #6
 8002a56:	d81f      	bhi.n	8002a98 <Log_returnLevelString+0x50>
 8002a58:	a201      	add	r2, pc, #4	; (adr r2, 8002a60 <Log_returnLevelString+0x18>)
 8002a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a5e:	bf00      	nop
 8002a60:	08002a7d 	.word	0x08002a7d
 8002a64:	08002a81 	.word	0x08002a81
 8002a68:	08002a85 	.word	0x08002a85
 8002a6c:	08002a89 	.word	0x08002a89
 8002a70:	08002a8d 	.word	0x08002a8d
 8002a74:	08002a91 	.word	0x08002a91
 8002a78:	08002a95 	.word	0x08002a95
  {
  case Log_level_trace:
	return "trace";
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <Log_returnLevelString+0x60>)
 8002a7e:	e00c      	b.n	8002a9a <Log_returnLevelString+0x52>

  case Log_level_debug:
	return "debug";
 8002a80:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <Log_returnLevelString+0x64>)
 8002a82:	e00a      	b.n	8002a9a <Log_returnLevelString+0x52>

  case Log_level_info:
	return "info";
 8002a84:	4b0a      	ldr	r3, [pc, #40]	; (8002ab0 <Log_returnLevelString+0x68>)
 8002a86:	e008      	b.n	8002a9a <Log_returnLevelString+0x52>

  case Log_level_warning:
	return "Warning";
 8002a88:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <Log_returnLevelString+0x6c>)
 8002a8a:	e006      	b.n	8002a9a <Log_returnLevelString+0x52>

  case Log_level_error:
	return "ERROR";
 8002a8c:	4b0a      	ldr	r3, [pc, #40]	; (8002ab8 <Log_returnLevelString+0x70>)
 8002a8e:	e004      	b.n	8002a9a <Log_returnLevelString+0x52>

  case Log_level_fatal:
	return "FATAL";
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <Log_returnLevelString+0x74>)
 8002a92:	e002      	b.n	8002a9a <Log_returnLevelString+0x52>

  case Log_level_disable:
	return "disable";
 8002a94:	4b0a      	ldr	r3, [pc, #40]	; (8002ac0 <Log_returnLevelString+0x78>)
 8002a96:	e000      	b.n	8002a9a <Log_returnLevelString+0x52>

  default:
	return "INVALID";
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <Log_returnLevelString+0x7c>)
  }
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	080291b4 	.word	0x080291b4
 8002aac:	080291bc 	.word	0x080291bc
 8002ab0:	080291c4 	.word	0x080291c4
 8002ab4:	080291ec 	.word	0x080291ec
 8002ab8:	080291f4 	.word	0x080291f4
 8002abc:	080291fc 	.word	0x080291fc
 8002ac0:	080291e4 	.word	0x080291e4
 8002ac4:	08029204 	.word	0x08029204

08002ac8 <Log_insertOnTheList>:

  bool Log_insertOnTheList(Log_t *log)
  {
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af04      	add	r7, sp, #16
 8002ace:	6078      	str	r0, [r7, #4]
	CheckPointer_ifError_return(log, false);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <Log_insertOnTheList+0x12>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	e0d4      	b.n	8002c84 <Log_insertOnTheList+0x1bc>
	uint32_t count = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]

	/* look if it is already on the list */
	for (count = 0; count < logConfig->logList_count; count++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60fb      	str	r3, [r7, #12]
 8002ae2:	e064      	b.n	8002bae <Log_insertOnTheList+0xe6>
	{
	  if (memcmp(logConfig->logList[count].name, log->name, sizeof(log->name))
 8002ae4:	4b69      	ldr	r3, [pc, #420]	; (8002c8c <Log_insertOnTheList+0x1c4>)
 8002ae6:	6819      	ldr	r1, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	f103 0008 	add.w	r0, r3, #8
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3304      	adds	r3, #4
 8002afc:	220b      	movs	r2, #11
 8002afe:	4619      	mov	r1, r3
 8002b00:	f022 fafa 	bl	80250f8 <memcmp>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d14e      	bne.n	8002ba8 <Log_insertOnTheList+0xe0>
		  == 0)
	  {
		log->pos = logConfig->logList[count].pos;
 8002b0a:	4b60      	ldr	r3, [pc, #384]	; (8002c8c <Log_insertOnTheList+0x1c4>)
 8002b0c:	6819      	ldr	r1, [r3, #0]
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	4613      	mov	r3, r2
 8002b12:	005b      	lsls	r3, r3, #1
 8002b14:	4413      	add	r3, r2
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	440b      	add	r3, r1
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	601a      	str	r2, [r3, #0]
		log->level = logConfig->logList[count].level;
 8002b22:	4b5a      	ldr	r3, [pc, #360]	; (8002c8c <Log_insertOnTheList+0x1c4>)
 8002b24:	6819      	ldr	r1, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	3313      	adds	r3, #19
 8002b34:	781a      	ldrb	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	73da      	strb	r2, [r3, #15]
		logConfig->logList[count].levelDefault = log->levelDefault;
 8002b3a:	4b54      	ldr	r3, [pc, #336]	; (8002c8c <Log_insertOnTheList+0x1c4>)
 8002b3c:	6819      	ldr	r1, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	7c18      	ldrb	r0, [r3, #16]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4613      	mov	r3, r2
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	3314      	adds	r3, #20
 8002b50:	4602      	mov	r2, r0
 8002b52:	701a      	strb	r2, [r3, #0]
		logConfig->logList[count].ptrAddress = (uint32_t) log;
 8002b54:	4b4d      	ldr	r3, [pc, #308]	; (8002c8c <Log_insertOnTheList+0x1c4>)
 8002b56:	6818      	ldr	r0, [r3, #0]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	68fa      	ldr	r2, [r7, #12]
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	4403      	add	r3, r0
 8002b66:	3318      	adds	r3, #24
 8002b68:	6019      	str	r1, [r3, #0]
		Log_print(log_log, Log_level_trace, "Log %s restored from file",log->name);
 8002b6a:	4b49      	ldr	r3, [pc, #292]	; (8002c90 <Log_insertOnTheList+0x1c8>)
 8002b6c:	7bdb      	ldrb	r3, [r3, #15]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d818      	bhi.n	8002ba4 <Log_insertOnTheList+0xdc>
 8002b72:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <Log_insertOnTheList+0x1c8>)
 8002b74:	7bdb      	ldrb	r3, [r3, #15]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d114      	bne.n	8002ba4 <Log_insertOnTheList+0xdc>
 8002b7a:	4b46      	ldr	r3, [pc, #280]	; (8002c94 <Log_insertOnTheList+0x1cc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4798      	blx	r3
 8002b80:	4604      	mov	r4, r0
 8002b82:	2000      	movs	r0, #0
 8002b84:	f7ff ff60 	bl	8002a48 <Log_returnLevelString>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	9302      	str	r3, [sp, #8]
 8002b90:	2377      	movs	r3, #119	; 0x77
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	4b40      	ldr	r3, [pc, #256]	; (8002c98 <Log_insertOnTheList+0x1d0>)
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	4a40      	ldr	r2, [pc, #256]	; (8002c9c <Log_insertOnTheList+0x1d4>)
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	4840      	ldr	r0, [pc, #256]	; (8002ca0 <Log_insertOnTheList+0x1d8>)
 8002ba0:	f022 f90e 	bl	8024dc0 <iprintf>
		return true;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e06d      	b.n	8002c84 <Log_insertOnTheList+0x1bc>
	for (count = 0; count < logConfig->logList_count; count++)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3301      	adds	r3, #1
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <Log_insertOnTheList+0x1c4>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	885b      	ldrh	r3, [r3, #2]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d393      	bcc.n	8002ae4 <Log_insertOnTheList+0x1c>
	  }
	}

	log->pos = logConfig->logList_count;
 8002bbc:	4b33      	ldr	r3, [pc, #204]	; (8002c8c <Log_insertOnTheList+0x1c4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	885b      	ldrh	r3, [r3, #2]
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	601a      	str	r2, [r3, #0]
	memcpy(&(logConfig->logList[logConfig->logList_count]), log, sizeof(Log_t));
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <Log_insertOnTheList+0x1c4>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <Log_insertOnTheList+0x1c4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	885b      	ldrh	r3, [r3, #2]
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	440b      	add	r3, r1
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	3304      	adds	r3, #4
 8002be0:	2218      	movs	r2, #24
 8002be2:	6879      	ldr	r1, [r7, #4]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f023 fdaa 	bl	802673e <memcpy>
	logConfig->logList_count++;
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <Log_insertOnTheList+0x1c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	885a      	ldrh	r2, [r3, #2]
 8002bf0:	3201      	adds	r2, #1
 8002bf2:	b292      	uxth	r2, r2
 8002bf4:	805a      	strh	r2, [r3, #2]
	if (logFilesWasRead)
 8002bf6:	4b2b      	ldr	r3, [pc, #172]	; (8002ca4 <Log_insertOnTheList+0x1dc>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d024      	beq.n	8002c48 <Log_insertOnTheList+0x180>
	{
	  if (!Log_SaveFileConfig())
 8002bfe:	f000 f933 	bl	8002e68 <Log_SaveFileConfig>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f083 0301 	eor.w	r3, r3, #1
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01c      	beq.n	8002c48 <Log_insertOnTheList+0x180>
	  {
		Log_print(log_log, Log_level_error, "Failed to save log %s on file",
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <Log_insertOnTheList+0x1c8>)
 8002c10:	7bdb      	ldrb	r3, [r3, #15]
 8002c12:	2b05      	cmp	r3, #5
 8002c14:	d818      	bhi.n	8002c48 <Log_insertOnTheList+0x180>
 8002c16:	4b1e      	ldr	r3, [pc, #120]	; (8002c90 <Log_insertOnTheList+0x1c8>)
 8002c18:	7bdb      	ldrb	r3, [r3, #15]
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d814      	bhi.n	8002c48 <Log_insertOnTheList+0x180>
 8002c1e:	4b1d      	ldr	r3, [pc, #116]	; (8002c94 <Log_insertOnTheList+0x1cc>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4798      	blx	r3
 8002c24:	4604      	mov	r4, r0
 8002c26:	2004      	movs	r0, #4
 8002c28:	f7ff ff0e 	bl	8002a48 <Log_returnLevelString>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3304      	adds	r3, #4
 8002c32:	9302      	str	r3, [sp, #8]
 8002c34:	2383      	movs	r3, #131	; 0x83
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	4b17      	ldr	r3, [pc, #92]	; (8002c98 <Log_insertOnTheList+0x1d0>)
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	4a17      	ldr	r2, [pc, #92]	; (8002c9c <Log_insertOnTheList+0x1d4>)
 8002c40:	4621      	mov	r1, r4
 8002c42:	4819      	ldr	r0, [pc, #100]	; (8002ca8 <Log_insertOnTheList+0x1e0>)
 8002c44:	f022 f8bc 	bl	8024dc0 <iprintf>
			log->name);
	  }
	}

	Log_print(log_log, Log_level_trace, "Log %s was added on the list",
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <Log_insertOnTheList+0x1c8>)
 8002c4a:	7bdb      	ldrb	r3, [r3, #15]
 8002c4c:	2b05      	cmp	r3, #5
 8002c4e:	d818      	bhi.n	8002c82 <Log_insertOnTheList+0x1ba>
 8002c50:	4b0f      	ldr	r3, [pc, #60]	; (8002c90 <Log_insertOnTheList+0x1c8>)
 8002c52:	7bdb      	ldrb	r3, [r3, #15]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d114      	bne.n	8002c82 <Log_insertOnTheList+0x1ba>
 8002c58:	4b0e      	ldr	r3, [pc, #56]	; (8002c94 <Log_insertOnTheList+0x1cc>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4798      	blx	r3
 8002c5e:	4604      	mov	r4, r0
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7ff fef1 	bl	8002a48 <Log_returnLevelString>
 8002c66:	4602      	mov	r2, r0
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	9302      	str	r3, [sp, #8]
 8002c6e:	2388      	movs	r3, #136	; 0x88
 8002c70:	9301      	str	r3, [sp, #4]
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <Log_insertOnTheList+0x1d0>)
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <Log_insertOnTheList+0x1d4>)
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	480b      	ldr	r0, [pc, #44]	; (8002cac <Log_insertOnTheList+0x1e4>)
 8002c7e:	f022 f89f 	bl	8024dc0 <iprintf>
		log->name);
	return true;
 8002c82:	2301      	movs	r3, #1
  }
 8002c84:	4618      	mov	r0, r3
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd90      	pop	{r4, r7, pc}
 8002c8c:	20001efc 	.word	0x20001efc
 8002c90:	20001f08 	.word	0x20001f08
 8002c94:	20001f04 	.word	0x20001f04
 8002c98:	0802dc1c 	.word	0x0802dc1c
 8002c9c:	20001f0c 	.word	0x20001f0c
 8002ca0:	0802920c 	.word	0x0802920c
 8002ca4:	20001f00 	.word	0x20001f00
 8002ca8:	0802923c 	.word	0x0802923c
 8002cac:	08029270 	.word	0x08029270

08002cb0 <Log_printAllLogsOnTheList>:

  void Log_printAllLogsOnTheList()
  {
 8002cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af02      	add	r7, sp, #8
	uint32_t count = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	607b      	str	r3, [r7, #4]
	if (logConfig->logList_count == 0)
 8002cba:	4b37      	ldr	r3, [pc, #220]	; (8002d98 <Log_printAllLogsOnTheList+0xe8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	885b      	ldrh	r3, [r3, #2]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d103      	bne.n	8002ccc <Log_printAllLogsOnTheList+0x1c>
	{
	  printf("There is no log on the list"Log_newLine);
 8002cc4:	4835      	ldr	r0, [pc, #212]	; (8002d9c <Log_printAllLogsOnTheList+0xec>)
 8002cc6:	f022 f8e1 	bl	8024e8c <puts>
	  return;
 8002cca:	e061      	b.n	8002d90 <Log_printAllLogsOnTheList+0xe0>
	}
	printf("There are %d logs registered"Log_newLine""Log_newLine,
		logConfig->logList_count);
 8002ccc:	4b32      	ldr	r3, [pc, #200]	; (8002d98 <Log_printAllLogsOnTheList+0xe8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	885b      	ldrh	r3, [r3, #2]
	printf("There are %d logs registered"Log_newLine""Log_newLine,
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4832      	ldr	r0, [pc, #200]	; (8002da0 <Log_printAllLogsOnTheList+0xf0>)
 8002cd6:	f022 f873 	bl	8024dc0 <iprintf>
	printf(" |-------------|-------------|--------------|"Log_newLine);
 8002cda:	4832      	ldr	r0, [pc, #200]	; (8002da4 <Log_printAllLogsOnTheList+0xf4>)
 8002cdc:	f022 f8d6 	bl	8024e8c <puts>
	printf(" |     Name    |     Level   | DefaultLevel |"Log_newLine);
 8002ce0:	4831      	ldr	r0, [pc, #196]	; (8002da8 <Log_printAllLogsOnTheList+0xf8>)
 8002ce2:	f022 f8d3 	bl	8024e8c <puts>
	printf(" |-------------|-------------|--------------|"Log_newLine);
 8002ce6:	482f      	ldr	r0, [pc, #188]	; (8002da4 <Log_printAllLogsOnTheList+0xf4>)
 8002ce8:	f022 f8d0 	bl	8024e8c <puts>
	for (count = 0; count < logConfig->logList_count; count++)
 8002cec:	2300      	movs	r3, #0
 8002cee:	607b      	str	r3, [r7, #4]
 8002cf0:	e044      	b.n	8002d7c <Log_printAllLogsOnTheList+0xcc>
	{
	  printf(" | %11s | %7s[%02d] |  %7s[%02d] |"Log_newLine,
		  logConfig->logList[count].name,
 8002cf2:	4b29      	ldr	r3, [pc, #164]	; (8002d98 <Log_printAllLogsOnTheList+0xe8>)
 8002cf4:	6819      	ldr	r1, [r3, #0]
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	4413      	add	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	440b      	add	r3, r1
 8002d02:	f103 0408 	add.w	r4, r3, #8
		  Log_returnLevelString(logConfig->logList[count].level),
 8002d06:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <Log_printAllLogsOnTheList+0xe8>)
 8002d08:	6819      	ldr	r1, [r3, #0]
	  printf(" | %11s | %7s[%02d] |  %7s[%02d] |"Log_newLine,
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4413      	add	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	440b      	add	r3, r1
 8002d16:	3313      	adds	r3, #19
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff fe94 	bl	8002a48 <Log_returnLevelString>
 8002d20:	4605      	mov	r5, r0
		  logConfig->logList[count].level,
 8002d22:	4b1d      	ldr	r3, [pc, #116]	; (8002d98 <Log_printAllLogsOnTheList+0xe8>)
 8002d24:	6819      	ldr	r1, [r3, #0]
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4413      	add	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	440b      	add	r3, r1
 8002d32:	3313      	adds	r3, #19
 8002d34:	781b      	ldrb	r3, [r3, #0]
	  printf(" | %11s | %7s[%02d] |  %7s[%02d] |"Log_newLine,
 8002d36:	461e      	mov	r6, r3
		  Log_returnLevelString(logConfig->logList[count].levelDefault),
 8002d38:	4b17      	ldr	r3, [pc, #92]	; (8002d98 <Log_printAllLogsOnTheList+0xe8>)
 8002d3a:	6819      	ldr	r1, [r3, #0]
	  printf(" | %11s | %7s[%02d] |  %7s[%02d] |"Log_newLine,
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	4413      	add	r3, r2
 8002d44:	00db      	lsls	r3, r3, #3
 8002d46:	440b      	add	r3, r1
 8002d48:	3314      	adds	r3, #20
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fe7b 	bl	8002a48 <Log_returnLevelString>
		  logConfig->logList[count].levelDefault);
 8002d52:	4b11      	ldr	r3, [pc, #68]	; (8002d98 <Log_printAllLogsOnTheList+0xe8>)
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	3314      	adds	r3, #20
 8002d64:	781b      	ldrb	r3, [r3, #0]
	  printf(" | %11s | %7s[%02d] |  %7s[%02d] |"Log_newLine,
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	9000      	str	r0, [sp, #0]
 8002d6a:	4633      	mov	r3, r6
 8002d6c:	462a      	mov	r2, r5
 8002d6e:	4621      	mov	r1, r4
 8002d70:	480e      	ldr	r0, [pc, #56]	; (8002dac <Log_printAllLogsOnTheList+0xfc>)
 8002d72:	f022 f825 	bl	8024dc0 <iprintf>
	for (count = 0; count < logConfig->logList_count; count++)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	607b      	str	r3, [r7, #4]
 8002d7c:	4b06      	ldr	r3, [pc, #24]	; (8002d98 <Log_printAllLogsOnTheList+0xe8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	885b      	ldrh	r3, [r3, #2]
 8002d82:	461a      	mov	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d3b3      	bcc.n	8002cf2 <Log_printAllLogsOnTheList+0x42>
	}
	printf(" |-------------|-------------|--------------|"Log_newLine);
 8002d8a:	4806      	ldr	r0, [pc, #24]	; (8002da4 <Log_printAllLogsOnTheList+0xf4>)
 8002d8c:	f022 f87e 	bl	8024e8c <puts>
  }
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20001efc 	.word	0x20001efc
 8002d9c:	080292a0 	.word	0x080292a0
 8002da0:	080292c0 	.word	0x080292c0
 8002da4:	080292e4 	.word	0x080292e4
 8002da8:	08029314 	.word	0x08029314
 8002dac:	08029344 	.word	0x08029344

08002db0 <Log_init>:
  }



  bool Log_init(Log_t *log, char logName[], Log_level_t level)
  {
 8002db0:	b590      	push	{r4, r7, lr}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af02      	add	r7, sp, #8
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	71fb      	strb	r3, [r7, #7]
#if LOG_ENABLE
	CheckPointer_ifError_return(log, false);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d101      	bne.n	8002dc8 <Log_init+0x18>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e041      	b.n	8002e4c <Log_init+0x9c>
	if (!CheckIfItIs_valid_enum(level, Log_level_trace, Log_level_disable))
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d91b      	bls.n	8002e06 <Log_init+0x56>
	{
	  Log_print(log_log, Log_level_error, "Invalid log level value");
 8002dce:	4b21      	ldr	r3, [pc, #132]	; (8002e54 <Log_init+0xa4>)
 8002dd0:	7bdb      	ldrb	r3, [r3, #15]
 8002dd2:	2b05      	cmp	r3, #5
 8002dd4:	d815      	bhi.n	8002e02 <Log_init+0x52>
 8002dd6:	4b1f      	ldr	r3, [pc, #124]	; (8002e54 <Log_init+0xa4>)
 8002dd8:	7bdb      	ldrb	r3, [r3, #15]
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d811      	bhi.n	8002e02 <Log_init+0x52>
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <Log_init+0xa8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4798      	blx	r3
 8002de4:	4604      	mov	r4, r0
 8002de6:	2004      	movs	r0, #4
 8002de8:	f7ff fe2e 	bl	8002a48 <Log_returnLevelString>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f44f 7289 	mov.w	r2, #274	; 0x112
 8002df2:	9201      	str	r2, [sp, #4]
 8002df4:	4a19      	ldr	r2, [pc, #100]	; (8002e5c <Log_init+0xac>)
 8002df6:	9200      	str	r2, [sp, #0]
 8002df8:	4a19      	ldr	r2, [pc, #100]	; (8002e60 <Log_init+0xb0>)
 8002dfa:	4621      	mov	r1, r4
 8002dfc:	4819      	ldr	r0, [pc, #100]	; (8002e64 <Log_init+0xb4>)
 8002dfe:	f021 ffdf 	bl	8024dc0 <iprintf>
	  return false;
 8002e02:	2300      	movs	r3, #0
 8002e04:	e022      	b.n	8002e4c <Log_init+0x9c>
	}

	memset(log->name, 0, sizeof(log->name));
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3304      	adds	r3, #4
 8002e0a:	220b      	movs	r2, #11
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f022 f99c 	bl	802514c <memset>
	strncpy(log->name, logName, sizeof(log->name) - 1);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3304      	adds	r3, #4
 8002e18:	220a      	movs	r2, #10
 8002e1a:	68b9      	ldr	r1, [r7, #8]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f022 f9dc 	bl	80251da <strncpy>
	log->level = level;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	79fa      	ldrb	r2, [r7, #7]
 8002e26:	73da      	strb	r2, [r3, #15]
	log->levelDefault = level;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	79fa      	ldrb	r2, [r7, #7]
 8002e2c:	741a      	strb	r2, [r3, #16]
	log->ptrAddress = (uint32_t) log;
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	615a      	str	r2, [r3, #20]

	if (!Log_insertOnTheList(log))
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7ff fe47 	bl	8002ac8 <Log_insertOnTheList>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	f083 0301 	eor.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <Log_init+0x9a>
	{
	  return false;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e000      	b.n	8002e4c <Log_init+0x9c>
	}
#endif /*LOG_ENABLE*/

	return true;
 8002e4a:	2301      	movs	r3, #1
  }
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3714      	adds	r7, #20
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd90      	pop	{r4, r7, pc}
 8002e54:	20001f08 	.word	0x20001f08
 8002e58:	20001f04 	.word	0x20001f04
 8002e5c:	0802dc30 	.word	0x0802dc30
 8002e60:	20001f0c 	.word	0x20001f0c
 8002e64:	0802939c 	.word	0x0802939c

08002e68 <Log_SaveFileConfig>:


  bool Log_SaveFileConfig()
  {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0

	if (!CfgFiles_UpdateCfgFileByIndex(LOG_FILE_IDX, false))
 8002e6c:	2100      	movs	r1, #0
 8002e6e:	2003      	movs	r0, #3
 8002e70:	f7ff f926 	bl	80020c0 <CfgFiles_UpdateCfgFileByIndex>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f083 0301 	eor.w	r3, r3, #1
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <Log_SaveFileConfig+0x1c>
	{
	 // Log_print(log_log, Log_level_error, "Failed to LOG config file");
	  return false;
 8002e80:	2300      	movs	r3, #0
 8002e82:	e000      	b.n	8002e86 <Log_SaveFileConfig+0x1e>
	}
	return true;
 8002e84:	2301      	movs	r3, #1
  }
 8002e86:	4618      	mov	r0, r3
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <Log_printVersion>:
	}
	return false;
  }

  void Log_printVersion()
  {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08a      	sub	sp, #40	; 0x28
 8002e90:	af00      	add	r7, sp, #0
	struct tm timeinfo = {0};
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2224      	movs	r2, #36	; 0x24
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f022 f957 	bl	802514c <memset>

	DateTimeGetTm(&timeinfo );
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f7ff f9af 	bl	8002204 <DateTimeGetTm>

	printf(Log_newLine"HorusGateway"Log_newLine);
 8002ea6:	480c      	ldr	r0, [pc, #48]	; (8002ed8 <Log_printVersion+0x4c>)
 8002ea8:	f021 fff0 	bl	8024e8c <puts>
	printf("  Firmware v.%d.%d%d"Log_newLine, FW_MAJOR_VERSION,
 8002eac:	2300      	movs	r3, #0
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	480a      	ldr	r0, [pc, #40]	; (8002edc <Log_printVersion+0x50>)
 8002eb4:	f021 ff84 	bl	8024dc0 <iprintf>
		FW_MINOR_VERSION, FW_BUILD_VERSION);
	printf("  Build %s %s"Log_newLine, __DATE__, __TIME__);
 8002eb8:	4a09      	ldr	r2, [pc, #36]	; (8002ee0 <Log_printVersion+0x54>)
 8002eba:	490a      	ldr	r1, [pc, #40]	; (8002ee4 <Log_printVersion+0x58>)
 8002ebc:	480a      	ldr	r0, [pc, #40]	; (8002ee8 <Log_printVersion+0x5c>)
 8002ebe:	f021 ff7f 	bl	8024dc0 <iprintf>

	printf("  Start firmware %s \r\n", DateTimeGetString());
 8002ec2:	f7ff f969 	bl	8002198 <DateTimeGetString>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4808      	ldr	r0, [pc, #32]	; (8002eec <Log_printVersion+0x60>)
 8002ecc:	f021 ff78 	bl	8024dc0 <iprintf>

  }
 8002ed0:	bf00      	nop
 8002ed2:	3728      	adds	r7, #40	; 0x28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	08029408 	.word	0x08029408
 8002edc:	08029418 	.word	0x08029418
 8002ee0:	08029430 	.word	0x08029430
 8002ee4:	0802943c 	.word	0x0802943c
 8002ee8:	08029448 	.word	0x08029448
 8002eec:	08029458 	.word	0x08029458

08002ef0 <Log_printLogo>:

  void Log_printLogo()
  {
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
	printf(LOGO);
 8002ef4:	4802      	ldr	r0, [pc, #8]	; (8002f00 <Log_printLogo+0x10>)
 8002ef6:	f021 ff63 	bl	8024dc0 <iprintf>
  }
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	08029470 	.word	0x08029470

08002f04 <Log_initModule>:

  /*####################### List Log Functions #######################*/

  void Log_initModule (char *(*funcToGetDateTime) ())

{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

 Log_funcToGetDateTime = funcToGetDateTime;
 8002f0c:	4a0b      	ldr	r2, [pc, #44]	; (8002f3c <Log_initModule+0x38>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <Log_initModule+0x3c>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

  memset(&logConfig, 0, sizeof(logConfig));
//	Log_funcToGetDateTime = funcToGetDateTime;

  Log_init(&log_log, LOG_LOGNAME, LOG_LOGLEVEL_DEFAULT);
 8002f18:	2203      	movs	r2, #3
 8002f1a:	490a      	ldr	r1, [pc, #40]	; (8002f44 <Log_initModule+0x40>)
 8002f1c:	480a      	ldr	r0, [pc, #40]	; (8002f48 <Log_initModule+0x44>)
 8002f1e:	f7ff ff47 	bl	8002db0 <Log_init>

  //  Logger_CLI_initCommands ();
  Log_printLogo();
 8002f22:	f7ff ffe5 	bl	8002ef0 <Log_printLogo>
  Log_printVersion();
 8002f26:	f7ff ffb1 	bl	8002e8c <Log_printVersion>

  logConfig = &logConfigFile;
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <Log_initModule+0x3c>)
 8002f2c:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <Log_initModule+0x48>)
 8002f2e:	601a      	str	r2, [r3, #0]
  Log_printAllLogsOnTheList();
 8002f30:	f7ff febe 	bl	8002cb0 <Log_printAllLogsOnTheList>

}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	20001f04 	.word	0x20001f04
 8002f40:	20001efc 	.word	0x20001efc
 8002f44:	080297e8 	.word	0x080297e8
 8002f48:	20001f08 	.word	0x20001f08
 8002f4c:	20000930 	.word	0x20000930

08002f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0

  /* MCU Configuration----
   * ----------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f54:	f001 fb44 	bl	80045e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f58:	f000 f820 	bl	8002f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f5c:	f7ff fbc0 	bl	80026e0 <MX_GPIO_Init>
  MX_SPI2_Init();
 8002f60:	f000 fef6 	bl	8003d50 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8002f64:	f001 f940 	bl	80041e8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002f68:	f7ff fc50 	bl	800280c <MX_I2C1_Init>
  MX_RTC_Init();
 8002f6c:	f000 fc76 	bl	800385c <MX_RTC_Init>

  /* USER CODE BEGIN 2 */
  HorusIhmInit();
 8002f70:	f000 f8b6 	bl	80030e0 <HorusIhmInit>
  FileSystemInit();
 8002f74:	f7fe fb86 	bl	8001684 <FileSystemInit>
  CfgFilesInit();
 8002f78:	f7fe ffa0 	bl	8001ebc <CfgFilesInit>
  Log_initModule(DateTimeGetString);
 8002f7c:	4806      	ldr	r0, [pc, #24]	; (8002f98 <main+0x48>)
 8002f7e:	f7ff ffc1 	bl	8002f04 <Log_initModule>
  ModbusInit();
 8002f82:	f020 f9f7 	bl	8023374 <ModbusInit>
  AdapterSSD1306_Init();
 8002f86:	f7fe f801 	bl	8000f8c <AdapterSSD1306_Init>
  SntpClientInit();
 8002f8a:	f000 feb1 	bl	8003cf0 <SntpClientInit>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002f8e:	f7ff f9e1 	bl	8002354 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002f92:	f007 f884 	bl	800a09e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f96:	e7fe      	b.n	8002f96 <main+0x46>
 8002f98:	08002199 	.word	0x08002199

08002f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b094      	sub	sp, #80	; 0x50
 8002fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fa2:	f107 0320 	add.w	r3, r7, #32
 8002fa6:	2230      	movs	r2, #48	; 0x30
 8002fa8:	2100      	movs	r1, #0
 8002faa:	4618      	mov	r0, r3
 8002fac:	f022 f8ce 	bl	802514c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fb0:	f107 030c 	add.w	r3, r7, #12
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
 8002fba:	609a      	str	r2, [r3, #8]
 8002fbc:	60da      	str	r2, [r3, #12]
 8002fbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	4b29      	ldr	r3, [pc, #164]	; (800306c <SystemClock_Config+0xd0>)
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	4a28      	ldr	r2, [pc, #160]	; (800306c <SystemClock_Config+0xd0>)
 8002fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fce:	6413      	str	r3, [r2, #64]	; 0x40
 8002fd0:	4b26      	ldr	r3, [pc, #152]	; (800306c <SystemClock_Config+0xd0>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fdc:	2300      	movs	r3, #0
 8002fde:	607b      	str	r3, [r7, #4]
 8002fe0:	4b23      	ldr	r3, [pc, #140]	; (8003070 <SystemClock_Config+0xd4>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a22      	ldr	r2, [pc, #136]	; (8003070 <SystemClock_Config+0xd4>)
 8002fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fea:	6013      	str	r3, [r2, #0]
 8002fec:	4b20      	ldr	r3, [pc, #128]	; (8003070 <SystemClock_Config+0xd4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8002ff8:	2305      	movs	r3, #5
 8002ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ffc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003002:	2301      	movs	r3, #1
 8003004:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003006:	2302      	movs	r3, #2
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800300a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800300e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8003010:	2319      	movs	r3, #25
 8003012:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003014:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003018:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800301a:	2302      	movs	r3, #2
 800301c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800301e:	2304      	movs	r3, #4
 8003020:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003022:	f107 0320 	add.w	r3, r7, #32
 8003026:	4618      	mov	r0, r3
 8003028:	f003 fd14 	bl	8006a54 <HAL_RCC_OscConfig>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003032:	f000 f8dd 	bl	80031f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003036:	230f      	movs	r3, #15
 8003038:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800303a:	2302      	movs	r3, #2
 800303c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800303e:	2300      	movs	r3, #0
 8003040:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003042:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003046:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800304c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800304e:	f107 030c 	add.w	r3, r7, #12
 8003052:	2105      	movs	r1, #5
 8003054:	4618      	mov	r0, r3
 8003056:	f003 ff75 	bl	8006f44 <HAL_RCC_ClockConfig>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003060:	f000 f8c6 	bl	80031f0 <Error_Handler>
  }
}
 8003064:	bf00      	nop
 8003066:	3750      	adds	r7, #80	; 0x50
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40023800 	.word	0x40023800
 8003070:	40007000 	.word	0x40007000

08003074 <__io_putchar>:

/* USER CODE BEGIN 4 */

int __io_putchar(int ch)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
//	return ITM_SendChar(ch);
  unsigned char byte = ch;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	b2db      	uxtb	r3, r3
 8003080:	73fb      	strb	r3, [r7, #15]
  if (HAL_UART_Transmit(&huart1, &byte, 1, 100) != HAL_OK)
 8003082:	f107 010f 	add.w	r1, r7, #15
 8003086:	2364      	movs	r3, #100	; 0x64
 8003088:	2201      	movs	r2, #1
 800308a:	4806      	ldr	r0, [pc, #24]	; (80030a4 <__io_putchar+0x30>)
 800308c:	f005 fe22 	bl	8008cd4 <HAL_UART_Transmit>
 8003090:	4603      	mov	r3, r0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <__io_putchar+0x26>
  {

    return 0;
 8003096:	2300      	movs	r3, #0
 8003098:	e000      	b.n	800309c <__io_putchar+0x28>
  }
  return ch;
 800309a:	687b      	ldr	r3, [r7, #4]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	2000202c 	.word	0x2000202c

080030a8 <HorusOperationMode>:

void HorusOperationMode(TOperationMode operationMode)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b082      	sub	sp, #8
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	4603      	mov	r3, r0
 80030b0:	71fb      	strb	r3, [r7, #7]
  switch (operationMode)
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d009      	beq.n	80030cc <HorusOperationMode+0x24>
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	dc09      	bgt.n	80030d0 <HorusOperationMode+0x28>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <HorusOperationMode+0x2c>
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d000      	beq.n	80030c6 <HorusOperationMode+0x1e>

	break;

  default:

	break;
 80030c4:	e004      	b.n	80030d0 <HorusOperationMode+0x28>
	ModbusServerInit();
 80030c6:	f000 fb99 	bl	80037fc <ModbusServerInit>
	break;
 80030ca:	e004      	b.n	80030d6 <HorusOperationMode+0x2e>
	break;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <HorusOperationMode+0x2e>
	break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <HorusOperationMode+0x2e>
	break;
 80030d4:	bf00      	nop
  }

}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
	...

080030e0 <HorusIhmInit>:


void HorusIhmInit()
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0

  while (initTimeou < 100)
 80030e4:	e00d      	b.n	8003102 <HorusIhmInit+0x22>
  {
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80030e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80030ea:	4835      	ldr	r0, [pc, #212]	; (80031c0 <HorusIhmInit+0xe0>)
 80030ec:	f002 ffe9 	bl	80060c2 <HAL_GPIO_TogglePin>
	HAL_Delay(30);
 80030f0:	201e      	movs	r0, #30
 80030f2:	f001 fab7 	bl	8004664 <HAL_Delay>
	initTimeou++;
 80030f6:	4b33      	ldr	r3, [pc, #204]	; (80031c4 <HorusIhmInit+0xe4>)
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	3301      	adds	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	4b31      	ldr	r3, [pc, #196]	; (80031c4 <HorusIhmInit+0xe4>)
 8003100:	801a      	strh	r2, [r3, #0]
  while (initTimeou < 100)
 8003102:	4b30      	ldr	r3, [pc, #192]	; (80031c4 <HorusIhmInit+0xe4>)
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	2b63      	cmp	r3, #99	; 0x63
 8003108:	d9ed      	bls.n	80030e6 <HorusIhmInit+0x6>
  }

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 800310a:	2200      	movs	r2, #0
 800310c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003110:	482b      	ldr	r0, [pc, #172]	; (80031c0 <HorusIhmInit+0xe0>)
 8003112:	f002 ffbd 	bl	8006090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8003116:	2200      	movs	r2, #0
 8003118:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800311c:	4828      	ldr	r0, [pc, #160]	; (80031c0 <HorusIhmInit+0xe0>)
 800311e:	f002 ffb7 	bl	8006090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8003122:	2200      	movs	r2, #0
 8003124:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003128:	4825      	ldr	r0, [pc, #148]	; (80031c0 <HorusIhmInit+0xe0>)
 800312a:	f002 ffb1 	bl	8006090 <HAL_GPIO_WritePin>

  initTimeou = 0;
 800312e:	4b25      	ldr	r3, [pc, #148]	; (80031c4 <HorusIhmInit+0xe4>)
 8003130:	2200      	movs	r2, #0
 8003132:	801a      	strh	r2, [r3, #0]

  while (initTimeou < 20)
 8003134:	e02c      	b.n	8003190 <HorusIhmInit+0xb0>
  {

	if (HAL_GPIO_ReadPin(BT_SW3_GPIO_Port, BT_SW3_Pin) == 0)
 8003136:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800313a:	4821      	ldr	r0, [pc, #132]	; (80031c0 <HorusIhmInit+0xe0>)
 800313c:	f002 ff90 	bl	8006060 <HAL_GPIO_ReadPin>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d103      	bne.n	800314e <HorusIhmInit+0x6e>
	{
	  operationMode = NET_MODE;
 8003146:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <HorusIhmInit+0xe8>)
 8003148:	2200      	movs	r2, #0
 800314a:	701a      	strb	r2, [r3, #0]

	  break;
 800314c:	e024      	b.n	8003198 <HorusIhmInit+0xb8>
	}

	if (HAL_GPIO_ReadPin(BT_SW2_GPIO_Port, BT_SW2_Pin) == 0)
 800314e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003152:	481b      	ldr	r0, [pc, #108]	; (80031c0 <HorusIhmInit+0xe0>)
 8003154:	f002 ff84 	bl	8006060 <HAL_GPIO_ReadPin>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d103      	bne.n	8003166 <HorusIhmInit+0x86>
	{
	  operationMode = CFG_MODE;
 800315e:	4b1a      	ldr	r3, [pc, #104]	; (80031c8 <HorusIhmInit+0xe8>)
 8003160:	2201      	movs	r2, #1
 8003162:	701a      	strb	r2, [r3, #0]

	  break;
 8003164:	e018      	b.n	8003198 <HorusIhmInit+0xb8>

	}

	if (HAL_GPIO_ReadPin(BT_SW1_GPIO_Port, BT_SW1_Pin) == 0)
 8003166:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800316a:	4815      	ldr	r0, [pc, #84]	; (80031c0 <HorusIhmInit+0xe0>)
 800316c:	f002 ff78 	bl	8006060 <HAL_GPIO_ReadPin>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d103      	bne.n	800317e <HorusIhmInit+0x9e>
	{
	  operationMode = BOOT_MODE;
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <HorusIhmInit+0xe8>)
 8003178:	2202      	movs	r2, #2
 800317a:	701a      	strb	r2, [r3, #0]
	  break;
 800317c:	e00c      	b.n	8003198 <HorusIhmInit+0xb8>
	}

	initTimeou++;
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <HorusIhmInit+0xe4>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	b29a      	uxth	r2, r3
 8003186:	4b0f      	ldr	r3, [pc, #60]	; (80031c4 <HorusIhmInit+0xe4>)
 8003188:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 800318a:	2064      	movs	r0, #100	; 0x64
 800318c:	f001 fa6a 	bl	8004664 <HAL_Delay>
  while (initTimeou < 20)
 8003190:	4b0c      	ldr	r3, [pc, #48]	; (80031c4 <HorusIhmInit+0xe4>)
 8003192:	881b      	ldrh	r3, [r3, #0]
 8003194:	2b13      	cmp	r3, #19
 8003196:	d9ce      	bls.n	8003136 <HorusIhmInit+0x56>
  }

  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8003198:	2201      	movs	r2, #1
 800319a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800319e:	4808      	ldr	r0, [pc, #32]	; (80031c0 <HorusIhmInit+0xe0>)
 80031a0:	f002 ff76 	bl	8006090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 80031a4:	2201      	movs	r2, #1
 80031a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031aa:	4805      	ldr	r0, [pc, #20]	; (80031c0 <HorusIhmInit+0xe0>)
 80031ac:	f002 ff70 	bl	8006090 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 80031b0:	2201      	movs	r2, #1
 80031b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031b6:	4802      	ldr	r0, [pc, #8]	; (80031c0 <HorusIhmInit+0xe0>)
 80031b8:	f002 ff6a 	bl	8006090 <HAL_GPIO_WritePin>

}
 80031bc:	bf00      	nop
 80031be:	bd80      	pop	{r7, pc}
 80031c0:	40021000 	.word	0x40021000
 80031c4:	20001f22 	.word	0x20001f22
 80031c8:	20001f20 	.word	0x20001f20

080031cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80031de:	f001 fa21 	bl	8004624 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	40002000 	.word	0x40002000

080031f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031f4:	b672      	cpsid	i
}
 80031f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <Error_Handler+0x8>
	...

080031fc <ModbusStatusInfo>:
//#define LOG2(...)
#define LOG2 LOG


static void ModbusStatusInfo(bool open)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b0b2      	sub	sp, #200	; 0xc8
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
	MenuData_t menu = {0};
 8003206:	f107 0308 	add.w	r3, r7, #8
 800320a:	22bd      	movs	r2, #189	; 0xbd
 800320c:	2100      	movs	r1, #0
 800320e:	4618      	mov	r0, r3
 8003210:	f021 ff9c 	bl	802514c <memset>
	if (open)
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d009      	beq.n	800322e <ModbusStatusInfo+0x32>
	{

		sprintf(menu.items[PAGE_1][LINE_0], "CFG:CN:PORT:%d",MODBUS_SERVER_TCP_PORT);
 800321a:	f107 0308 	add.w	r3, r7, #8
 800321e:	333f      	adds	r3, #63	; 0x3f
 8003220:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8003224:	490b      	ldr	r1, [pc, #44]	; (8003254 <ModbusStatusInfo+0x58>)
 8003226:	4618      	mov	r0, r3
 8003228:	f021 fe6c 	bl	8024f04 <siprintf>
 800322c:	e008      	b.n	8003240 <ModbusStatusInfo+0x44>
	}
	else
	{
		sprintf(menu.items[PAGE_1][LINE_0], "CFG:DC:PORT:%d",MODBUS_SERVER_TCP_PORT);
 800322e:	f107 0308 	add.w	r3, r7, #8
 8003232:	333f      	adds	r3, #63	; 0x3f
 8003234:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8003238:	4907      	ldr	r1, [pc, #28]	; (8003258 <ModbusStatusInfo+0x5c>)
 800323a:	4618      	mov	r0, r3
 800323c:	f021 fe62 	bl	8024f04 <siprintf>
	}

	AdapterSSD1306_SendDataToMenuQueueUpdate(&menu);
 8003240:	f107 0308 	add.w	r3, r7, #8
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe f9e9 	bl	800161c <AdapterSSD1306_SendDataToMenuQueueUpdate>
}
 800324a:	bf00      	nop
 800324c:	37c8      	adds	r7, #200	; 0xc8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	080298ac 	.word	0x080298ac
 8003258:	080298bc 	.word	0x080298bc

0800325c <formatBytes>:




static void formatBytes(uint32_t bytes, char *str)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]

	if (bytes >= MB_THRESHOLD)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800326c:	d313      	bcc.n	8003296 <formatBytes+0x3a>
	{
		sprintf(str, "%.2f MBYTES", bytes / (float) MB_THRESHOLD);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	ee07 3a90 	vmov	s15, r3
 8003274:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003278:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80032d8 <formatBytes+0x7c>
 800327c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003280:	ee16 0a90 	vmov	r0, s13
 8003284:	f7fd f970 	bl	8000568 <__aeabi_f2d>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4913      	ldr	r1, [pc, #76]	; (80032dc <formatBytes+0x80>)
 800328e:	6838      	ldr	r0, [r7, #0]
 8003290:	f021 fe38 	bl	8024f04 <siprintf>
	}
	else
	{
		sprintf(str, "%lu BYTES", bytes);
	}
}
 8003294:	e01c      	b.n	80032d0 <formatBytes+0x74>
	else if (bytes >= KB_THRESHOLD)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800329c:	d313      	bcc.n	80032c6 <formatBytes+0x6a>
		sprintf(str, "%.2f KBYTES", bytes / (float) KB_THRESHOLD);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032a8:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80032e0 <formatBytes+0x84>
 80032ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80032b0:	ee16 0a90 	vmov	r0, s13
 80032b4:	f7fd f958 	bl	8000568 <__aeabi_f2d>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4909      	ldr	r1, [pc, #36]	; (80032e4 <formatBytes+0x88>)
 80032be:	6838      	ldr	r0, [r7, #0]
 80032c0:	f021 fe20 	bl	8024f04 <siprintf>
}
 80032c4:	e004      	b.n	80032d0 <formatBytes+0x74>
		sprintf(str, "%lu BYTES", bytes);
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4907      	ldr	r1, [pc, #28]	; (80032e8 <formatBytes+0x8c>)
 80032ca:	6838      	ldr	r0, [r7, #0]
 80032cc:	f021 fe1a 	bl	8024f04 <siprintf>
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	49800000 	.word	0x49800000
 80032dc:	080298cc 	.word	0x080298cc
 80032e0:	44800000 	.word	0x44800000
 80032e4:	080298d8 	.word	0x080298d8
 80032e8:	080298e4 	.word	0x080298e4

080032ec <Modbus_infoPacket>:

static void Modbus_infoPacket()
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b0ba      	sub	sp, #232	; 0xe8
 80032f0:	af00      	add	r7, sp, #0
	MenuData_t menu = { 0 };
 80032f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80032f6:	22bd      	movs	r2, #189	; 0xbd
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f021 ff26 	bl	802514c <memset>
	char rx_str[17], tx_str[17];

	formatBytes(bytesRx, rx_str);
 8003300:	4b16      	ldr	r3, [pc, #88]	; (800335c <Modbus_infoPacket+0x70>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f107 0214 	add.w	r2, r7, #20
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff ffa6 	bl	800325c <formatBytes>
	formatBytes(bytesTx, tx_str);
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <Modbus_infoPacket+0x74>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	463a      	mov	r2, r7
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff9f 	bl	800325c <formatBytes>

	snprintf(menu.items[PAGE_1][LINE_1], sizeof(menu.items[PAGE_1][LINE_1]), "RX: %s", rx_str);
 800331e:	f107 0214 	add.w	r2, r7, #20
 8003322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003326:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800332a:	4613      	mov	r3, r2
 800332c:	4a0d      	ldr	r2, [pc, #52]	; (8003364 <Modbus_infoPacket+0x78>)
 800332e:	2115      	movs	r1, #21
 8003330:	f021 fdb4 	bl	8024e9c <sniprintf>
	snprintf(menu.items[PAGE_1][LINE_2], sizeof(menu.items[PAGE_1][LINE_2]), "TX: %s", tx_str);
 8003334:	463a      	mov	r2, r7
 8003336:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800333a:	f103 0069 	add.w	r0, r3, #105	; 0x69
 800333e:	4613      	mov	r3, r2
 8003340:	4a09      	ldr	r2, [pc, #36]	; (8003368 <Modbus_infoPacket+0x7c>)
 8003342:	2115      	movs	r1, #21
 8003344:	f021 fdaa 	bl	8024e9c <sniprintf>

	AdapterSSD1306_SendDataToMenuQueueUpdate(&menu);
 8003348:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800334c:	4618      	mov	r0, r3
 800334e:	f7fe f965 	bl	800161c <AdapterSSD1306_SendDataToMenuQueueUpdate>
}
 8003352:	bf00      	nop
 8003354:	37e8      	adds	r7, #232	; 0xe8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	20001f2c 	.word	0x20001f2c
 8003360:	20001f28 	.word	0x20001f28
 8003364:	080298f0 	.word	0x080298f0
 8003368:	080298f8 	.word	0x080298f8

0800336c <ModbusHandleConnection>:



static uint8_t ModbusHandleConnection(struct netconn *connfd)

{
 800336c:	b590      	push	{r4, r7, lr}
 800336e:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8003372:	af04      	add	r7, sp, #16
 8003374:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003378:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 800337c:	6018      	str	r0, [r3, #0]
	unsigned char recvBuffer[MODBUS_SERVER_BUF_SIZE];

	const int RECEIVE_TIMEOUT_MS = 1; // 1 segundo
 800337e:	2301      	movs	r3, #1
 8003380:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214

	netconn_set_recvtimeout(connfd, RECEIVE_TIMEOUT_MS);
 8003384:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8003388:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800338c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	61da      	str	r2, [r3, #28]
	do
	{
		// Receber dados do cliente com um tempo limite
		struct netbuf *inbuf;

		err_t err = netconn_recv(connfd, &inbuf);
 8003394:	f107 0208 	add.w	r2, r7, #8
 8003398:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800339c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80033a0:	4611      	mov	r1, r2
 80033a2:	6818      	ldr	r0, [r3, #0]
 80033a4:	f011 f850 	bl	8014448 <netconn_recv>
 80033a8:	4603      	mov	r3, r0
 80033aa:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

		if (err == ERR_OK)
 80033ae:	f997 3213 	ldrsb.w	r3, [r7, #531]	; 0x213
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	f040 8090 	bne.w	80034d8 <ModbusHandleConnection+0x16c>
		{
			if (netconn_err(connfd) == ERR_OK)
 80033b8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80033bc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80033c0:	6818      	ldr	r0, [r3, #0]
 80033c2:	f011 f9f8 	bl	80147b6 <netconn_err>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f040 808c 	bne.w	80034e6 <ModbusHandleConnection+0x17a>
			{
				/* Process received data */
				netbuf_copy(inbuf, recvBuffer, sizeof(recvBuffer));
 80033ce:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80033d2:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	f107 010c 	add.w	r1, r7, #12
 80033de:	2300      	movs	r3, #0
 80033e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e4:	f015 faf0 	bl	80189c8 <pbuf_copy_partial>
				uint16_t buffer_len = netbuf_len(inbuf);
 80033e8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80033ec:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	891b      	ldrh	r3, [r3, #8]
 80033f6:	f8a7 3210 	strh.w	r3, [r7, #528]	; 0x210

				Log_print(log_notify, Log_level_trace, "Received %u bytes", buffer_len);
 80033fa:	4b40      	ldr	r3, [pc, #256]	; (80034fc <ModbusHandleConnection+0x190>)
 80033fc:	7bdb      	ldrb	r3, [r3, #15]
 80033fe:	2b05      	cmp	r3, #5
 8003400:	d818      	bhi.n	8003434 <ModbusHandleConnection+0xc8>
 8003402:	4b3e      	ldr	r3, [pc, #248]	; (80034fc <ModbusHandleConnection+0x190>)
 8003404:	7bdb      	ldrb	r3, [r3, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d114      	bne.n	8003434 <ModbusHandleConnection+0xc8>
 800340a:	4b3d      	ldr	r3, [pc, #244]	; (8003500 <ModbusHandleConnection+0x194>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4798      	blx	r3
 8003410:	4604      	mov	r4, r0
 8003412:	2000      	movs	r0, #0
 8003414:	f7ff fb18 	bl	8002a48 <Log_returnLevelString>
 8003418:	4602      	mov	r2, r0
 800341a:	f8b7 3210 	ldrh.w	r3, [r7, #528]	; 0x210
 800341e:	9302      	str	r3, [sp, #8]
 8003420:	2374      	movs	r3, #116	; 0x74
 8003422:	9301      	str	r3, [sp, #4]
 8003424:	4b37      	ldr	r3, [pc, #220]	; (8003504 <ModbusHandleConnection+0x198>)
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	4613      	mov	r3, r2
 800342a:	4a37      	ldr	r2, [pc, #220]	; (8003508 <ModbusHandleConnection+0x19c>)
 800342c:	4621      	mov	r1, r4
 800342e:	4837      	ldr	r0, [pc, #220]	; (800350c <ModbusHandleConnection+0x1a0>)
 8003430:	f021 fcc6 	bl	8024dc0 <iprintf>


				bytesRx = bytesRx + buffer_len;
 8003434:	f8b7 2210 	ldrh.w	r2, [r7, #528]	; 0x210
 8003438:	4b35      	ldr	r3, [pc, #212]	; (8003510 <ModbusHandleConnection+0x1a4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4413      	add	r3, r2
 800343e:	4a34      	ldr	r2, [pc, #208]	; (8003510 <ModbusHandleConnection+0x1a4>)
 8003440:	6013      	str	r3, [r2, #0]

				uint16_t response_len = InterpreterMODBUS(recvBuffer, buffer_len);
 8003442:	f8b7 2210 	ldrh.w	r2, [r7, #528]	; 0x210
 8003446:	f107 030c 	add.w	r3, r7, #12
 800344a:	4611      	mov	r1, r2
 800344c:	4618      	mov	r0, r3
 800344e:	f01f fdd9 	bl	8023004 <InterpreterMODBUS>
 8003452:	4603      	mov	r3, r0
 8003454:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
				netconn_write(connfd, recvBuffer, response_len, NETCONN_COPY);
 8003458:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 800345c:	f107 010c 	add.w	r1, r7, #12
 8003460:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8003464:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 8003468:	2300      	movs	r3, #0
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	2301      	movs	r3, #1
 800346e:	6800      	ldr	r0, [r0, #0]
 8003470:	f011 f892 	bl	8014598 <netconn_write_partly>

			    Log_print(log_notify, Log_level_trace, "Send %u bytes", response_len);
 8003474:	4b21      	ldr	r3, [pc, #132]	; (80034fc <ModbusHandleConnection+0x190>)
 8003476:	7bdb      	ldrb	r3, [r3, #15]
 8003478:	2b05      	cmp	r3, #5
 800347a:	d818      	bhi.n	80034ae <ModbusHandleConnection+0x142>
 800347c:	4b1f      	ldr	r3, [pc, #124]	; (80034fc <ModbusHandleConnection+0x190>)
 800347e:	7bdb      	ldrb	r3, [r3, #15]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d114      	bne.n	80034ae <ModbusHandleConnection+0x142>
 8003484:	4b1e      	ldr	r3, [pc, #120]	; (8003500 <ModbusHandleConnection+0x194>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4798      	blx	r3
 800348a:	4604      	mov	r4, r0
 800348c:	2000      	movs	r0, #0
 800348e:	f7ff fadb 	bl	8002a48 <Log_returnLevelString>
 8003492:	4602      	mov	r2, r0
 8003494:	f8b7 320e 	ldrh.w	r3, [r7, #526]	; 0x20e
 8003498:	9302      	str	r3, [sp, #8]
 800349a:	237c      	movs	r3, #124	; 0x7c
 800349c:	9301      	str	r3, [sp, #4]
 800349e:	4b19      	ldr	r3, [pc, #100]	; (8003504 <ModbusHandleConnection+0x198>)
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	4613      	mov	r3, r2
 80034a4:	4a18      	ldr	r2, [pc, #96]	; (8003508 <ModbusHandleConnection+0x19c>)
 80034a6:	4621      	mov	r1, r4
 80034a8:	481a      	ldr	r0, [pc, #104]	; (8003514 <ModbusHandleConnection+0x1a8>)
 80034aa:	f021 fc89 	bl	8024dc0 <iprintf>

				bytesTx = bytesTx + response_len;
 80034ae:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 80034b2:	4b19      	ldr	r3, [pc, #100]	; (8003518 <ModbusHandleConnection+0x1ac>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4413      	add	r3, r2
 80034b8:	4a17      	ldr	r2, [pc, #92]	; (8003518 <ModbusHandleConnection+0x1ac>)
 80034ba:	6013      	str	r3, [r2, #0]

				Modbus_infoPacket();
 80034bc:	f7ff ff16 	bl	80032ec <Modbus_infoPacket>

				netbuf_delete(inbuf);
 80034c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80034c4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f012 ff4e 	bl	801636c <netbuf_delete>

			    osDelay(100);
 80034d0:	2064      	movs	r0, #100	; 0x64
 80034d2:	f006 fe47 	bl	800a164 <osDelay>
				continue;
 80034d6:	e00b      	b.n	80034f0 <ModbusHandleConnection+0x184>
			}
		}
		else if(err == ERR_TIMEOUT)
 80034d8:	f997 3213 	ldrsb.w	r3, [r7, #531]	; 0x213
 80034dc:	f113 0f03 	cmn.w	r3, #3
 80034e0:	d005      	beq.n	80034ee <ModbusHandleConnection+0x182>

		osDelay(10);

	} while (1);

	return 1;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e005      	b.n	80034f2 <ModbusHandleConnection+0x186>
		osDelay(10);
 80034e6:	200a      	movs	r0, #10
 80034e8:	f006 fe3c 	bl	800a164 <osDelay>
 80034ec:	e752      	b.n	8003394 <ModbusHandleConnection+0x28>
			continue;
 80034ee:	bf00      	nop
	{
 80034f0:	e750      	b.n	8003394 <ModbusHandleConnection+0x28>
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd90      	pop	{r4, r7, pc}
 80034fc:	20001f30 	.word	0x20001f30
 8003500:	20001f04 	.word	0x20001f04
 8003504:	0802dc3c 	.word	0x0802dc3c
 8003508:	20001f34 	.word	0x20001f34
 800350c:	08029900 	.word	0x08029900
 8003510:	20001f2c 	.word	0x20001f2c
 8003514:	08029928 	.word	0x08029928
 8003518:	20001f28 	.word	0x20001f28

0800351c <Modbus_activateTcpKeepAlive>:


void Modbus_activateTcpKeepAlive(struct netconn *connfd, int idleTime, int interval, int count) {
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	603b      	str	r3, [r7, #0]

    if (connfd == NULL || connfd->type != NETCONN_TCP || connfd->pcb.tcp == NULL) {
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d030      	beq.n	8003592 <Modbus_activateTcpKeepAlive+0x76>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	2b10      	cmp	r3, #16
 8003536:	d12c      	bne.n	8003592 <Modbus_activateTcpKeepAlive+0x76>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d028      	beq.n	8003592 <Modbus_activateTcpKeepAlive+0x76>
        return;
    }
    struct tcp_pcb *pcb = connfd->pcb.tcp;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	617b      	str	r3, [r7, #20]

    LOCK_TCPIP_CORE();
 8003546:	4815      	ldr	r0, [pc, #84]	; (800359c <Modbus_activateTcpKeepAlive+0x80>)
 8003548:	f01f fb74 	bl	8022c34 <sys_mutex_lock>
    ip_set_option(connfd->pcb.ip, SO_KEEPALIVE);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	7a5a      	ldrb	r2, [r3, #9]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f042 0208 	orr.w	r2, r2, #8
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	725a      	strb	r2, [r3, #9]
    pcb->keep_idle = idleTime * 1000;    // Tempo de ociosidade em milissegundos
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003564:	fb02 f303 	mul.w	r3, r2, r3
 8003568:	461a      	mov	r2, r3
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = interval * 1000;   // Intervalo entre as tentativas em milissegundos
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	461a      	mov	r2, r3
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    pcb->keep_cnt = count;               // Número de tentativas
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    UNLOCK_TCPIP_CORE();
 800358a:	4804      	ldr	r0, [pc, #16]	; (800359c <Modbus_activateTcpKeepAlive+0x80>)
 800358c:	f01f fb61 	bl	8022c52 <sys_mutex_unlock>
 8003590:	e000      	b.n	8003594 <Modbus_activateTcpKeepAlive+0x78>
        return;
 8003592:	bf00      	nop
}
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20011fcc 	.word	0x20011fcc

080035a0 <ModbusTcpSeverTask>:

void ModbusTcpSeverTask(void const *argument)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b08b      	sub	sp, #44	; 0x2c
 80035a4:	af04      	add	r7, sp, #16
 80035a6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TcpSeverTask */
	struct netconn *conn, *newconn;
	uint8_t i = MODBUS_CLOSED;
 80035a8:	2300      	movs	r3, #0
 80035aa:	75fb      	strb	r3, [r7, #23]


	/* Create a new TCP connection handle. */
	conn = netconn_new(NETCONN_TCP);
 80035ac:	2200      	movs	r2, #0
 80035ae:	2100      	movs	r1, #0
 80035b0:	2010      	movs	r0, #16
 80035b2:	f010 fba5 	bl	8013d00 <netconn_new_with_proto_and_callback>
 80035b6:	6138      	str	r0, [r7, #16]

	/* Check if the connection handle was created successfully */
	if (conn == NULL)
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d11b      	bne.n	80035f6 <ModbusTcpSeverTask+0x56>
	{
		/* Handle error */
	    Log_print(log_notify, Log_level_error, "Failed to create TCP connection handle");
 80035be:	4b82      	ldr	r3, [pc, #520]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 80035c0:	7bdb      	ldrb	r3, [r3, #15]
 80035c2:	2b05      	cmp	r3, #5
 80035c4:	f200 80fb 	bhi.w	80037be <ModbusTcpSeverTask+0x21e>
 80035c8:	4b7f      	ldr	r3, [pc, #508]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 80035ca:	7bdb      	ldrb	r3, [r3, #15]
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	f200 80f6 	bhi.w	80037be <ModbusTcpSeverTask+0x21e>
 80035d2:	4b7e      	ldr	r3, [pc, #504]	; (80037cc <ModbusTcpSeverTask+0x22c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4798      	blx	r3
 80035d8:	4604      	mov	r4, r0
 80035da:	2004      	movs	r0, #4
 80035dc:	f7ff fa34 	bl	8002a48 <Log_returnLevelString>
 80035e0:	4603      	mov	r3, r0
 80035e2:	22b7      	movs	r2, #183	; 0xb7
 80035e4:	9201      	str	r2, [sp, #4]
 80035e6:	4a7a      	ldr	r2, [pc, #488]	; (80037d0 <ModbusTcpSeverTask+0x230>)
 80035e8:	9200      	str	r2, [sp, #0]
 80035ea:	4a7a      	ldr	r2, [pc, #488]	; (80037d4 <ModbusTcpSeverTask+0x234>)
 80035ec:	4621      	mov	r1, r4
 80035ee:	487a      	ldr	r0, [pc, #488]	; (80037d8 <ModbusTcpSeverTask+0x238>)
 80035f0:	f021 fbe6 	bl	8024dc0 <iprintf>
		return;
 80035f4:	e0e3      	b.n	80037be <ModbusTcpSeverTask+0x21e>
	}

	/* Bind the connection to the specified port. */
	if (netconn_bind(conn, IP_ADDR_ANY, MODBUS_SERVER_TCP_PORT) != ERR_OK)
 80035f6:	f245 52f0 	movw	r2, #22000	; 0x55f0
 80035fa:	4978      	ldr	r1, [pc, #480]	; (80037dc <ModbusTcpSeverTask+0x23c>)
 80035fc:	6938      	ldr	r0, [r7, #16]
 80035fe:	f010 fc39 	bl	8013e74 <netconn_bind>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01f      	beq.n	8003648 <ModbusTcpSeverTask+0xa8>
	{
		/* Handle error */
	    Log_print(log_notify, Log_level_error, "Failed to bind to port %d", MODBUS_SERVER_TCP_PORT);
 8003608:	4b6f      	ldr	r3, [pc, #444]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 800360a:	7bdb      	ldrb	r3, [r3, #15]
 800360c:	2b05      	cmp	r3, #5
 800360e:	d817      	bhi.n	8003640 <ModbusTcpSeverTask+0xa0>
 8003610:	4b6d      	ldr	r3, [pc, #436]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 8003612:	7bdb      	ldrb	r3, [r3, #15]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d813      	bhi.n	8003640 <ModbusTcpSeverTask+0xa0>
 8003618:	4b6c      	ldr	r3, [pc, #432]	; (80037cc <ModbusTcpSeverTask+0x22c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4798      	blx	r3
 800361e:	4604      	mov	r4, r0
 8003620:	2004      	movs	r0, #4
 8003622:	f7ff fa11 	bl	8002a48 <Log_returnLevelString>
 8003626:	4603      	mov	r3, r0
 8003628:	f245 52f0 	movw	r2, #22000	; 0x55f0
 800362c:	9202      	str	r2, [sp, #8]
 800362e:	22bf      	movs	r2, #191	; 0xbf
 8003630:	9201      	str	r2, [sp, #4]
 8003632:	4a67      	ldr	r2, [pc, #412]	; (80037d0 <ModbusTcpSeverTask+0x230>)
 8003634:	9200      	str	r2, [sp, #0]
 8003636:	4a67      	ldr	r2, [pc, #412]	; (80037d4 <ModbusTcpSeverTask+0x234>)
 8003638:	4621      	mov	r1, r4
 800363a:	4869      	ldr	r0, [pc, #420]	; (80037e0 <ModbusTcpSeverTask+0x240>)
 800363c:	f021 fbc0 	bl	8024dc0 <iprintf>
		netconn_delete(conn);
 8003640:	6938      	ldr	r0, [r7, #16]
 8003642:	f010 fbfb 	bl	8013e3c <netconn_delete>
		return;
 8003646:	e0bb      	b.n	80037c0 <ModbusTcpSeverTask+0x220>
	}

	/* Put the connection into LISTEN state. */
	if (netconn_listen(conn) != ERR_OK)
 8003648:	21ff      	movs	r1, #255	; 0xff
 800364a:	6938      	ldr	r0, [r7, #16]
 800364c:	f010 fcac 	bl	8013fa8 <netconn_listen_with_backlog>
 8003650:	4603      	mov	r3, r0
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01c      	beq.n	8003690 <ModbusTcpSeverTask+0xf0>
	{
		/* Handle error */
	    Log_print(log_notify, Log_level_error, "Failed to put the connection into LISTEN state");
 8003656:	4b5c      	ldr	r3, [pc, #368]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 8003658:	7bdb      	ldrb	r3, [r3, #15]
 800365a:	2b05      	cmp	r3, #5
 800365c:	d814      	bhi.n	8003688 <ModbusTcpSeverTask+0xe8>
 800365e:	4b5a      	ldr	r3, [pc, #360]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 8003660:	7bdb      	ldrb	r3, [r3, #15]
 8003662:	2b04      	cmp	r3, #4
 8003664:	d810      	bhi.n	8003688 <ModbusTcpSeverTask+0xe8>
 8003666:	4b59      	ldr	r3, [pc, #356]	; (80037cc <ModbusTcpSeverTask+0x22c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4798      	blx	r3
 800366c:	4604      	mov	r4, r0
 800366e:	2004      	movs	r0, #4
 8003670:	f7ff f9ea 	bl	8002a48 <Log_returnLevelString>
 8003674:	4603      	mov	r3, r0
 8003676:	22c8      	movs	r2, #200	; 0xc8
 8003678:	9201      	str	r2, [sp, #4]
 800367a:	4a55      	ldr	r2, [pc, #340]	; (80037d0 <ModbusTcpSeverTask+0x230>)
 800367c:	9200      	str	r2, [sp, #0]
 800367e:	4a55      	ldr	r2, [pc, #340]	; (80037d4 <ModbusTcpSeverTask+0x234>)
 8003680:	4621      	mov	r1, r4
 8003682:	4858      	ldr	r0, [pc, #352]	; (80037e4 <ModbusTcpSeverTask+0x244>)
 8003684:	f021 fb9c 	bl	8024dc0 <iprintf>
		netconn_delete(conn);
 8003688:	6938      	ldr	r0, [r7, #16]
 800368a:	f010 fbd7 	bl	8013e3c <netconn_delete>
		return;
 800368e:	e097      	b.n	80037c0 <ModbusTcpSeverTask+0x220>
	}

	 Log_print(log_notify, Log_level_info, "Server listening on port: %d", MODBUS_SERVER_TCP_PORT);
 8003690:	4b4d      	ldr	r3, [pc, #308]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 8003692:	7bdb      	ldrb	r3, [r3, #15]
 8003694:	2b05      	cmp	r3, #5
 8003696:	d817      	bhi.n	80036c8 <ModbusTcpSeverTask+0x128>
 8003698:	4b4b      	ldr	r3, [pc, #300]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 800369a:	7bdb      	ldrb	r3, [r3, #15]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d813      	bhi.n	80036c8 <ModbusTcpSeverTask+0x128>
 80036a0:	4b4a      	ldr	r3, [pc, #296]	; (80037cc <ModbusTcpSeverTask+0x22c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4798      	blx	r3
 80036a6:	4604      	mov	r4, r0
 80036a8:	2002      	movs	r0, #2
 80036aa:	f7ff f9cd 	bl	8002a48 <Log_returnLevelString>
 80036ae:	4603      	mov	r3, r0
 80036b0:	f245 52f0 	movw	r2, #22000	; 0x55f0
 80036b4:	9202      	str	r2, [sp, #8]
 80036b6:	22cd      	movs	r2, #205	; 0xcd
 80036b8:	9201      	str	r2, [sp, #4]
 80036ba:	4a45      	ldr	r2, [pc, #276]	; (80037d0 <ModbusTcpSeverTask+0x230>)
 80036bc:	9200      	str	r2, [sp, #0]
 80036be:	4a45      	ldr	r2, [pc, #276]	; (80037d4 <ModbusTcpSeverTask+0x234>)
 80036c0:	4621      	mov	r1, r4
 80036c2:	4849      	ldr	r0, [pc, #292]	; (80037e8 <ModbusTcpSeverTask+0x248>)
 80036c4:	f021 fb7c 	bl	8024dc0 <iprintf>

	 ModbusStatusInfo(MODBUS_CLOSED);
 80036c8:	2000      	movs	r0, #0
 80036ca:	f7ff fd97 	bl	80031fc <ModbusStatusInfo>


	/* Infinite loop */
	for (;;)
	{
		if (i == MODBUS_CLOSED)
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d130      	bne.n	8003736 <ModbusTcpSeverTask+0x196>
		{
			if (netconn_accept(conn, &newconn) == ERR_OK)
 80036d4:	f107 030c 	add.w	r3, r7, #12
 80036d8:	4619      	mov	r1, r3
 80036da:	6938      	ldr	r0, [r7, #16]
 80036dc:	f010 fc90 	bl	8014000 <netconn_accept>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d167      	bne.n	80037b6 <ModbusTcpSeverTask+0x216>
			{
				if (newconn != NULL)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d064      	beq.n	80037b6 <ModbusTcpSeverTask+0x216>
				{
					i = MODBUS_OPEN;
 80036ec:	2301      	movs	r3, #1
 80036ee:	75fb      	strb	r3, [r7, #23]
					Log_print(log_notify, Log_level_debug, "Client connected");
 80036f0:	4b35      	ldr	r3, [pc, #212]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 80036f2:	7bdb      	ldrb	r3, [r3, #15]
 80036f4:	2b05      	cmp	r3, #5
 80036f6:	d814      	bhi.n	8003722 <ModbusTcpSeverTask+0x182>
 80036f8:	4b33      	ldr	r3, [pc, #204]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 80036fa:	7bdb      	ldrb	r3, [r3, #15]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d810      	bhi.n	8003722 <ModbusTcpSeverTask+0x182>
 8003700:	4b32      	ldr	r3, [pc, #200]	; (80037cc <ModbusTcpSeverTask+0x22c>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4798      	blx	r3
 8003706:	4604      	mov	r4, r0
 8003708:	2001      	movs	r0, #1
 800370a:	f7ff f99d 	bl	8002a48 <Log_returnLevelString>
 800370e:	4603      	mov	r3, r0
 8003710:	22dc      	movs	r2, #220	; 0xdc
 8003712:	9201      	str	r2, [sp, #4]
 8003714:	4a2e      	ldr	r2, [pc, #184]	; (80037d0 <ModbusTcpSeverTask+0x230>)
 8003716:	9200      	str	r2, [sp, #0]
 8003718:	4a2e      	ldr	r2, [pc, #184]	; (80037d4 <ModbusTcpSeverTask+0x234>)
 800371a:	4621      	mov	r1, r4
 800371c:	4833      	ldr	r0, [pc, #204]	; (80037ec <ModbusTcpSeverTask+0x24c>)
 800371e:	f021 fb4f 	bl	8024dc0 <iprintf>
					 ModbusStatusInfo(MODBUS_OPEN);
 8003722:	2001      	movs	r0, #1
 8003724:	f7ff fd6a 	bl	80031fc <ModbusStatusInfo>
					/* Set keepalive options if enabled */
					if (MODBUS_SERVER_KEEP_ALIVE)
					{
						Modbus_activateTcpKeepAlive(newconn, keepidle,keepintvl, keepcnt);
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	2305      	movs	r3, #5
 800372c:	2205      	movs	r2, #5
 800372e:	2105      	movs	r1, #5
 8003730:	f7ff fef4 	bl	800351c <Modbus_activateTcpKeepAlive>
 8003734:	e03f      	b.n	80037b6 <ModbusTcpSeverTask+0x216>
				}
			}
		}
		else
		{
			if (newconn != NULL && ModbusHandleConnection(newconn))
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d03c      	beq.n	80037b6 <ModbusTcpSeverTask+0x216>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff fe14 	bl	800336c <ModbusHandleConnection>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d035      	beq.n	80037b6 <ModbusTcpSeverTask+0x216>
			{
				i = MODBUS_CLOSED;
 800374a:	2300      	movs	r3, #0
 800374c:	75fb      	strb	r3, [r7, #23]
				netconn_close(newconn);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4618      	mov	r0, r3
 8003752:	f011 f823 	bl	801479c <netconn_close>
				netconn_delete(newconn);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	4618      	mov	r0, r3
 800375a:	f010 fb6f 	bl	8013e3c <netconn_delete>
				bytesRx = 0;
 800375e:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <ModbusTcpSeverTask+0x250>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
				bytesTx = 0;
 8003764:	4b23      	ldr	r3, [pc, #140]	; (80037f4 <ModbusTcpSeverTask+0x254>)
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
				AdapterSSD1306_Refresh(PAGE_1, LINE_1);
 800376a:	2101      	movs	r1, #1
 800376c:	2001      	movs	r0, #1
 800376e:	f7fd fdb7 	bl	80012e0 <AdapterSSD1306_Refresh>
				AdapterSSD1306_Refresh(PAGE_1, LINE_2);
 8003772:	2102      	movs	r1, #2
 8003774:	2001      	movs	r0, #1
 8003776:	f7fd fdb3 	bl	80012e0 <AdapterSSD1306_Refresh>
				ModbusStatusInfo(MODBUS_CLOSED);
 800377a:	2000      	movs	r0, #0
 800377c:	f7ff fd3e 	bl	80031fc <ModbusStatusInfo>
				Modbus_infoPacket();
 8003780:	f7ff fdb4 	bl	80032ec <Modbus_infoPacket>
				Log_print(log_notify, Log_level_debug, "Client disconnected");
 8003784:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 8003786:	7bdb      	ldrb	r3, [r3, #15]
 8003788:	2b05      	cmp	r3, #5
 800378a:	d814      	bhi.n	80037b6 <ModbusTcpSeverTask+0x216>
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <ModbusTcpSeverTask+0x228>)
 800378e:	7bdb      	ldrb	r3, [r3, #15]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d810      	bhi.n	80037b6 <ModbusTcpSeverTask+0x216>
 8003794:	4b0d      	ldr	r3, [pc, #52]	; (80037cc <ModbusTcpSeverTask+0x22c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4798      	blx	r3
 800379a:	4604      	mov	r4, r0
 800379c:	2001      	movs	r0, #1
 800379e:	f7ff f953 	bl	8002a48 <Log_returnLevelString>
 80037a2:	4603      	mov	r3, r0
 80037a4:	22f3      	movs	r2, #243	; 0xf3
 80037a6:	9201      	str	r2, [sp, #4]
 80037a8:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <ModbusTcpSeverTask+0x230>)
 80037aa:	9200      	str	r2, [sp, #0]
 80037ac:	4a09      	ldr	r2, [pc, #36]	; (80037d4 <ModbusTcpSeverTask+0x234>)
 80037ae:	4621      	mov	r1, r4
 80037b0:	4811      	ldr	r0, [pc, #68]	; (80037f8 <ModbusTcpSeverTask+0x258>)
 80037b2:	f021 fb05 	bl	8024dc0 <iprintf>
			}
		}

		/* Delay for a short period */
		osDelay(100);
 80037b6:	2064      	movs	r0, #100	; 0x64
 80037b8:	f006 fcd4 	bl	800a164 <osDelay>
		if (i == MODBUS_CLOSED)
 80037bc:	e787      	b.n	80036ce <ModbusTcpSeverTask+0x12e>
		return;
 80037be:	bf00      	nop
	}
}
 80037c0:	371c      	adds	r7, #28
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd90      	pop	{r4, r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20001f30 	.word	0x20001f30
 80037cc:	20001f04 	.word	0x20001f04
 80037d0:	0802dc54 	.word	0x0802dc54
 80037d4:	20001f34 	.word	0x20001f34
 80037d8:	0802994c 	.word	0x0802994c
 80037dc:	0802df34 	.word	0x0802df34
 80037e0:	08029988 	.word	0x08029988
 80037e4:	080299b8 	.word	0x080299b8
 80037e8:	080299fc 	.word	0x080299fc
 80037ec:	08029a2c 	.word	0x08029a2c
 80037f0:	20001f2c 	.word	0x20001f2c
 80037f4:	20001f28 	.word	0x20001f28
 80037f8:	08029a50 	.word	0x08029a50

080037fc <ModbusServerInit>:



void ModbusServerInit()
{
 80037fc:	b5b0      	push	{r4, r5, r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0

  if (!Log_init (&log_notify, MB_SERVER_LOGNAME, MB_SERVER_LOGLEVEL_DEFAULT))
 8003802:	2200      	movs	r2, #0
 8003804:	4910      	ldr	r1, [pc, #64]	; (8003848 <ModbusServerInit+0x4c>)
 8003806:	4811      	ldr	r0, [pc, #68]	; (800384c <ModbusServerInit+0x50>)
 8003808:	f7ff fad2 	bl	8002db0 <Log_init>
 800380c:	4603      	mov	r3, r0
 800380e:	f083 0301 	eor.w	r3, r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <ModbusServerInit+0x22>
   {
     printf ("Failed to initialize Notify log "MB_SERVER_LOGNAME""Log_newLine);
 8003818:	480d      	ldr	r0, [pc, #52]	; (8003850 <ModbusServerInit+0x54>)
 800381a:	f021 fb37 	bl	8024e8c <puts>
   }
	/* definition and creation of tcpServerTask */
	osThreadDef(tcpServerTask, ModbusTcpSeverTask, osPriorityBelowNormal, 0, MODBUS_SERVER_TASK_STACK_SIZE);
 800381e:	4b0d      	ldr	r3, [pc, #52]	; (8003854 <ModbusServerInit+0x58>)
 8003820:	1d3c      	adds	r4, r7, #4
 8003822:	461d      	mov	r5, r3
 8003824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003828:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800382c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	modbusTcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 8003830:	1d3b      	adds	r3, r7, #4
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f006 fc49 	bl	800a0cc <osThreadCreate>
 800383a:	4603      	mov	r3, r0
 800383c:	4a06      	ldr	r2, [pc, #24]	; (8003858 <ModbusServerInit+0x5c>)
 800383e:	6013      	str	r3, [r2, #0]
}
 8003840:	bf00      	nop
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bdb0      	pop	{r4, r5, r7, pc}
 8003848:	08029a78 	.word	0x08029a78
 800384c:	20001f30 	.word	0x20001f30
 8003850:	08029a84 	.word	0x08029a84
 8003854:	08029ac0 	.word	0x08029ac0
 8003858:	20001f24 	.word	0x20001f24

0800385c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003860:	4b0f      	ldr	r3, [pc, #60]	; (80038a0 <MX_RTC_Init+0x44>)
 8003862:	4a10      	ldr	r2, [pc, #64]	; (80038a4 <MX_RTC_Init+0x48>)
 8003864:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003866:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <MX_RTC_Init+0x44>)
 8003868:	2200      	movs	r2, #0
 800386a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800386c:	4b0c      	ldr	r3, [pc, #48]	; (80038a0 <MX_RTC_Init+0x44>)
 800386e:	227f      	movs	r2, #127	; 0x7f
 8003870:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003872:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <MX_RTC_Init+0x44>)
 8003874:	22ff      	movs	r2, #255	; 0xff
 8003876:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003878:	4b09      	ldr	r3, [pc, #36]	; (80038a0 <MX_RTC_Init+0x44>)
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800387e:	4b08      	ldr	r3, [pc, #32]	; (80038a0 <MX_RTC_Init+0x44>)
 8003880:	2200      	movs	r2, #0
 8003882:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003884:	4b06      	ldr	r3, [pc, #24]	; (80038a0 <MX_RTC_Init+0x44>)
 8003886:	2200      	movs	r2, #0
 8003888:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800388a:	4805      	ldr	r0, [pc, #20]	; (80038a0 <MX_RTC_Init+0x44>)
 800388c:	f003 fe4e 	bl	800752c <HAL_RTC_Init>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8003896:	f7ff fcab 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20001f48 	.word	0x20001f48
 80038a4:	40002800 	.word	0x40002800

080038a8 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b086      	sub	sp, #24
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80038b0:	f107 0308 	add.w	r3, r7, #8
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a0c      	ldr	r2, [pc, #48]	; (80038f4 <HAL_RTC_MspInit+0x4c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d111      	bne.n	80038ec <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038c8:	2302      	movs	r3, #2
 80038ca:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80038cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038d0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038d2:	f107 0308 	add.w	r3, r7, #8
 80038d6:	4618      	mov	r0, r3
 80038d8:	f003 fd46 	bl	8007368 <HAL_RCCEx_PeriphCLKConfig>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80038e2:	f7ff fc85 	bl	80031f0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <HAL_RTC_MspInit+0x50>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80038ec:	bf00      	nop
 80038ee:	3718      	adds	r7, #24
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	40002800 	.word	0x40002800
 80038f8:	42470e3c 	.word	0x42470e3c

080038fc <SntpSendRequest>:
osThreadId sntpClientTaskHandle;
Log_t log_sntp;


err_t SntpSendRequest(struct netconn *conn)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b090      	sub	sp, #64	; 0x40
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint8_t data[48] = { 0 };
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	222c      	movs	r2, #44	; 0x2c
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f021 fc1b 	bl	802514c <memset>
  err_t err;
  struct netbuf *buf;
  data[0] = 0x1B;
 8003916:	231b      	movs	r3, #27
 8003918:	723b      	strb	r3, [r7, #8]

  /* Create a new netbuf */
  buf = netbuf_new();
 800391a:	f012 fd13 	bl	8016344 <netbuf_new>
 800391e:	63b8      	str	r0, [r7, #56]	; 0x38

  if (buf != NULL)
 8003920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003922:	2b00      	cmp	r3, #0
 8003924:	d010      	beq.n	8003948 <SntpSendRequest+0x4c>
  {
	/* Copy the data into the netbuf */
	netbuf_ref(buf, data, sizeof(data));
 8003926:	f107 0308 	add.w	r3, r7, #8
 800392a:	2230      	movs	r2, #48	; 0x30
 800392c:	4619      	mov	r1, r3
 800392e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003930:	f012 fd3c 	bl	80163ac <netbuf_ref>

	/* Send the buffer to the connected UDP server */
	err = netconn_send(conn, buf);
 8003934:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f010 fe00 	bl	801453c <netconn_send>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* Free the buffer after sending */
	netbuf_delete(buf);
 8003942:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003944:	f012 fd12 	bl	801636c <netbuf_delete>

  }

  return err;
 8003948:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800394c:	4618      	mov	r0, r3
 800394e:	3740      	adds	r7, #64	; 0x40
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <SntpRecevRequest>:

err_t SntpRecevRequest(struct netconn *conn)
{
 8003954:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003958:	b0a7      	sub	sp, #156	; 0x9c
 800395a:	af08      	add	r7, sp, #32
 800395c:	6078      	str	r0, [r7, #4]
  uint8_t data[48] = { 0 };
 800395e:	2300      	movs	r3, #0
 8003960:	647b      	str	r3, [r7, #68]	; 0x44
 8003962:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003966:	222c      	movs	r2, #44	; 0x2c
 8003968:	2100      	movs	r1, #0
 800396a:	4618      	mov	r0, r3
 800396c:	f021 fbee 	bl	802514c <memset>
  time_t timestamp = 0;
 8003970:	f04f 0200 	mov.w	r2, #0
 8003974:	f04f 0300 	mov.w	r3, #0
 8003978:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  err_t recv_err;
  struct netbuf *rxbuf;
  uint16_t data_len;

  /* Optionally, receive response */
  recv_err = netconn_recv(conn, &rxbuf);
 800397c:	f107 0310 	add.w	r3, r7, #16
 8003980:	4619      	mov	r1, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f010 fd60 	bl	8014448 <netconn_recv>
 8003988:	4603      	mov	r3, r0
 800398a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  void *data_ptr;
  netbuf_data(rxbuf, &data_ptr, &data_len);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f107 020e 	add.w	r2, r7, #14
 8003994:	f107 0108 	add.w	r1, r7, #8
 8003998:	4618      	mov	r0, r3
 800399a:	f012 fd51 	bl	8016440 <netbuf_data>


  /* Copy received data */
  netbuf_copy(rxbuf, data, sizeof(data));
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	6818      	ldr	r0, [r3, #0]
 80039a2:	f107 0144 	add.w	r1, r7, #68	; 0x44
 80039a6:	2300      	movs	r3, #0
 80039a8:	2230      	movs	r2, #48	; 0x30
 80039aa:	f015 f80d 	bl	80189c8 <pbuf_copy_partial>

  /* Extract the timestamp and convert to UNIX format */
  timestamp = ntohl(*(u32_t *)&data[40]) - 2208988800U; // Subtract 70 years
 80039ae:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80039b2:	3328      	adds	r3, #40	; 0x28
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4618      	mov	r0, r3
 80039b8:	f012 ff59 	bl	801686e <lwip_htonl>
 80039bc:	4602      	mov	r2, r0
 80039be:	4b2b      	ldr	r3, [pc, #172]	; (8003a6c <SntpRecevRequest+0x118>)
 80039c0:	4413      	add	r3, r2
 80039c2:	2200      	movs	r2, #0
 80039c4:	4698      	mov	r8, r3
 80039c6:	4691      	mov	r9, r2
 80039c8:	e9c7 890e 	strd	r8, r9, [r7, #56]	; 0x38

  /* Adjust timestamp to São Paulo timezone (UTC-3) */
  timestamp -= 3 * 3600; // Subtract 3 hours
 80039cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80039d0:	4927      	ldr	r1, [pc, #156]	; (8003a70 <SntpRecevRequest+0x11c>)
 80039d2:	1854      	adds	r4, r2, r1
 80039d4:	f143 35ff 	adc.w	r5, r3, #4294967295	; 0xffffffff
 80039d8:	e9c7 450e 	strd	r4, r5, [r7, #56]	; 0x38

  /* Convert UNIX timestamp to `tm` structure adjusted to local timezone */
  localtime_r(&timestamp, &timeinfo);
 80039dc:	f107 0214 	add.w	r2, r7, #20
 80039e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80039e4:	4611      	mov	r1, r2
 80039e6:	4618      	mov	r0, r3
 80039e8:	f021 fcc0 	bl	802536c <localtime_r>

  Log_print(log_sntp, Log_level_trace, "TimeStamp: %d-%02d-%02d %02d:%02d:%02d",
 80039ec:	4b21      	ldr	r3, [pc, #132]	; (8003a74 <SntpRecevRequest+0x120>)
 80039ee:	7bdb      	ldrb	r3, [r3, #15]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d824      	bhi.n	8003a3e <SntpRecevRequest+0xea>
 80039f4:	4b1f      	ldr	r3, [pc, #124]	; (8003a74 <SntpRecevRequest+0x120>)
 80039f6:	7bdb      	ldrb	r3, [r3, #15]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d120      	bne.n	8003a3e <SntpRecevRequest+0xea>
 80039fc:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <SntpRecevRequest+0x124>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4798      	blx	r3
 8003a02:	4606      	mov	r6, r0
 8003a04:	2000      	movs	r0, #0
 8003a06:	f7ff f81f 	bl	8002a48 <Log_returnLevelString>
 8003a0a:	4684      	mov	ip, r0
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8003a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a14:	3201      	adds	r2, #1
 8003a16:	6a39      	ldr	r1, [r7, #32]
 8003a18:	69f8      	ldr	r0, [r7, #28]
 8003a1a:	69bc      	ldr	r4, [r7, #24]
 8003a1c:	697d      	ldr	r5, [r7, #20]
 8003a1e:	9507      	str	r5, [sp, #28]
 8003a20:	9406      	str	r4, [sp, #24]
 8003a22:	9005      	str	r0, [sp, #20]
 8003a24:	9104      	str	r1, [sp, #16]
 8003a26:	9203      	str	r2, [sp, #12]
 8003a28:	9302      	str	r3, [sp, #8]
 8003a2a:	2350      	movs	r3, #80	; 0x50
 8003a2c:	9301      	str	r3, [sp, #4]
 8003a2e:	4b13      	ldr	r3, [pc, #76]	; (8003a7c <SntpRecevRequest+0x128>)
 8003a30:	9300      	str	r3, [sp, #0]
 8003a32:	4663      	mov	r3, ip
 8003a34:	4a12      	ldr	r2, [pc, #72]	; (8003a80 <SntpRecevRequest+0x12c>)
 8003a36:	4631      	mov	r1, r6
 8003a38:	4812      	ldr	r0, [pc, #72]	; (8003a84 <SntpRecevRequest+0x130>)
 8003a3a:	f021 f9c1 	bl	8024dc0 <iprintf>
	  (timeinfo.tm_year + 1900), (timeinfo.tm_mon + 1), timeinfo.tm_mday,
	  timeinfo.tm_hour, timeinfo.tm_min, timeinfo.tm_sec);

  /* Set hardware RTC */
  DateTimeSetTm(&timeinfo);
 8003a3e:	f107 0314 	add.w	r3, r7, #20
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7fe fc0e 	bl	8002264 <DateTimeSetTm>

  /* Free the received buffer */
  netbuf_delete(rxbuf);
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f012 fc8e 	bl	801636c <netbuf_delete>

  /*Free buffer*/
  memset(data, 0x0, sizeof(data));
 8003a50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a54:	2230      	movs	r2, #48	; 0x30
 8003a56:	2100      	movs	r1, #0
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f021 fb77 	bl	802514c <memset>

  return recv_err;
 8003a5e:	f997 3077 	ldrsb.w	r3, [r7, #119]	; 0x77
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	377c      	adds	r7, #124	; 0x7c
 8003a66:	46bd      	mov	sp, r7
 8003a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a6c:	7c558180 	.word	0x7c558180
 8003a70:	ffffd5d0 	.word	0xffffd5d0
 8003a74:	20001f6c 	.word	0x20001f6c
 8003a78:	20001f04 	.word	0x20001f04
 8003a7c:	0802dc68 	.word	0x0802dc68
 8003a80:	20001f70 	.word	0x20001f70
 8003a84:	08029adc 	.word	0x08029adc

08003a88 <SntpClientTask>:



void SntpClientTask(void *pvParameters)

{
 8003a88:	b590      	push	{r4, r7, lr}
 8003a8a:	b089      	sub	sp, #36	; 0x24
 8003a8c:	af04      	add	r7, sp, #16
 8003a8e:	6078      	str	r0, [r7, #4]
  /*Delay before init */
  osDelay(2000);
 8003a90:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003a94:	f006 fb66 	bl	800a164 <osDelay>
  struct netconn *conn;
  ip_addr_t dest_addr;

  /* Create a new connection identifier */
  conn = netconn_new(NETCONN_UDP);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	2020      	movs	r0, #32
 8003a9e:	f010 f92f 	bl	8013d00 <netconn_new_with_proto_and_callback>
 8003aa2:	60f8      	str	r0, [r7, #12]

  if (conn != NULL)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 80e7 	beq.w	8003c7a <SntpClientTask+0x1f2>
  {
	/* Bind connection to the port 7 */
	if (netconn_bind(conn, IP_ADDR_ANY, 7) == ERR_OK)
 8003aac:	2207      	movs	r2, #7
 8003aae:	4981      	ldr	r1, [pc, #516]	; (8003cb4 <SntpClientTask+0x22c>)
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f010 f9df 	bl	8013e74 <netconn_bind>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f040 80c1 	bne.w	8003c40 <SntpClientTask+0x1b8>
	{
	  /* The destination IP address of the server */
	  ipaddr_aton(SNTP_SERVER_IP, &dest_addr);
 8003abe:	f107 0308 	add.w	r3, r7, #8
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	487c      	ldr	r0, [pc, #496]	; (8003cb8 <SntpClientTask+0x230>)
 8003ac6:	f01d fe65 	bl	8021794 <ip4addr_aton>

	  //IP_ADDR4(&dest_addr, 200, 160, 7, 186);
	  for (;;)
	  {
		/* Connect to the destination (server) */
		if (netconn_connect(conn, &dest_addr, SNTP_SERVER_PORT) == ERR_OK)
 8003aca:	f107 0308 	add.w	r3, r7, #8
 8003ace:	227b      	movs	r2, #123	; 0x7b
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f010 fa06 	bl	8013ee4 <netconn_connect>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	f040 8093 	bne.w	8003c06 <SntpClientTask+0x17e>
		{

		  Log_print(log_sntp, Log_level_info, "Connected in server SNTP:%s Port:%d", SNTP_SERVER_IP,  SNTP_SERVER_PORT);
 8003ae0:	4b76      	ldr	r3, [pc, #472]	; (8003cbc <SntpClientTask+0x234>)
 8003ae2:	7bdb      	ldrb	r3, [r3, #15]
 8003ae4:	2b05      	cmp	r3, #5
 8003ae6:	d818      	bhi.n	8003b1a <SntpClientTask+0x92>
 8003ae8:	4b74      	ldr	r3, [pc, #464]	; (8003cbc <SntpClientTask+0x234>)
 8003aea:	7bdb      	ldrb	r3, [r3, #15]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d814      	bhi.n	8003b1a <SntpClientTask+0x92>
 8003af0:	4b73      	ldr	r3, [pc, #460]	; (8003cc0 <SntpClientTask+0x238>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4798      	blx	r3
 8003af6:	4604      	mov	r4, r0
 8003af8:	2002      	movs	r0, #2
 8003afa:	f7fe ffa5 	bl	8002a48 <Log_returnLevelString>
 8003afe:	4603      	mov	r3, r0
 8003b00:	227b      	movs	r2, #123	; 0x7b
 8003b02:	9203      	str	r2, [sp, #12]
 8003b04:	4a6c      	ldr	r2, [pc, #432]	; (8003cb8 <SntpClientTask+0x230>)
 8003b06:	9202      	str	r2, [sp, #8]
 8003b08:	227c      	movs	r2, #124	; 0x7c
 8003b0a:	9201      	str	r2, [sp, #4]
 8003b0c:	4a6d      	ldr	r2, [pc, #436]	; (8003cc4 <SntpClientTask+0x23c>)
 8003b0e:	9200      	str	r2, [sp, #0]
 8003b10:	4a6d      	ldr	r2, [pc, #436]	; (8003cc8 <SntpClientTask+0x240>)
 8003b12:	4621      	mov	r1, r4
 8003b14:	486d      	ldr	r0, [pc, #436]	; (8003ccc <SntpClientTask+0x244>)
 8003b16:	f021 f953 	bl	8024dc0 <iprintf>

		  /*Request TimeStamp from server*/
		  if (SntpSendRequest(conn) == ERR_OK)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f7ff feee 	bl	80038fc <SntpSendRequest>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d119      	bne.n	8003b5a <SntpClientTask+0xd2>
		  {
			Log_print(log_sntp, Log_level_debug, "Send server Timestamp request");
 8003b26:	4b65      	ldr	r3, [pc, #404]	; (8003cbc <SntpClientTask+0x234>)
 8003b28:	7bdb      	ldrb	r3, [r3, #15]
 8003b2a:	2b05      	cmp	r3, #5
 8003b2c:	d82e      	bhi.n	8003b8c <SntpClientTask+0x104>
 8003b2e:	4b63      	ldr	r3, [pc, #396]	; (8003cbc <SntpClientTask+0x234>)
 8003b30:	7bdb      	ldrb	r3, [r3, #15]
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d82a      	bhi.n	8003b8c <SntpClientTask+0x104>
 8003b36:	4b62      	ldr	r3, [pc, #392]	; (8003cc0 <SntpClientTask+0x238>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4798      	blx	r3
 8003b3c:	4604      	mov	r4, r0
 8003b3e:	2001      	movs	r0, #1
 8003b40:	f7fe ff82 	bl	8002a48 <Log_returnLevelString>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2281      	movs	r2, #129	; 0x81
 8003b48:	9201      	str	r2, [sp, #4]
 8003b4a:	4a5e      	ldr	r2, [pc, #376]	; (8003cc4 <SntpClientTask+0x23c>)
 8003b4c:	9200      	str	r2, [sp, #0]
 8003b4e:	4a5e      	ldr	r2, [pc, #376]	; (8003cc8 <SntpClientTask+0x240>)
 8003b50:	4621      	mov	r1, r4
 8003b52:	485f      	ldr	r0, [pc, #380]	; (8003cd0 <SntpClientTask+0x248>)
 8003b54:	f021 f934 	bl	8024dc0 <iprintf>
 8003b58:	e018      	b.n	8003b8c <SntpClientTask+0x104>
		  }
		  else
		  {
			Log_print(log_sntp, Log_level_error, "Error to send timeStamp request");
 8003b5a:	4b58      	ldr	r3, [pc, #352]	; (8003cbc <SntpClientTask+0x234>)
 8003b5c:	7bdb      	ldrb	r3, [r3, #15]
 8003b5e:	2b05      	cmp	r3, #5
 8003b60:	d814      	bhi.n	8003b8c <SntpClientTask+0x104>
 8003b62:	4b56      	ldr	r3, [pc, #344]	; (8003cbc <SntpClientTask+0x234>)
 8003b64:	7bdb      	ldrb	r3, [r3, #15]
 8003b66:	2b04      	cmp	r3, #4
 8003b68:	d810      	bhi.n	8003b8c <SntpClientTask+0x104>
 8003b6a:	4b55      	ldr	r3, [pc, #340]	; (8003cc0 <SntpClientTask+0x238>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4798      	blx	r3
 8003b70:	4604      	mov	r4, r0
 8003b72:	2004      	movs	r0, #4
 8003b74:	f7fe ff68 	bl	8002a48 <Log_returnLevelString>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2285      	movs	r2, #133	; 0x85
 8003b7c:	9201      	str	r2, [sp, #4]
 8003b7e:	4a51      	ldr	r2, [pc, #324]	; (8003cc4 <SntpClientTask+0x23c>)
 8003b80:	9200      	str	r2, [sp, #0]
 8003b82:	4a51      	ldr	r2, [pc, #324]	; (8003cc8 <SntpClientTask+0x240>)
 8003b84:	4621      	mov	r1, r4
 8003b86:	4853      	ldr	r0, [pc, #332]	; (8003cd4 <SntpClientTask+0x24c>)
 8003b88:	f021 f91a 	bl	8024dc0 <iprintf>
		  }

		  /*Received TimeStamp from server*/
		  if (SntpRecevRequest(conn) == ERR_OK)
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff fee1 	bl	8003954 <SntpRecevRequest>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d119      	bne.n	8003bcc <SntpClientTask+0x144>
		  {
			Log_print(log_sntp, Log_level_debug, "Received server response");
 8003b98:	4b48      	ldr	r3, [pc, #288]	; (8003cbc <SntpClientTask+0x234>)
 8003b9a:	7bdb      	ldrb	r3, [r3, #15]
 8003b9c:	2b05      	cmp	r3, #5
 8003b9e:	d82e      	bhi.n	8003bfe <SntpClientTask+0x176>
 8003ba0:	4b46      	ldr	r3, [pc, #280]	; (8003cbc <SntpClientTask+0x234>)
 8003ba2:	7bdb      	ldrb	r3, [r3, #15]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d82a      	bhi.n	8003bfe <SntpClientTask+0x176>
 8003ba8:	4b45      	ldr	r3, [pc, #276]	; (8003cc0 <SntpClientTask+0x238>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4798      	blx	r3
 8003bae:	4604      	mov	r4, r0
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	f7fe ff49 	bl	8002a48 <Log_returnLevelString>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	228b      	movs	r2, #139	; 0x8b
 8003bba:	9201      	str	r2, [sp, #4]
 8003bbc:	4a41      	ldr	r2, [pc, #260]	; (8003cc4 <SntpClientTask+0x23c>)
 8003bbe:	9200      	str	r2, [sp, #0]
 8003bc0:	4a41      	ldr	r2, [pc, #260]	; (8003cc8 <SntpClientTask+0x240>)
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	4844      	ldr	r0, [pc, #272]	; (8003cd8 <SntpClientTask+0x250>)
 8003bc6:	f021 f8fb 	bl	8024dc0 <iprintf>
 8003bca:	e018      	b.n	8003bfe <SntpClientTask+0x176>
		  }
		  else
		  {
			Log_print(log_sntp, Log_level_error, "Received server response error");
 8003bcc:	4b3b      	ldr	r3, [pc, #236]	; (8003cbc <SntpClientTask+0x234>)
 8003bce:	7bdb      	ldrb	r3, [r3, #15]
 8003bd0:	2b05      	cmp	r3, #5
 8003bd2:	d814      	bhi.n	8003bfe <SntpClientTask+0x176>
 8003bd4:	4b39      	ldr	r3, [pc, #228]	; (8003cbc <SntpClientTask+0x234>)
 8003bd6:	7bdb      	ldrb	r3, [r3, #15]
 8003bd8:	2b04      	cmp	r3, #4
 8003bda:	d810      	bhi.n	8003bfe <SntpClientTask+0x176>
 8003bdc:	4b38      	ldr	r3, [pc, #224]	; (8003cc0 <SntpClientTask+0x238>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4798      	blx	r3
 8003be2:	4604      	mov	r4, r0
 8003be4:	2004      	movs	r0, #4
 8003be6:	f7fe ff2f 	bl	8002a48 <Log_returnLevelString>
 8003bea:	4603      	mov	r3, r0
 8003bec:	228f      	movs	r2, #143	; 0x8f
 8003bee:	9201      	str	r2, [sp, #4]
 8003bf0:	4a34      	ldr	r2, [pc, #208]	; (8003cc4 <SntpClientTask+0x23c>)
 8003bf2:	9200      	str	r2, [sp, #0]
 8003bf4:	4a34      	ldr	r2, [pc, #208]	; (8003cc8 <SntpClientTask+0x240>)
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	4838      	ldr	r0, [pc, #224]	; (8003cdc <SntpClientTask+0x254>)
 8003bfa:	f021 f8e1 	bl	8024dc0 <iprintf>
		  }

		  /* Disconnect the connection */
		  netconn_disconnect(conn);
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f010 f9a8 	bl	8013f54 <netconn_disconnect>
 8003c04:	e018      	b.n	8003c38 <SntpClientTask+0x1b0>
		}
		else
		{
		  Log_print(log_sntp, Log_level_error, "Server connected error");
 8003c06:	4b2d      	ldr	r3, [pc, #180]	; (8003cbc <SntpClientTask+0x234>)
 8003c08:	7bdb      	ldrb	r3, [r3, #15]
 8003c0a:	2b05      	cmp	r3, #5
 8003c0c:	d814      	bhi.n	8003c38 <SntpClientTask+0x1b0>
 8003c0e:	4b2b      	ldr	r3, [pc, #172]	; (8003cbc <SntpClientTask+0x234>)
 8003c10:	7bdb      	ldrb	r3, [r3, #15]
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d810      	bhi.n	8003c38 <SntpClientTask+0x1b0>
 8003c16:	4b2a      	ldr	r3, [pc, #168]	; (8003cc0 <SntpClientTask+0x238>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4798      	blx	r3
 8003c1c:	4604      	mov	r4, r0
 8003c1e:	2004      	movs	r0, #4
 8003c20:	f7fe ff12 	bl	8002a48 <Log_returnLevelString>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2297      	movs	r2, #151	; 0x97
 8003c28:	9201      	str	r2, [sp, #4]
 8003c2a:	4a26      	ldr	r2, [pc, #152]	; (8003cc4 <SntpClientTask+0x23c>)
 8003c2c:	9200      	str	r2, [sp, #0]
 8003c2e:	4a26      	ldr	r2, [pc, #152]	; (8003cc8 <SntpClientTask+0x240>)
 8003c30:	4621      	mov	r1, r4
 8003c32:	482b      	ldr	r0, [pc, #172]	; (8003ce0 <SntpClientTask+0x258>)
 8003c34:	f021 f8c4 	bl	8024dc0 <iprintf>
		}

		/* Wait for 10 minutes */
		osDelay(100000);
 8003c38:	482a      	ldr	r0, [pc, #168]	; (8003ce4 <SntpClientTask+0x25c>)
 8003c3a:	f006 fa93 	bl	800a164 <osDelay>
		if (netconn_connect(conn, &dest_addr, SNTP_SERVER_PORT) == ERR_OK)
 8003c3e:	e744      	b.n	8003aca <SntpClientTask+0x42>
	  }
	}
	else
	{
	  Log_print(log_sntp, Log_level_error, "Bind connect error");
 8003c40:	4b1e      	ldr	r3, [pc, #120]	; (8003cbc <SntpClientTask+0x234>)
 8003c42:	7bdb      	ldrb	r3, [r3, #15]
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d814      	bhi.n	8003c72 <SntpClientTask+0x1ea>
 8003c48:	4b1c      	ldr	r3, [pc, #112]	; (8003cbc <SntpClientTask+0x234>)
 8003c4a:	7bdb      	ldrb	r3, [r3, #15]
 8003c4c:	2b04      	cmp	r3, #4
 8003c4e:	d810      	bhi.n	8003c72 <SntpClientTask+0x1ea>
 8003c50:	4b1b      	ldr	r3, [pc, #108]	; (8003cc0 <SntpClientTask+0x238>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4798      	blx	r3
 8003c56:	4604      	mov	r4, r0
 8003c58:	2004      	movs	r0, #4
 8003c5a:	f7fe fef5 	bl	8002a48 <Log_returnLevelString>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	22a0      	movs	r2, #160	; 0xa0
 8003c62:	9201      	str	r2, [sp, #4]
 8003c64:	4a17      	ldr	r2, [pc, #92]	; (8003cc4 <SntpClientTask+0x23c>)
 8003c66:	9200      	str	r2, [sp, #0]
 8003c68:	4a17      	ldr	r2, [pc, #92]	; (8003cc8 <SntpClientTask+0x240>)
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	481e      	ldr	r0, [pc, #120]	; (8003ce8 <SntpClientTask+0x260>)
 8003c6e:	f021 f8a7 	bl	8024dc0 <iprintf>
	}

	/* Close the connection and free the netconn structure */
	netconn_close(conn);
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f010 fd92 	bl	801479c <netconn_close>
  }
  else
  {
	Log_print(log_sntp, Log_level_error, "Error to create connection");
  }
}
 8003c78:	e018      	b.n	8003cac <SntpClientTask+0x224>
	Log_print(log_sntp, Log_level_error, "Error to create connection");
 8003c7a:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <SntpClientTask+0x234>)
 8003c7c:	7bdb      	ldrb	r3, [r3, #15]
 8003c7e:	2b05      	cmp	r3, #5
 8003c80:	d814      	bhi.n	8003cac <SntpClientTask+0x224>
 8003c82:	4b0e      	ldr	r3, [pc, #56]	; (8003cbc <SntpClientTask+0x234>)
 8003c84:	7bdb      	ldrb	r3, [r3, #15]
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d810      	bhi.n	8003cac <SntpClientTask+0x224>
 8003c8a:	4b0d      	ldr	r3, [pc, #52]	; (8003cc0 <SntpClientTask+0x238>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4798      	blx	r3
 8003c90:	4604      	mov	r4, r0
 8003c92:	2004      	movs	r0, #4
 8003c94:	f7fe fed8 	bl	8002a48 <Log_returnLevelString>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	22a8      	movs	r2, #168	; 0xa8
 8003c9c:	9201      	str	r2, [sp, #4]
 8003c9e:	4a09      	ldr	r2, [pc, #36]	; (8003cc4 <SntpClientTask+0x23c>)
 8003ca0:	9200      	str	r2, [sp, #0]
 8003ca2:	4a09      	ldr	r2, [pc, #36]	; (8003cc8 <SntpClientTask+0x240>)
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	4811      	ldr	r0, [pc, #68]	; (8003cec <SntpClientTask+0x264>)
 8003ca8:	f021 f88a 	bl	8024dc0 <iprintf>
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd90      	pop	{r4, r7, pc}
 8003cb4:	0802df34 	.word	0x0802df34
 8003cb8:	08029b18 	.word	0x08029b18
 8003cbc:	20001f6c 	.word	0x20001f6c
 8003cc0:	20001f04 	.word	0x20001f04
 8003cc4:	0802dc7c 	.word	0x0802dc7c
 8003cc8:	20001f70 	.word	0x20001f70
 8003ccc:	08029b28 	.word	0x08029b28
 8003cd0:	08029b60 	.word	0x08029b60
 8003cd4:	08029b94 	.word	0x08029b94
 8003cd8:	08029bc8 	.word	0x08029bc8
 8003cdc:	08029bf4 	.word	0x08029bf4
 8003ce0:	08029c28 	.word	0x08029c28
 8003ce4:	000186a0 	.word	0x000186a0
 8003ce8:	08029c54 	.word	0x08029c54
 8003cec:	08029c7c 	.word	0x08029c7c

08003cf0 <SntpClientInit>:



  void SntpClientInit()
{
 8003cf0:	b5b0      	push	{r4, r5, r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af00      	add	r7, sp, #0

  if (!Log_init(&log_sntp, SNTP_CLIENT_LOGNAME, SNTP_CLIENT_LOGLEVEL_DEFAULT))
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	4910      	ldr	r1, [pc, #64]	; (8003d3c <SntpClientInit+0x4c>)
 8003cfa:	4811      	ldr	r0, [pc, #68]	; (8003d40 <SntpClientInit+0x50>)
 8003cfc:	f7ff f858 	bl	8002db0 <Log_init>
 8003d00:	4603      	mov	r3, r0
 8003d02:	f083 0301 	eor.w	r3, r3, #1
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <SntpClientInit+0x22>
  {

  printf ("Failed to initialize log "SNTP_CLIENT_LOGNAME""Log_newLine);
 8003d0c:	480d      	ldr	r0, [pc, #52]	; (8003d44 <SntpClientInit+0x54>)
 8003d0e:	f021 f8bd 	bl	8024e8c <puts>

  }

  /* definition and creation of tcpServerTask */
  osThreadDef(sntpClientTask, SntpClientTask, osPriorityBelowNormal, 0,SNTP_CLIENT_TASK_STACK_SIZE);
 8003d12:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <SntpClientInit+0x58>)
 8003d14:	1d3c      	adds	r4, r7, #4
 8003d16:	461d      	mov	r5, r3
 8003d18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003d1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003d1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003d20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  sntpClientTaskHandle = osThreadCreate(osThread(sntpClientTask), NULL);
 8003d24:	1d3b      	adds	r3, r7, #4
 8003d26:	2100      	movs	r1, #0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f006 f9cf 	bl	800a0cc <osThreadCreate>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	4a06      	ldr	r2, [pc, #24]	; (8003d4c <SntpClientInit+0x5c>)
 8003d32:	6013      	str	r3, [r2, #0]


}
 8003d34:	bf00      	nop
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d3c:	08029cac 	.word	0x08029cac
 8003d40:	20001f6c 	.word	0x20001f6c
 8003d44:	08029cb4 	.word	0x08029cb4
 8003d48:	08029ce4 	.word	0x08029ce4
 8003d4c:	20001f68 	.word	0x20001f68

08003d50 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d56:	4a18      	ldr	r2, [pc, #96]	; (8003db8 <MX_SPI2_Init+0x68>)
 8003d58:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003d5a:	4b16      	ldr	r3, [pc, #88]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003d60:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003d62:	4b14      	ldr	r3, [pc, #80]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003d68:	4b12      	ldr	r3, [pc, #72]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d6e:	4b11      	ldr	r3, [pc, #68]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d70:	2200      	movs	r2, #0
 8003d72:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003d74:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d80:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d82:	4b0c      	ldr	r3, [pc, #48]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003d88:	4b0a      	ldr	r3, [pc, #40]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d94:	4b07      	ldr	r3, [pc, #28]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003d9a:	4b06      	ldr	r3, [pc, #24]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003d9c:	220a      	movs	r2, #10
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003da0:	4804      	ldr	r0, [pc, #16]	; (8003db4 <MX_SPI2_Init+0x64>)
 8003da2:	f003 fecf 	bl	8007b44 <HAL_SPI_Init>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d001      	beq.n	8003db0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003dac:	f7ff fa20 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003db0:	bf00      	nop
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	20001f84 	.word	0x20001f84
 8003db8:	40003800 	.word	0x40003800

08003dbc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08a      	sub	sp, #40	; 0x28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dc4:	f107 0314 	add.w	r3, r7, #20
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	605a      	str	r2, [r3, #4]
 8003dce:	609a      	str	r2, [r3, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
 8003dd2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a28      	ldr	r2, [pc, #160]	; (8003e7c <HAL_SPI_MspInit+0xc0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d14a      	bne.n	8003e74 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	4b27      	ldr	r3, [pc, #156]	; (8003e80 <HAL_SPI_MspInit+0xc4>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	4a26      	ldr	r2, [pc, #152]	; (8003e80 <HAL_SPI_MspInit+0xc4>)
 8003de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dec:	6413      	str	r3, [r2, #64]	; 0x40
 8003dee:	4b24      	ldr	r3, [pc, #144]	; (8003e80 <HAL_SPI_MspInit+0xc4>)
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df6:	613b      	str	r3, [r7, #16]
 8003df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	4b20      	ldr	r3, [pc, #128]	; (8003e80 <HAL_SPI_MspInit+0xc4>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	4a1f      	ldr	r2, [pc, #124]	; (8003e80 <HAL_SPI_MspInit+0xc4>)
 8003e04:	f043 0304 	orr.w	r3, r3, #4
 8003e08:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0a:	4b1d      	ldr	r3, [pc, #116]	; (8003e80 <HAL_SPI_MspInit+0xc4>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e16:	2300      	movs	r3, #0
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	4b19      	ldr	r3, [pc, #100]	; (8003e80 <HAL_SPI_MspInit+0xc4>)
 8003e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1e:	4a18      	ldr	r2, [pc, #96]	; (8003e80 <HAL_SPI_MspInit+0xc4>)
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	6313      	str	r3, [r2, #48]	; 0x30
 8003e26:	4b16      	ldr	r3, [pc, #88]	; (8003e80 <HAL_SPI_MspInit+0xc4>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	60bb      	str	r3, [r7, #8]
 8003e30:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e32:	230c      	movs	r3, #12
 8003e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e36:	2302      	movs	r3, #2
 8003e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e42:	2305      	movs	r3, #5
 8003e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e46:	f107 0314 	add.w	r3, r7, #20
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	480d      	ldr	r0, [pc, #52]	; (8003e84 <HAL_SPI_MspInit+0xc8>)
 8003e4e:	f001 ff6b 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003e52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e60:	2303      	movs	r3, #3
 8003e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003e64:	2305      	movs	r3, #5
 8003e66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e68:	f107 0314 	add.w	r3, r7, #20
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4806      	ldr	r0, [pc, #24]	; (8003e88 <HAL_SPI_MspInit+0xcc>)
 8003e70:	f001 ff5a 	bl	8005d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003e74:	bf00      	nop
 8003e76:	3728      	adds	r7, #40	; 0x28
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	40003800 	.word	0x40003800
 8003e80:	40023800 	.word	0x40023800
 8003e84:	40020800 	.word	0x40020800
 8003e88:	40020400 	.word	0x40020400

08003e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	4b12      	ldr	r3, [pc, #72]	; (8003ee0 <HAL_MspInit+0x54>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	4a11      	ldr	r2, [pc, #68]	; (8003ee0 <HAL_MspInit+0x54>)
 8003e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea2:	4b0f      	ldr	r3, [pc, #60]	; (8003ee0 <HAL_MspInit+0x54>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eaa:	607b      	str	r3, [r7, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <HAL_MspInit+0x54>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <HAL_MspInit+0x54>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ebe:	4b08      	ldr	r3, [pc, #32]	; (8003ee0 <HAL_MspInit+0x54>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003eca:	2200      	movs	r2, #0
 8003ecc:	210f      	movs	r1, #15
 8003ece:	f06f 0001 	mvn.w	r0, #1
 8003ed2:	f000 fca3 	bl	800481c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	40023800 	.word	0x40023800

08003ee4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08e      	sub	sp, #56	; 0x38
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
 8003ef8:	4b33      	ldr	r3, [pc, #204]	; (8003fc8 <HAL_InitTick+0xe4>)
 8003efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efc:	4a32      	ldr	r2, [pc, #200]	; (8003fc8 <HAL_InitTick+0xe4>)
 8003efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f02:	6413      	str	r3, [r2, #64]	; 0x40
 8003f04:	4b30      	ldr	r3, [pc, #192]	; (8003fc8 <HAL_InitTick+0xe4>)
 8003f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	60fb      	str	r3, [r7, #12]
 8003f0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003f10:	f107 0210 	add.w	r2, r7, #16
 8003f14:	f107 0314 	add.w	r3, r7, #20
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f003 f9f2 	bl	8007304 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003f20:	6a3b      	ldr	r3, [r7, #32]
 8003f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d103      	bne.n	8003f32 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003f2a:	f003 f9c3 	bl	80072b4 <HAL_RCC_GetPCLK1Freq>
 8003f2e:	6378      	str	r0, [r7, #52]	; 0x34
 8003f30:	e004      	b.n	8003f3c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003f32:	f003 f9bf 	bl	80072b4 <HAL_RCC_GetPCLK1Freq>
 8003f36:	4603      	mov	r3, r0
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3e:	4a23      	ldr	r2, [pc, #140]	; (8003fcc <HAL_InitTick+0xe8>)
 8003f40:	fba2 2303 	umull	r2, r3, r2, r3
 8003f44:	0c9b      	lsrs	r3, r3, #18
 8003f46:	3b01      	subs	r3, #1
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003f4a:	4b21      	ldr	r3, [pc, #132]	; (8003fd0 <HAL_InitTick+0xec>)
 8003f4c:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <HAL_InitTick+0xf0>)
 8003f4e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003f50:	4b1f      	ldr	r3, [pc, #124]	; (8003fd0 <HAL_InitTick+0xec>)
 8003f52:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003f56:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003f58:	4a1d      	ldr	r2, [pc, #116]	; (8003fd0 <HAL_InitTick+0xec>)
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	; (8003fd0 <HAL_InitTick+0xec>)
 8003f60:	2200      	movs	r2, #0
 8003f62:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f64:	4b1a      	ldr	r3, [pc, #104]	; (8003fd0 <HAL_InitTick+0xec>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f6a:	4b19      	ldr	r3, [pc, #100]	; (8003fd0 <HAL_InitTick+0xec>)
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003f70:	4817      	ldr	r0, [pc, #92]	; (8003fd0 <HAL_InitTick+0xec>)
 8003f72:	f004 fbbd 	bl	80086f0 <HAL_TIM_Base_Init>
 8003f76:	4603      	mov	r3, r0
 8003f78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003f7c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d11b      	bne.n	8003fbc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8003f84:	4812      	ldr	r0, [pc, #72]	; (8003fd0 <HAL_InitTick+0xec>)
 8003f86:	f004 fc0d 	bl	80087a4 <HAL_TIM_Base_Start_IT>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003f90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d111      	bne.n	8003fbc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003f98:	202d      	movs	r0, #45	; 0x2d
 8003f9a:	f000 fc5b 	bl	8004854 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b0f      	cmp	r3, #15
 8003fa2:	d808      	bhi.n	8003fb6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	202d      	movs	r0, #45	; 0x2d
 8003faa:	f000 fc37 	bl	800481c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003fae:	4a0a      	ldr	r2, [pc, #40]	; (8003fd8 <HAL_InitTick+0xf4>)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6013      	str	r3, [r2, #0]
 8003fb4:	e002      	b.n	8003fbc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003fbc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3738      	adds	r7, #56	; 0x38
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	431bde83 	.word	0x431bde83
 8003fd0:	20001fdc 	.word	0x20001fdc
 8003fd4:	40002000 	.word	0x40002000
 8003fd8:	2000000c 	.word	0x2000000c

08003fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003fe0:	e7fe      	b.n	8003fe0 <NMI_Handler+0x4>

08003fe2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fe6:	e7fe      	b.n	8003fe6 <HardFault_Handler+0x4>

08003fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003fec:	e7fe      	b.n	8003fec <MemManage_Handler+0x4>

08003fee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ff2:	e7fe      	b.n	8003ff2 <BusFault_Handler+0x4>

08003ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ff8:	e7fe      	b.n	8003ff8 <UsageFault_Handler+0x4>

08003ffa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ffe:	bf00      	nop
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800400c:	4802      	ldr	r0, [pc, #8]	; (8004018 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800400e:	f004 fc39 	bl	8008884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004012:	bf00      	nop
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20001fdc 	.word	0x20001fdc

0800401c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8004020:	4802      	ldr	r0, [pc, #8]	; (800402c <ETH_IRQHandler+0x10>)
 8004022:	f000 ffab 	bl	8004f7c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8004026:	bf00      	nop
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20006b98 	.word	0x20006b98

08004030 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return 1;
 8004034:	2301      	movs	r3, #1
}
 8004036:	4618      	mov	r0, r3
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <_kill>:

int _kill(int pid, int sig)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <_kill+0x20>)
 800404c:	2216      	movs	r2, #22
 800404e:	601a      	str	r2, [r3, #0]
  return -1;
 8004050:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004054:	4618      	mov	r0, r3
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	200164e0 	.word	0x200164e0

08004064 <_exit>:

void _exit (int status)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800406c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff ffe5 	bl	8004040 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004076:	e7fe      	b.n	8004076 <_exit+0x12>

08004078 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004084:	2300      	movs	r3, #0
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	e00a      	b.n	80040a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800408a:	f3af 8000 	nop.w
 800408e:	4601      	mov	r1, r0
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	60ba      	str	r2, [r7, #8]
 8004096:	b2ca      	uxtb	r2, r1
 8004098:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	3301      	adds	r3, #1
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	dbf0      	blt.n	800408a <_read+0x12>
  }

  return len;
 80040a8:	687b      	ldr	r3, [r7, #4]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b086      	sub	sp, #24
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	e009      	b.n	80040d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	60ba      	str	r2, [r7, #8]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe ffd1 	bl	8003074 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	3301      	adds	r3, #1
 80040d6:	617b      	str	r3, [r7, #20]
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	dbf1      	blt.n	80040c4 <_write+0x12>
  }
  return len;
 80040e0:	687b      	ldr	r3, [r7, #4]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3718      	adds	r7, #24
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <_close>:

int _close(int file)
{
 80040ea:	b480      	push	{r7}
 80040ec:	b083      	sub	sp, #12
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80040f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004112:	605a      	str	r2, [r3, #4]
  return 0;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	370c      	adds	r7, #12
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <_isatty>:

int _isatty(int file)
{
 8004122:	b480      	push	{r7}
 8004124:	b083      	sub	sp, #12
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800412a:	2301      	movs	r3, #1
}
 800412c:	4618      	mov	r0, r3
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
	...

08004154 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800415c:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <_sbrk+0x5c>)
 800415e:	4b15      	ldr	r3, [pc, #84]	; (80041b4 <_sbrk+0x60>)
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004168:	4b13      	ldr	r3, [pc, #76]	; (80041b8 <_sbrk+0x64>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d102      	bne.n	8004176 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <_sbrk+0x64>)
 8004172:	4a12      	ldr	r2, [pc, #72]	; (80041bc <_sbrk+0x68>)
 8004174:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004176:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <_sbrk+0x64>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4413      	add	r3, r2
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	429a      	cmp	r2, r3
 8004182:	d205      	bcs.n	8004190 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <_sbrk+0x6c>)
 8004186:	220c      	movs	r2, #12
 8004188:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800418a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800418e:	e009      	b.n	80041a4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8004190:	4b09      	ldr	r3, [pc, #36]	; (80041b8 <_sbrk+0x64>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <_sbrk+0x64>)
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	4a06      	ldr	r2, [pc, #24]	; (80041b8 <_sbrk+0x64>)
 80041a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80041a2:	68fb      	ldr	r3, [r7, #12]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	371c      	adds	r7, #28
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr
 80041b0:	20020000 	.word	0x20020000
 80041b4:	00000400 	.word	0x00000400
 80041b8:	20002028 	.word	0x20002028
 80041bc:	200164e8 	.word	0x200164e8
 80041c0:	200164e0 	.word	0x200164e0

080041c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80041c4:	b480      	push	{r7}
 80041c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <SystemInit+0x20>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	4a05      	ldr	r2, [pc, #20]	; (80041e4 <SystemInit+0x20>)
 80041d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80041d8:	bf00      	nop
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e000ed00 	.word	0xe000ed00

080041e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041ec:	4b11      	ldr	r3, [pc, #68]	; (8004234 <MX_USART1_UART_Init+0x4c>)
 80041ee:	4a12      	ldr	r2, [pc, #72]	; (8004238 <MX_USART1_UART_Init+0x50>)
 80041f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80041f2:	4b10      	ldr	r3, [pc, #64]	; (8004234 <MX_USART1_UART_Init+0x4c>)
 80041f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041fa:	4b0e      	ldr	r3, [pc, #56]	; (8004234 <MX_USART1_UART_Init+0x4c>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004200:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <MX_USART1_UART_Init+0x4c>)
 8004202:	2200      	movs	r2, #0
 8004204:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004206:	4b0b      	ldr	r3, [pc, #44]	; (8004234 <MX_USART1_UART_Init+0x4c>)
 8004208:	2200      	movs	r2, #0
 800420a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800420c:	4b09      	ldr	r3, [pc, #36]	; (8004234 <MX_USART1_UART_Init+0x4c>)
 800420e:	220c      	movs	r2, #12
 8004210:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004212:	4b08      	ldr	r3, [pc, #32]	; (8004234 <MX_USART1_UART_Init+0x4c>)
 8004214:	2200      	movs	r2, #0
 8004216:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <MX_USART1_UART_Init+0x4c>)
 800421a:	2200      	movs	r2, #0
 800421c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800421e:	4805      	ldr	r0, [pc, #20]	; (8004234 <MX_USART1_UART_Init+0x4c>)
 8004220:	f004 fd08 	bl	8008c34 <HAL_UART_Init>
 8004224:	4603      	mov	r3, r0
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800422a:	f7fe ffe1 	bl	80031f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800422e:	bf00      	nop
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	2000202c 	.word	0x2000202c
 8004238:	40011000 	.word	0x40011000

0800423c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b08a      	sub	sp, #40	; 0x28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004244:	f107 0314 	add.w	r3, r7, #20
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	605a      	str	r2, [r3, #4]
 800424e:	609a      	str	r2, [r3, #8]
 8004250:	60da      	str	r2, [r3, #12]
 8004252:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <HAL_UART_MspInit+0x84>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d12c      	bne.n	80042b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	613b      	str	r3, [r7, #16]
 8004262:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <HAL_UART_MspInit+0x88>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <HAL_UART_MspInit+0x88>)
 8004268:	f043 0310 	orr.w	r3, r3, #16
 800426c:	6453      	str	r3, [r2, #68]	; 0x44
 800426e:	4b15      	ldr	r3, [pc, #84]	; (80042c4 <HAL_UART_MspInit+0x88>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f003 0310 	and.w	r3, r3, #16
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
 800427e:	4b11      	ldr	r3, [pc, #68]	; (80042c4 <HAL_UART_MspInit+0x88>)
 8004280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004282:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <HAL_UART_MspInit+0x88>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	6313      	str	r3, [r2, #48]	; 0x30
 800428a:	4b0e      	ldr	r3, [pc, #56]	; (80042c4 <HAL_UART_MspInit+0x88>)
 800428c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	60fb      	str	r3, [r7, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004296:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800429a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429c:	2302      	movs	r3, #2
 800429e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042a4:	2303      	movs	r3, #3
 80042a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042a8:	2307      	movs	r3, #7
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ac:	f107 0314 	add.w	r3, r7, #20
 80042b0:	4619      	mov	r1, r3
 80042b2:	4805      	ldr	r0, [pc, #20]	; (80042c8 <HAL_UART_MspInit+0x8c>)
 80042b4:	f001 fd38 	bl	8005d28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80042b8:	bf00      	nop
 80042ba:	3728      	adds	r7, #40	; 0x28
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40011000 	.word	0x40011000
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40020000 	.word	0x40020000

080042cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80042cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004304 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80042d0:	f7ff ff78 	bl	80041c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042d4:	480c      	ldr	r0, [pc, #48]	; (8004308 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042d6:	490d      	ldr	r1, [pc, #52]	; (800430c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042d8:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042dc:	e002      	b.n	80042e4 <LoopCopyDataInit>

080042de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042e2:	3304      	adds	r3, #4

080042e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042e8:	d3f9      	bcc.n	80042de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042ea:	4a0a      	ldr	r2, [pc, #40]	; (8004314 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042ec:	4c0a      	ldr	r4, [pc, #40]	; (8004318 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042f0:	e001      	b.n	80042f6 <LoopFillZerobss>

080042f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80042f4:	3204      	adds	r2, #4

080042f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80042f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80042f8:	d3fb      	bcc.n	80042f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80042fa:	f022 f9ef 	bl	80266dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80042fe:	f7fe fe27 	bl	8002f50 <main>
  bx  lr    
 8004302:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004304:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800430c:	2000026c 	.word	0x2000026c
  ldr r2, =_sidata
 8004310:	0802ec64 	.word	0x0802ec64
  ldr r2, =_sbss
 8004314:	2000026c 	.word	0x2000026c
  ldr r4, =_ebss
 8004318:	200164e8 	.word	0x200164e8

0800431c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800431c:	e7fe      	b.n	800431c <ADC_IRQHandler>

0800431e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
 8004326:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d00b      	beq.n	8004346 <DP83848_RegisterBusIO+0x28>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	68db      	ldr	r3, [r3, #12]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d007      	beq.n	8004346 <DP83848_RegisterBusIO+0x28>
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <DP83848_RegisterBusIO+0x28>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d102      	bne.n	800434c <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8004346:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800434a:	e014      	b.n	8004376 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	689a      	ldr	r2, [r3, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	2300      	movs	r3, #0
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	2300      	movs	r3, #0
 8004394:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d17c      	bne.n	800449c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2220      	movs	r2, #32
 80043b4:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80043b6:	2300      	movs	r3, #0
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	e01c      	b.n	80043f6 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f107 0208 	add.w	r2, r7, #8
 80043c4:	2119      	movs	r1, #25
 80043c6:	6978      	ldr	r0, [r7, #20]
 80043c8:	4798      	blx	r3
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	da03      	bge.n	80043d8 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 80043d0:	f06f 0304 	mvn.w	r3, #4
 80043d4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80043d6:	e00b      	b.n	80043f0 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	f003 031f 	and.w	r3, r3, #31
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d105      	bne.n	80043f0 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	613b      	str	r3, [r7, #16]
         break;
 80043ee:	e005      	b.n	80043fc <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	3301      	adds	r3, #1
 80043f4:	617b      	str	r3, [r7, #20]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b1f      	cmp	r3, #31
 80043fa:	d9df      	bls.n	80043bc <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b1f      	cmp	r3, #31
 8004402:	d902      	bls.n	800440a <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8004404:	f06f 0302 	mvn.w	r3, #2
 8004408:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d145      	bne.n	800449c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6810      	ldr	r0, [r2, #0]
 8004418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800441c:	2100      	movs	r1, #0
 800441e:	4798      	blx	r3
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	db37      	blt.n	8004496 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	6810      	ldr	r0, [r2, #0]
 800442e:	f107 0208 	add.w	r2, r7, #8
 8004432:	2100      	movs	r1, #0
 8004434:	4798      	blx	r3
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	db28      	blt.n	800448e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	4798      	blx	r3
 8004442:	4603      	mov	r3, r0
 8004444:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8004446:	e01c      	b.n	8004482 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	4798      	blx	r3
 800444e:	4603      	mov	r3, r0
 8004450:	461a      	mov	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800445a:	d80e      	bhi.n	800447a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	695b      	ldr	r3, [r3, #20]
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6810      	ldr	r0, [r2, #0]
 8004464:	f107 0208 	add.w	r2, r7, #8
 8004468:	2100      	movs	r1, #0
 800446a:	4798      	blx	r3
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	da07      	bge.n	8004482 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8004472:	f06f 0304 	mvn.w	r3, #4
 8004476:	613b      	str	r3, [r7, #16]
                 break;
 8004478:	e010      	b.n	800449c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 800447a:	f06f 0301 	mvn.w	r3, #1
 800447e:	613b      	str	r3, [r7, #16]
               break;
 8004480:	e00c      	b.n	800449c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1dd      	bne.n	8004448 <DP83848_Init+0xc6>
 800448c:	e006      	b.n	800449c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 800448e:	f06f 0304 	mvn.w	r3, #4
 8004492:	613b      	str	r3, [r7, #16]
 8004494:	e002      	b.n	800449c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8004496:	f06f 0303 	mvn.w	r3, #3
 800449a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d112      	bne.n	80044c8 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	4798      	blx	r3
 80044a8:	4603      	mov	r3, r0
 80044aa:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 80044ac:	bf00      	nop
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	4798      	blx	r3
 80044b4:	4603      	mov	r3, r0
 80044b6:	461a      	mov	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80044c0:	d9f5      	bls.n	80044ae <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	605a      	str	r2, [r3, #4]
   }

   return status;
 80044c8:	693b      	ldr	r3, [r7, #16]
 }
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6810      	ldr	r0, [r2, #0]
 80044e6:	f107 020c 	add.w	r2, r7, #12
 80044ea:	2101      	movs	r1, #1
 80044ec:	4798      	blx	r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	da02      	bge.n	80044fa <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80044f4:	f06f 0304 	mvn.w	r3, #4
 80044f8:	e06e      	b.n	80045d8 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	6810      	ldr	r0, [r2, #0]
 8004502:	f107 020c 	add.w	r2, r7, #12
 8004506:	2101      	movs	r1, #1
 8004508:	4798      	blx	r3
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	da02      	bge.n	8004516 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8004510:	f06f 0304 	mvn.w	r3, #4
 8004514:	e060      	b.n	80045d8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8004520:	2301      	movs	r3, #1
 8004522:	e059      	b.n	80045d8 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6810      	ldr	r0, [r2, #0]
 800452c:	f107 020c 	add.w	r2, r7, #12
 8004530:	2100      	movs	r1, #0
 8004532:	4798      	blx	r3
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	da02      	bge.n	8004540 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 800453a:	f06f 0304 	mvn.w	r3, #4
 800453e:	e04b      	b.n	80045d8 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d11b      	bne.n	8004582 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d006      	beq.n	8004562 <DP83848_GetLinkState+0x90>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 800455e:	2302      	movs	r3, #2
 8004560:	e03a      	b.n	80045d8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800456c:	2303      	movs	r3, #3
 800456e:	e033      	b.n	80045d8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800457a:	2304      	movs	r3, #4
 800457c:	e02c      	b.n	80045d8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 800457e:	2305      	movs	r3, #5
 8004580:	e02a      	b.n	80045d8 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6810      	ldr	r0, [r2, #0]
 800458a:	f107 020c 	add.w	r2, r7, #12
 800458e:	2110      	movs	r1, #16
 8004590:	4798      	blx	r3
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	da02      	bge.n	800459e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8004598:	f06f 0304 	mvn.w	r3, #4
 800459c:	e01c      	b.n	80045d8 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80045a8:	2306      	movs	r3, #6
 80045aa:	e015      	b.n	80045d8 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f003 0306 	and.w	r3, r3, #6
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d101      	bne.n	80045ba <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80045b6:	2302      	movs	r3, #2
 80045b8:	e00e      	b.n	80045d8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 0306 	and.w	r3, r3, #6
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e007      	b.n	80045d8 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f003 0306 	and.w	r3, r3, #6
 80045ce:	2b06      	cmp	r3, #6
 80045d0:	d101      	bne.n	80045d6 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80045d2:	2304      	movs	r3, #4
 80045d4:	e000      	b.n	80045d8 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80045d6:	2305      	movs	r3, #5
    }
  }
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045e4:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_Init+0x40>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a0d      	ldr	r2, [pc, #52]	; (8004620 <HAL_Init+0x40>)
 80045ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_Init+0x40>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <HAL_Init+0x40>)
 80045f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045fc:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_Init+0x40>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a07      	ldr	r2, [pc, #28]	; (8004620 <HAL_Init+0x40>)
 8004602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004608:	2003      	movs	r0, #3
 800460a:	f000 f8fc 	bl	8004806 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800460e:	200f      	movs	r0, #15
 8004610:	f7ff fc68 	bl	8003ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004614:	f7ff fc3a 	bl	8003e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023c00 	.word	0x40023c00

08004624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004628:	4b06      	ldr	r3, [pc, #24]	; (8004644 <HAL_IncTick+0x20>)
 800462a:	781b      	ldrb	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_IncTick+0x24>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4413      	add	r3, r2
 8004634:	4a04      	ldr	r2, [pc, #16]	; (8004648 <HAL_IncTick+0x24>)
 8004636:	6013      	str	r3, [r2, #0]
}
 8004638:	bf00      	nop
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr
 8004642:	bf00      	nop
 8004644:	20000010 	.word	0x20000010
 8004648:	20002074 	.word	0x20002074

0800464c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  return uwTick;
 8004650:	4b03      	ldr	r3, [pc, #12]	; (8004660 <HAL_GetTick+0x14>)
 8004652:	681b      	ldr	r3, [r3, #0]
}
 8004654:	4618      	mov	r0, r3
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	20002074 	.word	0x20002074

08004664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800466c:	f7ff ffee 	bl	800464c <HAL_GetTick>
 8004670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800467c:	d005      	beq.n	800468a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <HAL_Delay+0x44>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	4413      	add	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800468a:	bf00      	nop
 800468c:	f7ff ffde 	bl	800464c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	429a      	cmp	r2, r3
 800469a:	d8f7      	bhi.n	800468c <HAL_Delay+0x28>
  {
  }
}
 800469c:	bf00      	nop
 800469e:	bf00      	nop
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	20000010 	.word	0x20000010

080046ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046bc:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <__NVIC_SetPriorityGrouping+0x44>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046c8:	4013      	ands	r3, r2
 80046ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80046de:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <__NVIC_SetPriorityGrouping+0x44>)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	60d3      	str	r3, [r2, #12]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr
 80046f0:	e000ed00 	.word	0xe000ed00

080046f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046f4:	b480      	push	{r7}
 80046f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <__NVIC_GetPriorityGrouping+0x18>)
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	0a1b      	lsrs	r3, r3, #8
 80046fe:	f003 0307 	and.w	r3, r3, #7
}
 8004702:	4618      	mov	r0, r3
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	e000ed00 	.word	0xe000ed00

08004710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800471a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471e:	2b00      	cmp	r3, #0
 8004720:	db0b      	blt.n	800473a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004722:	79fb      	ldrb	r3, [r7, #7]
 8004724:	f003 021f 	and.w	r2, r3, #31
 8004728:	4907      	ldr	r1, [pc, #28]	; (8004748 <__NVIC_EnableIRQ+0x38>)
 800472a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	2001      	movs	r0, #1
 8004732:	fa00 f202 	lsl.w	r2, r0, r2
 8004736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	e000e100 	.word	0xe000e100

0800474c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	4603      	mov	r3, r0
 8004754:	6039      	str	r1, [r7, #0]
 8004756:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800475c:	2b00      	cmp	r3, #0
 800475e:	db0a      	blt.n	8004776 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	b2da      	uxtb	r2, r3
 8004764:	490c      	ldr	r1, [pc, #48]	; (8004798 <__NVIC_SetPriority+0x4c>)
 8004766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800476a:	0112      	lsls	r2, r2, #4
 800476c:	b2d2      	uxtb	r2, r2
 800476e:	440b      	add	r3, r1
 8004770:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004774:	e00a      	b.n	800478c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4908      	ldr	r1, [pc, #32]	; (800479c <__NVIC_SetPriority+0x50>)
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	f003 030f 	and.w	r3, r3, #15
 8004782:	3b04      	subs	r3, #4
 8004784:	0112      	lsls	r2, r2, #4
 8004786:	b2d2      	uxtb	r2, r2
 8004788:	440b      	add	r3, r1
 800478a:	761a      	strb	r2, [r3, #24]
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr
 8004798:	e000e100 	.word	0xe000e100
 800479c:	e000ed00 	.word	0xe000ed00

080047a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b089      	sub	sp, #36	; 0x24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	f1c3 0307 	rsb	r3, r3, #7
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	bf28      	it	cs
 80047be:	2304      	movcs	r3, #4
 80047c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	3304      	adds	r3, #4
 80047c6:	2b06      	cmp	r3, #6
 80047c8:	d902      	bls.n	80047d0 <NVIC_EncodePriority+0x30>
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	3b03      	subs	r3, #3
 80047ce:	e000      	b.n	80047d2 <NVIC_EncodePriority+0x32>
 80047d0:	2300      	movs	r3, #0
 80047d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	fa02 f303 	lsl.w	r3, r2, r3
 80047de:	43da      	mvns	r2, r3
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	401a      	ands	r2, r3
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	fa01 f303 	lsl.w	r3, r1, r3
 80047f2:	43d9      	mvns	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f8:	4313      	orrs	r3, r2
         );
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3724      	adds	r7, #36	; 0x24
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr

08004806 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004806:	b580      	push	{r7, lr}
 8004808:	b082      	sub	sp, #8
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff ff4c 	bl	80046ac <__NVIC_SetPriorityGrouping>
}
 8004814:	bf00      	nop
 8004816:	3708      	adds	r7, #8
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800481c:	b580      	push	{r7, lr}
 800481e:	b086      	sub	sp, #24
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800482a:	2300      	movs	r3, #0
 800482c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800482e:	f7ff ff61 	bl	80046f4 <__NVIC_GetPriorityGrouping>
 8004832:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	6978      	ldr	r0, [r7, #20]
 800483a:	f7ff ffb1 	bl	80047a0 <NVIC_EncodePriority>
 800483e:	4602      	mov	r2, r0
 8004840:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff ff80 	bl	800474c <__NVIC_SetPriority>
}
 800484c:	bf00      	nop
 800484e:	3718      	adds	r7, #24
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800485e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff ff54 	bl	8004710 <__NVIC_EnableIRQ>
}
 8004868:	bf00      	nop
 800486a:	3708      	adds	r7, #8
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e06c      	b.n	800495c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004888:	2b00      	cmp	r3, #0
 800488a:	d106      	bne.n	800489a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2223      	movs	r2, #35	; 0x23
 8004890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f005 f9d3 	bl	8009c40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	4b31      	ldr	r3, [pc, #196]	; (8004964 <HAL_ETH_Init+0xf4>)
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	4a30      	ldr	r2, [pc, #192]	; (8004964 <HAL_ETH_Init+0xf4>)
 80048a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a8:	6453      	str	r3, [r2, #68]	; 0x44
 80048aa:	4b2e      	ldr	r3, [pc, #184]	; (8004964 <HAL_ETH_Init+0xf4>)
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b2:	60bb      	str	r3, [r7, #8]
 80048b4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80048b6:	4b2c      	ldr	r3, [pc, #176]	; (8004968 <HAL_ETH_Init+0xf8>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	4a2b      	ldr	r2, [pc, #172]	; (8004968 <HAL_ETH_Init+0xf8>)
 80048bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80048c0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80048c2:	4b29      	ldr	r3, [pc, #164]	; (8004968 <HAL_ETH_Init+0xf8>)
 80048c4:	685a      	ldr	r2, [r3, #4]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	4927      	ldr	r1, [pc, #156]	; (8004968 <HAL_ETH_Init+0xf8>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <HAL_ETH_Init+0xf8>)
 80048d2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	f043 0301 	orr.w	r3, r3, #1
 80048e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80048ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048ec:	f7ff feae 	bl	800464c <HAL_GetTick>
 80048f0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80048f2:	e011      	b.n	8004918 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80048f4:	f7ff feaa 	bl	800464c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004902:	d909      	bls.n	8004918 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2204      	movs	r2, #4
 8004908:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	22e0      	movs	r2, #224	; 0xe0
 8004910:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e021      	b.n	800495c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1e4      	bne.n	80048f4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 ff56 	bl	80057dc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fffd 	bl	8005930 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f001 f853 	bl	80059e2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	461a      	mov	r2, r3
 8004942:	2100      	movs	r1, #0
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 ffbb 	bl	80058c0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2210      	movs	r2, #16
 8004956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	40023800 	.word	0x40023800
 8004968:	40013800 	.word	0x40013800

0800496c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497a:	2b10      	cmp	r3, #16
 800497c:	d17f      	bne.n	8004a7e <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2223      	movs	r2, #35	; 0x23
 8004982:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800499a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80049b0:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80049c4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2204      	movs	r2, #4
 80049cc:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f9f8 	bl	8004dc4 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0208 	orr.w	r2, r2, #8
 80049e2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80049ec:	2001      	movs	r0, #1
 80049ee:	f7ff fe39 	bl	8004664 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f042 0204 	orr.w	r2, r2, #4
 8004a08:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004a12:	2001      	movs	r0, #1
 8004a14:	f7ff fe26 	bl	8004664 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fd7c 	bl	800551e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6812      	ldr	r2, [r2, #0]
 8004a34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004a38:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a3c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6812      	ldr	r2, [r2, #0]
 8004a4c:	f043 0302 	orr.w	r3, r3, #2
 8004a50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a54:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a5e:	69db      	ldr	r3, [r3, #28]
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8004a68:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8004a6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a70:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2223      	movs	r2, #35	; 0x23
 8004a76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e000      	b.n	8004a80 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
  }
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a96:	2b23      	cmp	r3, #35	; 0x23
 8004a98:	d170      	bne.n	8004b7c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2223      	movs	r2, #35	; 0x23
 8004a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	687a      	ldr	r2, [r7, #4]
 8004aae:	6812      	ldr	r2, [r2, #0]
 8004ab0:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8004ab4:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8004ab8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004abc:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	6812      	ldr	r2, [r2, #0]
 8004acc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ad0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ad4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ade:	699b      	ldr	r3, [r3, #24]
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	6812      	ldr	r2, [r2, #0]
 8004ae4:	f023 0302 	bic.w	r3, r3, #2
 8004ae8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004aec:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0204 	bic.w	r2, r2, #4
 8004afc:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b06:	2001      	movs	r0, #1
 8004b08:	f7ff fdac 	bl	8004664 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 fd02 	bl	800551e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0208 	bic.w	r2, r2, #8
 8004b28:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004b32:	2001      	movs	r0, #1
 8004b34:	f7ff fd96 	bl	8004664 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	693a      	ldr	r2, [r7, #16]
 8004b3e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e00e      	b.n	8004b64 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	3212      	adds	r2, #18
 8004b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b50:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	3301      	adds	r3, #1
 8004b62:	617b      	str	r3, [r7, #20]
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	2b03      	cmp	r3, #3
 8004b68:	d9ed      	bls.n	8004b46 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2210      	movs	r2, #16
 8004b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	e000      	b.n	8004b7e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
  }
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	3718      	adds	r7, #24
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b082      	sub	sp, #8
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d109      	bne.n	8004baa <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f043 0201 	orr.w	r2, r3, #1
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e045      	b.n	8004c36 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb0:	2b23      	cmp	r3, #35	; 0x23
 8004bb2:	d13f      	bne.n	8004c34 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	6839      	ldr	r1, [r7, #0]
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f000 ff7b 	bl	8005abc <ETH_Prepare_Tx_Descriptors>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d009      	beq.n	8004be0 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	f043 0202 	orr.w	r2, r3, #2
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e02a      	b.n	8004c36 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8004be0:	f3bf 8f4f 	dsb	sy
}
 8004be4:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	629a      	str	r2, [r3, #40]	; 0x28
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d904      	bls.n	8004c02 <HAL_ETH_Transmit_IT+0x7c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfc:	1f1a      	subs	r2, r3, #4
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d00d      	beq.n	8004c30 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	2304      	movs	r3, #4
 8004c20:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e000      	b.n	8004c36 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b088      	sub	sp, #32
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	6078      	str	r0, [r7, #4]
 8004c46:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5c:	f043 0201 	orr.w	r2, r3, #1
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e0a8      	b.n	8004dbc <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c70:	2b23      	cmp	r3, #35	; 0x23
 8004c72:	d001      	beq.n	8004c78 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e0a1      	b.n	8004dbc <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c7c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69fa      	ldr	r2, [r7, #28]
 8004c82:	3212      	adds	r2, #18
 8004c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c88:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c8e:	f1c3 0304 	rsb	r3, r3, #4
 8004c92:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004c94:	e06a      	b.n	8004d6c <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	69da      	ldr	r2, [r3, #28]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d103      	bne.n	8004cc6 <HAL_ETH_ReadData+0x88>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d040      	beq.n	8004d48 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d005      	beq.n	8004cde <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d00c      	beq.n	8004d0a <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8004cf0:	69bb      	ldr	r3, [r7, #24]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	0c1b      	lsrs	r3, r3, #16
 8004cf6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004cfa:	3b04      	subs	r3, #4
 8004cfc:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8004d22:	461a      	mov	r2, r3
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f005 f944 	bl	8009fb4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	441a      	add	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	2200      	movs	r2, #0
 8004d46:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d902      	bls.n	8004d5a <HAL_ETH_ReadData+0x11c>
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	3b04      	subs	r3, #4
 8004d58:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	3212      	adds	r2, #18
 8004d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d64:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	3301      	adds	r3, #1
 8004d6a:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	db06      	blt.n	8004d82 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d202      	bcs.n	8004d82 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8004d7c:	7bfb      	ldrb	r3, [r7, #15]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d089      	beq.n	8004c96 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	441a      	add	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f814 	bl	8004dc4 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	69fa      	ldr	r2, [r7, #28]
 8004da0:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d108      	bne.n	8004dba <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e000      	b.n	8004dbc <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3720      	adds	r7, #32
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b088      	sub	sp, #32
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004dd8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	69fa      	ldr	r2, [r7, #28]
 8004dde:	3212      	adds	r2, #18
 8004de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004de4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dea:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004dec:	e03d      	b.n	8004e6a <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d112      	bne.n	8004e1c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004df6:	f107 0308 	add.w	r3, r7, #8
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f005 f8aa 	bl	8009f54 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d102      	bne.n	8004e0c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	74fb      	strb	r3, [r7, #19]
 8004e0a:	e007      	b.n	8004e1c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	461a      	mov	r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004e1c:	7cfb      	ldrb	r3, [r7, #19]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d023      	beq.n	8004e6a <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d103      	bne.n	8004e32 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <ETH_UpdateDescriptor+0xfc>)
 8004e2e:	605a      	str	r2, [r3, #4]
 8004e30:	e003      	b.n	8004e3a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8004e38:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	2b03      	cmp	r3, #3
 8004e50:	d902      	bls.n	8004e58 <ETH_UpdateDescriptor+0x94>
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	3b04      	subs	r3, #4
 8004e56:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69fa      	ldr	r2, [r7, #28]
 8004e5c:	3212      	adds	r2, #18
 8004e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e62:	617b      	str	r3, [r7, #20]
      desccount--;
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	3b01      	subs	r3, #1
 8004e68:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <ETH_UpdateDescriptor+0xb2>
 8004e70:	7cfb      	ldrb	r3, [r7, #19]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1bb      	bne.n	8004dee <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d01a      	beq.n	8004eb6 <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	3301      	adds	r3, #1
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8004e8a:	f3bf 8f5f 	dmb	sy
}
 8004e8e:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6919      	ldr	r1, [r3, #16]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4613      	mov	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	4413      	add	r3, r2
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	18ca      	adds	r2, r1, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea8:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69fa      	ldr	r2, [r7, #28]
 8004eae:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004eb6:	bf00      	nop
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	80004600 	.word	0x80004600

08004ec4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3318      	adds	r3, #24
 8004ed0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004edc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004ee2:	e03f      	b.n	8004f64 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	3301      	adds	r3, #1
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d028      	beq.n	8004f64 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	68d9      	ldr	r1, [r3, #12]
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	440b      	add	r3, r1
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	db1b      	blt.n	8004f60 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	4618      	mov	r0, r3
 8004f36:	f005 f87d 	bl	800a034 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004f3a:	68ba      	ldr	r2, [r7, #8]
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	2200      	movs	r2, #0
 8004f46:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f003 0303 	and.w	r3, r3, #3
 8004f50:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f5e:	e001      	b.n	8004f64 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004f60:	2300      	movs	r3, #0
 8004f62:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d002      	beq.n	8004f70 <HAL_ETH_ReleaseTxPacket+0xac>
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1b9      	bne.n	8004ee4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004f70:	2300      	movs	r3, #0
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b40      	cmp	r3, #64	; 0x40
 8004f94:	d112      	bne.n	8004fbc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fa4:	2b40      	cmp	r3, #64	; 0x40
 8004fa6:	d109      	bne.n	8004fbc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	4b50      	ldr	r3, [pc, #320]	; (80050f4 <HAL_ETH_IRQHandler+0x178>)
 8004fb4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f004 fb8a 	bl	80096d0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d113      	bne.n	8004ff6 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd6:	69db      	ldr	r3, [r3, #28]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d10a      	bne.n	8004ff6 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004fee:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f004 fb7d 	bl	80096f0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005008:	d14c      	bne.n	80050a4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005012:	69db      	ldr	r3, [r3, #28]
 8005014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800501c:	d142      	bne.n	80050a4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005024:	f043 0208 	orr.w	r2, r3, #8
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800503c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005040:	d11a      	bne.n	8005078 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504a:	695a      	ldr	r2, [r3, #20]
 800504c:	4b2a      	ldr	r3, [pc, #168]	; (80050f8 <HAL_ETH_IRQHandler+0x17c>)
 800504e:	4013      	ands	r3, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800505e:	69db      	ldr	r3, [r3, #28]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8005068:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800506c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	22e0      	movs	r2, #224	; 0xe0
 8005072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005076:	e012      	b.n	800509e <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	f248 6380 	movw	r3, #34432	; 0x8680
 8005086:	4013      	ands	r3, r2
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005096:	461a      	mov	r2, r3
 8005098:	f248 6380 	movw	r3, #34432	; 0x8680
 800509c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f004 fb36 	bl	8009710 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d10e      	bne.n	80050d0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 f81c 	bl	8005100 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <HAL_ETH_IRQHandler+0x180>)
 80050d2:	695b      	ldr	r3, [r3, #20]
 80050d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d006      	beq.n	80050ea <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80050dc:	4b07      	ldr	r3, [pc, #28]	; (80050fc <HAL_ETH_IRQHandler+0x180>)
 80050de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80050e2:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 f815 	bl	8005114 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	00010040 	.word	0x00010040
 80050f8:	007e2000 	.word	0x007e2000
 80050fc:	40013c00 	.word	0x40013c00

08005100 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b086      	sub	sp, #24
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f003 031c 	and.w	r3, r3, #28
 8005144:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	02db      	lsls	r3, r3, #11
 800514a:	b29b      	uxth	r3, r3
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	019b      	lsls	r3, r3, #6
 8005156:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	4313      	orrs	r3, r2
 800515e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0302 	bic.w	r3, r3, #2
 8005166:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005178:	f7ff fa68 	bl	800464c <HAL_GetTick>
 800517c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800517e:	e00d      	b.n	800519c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8005180:	f7ff fa64 	bl	800464c <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518e:	d301      	bcc.n	8005194 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	e010      	b.n	80051b6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1ec      	bne.n	8005180 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	461a      	mov	r2, r3
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}

080051be <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b086      	sub	sp, #24
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	60f8      	str	r0, [r7, #12]
 80051c6:	60b9      	str	r1, [r7, #8]
 80051c8:	607a      	str	r2, [r7, #4]
 80051ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f003 031c 	and.w	r3, r3, #28
 80051da:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	02db      	lsls	r3, r3, #11
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	019b      	lsls	r3, r3, #6
 80051ec:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f043 0302 	orr.w	r3, r3, #2
 80051fc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	f043 0301 	orr.w	r3, r3, #1
 8005204:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005218:	f7ff fa18 	bl	800464c <HAL_GetTick>
 800521c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800521e:	e00d      	b.n	800523c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8005220:	f7ff fa14 	bl	800464c <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800522e:	d301      	bcc.n	8005234 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e009      	b.n	8005248 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1ec      	bne.n	8005220 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3718      	adds	r7, #24
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e0d9      	b.n	8005418 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b00      	cmp	r3, #0
 8005270:	bf14      	ite	ne
 8005272:	2301      	movne	r3, #1
 8005274:	2300      	moveq	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005298:	2b00      	cmp	r3, #0
 800529a:	bf0c      	ite	eq
 800529c:	2301      	moveq	r3, #1
 800529e:	2300      	movne	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	461a      	mov	r2, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	b2db      	uxtb	r3, r3
 80052be:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bf0c      	ite	eq
 80052d2:	2301      	moveq	r3, #1
 80052d4:	2300      	movne	r3, #0
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	461a      	mov	r2, r3
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf14      	ite	ne
 80052ec:	2301      	movne	r3, #1
 80052ee:	2300      	moveq	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	461a      	mov	r2, r3
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800531e:	2b00      	cmp	r3, #0
 8005320:	bf0c      	ite	eq
 8005322:	2301      	moveq	r3, #1
 8005324:	2300      	movne	r3, #0
 8005326:	b2db      	uxtb	r3, r3
 8005328:	461a      	mov	r2, r3
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005338:	2b00      	cmp	r3, #0
 800533a:	bf0c      	ite	eq
 800533c:	2301      	moveq	r3, #1
 800533e:	2300      	movne	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	461a      	mov	r2, r3
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf14      	ite	ne
 8005356:	2301      	movne	r3, #1
 8005358:	2300      	moveq	r3, #0
 800535a:	b2db      	uxtb	r3, r3
 800535c:	461a      	mov	r2, r3
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800537a:	2b00      	cmp	r3, #0
 800537c:	bf14      	ite	ne
 800537e:	2301      	movne	r3, #1
 8005380:	2300      	moveq	r3, #0
 8005382:	b2db      	uxtb	r3, r3
 8005384:	461a      	mov	r2, r3
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	bf0c      	ite	eq
 80053b4:	2301      	moveq	r3, #1
 80053b6:	2300      	movne	r3, #0
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	461a      	mov	r2, r3
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	0c1b      	lsrs	r3, r3, #16
 80053d8:	b29a      	uxth	r2, r3
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	bf14      	ite	ne
 80053ec:	2301      	movne	r3, #1
 80053ee:	2300      	moveq	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8005404:	2b00      	cmp	r3, #0
 8005406:	bf14      	ite	ne
 8005408:	2301      	movne	r3, #1
 800540a:	2300      	moveq	r3, #0
 800540c:	b2db      	uxtb	r3, r3
 800540e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d101      	bne.n	8005438 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e00b      	b.n	8005450 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800543e:	2b10      	cmp	r3, #16
 8005440:	d105      	bne.n	800544e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f88f 	bl	8005568 <ETH_SetMACConfig>

    return HAL_OK;
 800544a:	2300      	movs	r3, #0
 800544c:	e000      	b.n	8005450 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
  }
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f023 031c 	bic.w	r3, r3, #28
 800546e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005470:	f001 ff14 	bl	800729c <HAL_RCC_GetHCLKFreq>
 8005474:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	4a1d      	ldr	r2, [pc, #116]	; (80054f0 <HAL_ETH_SetMDIOClockRange+0x98>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d908      	bls.n	8005490 <HAL_ETH_SetMDIOClockRange+0x38>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4a1c      	ldr	r2, [pc, #112]	; (80054f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d804      	bhi.n	8005490 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f043 0308 	orr.w	r3, r3, #8
 800548c:	60fb      	str	r3, [r7, #12]
 800548e:	e027      	b.n	80054e0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d908      	bls.n	80054aa <HAL_ETH_SetMDIOClockRange+0x52>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d204      	bcs.n	80054aa <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f043 030c 	orr.w	r3, r3, #12
 80054a6:	60fb      	str	r3, [r7, #12]
 80054a8:	e01a      	b.n	80054e0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4a12      	ldr	r2, [pc, #72]	; (80054f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d303      	bcc.n	80054ba <HAL_ETH_SetMDIOClockRange+0x62>
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4a11      	ldr	r2, [pc, #68]	; (80054fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d911      	bls.n	80054de <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	4a0f      	ldr	r2, [pc, #60]	; (80054fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d908      	bls.n	80054d4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	4a0e      	ldr	r2, [pc, #56]	; (8005500 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d804      	bhi.n	80054d4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f043 0304 	orr.w	r3, r3, #4
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e005      	b.n	80054e0 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f043 0310 	orr.w	r3, r3, #16
 80054da:	60fb      	str	r3, [r7, #12]
 80054dc:	e000      	b.n	80054e0 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80054de:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	611a      	str	r2, [r3, #16]
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	01312cff 	.word	0x01312cff
 80054f4:	02160ebf 	.word	0x02160ebf
 80054f8:	03938700 	.word	0x03938700
 80054fc:	05f5e0ff 	.word	0x05f5e0ff
 8005500:	08f0d17f 	.word	0x08f0d17f

08005504 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b084      	sub	sp, #16
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	6812      	ldr	r2, [r2, #0]
 8005538:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800553c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005540:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800554a:	699b      	ldr	r3, [r3, #24]
 800554c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800554e:	2001      	movs	r0, #1
 8005550:	f7ff f888 	bl	8004664 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800555e:	6193      	str	r3, [r2, #24]
}
 8005560:	bf00      	nop
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4b51      	ldr	r3, [pc, #324]	; (80056c4 <ETH_SetMACConfig+0x15c>)
 800557e:	4013      	ands	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	7c1b      	ldrb	r3, [r3, #16]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <ETH_SetMACConfig+0x28>
 800558a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800558e:	e000      	b.n	8005592 <ETH_SetMACConfig+0x2a>
 8005590:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	7c5b      	ldrb	r3, [r3, #17]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d102      	bne.n	80055a0 <ETH_SetMACConfig+0x38>
 800559a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800559e:	e000      	b.n	80055a2 <ETH_SetMACConfig+0x3a>
 80055a0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80055a2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80055a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	7fdb      	ldrb	r3, [r3, #31]
 80055ae:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80055b0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80055b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80055b8:	683a      	ldr	r2, [r7, #0]
 80055ba:	7f92      	ldrb	r2, [r2, #30]
 80055bc:	2a00      	cmp	r2, #0
 80055be:	d102      	bne.n	80055c6 <ETH_SetMACConfig+0x5e>
 80055c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80055c4:	e000      	b.n	80055c8 <ETH_SetMACConfig+0x60>
 80055c6:	2200      	movs	r2, #0
                        macconf->Speed |
 80055c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	7f1b      	ldrb	r3, [r3, #28]
 80055ce:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80055d0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80055d6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	791b      	ldrb	r3, [r3, #4]
 80055dc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80055de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80055e6:	2a00      	cmp	r2, #0
 80055e8:	d102      	bne.n	80055f0 <ETH_SetMACConfig+0x88>
 80055ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055ee:	e000      	b.n	80055f2 <ETH_SetMACConfig+0x8a>
 80055f0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80055f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	7bdb      	ldrb	r3, [r3, #15]
 80055f8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80055fa:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005600:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005608:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800560a:	4313      	orrs	r3, r2
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005622:	2001      	movs	r0, #1
 8005624:	f7ff f81e 	bl	8004664 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800563e:	4013      	ands	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005646:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800564e:	2a00      	cmp	r2, #0
 8005650:	d101      	bne.n	8005656 <ETH_SetMACConfig+0xee>
 8005652:	2280      	movs	r2, #128	; 0x80
 8005654:	e000      	b.n	8005658 <ETH_SetMACConfig+0xf0>
 8005656:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005658:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800565e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8005666:	2a01      	cmp	r2, #1
 8005668:	d101      	bne.n	800566e <ETH_SetMACConfig+0x106>
 800566a:	2208      	movs	r2, #8
 800566c:	e000      	b.n	8005670 <ETH_SetMACConfig+0x108>
 800566e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005670:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005672:	683a      	ldr	r2, [r7, #0]
 8005674:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005678:	2a01      	cmp	r2, #1
 800567a:	d101      	bne.n	8005680 <ETH_SetMACConfig+0x118>
 800567c:	2204      	movs	r2, #4
 800567e:	e000      	b.n	8005682 <ETH_SetMACConfig+0x11a>
 8005680:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005682:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800568a:	2a01      	cmp	r2, #1
 800568c:	d101      	bne.n	8005692 <ETH_SetMACConfig+0x12a>
 800568e:	2202      	movs	r2, #2
 8005690:	e000      	b.n	8005694 <ETH_SetMACConfig+0x12c>
 8005692:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005694:	4313      	orrs	r3, r2
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699b      	ldr	r3, [r3, #24]
 80056aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80056ac:	2001      	movs	r0, #1
 80056ae:	f7fe ffd9 	bl	8004664 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	619a      	str	r2, [r3, #24]
}
 80056ba:	bf00      	nop
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	ff20810f 	.word	0xff20810f

080056c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	4b3d      	ldr	r3, [pc, #244]	; (80057d8 <ETH_SetDMAConfig+0x110>)
 80056e2:	4013      	ands	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	7b1b      	ldrb	r3, [r3, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d102      	bne.n	80056f4 <ETH_SetDMAConfig+0x2c>
 80056ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80056f2:	e000      	b.n	80056f6 <ETH_SetDMAConfig+0x2e>
 80056f4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	7b5b      	ldrb	r3, [r3, #13]
 80056fa:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80056fc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	7f52      	ldrb	r2, [r2, #29]
 8005702:	2a00      	cmp	r2, #0
 8005704:	d102      	bne.n	800570c <ETH_SetDMAConfig+0x44>
 8005706:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800570a:	e000      	b.n	800570e <ETH_SetDMAConfig+0x46>
 800570c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800570e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	7b9b      	ldrb	r3, [r3, #14]
 8005714:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005716:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800571c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	7f1b      	ldrb	r3, [r3, #28]
 8005722:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005724:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	7f9b      	ldrb	r3, [r3, #30]
 800572a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800572c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005732:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800573a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800573c:	4313      	orrs	r3, r2
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800574c:	461a      	mov	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800575e:	2001      	movs	r0, #1
 8005760:	f7fe ff80 	bl	8004664 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800576c:	461a      	mov	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	791b      	ldrb	r3, [r3, #4]
 8005776:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800577c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005782:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005788:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005790:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005792:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800579a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80057a0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6812      	ldr	r2, [r2, #0]
 80057a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057ae:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80057bc:	2001      	movs	r0, #1
 80057be:	f7fe ff51 	bl	8004664 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ca:	461a      	mov	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6013      	str	r3, [r2, #0]
}
 80057d0:	bf00      	nop
 80057d2:	3710      	adds	r7, #16
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}
 80057d8:	f8de3f23 	.word	0xf8de3f23

080057dc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b0a6      	sub	sp, #152	; 0x98
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80057e4:	2301      	movs	r3, #1
 80057e6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80057ea:	2301      	movs	r3, #1
 80057ec:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80057f0:	2300      	movs	r3, #0
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80057f4:	2300      	movs	r3, #0
 80057f6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80057fa:	2301      	movs	r3, #1
 80057fc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005800:	2300      	movs	r3, #0
 8005802:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8005806:	2301      	movs	r3, #1
 8005808:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800580c:	2300      	movs	r3, #0
 800580e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005812:	2300      	movs	r3, #0
 8005814:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005818:	2300      	movs	r3, #0
 800581a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800581c:	2300      	movs	r3, #0
 800581e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005822:	2300      	movs	r3, #0
 8005824:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005826:	2300      	movs	r3, #0
 8005828:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800582c:	2300      	movs	r3, #0
 800582e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005832:	2300      	movs	r3, #0
 8005834:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005838:	2300      	movs	r3, #0
 800583a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800583e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005842:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005844:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005848:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800584a:	2300      	movs	r3, #0
 800584c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7ff fe86 	bl	8005568 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800585c:	2301      	movs	r3, #1
 800585e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005860:	2301      	movs	r3, #1
 8005862:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005864:	2301      	movs	r3, #1
 8005866:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800586a:	2301      	movs	r3, #1
 800586c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800586e:	2300      	movs	r3, #0
 8005870:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005872:	2300      	movs	r3, #0
 8005874:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005878:	2300      	movs	r3, #0
 800587a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800587e:	2300      	movs	r3, #0
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005882:	2301      	movs	r3, #1
 8005884:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005888:	2301      	movs	r3, #1
 800588a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800588c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005890:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005892:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005896:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800589c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800589e:	2301      	movs	r3, #1
 80058a0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80058a4:	2300      	movs	r3, #0
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80058a8:	2300      	movs	r3, #0
 80058aa:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80058ac:	f107 0308 	add.w	r3, r7, #8
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff ff08 	bl	80056c8 <ETH_SetDMAConfig>
}
 80058b8:	bf00      	nop
 80058ba:	3798      	adds	r7, #152	; 0x98
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	3305      	adds	r3, #5
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	021b      	lsls	r3, r3, #8
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	3204      	adds	r2, #4
 80058d8:	7812      	ldrb	r2, [r2, #0]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	4b11      	ldr	r3, [pc, #68]	; (8005928 <ETH_MACAddressConfig+0x68>)
 80058e2:	4413      	add	r3, r2
 80058e4:	461a      	mov	r2, r3
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3303      	adds	r3, #3
 80058ee:	781b      	ldrb	r3, [r3, #0]
 80058f0:	061a      	lsls	r2, r3, #24
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	3302      	adds	r3, #2
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	041b      	lsls	r3, r3, #16
 80058fa:	431a      	orrs	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3301      	adds	r3, #1
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	4313      	orrs	r3, r2
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	7812      	ldrb	r2, [r2, #0]
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <ETH_MACAddressConfig+0x6c>)
 8005912:	4413      	add	r3, r2
 8005914:	461a      	mov	r2, r3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	6013      	str	r3, [r2, #0]
}
 800591a:	bf00      	nop
 800591c:	371c      	adds	r7, #28
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40028040 	.word	0x40028040
 800592c:	40028044 	.word	0x40028044

08005930 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
 800593c:	e03e      	b.n	80059bc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68d9      	ldr	r1, [r3, #12]
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4613      	mov	r3, r2
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	00db      	lsls	r3, r3, #3
 800594c:	440b      	add	r3, r1
 800594e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2200      	movs	r2, #0
 800595a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2200      	movs	r2, #0
 8005960:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2200      	movs	r2, #0
 8005966:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	3206      	adds	r2, #6
 8005970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d80c      	bhi.n	80059a0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68d9      	ldr	r1, [r3, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	440b      	add	r3, r1
 8005998:	461a      	mov	r2, r3
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	60da      	str	r2, [r3, #12]
 800599e:	e004      	b.n	80059aa <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	461a      	mov	r2, r3
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	3301      	adds	r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d9bd      	bls.n	800593e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059d4:	611a      	str	r2, [r3, #16]
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b085      	sub	sp, #20
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e046      	b.n	8005a7e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6919      	ldr	r1, [r3, #16]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	440b      	add	r3, r1
 8005a00:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	2200      	movs	r2, #0
 8005a12:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2200      	movs	r2, #0
 8005a18:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2200      	movs	r2, #0
 8005a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a2c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8005a34:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005a42:	68b9      	ldr	r1, [r7, #8]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	3212      	adds	r2, #18
 8005a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d80c      	bhi.n	8005a6e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6919      	ldr	r1, [r3, #16]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	440b      	add	r3, r1
 8005a66:	461a      	mov	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	60da      	str	r2, [r3, #12]
 8005a6c:	e004      	b.n	8005a78 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	461a      	mov	r2, r3
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	60fb      	str	r3, [r7, #12]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b03      	cmp	r3, #3
 8005a82:	d9b5      	bls.n	80059f0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aae:	60da      	str	r2, [r3, #12]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b08d      	sub	sp, #52	; 0x34
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	3318      	adds	r3, #24
 8005acc:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005afe:	d007      	beq.n	8005b10 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b04:	3304      	adds	r3, #4
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d001      	beq.n	8005b14 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005b10:	2302      	movs	r3, #2
 8005b12:	e103      	b.n	8005d1c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8005b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b16:	3301      	adds	r3, #1
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8005b2c:	f023 031f 	bic.w	r3, r3, #31
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	6852      	ldr	r2, [r2, #4]
 8005b34:	431a      	orrs	r2, r3
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d008      	beq.n	8005b58 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	431a      	orrs	r2, r3
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005b64:	6a3b      	ldr	r3, [r7, #32]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0304 	and.w	r3, r3, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d005      	beq.n	8005b8e <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b8a:	6a3b      	ldr	r3, [r7, #32]
 8005b8c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005b8e:	6a3b      	ldr	r3, [r7, #32]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8005b9a:	f3bf 8f5f 	dmb	sy
}
 8005b9e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005bac:	e084      	b.n	8005cb8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d006      	beq.n	8005bce <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005bc0:	6a3b      	ldr	r3, [r7, #32]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	601a      	str	r2, [r3, #0]
 8005bcc:	e005      	b.n	8005bda <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005bd6:	6a3b      	ldr	r3, [r7, #32]
 8005bd8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bdc:	3301      	adds	r3, #1
 8005bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d902      	bls.n	8005bec <ETH_Prepare_Tx_Descriptors+0x130>
 8005be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be8:	3b04      	subs	r3, #4
 8005bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c0e:	d007      	beq.n	8005c20 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c14:	3304      	adds	r3, #4
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d029      	beq.n	8005c74 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005c2e:	2300      	movs	r3, #0
 8005c30:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c32:	e019      	b.n	8005c68 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8005c34:	f3bf 8f5f 	dmb	sy
}
 8005c38:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005c42:	6a3b      	ldr	r3, [r7, #32]
 8005c44:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	3301      	adds	r3, #1
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	2b03      	cmp	r3, #3
 8005c50:	d902      	bls.n	8005c58 <ETH_Prepare_Tx_Descriptors+0x19c>
 8005c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c54:	3b04      	subs	r3, #4
 8005c56:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c60:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	3301      	adds	r3, #1
 8005c66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d3e1      	bcc.n	8005c34 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8005c70:	2302      	movs	r3, #2
 8005c72:	e053      	b.n	8005d1c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	3301      	adds	r3, #1
 8005c78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005c80:	69fb      	ldr	r3, [r7, #28]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	461a      	mov	r2, r3
 8005c86:	6a3b      	ldr	r3, [r7, #32]
 8005c88:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8005c92:	f023 031f 	bic.w	r3, r3, #31
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	6852      	ldr	r2, [r2, #4]
 8005c9a:	431a      	orrs	r2, r3
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8005ca6:	f3bf 8f5f 	dmb	sy
}
 8005caa:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005cac:	6a3b      	ldr	r3, [r7, #32]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f47f af76 	bne.w	8005bae <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d006      	beq.n	8005cd6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	e005      	b.n	8005ce2 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005cd6:	6a3b      	ldr	r3, [r7, #32]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005cde:	6a3b      	ldr	r3, [r7, #32]
 8005ce0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005ce2:	6a3b      	ldr	r3, [r7, #32]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005cf2:	6979      	ldr	r1, [r7, #20]
 8005cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d02:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8005d04:	b672      	cpsid	i
}
 8005d06:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d0c:	69bb      	ldr	r3, [r7, #24]
 8005d0e:	4413      	add	r3, r2
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8005d16:	b662      	cpsie	i
}
 8005d18:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3734      	adds	r7, #52	; 0x34
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b089      	sub	sp, #36	; 0x24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d3e:	2300      	movs	r3, #0
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	e16b      	b.n	800601c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005d44:	2201      	movs	r2, #1
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	4013      	ands	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	f040 815a 	bne.w	8006016 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d005      	beq.n	8005d7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d130      	bne.n	8005ddc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	2203      	movs	r2, #3
 8005d86:	fa02 f303 	lsl.w	r3, r2, r3
 8005d8a:	43db      	mvns	r3, r3
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4013      	ands	r3, r2
 8005d90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	005b      	lsls	r3, r3, #1
 8005d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005db0:	2201      	movs	r2, #1
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	fa02 f303 	lsl.w	r3, r2, r3
 8005db8:	43db      	mvns	r3, r3
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	091b      	lsrs	r3, r3, #4
 8005dc6:	f003 0201 	and.w	r2, r3, #1
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	f003 0303 	and.w	r3, r3, #3
 8005de4:	2b03      	cmp	r3, #3
 8005de6:	d017      	beq.n	8005e18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	2203      	movs	r2, #3
 8005df4:	fa02 f303 	lsl.w	r3, r2, r3
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	69ba      	ldr	r2, [r7, #24]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	005b      	lsls	r3, r3, #1
 8005e08:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0c:	69ba      	ldr	r2, [r7, #24]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	f003 0303 	and.w	r3, r3, #3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d123      	bne.n	8005e6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	08da      	lsrs	r2, r3, #3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	3208      	adds	r2, #8
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	f003 0307 	and.w	r3, r3, #7
 8005e38:	009b      	lsls	r3, r3, #2
 8005e3a:	220f      	movs	r2, #15
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	08da      	lsrs	r2, r3, #3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	3208      	adds	r2, #8
 8005e66:	69b9      	ldr	r1, [r7, #24]
 8005e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	005b      	lsls	r3, r3, #1
 8005e76:	2203      	movs	r2, #3
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	f003 0203 	and.w	r2, r3, #3
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80b4 	beq.w	8006016 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	4b60      	ldr	r3, [pc, #384]	; (8006034 <HAL_GPIO_Init+0x30c>)
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	4a5f      	ldr	r2, [pc, #380]	; (8006034 <HAL_GPIO_Init+0x30c>)
 8005eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8005ebe:	4b5d      	ldr	r3, [pc, #372]	; (8006034 <HAL_GPIO_Init+0x30c>)
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005eca:	4a5b      	ldr	r2, [pc, #364]	; (8006038 <HAL_GPIO_Init+0x310>)
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	089b      	lsrs	r3, r3, #2
 8005ed0:	3302      	adds	r3, #2
 8005ed2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	220f      	movs	r2, #15
 8005ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee6:	43db      	mvns	r3, r3
 8005ee8:	69ba      	ldr	r2, [r7, #24]
 8005eea:	4013      	ands	r3, r2
 8005eec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a52      	ldr	r2, [pc, #328]	; (800603c <HAL_GPIO_Init+0x314>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d02b      	beq.n	8005f4e <HAL_GPIO_Init+0x226>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a51      	ldr	r2, [pc, #324]	; (8006040 <HAL_GPIO_Init+0x318>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d025      	beq.n	8005f4a <HAL_GPIO_Init+0x222>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a50      	ldr	r2, [pc, #320]	; (8006044 <HAL_GPIO_Init+0x31c>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d01f      	beq.n	8005f46 <HAL_GPIO_Init+0x21e>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	4a4f      	ldr	r2, [pc, #316]	; (8006048 <HAL_GPIO_Init+0x320>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d019      	beq.n	8005f42 <HAL_GPIO_Init+0x21a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a4e      	ldr	r2, [pc, #312]	; (800604c <HAL_GPIO_Init+0x324>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d013      	beq.n	8005f3e <HAL_GPIO_Init+0x216>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a4d      	ldr	r2, [pc, #308]	; (8006050 <HAL_GPIO_Init+0x328>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00d      	beq.n	8005f3a <HAL_GPIO_Init+0x212>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a4c      	ldr	r2, [pc, #304]	; (8006054 <HAL_GPIO_Init+0x32c>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d007      	beq.n	8005f36 <HAL_GPIO_Init+0x20e>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a4b      	ldr	r2, [pc, #300]	; (8006058 <HAL_GPIO_Init+0x330>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d101      	bne.n	8005f32 <HAL_GPIO_Init+0x20a>
 8005f2e:	2307      	movs	r3, #7
 8005f30:	e00e      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f32:	2308      	movs	r3, #8
 8005f34:	e00c      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f36:	2306      	movs	r3, #6
 8005f38:	e00a      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f3a:	2305      	movs	r3, #5
 8005f3c:	e008      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f3e:	2304      	movs	r3, #4
 8005f40:	e006      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f42:	2303      	movs	r3, #3
 8005f44:	e004      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f46:	2302      	movs	r3, #2
 8005f48:	e002      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e000      	b.n	8005f50 <HAL_GPIO_Init+0x228>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	69fa      	ldr	r2, [r7, #28]
 8005f52:	f002 0203 	and.w	r2, r2, #3
 8005f56:	0092      	lsls	r2, r2, #2
 8005f58:	4093      	lsls	r3, r2
 8005f5a:	69ba      	ldr	r2, [r7, #24]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005f60:	4935      	ldr	r1, [pc, #212]	; (8006038 <HAL_GPIO_Init+0x310>)
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	089b      	lsrs	r3, r3, #2
 8005f66:	3302      	adds	r3, #2
 8005f68:	69ba      	ldr	r2, [r7, #24]
 8005f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005f6e:	4b3b      	ldr	r3, [pc, #236]	; (800605c <HAL_GPIO_Init+0x334>)
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	43db      	mvns	r3, r3
 8005f78:	69ba      	ldr	r2, [r7, #24]
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d003      	beq.n	8005f92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005f8a:	69ba      	ldr	r2, [r7, #24]
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f92:	4a32      	ldr	r2, [pc, #200]	; (800605c <HAL_GPIO_Init+0x334>)
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f98:	4b30      	ldr	r3, [pc, #192]	; (800605c <HAL_GPIO_Init+0x334>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	43db      	mvns	r3, r3
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005fb4:	69ba      	ldr	r2, [r7, #24]
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005fbc:	4a27      	ldr	r2, [pc, #156]	; (800605c <HAL_GPIO_Init+0x334>)
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005fc2:	4b26      	ldr	r3, [pc, #152]	; (800605c <HAL_GPIO_Init+0x334>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005fe6:	4a1d      	ldr	r2, [pc, #116]	; (800605c <HAL_GPIO_Init+0x334>)
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fec:	4b1b      	ldr	r3, [pc, #108]	; (800605c <HAL_GPIO_Init+0x334>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	43db      	mvns	r3, r3
 8005ff6:	69ba      	ldr	r2, [r7, #24]
 8005ff8:	4013      	ands	r3, r2
 8005ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d003      	beq.n	8006010 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006008:	69ba      	ldr	r2, [r7, #24]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006010:	4a12      	ldr	r2, [pc, #72]	; (800605c <HAL_GPIO_Init+0x334>)
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	3301      	adds	r3, #1
 800601a:	61fb      	str	r3, [r7, #28]
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b0f      	cmp	r3, #15
 8006020:	f67f ae90 	bls.w	8005d44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006024:	bf00      	nop
 8006026:	bf00      	nop
 8006028:	3724      	adds	r7, #36	; 0x24
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	40023800 	.word	0x40023800
 8006038:	40013800 	.word	0x40013800
 800603c:	40020000 	.word	0x40020000
 8006040:	40020400 	.word	0x40020400
 8006044:	40020800 	.word	0x40020800
 8006048:	40020c00 	.word	0x40020c00
 800604c:	40021000 	.word	0x40021000
 8006050:	40021400 	.word	0x40021400
 8006054:	40021800 	.word	0x40021800
 8006058:	40021c00 	.word	0x40021c00
 800605c:	40013c00 	.word	0x40013c00

08006060 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	887b      	ldrh	r3, [r7, #2]
 8006072:	4013      	ands	r3, r2
 8006074:	2b00      	cmp	r3, #0
 8006076:	d002      	beq.n	800607e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006078:	2301      	movs	r3, #1
 800607a:	73fb      	strb	r3, [r7, #15]
 800607c:	e001      	b.n	8006082 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800607e:	2300      	movs	r3, #0
 8006080:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006082:	7bfb      	ldrb	r3, [r7, #15]
}
 8006084:	4618      	mov	r0, r3
 8006086:	3714      	adds	r7, #20
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006090:	b480      	push	{r7}
 8006092:	b083      	sub	sp, #12
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	460b      	mov	r3, r1
 800609a:	807b      	strh	r3, [r7, #2]
 800609c:	4613      	mov	r3, r2
 800609e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060a0:	787b      	ldrb	r3, [r7, #1]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060a6:	887a      	ldrh	r2, [r7, #2]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80060ac:	e003      	b.n	80060b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80060ae:	887b      	ldrh	r3, [r7, #2]
 80060b0:	041a      	lsls	r2, r3, #16
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	619a      	str	r2, [r3, #24]
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80060c2:	b480      	push	{r7}
 80060c4:	b085      	sub	sp, #20
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80060d4:	887a      	ldrh	r2, [r7, #2]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	4013      	ands	r3, r2
 80060da:	041a      	lsls	r2, r3, #16
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	43d9      	mvns	r1, r3
 80060e0:	887b      	ldrh	r3, [r7, #2]
 80060e2:	400b      	ands	r3, r1
 80060e4:	431a      	orrs	r2, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	619a      	str	r2, [r3, #24]
}
 80060ea:	bf00      	nop
 80060ec:	3714      	adds	r7, #20
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
	...

080060f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e12b      	b.n	8006362 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d106      	bne.n	8006124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7fc fba2 	bl	8002868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2224      	movs	r2, #36	; 0x24
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f022 0201 	bic.w	r2, r2, #1
 800613a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800614a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800615a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800615c:	f001 f8aa 	bl	80072b4 <HAL_RCC_GetPCLK1Freq>
 8006160:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	4a81      	ldr	r2, [pc, #516]	; (800636c <HAL_I2C_Init+0x274>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d807      	bhi.n	800617c <HAL_I2C_Init+0x84>
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4a80      	ldr	r2, [pc, #512]	; (8006370 <HAL_I2C_Init+0x278>)
 8006170:	4293      	cmp	r3, r2
 8006172:	bf94      	ite	ls
 8006174:	2301      	movls	r3, #1
 8006176:	2300      	movhi	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	e006      	b.n	800618a <HAL_I2C_Init+0x92>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4a7d      	ldr	r2, [pc, #500]	; (8006374 <HAL_I2C_Init+0x27c>)
 8006180:	4293      	cmp	r3, r2
 8006182:	bf94      	ite	ls
 8006184:	2301      	movls	r3, #1
 8006186:	2300      	movhi	r3, #0
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e0e7      	b.n	8006362 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	4a78      	ldr	r2, [pc, #480]	; (8006378 <HAL_I2C_Init+0x280>)
 8006196:	fba2 2303 	umull	r2, r3, r2, r3
 800619a:	0c9b      	lsrs	r3, r3, #18
 800619c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	6a1b      	ldr	r3, [r3, #32]
 80061b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	4a6a      	ldr	r2, [pc, #424]	; (800636c <HAL_I2C_Init+0x274>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d802      	bhi.n	80061cc <HAL_I2C_Init+0xd4>
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	3301      	adds	r3, #1
 80061ca:	e009      	b.n	80061e0 <HAL_I2C_Init+0xe8>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80061d2:	fb02 f303 	mul.w	r3, r2, r3
 80061d6:	4a69      	ldr	r2, [pc, #420]	; (800637c <HAL_I2C_Init+0x284>)
 80061d8:	fba2 2303 	umull	r2, r3, r2, r3
 80061dc:	099b      	lsrs	r3, r3, #6
 80061de:	3301      	adds	r3, #1
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	430b      	orrs	r3, r1
 80061e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80061f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	495c      	ldr	r1, [pc, #368]	; (800636c <HAL_I2C_Init+0x274>)
 80061fc:	428b      	cmp	r3, r1
 80061fe:	d819      	bhi.n	8006234 <HAL_I2C_Init+0x13c>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	1e59      	subs	r1, r3, #1
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	fbb1 f3f3 	udiv	r3, r1, r3
 800620e:	1c59      	adds	r1, r3, #1
 8006210:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006214:	400b      	ands	r3, r1
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <HAL_I2C_Init+0x138>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	1e59      	subs	r1, r3, #1
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	fbb1 f3f3 	udiv	r3, r1, r3
 8006228:	3301      	adds	r3, #1
 800622a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800622e:	e051      	b.n	80062d4 <HAL_I2C_Init+0x1dc>
 8006230:	2304      	movs	r3, #4
 8006232:	e04f      	b.n	80062d4 <HAL_I2C_Init+0x1dc>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d111      	bne.n	8006260 <HAL_I2C_Init+0x168>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	1e58      	subs	r0, r3, #1
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6859      	ldr	r1, [r3, #4]
 8006244:	460b      	mov	r3, r1
 8006246:	005b      	lsls	r3, r3, #1
 8006248:	440b      	add	r3, r1
 800624a:	fbb0 f3f3 	udiv	r3, r0, r3
 800624e:	3301      	adds	r3, #1
 8006250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006254:	2b00      	cmp	r3, #0
 8006256:	bf0c      	ite	eq
 8006258:	2301      	moveq	r3, #1
 800625a:	2300      	movne	r3, #0
 800625c:	b2db      	uxtb	r3, r3
 800625e:	e012      	b.n	8006286 <HAL_I2C_Init+0x18e>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	1e58      	subs	r0, r3, #1
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6859      	ldr	r1, [r3, #4]
 8006268:	460b      	mov	r3, r1
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	440b      	add	r3, r1
 800626e:	0099      	lsls	r1, r3, #2
 8006270:	440b      	add	r3, r1
 8006272:	fbb0 f3f3 	udiv	r3, r0, r3
 8006276:	3301      	adds	r3, #1
 8006278:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800627c:	2b00      	cmp	r3, #0
 800627e:	bf0c      	ite	eq
 8006280:	2301      	moveq	r3, #1
 8006282:	2300      	movne	r3, #0
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <HAL_I2C_Init+0x196>
 800628a:	2301      	movs	r3, #1
 800628c:	e022      	b.n	80062d4 <HAL_I2C_Init+0x1dc>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10e      	bne.n	80062b4 <HAL_I2C_Init+0x1bc>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	1e58      	subs	r0, r3, #1
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6859      	ldr	r1, [r3, #4]
 800629e:	460b      	mov	r3, r1
 80062a0:	005b      	lsls	r3, r3, #1
 80062a2:	440b      	add	r3, r1
 80062a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80062a8:	3301      	adds	r3, #1
 80062aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062b2:	e00f      	b.n	80062d4 <HAL_I2C_Init+0x1dc>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	1e58      	subs	r0, r3, #1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	0099      	lsls	r1, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ca:	3301      	adds	r3, #1
 80062cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	6809      	ldr	r1, [r1, #0]
 80062d8:	4313      	orrs	r3, r2
 80062da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69da      	ldr	r2, [r3, #28]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	431a      	orrs	r2, r3
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006302:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	6911      	ldr	r1, [r2, #16]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	68d2      	ldr	r2, [r2, #12]
 800630e:	4311      	orrs	r1, r2
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	6812      	ldr	r2, [r2, #0]
 8006314:	430b      	orrs	r3, r1
 8006316:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	695a      	ldr	r2, [r3, #20]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	430a      	orrs	r2, r1
 8006332:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f042 0201 	orr.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2220      	movs	r2, #32
 800634e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006360:	2300      	movs	r3, #0
}
 8006362:	4618      	mov	r0, r3
 8006364:	3710      	adds	r7, #16
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}
 800636a:	bf00      	nop
 800636c:	000186a0 	.word	0x000186a0
 8006370:	001e847f 	.word	0x001e847f
 8006374:	003d08ff 	.word	0x003d08ff
 8006378:	431bde83 	.word	0x431bde83
 800637c:	10624dd3 	.word	0x10624dd3

08006380 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b088      	sub	sp, #32
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	4608      	mov	r0, r1
 800638a:	4611      	mov	r1, r2
 800638c:	461a      	mov	r2, r3
 800638e:	4603      	mov	r3, r0
 8006390:	817b      	strh	r3, [r7, #10]
 8006392:	460b      	mov	r3, r1
 8006394:	813b      	strh	r3, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800639a:	f7fe f957 	bl	800464c <HAL_GetTick>
 800639e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b20      	cmp	r3, #32
 80063aa:	f040 80d9 	bne.w	8006560 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	9300      	str	r3, [sp, #0]
 80063b2:	2319      	movs	r3, #25
 80063b4:	2201      	movs	r2, #1
 80063b6:	496d      	ldr	r1, [pc, #436]	; (800656c <HAL_I2C_Mem_Write+0x1ec>)
 80063b8:	68f8      	ldr	r0, [r7, #12]
 80063ba:	f000 f971 	bl	80066a0 <I2C_WaitOnFlagUntilTimeout>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80063c4:	2302      	movs	r3, #2
 80063c6:	e0cc      	b.n	8006562 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d101      	bne.n	80063d6 <HAL_I2C_Mem_Write+0x56>
 80063d2:	2302      	movs	r3, #2
 80063d4:	e0c5      	b.n	8006562 <HAL_I2C_Mem_Write+0x1e2>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d007      	beq.n	80063fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f042 0201 	orr.w	r2, r2, #1
 80063fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800640a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2221      	movs	r2, #33	; 0x21
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2240      	movs	r2, #64	; 0x40
 8006418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2200      	movs	r2, #0
 8006420:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6a3a      	ldr	r2, [r7, #32]
 8006426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800642c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006432:	b29a      	uxth	r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4a4d      	ldr	r2, [pc, #308]	; (8006570 <HAL_I2C_Mem_Write+0x1f0>)
 800643c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800643e:	88f8      	ldrh	r0, [r7, #6]
 8006440:	893a      	ldrh	r2, [r7, #8]
 8006442:	8979      	ldrh	r1, [r7, #10]
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	9301      	str	r3, [sp, #4]
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	9300      	str	r3, [sp, #0]
 800644c:	4603      	mov	r3, r0
 800644e:	68f8      	ldr	r0, [r7, #12]
 8006450:	f000 f890 	bl	8006574 <I2C_RequestMemoryWrite>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d052      	beq.n	8006500 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e081      	b.n	8006562 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fa36 	bl	80068d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00d      	beq.n	800648a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	2b04      	cmp	r3, #4
 8006474:	d107      	bne.n	8006486 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006484:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	e06b      	b.n	8006562 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d11b      	bne.n	8006500 <HAL_I2C_Mem_Write+0x180>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d017      	beq.n	8006500 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	781a      	ldrb	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e0:	1c5a      	adds	r2, r3, #1
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	3b01      	subs	r3, #1
 80064fa:	b29a      	uxth	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1aa      	bne.n	800645e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 fa29 	bl	8006964 <I2C_WaitOnBTFFlagUntilTimeout>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00d      	beq.n	8006534 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	2b04      	cmp	r3, #4
 800651e:	d107      	bne.n	8006530 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800652e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e016      	b.n	8006562 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800655c:	2300      	movs	r3, #0
 800655e:	e000      	b.n	8006562 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006560:	2302      	movs	r3, #2
  }
}
 8006562:	4618      	mov	r0, r3
 8006564:	3718      	adds	r7, #24
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	00100002 	.word	0x00100002
 8006570:	ffff0000 	.word	0xffff0000

08006574 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b088      	sub	sp, #32
 8006578:	af02      	add	r7, sp, #8
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	4608      	mov	r0, r1
 800657e:	4611      	mov	r1, r2
 8006580:	461a      	mov	r2, r3
 8006582:	4603      	mov	r3, r0
 8006584:	817b      	strh	r3, [r7, #10]
 8006586:	460b      	mov	r3, r1
 8006588:	813b      	strh	r3, [r7, #8]
 800658a:	4613      	mov	r3, r2
 800658c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800659c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800659e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a0:	9300      	str	r3, [sp, #0]
 80065a2:	6a3b      	ldr	r3, [r7, #32]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065aa:	68f8      	ldr	r0, [r7, #12]
 80065ac:	f000 f878 	bl	80066a0 <I2C_WaitOnFlagUntilTimeout>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00d      	beq.n	80065d2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065c4:	d103      	bne.n	80065ce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e05f      	b.n	8006692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80065d2:	897b      	ldrh	r3, [r7, #10]
 80065d4:	b2db      	uxtb	r3, r3
 80065d6:	461a      	mov	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80065e0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e4:	6a3a      	ldr	r2, [r7, #32]
 80065e6:	492d      	ldr	r1, [pc, #180]	; (800669c <I2C_RequestMemoryWrite+0x128>)
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f8d3 	bl	8006794 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d001      	beq.n	80065f8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e04c      	b.n	8006692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	617b      	str	r3, [r7, #20]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800660e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006610:	6a39      	ldr	r1, [r7, #32]
 8006612:	68f8      	ldr	r0, [r7, #12]
 8006614:	f000 f95e 	bl	80068d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d00d      	beq.n	800663a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	2b04      	cmp	r3, #4
 8006624:	d107      	bne.n	8006636 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006634:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006636:	2301      	movs	r3, #1
 8006638:	e02b      	b.n	8006692 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800663a:	88fb      	ldrh	r3, [r7, #6]
 800663c:	2b01      	cmp	r3, #1
 800663e:	d105      	bne.n	800664c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006640:	893b      	ldrh	r3, [r7, #8]
 8006642:	b2da      	uxtb	r2, r3
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	611a      	str	r2, [r3, #16]
 800664a:	e021      	b.n	8006690 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800664c:	893b      	ldrh	r3, [r7, #8]
 800664e:	0a1b      	lsrs	r3, r3, #8
 8006650:	b29b      	uxth	r3, r3
 8006652:	b2da      	uxtb	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800665a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800665c:	6a39      	ldr	r1, [r7, #32]
 800665e:	68f8      	ldr	r0, [r7, #12]
 8006660:	f000 f938 	bl	80068d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006664:	4603      	mov	r3, r0
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00d      	beq.n	8006686 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	2b04      	cmp	r3, #4
 8006670:	d107      	bne.n	8006682 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006680:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e005      	b.n	8006692 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006686:	893b      	ldrh	r3, [r7, #8]
 8006688:	b2da      	uxtb	r2, r3
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3718      	adds	r7, #24
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	00010002 	.word	0x00010002

080066a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066b0:	e048      	b.n	8006744 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066b8:	d044      	beq.n	8006744 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ba:	f7fd ffc7 	bl	800464c <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d139      	bne.n	8006744 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	0c1b      	lsrs	r3, r3, #16
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d10d      	bne.n	80066f6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	43da      	mvns	r2, r3
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	4013      	ands	r3, r2
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	bf0c      	ite	eq
 80066ec:	2301      	moveq	r3, #1
 80066ee:	2300      	movne	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	461a      	mov	r2, r3
 80066f4:	e00c      	b.n	8006710 <I2C_WaitOnFlagUntilTimeout+0x70>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	43da      	mvns	r2, r3
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4013      	ands	r3, r2
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	bf0c      	ite	eq
 8006708:	2301      	moveq	r3, #1
 800670a:	2300      	movne	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	429a      	cmp	r2, r3
 8006714:	d116      	bne.n	8006744 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006730:	f043 0220 	orr.w	r2, r3, #32
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006740:	2301      	movs	r3, #1
 8006742:	e023      	b.n	800678c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	0c1b      	lsrs	r3, r3, #16
 8006748:	b2db      	uxtb	r3, r3
 800674a:	2b01      	cmp	r3, #1
 800674c:	d10d      	bne.n	800676a <I2C_WaitOnFlagUntilTimeout+0xca>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695b      	ldr	r3, [r3, #20]
 8006754:	43da      	mvns	r2, r3
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	4013      	ands	r3, r2
 800675a:	b29b      	uxth	r3, r3
 800675c:	2b00      	cmp	r3, #0
 800675e:	bf0c      	ite	eq
 8006760:	2301      	moveq	r3, #1
 8006762:	2300      	movne	r3, #0
 8006764:	b2db      	uxtb	r3, r3
 8006766:	461a      	mov	r2, r3
 8006768:	e00c      	b.n	8006784 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	43da      	mvns	r2, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4013      	ands	r3, r2
 8006776:	b29b      	uxth	r3, r3
 8006778:	2b00      	cmp	r3, #0
 800677a:	bf0c      	ite	eq
 800677c:	2301      	moveq	r3, #1
 800677e:	2300      	movne	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	429a      	cmp	r2, r3
 8006788:	d093      	beq.n	80066b2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067a2:	e071      	b.n	8006888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067b2:	d123      	bne.n	80067fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80067cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2200      	movs	r2, #0
 80067d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	f043 0204 	orr.w	r2, r3, #4
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e067      	b.n	80068cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006802:	d041      	beq.n	8006888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006804:	f7fd ff22 	bl	800464c <HAL_GetTick>
 8006808:	4602      	mov	r2, r0
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	429a      	cmp	r2, r3
 8006812:	d302      	bcc.n	800681a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d136      	bne.n	8006888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	0c1b      	lsrs	r3, r3, #16
 800681e:	b2db      	uxtb	r3, r3
 8006820:	2b01      	cmp	r3, #1
 8006822:	d10c      	bne.n	800683e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	695b      	ldr	r3, [r3, #20]
 800682a:	43da      	mvns	r2, r3
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4013      	ands	r3, r2
 8006830:	b29b      	uxth	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	bf14      	ite	ne
 8006836:	2301      	movne	r3, #1
 8006838:	2300      	moveq	r3, #0
 800683a:	b2db      	uxtb	r3, r3
 800683c:	e00b      	b.n	8006856 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	43da      	mvns	r2, r3
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	4013      	ands	r3, r2
 800684a:	b29b      	uxth	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	bf14      	ite	ne
 8006850:	2301      	movne	r3, #1
 8006852:	2300      	moveq	r3, #0
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d016      	beq.n	8006888 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2200      	movs	r2, #0
 800685e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006874:	f043 0220 	orr.w	r2, r3, #32
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	2200      	movs	r2, #0
 8006880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006884:	2301      	movs	r3, #1
 8006886:	e021      	b.n	80068cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	0c1b      	lsrs	r3, r3, #16
 800688c:	b2db      	uxtb	r3, r3
 800688e:	2b01      	cmp	r3, #1
 8006890:	d10c      	bne.n	80068ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	43da      	mvns	r2, r3
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	4013      	ands	r3, r2
 800689e:	b29b      	uxth	r3, r3
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bf14      	ite	ne
 80068a4:	2301      	movne	r3, #1
 80068a6:	2300      	moveq	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	e00b      	b.n	80068c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	699b      	ldr	r3, [r3, #24]
 80068b2:	43da      	mvns	r2, r3
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	bf14      	ite	ne
 80068be:	2301      	movne	r3, #1
 80068c0:	2300      	moveq	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f47f af6d 	bne.w	80067a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068e0:	e034      	b.n	800694c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80068e2:	68f8      	ldr	r0, [r7, #12]
 80068e4:	f000 f886 	bl	80069f4 <I2C_IsAcknowledgeFailed>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d001      	beq.n	80068f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e034      	b.n	800695c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068f8:	d028      	beq.n	800694c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068fa:	f7fd fea7 	bl	800464c <HAL_GetTick>
 80068fe:	4602      	mov	r2, r0
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	68ba      	ldr	r2, [r7, #8]
 8006906:	429a      	cmp	r2, r3
 8006908:	d302      	bcc.n	8006910 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d11d      	bne.n	800694c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800691a:	2b80      	cmp	r3, #128	; 0x80
 800691c:	d016      	beq.n	800694c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2200      	movs	r2, #0
 8006922:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2220      	movs	r2, #32
 8006928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2200      	movs	r2, #0
 8006930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006938:	f043 0220 	orr.w	r2, r3, #32
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	e007      	b.n	800695c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006956:	2b80      	cmp	r3, #128	; 0x80
 8006958:	d1c3      	bne.n	80068e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006970:	e034      	b.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f000 f83e 	bl	80069f4 <I2C_IsAcknowledgeFailed>
 8006978:	4603      	mov	r3, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	d001      	beq.n	8006982 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e034      	b.n	80069ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006988:	d028      	beq.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800698a:	f7fd fe5f 	bl	800464c <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	429a      	cmp	r2, r3
 8006998:	d302      	bcc.n	80069a0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11d      	bne.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f003 0304 	and.w	r3, r3, #4
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d016      	beq.n	80069dc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2200      	movs	r2, #0
 80069b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2220      	movs	r2, #32
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069c8:	f043 0220 	orr.w	r2, r3, #32
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e007      	b.n	80069ec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	695b      	ldr	r3, [r3, #20]
 80069e2:	f003 0304 	and.w	r3, r3, #4
 80069e6:	2b04      	cmp	r3, #4
 80069e8:	d1c3      	bne.n	8006972 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a0a:	d11b      	bne.n	8006a44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a30:	f043 0204 	orr.w	r2, r3, #4
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
	...

08006a54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d101      	bne.n	8006a66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
 8006a64:	e267      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0301 	and.w	r3, r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d075      	beq.n	8006b5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a72:	4b88      	ldr	r3, [pc, #544]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f003 030c 	and.w	r3, r3, #12
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d00c      	beq.n	8006a98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a7e:	4b85      	ldr	r3, [pc, #532]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006a86:	2b08      	cmp	r3, #8
 8006a88:	d112      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a8a:	4b82      	ldr	r3, [pc, #520]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a96:	d10b      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a98:	4b7e      	ldr	r3, [pc, #504]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d05b      	beq.n	8006b5c <HAL_RCC_OscConfig+0x108>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d157      	bne.n	8006b5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e242      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab8:	d106      	bne.n	8006ac8 <HAL_RCC_OscConfig+0x74>
 8006aba:	4b76      	ldr	r3, [pc, #472]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a75      	ldr	r2, [pc, #468]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ac4:	6013      	str	r3, [r2, #0]
 8006ac6:	e01d      	b.n	8006b04 <HAL_RCC_OscConfig+0xb0>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ad0:	d10c      	bne.n	8006aec <HAL_RCC_OscConfig+0x98>
 8006ad2:	4b70      	ldr	r3, [pc, #448]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a6f      	ldr	r2, [pc, #444]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006adc:	6013      	str	r3, [r2, #0]
 8006ade:	4b6d      	ldr	r3, [pc, #436]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a6c      	ldr	r2, [pc, #432]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae8:	6013      	str	r3, [r2, #0]
 8006aea:	e00b      	b.n	8006b04 <HAL_RCC_OscConfig+0xb0>
 8006aec:	4b69      	ldr	r3, [pc, #420]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a68      	ldr	r2, [pc, #416]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006af6:	6013      	str	r3, [r2, #0]
 8006af8:	4b66      	ldr	r3, [pc, #408]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a65      	ldr	r2, [pc, #404]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d013      	beq.n	8006b34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b0c:	f7fd fd9e 	bl	800464c <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b14:	f7fd fd9a 	bl	800464c <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b64      	cmp	r3, #100	; 0x64
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e207      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b26:	4b5b      	ldr	r3, [pc, #364]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0xc0>
 8006b32:	e014      	b.n	8006b5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b34:	f7fd fd8a 	bl	800464c <HAL_GetTick>
 8006b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b3a:	e008      	b.n	8006b4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006b3c:	f7fd fd86 	bl	800464c <HAL_GetTick>
 8006b40:	4602      	mov	r2, r0
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	1ad3      	subs	r3, r2, r3
 8006b46:	2b64      	cmp	r3, #100	; 0x64
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e1f3      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b4e:	4b51      	ldr	r3, [pc, #324]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1f0      	bne.n	8006b3c <HAL_RCC_OscConfig+0xe8>
 8006b5a:	e000      	b.n	8006b5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0302 	and.w	r3, r3, #2
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d063      	beq.n	8006c32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b6a:	4b4a      	ldr	r3, [pc, #296]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 030c 	and.w	r3, r3, #12
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00b      	beq.n	8006b8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b76:	4b47      	ldr	r3, [pc, #284]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d11c      	bne.n	8006bbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006b82:	4b44      	ldr	r3, [pc, #272]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d116      	bne.n	8006bbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b8e:	4b41      	ldr	r3, [pc, #260]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x152>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d001      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e1c7      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba6:	4b3b      	ldr	r3, [pc, #236]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	4937      	ldr	r1, [pc, #220]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bba:	e03a      	b.n	8006c32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d020      	beq.n	8006c06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc4:	4b34      	ldr	r3, [pc, #208]	; (8006c98 <HAL_RCC_OscConfig+0x244>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bca:	f7fd fd3f 	bl	800464c <HAL_GetTick>
 8006bce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd0:	e008      	b.n	8006be4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006bd2:	f7fd fd3b 	bl	800464c <HAL_GetTick>
 8006bd6:	4602      	mov	r2, r0
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	1ad3      	subs	r3, r2, r3
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d901      	bls.n	8006be4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006be0:	2303      	movs	r3, #3
 8006be2:	e1a8      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006be4:	4b2b      	ldr	r3, [pc, #172]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d0f0      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bf0:	4b28      	ldr	r3, [pc, #160]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	00db      	lsls	r3, r3, #3
 8006bfe:	4925      	ldr	r1, [pc, #148]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	600b      	str	r3, [r1, #0]
 8006c04:	e015      	b.n	8006c32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c06:	4b24      	ldr	r3, [pc, #144]	; (8006c98 <HAL_RCC_OscConfig+0x244>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0c:	f7fd fd1e 	bl	800464c <HAL_GetTick>
 8006c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c12:	e008      	b.n	8006c26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006c14:	f7fd fd1a 	bl	800464c <HAL_GetTick>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	1ad3      	subs	r3, r2, r3
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d901      	bls.n	8006c26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c22:	2303      	movs	r3, #3
 8006c24:	e187      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c26:	4b1b      	ldr	r3, [pc, #108]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f0      	bne.n	8006c14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0308 	and.w	r3, r3, #8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d036      	beq.n	8006cac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d016      	beq.n	8006c74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c46:	4b15      	ldr	r3, [pc, #84]	; (8006c9c <HAL_RCC_OscConfig+0x248>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c4c:	f7fd fcfe 	bl	800464c <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c54:	f7fd fcfa 	bl	800464c <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e167      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c66:	4b0b      	ldr	r3, [pc, #44]	; (8006c94 <HAL_RCC_OscConfig+0x240>)
 8006c68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d0f0      	beq.n	8006c54 <HAL_RCC_OscConfig+0x200>
 8006c72:	e01b      	b.n	8006cac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c74:	4b09      	ldr	r3, [pc, #36]	; (8006c9c <HAL_RCC_OscConfig+0x248>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c7a:	f7fd fce7 	bl	800464c <HAL_GetTick>
 8006c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006c80:	e00e      	b.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006c82:	f7fd fce3 	bl	800464c <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d907      	bls.n	8006ca0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e150      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
 8006c94:	40023800 	.word	0x40023800
 8006c98:	42470000 	.word	0x42470000
 8006c9c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ca0:	4b88      	ldr	r3, [pc, #544]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1ea      	bne.n	8006c82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8097 	beq.w	8006de8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cbe:	4b81      	ldr	r3, [pc, #516]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10f      	bne.n	8006cea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60bb      	str	r3, [r7, #8]
 8006cce:	4b7d      	ldr	r3, [pc, #500]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	4a7c      	ldr	r2, [pc, #496]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8006cda:	4b7a      	ldr	r3, [pc, #488]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ce2:	60bb      	str	r3, [r7, #8]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006cea:	4b77      	ldr	r3, [pc, #476]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d118      	bne.n	8006d28 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006cf6:	4b74      	ldr	r3, [pc, #464]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a73      	ldr	r2, [pc, #460]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d02:	f7fd fca3 	bl	800464c <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0a:	f7fd fc9f 	bl	800464c <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e10c      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d1c:	4b6a      	ldr	r3, [pc, #424]	; (8006ec8 <HAL_RCC_OscConfig+0x474>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0f0      	beq.n	8006d0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d106      	bne.n	8006d3e <HAL_RCC_OscConfig+0x2ea>
 8006d30:	4b64      	ldr	r3, [pc, #400]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d34:	4a63      	ldr	r2, [pc, #396]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d3c:	e01c      	b.n	8006d78 <HAL_RCC_OscConfig+0x324>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	2b05      	cmp	r3, #5
 8006d44:	d10c      	bne.n	8006d60 <HAL_RCC_OscConfig+0x30c>
 8006d46:	4b5f      	ldr	r3, [pc, #380]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	4a5e      	ldr	r2, [pc, #376]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d4c:	f043 0304 	orr.w	r3, r3, #4
 8006d50:	6713      	str	r3, [r2, #112]	; 0x70
 8006d52:	4b5c      	ldr	r3, [pc, #368]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d56:	4a5b      	ldr	r2, [pc, #364]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d58:	f043 0301 	orr.w	r3, r3, #1
 8006d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006d5e:	e00b      	b.n	8006d78 <HAL_RCC_OscConfig+0x324>
 8006d60:	4b58      	ldr	r3, [pc, #352]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d64:	4a57      	ldr	r2, [pc, #348]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d66:	f023 0301 	bic.w	r3, r3, #1
 8006d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8006d6c:	4b55      	ldr	r3, [pc, #340]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d70:	4a54      	ldr	r2, [pc, #336]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006d72:	f023 0304 	bic.w	r3, r3, #4
 8006d76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d015      	beq.n	8006dac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d80:	f7fd fc64 	bl	800464c <HAL_GetTick>
 8006d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d86:	e00a      	b.n	8006d9e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d88:	f7fd fc60 	bl	800464c <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d901      	bls.n	8006d9e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e0cb      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d9e:	4b49      	ldr	r3, [pc, #292]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d0ee      	beq.n	8006d88 <HAL_RCC_OscConfig+0x334>
 8006daa:	e014      	b.n	8006dd6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dac:	f7fd fc4e 	bl	800464c <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006db2:	e00a      	b.n	8006dca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006db4:	f7fd fc4a 	bl	800464c <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e0b5      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dca:	4b3e      	ldr	r3, [pc, #248]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d1ee      	bne.n	8006db4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dd6:	7dfb      	ldrb	r3, [r7, #23]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d105      	bne.n	8006de8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ddc:	4b39      	ldr	r3, [pc, #228]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006de0:	4a38      	ldr	r2, [pc, #224]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006de2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80a1 	beq.w	8006f34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006df2:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 030c 	and.w	r3, r3, #12
 8006dfa:	2b08      	cmp	r3, #8
 8006dfc:	d05c      	beq.n	8006eb8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	699b      	ldr	r3, [r3, #24]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d141      	bne.n	8006e8a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e06:	4b31      	ldr	r3, [pc, #196]	; (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e0c:	f7fd fc1e 	bl	800464c <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fd fc1a 	bl	800464c <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e087      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e26:	4b27      	ldr	r3, [pc, #156]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69da      	ldr	r2, [r3, #28]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	019b      	lsls	r3, r3, #6
 8006e42:	431a      	orrs	r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	431a      	orrs	r2, r3
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e54:	061b      	lsls	r3, r3, #24
 8006e56:	491b      	ldr	r1, [pc, #108]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e62:	f7fd fbf3 	bl	800464c <HAL_GetTick>
 8006e66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e68:	e008      	b.n	8006e7c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e6a:	f7fd fbef 	bl	800464c <HAL_GetTick>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	1ad3      	subs	r3, r2, r3
 8006e74:	2b02      	cmp	r3, #2
 8006e76:	d901      	bls.n	8006e7c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006e78:	2303      	movs	r3, #3
 8006e7a:	e05c      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e7c:	4b11      	ldr	r3, [pc, #68]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0f0      	beq.n	8006e6a <HAL_RCC_OscConfig+0x416>
 8006e88:	e054      	b.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e8a:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <HAL_RCC_OscConfig+0x478>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e90:	f7fd fbdc 	bl	800464c <HAL_GetTick>
 8006e94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e96:	e008      	b.n	8006eaa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e98:	f7fd fbd8 	bl	800464c <HAL_GetTick>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d901      	bls.n	8006eaa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e045      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eaa:	4b06      	ldr	r3, [pc, #24]	; (8006ec4 <HAL_RCC_OscConfig+0x470>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1f0      	bne.n	8006e98 <HAL_RCC_OscConfig+0x444>
 8006eb6:	e03d      	b.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d107      	bne.n	8006ed0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e038      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	40007000 	.word	0x40007000
 8006ecc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ed0:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <HAL_RCC_OscConfig+0x4ec>)
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d028      	beq.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d121      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d11a      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f00:	4013      	ands	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d111      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d107      	bne.n	8006f30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d001      	beq.n	8006f34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	40023800 	.word	0x40023800

08006f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d101      	bne.n	8006f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f54:	2301      	movs	r3, #1
 8006f56:	e0cc      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f58:	4b68      	ldr	r3, [pc, #416]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d90c      	bls.n	8006f80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f66:	4b65      	ldr	r3, [pc, #404]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f6e:	4b63      	ldr	r3, [pc, #396]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0307 	and.w	r3, r3, #7
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d001      	beq.n	8006f80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006f7c:	2301      	movs	r3, #1
 8006f7e:	e0b8      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d020      	beq.n	8006fce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 0304 	and.w	r3, r3, #4
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d005      	beq.n	8006fa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f98:	4b59      	ldr	r3, [pc, #356]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	4a58      	ldr	r2, [pc, #352]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006f9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006fa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0308 	and.w	r3, r3, #8
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d005      	beq.n	8006fbc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fb0:	4b53      	ldr	r3, [pc, #332]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	4a52      	ldr	r2, [pc, #328]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fb6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006fba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fbc:	4b50      	ldr	r3, [pc, #320]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	494d      	ldr	r1, [pc, #308]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d044      	beq.n	8007064 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d107      	bne.n	8006ff2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fe2:	4b47      	ldr	r3, [pc, #284]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d119      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e07f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d003      	beq.n	8007002 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d107      	bne.n	8007012 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007002:	4b3f      	ldr	r3, [pc, #252]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d109      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e06f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007012:	4b3b      	ldr	r3, [pc, #236]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d101      	bne.n	8007022 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e067      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007022:	4b37      	ldr	r3, [pc, #220]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f023 0203 	bic.w	r2, r3, #3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	4934      	ldr	r1, [pc, #208]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007030:	4313      	orrs	r3, r2
 8007032:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007034:	f7fd fb0a 	bl	800464c <HAL_GetTick>
 8007038:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800703a:	e00a      	b.n	8007052 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800703c:	f7fd fb06 	bl	800464c <HAL_GetTick>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f241 3288 	movw	r2, #5000	; 0x1388
 800704a:	4293      	cmp	r3, r2
 800704c:	d901      	bls.n	8007052 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800704e:	2303      	movs	r3, #3
 8007050:	e04f      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007052:	4b2b      	ldr	r3, [pc, #172]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	f003 020c 	and.w	r2, r3, #12
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	429a      	cmp	r2, r3
 8007062:	d1eb      	bne.n	800703c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007064:	4b25      	ldr	r3, [pc, #148]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	429a      	cmp	r2, r3
 8007070:	d20c      	bcs.n	800708c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007072:	4b22      	ldr	r3, [pc, #136]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	b2d2      	uxtb	r2, r2
 8007078:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800707a:	4b20      	ldr	r3, [pc, #128]	; (80070fc <HAL_RCC_ClockConfig+0x1b8>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0307 	and.w	r3, r3, #7
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d001      	beq.n	800708c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e032      	b.n	80070f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007098:	4b19      	ldr	r3, [pc, #100]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	4916      	ldr	r1, [pc, #88]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070a6:	4313      	orrs	r3, r2
 80070a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0308 	and.w	r3, r3, #8
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d009      	beq.n	80070ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070b6:	4b12      	ldr	r3, [pc, #72]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070b8:	689b      	ldr	r3, [r3, #8]
 80070ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	00db      	lsls	r3, r3, #3
 80070c4:	490e      	ldr	r1, [pc, #56]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80070ca:	f000 f821 	bl	8007110 <HAL_RCC_GetSysClockFreq>
 80070ce:	4602      	mov	r2, r0
 80070d0:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	091b      	lsrs	r3, r3, #4
 80070d6:	f003 030f 	and.w	r3, r3, #15
 80070da:	490a      	ldr	r1, [pc, #40]	; (8007104 <HAL_RCC_ClockConfig+0x1c0>)
 80070dc:	5ccb      	ldrb	r3, [r1, r3]
 80070de:	fa22 f303 	lsr.w	r3, r2, r3
 80070e2:	4a09      	ldr	r2, [pc, #36]	; (8007108 <HAL_RCC_ClockConfig+0x1c4>)
 80070e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80070e6:	4b09      	ldr	r3, [pc, #36]	; (800710c <HAL_RCC_ClockConfig+0x1c8>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fc fefa 	bl	8003ee4 <HAL_InitTick>

  return HAL_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3710      	adds	r7, #16
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	40023c00 	.word	0x40023c00
 8007100:	40023800 	.word	0x40023800
 8007104:	0802dc8c 	.word	0x0802dc8c
 8007108:	20000008 	.word	0x20000008
 800710c:	2000000c 	.word	0x2000000c

08007110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007114:	b090      	sub	sp, #64	; 0x40
 8007116:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007118:	2300      	movs	r3, #0
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
 800711c:	2300      	movs	r3, #0
 800711e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007120:	2300      	movs	r3, #0
 8007122:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007128:	4b59      	ldr	r3, [pc, #356]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f003 030c 	and.w	r3, r3, #12
 8007130:	2b08      	cmp	r3, #8
 8007132:	d00d      	beq.n	8007150 <HAL_RCC_GetSysClockFreq+0x40>
 8007134:	2b08      	cmp	r3, #8
 8007136:	f200 80a1 	bhi.w	800727c <HAL_RCC_GetSysClockFreq+0x16c>
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <HAL_RCC_GetSysClockFreq+0x34>
 800713e:	2b04      	cmp	r3, #4
 8007140:	d003      	beq.n	800714a <HAL_RCC_GetSysClockFreq+0x3a>
 8007142:	e09b      	b.n	800727c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007144:	4b53      	ldr	r3, [pc, #332]	; (8007294 <HAL_RCC_GetSysClockFreq+0x184>)
 8007146:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007148:	e09b      	b.n	8007282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800714a:	4b53      	ldr	r3, [pc, #332]	; (8007298 <HAL_RCC_GetSysClockFreq+0x188>)
 800714c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800714e:	e098      	b.n	8007282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007150:	4b4f      	ldr	r3, [pc, #316]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007158:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800715a:	4b4d      	ldr	r3, [pc, #308]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d028      	beq.n	80071b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007166:	4b4a      	ldr	r3, [pc, #296]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	099b      	lsrs	r3, r3, #6
 800716c:	2200      	movs	r2, #0
 800716e:	623b      	str	r3, [r7, #32]
 8007170:	627a      	str	r2, [r7, #36]	; 0x24
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007178:	2100      	movs	r1, #0
 800717a:	4b47      	ldr	r3, [pc, #284]	; (8007298 <HAL_RCC_GetSysClockFreq+0x188>)
 800717c:	fb03 f201 	mul.w	r2, r3, r1
 8007180:	2300      	movs	r3, #0
 8007182:	fb00 f303 	mul.w	r3, r0, r3
 8007186:	4413      	add	r3, r2
 8007188:	4a43      	ldr	r2, [pc, #268]	; (8007298 <HAL_RCC_GetSysClockFreq+0x188>)
 800718a:	fba0 1202 	umull	r1, r2, r0, r2
 800718e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007190:	460a      	mov	r2, r1
 8007192:	62ba      	str	r2, [r7, #40]	; 0x28
 8007194:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007196:	4413      	add	r3, r2
 8007198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800719a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719c:	2200      	movs	r2, #0
 800719e:	61bb      	str	r3, [r7, #24]
 80071a0:	61fa      	str	r2, [r7, #28]
 80071a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80071aa:	f7f9 fd5d 	bl	8000c68 <__aeabi_uldivmod>
 80071ae:	4602      	mov	r2, r0
 80071b0:	460b      	mov	r3, r1
 80071b2:	4613      	mov	r3, r2
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071b6:	e053      	b.n	8007260 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071b8:	4b35      	ldr	r3, [pc, #212]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 80071ba:	685b      	ldr	r3, [r3, #4]
 80071bc:	099b      	lsrs	r3, r3, #6
 80071be:	2200      	movs	r2, #0
 80071c0:	613b      	str	r3, [r7, #16]
 80071c2:	617a      	str	r2, [r7, #20]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80071ca:	f04f 0b00 	mov.w	fp, #0
 80071ce:	4652      	mov	r2, sl
 80071d0:	465b      	mov	r3, fp
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f04f 0100 	mov.w	r1, #0
 80071da:	0159      	lsls	r1, r3, #5
 80071dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071e0:	0150      	lsls	r0, r2, #5
 80071e2:	4602      	mov	r2, r0
 80071e4:	460b      	mov	r3, r1
 80071e6:	ebb2 080a 	subs.w	r8, r2, sl
 80071ea:	eb63 090b 	sbc.w	r9, r3, fp
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80071fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80071fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007202:	ebb2 0408 	subs.w	r4, r2, r8
 8007206:	eb63 0509 	sbc.w	r5, r3, r9
 800720a:	f04f 0200 	mov.w	r2, #0
 800720e:	f04f 0300 	mov.w	r3, #0
 8007212:	00eb      	lsls	r3, r5, #3
 8007214:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007218:	00e2      	lsls	r2, r4, #3
 800721a:	4614      	mov	r4, r2
 800721c:	461d      	mov	r5, r3
 800721e:	eb14 030a 	adds.w	r3, r4, sl
 8007222:	603b      	str	r3, [r7, #0]
 8007224:	eb45 030b 	adc.w	r3, r5, fp
 8007228:	607b      	str	r3, [r7, #4]
 800722a:	f04f 0200 	mov.w	r2, #0
 800722e:	f04f 0300 	mov.w	r3, #0
 8007232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007236:	4629      	mov	r1, r5
 8007238:	028b      	lsls	r3, r1, #10
 800723a:	4621      	mov	r1, r4
 800723c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007240:	4621      	mov	r1, r4
 8007242:	028a      	lsls	r2, r1, #10
 8007244:	4610      	mov	r0, r2
 8007246:	4619      	mov	r1, r3
 8007248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800724a:	2200      	movs	r2, #0
 800724c:	60bb      	str	r3, [r7, #8]
 800724e:	60fa      	str	r2, [r7, #12]
 8007250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007254:	f7f9 fd08 	bl	8000c68 <__aeabi_uldivmod>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4613      	mov	r3, r2
 800725e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007260:	4b0b      	ldr	r3, [pc, #44]	; (8007290 <HAL_RCC_GetSysClockFreq+0x180>)
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	0c1b      	lsrs	r3, r3, #16
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	3301      	adds	r3, #1
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007270:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007274:	fbb2 f3f3 	udiv	r3, r2, r3
 8007278:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800727a:	e002      	b.n	8007282 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800727c:	4b05      	ldr	r3, [pc, #20]	; (8007294 <HAL_RCC_GetSysClockFreq+0x184>)
 800727e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007284:	4618      	mov	r0, r3
 8007286:	3740      	adds	r7, #64	; 0x40
 8007288:	46bd      	mov	sp, r7
 800728a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800728e:	bf00      	nop
 8007290:	40023800 	.word	0x40023800
 8007294:	00f42400 	.word	0x00f42400
 8007298:	017d7840 	.word	0x017d7840

0800729c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800729c:	b480      	push	{r7}
 800729e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072a0:	4b03      	ldr	r3, [pc, #12]	; (80072b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80072a2:	681b      	ldr	r3, [r3, #0]
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	20000008 	.word	0x20000008

080072b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80072b8:	f7ff fff0 	bl	800729c <HAL_RCC_GetHCLKFreq>
 80072bc:	4602      	mov	r2, r0
 80072be:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	0a9b      	lsrs	r3, r3, #10
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	4903      	ldr	r1, [pc, #12]	; (80072d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80072ca:	5ccb      	ldrb	r3, [r1, r3]
 80072cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	40023800 	.word	0x40023800
 80072d8:	0802dc9c 	.word	0x0802dc9c

080072dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80072e0:	f7ff ffdc 	bl	800729c <HAL_RCC_GetHCLKFreq>
 80072e4:	4602      	mov	r2, r0
 80072e6:	4b05      	ldr	r3, [pc, #20]	; (80072fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	0b5b      	lsrs	r3, r3, #13
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	4903      	ldr	r1, [pc, #12]	; (8007300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072f2:	5ccb      	ldrb	r3, [r1, r3]
 80072f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	bd80      	pop	{r7, pc}
 80072fc:	40023800 	.word	0x40023800
 8007300:	0802dc9c 	.word	0x0802dc9c

08007304 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
 800730c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	220f      	movs	r2, #15
 8007312:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007314:	4b12      	ldr	r3, [pc, #72]	; (8007360 <HAL_RCC_GetClockConfig+0x5c>)
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f003 0203 	and.w	r2, r3, #3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007320:	4b0f      	ldr	r3, [pc, #60]	; (8007360 <HAL_RCC_GetClockConfig+0x5c>)
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800732c:	4b0c      	ldr	r3, [pc, #48]	; (8007360 <HAL_RCC_GetClockConfig+0x5c>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007338:	4b09      	ldr	r3, [pc, #36]	; (8007360 <HAL_RCC_GetClockConfig+0x5c>)
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	08db      	lsrs	r3, r3, #3
 800733e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007346:	4b07      	ldr	r3, [pc, #28]	; (8007364 <HAL_RCC_GetClockConfig+0x60>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f003 0207 	and.w	r2, r3, #7
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	601a      	str	r2, [r3, #0]
}
 8007352:	bf00      	nop
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	40023800 	.word	0x40023800
 8007364:	40023c00 	.word	0x40023c00

08007368 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d105      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800738c:	2b00      	cmp	r3, #0
 800738e:	d035      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007390:	4b62      	ldr	r3, [pc, #392]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007392:	2200      	movs	r2, #0
 8007394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007396:	f7fd f959 	bl	800464c <HAL_GetTick>
 800739a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800739c:	e008      	b.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800739e:	f7fd f955 	bl	800464c <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d901      	bls.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	e0b0      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80073b0:	4b5b      	ldr	r3, [pc, #364]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1f0      	bne.n	800739e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	019a      	lsls	r2, r3, #6
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	071b      	lsls	r3, r3, #28
 80073c8:	4955      	ldr	r1, [pc, #340]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073ca:	4313      	orrs	r3, r2
 80073cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80073d0:	4b52      	ldr	r3, [pc, #328]	; (800751c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80073d2:	2201      	movs	r2, #1
 80073d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80073d6:	f7fd f939 	bl	800464c <HAL_GetTick>
 80073da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073dc:	e008      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80073de:	f7fd f935 	bl	800464c <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d901      	bls.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e090      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80073f0:	4b4b      	ldr	r3, [pc, #300]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0f0      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f003 0302 	and.w	r3, r3, #2
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8083 	beq.w	8007510 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	4b44      	ldr	r3, [pc, #272]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	4a43      	ldr	r2, [pc, #268]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007418:	6413      	str	r3, [r2, #64]	; 0x40
 800741a:	4b41      	ldr	r3, [pc, #260]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007422:	60fb      	str	r3, [r7, #12]
 8007424:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007426:	4b3f      	ldr	r3, [pc, #252]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a3e      	ldr	r2, [pc, #248]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800742c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007430:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007432:	f7fd f90b 	bl	800464c <HAL_GetTick>
 8007436:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007438:	e008      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800743a:	f7fd f907 	bl	800464c <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b02      	cmp	r3, #2
 8007446:	d901      	bls.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007448:	2303      	movs	r3, #3
 800744a:	e062      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800744c:	4b35      	ldr	r3, [pc, #212]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007454:	2b00      	cmp	r3, #0
 8007456:	d0f0      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007458:	4b31      	ldr	r3, [pc, #196]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800745a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007460:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d02f      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007470:	693a      	ldr	r2, [r7, #16]
 8007472:	429a      	cmp	r2, r3
 8007474:	d028      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007476:	4b2a      	ldr	r3, [pc, #168]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800747a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800747e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007480:	4b29      	ldr	r3, [pc, #164]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007482:	2201      	movs	r2, #1
 8007484:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007486:	4b28      	ldr	r3, [pc, #160]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007488:	2200      	movs	r2, #0
 800748a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800748c:	4a24      	ldr	r2, [pc, #144]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007492:	4b23      	ldr	r3, [pc, #140]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b01      	cmp	r3, #1
 800749c:	d114      	bne.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800749e:	f7fd f8d5 	bl	800464c <HAL_GetTick>
 80074a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074a4:	e00a      	b.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074a6:	f7fd f8d1 	bl	800464c <HAL_GetTick>
 80074aa:	4602      	mov	r2, r0
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80074b4:	4293      	cmp	r3, r2
 80074b6:	d901      	bls.n	80074bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80074b8:	2303      	movs	r3, #3
 80074ba:	e02a      	b.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074bc:	4b18      	ldr	r3, [pc, #96]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074c0:	f003 0302 	and.w	r3, r3, #2
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d0ee      	beq.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074d4:	d10d      	bne.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80074d6:	4b12      	ldr	r3, [pc, #72]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80074e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074ea:	490d      	ldr	r1, [pc, #52]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	608b      	str	r3, [r1, #8]
 80074f0:	e005      	b.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80074f2:	4b0b      	ldr	r3, [pc, #44]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	4a0a      	ldr	r2, [pc, #40]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80074fc:	6093      	str	r3, [r2, #8]
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007500:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	68db      	ldr	r3, [r3, #12]
 8007506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800750a:	4905      	ldr	r1, [pc, #20]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800750c:	4313      	orrs	r3, r2
 800750e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3718      	adds	r7, #24
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	42470068 	.word	0x42470068
 8007520:	40023800 	.word	0x40023800
 8007524:	40007000 	.word	0x40007000
 8007528:	42470e40 	.word	0x42470e40

0800752c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e073      	b.n	800762a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	7f5b      	ldrb	r3, [r3, #29]
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	d105      	bne.n	8007558 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2200      	movs	r2, #0
 8007550:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fc f9a8 	bl	80038a8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	f003 0310 	and.w	r3, r3, #16
 8007568:	2b10      	cmp	r3, #16
 800756a:	d055      	beq.n	8007618 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	22ca      	movs	r2, #202	; 0xca
 8007572:	625a      	str	r2, [r3, #36]	; 0x24
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	2253      	movs	r2, #83	; 0x53
 800757a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800757c:	6878      	ldr	r0, [r7, #4]
 800757e:	f000 fa49 	bl	8007a14 <RTC_EnterInitMode>
 8007582:	4603      	mov	r3, r0
 8007584:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007586:	7bfb      	ldrb	r3, [r7, #15]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d12c      	bne.n	80075e6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	6812      	ldr	r2, [r2, #0]
 8007596:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800759a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800759e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	6899      	ldr	r1, [r3, #8]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	691b      	ldr	r3, [r3, #16]
 80075ae:	431a      	orrs	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	695b      	ldr	r3, [r3, #20]
 80075b4:	431a      	orrs	r2, r3
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	430a      	orrs	r2, r1
 80075bc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	68d2      	ldr	r2, [r2, #12]
 80075c6:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	6919      	ldr	r1, [r3, #16]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	041a      	lsls	r2, r3, #16
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	430a      	orrs	r2, r1
 80075da:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 fa50 	bl	8007a82 <RTC_ExitInitMode>
 80075e2:	4603      	mov	r3, r0
 80075e4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d110      	bne.n	800760e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80075fa:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	430a      	orrs	r2, r1
 800760c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	22ff      	movs	r2, #255	; 0xff
 8007614:	625a      	str	r2, [r3, #36]	; 0x24
 8007616:	e001      	b.n	800761c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007628:	7bfb      	ldrb	r3, [r7, #15]
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007632:	b590      	push	{r4, r7, lr}
 8007634:	b087      	sub	sp, #28
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	7f1b      	ldrb	r3, [r3, #28]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d101      	bne.n	800764e <HAL_RTC_SetTime+0x1c>
 800764a:	2302      	movs	r3, #2
 800764c:	e087      	b.n	800775e <HAL_RTC_SetTime+0x12c>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2202      	movs	r2, #2
 8007658:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d126      	bne.n	80076ae <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	689b      	ldr	r3, [r3, #8]
 8007666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	2200      	movs	r2, #0
 8007672:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f000 fa27 	bl	8007acc <RTC_ByteToBcd2>
 800767e:	4603      	mov	r3, r0
 8007680:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	785b      	ldrb	r3, [r3, #1]
 8007686:	4618      	mov	r0, r3
 8007688:	f000 fa20 	bl	8007acc <RTC_ByteToBcd2>
 800768c:	4603      	mov	r3, r0
 800768e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007690:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	789b      	ldrb	r3, [r3, #2]
 8007696:	4618      	mov	r0, r3
 8007698:	f000 fa18 	bl	8007acc <RTC_ByteToBcd2>
 800769c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800769e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	78db      	ldrb	r3, [r3, #3]
 80076a6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80076a8:	4313      	orrs	r3, r2
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	e018      	b.n	80076e0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d102      	bne.n	80076c2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	2200      	movs	r2, #0
 80076c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	785b      	ldrb	r3, [r3, #1]
 80076cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80076ce:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80076d0:	68ba      	ldr	r2, [r7, #8]
 80076d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80076d4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	78db      	ldrb	r3, [r3, #3]
 80076da:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80076dc:	4313      	orrs	r3, r2
 80076de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	22ca      	movs	r2, #202	; 0xca
 80076e6:	625a      	str	r2, [r3, #36]	; 0x24
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2253      	movs	r2, #83	; 0x53
 80076ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f000 f98f 	bl	8007a14 <RTC_EnterInitMode>
 80076f6:	4603      	mov	r3, r0
 80076f8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80076fa:	7cfb      	ldrb	r3, [r7, #19]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d120      	bne.n	8007742 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800770a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800770e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	689a      	ldr	r2, [r3, #8]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800771e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6899      	ldr	r1, [r3, #8]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	68da      	ldr	r2, [r3, #12]
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	431a      	orrs	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	430a      	orrs	r2, r1
 8007736:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007738:	68f8      	ldr	r0, [r7, #12]
 800773a:	f000 f9a2 	bl	8007a82 <RTC_ExitInitMode>
 800773e:	4603      	mov	r3, r0
 8007740:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007742:	7cfb      	ldrb	r3, [r7, #19]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d102      	bne.n	800774e <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2201      	movs	r2, #1
 800774c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	22ff      	movs	r2, #255	; 0xff
 8007754:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	771a      	strb	r2, [r3, #28]

  return status;
 800775c:	7cfb      	ldrb	r3, [r7, #19]
}
 800775e:	4618      	mov	r0, r3
 8007760:	371c      	adds	r7, #28
 8007762:	46bd      	mov	sp, r7
 8007764:	bd90      	pop	{r4, r7, pc}

08007766 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b086      	sub	sp, #24
 800776a:	af00      	add	r7, sp, #0
 800776c:	60f8      	str	r0, [r7, #12]
 800776e:	60b9      	str	r1, [r7, #8]
 8007770:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	691b      	ldr	r3, [r3, #16]
 8007786:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007798:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800779c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	0c1b      	lsrs	r3, r3, #16
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	0a1b      	lsrs	r3, r3, #8
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077c6:	b2da      	uxtb	r2, r3
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	0d9b      	lsrs	r3, r3, #22
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	b2da      	uxtb	r2, r3
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d11a      	bne.n	8007818 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	4618      	mov	r0, r3
 80077e8:	f000 f98e 	bl	8007b08 <RTC_Bcd2ToByte>
 80077ec:	4603      	mov	r3, r0
 80077ee:	461a      	mov	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	785b      	ldrb	r3, [r3, #1]
 80077f8:	4618      	mov	r0, r3
 80077fa:	f000 f985 	bl	8007b08 <RTC_Bcd2ToByte>
 80077fe:	4603      	mov	r3, r0
 8007800:	461a      	mov	r2, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	789b      	ldrb	r3, [r3, #2]
 800780a:	4618      	mov	r0, r3
 800780c:	f000 f97c 	bl	8007b08 <RTC_Bcd2ToByte>
 8007810:	4603      	mov	r3, r0
 8007812:	461a      	mov	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3718      	adds	r7, #24
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007822:	b590      	push	{r4, r7, lr}
 8007824:	b087      	sub	sp, #28
 8007826:	af00      	add	r7, sp, #0
 8007828:	60f8      	str	r0, [r7, #12]
 800782a:	60b9      	str	r1, [r7, #8]
 800782c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800782e:	2300      	movs	r3, #0
 8007830:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	7f1b      	ldrb	r3, [r3, #28]
 8007836:	2b01      	cmp	r3, #1
 8007838:	d101      	bne.n	800783e <HAL_RTC_SetDate+0x1c>
 800783a:	2302      	movs	r3, #2
 800783c:	e071      	b.n	8007922 <HAL_RTC_SetDate+0x100>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2201      	movs	r2, #1
 8007842:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2202      	movs	r2, #2
 8007848:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10e      	bne.n	800786e <HAL_RTC_SetDate+0x4c>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	785b      	ldrb	r3, [r3, #1]
 8007854:	f003 0310 	and.w	r3, r3, #16
 8007858:	2b00      	cmp	r3, #0
 800785a:	d008      	beq.n	800786e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	785b      	ldrb	r3, [r3, #1]
 8007860:	f023 0310 	bic.w	r3, r3, #16
 8007864:	b2db      	uxtb	r3, r3
 8007866:	330a      	adds	r3, #10
 8007868:	b2da      	uxtb	r2, r3
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d11c      	bne.n	80078ae <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	78db      	ldrb	r3, [r3, #3]
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f927 	bl	8007acc <RTC_ByteToBcd2>
 800787e:	4603      	mov	r3, r0
 8007880:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	785b      	ldrb	r3, [r3, #1]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 f920 	bl	8007acc <RTC_ByteToBcd2>
 800788c:	4603      	mov	r3, r0
 800788e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007890:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	789b      	ldrb	r3, [r3, #2]
 8007896:	4618      	mov	r0, r3
 8007898:	f000 f918 	bl	8007acc <RTC_ByteToBcd2>
 800789c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800789e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80078a8:	4313      	orrs	r3, r2
 80078aa:	617b      	str	r3, [r7, #20]
 80078ac:	e00e      	b.n	80078cc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	78db      	ldrb	r3, [r3, #3]
 80078b2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	785b      	ldrb	r3, [r3, #1]
 80078b8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80078ba:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80078c0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	781b      	ldrb	r3, [r3, #0]
 80078c6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80078c8:	4313      	orrs	r3, r2
 80078ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	22ca      	movs	r2, #202	; 0xca
 80078d2:	625a      	str	r2, [r3, #36]	; 0x24
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2253      	movs	r2, #83	; 0x53
 80078da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f899 	bl	8007a14 <RTC_EnterInitMode>
 80078e2:	4603      	mov	r3, r0
 80078e4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80078e6:	7cfb      	ldrb	r3, [r7, #19]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10c      	bne.n	8007906 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681a      	ldr	r2, [r3, #0]
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80078f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80078fa:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f000 f8c0 	bl	8007a82 <RTC_ExitInitMode>
 8007902:	4603      	mov	r3, r0
 8007904:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8007906:	7cfb      	ldrb	r3, [r7, #19]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d102      	bne.n	8007912 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2201      	movs	r2, #1
 8007910:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	22ff      	movs	r2, #255	; 0xff
 8007918:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	771a      	strb	r2, [r3, #28]

  return status;
 8007920:	7cfb      	ldrb	r3, [r7, #19]
}
 8007922:	4618      	mov	r0, r3
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	bd90      	pop	{r4, r7, pc}

0800792a <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007936:	2300      	movs	r3, #0
 8007938:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007944:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007948:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	0c1b      	lsrs	r3, r3, #16
 800794e:	b2da      	uxtb	r2, r3
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	0a1b      	lsrs	r3, r3, #8
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f003 031f 	and.w	r3, r3, #31
 800795e:	b2da      	uxtb	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	b2db      	uxtb	r3, r3
 8007968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800796c:	b2da      	uxtb	r2, r3
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	0b5b      	lsrs	r3, r3, #13
 8007976:	b2db      	uxtb	r3, r3
 8007978:	f003 0307 	and.w	r3, r3, #7
 800797c:	b2da      	uxtb	r2, r3
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d11a      	bne.n	80079be <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	78db      	ldrb	r3, [r3, #3]
 800798c:	4618      	mov	r0, r3
 800798e:	f000 f8bb 	bl	8007b08 <RTC_Bcd2ToByte>
 8007992:	4603      	mov	r3, r0
 8007994:	461a      	mov	r2, r3
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	785b      	ldrb	r3, [r3, #1]
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f8b2 	bl	8007b08 <RTC_Bcd2ToByte>
 80079a4:	4603      	mov	r3, r0
 80079a6:	461a      	mov	r2, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	789b      	ldrb	r3, [r3, #2]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f000 f8a9 	bl	8007b08 <RTC_Bcd2ToByte>
 80079b6:	4603      	mov	r3, r0
 80079b8:	461a      	mov	r2, r3
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a0d      	ldr	r2, [pc, #52]	; (8007a10 <HAL_RTC_WaitForSynchro+0x48>)
 80079da:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079dc:	f7fc fe36 	bl	800464c <HAL_GetTick>
 80079e0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80079e2:	e009      	b.n	80079f8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80079e4:	f7fc fe32 	bl	800464c <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079f2:	d901      	bls.n	80079f8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e007      	b.n	8007a08 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	f003 0320 	and.w	r3, r3, #32
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0ee      	beq.n	80079e4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8007a06:	2300      	movs	r3, #0
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}
 8007a10:	00017f5f 	.word	0x00017f5f

08007a14 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b084      	sub	sp, #16
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d122      	bne.n	8007a78 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68da      	ldr	r2, [r3, #12]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a40:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007a42:	f7fc fe03 	bl	800464c <HAL_GetTick>
 8007a46:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007a48:	e00c      	b.n	8007a64 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007a4a:	f7fc fdff 	bl	800464c <HAL_GetTick>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	1ad3      	subs	r3, r2, r3
 8007a54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a58:	d904      	bls.n	8007a64 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2204      	movs	r2, #4
 8007a5e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d102      	bne.n	8007a78 <RTC_EnterInitMode+0x64>
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d1e8      	bne.n	8007a4a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68da      	ldr	r2, [r3, #12]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a9c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10a      	bne.n	8007ac2 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff ff8b 	bl	80079c8 <HAL_RTC_WaitForSynchro>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d004      	beq.n	8007ac2 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2204      	movs	r2, #4
 8007abc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b085      	sub	sp, #20
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	4603      	mov	r3, r0
 8007ad4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8007ada:	e005      	b.n	8007ae8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	3b0a      	subs	r3, #10
 8007ae6:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	2b09      	cmp	r3, #9
 8007aec:	d8f6      	bhi.n	8007adc <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	b2db      	uxtb	r3, r3
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	b2da      	uxtb	r2, r3
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	4313      	orrs	r3, r2
 8007afa:	b2db      	uxtb	r3, r3
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3714      	adds	r7, #20
 8007b00:	46bd      	mov	sp, r7
 8007b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b06:	4770      	bx	lr

08007b08 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8007b16:	79fb      	ldrb	r3, [r7, #7]
 8007b18:	091b      	lsrs	r3, r3, #4
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	005b      	lsls	r3, r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	b2da      	uxtb	r2, r3
 8007b2c:	79fb      	ldrb	r3, [r7, #7]
 8007b2e:	f003 030f 	and.w	r3, r3, #15
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	4413      	add	r3, r2
 8007b36:	b2db      	uxtb	r3, r3
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3714      	adds	r7, #20
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr

08007b44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d101      	bne.n	8007b56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007b52:	2301      	movs	r3, #1
 8007b54:	e07b      	b.n	8007c4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d108      	bne.n	8007b70 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007b66:	d009      	beq.n	8007b7c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	61da      	str	r2, [r3, #28]
 8007b6e:	e005      	b.n	8007b7c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d106      	bne.n	8007b9c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f7fc f910 	bl	8003dbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bb2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bce:	431a      	orrs	r2, r3
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f003 0301 	and.w	r3, r3, #1
 8007be2:	431a      	orrs	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bec:	431a      	orrs	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	69db      	ldr	r3, [r3, #28]
 8007bf2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c00:	ea42 0103 	orr.w	r1, r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	430a      	orrs	r2, r1
 8007c12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	0c1b      	lsrs	r3, r3, #16
 8007c1a:	f003 0104 	and.w	r1, r3, #4
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	f003 0210 	and.w	r2, r3, #16
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69da      	ldr	r2, [r3, #28]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2201      	movs	r2, #1
 8007c48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3708      	adds	r7, #8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c56:	b580      	push	{r7, lr}
 8007c58:	b088      	sub	sp, #32
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	60f8      	str	r0, [r7, #12]
 8007c5e:	60b9      	str	r1, [r7, #8]
 8007c60:	603b      	str	r3, [r7, #0]
 8007c62:	4613      	mov	r3, r2
 8007c64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007c66:	2300      	movs	r3, #0
 8007c68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_SPI_Transmit+0x22>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e12d      	b.n	8007ed4 <HAL_SPI_Transmit+0x27e>
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007c80:	f7fc fce4 	bl	800464c <HAL_GetTick>
 8007c84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007c86:	88fb      	ldrh	r3, [r7, #6]
 8007c88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d002      	beq.n	8007c9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007c96:	2302      	movs	r3, #2
 8007c98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007c9a:	e116      	b.n	8007eca <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d002      	beq.n	8007ca8 <HAL_SPI_Transmit+0x52>
 8007ca2:	88fb      	ldrh	r3, [r7, #6]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007cac:	e10d      	b.n	8007eca <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2203      	movs	r2, #3
 8007cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	88fa      	ldrh	r2, [r7, #6]
 8007cc6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	88fa      	ldrh	r2, [r7, #6]
 8007ccc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007cf4:	d10f      	bne.n	8007d16 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	681a      	ldr	r2, [r3, #0]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681a      	ldr	r2, [r3, #0]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d20:	2b40      	cmp	r3, #64	; 0x40
 8007d22:	d007      	beq.n	8007d34 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	68db      	ldr	r3, [r3, #12]
 8007d38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d3c:	d14f      	bne.n	8007dde <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d002      	beq.n	8007d4c <HAL_SPI_Transmit+0xf6>
 8007d46:	8afb      	ldrh	r3, [r7, #22]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d142      	bne.n	8007dd2 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d50:	881a      	ldrh	r2, [r3, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d5c:	1c9a      	adds	r2, r3, #2
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	b29a      	uxth	r2, r3
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007d70:	e02f      	b.n	8007dd2 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	f003 0302 	and.w	r3, r3, #2
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d112      	bne.n	8007da6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d84:	881a      	ldrh	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d90:	1c9a      	adds	r2, r3, #2
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	3b01      	subs	r3, #1
 8007d9e:	b29a      	uxth	r2, r3
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	86da      	strh	r2, [r3, #54]	; 0x36
 8007da4:	e015      	b.n	8007dd2 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007da6:	f7fc fc51 	bl	800464c <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	683a      	ldr	r2, [r7, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d803      	bhi.n	8007dbe <HAL_SPI_Transmit+0x168>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007dbc:	d102      	bne.n	8007dc4 <HAL_SPI_Transmit+0x16e>
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d106      	bne.n	8007dd2 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007dd0:	e07b      	b.n	8007eca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1ca      	bne.n	8007d72 <HAL_SPI_Transmit+0x11c>
 8007ddc:	e050      	b.n	8007e80 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d002      	beq.n	8007dec <HAL_SPI_Transmit+0x196>
 8007de6:	8afb      	ldrh	r3, [r7, #22]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d144      	bne.n	8007e76 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	330c      	adds	r3, #12
 8007df6:	7812      	ldrb	r2, [r2, #0]
 8007df8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dfe:	1c5a      	adds	r2, r3, #1
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	3b01      	subs	r3, #1
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007e12:	e030      	b.n	8007e76 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d113      	bne.n	8007e4a <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	330c      	adds	r3, #12
 8007e2c:	7812      	ldrb	r2, [r2, #0]
 8007e2e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e34:	1c5a      	adds	r2, r3, #1
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	3b01      	subs	r3, #1
 8007e42:	b29a      	uxth	r2, r3
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	86da      	strh	r2, [r3, #54]	; 0x36
 8007e48:	e015      	b.n	8007e76 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007e4a:	f7fc fbff 	bl	800464c <HAL_GetTick>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	683a      	ldr	r2, [r7, #0]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d803      	bhi.n	8007e62 <HAL_SPI_Transmit+0x20c>
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e60:	d102      	bne.n	8007e68 <HAL_SPI_Transmit+0x212>
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d106      	bne.n	8007e76 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8007e74:	e029      	b.n	8007eca <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1c9      	bne.n	8007e14 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	6839      	ldr	r1, [r7, #0]
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 fbdf 	bl	8008648 <SPI_EndRxTxTransaction>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	2220      	movs	r2, #32
 8007e94:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d10a      	bne.n	8007eb4 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	613b      	str	r3, [r7, #16]
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68db      	ldr	r3, [r3, #12]
 8007ea8:	613b      	str	r3, [r7, #16]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	613b      	str	r3, [r7, #16]
 8007eb2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d002      	beq.n	8007ec2 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	77fb      	strb	r3, [r7, #31]
 8007ec0:	e003      	b.n	8007eca <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007ed2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	3720      	adds	r7, #32
 8007ed8:	46bd      	mov	sp, r7
 8007eda:	bd80      	pop	{r7, pc}

08007edc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b088      	sub	sp, #32
 8007ee0:	af02      	add	r7, sp, #8
 8007ee2:	60f8      	str	r0, [r7, #12]
 8007ee4:	60b9      	str	r1, [r7, #8]
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	4613      	mov	r3, r2
 8007eea:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007eec:	2300      	movs	r3, #0
 8007eee:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d002      	beq.n	8007f02 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8007efc:	2302      	movs	r3, #2
 8007efe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f00:	e0fb      	b.n	80080fa <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007f0a:	d112      	bne.n	8007f32 <HAL_SPI_Receive+0x56>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10e      	bne.n	8007f32 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2204      	movs	r2, #4
 8007f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007f1c:	88fa      	ldrh	r2, [r7, #6]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	9300      	str	r3, [sp, #0]
 8007f22:	4613      	mov	r3, r2
 8007f24:	68ba      	ldr	r2, [r7, #8]
 8007f26:	68b9      	ldr	r1, [r7, #8]
 8007f28:	68f8      	ldr	r0, [r7, #12]
 8007f2a:	f000 f8ef 	bl	800810c <HAL_SPI_TransmitReceive>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	e0e8      	b.n	8008104 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d101      	bne.n	8007f40 <HAL_SPI_Receive+0x64>
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	e0e1      	b.n	8008104 <HAL_SPI_Receive+0x228>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f48:	f7fc fb80 	bl	800464c <HAL_GetTick>
 8007f4c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d002      	beq.n	8007f5a <HAL_SPI_Receive+0x7e>
 8007f54:	88fb      	ldrh	r3, [r7, #6]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d102      	bne.n	8007f60 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007f5e:	e0cc      	b.n	80080fa <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2204      	movs	r2, #4
 8007f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	88fa      	ldrh	r2, [r7, #6]
 8007f78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	88fa      	ldrh	r2, [r7, #6]
 8007f7e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2200      	movs	r2, #0
 8007f8a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	2200      	movs	r2, #0
 8007f96:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007fa6:	d10f      	bne.n	8007fc8 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	681a      	ldr	r2, [r3, #0]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007fc6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd2:	2b40      	cmp	r3, #64	; 0x40
 8007fd4:	d007      	beq.n	8007fe6 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007fe4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d16a      	bne.n	80080c4 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007fee:	e032      	b.n	8008056 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	689b      	ldr	r3, [r3, #8]
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d115      	bne.n	800802a <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f103 020c 	add.w	r2, r3, #12
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	7812      	ldrb	r2, [r2, #0]
 800800c:	b2d2      	uxtb	r2, r2
 800800e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008014:	1c5a      	adds	r2, r3, #1
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800801e:	b29b      	uxth	r3, r3
 8008020:	3b01      	subs	r3, #1
 8008022:	b29a      	uxth	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008028:	e015      	b.n	8008056 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800802a:	f7fc fb0f 	bl	800464c <HAL_GetTick>
 800802e:	4602      	mov	r2, r0
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	1ad3      	subs	r3, r2, r3
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	429a      	cmp	r2, r3
 8008038:	d803      	bhi.n	8008042 <HAL_SPI_Receive+0x166>
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008040:	d102      	bne.n	8008048 <HAL_SPI_Receive+0x16c>
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d106      	bne.n	8008056 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8008054:	e051      	b.n	80080fa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800805a:	b29b      	uxth	r3, r3
 800805c:	2b00      	cmp	r3, #0
 800805e:	d1c7      	bne.n	8007ff0 <HAL_SPI_Receive+0x114>
 8008060:	e035      	b.n	80080ce <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	f003 0301 	and.w	r3, r3, #1
 800806c:	2b01      	cmp	r3, #1
 800806e:	d113      	bne.n	8008098 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	b292      	uxth	r2, r2
 800807c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	1c9a      	adds	r2, r3, #2
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800808c:	b29b      	uxth	r3, r3
 800808e:	3b01      	subs	r3, #1
 8008090:	b29a      	uxth	r2, r3
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008096:	e015      	b.n	80080c4 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008098:	f7fc fad8 	bl	800464c <HAL_GetTick>
 800809c:	4602      	mov	r2, r0
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	1ad3      	subs	r3, r2, r3
 80080a2:	683a      	ldr	r2, [r7, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d803      	bhi.n	80080b0 <HAL_SPI_Receive+0x1d4>
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ae:	d102      	bne.n	80080b6 <HAL_SPI_Receive+0x1da>
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d106      	bne.n	80080c4 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	2201      	movs	r2, #1
 80080be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80080c2:	e01a      	b.n	80080fa <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1c9      	bne.n	8008062 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	6839      	ldr	r1, [r7, #0]
 80080d2:	68f8      	ldr	r0, [r7, #12]
 80080d4:	f000 fa52 	bl	800857c <SPI_EndRxTransaction>
 80080d8:	4603      	mov	r3, r0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d002      	beq.n	80080e4 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2220      	movs	r2, #32
 80080e2:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	75fb      	strb	r3, [r7, #23]
 80080f0:	e003      	b.n	80080fa <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	2201      	movs	r2, #1
 80080f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08c      	sub	sp, #48	; 0x30
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800811a:	2301      	movs	r3, #1
 800811c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800812a:	2b01      	cmp	r3, #1
 800812c:	d101      	bne.n	8008132 <HAL_SPI_TransmitReceive+0x26>
 800812e:	2302      	movs	r3, #2
 8008130:	e198      	b.n	8008464 <HAL_SPI_TransmitReceive+0x358>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2201      	movs	r2, #1
 8008136:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800813a:	f7fc fa87 	bl	800464c <HAL_GetTick>
 800813e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008146:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8008150:	887b      	ldrh	r3, [r7, #2]
 8008152:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008154:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008158:	2b01      	cmp	r3, #1
 800815a:	d00f      	beq.n	800817c <HAL_SPI_TransmitReceive+0x70>
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008162:	d107      	bne.n	8008174 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d103      	bne.n	8008174 <HAL_SPI_TransmitReceive+0x68>
 800816c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008170:	2b04      	cmp	r3, #4
 8008172:	d003      	beq.n	800817c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008174:	2302      	movs	r3, #2
 8008176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800817a:	e16d      	b.n	8008458 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d005      	beq.n	800818e <HAL_SPI_TransmitReceive+0x82>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d002      	beq.n	800818e <HAL_SPI_TransmitReceive+0x82>
 8008188:	887b      	ldrh	r3, [r7, #2]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d103      	bne.n	8008196 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800818e:	2301      	movs	r3, #1
 8008190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008194:	e160      	b.n	8008458 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800819c:	b2db      	uxtb	r3, r3
 800819e:	2b04      	cmp	r3, #4
 80081a0:	d003      	beq.n	80081aa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2205      	movs	r2, #5
 80081a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	887a      	ldrh	r2, [r7, #2]
 80081ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	887a      	ldrh	r2, [r7, #2]
 80081c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	68ba      	ldr	r2, [r7, #8]
 80081c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	887a      	ldrh	r2, [r7, #2]
 80081cc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	887a      	ldrh	r2, [r7, #2]
 80081d2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2200      	movs	r2, #0
 80081d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	2200      	movs	r2, #0
 80081de:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ea:	2b40      	cmp	r3, #64	; 0x40
 80081ec:	d007      	beq.n	80081fe <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081fc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	68db      	ldr	r3, [r3, #12]
 8008202:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008206:	d17c      	bne.n	8008302 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d002      	beq.n	8008216 <HAL_SPI_TransmitReceive+0x10a>
 8008210:	8b7b      	ldrh	r3, [r7, #26]
 8008212:	2b01      	cmp	r3, #1
 8008214:	d16a      	bne.n	80082ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821a:	881a      	ldrh	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008226:	1c9a      	adds	r2, r3, #2
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008230:	b29b      	uxth	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	b29a      	uxth	r2, r3
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800823a:	e057      	b.n	80082ec <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689b      	ldr	r3, [r3, #8]
 8008242:	f003 0302 	and.w	r3, r3, #2
 8008246:	2b02      	cmp	r3, #2
 8008248:	d11b      	bne.n	8008282 <HAL_SPI_TransmitReceive+0x176>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800824e:	b29b      	uxth	r3, r3
 8008250:	2b00      	cmp	r3, #0
 8008252:	d016      	beq.n	8008282 <HAL_SPI_TransmitReceive+0x176>
 8008254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008256:	2b01      	cmp	r3, #1
 8008258:	d113      	bne.n	8008282 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825e:	881a      	ldrh	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826a:	1c9a      	adds	r2, r3, #2
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008274:	b29b      	uxth	r3, r3
 8008276:	3b01      	subs	r3, #1
 8008278:	b29a      	uxth	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f003 0301 	and.w	r3, r3, #1
 800828c:	2b01      	cmp	r3, #1
 800828e:	d119      	bne.n	80082c4 <HAL_SPI_TransmitReceive+0x1b8>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008294:	b29b      	uxth	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d014      	beq.n	80082c4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	68da      	ldr	r2, [r3, #12]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a4:	b292      	uxth	r2, r2
 80082a6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	1c9a      	adds	r2, r3, #2
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	3b01      	subs	r3, #1
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082c0:	2301      	movs	r3, #1
 80082c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082c4:	f7fc f9c2 	bl	800464c <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d80b      	bhi.n	80082ec <HAL_SPI_TransmitReceive+0x1e0>
 80082d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082da:	d007      	beq.n	80082ec <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80082ea:	e0b5      	b.n	8008458 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1a2      	bne.n	800823c <HAL_SPI_TransmitReceive+0x130>
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d19d      	bne.n	800823c <HAL_SPI_TransmitReceive+0x130>
 8008300:	e080      	b.n	8008404 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d002      	beq.n	8008310 <HAL_SPI_TransmitReceive+0x204>
 800830a:	8b7b      	ldrh	r3, [r7, #26]
 800830c:	2b01      	cmp	r3, #1
 800830e:	d16f      	bne.n	80083f0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	330c      	adds	r3, #12
 800831a:	7812      	ldrb	r2, [r2, #0]
 800831c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800832c:	b29b      	uxth	r3, r3
 800832e:	3b01      	subs	r3, #1
 8008330:	b29a      	uxth	r2, r3
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008336:	e05b      	b.n	80083f0 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	f003 0302 	and.w	r3, r3, #2
 8008342:	2b02      	cmp	r3, #2
 8008344:	d11c      	bne.n	8008380 <HAL_SPI_TransmitReceive+0x274>
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800834a:	b29b      	uxth	r3, r3
 800834c:	2b00      	cmp	r3, #0
 800834e:	d017      	beq.n	8008380 <HAL_SPI_TransmitReceive+0x274>
 8008350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008352:	2b01      	cmp	r3, #1
 8008354:	d114      	bne.n	8008380 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	330c      	adds	r3, #12
 8008360:	7812      	ldrb	r2, [r2, #0]
 8008362:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008368:	1c5a      	adds	r2, r3, #1
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008372:	b29b      	uxth	r3, r3
 8008374:	3b01      	subs	r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f003 0301 	and.w	r3, r3, #1
 800838a:	2b01      	cmp	r3, #1
 800838c:	d119      	bne.n	80083c2 <HAL_SPI_TransmitReceive+0x2b6>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008392:	b29b      	uxth	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	d014      	beq.n	80083c2 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	68da      	ldr	r2, [r3, #12]
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a2:	b2d2      	uxtb	r2, r2
 80083a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083aa:	1c5a      	adds	r2, r3, #1
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	3b01      	subs	r3, #1
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083be:	2301      	movs	r3, #1
 80083c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80083c2:	f7fc f943 	bl	800464c <HAL_GetTick>
 80083c6:	4602      	mov	r2, r0
 80083c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ca:	1ad3      	subs	r3, r2, r3
 80083cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d803      	bhi.n	80083da <HAL_SPI_TransmitReceive+0x2ce>
 80083d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083d8:	d102      	bne.n	80083e0 <HAL_SPI_TransmitReceive+0x2d4>
 80083da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d107      	bne.n	80083f0 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80083ee:	e033      	b.n	8008458 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d19e      	bne.n	8008338 <HAL_SPI_TransmitReceive+0x22c>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80083fe:	b29b      	uxth	r3, r3
 8008400:	2b00      	cmp	r3, #0
 8008402:	d199      	bne.n	8008338 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008406:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 f91d 	bl	8008648 <SPI_EndRxTxTransaction>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d006      	beq.n	8008422 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2220      	movs	r2, #32
 800841e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8008420:	e01a      	b.n	8008458 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10a      	bne.n	8008440 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800842a:	2300      	movs	r3, #0
 800842c:	617b      	str	r3, [r7, #20]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	617b      	str	r3, [r7, #20]
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008444:	2b00      	cmp	r3, #0
 8008446:	d003      	beq.n	8008450 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800844e:	e003      	b.n	8008458 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2201      	movs	r2, #1
 8008454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8008460:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8008464:	4618      	mov	r0, r3
 8008466:	3730      	adds	r7, #48	; 0x30
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b088      	sub	sp, #32
 8008470:	af00      	add	r7, sp, #0
 8008472:	60f8      	str	r0, [r7, #12]
 8008474:	60b9      	str	r1, [r7, #8]
 8008476:	603b      	str	r3, [r7, #0]
 8008478:	4613      	mov	r3, r2
 800847a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800847c:	f7fc f8e6 	bl	800464c <HAL_GetTick>
 8008480:	4602      	mov	r2, r0
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	1a9b      	subs	r3, r3, r2
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	4413      	add	r3, r2
 800848a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800848c:	f7fc f8de 	bl	800464c <HAL_GetTick>
 8008490:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008492:	4b39      	ldr	r3, [pc, #228]	; (8008578 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	015b      	lsls	r3, r3, #5
 8008498:	0d1b      	lsrs	r3, r3, #20
 800849a:	69fa      	ldr	r2, [r7, #28]
 800849c:	fb02 f303 	mul.w	r3, r2, r3
 80084a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084a2:	e054      	b.n	800854e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084aa:	d050      	beq.n	800854e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084ac:	f7fc f8ce 	bl	800464c <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	69bb      	ldr	r3, [r7, #24]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	69fa      	ldr	r2, [r7, #28]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d902      	bls.n	80084c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d13d      	bne.n	800853e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80084d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80084da:	d111      	bne.n	8008500 <SPI_WaitFlagStateUntilTimeout+0x94>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	689b      	ldr	r3, [r3, #8]
 80084e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084e4:	d004      	beq.n	80084f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ee:	d107      	bne.n	8008500 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008508:	d10f      	bne.n	800852a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008528:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2201      	movs	r2, #1
 800852e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e017      	b.n	800856e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008544:	2300      	movs	r3, #0
 8008546:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	3b01      	subs	r3, #1
 800854c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	4013      	ands	r3, r2
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	429a      	cmp	r2, r3
 800855c:	bf0c      	ite	eq
 800855e:	2301      	moveq	r3, #1
 8008560:	2300      	movne	r3, #0
 8008562:	b2db      	uxtb	r3, r3
 8008564:	461a      	mov	r2, r3
 8008566:	79fb      	ldrb	r3, [r7, #7]
 8008568:	429a      	cmp	r2, r3
 800856a:	d19b      	bne.n	80084a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3720      	adds	r7, #32
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20000008 	.word	0x20000008

0800857c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b086      	sub	sp, #24
 8008580:	af02      	add	r7, sp, #8
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008590:	d111      	bne.n	80085b6 <SPI_EndRxTransaction+0x3a>
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800859a:	d004      	beq.n	80085a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085a4:	d107      	bne.n	80085b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80085b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80085be:	d12a      	bne.n	8008616 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085c8:	d012      	beq.n	80085f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	9300      	str	r3, [sp, #0]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	2200      	movs	r2, #0
 80085d2:	2180      	movs	r1, #128	; 0x80
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff ff49 	bl	800846c <SPI_WaitFlagStateUntilTimeout>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d02d      	beq.n	800863c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e4:	f043 0220 	orr.w	r2, r3, #32
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80085ec:	2303      	movs	r3, #3
 80085ee:	e026      	b.n	800863e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	2200      	movs	r2, #0
 80085f8:	2101      	movs	r1, #1
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f7ff ff36 	bl	800846c <SPI_WaitFlagStateUntilTimeout>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d01a      	beq.n	800863c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800860a:	f043 0220 	orr.w	r2, r3, #32
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008612:	2303      	movs	r3, #3
 8008614:	e013      	b.n	800863e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	2200      	movs	r2, #0
 800861e:	2101      	movs	r1, #1
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f7ff ff23 	bl	800846c <SPI_WaitFlagStateUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d007      	beq.n	800863c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008630:	f043 0220 	orr.w	r2, r3, #32
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e000      	b.n	800863e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800863c:	2300      	movs	r3, #0
}
 800863e:	4618      	mov	r0, r3
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b088      	sub	sp, #32
 800864c:	af02      	add	r7, sp, #8
 800864e:	60f8      	str	r0, [r7, #12]
 8008650:	60b9      	str	r1, [r7, #8]
 8008652:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	2201      	movs	r2, #1
 800865c:	2102      	movs	r1, #2
 800865e:	68f8      	ldr	r0, [r7, #12]
 8008660:	f7ff ff04 	bl	800846c <SPI_WaitFlagStateUntilTimeout>
 8008664:	4603      	mov	r3, r0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d007      	beq.n	800867a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800866e:	f043 0220 	orr.w	r2, r3, #32
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8008676:	2303      	movs	r3, #3
 8008678:	e032      	b.n	80086e0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800867a:	4b1b      	ldr	r3, [pc, #108]	; (80086e8 <SPI_EndRxTxTransaction+0xa0>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a1b      	ldr	r2, [pc, #108]	; (80086ec <SPI_EndRxTxTransaction+0xa4>)
 8008680:	fba2 2303 	umull	r2, r3, r2, r3
 8008684:	0d5b      	lsrs	r3, r3, #21
 8008686:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800868a:	fb02 f303 	mul.w	r3, r2, r3
 800868e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008698:	d112      	bne.n	80086c0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	9300      	str	r3, [sp, #0]
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2200      	movs	r2, #0
 80086a2:	2180      	movs	r1, #128	; 0x80
 80086a4:	68f8      	ldr	r0, [r7, #12]
 80086a6:	f7ff fee1 	bl	800846c <SPI_WaitFlagStateUntilTimeout>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d016      	beq.n	80086de <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086b4:	f043 0220 	orr.w	r2, r3, #32
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80086bc:	2303      	movs	r3, #3
 80086be:	e00f      	b.n	80086e0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d00a      	beq.n	80086dc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086d6:	2b80      	cmp	r3, #128	; 0x80
 80086d8:	d0f2      	beq.n	80086c0 <SPI_EndRxTxTransaction+0x78>
 80086da:	e000      	b.n	80086de <SPI_EndRxTxTransaction+0x96>
        break;
 80086dc:	bf00      	nop
  }

  return HAL_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3718      	adds	r7, #24
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	20000008 	.word	0x20000008
 80086ec:	165e9f81 	.word	0x165e9f81

080086f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e041      	b.n	8008786 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008708:	b2db      	uxtb	r3, r3
 800870a:	2b00      	cmp	r3, #0
 800870c:	d106      	bne.n	800871c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 f839 	bl	800878e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	3304      	adds	r3, #4
 800872c:	4619      	mov	r1, r3
 800872e:	4610      	mov	r0, r2
 8008730:	f000 f9c0 	bl	8008ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3708      	adds	r7, #8
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800878e:	b480      	push	{r7}
 8008790:	b083      	sub	sp, #12
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008796:	bf00      	nop
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
	...

080087a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b085      	sub	sp, #20
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d001      	beq.n	80087bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e04e      	b.n	800885a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2202      	movs	r2, #2
 80087c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68da      	ldr	r2, [r3, #12]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0201 	orr.w	r2, r2, #1
 80087d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a23      	ldr	r2, [pc, #140]	; (8008868 <HAL_TIM_Base_Start_IT+0xc4>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d022      	beq.n	8008824 <HAL_TIM_Base_Start_IT+0x80>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e6:	d01d      	beq.n	8008824 <HAL_TIM_Base_Start_IT+0x80>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a1f      	ldr	r2, [pc, #124]	; (800886c <HAL_TIM_Base_Start_IT+0xc8>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d018      	beq.n	8008824 <HAL_TIM_Base_Start_IT+0x80>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a1e      	ldr	r2, [pc, #120]	; (8008870 <HAL_TIM_Base_Start_IT+0xcc>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d013      	beq.n	8008824 <HAL_TIM_Base_Start_IT+0x80>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4a1c      	ldr	r2, [pc, #112]	; (8008874 <HAL_TIM_Base_Start_IT+0xd0>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d00e      	beq.n	8008824 <HAL_TIM_Base_Start_IT+0x80>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4a1b      	ldr	r2, [pc, #108]	; (8008878 <HAL_TIM_Base_Start_IT+0xd4>)
 800880c:	4293      	cmp	r3, r2
 800880e:	d009      	beq.n	8008824 <HAL_TIM_Base_Start_IT+0x80>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a19      	ldr	r2, [pc, #100]	; (800887c <HAL_TIM_Base_Start_IT+0xd8>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d004      	beq.n	8008824 <HAL_TIM_Base_Start_IT+0x80>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a18      	ldr	r2, [pc, #96]	; (8008880 <HAL_TIM_Base_Start_IT+0xdc>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d111      	bne.n	8008848 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	f003 0307 	and.w	r3, r3, #7
 800882e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2b06      	cmp	r3, #6
 8008834:	d010      	beq.n	8008858 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f042 0201 	orr.w	r2, r2, #1
 8008844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008846:	e007      	b.n	8008858 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f042 0201 	orr.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008858:	2300      	movs	r3, #0
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
 8008866:	bf00      	nop
 8008868:	40010000 	.word	0x40010000
 800886c:	40000400 	.word	0x40000400
 8008870:	40000800 	.word	0x40000800
 8008874:	40000c00 	.word	0x40000c00
 8008878:	40010400 	.word	0x40010400
 800887c:	40014000 	.word	0x40014000
 8008880:	40001800 	.word	0x40001800

08008884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	f003 0302 	and.w	r3, r3, #2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d020      	beq.n	80088e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01b      	beq.n	80088e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f06f 0202 	mvn.w	r2, #2
 80088b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	f003 0303 	and.w	r3, r3, #3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d003      	beq.n	80088d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 f8d2 	bl	8008a78 <HAL_TIM_IC_CaptureCallback>
 80088d4:	e005      	b.n	80088e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f8c4 	bl	8008a64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f8d5 	bl	8008a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	f003 0304 	and.w	r3, r3, #4
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d020      	beq.n	8008934 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f003 0304 	and.w	r3, r3, #4
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d01b      	beq.n	8008934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f06f 0204 	mvn.w	r2, #4
 8008904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2202      	movs	r2, #2
 800890a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	699b      	ldr	r3, [r3, #24]
 8008912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008916:	2b00      	cmp	r3, #0
 8008918:	d003      	beq.n	8008922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f000 f8ac 	bl	8008a78 <HAL_TIM_IC_CaptureCallback>
 8008920:	e005      	b.n	800892e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 f89e 	bl	8008a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f8af 	bl	8008a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2200      	movs	r2, #0
 8008932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b00      	cmp	r3, #0
 800893c:	d020      	beq.n	8008980 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f003 0308 	and.w	r3, r3, #8
 8008944:	2b00      	cmp	r3, #0
 8008946:	d01b      	beq.n	8008980 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f06f 0208 	mvn.w	r2, #8
 8008950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2204      	movs	r2, #4
 8008956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	69db      	ldr	r3, [r3, #28]
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d003      	beq.n	800896e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f886 	bl	8008a78 <HAL_TIM_IC_CaptureCallback>
 800896c:	e005      	b.n	800897a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 f878 	bl	8008a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 f889 	bl	8008a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2200      	movs	r2, #0
 800897e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	f003 0310 	and.w	r3, r3, #16
 8008986:	2b00      	cmp	r3, #0
 8008988:	d020      	beq.n	80089cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f003 0310 	and.w	r3, r3, #16
 8008990:	2b00      	cmp	r3, #0
 8008992:	d01b      	beq.n	80089cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f06f 0210 	mvn.w	r2, #16
 800899c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2208      	movs	r2, #8
 80089a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	69db      	ldr	r3, [r3, #28]
 80089aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d003      	beq.n	80089ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 f860 	bl	8008a78 <HAL_TIM_IC_CaptureCallback>
 80089b8:	e005      	b.n	80089c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f852 	bl	8008a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f863 	bl	8008a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d00c      	beq.n	80089f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f003 0301 	and.w	r3, r3, #1
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d007      	beq.n	80089f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f06f 0201 	mvn.w	r2, #1
 80089e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7fa fbee 	bl	80031cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00c      	beq.n	8008a14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d007      	beq.n	8008a14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f906 	bl	8008c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00c      	beq.n	8008a38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d007      	beq.n	8008a38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f834 	bl	8008aa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	f003 0320 	and.w	r3, r3, #32
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d00c      	beq.n	8008a5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	f003 0320 	and.w	r3, r3, #32
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d007      	beq.n	8008a5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f06f 0220 	mvn.w	r2, #32
 8008a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f8d8 	bl	8008c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a5c:	bf00      	nop
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a94:	bf00      	nop
 8008a96:	370c      	adds	r7, #12
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008aa8:	bf00      	nop
 8008aaa:	370c      	adds	r7, #12
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a46      	ldr	r2, [pc, #280]	; (8008be0 <TIM_Base_SetConfig+0x12c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d013      	beq.n	8008af4 <TIM_Base_SetConfig+0x40>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad2:	d00f      	beq.n	8008af4 <TIM_Base_SetConfig+0x40>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a43      	ldr	r2, [pc, #268]	; (8008be4 <TIM_Base_SetConfig+0x130>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d00b      	beq.n	8008af4 <TIM_Base_SetConfig+0x40>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	4a42      	ldr	r2, [pc, #264]	; (8008be8 <TIM_Base_SetConfig+0x134>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d007      	beq.n	8008af4 <TIM_Base_SetConfig+0x40>
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	4a41      	ldr	r2, [pc, #260]	; (8008bec <TIM_Base_SetConfig+0x138>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d003      	beq.n	8008af4 <TIM_Base_SetConfig+0x40>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	4a40      	ldr	r2, [pc, #256]	; (8008bf0 <TIM_Base_SetConfig+0x13c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d108      	bne.n	8008b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	68fa      	ldr	r2, [r7, #12]
 8008b02:	4313      	orrs	r3, r2
 8008b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a35      	ldr	r2, [pc, #212]	; (8008be0 <TIM_Base_SetConfig+0x12c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d02b      	beq.n	8008b66 <TIM_Base_SetConfig+0xb2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b14:	d027      	beq.n	8008b66 <TIM_Base_SetConfig+0xb2>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a32      	ldr	r2, [pc, #200]	; (8008be4 <TIM_Base_SetConfig+0x130>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d023      	beq.n	8008b66 <TIM_Base_SetConfig+0xb2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a31      	ldr	r2, [pc, #196]	; (8008be8 <TIM_Base_SetConfig+0x134>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d01f      	beq.n	8008b66 <TIM_Base_SetConfig+0xb2>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a30      	ldr	r2, [pc, #192]	; (8008bec <TIM_Base_SetConfig+0x138>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d01b      	beq.n	8008b66 <TIM_Base_SetConfig+0xb2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a2f      	ldr	r2, [pc, #188]	; (8008bf0 <TIM_Base_SetConfig+0x13c>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d017      	beq.n	8008b66 <TIM_Base_SetConfig+0xb2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a2e      	ldr	r2, [pc, #184]	; (8008bf4 <TIM_Base_SetConfig+0x140>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d013      	beq.n	8008b66 <TIM_Base_SetConfig+0xb2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a2d      	ldr	r2, [pc, #180]	; (8008bf8 <TIM_Base_SetConfig+0x144>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d00f      	beq.n	8008b66 <TIM_Base_SetConfig+0xb2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a2c      	ldr	r2, [pc, #176]	; (8008bfc <TIM_Base_SetConfig+0x148>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d00b      	beq.n	8008b66 <TIM_Base_SetConfig+0xb2>
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a2b      	ldr	r2, [pc, #172]	; (8008c00 <TIM_Base_SetConfig+0x14c>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d007      	beq.n	8008b66 <TIM_Base_SetConfig+0xb2>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a2a      	ldr	r2, [pc, #168]	; (8008c04 <TIM_Base_SetConfig+0x150>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d003      	beq.n	8008b66 <TIM_Base_SetConfig+0xb2>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	4a29      	ldr	r2, [pc, #164]	; (8008c08 <TIM_Base_SetConfig+0x154>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d108      	bne.n	8008b78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	4313      	orrs	r3, r2
 8008b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	68fa      	ldr	r2, [r7, #12]
 8008b8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	689a      	ldr	r2, [r3, #8]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a10      	ldr	r2, [pc, #64]	; (8008be0 <TIM_Base_SetConfig+0x12c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d003      	beq.n	8008bac <TIM_Base_SetConfig+0xf8>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a12      	ldr	r2, [pc, #72]	; (8008bf0 <TIM_Base_SetConfig+0x13c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d103      	bne.n	8008bb4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	691a      	ldr	r2, [r3, #16]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d105      	bne.n	8008bd2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	f023 0201 	bic.w	r2, r3, #1
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	611a      	str	r2, [r3, #16]
  }
}
 8008bd2:	bf00      	nop
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	40010000 	.word	0x40010000
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40000800 	.word	0x40000800
 8008bec:	40000c00 	.word	0x40000c00
 8008bf0:	40010400 	.word	0x40010400
 8008bf4:	40014000 	.word	0x40014000
 8008bf8:	40014400 	.word	0x40014400
 8008bfc:	40014800 	.word	0x40014800
 8008c00:	40001800 	.word	0x40001800
 8008c04:	40001c00 	.word	0x40001c00
 8008c08:	40002000 	.word	0x40002000

08008c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008c28:	bf00      	nop
 8008c2a:	370c      	adds	r7, #12
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d101      	bne.n	8008c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e042      	b.n	8008ccc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d106      	bne.n	8008c60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f7fb faee 	bl	800423c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2224      	movs	r2, #36	; 0x24
 8008c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	68da      	ldr	r2, [r3, #12]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 f973 	bl	8008f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	691a      	ldr	r2, [r3, #16]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	695a      	ldr	r2, [r3, #20]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008cac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2220      	movs	r2, #32
 8008cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008cca:	2300      	movs	r3, #0
}
 8008ccc:	4618      	mov	r0, r3
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b08a      	sub	sp, #40	; 0x28
 8008cd8:	af02      	add	r7, sp, #8
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	603b      	str	r3, [r7, #0]
 8008ce0:	4613      	mov	r3, r2
 8008ce2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b20      	cmp	r3, #32
 8008cf2:	d175      	bne.n	8008de0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d002      	beq.n	8008d00 <HAL_UART_Transmit+0x2c>
 8008cfa:	88fb      	ldrh	r3, [r7, #6]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d101      	bne.n	8008d04 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e06e      	b.n	8008de2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2221      	movs	r2, #33	; 0x21
 8008d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008d12:	f7fb fc9b 	bl	800464c <HAL_GetTick>
 8008d16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	88fa      	ldrh	r2, [r7, #6]
 8008d1c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	88fa      	ldrh	r2, [r7, #6]
 8008d22:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2c:	d108      	bne.n	8008d40 <HAL_UART_Transmit+0x6c>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	691b      	ldr	r3, [r3, #16]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d104      	bne.n	8008d40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008d36:	2300      	movs	r3, #0
 8008d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	61bb      	str	r3, [r7, #24]
 8008d3e:	e003      	b.n	8008d48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008d44:	2300      	movs	r3, #0
 8008d46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008d48:	e02e      	b.n	8008da8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2200      	movs	r2, #0
 8008d52:	2180      	movs	r1, #128	; 0x80
 8008d54:	68f8      	ldr	r0, [r7, #12]
 8008d56:	f000 f848 	bl	8008dea <UART_WaitOnFlagUntilTimeout>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d005      	beq.n	8008d6c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	2220      	movs	r2, #32
 8008d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e03a      	b.n	8008de2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d10b      	bne.n	8008d8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008d72:	69bb      	ldr	r3, [r7, #24]
 8008d74:	881b      	ldrh	r3, [r3, #0]
 8008d76:	461a      	mov	r2, r3
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d80:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	3302      	adds	r3, #2
 8008d86:	61bb      	str	r3, [r7, #24]
 8008d88:	e007      	b.n	8008d9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008d8a:	69fb      	ldr	r3, [r7, #28]
 8008d8c:	781a      	ldrb	r2, [r3, #0]
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	3301      	adds	r3, #1
 8008d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	3b01      	subs	r3, #1
 8008da2:	b29a      	uxth	r2, r3
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1cb      	bne.n	8008d4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2200      	movs	r2, #0
 8008dba:	2140      	movs	r1, #64	; 0x40
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f000 f814 	bl	8008dea <UART_WaitOnFlagUntilTimeout>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d005      	beq.n	8008dd4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e006      	b.n	8008de2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2220      	movs	r2, #32
 8008dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	e000      	b.n	8008de2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008de0:	2302      	movs	r3, #2
  }
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3720      	adds	r7, #32
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b086      	sub	sp, #24
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	60f8      	str	r0, [r7, #12]
 8008df2:	60b9      	str	r1, [r7, #8]
 8008df4:	603b      	str	r3, [r7, #0]
 8008df6:	4613      	mov	r3, r2
 8008df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dfa:	e03b      	b.n	8008e74 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dfc:	6a3b      	ldr	r3, [r7, #32]
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e02:	d037      	beq.n	8008e74 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e04:	f7fb fc22 	bl	800464c <HAL_GetTick>
 8008e08:	4602      	mov	r2, r0
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	1ad3      	subs	r3, r2, r3
 8008e0e:	6a3a      	ldr	r2, [r7, #32]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d302      	bcc.n	8008e1a <UART_WaitOnFlagUntilTimeout+0x30>
 8008e14:	6a3b      	ldr	r3, [r7, #32]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d101      	bne.n	8008e1e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008e1a:	2303      	movs	r3, #3
 8008e1c:	e03a      	b.n	8008e94 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f003 0304 	and.w	r3, r3, #4
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d023      	beq.n	8008e74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b80      	cmp	r3, #128	; 0x80
 8008e30:	d020      	beq.n	8008e74 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2b40      	cmp	r3, #64	; 0x40
 8008e36:	d01d      	beq.n	8008e74 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f003 0308 	and.w	r3, r3, #8
 8008e42:	2b08      	cmp	r3, #8
 8008e44:	d116      	bne.n	8008e74 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008e46:	2300      	movs	r3, #0
 8008e48:	617b      	str	r3, [r7, #20]
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	617b      	str	r3, [r7, #20]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	617b      	str	r3, [r7, #20]
 8008e5a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 f81d 	bl	8008e9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2208      	movs	r2, #8
 8008e66:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008e70:	2301      	movs	r3, #1
 8008e72:	e00f      	b.n	8008e94 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	681a      	ldr	r2, [r3, #0]
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	bf0c      	ite	eq
 8008e84:	2301      	moveq	r3, #1
 8008e86:	2300      	movne	r3, #0
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d0b4      	beq.n	8008dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e92:	2300      	movs	r3, #0
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b095      	sub	sp, #84	; 0x54
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	330c      	adds	r3, #12
 8008eaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008eba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	330c      	adds	r3, #12
 8008ec2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008ec4:	643a      	str	r2, [r7, #64]	; 0x40
 8008ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008eca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e5      	bne.n	8008ea4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3314      	adds	r3, #20
 8008ede:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	e853 3f00 	ldrex	r3, [r3]
 8008ee6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	f023 0301 	bic.w	r3, r3, #1
 8008eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3314      	adds	r3, #20
 8008ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ef8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008efe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f00:	e841 2300 	strex	r3, r2, [r1]
 8008f04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1e5      	bne.n	8008ed8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d119      	bne.n	8008f48 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	330c      	adds	r3, #12
 8008f1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	e853 3f00 	ldrex	r3, [r3]
 8008f22:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	f023 0310 	bic.w	r3, r3, #16
 8008f2a:	647b      	str	r3, [r7, #68]	; 0x44
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	330c      	adds	r3, #12
 8008f32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f34:	61ba      	str	r2, [r7, #24]
 8008f36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f38:	6979      	ldr	r1, [r7, #20]
 8008f3a:	69ba      	ldr	r2, [r7, #24]
 8008f3c:	e841 2300 	strex	r3, r2, [r1]
 8008f40:	613b      	str	r3, [r7, #16]
   return(result);
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d1e5      	bne.n	8008f14 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f56:	bf00      	nop
 8008f58:	3754      	adds	r7, #84	; 0x54
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
	...

08008f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f68:	b0c0      	sub	sp, #256	; 0x100
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f80:	68d9      	ldr	r1, [r3, #12]
 8008f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	ea40 0301 	orr.w	r3, r0, r1
 8008f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008fbc:	f021 010c 	bic.w	r1, r1, #12
 8008fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fde:	6999      	ldr	r1, [r3, #24]
 8008fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	ea40 0301 	orr.w	r3, r0, r1
 8008fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	4b8f      	ldr	r3, [pc, #572]	; (8009230 <UART_SetConfig+0x2cc>)
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d005      	beq.n	8009004 <UART_SetConfig+0xa0>
 8008ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	4b8d      	ldr	r3, [pc, #564]	; (8009234 <UART_SetConfig+0x2d0>)
 8009000:	429a      	cmp	r2, r3
 8009002:	d104      	bne.n	800900e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009004:	f7fe f96a 	bl	80072dc <HAL_RCC_GetPCLK2Freq>
 8009008:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800900c:	e003      	b.n	8009016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800900e:	f7fe f951 	bl	80072b4 <HAL_RCC_GetPCLK1Freq>
 8009012:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009020:	f040 810c 	bne.w	800923c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009028:	2200      	movs	r2, #0
 800902a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800902e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009036:	4622      	mov	r2, r4
 8009038:	462b      	mov	r3, r5
 800903a:	1891      	adds	r1, r2, r2
 800903c:	65b9      	str	r1, [r7, #88]	; 0x58
 800903e:	415b      	adcs	r3, r3
 8009040:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009046:	4621      	mov	r1, r4
 8009048:	eb12 0801 	adds.w	r8, r2, r1
 800904c:	4629      	mov	r1, r5
 800904e:	eb43 0901 	adc.w	r9, r3, r1
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800905e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009066:	4690      	mov	r8, r2
 8009068:	4699      	mov	r9, r3
 800906a:	4623      	mov	r3, r4
 800906c:	eb18 0303 	adds.w	r3, r8, r3
 8009070:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009074:	462b      	mov	r3, r5
 8009076:	eb49 0303 	adc.w	r3, r9, r3
 800907a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800907e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800908a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800908e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009092:	460b      	mov	r3, r1
 8009094:	18db      	adds	r3, r3, r3
 8009096:	653b      	str	r3, [r7, #80]	; 0x50
 8009098:	4613      	mov	r3, r2
 800909a:	eb42 0303 	adc.w	r3, r2, r3
 800909e:	657b      	str	r3, [r7, #84]	; 0x54
 80090a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80090a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80090a8:	f7f7 fdde 	bl	8000c68 <__aeabi_uldivmod>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4b61      	ldr	r3, [pc, #388]	; (8009238 <UART_SetConfig+0x2d4>)
 80090b2:	fba3 2302 	umull	r2, r3, r3, r2
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	011c      	lsls	r4, r3, #4
 80090ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090be:	2200      	movs	r2, #0
 80090c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80090c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80090cc:	4642      	mov	r2, r8
 80090ce:	464b      	mov	r3, r9
 80090d0:	1891      	adds	r1, r2, r2
 80090d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80090d4:	415b      	adcs	r3, r3
 80090d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80090dc:	4641      	mov	r1, r8
 80090de:	eb12 0a01 	adds.w	sl, r2, r1
 80090e2:	4649      	mov	r1, r9
 80090e4:	eb43 0b01 	adc.w	fp, r3, r1
 80090e8:	f04f 0200 	mov.w	r2, #0
 80090ec:	f04f 0300 	mov.w	r3, #0
 80090f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090fc:	4692      	mov	sl, r2
 80090fe:	469b      	mov	fp, r3
 8009100:	4643      	mov	r3, r8
 8009102:	eb1a 0303 	adds.w	r3, sl, r3
 8009106:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800910a:	464b      	mov	r3, r9
 800910c:	eb4b 0303 	adc.w	r3, fp, r3
 8009110:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009120:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009128:	460b      	mov	r3, r1
 800912a:	18db      	adds	r3, r3, r3
 800912c:	643b      	str	r3, [r7, #64]	; 0x40
 800912e:	4613      	mov	r3, r2
 8009130:	eb42 0303 	adc.w	r3, r2, r3
 8009134:	647b      	str	r3, [r7, #68]	; 0x44
 8009136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800913a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800913e:	f7f7 fd93 	bl	8000c68 <__aeabi_uldivmod>
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4611      	mov	r1, r2
 8009148:	4b3b      	ldr	r3, [pc, #236]	; (8009238 <UART_SetConfig+0x2d4>)
 800914a:	fba3 2301 	umull	r2, r3, r3, r1
 800914e:	095b      	lsrs	r3, r3, #5
 8009150:	2264      	movs	r2, #100	; 0x64
 8009152:	fb02 f303 	mul.w	r3, r2, r3
 8009156:	1acb      	subs	r3, r1, r3
 8009158:	00db      	lsls	r3, r3, #3
 800915a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800915e:	4b36      	ldr	r3, [pc, #216]	; (8009238 <UART_SetConfig+0x2d4>)
 8009160:	fba3 2302 	umull	r2, r3, r3, r2
 8009164:	095b      	lsrs	r3, r3, #5
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800916c:	441c      	add	r4, r3
 800916e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009172:	2200      	movs	r2, #0
 8009174:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009178:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800917c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009180:	4642      	mov	r2, r8
 8009182:	464b      	mov	r3, r9
 8009184:	1891      	adds	r1, r2, r2
 8009186:	63b9      	str	r1, [r7, #56]	; 0x38
 8009188:	415b      	adcs	r3, r3
 800918a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800918c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009190:	4641      	mov	r1, r8
 8009192:	1851      	adds	r1, r2, r1
 8009194:	6339      	str	r1, [r7, #48]	; 0x30
 8009196:	4649      	mov	r1, r9
 8009198:	414b      	adcs	r3, r1
 800919a:	637b      	str	r3, [r7, #52]	; 0x34
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	f04f 0300 	mov.w	r3, #0
 80091a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80091a8:	4659      	mov	r1, fp
 80091aa:	00cb      	lsls	r3, r1, #3
 80091ac:	4651      	mov	r1, sl
 80091ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091b2:	4651      	mov	r1, sl
 80091b4:	00ca      	lsls	r2, r1, #3
 80091b6:	4610      	mov	r0, r2
 80091b8:	4619      	mov	r1, r3
 80091ba:	4603      	mov	r3, r0
 80091bc:	4642      	mov	r2, r8
 80091be:	189b      	adds	r3, r3, r2
 80091c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091c4:	464b      	mov	r3, r9
 80091c6:	460a      	mov	r2, r1
 80091c8:	eb42 0303 	adc.w	r3, r2, r3
 80091cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80091dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80091e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80091e4:	460b      	mov	r3, r1
 80091e6:	18db      	adds	r3, r3, r3
 80091e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80091ea:	4613      	mov	r3, r2
 80091ec:	eb42 0303 	adc.w	r3, r2, r3
 80091f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80091fa:	f7f7 fd35 	bl	8000c68 <__aeabi_uldivmod>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <UART_SetConfig+0x2d4>)
 8009204:	fba3 1302 	umull	r1, r3, r3, r2
 8009208:	095b      	lsrs	r3, r3, #5
 800920a:	2164      	movs	r1, #100	; 0x64
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	00db      	lsls	r3, r3, #3
 8009214:	3332      	adds	r3, #50	; 0x32
 8009216:	4a08      	ldr	r2, [pc, #32]	; (8009238 <UART_SetConfig+0x2d4>)
 8009218:	fba2 2303 	umull	r2, r3, r2, r3
 800921c:	095b      	lsrs	r3, r3, #5
 800921e:	f003 0207 	and.w	r2, r3, #7
 8009222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4422      	add	r2, r4
 800922a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800922c:	e106      	b.n	800943c <UART_SetConfig+0x4d8>
 800922e:	bf00      	nop
 8009230:	40011000 	.word	0x40011000
 8009234:	40011400 	.word	0x40011400
 8009238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800923c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009240:	2200      	movs	r2, #0
 8009242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009246:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800924a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800924e:	4642      	mov	r2, r8
 8009250:	464b      	mov	r3, r9
 8009252:	1891      	adds	r1, r2, r2
 8009254:	6239      	str	r1, [r7, #32]
 8009256:	415b      	adcs	r3, r3
 8009258:	627b      	str	r3, [r7, #36]	; 0x24
 800925a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800925e:	4641      	mov	r1, r8
 8009260:	1854      	adds	r4, r2, r1
 8009262:	4649      	mov	r1, r9
 8009264:	eb43 0501 	adc.w	r5, r3, r1
 8009268:	f04f 0200 	mov.w	r2, #0
 800926c:	f04f 0300 	mov.w	r3, #0
 8009270:	00eb      	lsls	r3, r5, #3
 8009272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009276:	00e2      	lsls	r2, r4, #3
 8009278:	4614      	mov	r4, r2
 800927a:	461d      	mov	r5, r3
 800927c:	4643      	mov	r3, r8
 800927e:	18e3      	adds	r3, r4, r3
 8009280:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009284:	464b      	mov	r3, r9
 8009286:	eb45 0303 	adc.w	r3, r5, r3
 800928a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800928e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800929a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800929e:	f04f 0200 	mov.w	r2, #0
 80092a2:	f04f 0300 	mov.w	r3, #0
 80092a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80092aa:	4629      	mov	r1, r5
 80092ac:	008b      	lsls	r3, r1, #2
 80092ae:	4621      	mov	r1, r4
 80092b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092b4:	4621      	mov	r1, r4
 80092b6:	008a      	lsls	r2, r1, #2
 80092b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80092bc:	f7f7 fcd4 	bl	8000c68 <__aeabi_uldivmod>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4b60      	ldr	r3, [pc, #384]	; (8009448 <UART_SetConfig+0x4e4>)
 80092c6:	fba3 2302 	umull	r2, r3, r3, r2
 80092ca:	095b      	lsrs	r3, r3, #5
 80092cc:	011c      	lsls	r4, r3, #4
 80092ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80092dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80092e0:	4642      	mov	r2, r8
 80092e2:	464b      	mov	r3, r9
 80092e4:	1891      	adds	r1, r2, r2
 80092e6:	61b9      	str	r1, [r7, #24]
 80092e8:	415b      	adcs	r3, r3
 80092ea:	61fb      	str	r3, [r7, #28]
 80092ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092f0:	4641      	mov	r1, r8
 80092f2:	1851      	adds	r1, r2, r1
 80092f4:	6139      	str	r1, [r7, #16]
 80092f6:	4649      	mov	r1, r9
 80092f8:	414b      	adcs	r3, r1
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009308:	4659      	mov	r1, fp
 800930a:	00cb      	lsls	r3, r1, #3
 800930c:	4651      	mov	r1, sl
 800930e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009312:	4651      	mov	r1, sl
 8009314:	00ca      	lsls	r2, r1, #3
 8009316:	4610      	mov	r0, r2
 8009318:	4619      	mov	r1, r3
 800931a:	4603      	mov	r3, r0
 800931c:	4642      	mov	r2, r8
 800931e:	189b      	adds	r3, r3, r2
 8009320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009324:	464b      	mov	r3, r9
 8009326:	460a      	mov	r2, r1
 8009328:	eb42 0303 	adc.w	r3, r2, r3
 800932c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	67bb      	str	r3, [r7, #120]	; 0x78
 800933a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800933c:	f04f 0200 	mov.w	r2, #0
 8009340:	f04f 0300 	mov.w	r3, #0
 8009344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009348:	4649      	mov	r1, r9
 800934a:	008b      	lsls	r3, r1, #2
 800934c:	4641      	mov	r1, r8
 800934e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009352:	4641      	mov	r1, r8
 8009354:	008a      	lsls	r2, r1, #2
 8009356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800935a:	f7f7 fc85 	bl	8000c68 <__aeabi_uldivmod>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4611      	mov	r1, r2
 8009364:	4b38      	ldr	r3, [pc, #224]	; (8009448 <UART_SetConfig+0x4e4>)
 8009366:	fba3 2301 	umull	r2, r3, r3, r1
 800936a:	095b      	lsrs	r3, r3, #5
 800936c:	2264      	movs	r2, #100	; 0x64
 800936e:	fb02 f303 	mul.w	r3, r2, r3
 8009372:	1acb      	subs	r3, r1, r3
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	3332      	adds	r3, #50	; 0x32
 8009378:	4a33      	ldr	r2, [pc, #204]	; (8009448 <UART_SetConfig+0x4e4>)
 800937a:	fba2 2303 	umull	r2, r3, r2, r3
 800937e:	095b      	lsrs	r3, r3, #5
 8009380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009384:	441c      	add	r4, r3
 8009386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800938a:	2200      	movs	r2, #0
 800938c:	673b      	str	r3, [r7, #112]	; 0x70
 800938e:	677a      	str	r2, [r7, #116]	; 0x74
 8009390:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009394:	4642      	mov	r2, r8
 8009396:	464b      	mov	r3, r9
 8009398:	1891      	adds	r1, r2, r2
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	415b      	adcs	r3, r3
 800939e:	60fb      	str	r3, [r7, #12]
 80093a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093a4:	4641      	mov	r1, r8
 80093a6:	1851      	adds	r1, r2, r1
 80093a8:	6039      	str	r1, [r7, #0]
 80093aa:	4649      	mov	r1, r9
 80093ac:	414b      	adcs	r3, r1
 80093ae:	607b      	str	r3, [r7, #4]
 80093b0:	f04f 0200 	mov.w	r2, #0
 80093b4:	f04f 0300 	mov.w	r3, #0
 80093b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80093bc:	4659      	mov	r1, fp
 80093be:	00cb      	lsls	r3, r1, #3
 80093c0:	4651      	mov	r1, sl
 80093c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093c6:	4651      	mov	r1, sl
 80093c8:	00ca      	lsls	r2, r1, #3
 80093ca:	4610      	mov	r0, r2
 80093cc:	4619      	mov	r1, r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	4642      	mov	r2, r8
 80093d2:	189b      	adds	r3, r3, r2
 80093d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80093d6:	464b      	mov	r3, r9
 80093d8:	460a      	mov	r2, r1
 80093da:	eb42 0303 	adc.w	r3, r2, r3
 80093de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	663b      	str	r3, [r7, #96]	; 0x60
 80093ea:	667a      	str	r2, [r7, #100]	; 0x64
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	f04f 0300 	mov.w	r3, #0
 80093f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80093f8:	4649      	mov	r1, r9
 80093fa:	008b      	lsls	r3, r1, #2
 80093fc:	4641      	mov	r1, r8
 80093fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009402:	4641      	mov	r1, r8
 8009404:	008a      	lsls	r2, r1, #2
 8009406:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800940a:	f7f7 fc2d 	bl	8000c68 <__aeabi_uldivmod>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4b0d      	ldr	r3, [pc, #52]	; (8009448 <UART_SetConfig+0x4e4>)
 8009414:	fba3 1302 	umull	r1, r3, r3, r2
 8009418:	095b      	lsrs	r3, r3, #5
 800941a:	2164      	movs	r1, #100	; 0x64
 800941c:	fb01 f303 	mul.w	r3, r1, r3
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	011b      	lsls	r3, r3, #4
 8009424:	3332      	adds	r3, #50	; 0x32
 8009426:	4a08      	ldr	r2, [pc, #32]	; (8009448 <UART_SetConfig+0x4e4>)
 8009428:	fba2 2303 	umull	r2, r3, r2, r3
 800942c:	095b      	lsrs	r3, r3, #5
 800942e:	f003 020f 	and.w	r2, r3, #15
 8009432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4422      	add	r2, r4
 800943a:	609a      	str	r2, [r3, #8]
}
 800943c:	bf00      	nop
 800943e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009442:	46bd      	mov	sp, r7
 8009444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009448:	51eb851f 	.word	0x51eb851f

0800944c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800944c:	b5b0      	push	{r4, r5, r7, lr}
 800944e:	b08c      	sub	sp, #48	; 0x30
 8009450:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009452:	4b8f      	ldr	r3, [pc, #572]	; (8009690 <MX_LWIP_Init+0x244>)
 8009454:	22c0      	movs	r2, #192	; 0xc0
 8009456:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009458:	4b8d      	ldr	r3, [pc, #564]	; (8009690 <MX_LWIP_Init+0x244>)
 800945a:	22a8      	movs	r2, #168	; 0xa8
 800945c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 2;
 800945e:	4b8c      	ldr	r3, [pc, #560]	; (8009690 <MX_LWIP_Init+0x244>)
 8009460:	2202      	movs	r2, #2
 8009462:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 125;
 8009464:	4b8a      	ldr	r3, [pc, #552]	; (8009690 <MX_LWIP_Init+0x244>)
 8009466:	227d      	movs	r2, #125	; 0x7d
 8009468:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800946a:	4b8a      	ldr	r3, [pc, #552]	; (8009694 <MX_LWIP_Init+0x248>)
 800946c:	22ff      	movs	r2, #255	; 0xff
 800946e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009470:	4b88      	ldr	r3, [pc, #544]	; (8009694 <MX_LWIP_Init+0x248>)
 8009472:	22ff      	movs	r2, #255	; 0xff
 8009474:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009476:	4b87      	ldr	r3, [pc, #540]	; (8009694 <MX_LWIP_Init+0x248>)
 8009478:	22ff      	movs	r2, #255	; 0xff
 800947a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800947c:	4b85      	ldr	r3, [pc, #532]	; (8009694 <MX_LWIP_Init+0x248>)
 800947e:	2200      	movs	r2, #0
 8009480:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009482:	4b85      	ldr	r3, [pc, #532]	; (8009698 <MX_LWIP_Init+0x24c>)
 8009484:	22c0      	movs	r2, #192	; 0xc0
 8009486:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009488:	4b83      	ldr	r3, [pc, #524]	; (8009698 <MX_LWIP_Init+0x24c>)
 800948a:	22a8      	movs	r2, #168	; 0xa8
 800948c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 2;
 800948e:	4b82      	ldr	r3, [pc, #520]	; (8009698 <MX_LWIP_Init+0x24c>)
 8009490:	2202      	movs	r2, #2
 8009492:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009494:	4b80      	ldr	r3, [pc, #512]	; (8009698 <MX_LWIP_Init+0x24c>)
 8009496:	2201      	movs	r2, #1
 8009498:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800949a:	2100      	movs	r1, #0
 800949c:	2000      	movs	r0, #0
 800949e:	f00d f987 	bl	80167b0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80094a2:	4b7b      	ldr	r3, [pc, #492]	; (8009690 <MX_LWIP_Init+0x244>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	061a      	lsls	r2, r3, #24
 80094a8:	4b79      	ldr	r3, [pc, #484]	; (8009690 <MX_LWIP_Init+0x244>)
 80094aa:	785b      	ldrb	r3, [r3, #1]
 80094ac:	041b      	lsls	r3, r3, #16
 80094ae:	431a      	orrs	r2, r3
 80094b0:	4b77      	ldr	r3, [pc, #476]	; (8009690 <MX_LWIP_Init+0x244>)
 80094b2:	789b      	ldrb	r3, [r3, #2]
 80094b4:	021b      	lsls	r3, r3, #8
 80094b6:	4313      	orrs	r3, r2
 80094b8:	4a75      	ldr	r2, [pc, #468]	; (8009690 <MX_LWIP_Init+0x244>)
 80094ba:	78d2      	ldrb	r2, [r2, #3]
 80094bc:	4313      	orrs	r3, r2
 80094be:	061a      	lsls	r2, r3, #24
 80094c0:	4b73      	ldr	r3, [pc, #460]	; (8009690 <MX_LWIP_Init+0x244>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	0619      	lsls	r1, r3, #24
 80094c6:	4b72      	ldr	r3, [pc, #456]	; (8009690 <MX_LWIP_Init+0x244>)
 80094c8:	785b      	ldrb	r3, [r3, #1]
 80094ca:	041b      	lsls	r3, r3, #16
 80094cc:	4319      	orrs	r1, r3
 80094ce:	4b70      	ldr	r3, [pc, #448]	; (8009690 <MX_LWIP_Init+0x244>)
 80094d0:	789b      	ldrb	r3, [r3, #2]
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	430b      	orrs	r3, r1
 80094d6:	496e      	ldr	r1, [pc, #440]	; (8009690 <MX_LWIP_Init+0x244>)
 80094d8:	78c9      	ldrb	r1, [r1, #3]
 80094da:	430b      	orrs	r3, r1
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094e2:	431a      	orrs	r2, r3
 80094e4:	4b6a      	ldr	r3, [pc, #424]	; (8009690 <MX_LWIP_Init+0x244>)
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	0619      	lsls	r1, r3, #24
 80094ea:	4b69      	ldr	r3, [pc, #420]	; (8009690 <MX_LWIP_Init+0x244>)
 80094ec:	785b      	ldrb	r3, [r3, #1]
 80094ee:	041b      	lsls	r3, r3, #16
 80094f0:	4319      	orrs	r1, r3
 80094f2:	4b67      	ldr	r3, [pc, #412]	; (8009690 <MX_LWIP_Init+0x244>)
 80094f4:	789b      	ldrb	r3, [r3, #2]
 80094f6:	021b      	lsls	r3, r3, #8
 80094f8:	430b      	orrs	r3, r1
 80094fa:	4965      	ldr	r1, [pc, #404]	; (8009690 <MX_LWIP_Init+0x244>)
 80094fc:	78c9      	ldrb	r1, [r1, #3]
 80094fe:	430b      	orrs	r3, r1
 8009500:	0a1b      	lsrs	r3, r3, #8
 8009502:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009506:	431a      	orrs	r2, r3
 8009508:	4b61      	ldr	r3, [pc, #388]	; (8009690 <MX_LWIP_Init+0x244>)
 800950a:	781b      	ldrb	r3, [r3, #0]
 800950c:	0619      	lsls	r1, r3, #24
 800950e:	4b60      	ldr	r3, [pc, #384]	; (8009690 <MX_LWIP_Init+0x244>)
 8009510:	785b      	ldrb	r3, [r3, #1]
 8009512:	041b      	lsls	r3, r3, #16
 8009514:	4319      	orrs	r1, r3
 8009516:	4b5e      	ldr	r3, [pc, #376]	; (8009690 <MX_LWIP_Init+0x244>)
 8009518:	789b      	ldrb	r3, [r3, #2]
 800951a:	021b      	lsls	r3, r3, #8
 800951c:	430b      	orrs	r3, r1
 800951e:	495c      	ldr	r1, [pc, #368]	; (8009690 <MX_LWIP_Init+0x244>)
 8009520:	78c9      	ldrb	r1, [r1, #3]
 8009522:	430b      	orrs	r3, r1
 8009524:	0e1b      	lsrs	r3, r3, #24
 8009526:	4313      	orrs	r3, r2
 8009528:	4a5c      	ldr	r2, [pc, #368]	; (800969c <MX_LWIP_Init+0x250>)
 800952a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800952c:	4b59      	ldr	r3, [pc, #356]	; (8009694 <MX_LWIP_Init+0x248>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	061a      	lsls	r2, r3, #24
 8009532:	4b58      	ldr	r3, [pc, #352]	; (8009694 <MX_LWIP_Init+0x248>)
 8009534:	785b      	ldrb	r3, [r3, #1]
 8009536:	041b      	lsls	r3, r3, #16
 8009538:	431a      	orrs	r2, r3
 800953a:	4b56      	ldr	r3, [pc, #344]	; (8009694 <MX_LWIP_Init+0x248>)
 800953c:	789b      	ldrb	r3, [r3, #2]
 800953e:	021b      	lsls	r3, r3, #8
 8009540:	4313      	orrs	r3, r2
 8009542:	4a54      	ldr	r2, [pc, #336]	; (8009694 <MX_LWIP_Init+0x248>)
 8009544:	78d2      	ldrb	r2, [r2, #3]
 8009546:	4313      	orrs	r3, r2
 8009548:	061a      	lsls	r2, r3, #24
 800954a:	4b52      	ldr	r3, [pc, #328]	; (8009694 <MX_LWIP_Init+0x248>)
 800954c:	781b      	ldrb	r3, [r3, #0]
 800954e:	0619      	lsls	r1, r3, #24
 8009550:	4b50      	ldr	r3, [pc, #320]	; (8009694 <MX_LWIP_Init+0x248>)
 8009552:	785b      	ldrb	r3, [r3, #1]
 8009554:	041b      	lsls	r3, r3, #16
 8009556:	4319      	orrs	r1, r3
 8009558:	4b4e      	ldr	r3, [pc, #312]	; (8009694 <MX_LWIP_Init+0x248>)
 800955a:	789b      	ldrb	r3, [r3, #2]
 800955c:	021b      	lsls	r3, r3, #8
 800955e:	430b      	orrs	r3, r1
 8009560:	494c      	ldr	r1, [pc, #304]	; (8009694 <MX_LWIP_Init+0x248>)
 8009562:	78c9      	ldrb	r1, [r1, #3]
 8009564:	430b      	orrs	r3, r1
 8009566:	021b      	lsls	r3, r3, #8
 8009568:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800956c:	431a      	orrs	r2, r3
 800956e:	4b49      	ldr	r3, [pc, #292]	; (8009694 <MX_LWIP_Init+0x248>)
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	0619      	lsls	r1, r3, #24
 8009574:	4b47      	ldr	r3, [pc, #284]	; (8009694 <MX_LWIP_Init+0x248>)
 8009576:	785b      	ldrb	r3, [r3, #1]
 8009578:	041b      	lsls	r3, r3, #16
 800957a:	4319      	orrs	r1, r3
 800957c:	4b45      	ldr	r3, [pc, #276]	; (8009694 <MX_LWIP_Init+0x248>)
 800957e:	789b      	ldrb	r3, [r3, #2]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	430b      	orrs	r3, r1
 8009584:	4943      	ldr	r1, [pc, #268]	; (8009694 <MX_LWIP_Init+0x248>)
 8009586:	78c9      	ldrb	r1, [r1, #3]
 8009588:	430b      	orrs	r3, r1
 800958a:	0a1b      	lsrs	r3, r3, #8
 800958c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009590:	431a      	orrs	r2, r3
 8009592:	4b40      	ldr	r3, [pc, #256]	; (8009694 <MX_LWIP_Init+0x248>)
 8009594:	781b      	ldrb	r3, [r3, #0]
 8009596:	0619      	lsls	r1, r3, #24
 8009598:	4b3e      	ldr	r3, [pc, #248]	; (8009694 <MX_LWIP_Init+0x248>)
 800959a:	785b      	ldrb	r3, [r3, #1]
 800959c:	041b      	lsls	r3, r3, #16
 800959e:	4319      	orrs	r1, r3
 80095a0:	4b3c      	ldr	r3, [pc, #240]	; (8009694 <MX_LWIP_Init+0x248>)
 80095a2:	789b      	ldrb	r3, [r3, #2]
 80095a4:	021b      	lsls	r3, r3, #8
 80095a6:	430b      	orrs	r3, r1
 80095a8:	493a      	ldr	r1, [pc, #232]	; (8009694 <MX_LWIP_Init+0x248>)
 80095aa:	78c9      	ldrb	r1, [r1, #3]
 80095ac:	430b      	orrs	r3, r1
 80095ae:	0e1b      	lsrs	r3, r3, #24
 80095b0:	4313      	orrs	r3, r2
 80095b2:	4a3b      	ldr	r2, [pc, #236]	; (80096a0 <MX_LWIP_Init+0x254>)
 80095b4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80095b6:	4b38      	ldr	r3, [pc, #224]	; (8009698 <MX_LWIP_Init+0x24c>)
 80095b8:	781b      	ldrb	r3, [r3, #0]
 80095ba:	061a      	lsls	r2, r3, #24
 80095bc:	4b36      	ldr	r3, [pc, #216]	; (8009698 <MX_LWIP_Init+0x24c>)
 80095be:	785b      	ldrb	r3, [r3, #1]
 80095c0:	041b      	lsls	r3, r3, #16
 80095c2:	431a      	orrs	r2, r3
 80095c4:	4b34      	ldr	r3, [pc, #208]	; (8009698 <MX_LWIP_Init+0x24c>)
 80095c6:	789b      	ldrb	r3, [r3, #2]
 80095c8:	021b      	lsls	r3, r3, #8
 80095ca:	4313      	orrs	r3, r2
 80095cc:	4a32      	ldr	r2, [pc, #200]	; (8009698 <MX_LWIP_Init+0x24c>)
 80095ce:	78d2      	ldrb	r2, [r2, #3]
 80095d0:	4313      	orrs	r3, r2
 80095d2:	061a      	lsls	r2, r3, #24
 80095d4:	4b30      	ldr	r3, [pc, #192]	; (8009698 <MX_LWIP_Init+0x24c>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	0619      	lsls	r1, r3, #24
 80095da:	4b2f      	ldr	r3, [pc, #188]	; (8009698 <MX_LWIP_Init+0x24c>)
 80095dc:	785b      	ldrb	r3, [r3, #1]
 80095de:	041b      	lsls	r3, r3, #16
 80095e0:	4319      	orrs	r1, r3
 80095e2:	4b2d      	ldr	r3, [pc, #180]	; (8009698 <MX_LWIP_Init+0x24c>)
 80095e4:	789b      	ldrb	r3, [r3, #2]
 80095e6:	021b      	lsls	r3, r3, #8
 80095e8:	430b      	orrs	r3, r1
 80095ea:	492b      	ldr	r1, [pc, #172]	; (8009698 <MX_LWIP_Init+0x24c>)
 80095ec:	78c9      	ldrb	r1, [r1, #3]
 80095ee:	430b      	orrs	r3, r1
 80095f0:	021b      	lsls	r3, r3, #8
 80095f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80095f6:	431a      	orrs	r2, r3
 80095f8:	4b27      	ldr	r3, [pc, #156]	; (8009698 <MX_LWIP_Init+0x24c>)
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	0619      	lsls	r1, r3, #24
 80095fe:	4b26      	ldr	r3, [pc, #152]	; (8009698 <MX_LWIP_Init+0x24c>)
 8009600:	785b      	ldrb	r3, [r3, #1]
 8009602:	041b      	lsls	r3, r3, #16
 8009604:	4319      	orrs	r1, r3
 8009606:	4b24      	ldr	r3, [pc, #144]	; (8009698 <MX_LWIP_Init+0x24c>)
 8009608:	789b      	ldrb	r3, [r3, #2]
 800960a:	021b      	lsls	r3, r3, #8
 800960c:	430b      	orrs	r3, r1
 800960e:	4922      	ldr	r1, [pc, #136]	; (8009698 <MX_LWIP_Init+0x24c>)
 8009610:	78c9      	ldrb	r1, [r1, #3]
 8009612:	430b      	orrs	r3, r1
 8009614:	0a1b      	lsrs	r3, r3, #8
 8009616:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800961a:	431a      	orrs	r2, r3
 800961c:	4b1e      	ldr	r3, [pc, #120]	; (8009698 <MX_LWIP_Init+0x24c>)
 800961e:	781b      	ldrb	r3, [r3, #0]
 8009620:	0619      	lsls	r1, r3, #24
 8009622:	4b1d      	ldr	r3, [pc, #116]	; (8009698 <MX_LWIP_Init+0x24c>)
 8009624:	785b      	ldrb	r3, [r3, #1]
 8009626:	041b      	lsls	r3, r3, #16
 8009628:	4319      	orrs	r1, r3
 800962a:	4b1b      	ldr	r3, [pc, #108]	; (8009698 <MX_LWIP_Init+0x24c>)
 800962c:	789b      	ldrb	r3, [r3, #2]
 800962e:	021b      	lsls	r3, r3, #8
 8009630:	430b      	orrs	r3, r1
 8009632:	4919      	ldr	r1, [pc, #100]	; (8009698 <MX_LWIP_Init+0x24c>)
 8009634:	78c9      	ldrb	r1, [r1, #3]
 8009636:	430b      	orrs	r3, r1
 8009638:	0e1b      	lsrs	r3, r3, #24
 800963a:	4313      	orrs	r3, r2
 800963c:	4a19      	ldr	r2, [pc, #100]	; (80096a4 <MX_LWIP_Init+0x258>)
 800963e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8009640:	4b19      	ldr	r3, [pc, #100]	; (80096a8 <MX_LWIP_Init+0x25c>)
 8009642:	9302      	str	r3, [sp, #8]
 8009644:	4b19      	ldr	r3, [pc, #100]	; (80096ac <MX_LWIP_Init+0x260>)
 8009646:	9301      	str	r3, [sp, #4]
 8009648:	2300      	movs	r3, #0
 800964a:	9300      	str	r3, [sp, #0]
 800964c:	4b15      	ldr	r3, [pc, #84]	; (80096a4 <MX_LWIP_Init+0x258>)
 800964e:	4a14      	ldr	r2, [pc, #80]	; (80096a0 <MX_LWIP_Init+0x254>)
 8009650:	4912      	ldr	r1, [pc, #72]	; (800969c <MX_LWIP_Init+0x250>)
 8009652:	4817      	ldr	r0, [pc, #92]	; (80096b0 <MX_LWIP_Init+0x264>)
 8009654:	f00e f940 	bl	80178d8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009658:	4815      	ldr	r0, [pc, #84]	; (80096b0 <MX_LWIP_Init+0x264>)
 800965a:	f00e faef 	bl	8017c3c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800965e:	4814      	ldr	r0, [pc, #80]	; (80096b0 <MX_LWIP_Init+0x264>)
 8009660:	f00e fafc 	bl	8017c5c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009664:	4913      	ldr	r1, [pc, #76]	; (80096b4 <MX_LWIP_Init+0x268>)
 8009666:	4812      	ldr	r0, [pc, #72]	; (80096b0 <MX_LWIP_Init+0x264>)
 8009668:	f00e fbfa 	bl	8017e60 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, 2048);
 800966c:	4b12      	ldr	r3, [pc, #72]	; (80096b8 <MX_LWIP_Init+0x26c>)
 800966e:	1d3c      	adds	r4, r7, #4
 8009670:	461d      	mov	r5, r3
 8009672:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009674:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009676:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800967a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800967e:	1d3b      	adds	r3, r7, #4
 8009680:	490b      	ldr	r1, [pc, #44]	; (80096b0 <MX_LWIP_Init+0x264>)
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fd22 	bl	800a0cc <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009688:	bf00      	nop
 800968a:	3720      	adds	r7, #32
 800968c:	46bd      	mov	sp, r7
 800968e:	bdb0      	pop	{r4, r5, r7, pc}
 8009690:	200020b8 	.word	0x200020b8
 8009694:	200020bc 	.word	0x200020bc
 8009698:	200020c0 	.word	0x200020c0
 800969c:	200020ac 	.word	0x200020ac
 80096a0:	200020b0 	.word	0x200020b0
 80096a4:	200020b4 	.word	0x200020b4
 80096a8:	080166c1 	.word	0x080166c1
 80096ac:	08009b95 	.word	0x08009b95
 80096b0:	20002078 	.word	0x20002078
 80096b4:	080096bd 	.word	0x080096bd
 80096b8:	08029d08 	.word	0x08029d08

080096bc <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b082      	sub	sp, #8
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80096d8:	4b04      	ldr	r3, [pc, #16]	; (80096ec <HAL_ETH_RxCpltCallback+0x1c>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4618      	mov	r0, r3
 80096de:	f000 fe71 	bl	800a3c4 <osSemaphoreRelease>
}
 80096e2:	bf00      	nop
 80096e4:	3708      	adds	r7, #8
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}
 80096ea:	bf00      	nop
 80096ec:	20006b90 	.word	0x20006b90

080096f0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b082      	sub	sp, #8
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80096f8:	4b04      	ldr	r3, [pc, #16]	; (800970c <HAL_ETH_TxCpltCallback+0x1c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 fe61 	bl	800a3c4 <osSemaphoreRelease>
}
 8009702:	bf00      	nop
 8009704:	3708      	adds	r7, #8
 8009706:	46bd      	mov	sp, r7
 8009708:	bd80      	pop	{r7, pc}
 800970a:	bf00      	nop
 800970c:	20006b94 	.word	0x20006b94

08009710 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7fb fef3 	bl	8005504 <HAL_ETH_GetDMAError>
 800971e:	4603      	mov	r3, r0
 8009720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009724:	2b80      	cmp	r3, #128	; 0x80
 8009726:	d104      	bne.n	8009732 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8009728:	4b04      	ldr	r3, [pc, #16]	; (800973c <HAL_ETH_ErrorCallback+0x2c>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4618      	mov	r0, r3
 800972e:	f000 fe49 	bl	800a3c4 <osSemaphoreRelease>
  }
}
 8009732:	bf00      	nop
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}
 800973a:	bf00      	nop
 800973c:	20006b90 	.word	0x20006b90

08009740 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8009740:	b5b0      	push	{r4, r5, r7, lr}
 8009742:	b0ac      	sub	sp, #176	; 0xb0
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009748:	2300      	movs	r3, #0
 800974a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 800974e:	2300      	movs	r3, #0
 8009750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 8009754:	2300      	movs	r3, #0
 8009756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 800975a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800975e:	2264      	movs	r2, #100	; 0x64
 8009760:	2100      	movs	r1, #0
 8009762:	4618      	mov	r0, r3
 8009764:	f01b fcf2 	bl	802514c <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009768:	4b90      	ldr	r3, [pc, #576]	; (80099ac <low_level_init+0x26c>)
 800976a:	4a91      	ldr	r2, [pc, #580]	; (80099b0 <low_level_init+0x270>)
 800976c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x02;
 800976e:	2302      	movs	r3, #2
 8009770:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x00;
 8009774:	2300      	movs	r3, #0
 8009776:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0x00;
 800977a:	2300      	movs	r3, #0
 800977c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0xA1;
 8009780:	23a1      	movs	r3, #161	; 0xa1
 8009782:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0xB2;
 8009786:	23b2      	movs	r3, #178	; 0xb2
 8009788:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0xC3;
 800978c:	23c3      	movs	r3, #195	; 0xc3
 800978e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 8009792:	4a86      	ldr	r2, [pc, #536]	; (80099ac <low_level_init+0x26c>)
 8009794:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009798:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800979a:	4b84      	ldr	r3, [pc, #528]	; (80099ac <low_level_init+0x26c>)
 800979c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80097a0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80097a2:	4b82      	ldr	r3, [pc, #520]	; (80099ac <low_level_init+0x26c>)
 80097a4:	4a83      	ldr	r2, [pc, #524]	; (80099b4 <low_level_init+0x274>)
 80097a6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80097a8:	4b80      	ldr	r3, [pc, #512]	; (80099ac <low_level_init+0x26c>)
 80097aa:	4a83      	ldr	r2, [pc, #524]	; (80099b8 <low_level_init+0x278>)
 80097ac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80097ae:	4b7f      	ldr	r3, [pc, #508]	; (80099ac <low_level_init+0x26c>)
 80097b0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80097b4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80097b6:	487d      	ldr	r0, [pc, #500]	; (80099ac <low_level_init+0x26c>)
 80097b8:	f7fb f85a 	bl	8004870 <HAL_ETH_Init>
 80097bc:	4603      	mov	r3, r0
 80097be:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80097c2:	2238      	movs	r2, #56	; 0x38
 80097c4:	2100      	movs	r1, #0
 80097c6:	487d      	ldr	r0, [pc, #500]	; (80099bc <low_level_init+0x27c>)
 80097c8:	f01b fcc0 	bl	802514c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80097cc:	4b7b      	ldr	r3, [pc, #492]	; (80099bc <low_level_init+0x27c>)
 80097ce:	2221      	movs	r2, #33	; 0x21
 80097d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80097d2:	4b7a      	ldr	r3, [pc, #488]	; (80099bc <low_level_init+0x27c>)
 80097d4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80097d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80097da:	4b78      	ldr	r3, [pc, #480]	; (80099bc <low_level_init+0x27c>)
 80097dc:	2200      	movs	r2, #0
 80097de:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80097e0:	4877      	ldr	r0, [pc, #476]	; (80099c0 <low_level_init+0x280>)
 80097e2:	f00d ff33 	bl	801764c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2206      	movs	r2, #6
 80097ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80097ee:	4b6f      	ldr	r3, [pc, #444]	; (80099ac <low_level_init+0x26c>)
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	781a      	ldrb	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80097fa:	4b6c      	ldr	r3, [pc, #432]	; (80099ac <low_level_init+0x26c>)
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	785a      	ldrb	r2, [r3, #1]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009806:	4b69      	ldr	r3, [pc, #420]	; (80099ac <low_level_init+0x26c>)
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	789a      	ldrb	r2, [r3, #2]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009812:	4b66      	ldr	r3, [pc, #408]	; (80099ac <low_level_init+0x26c>)
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	78da      	ldrb	r2, [r3, #3]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800981e:	4b63      	ldr	r3, [pc, #396]	; (80099ac <low_level_init+0x26c>)
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	791a      	ldrb	r2, [r3, #4]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800982a:	4b60      	ldr	r3, [pc, #384]	; (80099ac <low_level_init+0x26c>)
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	795a      	ldrb	r2, [r3, #5]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800983c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009844:	f043 030a 	orr.w	r3, r3, #10
 8009848:	b2da      	uxtb	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 8009850:	2300      	movs	r3, #0
 8009852:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009854:	2300      	movs	r3, #0
 8009856:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 8009858:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800985c:	2101      	movs	r1, #1
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fd30 	bl	800a2c4 <osSemaphoreCreate>
 8009864:	4603      	mov	r3, r0
 8009866:	4a57      	ldr	r2, [pc, #348]	; (80099c4 <low_level_init+0x284>)
 8009868:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800986a:	2300      	movs	r3, #0
 800986c:	627b      	str	r3, [r7, #36]	; 0x24
 800986e:	2300      	movs	r3, #0
 8009870:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 8009872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009876:	2101      	movs	r1, #1
 8009878:	4618      	mov	r0, r3
 800987a:	f000 fd23 	bl	800a2c4 <osSemaphoreCreate>
 800987e:	4603      	mov	r3, r0
 8009880:	4a51      	ldr	r2, [pc, #324]	; (80099c8 <low_level_init+0x288>)
 8009882:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8009884:	4b4f      	ldr	r3, [pc, #316]	; (80099c4 <low_level_init+0x284>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2100      	movs	r1, #0
 800988a:	4618      	mov	r0, r3
 800988c:	f000 fd4c 	bl	800a328 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 8009890:	4b4d      	ldr	r3, [pc, #308]	; (80099c8 <low_level_init+0x288>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2100      	movs	r1, #0
 8009896:	4618      	mov	r0, r3
 8009898:	f000 fd46 	bl	800a328 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800989c:	4b4b      	ldr	r3, [pc, #300]	; (80099cc <low_level_init+0x28c>)
 800989e:	f107 0408 	add.w	r4, r7, #8
 80098a2:	461d      	mov	r5, r3
 80098a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80098a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80098a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80098ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 80098b0:	f107 0308 	add.w	r3, r7, #8
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fc08 	bl	800a0cc <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 80098bc:	4944      	ldr	r1, [pc, #272]	; (80099d0 <low_level_init+0x290>)
 80098be:	4845      	ldr	r0, [pc, #276]	; (80099d4 <low_level_init+0x294>)
 80098c0:	f7fa fd2d 	bl	800431e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 80098c4:	4843      	ldr	r0, [pc, #268]	; (80099d4 <low_level_init+0x294>)
 80098c6:	f7fa fd5c 	bl	8004382 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 80098ca:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d165      	bne.n	800999e <low_level_init+0x25e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 80098d2:	4840      	ldr	r0, [pc, #256]	; (80099d4 <low_level_init+0x294>)
 80098d4:	f7fa fdfd 	bl	80044d2 <DP83848_GetLinkState>
 80098d8:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 80098dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	dc06      	bgt.n	80098f2 <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f00e fa8b 	bl	8017e00 <netif_set_link_down>
      netif_set_down(netif);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f00e fa22 	bl	8017d34 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80098f0:	e057      	b.n	80099a2 <low_level_init+0x262>
      switch (PHYLinkState)
 80098f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098f6:	3b02      	subs	r3, #2
 80098f8:	2b03      	cmp	r3, #3
 80098fa:	d82b      	bhi.n	8009954 <low_level_init+0x214>
 80098fc:	a201      	add	r2, pc, #4	; (adr r2, 8009904 <low_level_init+0x1c4>)
 80098fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009902:	bf00      	nop
 8009904:	08009915 	.word	0x08009915
 8009908:	08009927 	.word	0x08009927
 800990c:	08009937 	.word	0x08009937
 8009910:	08009947 	.word	0x08009947
        duplex = ETH_FULLDUPLEX_MODE;
 8009914:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 800991c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009920:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8009924:	e01f      	b.n	8009966 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8009926:	2300      	movs	r3, #0
 8009928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 800992c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009930:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8009934:	e017      	b.n	8009966 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8009936:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800993a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 800993e:	2300      	movs	r3, #0
 8009940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8009944:	e00f      	b.n	8009966 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 8009946:	2300      	movs	r3, #0
 8009948:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 800994c:	2300      	movs	r3, #0
 800994e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8009952:	e008      	b.n	8009966 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 8009954:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009958:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 800995c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009960:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8009964:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009966:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800996a:	4619      	mov	r1, r3
 800996c:	480f      	ldr	r0, [pc, #60]	; (80099ac <low_level_init+0x26c>)
 800996e:	f7fb fc6f 	bl	8005250 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8009972:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009976:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 8009978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800997c:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800997e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009982:	4619      	mov	r1, r3
 8009984:	4809      	ldr	r0, [pc, #36]	; (80099ac <low_level_init+0x26c>)
 8009986:	f7fb fd4d 	bl	8005424 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800998a:	4808      	ldr	r0, [pc, #32]	; (80099ac <low_level_init+0x26c>)
 800998c:	f7fa ffee 	bl	800496c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f00e f963 	bl	8017c5c <netif_set_up>
    netif_set_link_up(netif);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f00e f9fe 	bl	8017d98 <netif_set_link_up>
}
 800999c:	e001      	b.n	80099a2 <low_level_init+0x262>
    Error_Handler();
 800999e:	f7f9 fc27 	bl	80031f0 <Error_Handler>
}
 80099a2:	bf00      	nop
 80099a4:	37b0      	adds	r7, #176	; 0xb0
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bdb0      	pop	{r4, r5, r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20006b98 	.word	0x20006b98
 80099b0:	40028000 	.word	0x40028000
 80099b4:	20006af0 	.word	0x20006af0
 80099b8:	20006a50 	.word	0x20006a50
 80099bc:	20006c48 	.word	0x20006c48
 80099c0:	0802dca4 	.word	0x0802dca4
 80099c4:	20006b90 	.word	0x20006b90
 80099c8:	20006b94 	.word	0x20006b94
 80099cc:	08029d2c 	.word	0x08029d2c
 80099d0:	20000014 	.word	0x20000014
 80099d4:	20006c80 	.word	0x20006c80

080099d8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b092      	sub	sp, #72	; 0x48
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 80099e2:	2300      	movs	r3, #0
 80099e4:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 80099ea:	2300      	movs	r3, #0
 80099ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 80099f0:	f107 030c 	add.w	r3, r7, #12
 80099f4:	2230      	movs	r2, #48	; 0x30
 80099f6:	2100      	movs	r1, #0
 80099f8:	4618      	mov	r0, r3
 80099fa:	f01b fba7 	bl	802514c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80099fe:	f107 030c 	add.w	r3, r7, #12
 8009a02:	2230      	movs	r2, #48	; 0x30
 8009a04:	2100      	movs	r1, #0
 8009a06:	4618      	mov	r0, r3
 8009a08:	f01b fba0 	bl	802514c <memset>

  for(q = p; q != NULL; q = q->next)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a10:	e045      	b.n	8009a9e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009a12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a14:	2b03      	cmp	r3, #3
 8009a16:	d902      	bls.n	8009a1e <low_level_output+0x46>
      return ERR_IF;
 8009a18:	f06f 030b 	mvn.w	r3, #11
 8009a1c:	e06c      	b.n	8009af8 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 8009a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a20:	6859      	ldr	r1, [r3, #4]
 8009a22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a24:	4613      	mov	r3, r2
 8009a26:	005b      	lsls	r3, r3, #1
 8009a28:	4413      	add	r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	3348      	adds	r3, #72	; 0x48
 8009a2e:	443b      	add	r3, r7
 8009a30:	3b3c      	subs	r3, #60	; 0x3c
 8009a32:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a36:	895b      	ldrh	r3, [r3, #10]
 8009a38:	4619      	mov	r1, r3
 8009a3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	005b      	lsls	r3, r3, #1
 8009a40:	4413      	add	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	3348      	adds	r3, #72	; 0x48
 8009a46:	443b      	add	r3, r7
 8009a48:	3b38      	subs	r3, #56	; 0x38
 8009a4a:	6019      	str	r1, [r3, #0]

    if(i>0)
 8009a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d011      	beq.n	8009a76 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8009a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a54:	1e5a      	subs	r2, r3, #1
 8009a56:	f107 000c 	add.w	r0, r7, #12
 8009a5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	440b      	add	r3, r1
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	18c1      	adds	r1, r0, r3
 8009a66:	4613      	mov	r3, r2
 8009a68:	005b      	lsls	r3, r3, #1
 8009a6a:	4413      	add	r3, r2
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	3348      	adds	r3, #72	; 0x48
 8009a70:	443b      	add	r3, r7
 8009a72:	3b34      	subs	r3, #52	; 0x34
 8009a74:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8009a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d109      	bne.n	8009a92 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8009a7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a80:	4613      	mov	r3, r2
 8009a82:	005b      	lsls	r3, r3, #1
 8009a84:	4413      	add	r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	3348      	adds	r3, #72	; 0x48
 8009a8a:	443b      	add	r3, r7
 8009a8c:	3b34      	subs	r3, #52	; 0x34
 8009a8e:	2200      	movs	r2, #0
 8009a90:	601a      	str	r2, [r3, #0]
    }

    i++;
 8009a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a94:	3301      	adds	r3, #1
 8009a96:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8009a98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1b6      	bne.n	8009a12 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	891b      	ldrh	r3, [r3, #8]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	4b15      	ldr	r3, [pc, #84]	; (8009b00 <low_level_output+0x128>)
 8009aac:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009aae:	4a14      	ldr	r2, [pc, #80]	; (8009b00 <low_level_output+0x128>)
 8009ab0:	f107 030c 	add.w	r3, r7, #12
 8009ab4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009ab6:	4a12      	ldr	r2, [pc, #72]	; (8009b00 <low_level_output+0x128>)
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8009abc:	6838      	ldr	r0, [r7, #0]
 8009abe:	f00e fe23 	bl	8018708 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 8009ac2:	490f      	ldr	r1, [pc, #60]	; (8009b00 <low_level_output+0x128>)
 8009ac4:	480f      	ldr	r0, [pc, #60]	; (8009b04 <low_level_output+0x12c>)
 8009ac6:	f7fb f85e 	bl	8004b86 <HAL_ETH_Transmit_IT>
 8009aca:	4603      	mov	r3, r0
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d10e      	bne.n	8009aee <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8009ad0:	bf00      	nop
 8009ad2:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <low_level_output+0x130>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009ada:	4618      	mov	r0, r3
 8009adc:	f000 fc24 	bl	800a328 <osSemaphoreWait>
 8009ae0:	4603      	mov	r3, r0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d1f5      	bne.n	8009ad2 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8009ae6:	4807      	ldr	r0, [pc, #28]	; (8009b04 <low_level_output+0x12c>)
 8009ae8:	f7fb f9ec 	bl	8004ec4 <HAL_ETH_ReleaseTxPacket>
 8009aec:	e002      	b.n	8009af4 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 8009aee:	6838      	ldr	r0, [r7, #0]
 8009af0:	f00e fd64 	bl	80185bc <pbuf_free>
  }

  return errval;
 8009af4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009af8:	4618      	mov	r0, r3
 8009afa:	3748      	adds	r7, #72	; 0x48
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20006c48 	.word	0x20006c48
 8009b04:	20006b98 	.word	0x20006b98
 8009b08:	20006b94 	.word	0x20006b94

08009b0c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009b14:	2300      	movs	r3, #0
 8009b16:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8009b18:	4b07      	ldr	r3, [pc, #28]	; (8009b38 <low_level_input+0x2c>)
 8009b1a:	781b      	ldrb	r3, [r3, #0]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d105      	bne.n	8009b2c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009b20:	f107 030c 	add.w	r3, r7, #12
 8009b24:	4619      	mov	r1, r3
 8009b26:	4805      	ldr	r0, [pc, #20]	; (8009b3c <low_level_input+0x30>)
 8009b28:	f7fb f889 	bl	8004c3e <HAL_ETH_ReadData>
  }

  return p;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3710      	adds	r7, #16
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20006a4c 	.word	0x20006a4c
 8009b3c:	20006b98 	.word	0x20006b98

08009b40 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009b50:	4b0f      	ldr	r3, [pc, #60]	; (8009b90 <ethernetif_input+0x50>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f000 fbe5 	bl	800a328 <osSemaphoreWait>
 8009b5e:	4603      	mov	r3, r0
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1f5      	bne.n	8009b50 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8009b64:	68b8      	ldr	r0, [r7, #8]
 8009b66:	f7ff ffd1 	bl	8009b0c <low_level_input>
 8009b6a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d00a      	beq.n	8009b88 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	68b9      	ldr	r1, [r7, #8]
 8009b78:	68f8      	ldr	r0, [r7, #12]
 8009b7a:	4798      	blx	r3
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f00e fd1a 	bl	80185bc <pbuf_free>
          }
        }
      } while(p!=NULL);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d1ea      	bne.n	8009b64 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009b8e:	e7df      	b.n	8009b50 <ethernetif_input+0x10>
 8009b90:	20006b90 	.word	0x20006b90

08009b94 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d106      	bne.n	8009bb0 <ethernetif_init+0x1c>
 8009ba2:	4b0e      	ldr	r3, [pc, #56]	; (8009bdc <ethernetif_init+0x48>)
 8009ba4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8009ba8:	490d      	ldr	r1, [pc, #52]	; (8009be0 <ethernetif_init+0x4c>)
 8009baa:	480e      	ldr	r0, [pc, #56]	; (8009be4 <ethernetif_init+0x50>)
 8009bac:	f01b f908 	bl	8024dc0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2273      	movs	r2, #115	; 0x73
 8009bb4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2274      	movs	r2, #116	; 0x74
 8009bbc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a09      	ldr	r2, [pc, #36]	; (8009be8 <ethernetif_init+0x54>)
 8009bc4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	4a08      	ldr	r2, [pc, #32]	; (8009bec <ethernetif_init+0x58>)
 8009bca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7ff fdb7 	bl	8009740 <low_level_init>

  return ERR_OK;
 8009bd2:	2300      	movs	r3, #0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}
 8009bdc:	08029d48 	.word	0x08029d48
 8009be0:	08029d64 	.word	0x08029d64
 8009be4:	08029d74 	.word	0x08029d74
 8009be8:	080208c9 	.word	0x080208c9
 8009bec:	080099d9 	.word	0x080099d9

08009bf0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b084      	sub	sp, #16
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009bfc:	68f9      	ldr	r1, [r7, #12]
 8009bfe:	4809      	ldr	r0, [pc, #36]	; (8009c24 <pbuf_free_custom+0x34>)
 8009c00:	f00d fe14 	bl	801782c <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009c04:	4b08      	ldr	r3, [pc, #32]	; (8009c28 <pbuf_free_custom+0x38>)
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d107      	bne.n	8009c1c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009c0c:	4b06      	ldr	r3, [pc, #24]	; (8009c28 <pbuf_free_custom+0x38>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8009c12:	4b06      	ldr	r3, [pc, #24]	; (8009c2c <pbuf_free_custom+0x3c>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fbd4 	bl	800a3c4 <osSemaphoreRelease>
  }
}
 8009c1c:	bf00      	nop
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	0802dca4 	.word	0x0802dca4
 8009c28:	20006a4c 	.word	0x20006a4c
 8009c2c:	20006b90 	.word	0x20006b90

08009c30 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009c34:	f7fa fd0a 	bl	800464c <HAL_GetTick>
 8009c38:	4603      	mov	r3, r0
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	bd80      	pop	{r7, pc}
	...

08009c40 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b08e      	sub	sp, #56	; 0x38
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	601a      	str	r2, [r3, #0]
 8009c50:	605a      	str	r2, [r3, #4]
 8009c52:	609a      	str	r2, [r3, #8]
 8009c54:	60da      	str	r2, [r3, #12]
 8009c56:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4a4a      	ldr	r2, [pc, #296]	; (8009d88 <HAL_ETH_MspInit+0x148>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	f040 808d 	bne.w	8009d7e <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009c64:	2300      	movs	r3, #0
 8009c66:	623b      	str	r3, [r7, #32]
 8009c68:	4b48      	ldr	r3, [pc, #288]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c6c:	4a47      	ldr	r2, [pc, #284]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009c72:	6313      	str	r3, [r2, #48]	; 0x30
 8009c74:	4b45      	ldr	r3, [pc, #276]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c7c:	623b      	str	r3, [r7, #32]
 8009c7e:	6a3b      	ldr	r3, [r7, #32]
 8009c80:	2300      	movs	r3, #0
 8009c82:	61fb      	str	r3, [r7, #28]
 8009c84:	4b41      	ldr	r3, [pc, #260]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c88:	4a40      	ldr	r2, [pc, #256]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009c8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8009c90:	4b3e      	ldr	r3, [pc, #248]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c98:	61fb      	str	r3, [r7, #28]
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	61bb      	str	r3, [r7, #24]
 8009ca0:	4b3a      	ldr	r3, [pc, #232]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca4:	4a39      	ldr	r2, [pc, #228]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009ca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009caa:	6313      	str	r3, [r2, #48]	; 0x30
 8009cac:	4b37      	ldr	r3, [pc, #220]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009cb4:	61bb      	str	r3, [r7, #24]
 8009cb6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009cb8:	2300      	movs	r3, #0
 8009cba:	617b      	str	r3, [r7, #20]
 8009cbc:	4b33      	ldr	r3, [pc, #204]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc0:	4a32      	ldr	r2, [pc, #200]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009cc2:	f043 0304 	orr.w	r3, r3, #4
 8009cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8009cc8:	4b30      	ldr	r3, [pc, #192]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ccc:	f003 0304 	and.w	r3, r3, #4
 8009cd0:	617b      	str	r3, [r7, #20]
 8009cd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	613b      	str	r3, [r7, #16]
 8009cd8:	4b2c      	ldr	r3, [pc, #176]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cdc:	4a2b      	ldr	r2, [pc, #172]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009cde:	f043 0301 	orr.w	r3, r3, #1
 8009ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8009ce4:	4b29      	ldr	r3, [pc, #164]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	613b      	str	r3, [r7, #16]
 8009cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	4b25      	ldr	r3, [pc, #148]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cf8:	4a24      	ldr	r2, [pc, #144]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009cfa:	f043 0302 	orr.w	r3, r3, #2
 8009cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8009d00:	4b22      	ldr	r3, [pc, #136]	; (8009d8c <HAL_ETH_MspInit+0x14c>)
 8009d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d04:	f003 0302 	and.w	r3, r3, #2
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009d0c:	2332      	movs	r3, #50	; 0x32
 8009d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d10:	2302      	movs	r3, #2
 8009d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d14:	2300      	movs	r3, #0
 8009d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d18:	2303      	movs	r3, #3
 8009d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009d1c:	230b      	movs	r3, #11
 8009d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d24:	4619      	mov	r1, r3
 8009d26:	481a      	ldr	r0, [pc, #104]	; (8009d90 <HAL_ETH_MspInit+0x150>)
 8009d28:	f7fb fffe 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009d2c:	2386      	movs	r3, #134	; 0x86
 8009d2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d30:	2302      	movs	r3, #2
 8009d32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d34:	2300      	movs	r3, #0
 8009d36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009d3c:	230b      	movs	r3, #11
 8009d3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009d40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d44:	4619      	mov	r1, r3
 8009d46:	4813      	ldr	r0, [pc, #76]	; (8009d94 <HAL_ETH_MspInit+0x154>)
 8009d48:	f7fb ffee 	bl	8005d28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009d4c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009d50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009d52:	2302      	movs	r3, #2
 8009d54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009d56:	2300      	movs	r3, #0
 8009d58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009d5a:	2303      	movs	r3, #3
 8009d5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009d5e:	230b      	movs	r3, #11
 8009d60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d66:	4619      	mov	r1, r3
 8009d68:	480b      	ldr	r0, [pc, #44]	; (8009d98 <HAL_ETH_MspInit+0x158>)
 8009d6a:	f7fb ffdd 	bl	8005d28 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009d6e:	2200      	movs	r2, #0
 8009d70:	2105      	movs	r1, #5
 8009d72:	203d      	movs	r0, #61	; 0x3d
 8009d74:	f7fa fd52 	bl	800481c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8009d78:	203d      	movs	r0, #61	; 0x3d
 8009d7a:	f7fa fd6b 	bl	8004854 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009d7e:	bf00      	nop
 8009d80:	3738      	adds	r7, #56	; 0x38
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	40028000 	.word	0x40028000
 8009d8c:	40023800 	.word	0x40023800
 8009d90:	40020800 	.word	0x40020800
 8009d94:	40020000 	.word	0x40020000
 8009d98:	40020400 	.word	0x40020400

08009d9c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009da0:	4802      	ldr	r0, [pc, #8]	; (8009dac <ETH_PHY_IO_Init+0x10>)
 8009da2:	f7fb fb59 	bl	8005458 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009da6:	2300      	movs	r3, #0
}
 8009da8:	4618      	mov	r0, r3
 8009daa:	bd80      	pop	{r7, pc}
 8009dac:	20006b98 	.word	0x20006b98

08009db0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009db0:	b480      	push	{r7}
 8009db2:	af00      	add	r7, sp, #0
  return 0;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68ba      	ldr	r2, [r7, #8]
 8009dd0:	68f9      	ldr	r1, [r7, #12]
 8009dd2:	4807      	ldr	r0, [pc, #28]	; (8009df0 <ETH_PHY_IO_ReadReg+0x30>)
 8009dd4:	f7fb f9a8 	bl	8005128 <HAL_ETH_ReadPHYRegister>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d002      	beq.n	8009de4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009dde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009de2:	e000      	b.n	8009de6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3710      	adds	r7, #16
 8009dea:	46bd      	mov	sp, r7
 8009dec:	bd80      	pop	{r7, pc}
 8009dee:	bf00      	nop
 8009df0:	20006b98 	.word	0x20006b98

08009df4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	60f8      	str	r0, [r7, #12]
 8009dfc:	60b9      	str	r1, [r7, #8]
 8009dfe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	68ba      	ldr	r2, [r7, #8]
 8009e04:	68f9      	ldr	r1, [r7, #12]
 8009e06:	4807      	ldr	r0, [pc, #28]	; (8009e24 <ETH_PHY_IO_WriteReg+0x30>)
 8009e08:	f7fb f9d9 	bl	80051be <HAL_ETH_WritePHYRegister>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d002      	beq.n	8009e18 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009e16:	e000      	b.n	8009e1a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009e18:	2300      	movs	r3, #0
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	20006b98 	.word	0x20006b98

08009e28 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009e2c:	f7fa fc0e 	bl	800464c <HAL_GetTick>
 8009e30:	4603      	mov	r3, r0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	bd80      	pop	{r7, pc}
	...

08009e38 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b0a0      	sub	sp, #128	; 0x80
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009e40:	f107 0308 	add.w	r3, r7, #8
 8009e44:	2264      	movs	r2, #100	; 0x64
 8009e46:	2100      	movs	r1, #0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f01b f97f 	bl	802514c <memset>
  int32_t PHYLinkState = 0;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009e56:	2300      	movs	r3, #0
 8009e58:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8009e62:	483a      	ldr	r0, [pc, #232]	; (8009f4c <ethernet_link_thread+0x114>)
 8009e64:	f7fa fb35 	bl	80044d2 <DP83848_GetLinkState>
 8009e68:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8009e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009e70:	089b      	lsrs	r3, r3, #2
 8009e72:	f003 0301 	and.w	r3, r3, #1
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00c      	beq.n	8009e96 <ethernet_link_thread+0x5e>
 8009e7c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009e7e:	2b01      	cmp	r3, #1
 8009e80:	dc09      	bgt.n	8009e96 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8009e82:	4833      	ldr	r0, [pc, #204]	; (8009f50 <ethernet_link_thread+0x118>)
 8009e84:	f7fa fe00 	bl	8004a88 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009e88:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e8a:	f00d ff53 	bl	8017d34 <netif_set_down>
    netif_set_link_down(netif);
 8009e8e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009e90:	f00d ffb6 	bl	8017e00 <netif_set_link_down>
 8009e94:	e055      	b.n	8009f42 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8009e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e98:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009e9c:	f003 0304 	and.w	r3, r3, #4
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d14e      	bne.n	8009f42 <ethernet_link_thread+0x10a>
 8009ea4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ea6:	2b01      	cmp	r3, #1
 8009ea8:	dd4b      	ble.n	8009f42 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8009eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009eac:	3b02      	subs	r3, #2
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d82a      	bhi.n	8009f08 <ethernet_link_thread+0xd0>
 8009eb2:	a201      	add	r2, pc, #4	; (adr r2, 8009eb8 <ethernet_link_thread+0x80>)
 8009eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb8:	08009ec9 	.word	0x08009ec9
 8009ebc:	08009edb 	.word	0x08009edb
 8009ec0:	08009eeb 	.word	0x08009eeb
 8009ec4:	08009efb 	.word	0x08009efb
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009ec8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009ecc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009ece:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ed2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009ed8:	e017      	b.n	8009f0a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009eda:	2300      	movs	r3, #0
 8009edc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8009ede:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009ee2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009ee8:	e00f      	b.n	8009f0a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009eee:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009ef8:	e007      	b.n	8009f0a <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009efa:	2300      	movs	r3, #0
 8009efc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8009efe:	2300      	movs	r3, #0
 8009f00:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8009f02:	2301      	movs	r3, #1
 8009f04:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8009f06:	e000      	b.n	8009f0a <ethernet_link_thread+0xd2>
    default:
      break;
 8009f08:	bf00      	nop
    }

    if(linkchanged)
 8009f0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d018      	beq.n	8009f42 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009f10:	f107 0308 	add.w	r3, r7, #8
 8009f14:	4619      	mov	r1, r3
 8009f16:	480e      	ldr	r0, [pc, #56]	; (8009f50 <ethernet_link_thread+0x118>)
 8009f18:	f7fb f99a 	bl	8005250 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009f1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009f1e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f22:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009f24:	f107 0308 	add.w	r3, r7, #8
 8009f28:	4619      	mov	r1, r3
 8009f2a:	4809      	ldr	r0, [pc, #36]	; (8009f50 <ethernet_link_thread+0x118>)
 8009f2c:	f7fb fa7a 	bl	8005424 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009f30:	4807      	ldr	r0, [pc, #28]	; (8009f50 <ethernet_link_thread+0x118>)
 8009f32:	f7fa fd1b 	bl	800496c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009f36:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f38:	f00d fe90 	bl	8017c5c <netif_set_up>
      netif_set_link_up(netif);
 8009f3c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009f3e:	f00d ff2b 	bl	8017d98 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009f42:	2064      	movs	r0, #100	; 0x64
 8009f44:	f000 f90e 	bl	800a164 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8009f48:	e78b      	b.n	8009e62 <ethernet_link_thread+0x2a>
 8009f4a:	bf00      	nop
 8009f4c:	20006c80 	.word	0x20006c80
 8009f50:	20006b98 	.word	0x20006b98

08009f54 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b086      	sub	sp, #24
 8009f58:	af02      	add	r7, sp, #8
 8009f5a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009f5c:	4812      	ldr	r0, [pc, #72]	; (8009fa8 <HAL_ETH_RxAllocateCallback+0x54>)
 8009f5e:	f00d fbf1 	bl	8017744 <memp_malloc_pool>
 8009f62:	60f8      	str	r0, [r7, #12]
  if (p)
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d014      	beq.n	8009f94 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	f103 0220 	add.w	r2, r3, #32
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	4a0d      	ldr	r2, [pc, #52]	; (8009fac <HAL_ETH_RxAllocateCallback+0x58>)
 8009f78:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8009f82:	9201      	str	r2, [sp, #4]
 8009f84:	9300      	str	r3, [sp, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2241      	movs	r2, #65	; 0x41
 8009f8a:	2100      	movs	r1, #0
 8009f8c:	2000      	movs	r0, #0
 8009f8e:	f00e f95b 	bl	8018248 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009f92:	e005      	b.n	8009fa0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009f94:	4b06      	ldr	r3, [pc, #24]	; (8009fb0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009f96:	2201      	movs	r2, #1
 8009f98:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
}
 8009fa0:	bf00      	nop
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	0802dca4 	.word	0x0802dca4
 8009fac:	08009bf1 	.word	0x08009bf1
 8009fb0:	20006a4c 	.word	0x20006a4c

08009fb4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b089      	sub	sp, #36	; 0x24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
 8009fc0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	3b20      	subs	r3, #32
 8009fd2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009fda:	69fb      	ldr	r3, [r7, #28]
 8009fdc:	2200      	movs	r2, #0
 8009fde:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	887a      	ldrh	r2, [r7, #2]
 8009fe4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d103      	bne.n	8009ff6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	601a      	str	r2, [r3, #0]
 8009ff4:	e003      	b.n	8009ffe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	69fa      	ldr	r2, [r7, #28]
 8009ffc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	69fa      	ldr	r2, [r7, #28]
 800a002:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	61fb      	str	r3, [r7, #28]
 800a00a:	e009      	b.n	800a020 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800a00c:	69fb      	ldr	r3, [r7, #28]
 800a00e:	891a      	ldrh	r2, [r3, #8]
 800a010:	887b      	ldrh	r3, [r7, #2]
 800a012:	4413      	add	r3, r2
 800a014:	b29a      	uxth	r2, r3
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	61fb      	str	r3, [r7, #28]
 800a020:	69fb      	ldr	r3, [r7, #28]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1f2      	bne.n	800a00c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 800a026:	bf00      	nop
 800a028:	bf00      	nop
 800a02a:	3724      	adds	r7, #36	; 0x24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f00e fabd 	bl	80185bc <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800a042:	bf00      	nop
 800a044:	3708      	adds	r7, #8
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a04a:	b480      	push	{r7}
 800a04c:	b085      	sub	sp, #20
 800a04e:	af00      	add	r7, sp, #0
 800a050:	4603      	mov	r3, r0
 800a052:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a054:	2300      	movs	r3, #0
 800a056:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a058:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a05c:	2b84      	cmp	r3, #132	; 0x84
 800a05e:	d005      	beq.n	800a06c <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a060:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	4413      	add	r3, r2
 800a068:	3303      	adds	r3, #3
 800a06a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a06c:	68fb      	ldr	r3, [r7, #12]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3714      	adds	r7, #20
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b083      	sub	sp, #12
 800a07e:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a080:	f3ef 8305 	mrs	r3, IPSR
 800a084:	607b      	str	r3, [r7, #4]
  return(result);
 800a086:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a088:	2b00      	cmp	r3, #0
 800a08a:	bf14      	ite	ne
 800a08c:	2301      	movne	r3, #1
 800a08e:	2300      	moveq	r3, #0
 800a090:	b2db      	uxtb	r3, r3
}
 800a092:	4618      	mov	r0, r3
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a09e:	b580      	push	{r7, lr}
 800a0a0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a0a2:	f001 fd99 	bl	800bbd8 <vTaskStartScheduler>
  
  return osOK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800a0b0:	f7ff ffe3 	bl	800a07a <inHandlerMode>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800a0ba:	f001 feb7 	bl	800be2c <xTaskGetTickCountFromISR>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	e002      	b.n	800a0c8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800a0c2:	f001 fea3 	bl	800be0c <xTaskGetTickCount>
 800a0c6:	4603      	mov	r3, r0
  }
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0ce:	b089      	sub	sp, #36	; 0x24
 800a0d0:	af04      	add	r7, sp, #16
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	695b      	ldr	r3, [r3, #20]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d020      	beq.n	800a120 <osThreadCreate+0x54>
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	699b      	ldr	r3, [r3, #24]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d01c      	beq.n	800a120 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	685c      	ldr	r4, [r3, #4]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	691e      	ldr	r6, [r3, #16]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7ff ffa6 	bl	800a04a <makeFreeRtosPriority>
 800a0fe:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	695b      	ldr	r3, [r3, #20]
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a108:	9202      	str	r2, [sp, #8]
 800a10a:	9301      	str	r3, [sp, #4]
 800a10c:	9100      	str	r1, [sp, #0]
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	4632      	mov	r2, r6
 800a112:	4629      	mov	r1, r5
 800a114:	4620      	mov	r0, r4
 800a116:	f001 fb81 	bl	800b81c <xTaskCreateStatic>
 800a11a:	4603      	mov	r3, r0
 800a11c:	60fb      	str	r3, [r7, #12]
 800a11e:	e01c      	b.n	800a15a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685c      	ldr	r4, [r3, #4]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a12c:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a134:	4618      	mov	r0, r3
 800a136:	f7ff ff88 	bl	800a04a <makeFreeRtosPriority>
 800a13a:	4602      	mov	r2, r0
 800a13c:	f107 030c 	add.w	r3, r7, #12
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	9200      	str	r2, [sp, #0]
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	4632      	mov	r2, r6
 800a148:	4629      	mov	r1, r5
 800a14a:	4620      	mov	r0, r4
 800a14c:	f001 fbc3 	bl	800b8d6 <xTaskCreate>
 800a150:	4603      	mov	r3, r0
 800a152:	2b01      	cmp	r3, #1
 800a154:	d001      	beq.n	800a15a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a156:	2300      	movs	r3, #0
 800a158:	e000      	b.n	800a15c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a15a:	68fb      	ldr	r3, [r7, #12]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a164 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <osDelay+0x16>
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	e000      	b.n	800a17c <osDelay+0x18>
 800a17a:	2301      	movs	r3, #1
 800a17c:	4618      	mov	r0, r3
 800a17e:	f001 fcf7 	bl	800bb70 <vTaskDelay>
  
  return osOK;
 800a182:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b082      	sub	sp, #8
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d007      	beq.n	800a1ac <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	4619      	mov	r1, r3
 800a1a2:	2001      	movs	r0, #1
 800a1a4:	f000 fc7d 	bl	800aaa2 <xQueueCreateMutexStatic>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	e003      	b.n	800a1b4 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800a1ac:	2001      	movs	r0, #1
 800a1ae:	f000 fc60 	bl	800aa72 <xQueueCreateMutex>
 800a1b2:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d101      	bne.n	800a1d4 <osMutexWait+0x18>
    return osErrorParameter;
 800a1d0:	2380      	movs	r3, #128	; 0x80
 800a1d2:	e03a      	b.n	800a24a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a1de:	d103      	bne.n	800a1e8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800a1e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a1e4:	60fb      	str	r3, [r7, #12]
 800a1e6:	e009      	b.n	800a1fc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d006      	beq.n	800a1fc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d101      	bne.n	800a1fc <osMutexWait+0x40>
      ticks = 1;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a1fc:	f7ff ff3d 	bl	800a07a <inHandlerMode>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d017      	beq.n	800a236 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a206:	f107 0308 	add.w	r3, r7, #8
 800a20a:	461a      	mov	r2, r3
 800a20c:	2100      	movs	r1, #0
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 f874 	bl	800b2fc <xQueueReceiveFromISR>
 800a214:	4603      	mov	r3, r0
 800a216:	2b01      	cmp	r3, #1
 800a218:	d001      	beq.n	800a21e <osMutexWait+0x62>
      return osErrorOS;
 800a21a:	23ff      	movs	r3, #255	; 0xff
 800a21c:	e015      	b.n	800a24a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d011      	beq.n	800a248 <osMutexWait+0x8c>
 800a224:	4b0b      	ldr	r3, [pc, #44]	; (800a254 <osMutexWait+0x98>)
 800a226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a22a:	601a      	str	r2, [r3, #0]
 800a22c:	f3bf 8f4f 	dsb	sy
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	e008      	b.n	800a248 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800a236:	68f9      	ldr	r1, [r7, #12]
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 ff53 	bl	800b0e4 <xQueueSemaphoreTake>
 800a23e:	4603      	mov	r3, r0
 800a240:	2b01      	cmp	r3, #1
 800a242:	d001      	beq.n	800a248 <osMutexWait+0x8c>
    return osErrorOS;
 800a244:	23ff      	movs	r3, #255	; 0xff
 800a246:	e000      	b.n	800a24a <osMutexWait+0x8e>
  }
  
  return osOK;
 800a248:	2300      	movs	r3, #0
}
 800a24a:	4618      	mov	r0, r3
 800a24c:	3710      	adds	r7, #16
 800a24e:	46bd      	mov	sp, r7
 800a250:	bd80      	pop	{r7, pc}
 800a252:	bf00      	nop
 800a254:	e000ed04 	.word	0xe000ed04

0800a258 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	b084      	sub	sp, #16
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a260:	2300      	movs	r3, #0
 800a262:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a264:	2300      	movs	r3, #0
 800a266:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800a268:	f7ff ff07 	bl	800a07a <inHandlerMode>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d016      	beq.n	800a2a0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800a272:	f107 0308 	add.w	r3, r7, #8
 800a276:	4619      	mov	r1, r3
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fdc6 	bl	800ae0a <xQueueGiveFromISR>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b01      	cmp	r3, #1
 800a282:	d001      	beq.n	800a288 <osMutexRelease+0x30>
      return osErrorOS;
 800a284:	23ff      	movs	r3, #255	; 0xff
 800a286:	e017      	b.n	800a2b8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a288:	68bb      	ldr	r3, [r7, #8]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d013      	beq.n	800a2b6 <osMutexRelease+0x5e>
 800a28e:	4b0c      	ldr	r3, [pc, #48]	; (800a2c0 <osMutexRelease+0x68>)
 800a290:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a294:	601a      	str	r2, [r3, #0]
 800a296:	f3bf 8f4f 	dsb	sy
 800a29a:	f3bf 8f6f 	isb	sy
 800a29e:	e00a      	b.n	800a2b6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2100      	movs	r1, #0
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 fc16 	bl	800aad8 <xQueueGenericSend>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b01      	cmp	r3, #1
 800a2b0:	d001      	beq.n	800a2b6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800a2b2:	23ff      	movs	r3, #255	; 0xff
 800a2b4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3710      	adds	r7, #16
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	e000ed04 	.word	0xe000ed04

0800a2c4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af02      	add	r7, sp, #8
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	685b      	ldr	r3, [r3, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00f      	beq.n	800a2f6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	2b01      	cmp	r3, #1
 800a2da:	d10a      	bne.n	800a2f2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	2203      	movs	r2, #3
 800a2e2:	9200      	str	r2, [sp, #0]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	2100      	movs	r1, #0
 800a2e8:	2001      	movs	r0, #1
 800a2ea:	f000 fad7 	bl	800a89c <xQueueGenericCreateStatic>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	e016      	b.n	800a320 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	e014      	b.n	800a320 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d110      	bne.n	800a31e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800a2fc:	2203      	movs	r2, #3
 800a2fe:	2100      	movs	r1, #0
 800a300:	2001      	movs	r0, #1
 800a302:	f000 fb43 	bl	800a98c <xQueueGenericCreate>
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d005      	beq.n	800a31a <osSemaphoreCreate+0x56>
 800a30e:	2300      	movs	r3, #0
 800a310:	2200      	movs	r2, #0
 800a312:	2100      	movs	r1, #0
 800a314:	68f8      	ldr	r0, [r7, #12]
 800a316:	f000 fbdf 	bl	800aad8 <xQueueGenericSend>
      return sema;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	e000      	b.n	800a320 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800a31e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800a320:	4618      	mov	r0, r3
 800a322:	3710      	adds	r7, #16
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b084      	sub	sp, #16
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800a332:	2300      	movs	r3, #0
 800a334:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d101      	bne.n	800a340 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800a33c:	2380      	movs	r3, #128	; 0x80
 800a33e:	e03a      	b.n	800a3b6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800a340:	2300      	movs	r3, #0
 800a342:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a34a:	d103      	bne.n	800a354 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800a34c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a350:	60fb      	str	r3, [r7, #12]
 800a352:	e009      	b.n	800a368 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d006      	beq.n	800a368 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d101      	bne.n	800a368 <osSemaphoreWait+0x40>
      ticks = 1;
 800a364:	2301      	movs	r3, #1
 800a366:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800a368:	f7ff fe87 	bl	800a07a <inHandlerMode>
 800a36c:	4603      	mov	r3, r0
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d017      	beq.n	800a3a2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a372:	f107 0308 	add.w	r3, r7, #8
 800a376:	461a      	mov	r2, r3
 800a378:	2100      	movs	r1, #0
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 ffbe 	bl	800b2fc <xQueueReceiveFromISR>
 800a380:	4603      	mov	r3, r0
 800a382:	2b01      	cmp	r3, #1
 800a384:	d001      	beq.n	800a38a <osSemaphoreWait+0x62>
      return osErrorOS;
 800a386:	23ff      	movs	r3, #255	; 0xff
 800a388:	e015      	b.n	800a3b6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d011      	beq.n	800a3b4 <osSemaphoreWait+0x8c>
 800a390:	4b0b      	ldr	r3, [pc, #44]	; (800a3c0 <osSemaphoreWait+0x98>)
 800a392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a396:	601a      	str	r2, [r3, #0]
 800a398:	f3bf 8f4f 	dsb	sy
 800a39c:	f3bf 8f6f 	isb	sy
 800a3a0:	e008      	b.n	800a3b4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800a3a2:	68f9      	ldr	r1, [r7, #12]
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 fe9d 	bl	800b0e4 <xQueueSemaphoreTake>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d001      	beq.n	800a3b4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800a3b0:	23ff      	movs	r3, #255	; 0xff
 800a3b2:	e000      	b.n	800a3b6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800a3b4:	2300      	movs	r3, #0
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3710      	adds	r7, #16
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	e000ed04 	.word	0xe000ed04

0800a3c4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800a3d4:	f7ff fe51 	bl	800a07a <inHandlerMode>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d016      	beq.n	800a40c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800a3de:	f107 0308 	add.w	r3, r7, #8
 800a3e2:	4619      	mov	r1, r3
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f000 fd10 	bl	800ae0a <xQueueGiveFromISR>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d001      	beq.n	800a3f4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800a3f0:	23ff      	movs	r3, #255	; 0xff
 800a3f2:	e017      	b.n	800a424 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d013      	beq.n	800a422 <osSemaphoreRelease+0x5e>
 800a3fa:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <osSemaphoreRelease+0x68>)
 800a3fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a400:	601a      	str	r2, [r3, #0]
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	f3bf 8f6f 	isb	sy
 800a40a:	e00a      	b.n	800a422 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800a40c:	2300      	movs	r3, #0
 800a40e:	2200      	movs	r2, #0
 800a410:	2100      	movs	r1, #0
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 fb60 	bl	800aad8 <xQueueGenericSend>
 800a418:	4603      	mov	r3, r0
 800a41a:	2b01      	cmp	r3, #1
 800a41c:	d001      	beq.n	800a422 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800a41e:	23ff      	movs	r3, #255	; 0xff
 800a420:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800a422:	68fb      	ldr	r3, [r7, #12]
}
 800a424:	4618      	mov	r0, r3
 800a426:	3710      	adds	r7, #16
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	e000ed04 	.word	0xe000ed04

0800a430 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a438:	f7ff fe1f 	bl	800a07a <inHandlerMode>
 800a43c:	4603      	mov	r3, r0
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d001      	beq.n	800a446 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a442:	2382      	movs	r3, #130	; 0x82
 800a444:	e003      	b.n	800a44e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a446:	6878      	ldr	r0, [r7, #4]
 800a448:	f001 f814 	bl	800b474 <vQueueDelete>

  return osOK; 
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a456:	b590      	push	{r4, r7, lr}
 800a458:	b085      	sub	sp, #20
 800a45a:	af02      	add	r7, sp, #8
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	689b      	ldr	r3, [r3, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d011      	beq.n	800a48c <osMessageCreate+0x36>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d00d      	beq.n	800a48c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6818      	ldr	r0, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6859      	ldr	r1, [r3, #4]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	689a      	ldr	r2, [r3, #8]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	2400      	movs	r4, #0
 800a482:	9400      	str	r4, [sp, #0]
 800a484:	f000 fa0a 	bl	800a89c <xQueueGenericCreateStatic>
 800a488:	4603      	mov	r3, r0
 800a48a:	e008      	b.n	800a49e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	2200      	movs	r2, #0
 800a496:	4619      	mov	r1, r3
 800a498:	f000 fa78 	bl	800a98c <xQueueGenericCreate>
 800a49c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd90      	pop	{r4, r7, pc}
	...

0800a4a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b086      	sub	sp, #24
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	60f8      	str	r0, [r7, #12]
 800a4b0:	60b9      	str	r1, [r7, #8]
 800a4b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d101      	bne.n	800a4c6 <osMessagePut+0x1e>
    ticks = 1;
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a4c6:	f7ff fdd8 	bl	800a07a <inHandlerMode>
 800a4ca:	4603      	mov	r3, r0
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d018      	beq.n	800a502 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a4d0:	f107 0210 	add.w	r2, r7, #16
 800a4d4:	f107 0108 	add.w	r1, r7, #8
 800a4d8:	2300      	movs	r3, #0
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 fbfa 	bl	800acd4 <xQueueGenericSendFromISR>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d001      	beq.n	800a4ea <osMessagePut+0x42>
      return osErrorOS;
 800a4e6:	23ff      	movs	r3, #255	; 0xff
 800a4e8:	e018      	b.n	800a51c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d014      	beq.n	800a51a <osMessagePut+0x72>
 800a4f0:	4b0c      	ldr	r3, [pc, #48]	; (800a524 <osMessagePut+0x7c>)
 800a4f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4f6:	601a      	str	r2, [r3, #0]
 800a4f8:	f3bf 8f4f 	dsb	sy
 800a4fc:	f3bf 8f6f 	isb	sy
 800a500:	e00b      	b.n	800a51a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a502:	f107 0108 	add.w	r1, r7, #8
 800a506:	2300      	movs	r3, #0
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f000 fae4 	bl	800aad8 <xQueueGenericSend>
 800a510:	4603      	mov	r3, r0
 800a512:	2b01      	cmp	r3, #1
 800a514:	d001      	beq.n	800a51a <osMessagePut+0x72>
      return osErrorOS;
 800a516:	23ff      	movs	r3, #255	; 0xff
 800a518:	e000      	b.n	800a51c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	3718      	adds	r7, #24
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}
 800a524:	e000ed04 	.word	0xe000ed04

0800a528 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a528:	b590      	push	{r4, r7, lr}
 800a52a:	b08b      	sub	sp, #44	; 0x2c
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	60f8      	str	r0, [r7, #12]
 800a530:	60b9      	str	r1, [r7, #8]
 800a532:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a538:	2300      	movs	r3, #0
 800a53a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a53c:	68bb      	ldr	r3, [r7, #8]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10a      	bne.n	800a558 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a542:	2380      	movs	r3, #128	; 0x80
 800a544:	617b      	str	r3, [r7, #20]
    return event;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	461c      	mov	r4, r3
 800a54a:	f107 0314 	add.w	r3, r7, #20
 800a54e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a556:	e054      	b.n	800a602 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a558:	2300      	movs	r3, #0
 800a55a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a55c:	2300      	movs	r3, #0
 800a55e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a566:	d103      	bne.n	800a570 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a56c:	627b      	str	r3, [r7, #36]	; 0x24
 800a56e:	e009      	b.n	800a584 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d006      	beq.n	800a584 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <osMessageGet+0x5c>
      ticks = 1;
 800a580:	2301      	movs	r3, #1
 800a582:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a584:	f7ff fd79 	bl	800a07a <inHandlerMode>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d01c      	beq.n	800a5c8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a58e:	f107 0220 	add.w	r2, r7, #32
 800a592:	f107 0314 	add.w	r3, r7, #20
 800a596:	3304      	adds	r3, #4
 800a598:	4619      	mov	r1, r3
 800a59a:	68b8      	ldr	r0, [r7, #8]
 800a59c:	f000 feae 	bl	800b2fc <xQueueReceiveFromISR>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b01      	cmp	r3, #1
 800a5a4:	d102      	bne.n	800a5ac <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a5a6:	2310      	movs	r3, #16
 800a5a8:	617b      	str	r3, [r7, #20]
 800a5aa:	e001      	b.n	800a5b0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d01d      	beq.n	800a5f2 <osMessageGet+0xca>
 800a5b6:	4b15      	ldr	r3, [pc, #84]	; (800a60c <osMessageGet+0xe4>)
 800a5b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	e014      	b.n	800a5f2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a5c8:	f107 0314 	add.w	r3, r7, #20
 800a5cc:	3304      	adds	r3, #4
 800a5ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5d0:	4619      	mov	r1, r3
 800a5d2:	68b8      	ldr	r0, [r7, #8]
 800a5d4:	f000 fca6 	bl	800af24 <xQueueReceive>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	2b01      	cmp	r3, #1
 800a5dc:	d102      	bne.n	800a5e4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a5de:	2310      	movs	r3, #16
 800a5e0:	617b      	str	r3, [r7, #20]
 800a5e2:	e006      	b.n	800a5f2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d101      	bne.n	800a5ee <osMessageGet+0xc6>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	e000      	b.n	800a5f0 <osMessageGet+0xc8>
 800a5ee:	2340      	movs	r3, #64	; 0x40
 800a5f0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	461c      	mov	r4, r3
 800a5f6:	f107 0314 	add.w	r3, r7, #20
 800a5fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a5fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	372c      	adds	r7, #44	; 0x2c
 800a606:	46bd      	mov	sp, r7
 800a608:	bd90      	pop	{r4, r7, pc}
 800a60a:	bf00      	nop
 800a60c:	e000ed04 	.word	0xe000ed04

0800a610 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a618:	f7ff fd2f 	bl	800a07a <inHandlerMode>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d004      	beq.n	800a62c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 ff08 	bl	800b438 <uxQueueMessagesWaitingFromISR>
 800a628:	4603      	mov	r3, r0
 800a62a:	e003      	b.n	800a634 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 fee5 	bl	800b3fc <uxQueueMessagesWaiting>
 800a632:	4603      	mov	r3, r0
  }
}
 800a634:	4618      	mov	r0, r3
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a644:	f7ff fd19 	bl	800a07a <inHandlerMode>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d001      	beq.n	800a652 <osMessageDelete+0x16>
    return osErrorISR;
 800a64e:	2382      	movs	r3, #130	; 0x82
 800a650:	e003      	b.n	800a65a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f000 ff0e 	bl	800b474 <vQueueDelete>

  return osOK; 
 800a658:	2300      	movs	r3, #0
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3708      	adds	r7, #8
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a662:	b480      	push	{r7}
 800a664:	b083      	sub	sp, #12
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f103 0208 	add.w	r2, r3, #8
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a67a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f103 0208 	add.w	r2, r3, #8
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f103 0208 	add.w	r2, r3, #8
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a696:	bf00      	nop
 800a698:	370c      	adds	r7, #12
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6b0:	bf00      	nop
 800a6b2:	370c      	adds	r7, #12
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b085      	sub	sp, #20
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
 800a6c4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	689a      	ldr	r2, [r3, #8]
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	683a      	ldr	r2, [r7, #0]
 800a6e0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	683a      	ldr	r2, [r7, #0]
 800a6e6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	1c5a      	adds	r2, r3, #1
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	601a      	str	r2, [r3, #0]
}
 800a6f8:	bf00      	nop
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a71a:	d103      	bne.n	800a724 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	691b      	ldr	r3, [r3, #16]
 800a720:	60fb      	str	r3, [r7, #12]
 800a722:	e00c      	b.n	800a73e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	3308      	adds	r3, #8
 800a728:	60fb      	str	r3, [r7, #12]
 800a72a:	e002      	b.n	800a732 <vListInsert+0x2e>
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	60fb      	str	r3, [r7, #12]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	68ba      	ldr	r2, [r7, #8]
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d2f6      	bcs.n	800a72c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	685a      	ldr	r2, [r3, #4]
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	683a      	ldr	r2, [r7, #0]
 800a74c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	683a      	ldr	r2, [r7, #0]
 800a758:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	687a      	ldr	r2, [r7, #4]
 800a75e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	1c5a      	adds	r2, r3, #1
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	601a      	str	r2, [r3, #0]
}
 800a76a:	bf00      	nop
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr

0800a776 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a776:	b480      	push	{r7}
 800a778:	b085      	sub	sp, #20
 800a77a:	af00      	add	r7, sp, #0
 800a77c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	687a      	ldr	r2, [r7, #4]
 800a78a:	6892      	ldr	r2, [r2, #8]
 800a78c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	6852      	ldr	r2, [r2, #4]
 800a796:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d103      	bne.n	800a7aa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	689a      	ldr	r2, [r3, #8]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	1e5a      	subs	r2, r3, #1
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3714      	adds	r7, #20
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c8:	4770      	bx	lr
	...

0800a7cc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b084      	sub	sp, #16
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10a      	bne.n	800a7f6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a7f6:	f002 fcd5 	bl	800d1a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a802:	68f9      	ldr	r1, [r7, #12]
 800a804:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a806:	fb01 f303 	mul.w	r3, r1, r3
 800a80a:	441a      	add	r2, r3
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681a      	ldr	r2, [r3, #0]
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a826:	3b01      	subs	r3, #1
 800a828:	68f9      	ldr	r1, [r7, #12]
 800a82a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a82c:	fb01 f303 	mul.w	r3, r1, r3
 800a830:	441a      	add	r2, r3
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	22ff      	movs	r2, #255	; 0xff
 800a83a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	22ff      	movs	r2, #255	; 0xff
 800a842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d114      	bne.n	800a876 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d01a      	beq.n	800a88a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3310      	adds	r3, #16
 800a858:	4618      	mov	r0, r3
 800a85a:	f001 fc63 	bl	800c124 <xTaskRemoveFromEventList>
 800a85e:	4603      	mov	r3, r0
 800a860:	2b00      	cmp	r3, #0
 800a862:	d012      	beq.n	800a88a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a864:	4b0c      	ldr	r3, [pc, #48]	; (800a898 <xQueueGenericReset+0xcc>)
 800a866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a86a:	601a      	str	r2, [r3, #0]
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	e009      	b.n	800a88a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	3310      	adds	r3, #16
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fef1 	bl	800a662 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	3324      	adds	r3, #36	; 0x24
 800a884:	4618      	mov	r0, r3
 800a886:	f7ff feec 	bl	800a662 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a88a:	f002 fcbb 	bl	800d204 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a88e:	2301      	movs	r3, #1
}
 800a890:	4618      	mov	r0, r3
 800a892:	3710      	adds	r7, #16
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	e000ed04 	.word	0xe000ed04

0800a89c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b08e      	sub	sp, #56	; 0x38
 800a8a0:	af02      	add	r7, sp, #8
 800a8a2:	60f8      	str	r0, [r7, #12]
 800a8a4:	60b9      	str	r1, [r7, #8]
 800a8a6:	607a      	str	r2, [r7, #4]
 800a8a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d10a      	bne.n	800a8c6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8c2:	bf00      	nop
 800a8c4:	e7fe      	b.n	800a8c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d10a      	bne.n	800a8e2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8d0:	f383 8811 	msr	BASEPRI, r3
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	f3bf 8f4f 	dsb	sy
 800a8dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8de:	bf00      	nop
 800a8e0:	e7fe      	b.n	800a8e0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d002      	beq.n	800a8ee <xQueueGenericCreateStatic+0x52>
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d001      	beq.n	800a8f2 <xQueueGenericCreateStatic+0x56>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	e000      	b.n	800a8f4 <xQueueGenericCreateStatic+0x58>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fc:	f383 8811 	msr	BASEPRI, r3
 800a900:	f3bf 8f6f 	isb	sy
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	623b      	str	r3, [r7, #32]
}
 800a90a:	bf00      	nop
 800a90c:	e7fe      	b.n	800a90c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d102      	bne.n	800a91a <xQueueGenericCreateStatic+0x7e>
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d101      	bne.n	800a91e <xQueueGenericCreateStatic+0x82>
 800a91a:	2301      	movs	r3, #1
 800a91c:	e000      	b.n	800a920 <xQueueGenericCreateStatic+0x84>
 800a91e:	2300      	movs	r3, #0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d10a      	bne.n	800a93a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a924:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a928:	f383 8811 	msr	BASEPRI, r3
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	61fb      	str	r3, [r7, #28]
}
 800a936:	bf00      	nop
 800a938:	e7fe      	b.n	800a938 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a93a:	2348      	movs	r3, #72	; 0x48
 800a93c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	2b48      	cmp	r3, #72	; 0x48
 800a942:	d00a      	beq.n	800a95a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	61bb      	str	r3, [r7, #24]
}
 800a956:	bf00      	nop
 800a958:	e7fe      	b.n	800a958 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a95a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a962:	2b00      	cmp	r3, #0
 800a964:	d00d      	beq.n	800a982 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	2201      	movs	r2, #1
 800a96a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a96e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a974:	9300      	str	r3, [sp, #0]
 800a976:	4613      	mov	r3, r2
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	68b9      	ldr	r1, [r7, #8]
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f83f 	bl	800aa00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a984:	4618      	mov	r0, r3
 800a986:	3730      	adds	r7, #48	; 0x30
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08a      	sub	sp, #40	; 0x28
 800a990:	af02      	add	r7, sp, #8
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	4613      	mov	r3, r2
 800a998:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d10a      	bne.n	800a9b6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	613b      	str	r3, [r7, #16]
}
 800a9b2:	bf00      	nop
 800a9b4:	e7fe      	b.n	800a9b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	68ba      	ldr	r2, [r7, #8]
 800a9ba:	fb02 f303 	mul.w	r3, r2, r3
 800a9be:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	3348      	adds	r3, #72	; 0x48
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f002 fd0f 	bl	800d3e8 <pvPortMalloc>
 800a9ca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d011      	beq.n	800a9f6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a9d6:	697b      	ldr	r3, [r7, #20]
 800a9d8:	3348      	adds	r3, #72	; 0x48
 800a9da:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9e4:	79fa      	ldrb	r2, [r7, #7]
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	697a      	ldr	r2, [r7, #20]
 800a9ee:	68b9      	ldr	r1, [r7, #8]
 800a9f0:	68f8      	ldr	r0, [r7, #12]
 800a9f2:	f000 f805 	bl	800aa00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9f6:	69bb      	ldr	r3, [r7, #24]
	}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3720      	adds	r7, #32
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b084      	sub	sp, #16
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	60f8      	str	r0, [r7, #12]
 800aa08:	60b9      	str	r1, [r7, #8]
 800aa0a:	607a      	str	r2, [r7, #4]
 800aa0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d103      	bne.n	800aa1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	69ba      	ldr	r2, [r7, #24]
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	e002      	b.n	800aa22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa22:	69bb      	ldr	r3, [r7, #24]
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	68ba      	ldr	r2, [r7, #8]
 800aa2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa2e:	2101      	movs	r1, #1
 800aa30:	69b8      	ldr	r0, [r7, #24]
 800aa32:	f7ff fecb 	bl	800a7cc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa36:	bf00      	nop
 800aa38:	3710      	adds	r7, #16
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	bd80      	pop	{r7, pc}

0800aa3e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800aa3e:	b580      	push	{r7, lr}
 800aa40:	b082      	sub	sp, #8
 800aa42:	af00      	add	r7, sp, #0
 800aa44:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00e      	beq.n	800aa6a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2200      	movs	r2, #0
 800aa50:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2200      	movs	r2, #0
 800aa56:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aa5e:	2300      	movs	r3, #0
 800aa60:	2200      	movs	r2, #0
 800aa62:	2100      	movs	r1, #0
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 f837 	bl	800aad8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800aa6a:	bf00      	nop
 800aa6c:	3708      	adds	r7, #8
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}

0800aa72 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800aa72:	b580      	push	{r7, lr}
 800aa74:	b086      	sub	sp, #24
 800aa76:	af00      	add	r7, sp, #0
 800aa78:	4603      	mov	r3, r0
 800aa7a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	617b      	str	r3, [r7, #20]
 800aa80:	2300      	movs	r3, #0
 800aa82:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800aa84:	79fb      	ldrb	r3, [r7, #7]
 800aa86:	461a      	mov	r2, r3
 800aa88:	6939      	ldr	r1, [r7, #16]
 800aa8a:	6978      	ldr	r0, [r7, #20]
 800aa8c:	f7ff ff7e 	bl	800a98c <xQueueGenericCreate>
 800aa90:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7ff ffd3 	bl	800aa3e <prvInitialiseMutex>

		return xNewQueue;
 800aa98:	68fb      	ldr	r3, [r7, #12]
	}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3718      	adds	r7, #24
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}

0800aaa2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800aaa2:	b580      	push	{r7, lr}
 800aaa4:	b088      	sub	sp, #32
 800aaa6:	af02      	add	r7, sp, #8
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	6039      	str	r1, [r7, #0]
 800aaac:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aaae:	2301      	movs	r3, #1
 800aab0:	617b      	str	r3, [r7, #20]
 800aab2:	2300      	movs	r3, #0
 800aab4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800aab6:	79fb      	ldrb	r3, [r7, #7]
 800aab8:	9300      	str	r3, [sp, #0]
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2200      	movs	r2, #0
 800aabe:	6939      	ldr	r1, [r7, #16]
 800aac0:	6978      	ldr	r0, [r7, #20]
 800aac2:	f7ff feeb 	bl	800a89c <xQueueGenericCreateStatic>
 800aac6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aac8:	68f8      	ldr	r0, [r7, #12]
 800aaca:	f7ff ffb8 	bl	800aa3e <prvInitialiseMutex>

		return xNewQueue;
 800aace:	68fb      	ldr	r3, [r7, #12]
	}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3718      	adds	r7, #24
 800aad4:	46bd      	mov	sp, r7
 800aad6:	bd80      	pop	{r7, pc}

0800aad8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b08e      	sub	sp, #56	; 0x38
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
 800aae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aae6:	2300      	movs	r3, #0
 800aae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800aaee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10a      	bne.n	800ab0a <xQueueGenericSend+0x32>
	__asm volatile
 800aaf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf8:	f383 8811 	msr	BASEPRI, r3
 800aafc:	f3bf 8f6f 	isb	sy
 800ab00:	f3bf 8f4f 	dsb	sy
 800ab04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d103      	bne.n	800ab18 <xQueueGenericSend+0x40>
 800ab10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <xQueueGenericSend+0x44>
 800ab18:	2301      	movs	r3, #1
 800ab1a:	e000      	b.n	800ab1e <xQueueGenericSend+0x46>
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d10a      	bne.n	800ab38 <xQueueGenericSend+0x60>
	__asm volatile
 800ab22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab26:	f383 8811 	msr	BASEPRI, r3
 800ab2a:	f3bf 8f6f 	isb	sy
 800ab2e:	f3bf 8f4f 	dsb	sy
 800ab32:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab34:	bf00      	nop
 800ab36:	e7fe      	b.n	800ab36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d103      	bne.n	800ab46 <xQueueGenericSend+0x6e>
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d101      	bne.n	800ab4a <xQueueGenericSend+0x72>
 800ab46:	2301      	movs	r3, #1
 800ab48:	e000      	b.n	800ab4c <xQueueGenericSend+0x74>
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10a      	bne.n	800ab66 <xQueueGenericSend+0x8e>
	__asm volatile
 800ab50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab54:	f383 8811 	msr	BASEPRI, r3
 800ab58:	f3bf 8f6f 	isb	sy
 800ab5c:	f3bf 8f4f 	dsb	sy
 800ab60:	623b      	str	r3, [r7, #32]
}
 800ab62:	bf00      	nop
 800ab64:	e7fe      	b.n	800ab64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab66:	f001 fc9d 	bl	800c4a4 <xTaskGetSchedulerState>
 800ab6a:	4603      	mov	r3, r0
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d102      	bne.n	800ab76 <xQueueGenericSend+0x9e>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d101      	bne.n	800ab7a <xQueueGenericSend+0xa2>
 800ab76:	2301      	movs	r3, #1
 800ab78:	e000      	b.n	800ab7c <xQueueGenericSend+0xa4>
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d10a      	bne.n	800ab96 <xQueueGenericSend+0xbe>
	__asm volatile
 800ab80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab84:	f383 8811 	msr	BASEPRI, r3
 800ab88:	f3bf 8f6f 	isb	sy
 800ab8c:	f3bf 8f4f 	dsb	sy
 800ab90:	61fb      	str	r3, [r7, #28]
}
 800ab92:	bf00      	nop
 800ab94:	e7fe      	b.n	800ab94 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab96:	f002 fb05 	bl	800d1a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ab9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d302      	bcc.n	800abac <xQueueGenericSend+0xd4>
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	2b02      	cmp	r3, #2
 800abaa:	d129      	bne.n	800ac00 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abac:	683a      	ldr	r2, [r7, #0]
 800abae:	68b9      	ldr	r1, [r7, #8]
 800abb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abb2:	f000 fc9a 	bl	800b4ea <prvCopyDataToQueue>
 800abb6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d010      	beq.n	800abe2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc2:	3324      	adds	r3, #36	; 0x24
 800abc4:	4618      	mov	r0, r3
 800abc6:	f001 faad 	bl	800c124 <xTaskRemoveFromEventList>
 800abca:	4603      	mov	r3, r0
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d013      	beq.n	800abf8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800abd0:	4b3f      	ldr	r3, [pc, #252]	; (800acd0 <xQueueGenericSend+0x1f8>)
 800abd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abd6:	601a      	str	r2, [r3, #0]
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	e00a      	b.n	800abf8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d007      	beq.n	800abf8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800abe8:	4b39      	ldr	r3, [pc, #228]	; (800acd0 <xQueueGenericSend+0x1f8>)
 800abea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abee:	601a      	str	r2, [r3, #0]
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abf8:	f002 fb04 	bl	800d204 <vPortExitCritical>
				return pdPASS;
 800abfc:	2301      	movs	r3, #1
 800abfe:	e063      	b.n	800acc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d103      	bne.n	800ac0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac06:	f002 fafd 	bl	800d204 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	e05c      	b.n	800acc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d106      	bne.n	800ac22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac14:	f107 0314 	add.w	r3, r7, #20
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f001 fae5 	bl	800c1e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac22:	f002 faef 	bl	800d204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac26:	f001 f847 	bl	800bcb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac2a:	f002 fabb 	bl	800d1a4 <vPortEnterCritical>
 800ac2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac34:	b25b      	sxtb	r3, r3
 800ac36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac3a:	d103      	bne.n	800ac44 <xQueueGenericSend+0x16c>
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac4a:	b25b      	sxtb	r3, r3
 800ac4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac50:	d103      	bne.n	800ac5a <xQueueGenericSend+0x182>
 800ac52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac54:	2200      	movs	r2, #0
 800ac56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac5a:	f002 fad3 	bl	800d204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac5e:	1d3a      	adds	r2, r7, #4
 800ac60:	f107 0314 	add.w	r3, r7, #20
 800ac64:	4611      	mov	r1, r2
 800ac66:	4618      	mov	r0, r3
 800ac68:	f001 fad4 	bl	800c214 <xTaskCheckForTimeOut>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d124      	bne.n	800acbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac74:	f000 fd31 	bl	800b6da <prvIsQueueFull>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d018      	beq.n	800acb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac80:	3310      	adds	r3, #16
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	4611      	mov	r1, r2
 800ac86:	4618      	mov	r0, r3
 800ac88:	f001 f9fc 	bl	800c084 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac8e:	f000 fcbc 	bl	800b60a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac92:	f001 f81f 	bl	800bcd4 <xTaskResumeAll>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f47f af7c 	bne.w	800ab96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ac9e:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <xQueueGenericSend+0x1f8>)
 800aca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	f3bf 8f4f 	dsb	sy
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	e772      	b.n	800ab96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800acb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acb2:	f000 fcaa 	bl	800b60a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acb6:	f001 f80d 	bl	800bcd4 <xTaskResumeAll>
 800acba:	e76c      	b.n	800ab96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800acbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acbe:	f000 fca4 	bl	800b60a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acc2:	f001 f807 	bl	800bcd4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800acc6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3738      	adds	r7, #56	; 0x38
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}
 800acd0:	e000ed04 	.word	0xe000ed04

0800acd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b090      	sub	sp, #64	; 0x40
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
 800ace0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ace6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10a      	bne.n	800ad02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800acfe:	bf00      	nop
 800ad00:	e7fe      	b.n	800ad00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d103      	bne.n	800ad10 <xQueueGenericSendFromISR+0x3c>
 800ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <xQueueGenericSendFromISR+0x40>
 800ad10:	2301      	movs	r3, #1
 800ad12:	e000      	b.n	800ad16 <xQueueGenericSendFromISR+0x42>
 800ad14:	2300      	movs	r3, #0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10a      	bne.n	800ad30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad2c:	bf00      	nop
 800ad2e:	e7fe      	b.n	800ad2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	2b02      	cmp	r3, #2
 800ad34:	d103      	bne.n	800ad3e <xQueueGenericSendFromISR+0x6a>
 800ad36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d101      	bne.n	800ad42 <xQueueGenericSendFromISR+0x6e>
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e000      	b.n	800ad44 <xQueueGenericSendFromISR+0x70>
 800ad42:	2300      	movs	r3, #0
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d10a      	bne.n	800ad5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	623b      	str	r3, [r7, #32]
}
 800ad5a:	bf00      	nop
 800ad5c:	e7fe      	b.n	800ad5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad5e:	f002 fb03 	bl	800d368 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad62:	f3ef 8211 	mrs	r2, BASEPRI
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	f383 8811 	msr	BASEPRI, r3
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f3bf 8f4f 	dsb	sy
 800ad76:	61fa      	str	r2, [r7, #28]
 800ad78:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad7a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad7c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d302      	bcc.n	800ad90 <xQueueGenericSendFromISR+0xbc>
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2b02      	cmp	r3, #2
 800ad8e:	d12f      	bne.n	800adf0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ad96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad9e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ada0:	683a      	ldr	r2, [r7, #0]
 800ada2:	68b9      	ldr	r1, [r7, #8]
 800ada4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ada6:	f000 fba0 	bl	800b4ea <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800adaa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800adae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800adb2:	d112      	bne.n	800adda <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d016      	beq.n	800adea <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adbe:	3324      	adds	r3, #36	; 0x24
 800adc0:	4618      	mov	r0, r3
 800adc2:	f001 f9af 	bl	800c124 <xTaskRemoveFromEventList>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00e      	beq.n	800adea <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00b      	beq.n	800adea <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	601a      	str	r2, [r3, #0]
 800add8:	e007      	b.n	800adea <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800adda:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800adde:	3301      	adds	r3, #1
 800ade0:	b2db      	uxtb	r3, r3
 800ade2:	b25a      	sxtb	r2, r3
 800ade4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ade6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800adea:	2301      	movs	r3, #1
 800adec:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800adee:	e001      	b.n	800adf4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800adf0:	2300      	movs	r3, #0
 800adf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adf6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800adfe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3740      	adds	r7, #64	; 0x40
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}

0800ae0a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae0a:	b580      	push	{r7, lr}
 800ae0c:	b08e      	sub	sp, #56	; 0x38
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
 800ae12:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ae18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10a      	bne.n	800ae34 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	623b      	str	r3, [r7, #32]
}
 800ae30:	bf00      	nop
 800ae32:	e7fe      	b.n	800ae32 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00a      	beq.n	800ae52 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ae3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae40:	f383 8811 	msr	BASEPRI, r3
 800ae44:	f3bf 8f6f 	isb	sy
 800ae48:	f3bf 8f4f 	dsb	sy
 800ae4c:	61fb      	str	r3, [r7, #28]
}
 800ae4e:	bf00      	nop
 800ae50:	e7fe      	b.n	800ae50 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ae52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d103      	bne.n	800ae62 <xQueueGiveFromISR+0x58>
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5c:	689b      	ldr	r3, [r3, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d101      	bne.n	800ae66 <xQueueGiveFromISR+0x5c>
 800ae62:	2301      	movs	r3, #1
 800ae64:	e000      	b.n	800ae68 <xQueueGiveFromISR+0x5e>
 800ae66:	2300      	movs	r3, #0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d10a      	bne.n	800ae82 <xQueueGiveFromISR+0x78>
	__asm volatile
 800ae6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae70:	f383 8811 	msr	BASEPRI, r3
 800ae74:	f3bf 8f6f 	isb	sy
 800ae78:	f3bf 8f4f 	dsb	sy
 800ae7c:	61bb      	str	r3, [r7, #24]
}
 800ae7e:	bf00      	nop
 800ae80:	e7fe      	b.n	800ae80 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae82:	f002 fa71 	bl	800d368 <vPortValidateInterruptPriority>
	__asm volatile
 800ae86:	f3ef 8211 	mrs	r2, BASEPRI
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	617a      	str	r2, [r7, #20]
 800ae9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ae9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aea0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeae:	429a      	cmp	r2, r3
 800aeb0:	d22b      	bcs.n	800af0a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aeb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aebe:	1c5a      	adds	r2, r3, #1
 800aec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800aec4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aec8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aecc:	d112      	bne.n	800aef4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d016      	beq.n	800af04 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	3324      	adds	r3, #36	; 0x24
 800aeda:	4618      	mov	r0, r3
 800aedc:	f001 f922 	bl	800c124 <xTaskRemoveFromEventList>
 800aee0:	4603      	mov	r3, r0
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d00e      	beq.n	800af04 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800aee6:	683b      	ldr	r3, [r7, #0]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d00b      	beq.n	800af04 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2201      	movs	r2, #1
 800aef0:	601a      	str	r2, [r3, #0]
 800aef2:	e007      	b.n	800af04 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aef8:	3301      	adds	r3, #1
 800aefa:	b2db      	uxtb	r3, r3
 800aefc:	b25a      	sxtb	r2, r3
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800af04:	2301      	movs	r3, #1
 800af06:	637b      	str	r3, [r7, #52]	; 0x34
 800af08:	e001      	b.n	800af0e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af0a:	2300      	movs	r3, #0
 800af0c:	637b      	str	r3, [r7, #52]	; 0x34
 800af0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af10:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	f383 8811 	msr	BASEPRI, r3
}
 800af18:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3738      	adds	r7, #56	; 0x38
 800af20:	46bd      	mov	sp, r7
 800af22:	bd80      	pop	{r7, pc}

0800af24 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800af24:	b580      	push	{r7, lr}
 800af26:	b08c      	sub	sp, #48	; 0x30
 800af28:	af00      	add	r7, sp, #0
 800af2a:	60f8      	str	r0, [r7, #12]
 800af2c:	60b9      	str	r1, [r7, #8]
 800af2e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800af30:	2300      	movs	r3, #0
 800af32:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d10a      	bne.n	800af54 <xQueueReceive+0x30>
	__asm volatile
 800af3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af42:	f383 8811 	msr	BASEPRI, r3
 800af46:	f3bf 8f6f 	isb	sy
 800af4a:	f3bf 8f4f 	dsb	sy
 800af4e:	623b      	str	r3, [r7, #32]
}
 800af50:	bf00      	nop
 800af52:	e7fe      	b.n	800af52 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d103      	bne.n	800af62 <xQueueReceive+0x3e>
 800af5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d101      	bne.n	800af66 <xQueueReceive+0x42>
 800af62:	2301      	movs	r3, #1
 800af64:	e000      	b.n	800af68 <xQueueReceive+0x44>
 800af66:	2300      	movs	r3, #0
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d10a      	bne.n	800af82 <xQueueReceive+0x5e>
	__asm volatile
 800af6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af70:	f383 8811 	msr	BASEPRI, r3
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	f3bf 8f4f 	dsb	sy
 800af7c:	61fb      	str	r3, [r7, #28]
}
 800af7e:	bf00      	nop
 800af80:	e7fe      	b.n	800af80 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af82:	f001 fa8f 	bl	800c4a4 <xTaskGetSchedulerState>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d102      	bne.n	800af92 <xQueueReceive+0x6e>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <xQueueReceive+0x72>
 800af92:	2301      	movs	r3, #1
 800af94:	e000      	b.n	800af98 <xQueueReceive+0x74>
 800af96:	2300      	movs	r3, #0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d10a      	bne.n	800afb2 <xQueueReceive+0x8e>
	__asm volatile
 800af9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa0:	f383 8811 	msr	BASEPRI, r3
 800afa4:	f3bf 8f6f 	isb	sy
 800afa8:	f3bf 8f4f 	dsb	sy
 800afac:	61bb      	str	r3, [r7, #24]
}
 800afae:	bf00      	nop
 800afb0:	e7fe      	b.n	800afb0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800afb2:	f002 f8f7 	bl	800d1a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d01f      	beq.n	800b002 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800afc2:	68b9      	ldr	r1, [r7, #8]
 800afc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800afc6:	f000 fafa 	bl	800b5be <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afcc:	1e5a      	subs	r2, r3, #1
 800afce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800afd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd4:	691b      	ldr	r3, [r3, #16]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d00f      	beq.n	800affa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800afda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afdc:	3310      	adds	r3, #16
 800afde:	4618      	mov	r0, r3
 800afe0:	f001 f8a0 	bl	800c124 <xTaskRemoveFromEventList>
 800afe4:	4603      	mov	r3, r0
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d007      	beq.n	800affa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800afea:	4b3d      	ldr	r3, [pc, #244]	; (800b0e0 <xQueueReceive+0x1bc>)
 800afec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aff0:	601a      	str	r2, [r3, #0]
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800affa:	f002 f903 	bl	800d204 <vPortExitCritical>
				return pdPASS;
 800affe:	2301      	movs	r3, #1
 800b000:	e069      	b.n	800b0d6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d103      	bne.n	800b010 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b008:	f002 f8fc 	bl	800d204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b00c:	2300      	movs	r3, #0
 800b00e:	e062      	b.n	800b0d6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b012:	2b00      	cmp	r3, #0
 800b014:	d106      	bne.n	800b024 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b016:	f107 0310 	add.w	r3, r7, #16
 800b01a:	4618      	mov	r0, r3
 800b01c:	f001 f8e4 	bl	800c1e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b020:	2301      	movs	r3, #1
 800b022:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b024:	f002 f8ee 	bl	800d204 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b028:	f000 fe46 	bl	800bcb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b02c:	f002 f8ba 	bl	800d1a4 <vPortEnterCritical>
 800b030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b032:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b036:	b25b      	sxtb	r3, r3
 800b038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b03c:	d103      	bne.n	800b046 <xQueueReceive+0x122>
 800b03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b040:	2200      	movs	r2, #0
 800b042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b048:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b04c:	b25b      	sxtb	r3, r3
 800b04e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b052:	d103      	bne.n	800b05c <xQueueReceive+0x138>
 800b054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b056:	2200      	movs	r2, #0
 800b058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b05c:	f002 f8d2 	bl	800d204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b060:	1d3a      	adds	r2, r7, #4
 800b062:	f107 0310 	add.w	r3, r7, #16
 800b066:	4611      	mov	r1, r2
 800b068:	4618      	mov	r0, r3
 800b06a:	f001 f8d3 	bl	800c214 <xTaskCheckForTimeOut>
 800b06e:	4603      	mov	r3, r0
 800b070:	2b00      	cmp	r3, #0
 800b072:	d123      	bne.n	800b0bc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b076:	f000 fb1a 	bl	800b6ae <prvIsQueueEmpty>
 800b07a:	4603      	mov	r3, r0
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d017      	beq.n	800b0b0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b082:	3324      	adds	r3, #36	; 0x24
 800b084:	687a      	ldr	r2, [r7, #4]
 800b086:	4611      	mov	r1, r2
 800b088:	4618      	mov	r0, r3
 800b08a:	f000 fffb 	bl	800c084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b08e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b090:	f000 fabb 	bl	800b60a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b094:	f000 fe1e 	bl	800bcd4 <xTaskResumeAll>
 800b098:	4603      	mov	r3, r0
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d189      	bne.n	800afb2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b09e:	4b10      	ldr	r3, [pc, #64]	; (800b0e0 <xQueueReceive+0x1bc>)
 800b0a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0a4:	601a      	str	r2, [r3, #0]
 800b0a6:	f3bf 8f4f 	dsb	sy
 800b0aa:	f3bf 8f6f 	isb	sy
 800b0ae:	e780      	b.n	800afb2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b0b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0b2:	f000 faaa 	bl	800b60a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0b6:	f000 fe0d 	bl	800bcd4 <xTaskResumeAll>
 800b0ba:	e77a      	b.n	800afb2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b0bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0be:	f000 faa4 	bl	800b60a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b0c2:	f000 fe07 	bl	800bcd4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0c8:	f000 faf1 	bl	800b6ae <prvIsQueueEmpty>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	f43f af6f 	beq.w	800afb2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b0d4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3730      	adds	r7, #48	; 0x30
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	e000ed04 	.word	0xe000ed04

0800b0e4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b08e      	sub	sp, #56	; 0x38
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10a      	bne.n	800b116 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	623b      	str	r3, [r7, #32]
}
 800b112:	bf00      	nop
 800b114:	e7fe      	b.n	800b114 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00a      	beq.n	800b134 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b11e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b122:	f383 8811 	msr	BASEPRI, r3
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	f3bf 8f4f 	dsb	sy
 800b12e:	61fb      	str	r3, [r7, #28]
}
 800b130:	bf00      	nop
 800b132:	e7fe      	b.n	800b132 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b134:	f001 f9b6 	bl	800c4a4 <xTaskGetSchedulerState>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d102      	bne.n	800b144 <xQueueSemaphoreTake+0x60>
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d101      	bne.n	800b148 <xQueueSemaphoreTake+0x64>
 800b144:	2301      	movs	r3, #1
 800b146:	e000      	b.n	800b14a <xQueueSemaphoreTake+0x66>
 800b148:	2300      	movs	r3, #0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d10a      	bne.n	800b164 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	61bb      	str	r3, [r7, #24]
}
 800b160:	bf00      	nop
 800b162:	e7fe      	b.n	800b162 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b164:	f002 f81e 	bl	800d1a4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b16e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b170:	2b00      	cmp	r3, #0
 800b172:	d024      	beq.n	800b1be <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b176:	1e5a      	subs	r2, r3, #1
 800b178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d104      	bne.n	800b18e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b184:	f001 fb36 	bl	800c7f4 <pvTaskIncrementMutexHeldCount>
 800b188:	4602      	mov	r2, r0
 800b18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b18c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b190:	691b      	ldr	r3, [r3, #16]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d00f      	beq.n	800b1b6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b198:	3310      	adds	r3, #16
 800b19a:	4618      	mov	r0, r3
 800b19c:	f000 ffc2 	bl	800c124 <xTaskRemoveFromEventList>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d007      	beq.n	800b1b6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1a6:	4b54      	ldr	r3, [pc, #336]	; (800b2f8 <xQueueSemaphoreTake+0x214>)
 800b1a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ac:	601a      	str	r2, [r3, #0]
 800b1ae:	f3bf 8f4f 	dsb	sy
 800b1b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1b6:	f002 f825 	bl	800d204 <vPortExitCritical>
				return pdPASS;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e097      	b.n	800b2ee <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d111      	bne.n	800b1e8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b1c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d00a      	beq.n	800b1e0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	617b      	str	r3, [r7, #20]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b1e0:	f002 f810 	bl	800d204 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	e082      	b.n	800b2ee <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d106      	bne.n	800b1fc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1ee:	f107 030c 	add.w	r3, r7, #12
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 fff8 	bl	800c1e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b1fc:	f002 f802 	bl	800d204 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b200:	f000 fd5a 	bl	800bcb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b204:	f001 ffce 	bl	800d1a4 <vPortEnterCritical>
 800b208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b20e:	b25b      	sxtb	r3, r3
 800b210:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b214:	d103      	bne.n	800b21e <xQueueSemaphoreTake+0x13a>
 800b216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b218:	2200      	movs	r2, #0
 800b21a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b224:	b25b      	sxtb	r3, r3
 800b226:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b22a:	d103      	bne.n	800b234 <xQueueSemaphoreTake+0x150>
 800b22c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b234:	f001 ffe6 	bl	800d204 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b238:	463a      	mov	r2, r7
 800b23a:	f107 030c 	add.w	r3, r7, #12
 800b23e:	4611      	mov	r1, r2
 800b240:	4618      	mov	r0, r3
 800b242:	f000 ffe7 	bl	800c214 <xTaskCheckForTimeOut>
 800b246:	4603      	mov	r3, r0
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d132      	bne.n	800b2b2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b24c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b24e:	f000 fa2e 	bl	800b6ae <prvIsQueueEmpty>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d026      	beq.n	800b2a6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d109      	bne.n	800b274 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b260:	f001 ffa0 	bl	800d1a4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b266:	689b      	ldr	r3, [r3, #8]
 800b268:	4618      	mov	r0, r3
 800b26a:	f001 f939 	bl	800c4e0 <xTaskPriorityInherit>
 800b26e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b270:	f001 ffc8 	bl	800d204 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b276:	3324      	adds	r3, #36	; 0x24
 800b278:	683a      	ldr	r2, [r7, #0]
 800b27a:	4611      	mov	r1, r2
 800b27c:	4618      	mov	r0, r3
 800b27e:	f000 ff01 	bl	800c084 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b282:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b284:	f000 f9c1 	bl	800b60a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b288:	f000 fd24 	bl	800bcd4 <xTaskResumeAll>
 800b28c:	4603      	mov	r3, r0
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f47f af68 	bne.w	800b164 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b294:	4b18      	ldr	r3, [pc, #96]	; (800b2f8 <xQueueSemaphoreTake+0x214>)
 800b296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	f3bf 8f4f 	dsb	sy
 800b2a0:	f3bf 8f6f 	isb	sy
 800b2a4:	e75e      	b.n	800b164 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b2a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2a8:	f000 f9af 	bl	800b60a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2ac:	f000 fd12 	bl	800bcd4 <xTaskResumeAll>
 800b2b0:	e758      	b.n	800b164 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b2b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2b4:	f000 f9a9 	bl	800b60a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2b8:	f000 fd0c 	bl	800bcd4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2be:	f000 f9f6 	bl	800b6ae <prvIsQueueEmpty>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f43f af4d 	beq.w	800b164 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00d      	beq.n	800b2ec <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b2d0:	f001 ff68 	bl	800d1a4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b2d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2d6:	f000 f8f0 	bl	800b4ba <prvGetDisinheritPriorityAfterTimeout>
 800b2da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f001 f9f8 	bl	800c6d8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b2e8:	f001 ff8c 	bl	800d204 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b2ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	3738      	adds	r7, #56	; 0x38
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
 800b2f6:	bf00      	nop
 800b2f8:	e000ed04 	.word	0xe000ed04

0800b2fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b08e      	sub	sp, #56	; 0x38
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b30c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10a      	bne.n	800b328 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	623b      	str	r3, [r7, #32]
}
 800b324:	bf00      	nop
 800b326:	e7fe      	b.n	800b326 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d103      	bne.n	800b336 <xQueueReceiveFromISR+0x3a>
 800b32e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b332:	2b00      	cmp	r3, #0
 800b334:	d101      	bne.n	800b33a <xQueueReceiveFromISR+0x3e>
 800b336:	2301      	movs	r3, #1
 800b338:	e000      	b.n	800b33c <xQueueReceiveFromISR+0x40>
 800b33a:	2300      	movs	r3, #0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10a      	bne.n	800b356 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	61fb      	str	r3, [r7, #28]
}
 800b352:	bf00      	nop
 800b354:	e7fe      	b.n	800b354 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b356:	f002 f807 	bl	800d368 <vPortValidateInterruptPriority>
	__asm volatile
 800b35a:	f3ef 8211 	mrs	r2, BASEPRI
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	61ba      	str	r2, [r7, #24]
 800b370:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b372:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b374:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b37a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b37c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d02f      	beq.n	800b3e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b38c:	68b9      	ldr	r1, [r7, #8]
 800b38e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b390:	f000 f915 	bl	800b5be <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b396:	1e5a      	subs	r2, r3, #1
 800b398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b39a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b39c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3a4:	d112      	bne.n	800b3cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a8:	691b      	ldr	r3, [r3, #16]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d016      	beq.n	800b3dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b0:	3310      	adds	r3, #16
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 feb6 	bl	800c124 <xTaskRemoveFromEventList>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d00e      	beq.n	800b3dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00b      	beq.n	800b3dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	601a      	str	r2, [r3, #0]
 800b3ca:	e007      	b.n	800b3dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3d0:	3301      	adds	r3, #1
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	b25a      	sxtb	r2, r3
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	637b      	str	r3, [r7, #52]	; 0x34
 800b3e0:	e001      	b.n	800b3e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	637b      	str	r3, [r7, #52]	; 0x34
 800b3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	f383 8811 	msr	BASEPRI, r3
}
 800b3f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3738      	adds	r7, #56	; 0x38
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bd80      	pop	{r7, pc}

0800b3fc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10a      	bne.n	800b420 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b40e:	f383 8811 	msr	BASEPRI, r3
 800b412:	f3bf 8f6f 	isb	sy
 800b416:	f3bf 8f4f 	dsb	sy
 800b41a:	60bb      	str	r3, [r7, #8]
}
 800b41c:	bf00      	nop
 800b41e:	e7fe      	b.n	800b41e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b420:	f001 fec0 	bl	800d1a4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b428:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b42a:	f001 feeb 	bl	800d204 <vPortExitCritical>

	return uxReturn;
 800b42e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b430:	4618      	mov	r0, r3
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b438:	b480      	push	{r7}
 800b43a:	b087      	sub	sp, #28
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b444:	697b      	ldr	r3, [r7, #20]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10a      	bne.n	800b460 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	60fb      	str	r3, [r7, #12]
}
 800b45c:	bf00      	nop
 800b45e:	e7fe      	b.n	800b45e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b464:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b466:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b468:	4618      	mov	r0, r3
 800b46a:	371c      	adds	r7, #28
 800b46c:	46bd      	mov	sp, r7
 800b46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b472:	4770      	bx	lr

0800b474 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b474:	b580      	push	{r7, lr}
 800b476:	b084      	sub	sp, #16
 800b478:	af00      	add	r7, sp, #0
 800b47a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10a      	bne.n	800b49c <vQueueDelete+0x28>
	__asm volatile
 800b486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48a:	f383 8811 	msr	BASEPRI, r3
 800b48e:	f3bf 8f6f 	isb	sy
 800b492:	f3bf 8f4f 	dsb	sy
 800b496:	60bb      	str	r3, [r7, #8]
}
 800b498:	bf00      	nop
 800b49a:	e7fe      	b.n	800b49a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b49c:	68f8      	ldr	r0, [r7, #12]
 800b49e:	f000 f95f 	bl	800b760 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d102      	bne.n	800b4b2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b4ac:	68f8      	ldr	r0, [r7, #12]
 800b4ae:	f002 f867 	bl	800d580 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b4b2:	bf00      	nop
 800b4b4:	3710      	adds	r7, #16
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	bd80      	pop	{r7, pc}

0800b4ba <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b4ba:	b480      	push	{r7}
 800b4bc:	b085      	sub	sp, #20
 800b4be:	af00      	add	r7, sp, #0
 800b4c0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d006      	beq.n	800b4d8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f1c3 0307 	rsb	r3, r3, #7
 800b4d4:	60fb      	str	r3, [r7, #12]
 800b4d6:	e001      	b.n	800b4dc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
	}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3714      	adds	r7, #20
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e8:	4770      	bx	lr

0800b4ea <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b4ea:	b580      	push	{r7, lr}
 800b4ec:	b086      	sub	sp, #24
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	60f8      	str	r0, [r7, #12]
 800b4f2:	60b9      	str	r1, [r7, #8]
 800b4f4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4fe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b504:	2b00      	cmp	r3, #0
 800b506:	d10d      	bne.n	800b524 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d14d      	bne.n	800b5ac <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	4618      	mov	r0, r3
 800b516:	f001 f859 	bl	800c5cc <xTaskPriorityDisinherit>
 800b51a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	609a      	str	r2, [r3, #8]
 800b522:	e043      	b.n	800b5ac <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d119      	bne.n	800b55e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6858      	ldr	r0, [r3, #4]
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b532:	461a      	mov	r2, r3
 800b534:	68b9      	ldr	r1, [r7, #8]
 800b536:	f01b f902 	bl	802673e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	685a      	ldr	r2, [r3, #4]
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b542:	441a      	add	r2, r3
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	685a      	ldr	r2, [r3, #4]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	429a      	cmp	r2, r3
 800b552:	d32b      	bcc.n	800b5ac <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681a      	ldr	r2, [r3, #0]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	605a      	str	r2, [r3, #4]
 800b55c:	e026      	b.n	800b5ac <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	68d8      	ldr	r0, [r3, #12]
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b566:	461a      	mov	r2, r3
 800b568:	68b9      	ldr	r1, [r7, #8]
 800b56a:	f01b f8e8 	bl	802673e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	68da      	ldr	r2, [r3, #12]
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b576:	425b      	negs	r3, r3
 800b578:	441a      	add	r2, r3
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	68da      	ldr	r2, [r3, #12]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	429a      	cmp	r2, r3
 800b588:	d207      	bcs.n	800b59a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	689a      	ldr	r2, [r3, #8]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b592:	425b      	negs	r3, r3
 800b594:	441a      	add	r2, r3
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d105      	bne.n	800b5ac <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5a0:	693b      	ldr	r3, [r7, #16]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d002      	beq.n	800b5ac <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5a6:	693b      	ldr	r3, [r7, #16]
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	1c5a      	adds	r2, r3, #1
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b5b4:	697b      	ldr	r3, [r7, #20]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3718      	adds	r7, #24
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b082      	sub	sp, #8
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d018      	beq.n	800b602 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	68da      	ldr	r2, [r3, #12]
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d8:	441a      	add	r2, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	68da      	ldr	r2, [r3, #12]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d303      	bcc.n	800b5f2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681a      	ldr	r2, [r3, #0]
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	68d9      	ldr	r1, [r3, #12]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	6838      	ldr	r0, [r7, #0]
 800b5fe:	f01b f89e 	bl	802673e <memcpy>
	}
}
 800b602:	bf00      	nop
 800b604:	3708      	adds	r7, #8
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b084      	sub	sp, #16
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b612:	f001 fdc7 	bl	800d1a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b61c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b61e:	e011      	b.n	800b644 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b624:	2b00      	cmp	r3, #0
 800b626:	d012      	beq.n	800b64e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	3324      	adds	r3, #36	; 0x24
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 fd79 	bl	800c124 <xTaskRemoveFromEventList>
 800b632:	4603      	mov	r3, r0
 800b634:	2b00      	cmp	r3, #0
 800b636:	d001      	beq.n	800b63c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b638:	f000 fe4e 	bl	800c2d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	3b01      	subs	r3, #1
 800b640:	b2db      	uxtb	r3, r3
 800b642:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b648:	2b00      	cmp	r3, #0
 800b64a:	dce9      	bgt.n	800b620 <prvUnlockQueue+0x16>
 800b64c:	e000      	b.n	800b650 <prvUnlockQueue+0x46>
					break;
 800b64e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	22ff      	movs	r2, #255	; 0xff
 800b654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b658:	f001 fdd4 	bl	800d204 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b65c:	f001 fda2 	bl	800d1a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b666:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b668:	e011      	b.n	800b68e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	691b      	ldr	r3, [r3, #16]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d012      	beq.n	800b698 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	3310      	adds	r3, #16
 800b676:	4618      	mov	r0, r3
 800b678:	f000 fd54 	bl	800c124 <xTaskRemoveFromEventList>
 800b67c:	4603      	mov	r3, r0
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d001      	beq.n	800b686 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b682:	f000 fe29 	bl	800c2d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b686:	7bbb      	ldrb	r3, [r7, #14]
 800b688:	3b01      	subs	r3, #1
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b68e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b692:	2b00      	cmp	r3, #0
 800b694:	dce9      	bgt.n	800b66a <prvUnlockQueue+0x60>
 800b696:	e000      	b.n	800b69a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b698:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	22ff      	movs	r2, #255	; 0xff
 800b69e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b6a2:	f001 fdaf 	bl	800d204 <vPortExitCritical>
}
 800b6a6:	bf00      	nop
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6b6:	f001 fd75 	bl	800d1a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d102      	bne.n	800b6c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b6c2:	2301      	movs	r3, #1
 800b6c4:	60fb      	str	r3, [r7, #12]
 800b6c6:	e001      	b.n	800b6cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6cc:	f001 fd9a 	bl	800d204 <vPortExitCritical>

	return xReturn;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3710      	adds	r7, #16
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b084      	sub	sp, #16
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6e2:	f001 fd5f 	bl	800d1a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d102      	bne.n	800b6f8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	60fb      	str	r3, [r7, #12]
 800b6f6:	e001      	b.n	800b6fc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6fc:	f001 fd82 	bl	800d204 <vPortExitCritical>

	return xReturn;
 800b700:	68fb      	ldr	r3, [r7, #12]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b716:	2300      	movs	r3, #0
 800b718:	60fb      	str	r3, [r7, #12]
 800b71a:	e014      	b.n	800b746 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b71c:	4a0f      	ldr	r2, [pc, #60]	; (800b75c <vQueueAddToRegistry+0x50>)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d10b      	bne.n	800b740 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b728:	490c      	ldr	r1, [pc, #48]	; (800b75c <vQueueAddToRegistry+0x50>)
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	683a      	ldr	r2, [r7, #0]
 800b72e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b732:	4a0a      	ldr	r2, [pc, #40]	; (800b75c <vQueueAddToRegistry+0x50>)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	4413      	add	r3, r2
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b73e:	e006      	b.n	800b74e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	3301      	adds	r3, #1
 800b744:	60fb      	str	r3, [r7, #12]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2b07      	cmp	r3, #7
 800b74a:	d9e7      	bls.n	800b71c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b74c:	bf00      	nop
 800b74e:	bf00      	nop
 800b750:	3714      	adds	r7, #20
 800b752:	46bd      	mov	sp, r7
 800b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b758:	4770      	bx	lr
 800b75a:	bf00      	nop
 800b75c:	20006ca0 	.word	0x20006ca0

0800b760 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b768:	2300      	movs	r3, #0
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	e016      	b.n	800b79c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b76e:	4a10      	ldr	r2, [pc, #64]	; (800b7b0 <vQueueUnregisterQueue+0x50>)
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	00db      	lsls	r3, r3, #3
 800b774:	4413      	add	r3, r2
 800b776:	685b      	ldr	r3, [r3, #4]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d10b      	bne.n	800b796 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b77e:	4a0c      	ldr	r2, [pc, #48]	; (800b7b0 <vQueueUnregisterQueue+0x50>)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	2100      	movs	r1, #0
 800b784:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b788:	4a09      	ldr	r2, [pc, #36]	; (800b7b0 <vQueueUnregisterQueue+0x50>)
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	00db      	lsls	r3, r3, #3
 800b78e:	4413      	add	r3, r2
 800b790:	2200      	movs	r2, #0
 800b792:	605a      	str	r2, [r3, #4]
				break;
 800b794:	e006      	b.n	800b7a4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3301      	adds	r3, #1
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2b07      	cmp	r3, #7
 800b7a0:	d9e5      	bls.n	800b76e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b7a2:	bf00      	nop
 800b7a4:	bf00      	nop
 800b7a6:	3714      	adds	r7, #20
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr
 800b7b0:	20006ca0 	.word	0x20006ca0

0800b7b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	60f8      	str	r0, [r7, #12]
 800b7bc:	60b9      	str	r1, [r7, #8]
 800b7be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b7c4:	f001 fcee 	bl	800d1a4 <vPortEnterCritical>
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7ce:	b25b      	sxtb	r3, r3
 800b7d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7d4:	d103      	bne.n	800b7de <vQueueWaitForMessageRestricted+0x2a>
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7de:	697b      	ldr	r3, [r7, #20]
 800b7e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7e4:	b25b      	sxtb	r3, r3
 800b7e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7ea:	d103      	bne.n	800b7f4 <vQueueWaitForMessageRestricted+0x40>
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	2200      	movs	r2, #0
 800b7f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7f4:	f001 fd06 	bl	800d204 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d106      	bne.n	800b80e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	3324      	adds	r3, #36	; 0x24
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	68b9      	ldr	r1, [r7, #8]
 800b808:	4618      	mov	r0, r3
 800b80a:	f000 fc5f 	bl	800c0cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b80e:	6978      	ldr	r0, [r7, #20]
 800b810:	f7ff fefb 	bl	800b60a <prvUnlockQueue>
	}
 800b814:	bf00      	nop
 800b816:	3718      	adds	r7, #24
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b08e      	sub	sp, #56	; 0x38
 800b820:	af04      	add	r7, sp, #16
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b82a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10a      	bne.n	800b846 <xTaskCreateStatic+0x2a>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	623b      	str	r3, [r7, #32]
}
 800b842:	bf00      	nop
 800b844:	e7fe      	b.n	800b844 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d10a      	bne.n	800b862 <xTaskCreateStatic+0x46>
	__asm volatile
 800b84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b850:	f383 8811 	msr	BASEPRI, r3
 800b854:	f3bf 8f6f 	isb	sy
 800b858:	f3bf 8f4f 	dsb	sy
 800b85c:	61fb      	str	r3, [r7, #28]
}
 800b85e:	bf00      	nop
 800b860:	e7fe      	b.n	800b860 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b862:	23a0      	movs	r3, #160	; 0xa0
 800b864:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2ba0      	cmp	r3, #160	; 0xa0
 800b86a:	d00a      	beq.n	800b882 <xTaskCreateStatic+0x66>
	__asm volatile
 800b86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b870:	f383 8811 	msr	BASEPRI, r3
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	f3bf 8f4f 	dsb	sy
 800b87c:	61bb      	str	r3, [r7, #24]
}
 800b87e:	bf00      	nop
 800b880:	e7fe      	b.n	800b880 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b882:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b886:	2b00      	cmp	r3, #0
 800b888:	d01e      	beq.n	800b8c8 <xTaskCreateStatic+0xac>
 800b88a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d01b      	beq.n	800b8c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b892:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b898:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89c:	2202      	movs	r2, #2
 800b89e:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	9303      	str	r3, [sp, #12]
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	9302      	str	r3, [sp, #8]
 800b8aa:	f107 0314 	add.w	r3, r7, #20
 800b8ae:	9301      	str	r3, [sp, #4]
 800b8b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b2:	9300      	str	r3, [sp, #0]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	68b9      	ldr	r1, [r7, #8]
 800b8ba:	68f8      	ldr	r0, [r7, #12]
 800b8bc:	f000 f850 	bl	800b960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8c2:	f000 f8eb 	bl	800ba9c <prvAddNewTaskToReadyList>
 800b8c6:	e001      	b.n	800b8cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b8cc:	697b      	ldr	r3, [r7, #20]
	}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3728      	adds	r7, #40	; 0x28
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b08c      	sub	sp, #48	; 0x30
 800b8da:	af04      	add	r7, sp, #16
 800b8dc:	60f8      	str	r0, [r7, #12]
 800b8de:	60b9      	str	r1, [r7, #8]
 800b8e0:	603b      	str	r3, [r7, #0]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b8e6:	88fb      	ldrh	r3, [r7, #6]
 800b8e8:	009b      	lsls	r3, r3, #2
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f001 fd7c 	bl	800d3e8 <pvPortMalloc>
 800b8f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b8f2:	697b      	ldr	r3, [r7, #20]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00e      	beq.n	800b916 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b8f8:	20a0      	movs	r0, #160	; 0xa0
 800b8fa:	f001 fd75 	bl	800d3e8 <pvPortMalloc>
 800b8fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b900:	69fb      	ldr	r3, [r7, #28]
 800b902:	2b00      	cmp	r3, #0
 800b904:	d003      	beq.n	800b90e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b906:	69fb      	ldr	r3, [r7, #28]
 800b908:	697a      	ldr	r2, [r7, #20]
 800b90a:	631a      	str	r2, [r3, #48]	; 0x30
 800b90c:	e005      	b.n	800b91a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b90e:	6978      	ldr	r0, [r7, #20]
 800b910:	f001 fe36 	bl	800d580 <vPortFree>
 800b914:	e001      	b.n	800b91a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b916:	2300      	movs	r3, #0
 800b918:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b91a:	69fb      	ldr	r3, [r7, #28]
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d017      	beq.n	800b950 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b920:	69fb      	ldr	r3, [r7, #28]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b928:	88fa      	ldrh	r2, [r7, #6]
 800b92a:	2300      	movs	r3, #0
 800b92c:	9303      	str	r3, [sp, #12]
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	9302      	str	r3, [sp, #8]
 800b932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b938:	9300      	str	r3, [sp, #0]
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	68b9      	ldr	r1, [r7, #8]
 800b93e:	68f8      	ldr	r0, [r7, #12]
 800b940:	f000 f80e 	bl	800b960 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b944:	69f8      	ldr	r0, [r7, #28]
 800b946:	f000 f8a9 	bl	800ba9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b94a:	2301      	movs	r3, #1
 800b94c:	61bb      	str	r3, [r7, #24]
 800b94e:	e002      	b.n	800b956 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b954:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b956:	69bb      	ldr	r3, [r7, #24]
	}
 800b958:	4618      	mov	r0, r3
 800b95a:	3720      	adds	r7, #32
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b088      	sub	sp, #32
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
 800b96c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b978:	3b01      	subs	r3, #1
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4413      	add	r3, r2
 800b97e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b980:	69bb      	ldr	r3, [r7, #24]
 800b982:	f023 0307 	bic.w	r3, r3, #7
 800b986:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b988:	69bb      	ldr	r3, [r7, #24]
 800b98a:	f003 0307 	and.w	r3, r3, #7
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d00a      	beq.n	800b9a8 <prvInitialiseNewTask+0x48>
	__asm volatile
 800b992:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b996:	f383 8811 	msr	BASEPRI, r3
 800b99a:	f3bf 8f6f 	isb	sy
 800b99e:	f3bf 8f4f 	dsb	sy
 800b9a2:	617b      	str	r3, [r7, #20]
}
 800b9a4:	bf00      	nop
 800b9a6:	e7fe      	b.n	800b9a6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d01f      	beq.n	800b9ee <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	61fb      	str	r3, [r7, #28]
 800b9b2:	e012      	b.n	800b9da <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9b4:	68ba      	ldr	r2, [r7, #8]
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	7819      	ldrb	r1, [r3, #0]
 800b9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	3334      	adds	r3, #52	; 0x34
 800b9c4:	460a      	mov	r2, r1
 800b9c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	781b      	ldrb	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d006      	beq.n	800b9e2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9d4:	69fb      	ldr	r3, [r7, #28]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	61fb      	str	r3, [r7, #28]
 800b9da:	69fb      	ldr	r3, [r7, #28]
 800b9dc:	2b0f      	cmp	r3, #15
 800b9de:	d9e9      	bls.n	800b9b4 <prvInitialiseNewTask+0x54>
 800b9e0:	e000      	b.n	800b9e4 <prvInitialiseNewTask+0x84>
			{
				break;
 800b9e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9ec:	e003      	b.n	800b9f6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f8:	2b06      	cmp	r3, #6
 800b9fa:	d901      	bls.n	800ba00 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b9fc:	2306      	movs	r3, #6
 800b9fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba04:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba0a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ba0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba0e:	2200      	movs	r2, #0
 800ba10:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba14:	3304      	adds	r3, #4
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7fe fe43 	bl	800a6a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1e:	3318      	adds	r3, #24
 800ba20:	4618      	mov	r0, r3
 800ba22:	f7fe fe3e 	bl	800a6a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba2e:	f1c3 0207 	rsb	r2, r3, #7
 800ba32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba3a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3e:	2200      	movs	r2, #0
 800ba40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba46:	2200      	movs	r2, #0
 800ba48:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ba4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4e:	334c      	adds	r3, #76	; 0x4c
 800ba50:	224c      	movs	r2, #76	; 0x4c
 800ba52:	2100      	movs	r1, #0
 800ba54:	4618      	mov	r0, r3
 800ba56:	f019 fb79 	bl	802514c <memset>
 800ba5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba5c:	4a0c      	ldr	r2, [pc, #48]	; (800ba90 <prvInitialiseNewTask+0x130>)
 800ba5e:	651a      	str	r2, [r3, #80]	; 0x50
 800ba60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba62:	4a0c      	ldr	r2, [pc, #48]	; (800ba94 <prvInitialiseNewTask+0x134>)
 800ba64:	655a      	str	r2, [r3, #84]	; 0x54
 800ba66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba68:	4a0b      	ldr	r2, [pc, #44]	; (800ba98 <prvInitialiseNewTask+0x138>)
 800ba6a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba6c:	683a      	ldr	r2, [r7, #0]
 800ba6e:	68f9      	ldr	r1, [r7, #12]
 800ba70:	69b8      	ldr	r0, [r7, #24]
 800ba72:	f001 fa6b 	bl	800cf4c <pxPortInitialiseStack>
 800ba76:	4602      	mov	r2, r0
 800ba78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d002      	beq.n	800ba88 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba88:	bf00      	nop
 800ba8a:	3720      	adds	r7, #32
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}
 800ba90:	20016380 	.word	0x20016380
 800ba94:	200163e8 	.word	0x200163e8
 800ba98:	20016450 	.word	0x20016450

0800ba9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800baa4:	f001 fb7e 	bl	800d1a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800baa8:	4b2a      	ldr	r3, [pc, #168]	; (800bb54 <prvAddNewTaskToReadyList+0xb8>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	3301      	adds	r3, #1
 800baae:	4a29      	ldr	r2, [pc, #164]	; (800bb54 <prvAddNewTaskToReadyList+0xb8>)
 800bab0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bab2:	4b29      	ldr	r3, [pc, #164]	; (800bb58 <prvAddNewTaskToReadyList+0xbc>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d109      	bne.n	800bace <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800baba:	4a27      	ldr	r2, [pc, #156]	; (800bb58 <prvAddNewTaskToReadyList+0xbc>)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bac0:	4b24      	ldr	r3, [pc, #144]	; (800bb54 <prvAddNewTaskToReadyList+0xb8>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	2b01      	cmp	r3, #1
 800bac6:	d110      	bne.n	800baea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bac8:	f000 fc2a 	bl	800c320 <prvInitialiseTaskLists>
 800bacc:	e00d      	b.n	800baea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bace:	4b23      	ldr	r3, [pc, #140]	; (800bb5c <prvAddNewTaskToReadyList+0xc0>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d109      	bne.n	800baea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bad6:	4b20      	ldr	r3, [pc, #128]	; (800bb58 <prvAddNewTaskToReadyList+0xbc>)
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d802      	bhi.n	800baea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bae4:	4a1c      	ldr	r2, [pc, #112]	; (800bb58 <prvAddNewTaskToReadyList+0xbc>)
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800baea:	4b1d      	ldr	r3, [pc, #116]	; (800bb60 <prvAddNewTaskToReadyList+0xc4>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	3301      	adds	r3, #1
 800baf0:	4a1b      	ldr	r2, [pc, #108]	; (800bb60 <prvAddNewTaskToReadyList+0xc4>)
 800baf2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf8:	2201      	movs	r2, #1
 800bafa:	409a      	lsls	r2, r3
 800bafc:	4b19      	ldr	r3, [pc, #100]	; (800bb64 <prvAddNewTaskToReadyList+0xc8>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4313      	orrs	r3, r2
 800bb02:	4a18      	ldr	r2, [pc, #96]	; (800bb64 <prvAddNewTaskToReadyList+0xc8>)
 800bb04:	6013      	str	r3, [r2, #0]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	4a15      	ldr	r2, [pc, #84]	; (800bb68 <prvAddNewTaskToReadyList+0xcc>)
 800bb14:	441a      	add	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	3304      	adds	r3, #4
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	4610      	mov	r0, r2
 800bb1e:	f7fe fdcd 	bl	800a6bc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb22:	f001 fb6f 	bl	800d204 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb26:	4b0d      	ldr	r3, [pc, #52]	; (800bb5c <prvAddNewTaskToReadyList+0xc0>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d00e      	beq.n	800bb4c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb2e:	4b0a      	ldr	r3, [pc, #40]	; (800bb58 <prvAddNewTaskToReadyList+0xbc>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb38:	429a      	cmp	r2, r3
 800bb3a:	d207      	bcs.n	800bb4c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb3c:	4b0b      	ldr	r3, [pc, #44]	; (800bb6c <prvAddNewTaskToReadyList+0xd0>)
 800bb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb4c:	bf00      	nop
 800bb4e:	3708      	adds	r7, #8
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	20006de0 	.word	0x20006de0
 800bb58:	20006ce0 	.word	0x20006ce0
 800bb5c:	20006dec 	.word	0x20006dec
 800bb60:	20006dfc 	.word	0x20006dfc
 800bb64:	20006de8 	.word	0x20006de8
 800bb68:	20006ce4 	.word	0x20006ce4
 800bb6c:	e000ed04 	.word	0xe000ed04

0800bb70 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b084      	sub	sp, #16
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb78:	2300      	movs	r3, #0
 800bb7a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d017      	beq.n	800bbb2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb82:	4b13      	ldr	r3, [pc, #76]	; (800bbd0 <vTaskDelay+0x60>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d00a      	beq.n	800bba0 <vTaskDelay+0x30>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	60bb      	str	r3, [r7, #8]
}
 800bb9c:	bf00      	nop
 800bb9e:	e7fe      	b.n	800bb9e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bba0:	f000 f88a 	bl	800bcb8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bba4:	2100      	movs	r1, #0
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 fe38 	bl	800c81c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bbac:	f000 f892 	bl	800bcd4 <xTaskResumeAll>
 800bbb0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d107      	bne.n	800bbc8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bbb8:	4b06      	ldr	r3, [pc, #24]	; (800bbd4 <vTaskDelay+0x64>)
 800bbba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbbe:	601a      	str	r2, [r3, #0]
 800bbc0:	f3bf 8f4f 	dsb	sy
 800bbc4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbc8:	bf00      	nop
 800bbca:	3710      	adds	r7, #16
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	20006e08 	.word	0x20006e08
 800bbd4:	e000ed04 	.word	0xe000ed04

0800bbd8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b08a      	sub	sp, #40	; 0x28
 800bbdc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbde:	2300      	movs	r3, #0
 800bbe0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbe6:	463a      	mov	r2, r7
 800bbe8:	1d39      	adds	r1, r7, #4
 800bbea:	f107 0308 	add.w	r3, r7, #8
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f7f6 fb7c 	bl	80022ec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbf4:	6839      	ldr	r1, [r7, #0]
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	9202      	str	r2, [sp, #8]
 800bbfc:	9301      	str	r3, [sp, #4]
 800bbfe:	2300      	movs	r3, #0
 800bc00:	9300      	str	r3, [sp, #0]
 800bc02:	2300      	movs	r3, #0
 800bc04:	460a      	mov	r2, r1
 800bc06:	4924      	ldr	r1, [pc, #144]	; (800bc98 <vTaskStartScheduler+0xc0>)
 800bc08:	4824      	ldr	r0, [pc, #144]	; (800bc9c <vTaskStartScheduler+0xc4>)
 800bc0a:	f7ff fe07 	bl	800b81c <xTaskCreateStatic>
 800bc0e:	4603      	mov	r3, r0
 800bc10:	4a23      	ldr	r2, [pc, #140]	; (800bca0 <vTaskStartScheduler+0xc8>)
 800bc12:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc14:	4b22      	ldr	r3, [pc, #136]	; (800bca0 <vTaskStartScheduler+0xc8>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d002      	beq.n	800bc22 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	617b      	str	r3, [r7, #20]
 800bc20:	e001      	b.n	800bc26 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc22:	2300      	movs	r3, #0
 800bc24:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d102      	bne.n	800bc32 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc2c:	f000 fe5c 	bl	800c8e8 <xTimerCreateTimerTask>
 800bc30:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d11b      	bne.n	800bc70 <vTaskStartScheduler+0x98>
	__asm volatile
 800bc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc3c:	f383 8811 	msr	BASEPRI, r3
 800bc40:	f3bf 8f6f 	isb	sy
 800bc44:	f3bf 8f4f 	dsb	sy
 800bc48:	613b      	str	r3, [r7, #16]
}
 800bc4a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc4c:	4b15      	ldr	r3, [pc, #84]	; (800bca4 <vTaskStartScheduler+0xcc>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	334c      	adds	r3, #76	; 0x4c
 800bc52:	4a15      	ldr	r2, [pc, #84]	; (800bca8 <vTaskStartScheduler+0xd0>)
 800bc54:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc56:	4b15      	ldr	r3, [pc, #84]	; (800bcac <vTaskStartScheduler+0xd4>)
 800bc58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc5e:	4b14      	ldr	r3, [pc, #80]	; (800bcb0 <vTaskStartScheduler+0xd8>)
 800bc60:	2201      	movs	r2, #1
 800bc62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc64:	4b13      	ldr	r3, [pc, #76]	; (800bcb4 <vTaskStartScheduler+0xdc>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc6a:	f001 f9f9 	bl	800d060 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc6e:	e00e      	b.n	800bc8e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc76:	d10a      	bne.n	800bc8e <vTaskStartScheduler+0xb6>
	__asm volatile
 800bc78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7c:	f383 8811 	msr	BASEPRI, r3
 800bc80:	f3bf 8f6f 	isb	sy
 800bc84:	f3bf 8f4f 	dsb	sy
 800bc88:	60fb      	str	r3, [r7, #12]
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <vTaskStartScheduler+0xb4>
}
 800bc8e:	bf00      	nop
 800bc90:	3718      	adds	r7, #24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	bd80      	pop	{r7, pc}
 800bc96:	bf00      	nop
 800bc98:	08029d9c 	.word	0x08029d9c
 800bc9c:	0800c2f1 	.word	0x0800c2f1
 800bca0:	20006e04 	.word	0x20006e04
 800bca4:	20006ce0 	.word	0x20006ce0
 800bca8:	200000a0 	.word	0x200000a0
 800bcac:	20006e00 	.word	0x20006e00
 800bcb0:	20006dec 	.word	0x20006dec
 800bcb4:	20006de4 	.word	0x20006de4

0800bcb8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bcb8:	b480      	push	{r7}
 800bcba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bcbc:	4b04      	ldr	r3, [pc, #16]	; (800bcd0 <vTaskSuspendAll+0x18>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	4a03      	ldr	r2, [pc, #12]	; (800bcd0 <vTaskSuspendAll+0x18>)
 800bcc4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bcc6:	bf00      	nop
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	20006e08 	.word	0x20006e08

0800bcd4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcda:	2300      	movs	r3, #0
 800bcdc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bcde:	2300      	movs	r3, #0
 800bce0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bce2:	4b41      	ldr	r3, [pc, #260]	; (800bde8 <xTaskResumeAll+0x114>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d10a      	bne.n	800bd00 <xTaskResumeAll+0x2c>
	__asm volatile
 800bcea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcee:	f383 8811 	msr	BASEPRI, r3
 800bcf2:	f3bf 8f6f 	isb	sy
 800bcf6:	f3bf 8f4f 	dsb	sy
 800bcfa:	603b      	str	r3, [r7, #0]
}
 800bcfc:	bf00      	nop
 800bcfe:	e7fe      	b.n	800bcfe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd00:	f001 fa50 	bl	800d1a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd04:	4b38      	ldr	r3, [pc, #224]	; (800bde8 <xTaskResumeAll+0x114>)
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	3b01      	subs	r3, #1
 800bd0a:	4a37      	ldr	r2, [pc, #220]	; (800bde8 <xTaskResumeAll+0x114>)
 800bd0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd0e:	4b36      	ldr	r3, [pc, #216]	; (800bde8 <xTaskResumeAll+0x114>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d161      	bne.n	800bdda <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bd16:	4b35      	ldr	r3, [pc, #212]	; (800bdec <xTaskResumeAll+0x118>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d05d      	beq.n	800bdda <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd1e:	e02e      	b.n	800bd7e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd20:	4b33      	ldr	r3, [pc, #204]	; (800bdf0 <xTaskResumeAll+0x11c>)
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	68db      	ldr	r3, [r3, #12]
 800bd26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	3318      	adds	r3, #24
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f7fe fd22 	bl	800a776 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	3304      	adds	r3, #4
 800bd36:	4618      	mov	r0, r3
 800bd38:	f7fe fd1d 	bl	800a776 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd40:	2201      	movs	r2, #1
 800bd42:	409a      	lsls	r2, r3
 800bd44:	4b2b      	ldr	r3, [pc, #172]	; (800bdf4 <xTaskResumeAll+0x120>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4313      	orrs	r3, r2
 800bd4a:	4a2a      	ldr	r2, [pc, #168]	; (800bdf4 <xTaskResumeAll+0x120>)
 800bd4c:	6013      	str	r3, [r2, #0]
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	4a27      	ldr	r2, [pc, #156]	; (800bdf8 <xTaskResumeAll+0x124>)
 800bd5c:	441a      	add	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	3304      	adds	r3, #4
 800bd62:	4619      	mov	r1, r3
 800bd64:	4610      	mov	r0, r2
 800bd66:	f7fe fca9 	bl	800a6bc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd6e:	4b23      	ldr	r3, [pc, #140]	; (800bdfc <xTaskResumeAll+0x128>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd74:	429a      	cmp	r2, r3
 800bd76:	d302      	bcc.n	800bd7e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bd78:	4b21      	ldr	r3, [pc, #132]	; (800be00 <xTaskResumeAll+0x12c>)
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd7e:	4b1c      	ldr	r3, [pc, #112]	; (800bdf0 <xTaskResumeAll+0x11c>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d1cc      	bne.n	800bd20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d001      	beq.n	800bd90 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd8c:	f000 fb6a 	bl	800c464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd90:	4b1c      	ldr	r3, [pc, #112]	; (800be04 <xTaskResumeAll+0x130>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d010      	beq.n	800bdbe <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd9c:	f000 f858 	bl	800be50 <xTaskIncrementTick>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d002      	beq.n	800bdac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bda6:	4b16      	ldr	r3, [pc, #88]	; (800be00 <xTaskResumeAll+0x12c>)
 800bda8:	2201      	movs	r2, #1
 800bdaa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	3b01      	subs	r3, #1
 800bdb0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1f1      	bne.n	800bd9c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bdb8:	4b12      	ldr	r3, [pc, #72]	; (800be04 <xTaskResumeAll+0x130>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bdbe:	4b10      	ldr	r3, [pc, #64]	; (800be00 <xTaskResumeAll+0x12c>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d009      	beq.n	800bdda <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bdc6:	2301      	movs	r3, #1
 800bdc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdca:	4b0f      	ldr	r3, [pc, #60]	; (800be08 <xTaskResumeAll+0x134>)
 800bdcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd0:	601a      	str	r2, [r3, #0]
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdda:	f001 fa13 	bl	800d204 <vPortExitCritical>

	return xAlreadyYielded;
 800bdde:	68bb      	ldr	r3, [r7, #8]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	20006e08 	.word	0x20006e08
 800bdec:	20006de0 	.word	0x20006de0
 800bdf0:	20006da0 	.word	0x20006da0
 800bdf4:	20006de8 	.word	0x20006de8
 800bdf8:	20006ce4 	.word	0x20006ce4
 800bdfc:	20006ce0 	.word	0x20006ce0
 800be00:	20006df4 	.word	0x20006df4
 800be04:	20006df0 	.word	0x20006df0
 800be08:	e000ed04 	.word	0xe000ed04

0800be0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800be12:	4b05      	ldr	r3, [pc, #20]	; (800be28 <xTaskGetTickCount+0x1c>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800be18:	687b      	ldr	r3, [r7, #4]
}
 800be1a:	4618      	mov	r0, r3
 800be1c:	370c      	adds	r7, #12
 800be1e:	46bd      	mov	sp, r7
 800be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be24:	4770      	bx	lr
 800be26:	bf00      	nop
 800be28:	20006de4 	.word	0x20006de4

0800be2c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be32:	f001 fa99 	bl	800d368 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800be36:	2300      	movs	r3, #0
 800be38:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800be3a:	4b04      	ldr	r3, [pc, #16]	; (800be4c <xTaskGetTickCountFromISR+0x20>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be40:	683b      	ldr	r3, [r7, #0]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3708      	adds	r7, #8
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	20006de4 	.word	0x20006de4

0800be50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b086      	sub	sp, #24
 800be54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be56:	2300      	movs	r3, #0
 800be58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be5a:	4b4e      	ldr	r3, [pc, #312]	; (800bf94 <xTaskIncrementTick+0x144>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	f040 808e 	bne.w	800bf80 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be64:	4b4c      	ldr	r3, [pc, #304]	; (800bf98 <xTaskIncrementTick+0x148>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	3301      	adds	r3, #1
 800be6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be6c:	4a4a      	ldr	r2, [pc, #296]	; (800bf98 <xTaskIncrementTick+0x148>)
 800be6e:	693b      	ldr	r3, [r7, #16]
 800be70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d120      	bne.n	800beba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800be78:	4b48      	ldr	r3, [pc, #288]	; (800bf9c <xTaskIncrementTick+0x14c>)
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d00a      	beq.n	800be98 <xTaskIncrementTick+0x48>
	__asm volatile
 800be82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be86:	f383 8811 	msr	BASEPRI, r3
 800be8a:	f3bf 8f6f 	isb	sy
 800be8e:	f3bf 8f4f 	dsb	sy
 800be92:	603b      	str	r3, [r7, #0]
}
 800be94:	bf00      	nop
 800be96:	e7fe      	b.n	800be96 <xTaskIncrementTick+0x46>
 800be98:	4b40      	ldr	r3, [pc, #256]	; (800bf9c <xTaskIncrementTick+0x14c>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	60fb      	str	r3, [r7, #12]
 800be9e:	4b40      	ldr	r3, [pc, #256]	; (800bfa0 <xTaskIncrementTick+0x150>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	4a3e      	ldr	r2, [pc, #248]	; (800bf9c <xTaskIncrementTick+0x14c>)
 800bea4:	6013      	str	r3, [r2, #0]
 800bea6:	4a3e      	ldr	r2, [pc, #248]	; (800bfa0 <xTaskIncrementTick+0x150>)
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	6013      	str	r3, [r2, #0]
 800beac:	4b3d      	ldr	r3, [pc, #244]	; (800bfa4 <xTaskIncrementTick+0x154>)
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	3301      	adds	r3, #1
 800beb2:	4a3c      	ldr	r2, [pc, #240]	; (800bfa4 <xTaskIncrementTick+0x154>)
 800beb4:	6013      	str	r3, [r2, #0]
 800beb6:	f000 fad5 	bl	800c464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800beba:	4b3b      	ldr	r3, [pc, #236]	; (800bfa8 <xTaskIncrementTick+0x158>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	693a      	ldr	r2, [r7, #16]
 800bec0:	429a      	cmp	r2, r3
 800bec2:	d348      	bcc.n	800bf56 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bec4:	4b35      	ldr	r3, [pc, #212]	; (800bf9c <xTaskIncrementTick+0x14c>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d104      	bne.n	800bed8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bece:	4b36      	ldr	r3, [pc, #216]	; (800bfa8 <xTaskIncrementTick+0x158>)
 800bed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bed4:	601a      	str	r2, [r3, #0]
					break;
 800bed6:	e03e      	b.n	800bf56 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bed8:	4b30      	ldr	r3, [pc, #192]	; (800bf9c <xTaskIncrementTick+0x14c>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bee8:	693a      	ldr	r2, [r7, #16]
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	429a      	cmp	r2, r3
 800beee:	d203      	bcs.n	800bef8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bef0:	4a2d      	ldr	r2, [pc, #180]	; (800bfa8 <xTaskIncrementTick+0x158>)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bef6:	e02e      	b.n	800bf56 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	3304      	adds	r3, #4
 800befc:	4618      	mov	r0, r3
 800befe:	f7fe fc3a 	bl	800a776 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d004      	beq.n	800bf14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	3318      	adds	r3, #24
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fe fc31 	bl	800a776 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf18:	2201      	movs	r2, #1
 800bf1a:	409a      	lsls	r2, r3
 800bf1c:	4b23      	ldr	r3, [pc, #140]	; (800bfac <xTaskIncrementTick+0x15c>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	4313      	orrs	r3, r2
 800bf22:	4a22      	ldr	r2, [pc, #136]	; (800bfac <xTaskIncrementTick+0x15c>)
 800bf24:	6013      	str	r3, [r2, #0]
 800bf26:	68bb      	ldr	r3, [r7, #8]
 800bf28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf2a:	4613      	mov	r3, r2
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	4413      	add	r3, r2
 800bf30:	009b      	lsls	r3, r3, #2
 800bf32:	4a1f      	ldr	r2, [pc, #124]	; (800bfb0 <xTaskIncrementTick+0x160>)
 800bf34:	441a      	add	r2, r3
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	3304      	adds	r3, #4
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	4610      	mov	r0, r2
 800bf3e:	f7fe fbbd 	bl	800a6bc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf46:	4b1b      	ldr	r3, [pc, #108]	; (800bfb4 <xTaskIncrementTick+0x164>)
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d3b9      	bcc.n	800bec4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf50:	2301      	movs	r3, #1
 800bf52:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf54:	e7b6      	b.n	800bec4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf56:	4b17      	ldr	r3, [pc, #92]	; (800bfb4 <xTaskIncrementTick+0x164>)
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf5c:	4914      	ldr	r1, [pc, #80]	; (800bfb0 <xTaskIncrementTick+0x160>)
 800bf5e:	4613      	mov	r3, r2
 800bf60:	009b      	lsls	r3, r3, #2
 800bf62:	4413      	add	r3, r2
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	440b      	add	r3, r1
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b01      	cmp	r3, #1
 800bf6c:	d901      	bls.n	800bf72 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bf72:	4b11      	ldr	r3, [pc, #68]	; (800bfb8 <xTaskIncrementTick+0x168>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d007      	beq.n	800bf8a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bf7a:	2301      	movs	r3, #1
 800bf7c:	617b      	str	r3, [r7, #20]
 800bf7e:	e004      	b.n	800bf8a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bf80:	4b0e      	ldr	r3, [pc, #56]	; (800bfbc <xTaskIncrementTick+0x16c>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	3301      	adds	r3, #1
 800bf86:	4a0d      	ldr	r2, [pc, #52]	; (800bfbc <xTaskIncrementTick+0x16c>)
 800bf88:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bf8a:	697b      	ldr	r3, [r7, #20]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3718      	adds	r7, #24
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}
 800bf94:	20006e08 	.word	0x20006e08
 800bf98:	20006de4 	.word	0x20006de4
 800bf9c:	20006d98 	.word	0x20006d98
 800bfa0:	20006d9c 	.word	0x20006d9c
 800bfa4:	20006df8 	.word	0x20006df8
 800bfa8:	20006e00 	.word	0x20006e00
 800bfac:	20006de8 	.word	0x20006de8
 800bfb0:	20006ce4 	.word	0x20006ce4
 800bfb4:	20006ce0 	.word	0x20006ce0
 800bfb8:	20006df4 	.word	0x20006df4
 800bfbc:	20006df0 	.word	0x20006df0

0800bfc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	b087      	sub	sp, #28
 800bfc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bfc6:	4b29      	ldr	r3, [pc, #164]	; (800c06c <vTaskSwitchContext+0xac>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d003      	beq.n	800bfd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bfce:	4b28      	ldr	r3, [pc, #160]	; (800c070 <vTaskSwitchContext+0xb0>)
 800bfd0:	2201      	movs	r2, #1
 800bfd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bfd4:	e044      	b.n	800c060 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800bfd6:	4b26      	ldr	r3, [pc, #152]	; (800c070 <vTaskSwitchContext+0xb0>)
 800bfd8:	2200      	movs	r2, #0
 800bfda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfdc:	4b25      	ldr	r3, [pc, #148]	; (800c074 <vTaskSwitchContext+0xb4>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	fab3 f383 	clz	r3, r3
 800bfe8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bfea:	7afb      	ldrb	r3, [r7, #11]
 800bfec:	f1c3 031f 	rsb	r3, r3, #31
 800bff0:	617b      	str	r3, [r7, #20]
 800bff2:	4921      	ldr	r1, [pc, #132]	; (800c078 <vTaskSwitchContext+0xb8>)
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	4613      	mov	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	4413      	add	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	440b      	add	r3, r1
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d10a      	bne.n	800c01c <vTaskSwitchContext+0x5c>
	__asm volatile
 800c006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00a:	f383 8811 	msr	BASEPRI, r3
 800c00e:	f3bf 8f6f 	isb	sy
 800c012:	f3bf 8f4f 	dsb	sy
 800c016:	607b      	str	r3, [r7, #4]
}
 800c018:	bf00      	nop
 800c01a:	e7fe      	b.n	800c01a <vTaskSwitchContext+0x5a>
 800c01c:	697a      	ldr	r2, [r7, #20]
 800c01e:	4613      	mov	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	4413      	add	r3, r2
 800c024:	009b      	lsls	r3, r3, #2
 800c026:	4a14      	ldr	r2, [pc, #80]	; (800c078 <vTaskSwitchContext+0xb8>)
 800c028:	4413      	add	r3, r2
 800c02a:	613b      	str	r3, [r7, #16]
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	685a      	ldr	r2, [r3, #4]
 800c032:	693b      	ldr	r3, [r7, #16]
 800c034:	605a      	str	r2, [r3, #4]
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	685a      	ldr	r2, [r3, #4]
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	3308      	adds	r3, #8
 800c03e:	429a      	cmp	r2, r3
 800c040:	d104      	bne.n	800c04c <vTaskSwitchContext+0x8c>
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	685a      	ldr	r2, [r3, #4]
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	605a      	str	r2, [r3, #4]
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	4a0a      	ldr	r2, [pc, #40]	; (800c07c <vTaskSwitchContext+0xbc>)
 800c054:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c056:	4b09      	ldr	r3, [pc, #36]	; (800c07c <vTaskSwitchContext+0xbc>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	334c      	adds	r3, #76	; 0x4c
 800c05c:	4a08      	ldr	r2, [pc, #32]	; (800c080 <vTaskSwitchContext+0xc0>)
 800c05e:	6013      	str	r3, [r2, #0]
}
 800c060:	bf00      	nop
 800c062:	371c      	adds	r7, #28
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr
 800c06c:	20006e08 	.word	0x20006e08
 800c070:	20006df4 	.word	0x20006df4
 800c074:	20006de8 	.word	0x20006de8
 800c078:	20006ce4 	.word	0x20006ce4
 800c07c:	20006ce0 	.word	0x20006ce0
 800c080:	200000a0 	.word	0x200000a0

0800c084 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d10a      	bne.n	800c0aa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c098:	f383 8811 	msr	BASEPRI, r3
 800c09c:	f3bf 8f6f 	isb	sy
 800c0a0:	f3bf 8f4f 	dsb	sy
 800c0a4:	60fb      	str	r3, [r7, #12]
}
 800c0a6:	bf00      	nop
 800c0a8:	e7fe      	b.n	800c0a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0aa:	4b07      	ldr	r3, [pc, #28]	; (800c0c8 <vTaskPlaceOnEventList+0x44>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	3318      	adds	r3, #24
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f7fe fb26 	bl	800a704 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c0b8:	2101      	movs	r1, #1
 800c0ba:	6838      	ldr	r0, [r7, #0]
 800c0bc:	f000 fbae 	bl	800c81c <prvAddCurrentTaskToDelayedList>
}
 800c0c0:	bf00      	nop
 800c0c2:	3710      	adds	r7, #16
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	20006ce0 	.word	0x20006ce0

0800c0cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b086      	sub	sp, #24
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d10a      	bne.n	800c0f4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	617b      	str	r3, [r7, #20]
}
 800c0f0:	bf00      	nop
 800c0f2:	e7fe      	b.n	800c0f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0f4:	4b0a      	ldr	r3, [pc, #40]	; (800c120 <vTaskPlaceOnEventListRestricted+0x54>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	3318      	adds	r3, #24
 800c0fa:	4619      	mov	r1, r3
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f7fe fadd 	bl	800a6bc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d002      	beq.n	800c10e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c108:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c10c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	68b8      	ldr	r0, [r7, #8]
 800c112:	f000 fb83 	bl	800c81c <prvAddCurrentTaskToDelayedList>
	}
 800c116:	bf00      	nop
 800c118:	3718      	adds	r7, #24
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	20006ce0 	.word	0x20006ce0

0800c124 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b086      	sub	sp, #24
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	68db      	ldr	r3, [r3, #12]
 800c132:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10a      	bne.n	800c150 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	60fb      	str	r3, [r7, #12]
}
 800c14c:	bf00      	nop
 800c14e:	e7fe      	b.n	800c14e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	3318      	adds	r3, #24
 800c154:	4618      	mov	r0, r3
 800c156:	f7fe fb0e 	bl	800a776 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c15a:	4b1d      	ldr	r3, [pc, #116]	; (800c1d0 <xTaskRemoveFromEventList+0xac>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d11c      	bne.n	800c19c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	3304      	adds	r3, #4
 800c166:	4618      	mov	r0, r3
 800c168:	f7fe fb05 	bl	800a776 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c170:	2201      	movs	r2, #1
 800c172:	409a      	lsls	r2, r3
 800c174:	4b17      	ldr	r3, [pc, #92]	; (800c1d4 <xTaskRemoveFromEventList+0xb0>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4313      	orrs	r3, r2
 800c17a:	4a16      	ldr	r2, [pc, #88]	; (800c1d4 <xTaskRemoveFromEventList+0xb0>)
 800c17c:	6013      	str	r3, [r2, #0]
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c182:	4613      	mov	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	4413      	add	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4a13      	ldr	r2, [pc, #76]	; (800c1d8 <xTaskRemoveFromEventList+0xb4>)
 800c18c:	441a      	add	r2, r3
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	3304      	adds	r3, #4
 800c192:	4619      	mov	r1, r3
 800c194:	4610      	mov	r0, r2
 800c196:	f7fe fa91 	bl	800a6bc <vListInsertEnd>
 800c19a:	e005      	b.n	800c1a8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	3318      	adds	r3, #24
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	480e      	ldr	r0, [pc, #56]	; (800c1dc <xTaskRemoveFromEventList+0xb8>)
 800c1a4:	f7fe fa8a 	bl	800a6bc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1ac:	4b0c      	ldr	r3, [pc, #48]	; (800c1e0 <xTaskRemoveFromEventList+0xbc>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d905      	bls.n	800c1c2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c1b6:	2301      	movs	r3, #1
 800c1b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c1ba:	4b0a      	ldr	r3, [pc, #40]	; (800c1e4 <xTaskRemoveFromEventList+0xc0>)
 800c1bc:	2201      	movs	r2, #1
 800c1be:	601a      	str	r2, [r3, #0]
 800c1c0:	e001      	b.n	800c1c6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c1c6:	697b      	ldr	r3, [r7, #20]
}
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	3718      	adds	r7, #24
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	20006e08 	.word	0x20006e08
 800c1d4:	20006de8 	.word	0x20006de8
 800c1d8:	20006ce4 	.word	0x20006ce4
 800c1dc:	20006da0 	.word	0x20006da0
 800c1e0:	20006ce0 	.word	0x20006ce0
 800c1e4:	20006df4 	.word	0x20006df4

0800c1e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1f0:	4b06      	ldr	r3, [pc, #24]	; (800c20c <vTaskInternalSetTimeOutState+0x24>)
 800c1f2:	681a      	ldr	r2, [r3, #0]
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c1f8:	4b05      	ldr	r3, [pc, #20]	; (800c210 <vTaskInternalSetTimeOutState+0x28>)
 800c1fa:	681a      	ldr	r2, [r3, #0]
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	605a      	str	r2, [r3, #4]
}
 800c200:	bf00      	nop
 800c202:	370c      	adds	r7, #12
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	20006df8 	.word	0x20006df8
 800c210:	20006de4 	.word	0x20006de4

0800c214 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b088      	sub	sp, #32
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10a      	bne.n	800c23a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	613b      	str	r3, [r7, #16]
}
 800c236:	bf00      	nop
 800c238:	e7fe      	b.n	800c238 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10a      	bne.n	800c256 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	60fb      	str	r3, [r7, #12]
}
 800c252:	bf00      	nop
 800c254:	e7fe      	b.n	800c254 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c256:	f000 ffa5 	bl	800d1a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c25a:	4b1d      	ldr	r3, [pc, #116]	; (800c2d0 <xTaskCheckForTimeOut+0xbc>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	685b      	ldr	r3, [r3, #4]
 800c264:	69ba      	ldr	r2, [r7, #24]
 800c266:	1ad3      	subs	r3, r2, r3
 800c268:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c272:	d102      	bne.n	800c27a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c274:	2300      	movs	r3, #0
 800c276:	61fb      	str	r3, [r7, #28]
 800c278:	e023      	b.n	800c2c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681a      	ldr	r2, [r3, #0]
 800c27e:	4b15      	ldr	r3, [pc, #84]	; (800c2d4 <xTaskCheckForTimeOut+0xc0>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	429a      	cmp	r2, r3
 800c284:	d007      	beq.n	800c296 <xTaskCheckForTimeOut+0x82>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	69ba      	ldr	r2, [r7, #24]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d302      	bcc.n	800c296 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c290:	2301      	movs	r3, #1
 800c292:	61fb      	str	r3, [r7, #28]
 800c294:	e015      	b.n	800c2c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d20b      	bcs.n	800c2b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	681a      	ldr	r2, [r3, #0]
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	1ad2      	subs	r2, r2, r3
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7ff ff9b 	bl	800c1e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	61fb      	str	r3, [r7, #28]
 800c2b6:	e004      	b.n	800c2c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2c2:	f000 ff9f 	bl	800d204 <vPortExitCritical>

	return xReturn;
 800c2c6:	69fb      	ldr	r3, [r7, #28]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3720      	adds	r7, #32
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	20006de4 	.word	0x20006de4
 800c2d4:	20006df8 	.word	0x20006df8

0800c2d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2d8:	b480      	push	{r7}
 800c2da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c2dc:	4b03      	ldr	r3, [pc, #12]	; (800c2ec <vTaskMissedYield+0x14>)
 800c2de:	2201      	movs	r2, #1
 800c2e0:	601a      	str	r2, [r3, #0]
}
 800c2e2:	bf00      	nop
 800c2e4:	46bd      	mov	sp, r7
 800c2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ea:	4770      	bx	lr
 800c2ec:	20006df4 	.word	0x20006df4

0800c2f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b082      	sub	sp, #8
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c2f8:	f000 f852 	bl	800c3a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c2fc:	4b06      	ldr	r3, [pc, #24]	; (800c318 <prvIdleTask+0x28>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b01      	cmp	r3, #1
 800c302:	d9f9      	bls.n	800c2f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c304:	4b05      	ldr	r3, [pc, #20]	; (800c31c <prvIdleTask+0x2c>)
 800c306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c30a:	601a      	str	r2, [r3, #0]
 800c30c:	f3bf 8f4f 	dsb	sy
 800c310:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c314:	e7f0      	b.n	800c2f8 <prvIdleTask+0x8>
 800c316:	bf00      	nop
 800c318:	20006ce4 	.word	0x20006ce4
 800c31c:	e000ed04 	.word	0xe000ed04

0800c320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c326:	2300      	movs	r3, #0
 800c328:	607b      	str	r3, [r7, #4]
 800c32a:	e00c      	b.n	800c346 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	4613      	mov	r3, r2
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	4a12      	ldr	r2, [pc, #72]	; (800c380 <prvInitialiseTaskLists+0x60>)
 800c338:	4413      	add	r3, r2
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe f991 	bl	800a662 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3301      	adds	r3, #1
 800c344:	607b      	str	r3, [r7, #4]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2b06      	cmp	r3, #6
 800c34a:	d9ef      	bls.n	800c32c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c34c:	480d      	ldr	r0, [pc, #52]	; (800c384 <prvInitialiseTaskLists+0x64>)
 800c34e:	f7fe f988 	bl	800a662 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c352:	480d      	ldr	r0, [pc, #52]	; (800c388 <prvInitialiseTaskLists+0x68>)
 800c354:	f7fe f985 	bl	800a662 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c358:	480c      	ldr	r0, [pc, #48]	; (800c38c <prvInitialiseTaskLists+0x6c>)
 800c35a:	f7fe f982 	bl	800a662 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c35e:	480c      	ldr	r0, [pc, #48]	; (800c390 <prvInitialiseTaskLists+0x70>)
 800c360:	f7fe f97f 	bl	800a662 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c364:	480b      	ldr	r0, [pc, #44]	; (800c394 <prvInitialiseTaskLists+0x74>)
 800c366:	f7fe f97c 	bl	800a662 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c36a:	4b0b      	ldr	r3, [pc, #44]	; (800c398 <prvInitialiseTaskLists+0x78>)
 800c36c:	4a05      	ldr	r2, [pc, #20]	; (800c384 <prvInitialiseTaskLists+0x64>)
 800c36e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c370:	4b0a      	ldr	r3, [pc, #40]	; (800c39c <prvInitialiseTaskLists+0x7c>)
 800c372:	4a05      	ldr	r2, [pc, #20]	; (800c388 <prvInitialiseTaskLists+0x68>)
 800c374:	601a      	str	r2, [r3, #0]
}
 800c376:	bf00      	nop
 800c378:	3708      	adds	r7, #8
 800c37a:	46bd      	mov	sp, r7
 800c37c:	bd80      	pop	{r7, pc}
 800c37e:	bf00      	nop
 800c380:	20006ce4 	.word	0x20006ce4
 800c384:	20006d70 	.word	0x20006d70
 800c388:	20006d84 	.word	0x20006d84
 800c38c:	20006da0 	.word	0x20006da0
 800c390:	20006db4 	.word	0x20006db4
 800c394:	20006dcc 	.word	0x20006dcc
 800c398:	20006d98 	.word	0x20006d98
 800c39c:	20006d9c 	.word	0x20006d9c

0800c3a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3a6:	e019      	b.n	800c3dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3a8:	f000 fefc 	bl	800d1a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3ac:	4b10      	ldr	r3, [pc, #64]	; (800c3f0 <prvCheckTasksWaitingTermination+0x50>)
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	3304      	adds	r3, #4
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7fe f9dc 	bl	800a776 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c3be:	4b0d      	ldr	r3, [pc, #52]	; (800c3f4 <prvCheckTasksWaitingTermination+0x54>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	3b01      	subs	r3, #1
 800c3c4:	4a0b      	ldr	r2, [pc, #44]	; (800c3f4 <prvCheckTasksWaitingTermination+0x54>)
 800c3c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c3c8:	4b0b      	ldr	r3, [pc, #44]	; (800c3f8 <prvCheckTasksWaitingTermination+0x58>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	3b01      	subs	r3, #1
 800c3ce:	4a0a      	ldr	r2, [pc, #40]	; (800c3f8 <prvCheckTasksWaitingTermination+0x58>)
 800c3d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c3d2:	f000 ff17 	bl	800d204 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f810 	bl	800c3fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3dc:	4b06      	ldr	r3, [pc, #24]	; (800c3f8 <prvCheckTasksWaitingTermination+0x58>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1e1      	bne.n	800c3a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c3e4:	bf00      	nop
 800c3e6:	bf00      	nop
 800c3e8:	3708      	adds	r7, #8
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	bd80      	pop	{r7, pc}
 800c3ee:	bf00      	nop
 800c3f0:	20006db4 	.word	0x20006db4
 800c3f4:	20006de0 	.word	0x20006de0
 800c3f8:	20006dc8 	.word	0x20006dc8

0800c3fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	334c      	adds	r3, #76	; 0x4c
 800c408:	4618      	mov	r0, r3
 800c40a:	f01a f8c5 	bl	8026598 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c414:	2b00      	cmp	r3, #0
 800c416:	d108      	bne.n	800c42a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c41c:	4618      	mov	r0, r3
 800c41e:	f001 f8af 	bl	800d580 <vPortFree>
				vPortFree( pxTCB );
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f001 f8ac 	bl	800d580 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c428:	e018      	b.n	800c45c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c430:	2b01      	cmp	r3, #1
 800c432:	d103      	bne.n	800c43c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f001 f8a3 	bl	800d580 <vPortFree>
	}
 800c43a:	e00f      	b.n	800c45c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800c442:	2b02      	cmp	r3, #2
 800c444:	d00a      	beq.n	800c45c <prvDeleteTCB+0x60>
	__asm volatile
 800c446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44a:	f383 8811 	msr	BASEPRI, r3
 800c44e:	f3bf 8f6f 	isb	sy
 800c452:	f3bf 8f4f 	dsb	sy
 800c456:	60fb      	str	r3, [r7, #12]
}
 800c458:	bf00      	nop
 800c45a:	e7fe      	b.n	800c45a <prvDeleteTCB+0x5e>
	}
 800c45c:	bf00      	nop
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c464:	b480      	push	{r7}
 800c466:	b083      	sub	sp, #12
 800c468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c46a:	4b0c      	ldr	r3, [pc, #48]	; (800c49c <prvResetNextTaskUnblockTime+0x38>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d104      	bne.n	800c47e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c474:	4b0a      	ldr	r3, [pc, #40]	; (800c4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800c476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c47a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c47c:	e008      	b.n	800c490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c47e:	4b07      	ldr	r3, [pc, #28]	; (800c49c <prvResetNextTaskUnblockTime+0x38>)
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	4a04      	ldr	r2, [pc, #16]	; (800c4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800c48e:	6013      	str	r3, [r2, #0]
}
 800c490:	bf00      	nop
 800c492:	370c      	adds	r7, #12
 800c494:	46bd      	mov	sp, r7
 800c496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49a:	4770      	bx	lr
 800c49c:	20006d98 	.word	0x20006d98
 800c4a0:	20006e00 	.word	0x20006e00

0800c4a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4a4:	b480      	push	{r7}
 800c4a6:	b083      	sub	sp, #12
 800c4a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4aa:	4b0b      	ldr	r3, [pc, #44]	; (800c4d8 <xTaskGetSchedulerState+0x34>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d102      	bne.n	800c4b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	607b      	str	r3, [r7, #4]
 800c4b6:	e008      	b.n	800c4ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c4b8:	4b08      	ldr	r3, [pc, #32]	; (800c4dc <xTaskGetSchedulerState+0x38>)
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d102      	bne.n	800c4c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c4c0:	2302      	movs	r3, #2
 800c4c2:	607b      	str	r3, [r7, #4]
 800c4c4:	e001      	b.n	800c4ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4ca:	687b      	ldr	r3, [r7, #4]
	}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	20006dec 	.word	0x20006dec
 800c4dc:	20006e08 	.word	0x20006e08

0800c4e0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b084      	sub	sp, #16
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d05e      	beq.n	800c5b4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fa:	4b31      	ldr	r3, [pc, #196]	; (800c5c0 <xTaskPriorityInherit+0xe0>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c500:	429a      	cmp	r2, r3
 800c502:	d24e      	bcs.n	800c5a2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	699b      	ldr	r3, [r3, #24]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	db06      	blt.n	800c51a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c50c:	4b2c      	ldr	r3, [pc, #176]	; (800c5c0 <xTaskPriorityInherit+0xe0>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c512:	f1c3 0207 	rsb	r2, r3, #7
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	6959      	ldr	r1, [r3, #20]
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c522:	4613      	mov	r3, r2
 800c524:	009b      	lsls	r3, r3, #2
 800c526:	4413      	add	r3, r2
 800c528:	009b      	lsls	r3, r3, #2
 800c52a:	4a26      	ldr	r2, [pc, #152]	; (800c5c4 <xTaskPriorityInherit+0xe4>)
 800c52c:	4413      	add	r3, r2
 800c52e:	4299      	cmp	r1, r3
 800c530:	d12f      	bne.n	800c592 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	3304      	adds	r3, #4
 800c536:	4618      	mov	r0, r3
 800c538:	f7fe f91d 	bl	800a776 <uxListRemove>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d10a      	bne.n	800c558 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c546:	2201      	movs	r2, #1
 800c548:	fa02 f303 	lsl.w	r3, r2, r3
 800c54c:	43da      	mvns	r2, r3
 800c54e:	4b1e      	ldr	r3, [pc, #120]	; (800c5c8 <xTaskPriorityInherit+0xe8>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4013      	ands	r3, r2
 800c554:	4a1c      	ldr	r2, [pc, #112]	; (800c5c8 <xTaskPriorityInherit+0xe8>)
 800c556:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c558:	4b19      	ldr	r3, [pc, #100]	; (800c5c0 <xTaskPriorityInherit+0xe0>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c566:	2201      	movs	r2, #1
 800c568:	409a      	lsls	r2, r3
 800c56a:	4b17      	ldr	r3, [pc, #92]	; (800c5c8 <xTaskPriorityInherit+0xe8>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	4313      	orrs	r3, r2
 800c570:	4a15      	ldr	r2, [pc, #84]	; (800c5c8 <xTaskPriorityInherit+0xe8>)
 800c572:	6013      	str	r3, [r2, #0]
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c578:	4613      	mov	r3, r2
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	4413      	add	r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4a10      	ldr	r2, [pc, #64]	; (800c5c4 <xTaskPriorityInherit+0xe4>)
 800c582:	441a      	add	r2, r3
 800c584:	68bb      	ldr	r3, [r7, #8]
 800c586:	3304      	adds	r3, #4
 800c588:	4619      	mov	r1, r3
 800c58a:	4610      	mov	r0, r2
 800c58c:	f7fe f896 	bl	800a6bc <vListInsertEnd>
 800c590:	e004      	b.n	800c59c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c592:	4b0b      	ldr	r3, [pc, #44]	; (800c5c0 <xTaskPriorityInherit+0xe0>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c59c:	2301      	movs	r3, #1
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	e008      	b.n	800c5b4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5a6:	4b06      	ldr	r3, [pc, #24]	; (800c5c0 <xTaskPriorityInherit+0xe0>)
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d201      	bcs.n	800c5b4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
	}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3710      	adds	r7, #16
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	20006ce0 	.word	0x20006ce0
 800c5c4:	20006ce4 	.word	0x20006ce4
 800c5c8:	20006de8 	.word	0x20006de8

0800c5cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	b086      	sub	sp, #24
 800c5d0:	af00      	add	r7, sp, #0
 800c5d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c5d8:	2300      	movs	r3, #0
 800c5da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d06e      	beq.n	800c6c0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c5e2:	4b3a      	ldr	r3, [pc, #232]	; (800c6cc <xTaskPriorityDisinherit+0x100>)
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	693a      	ldr	r2, [r7, #16]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	d00a      	beq.n	800c602 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5f0:	f383 8811 	msr	BASEPRI, r3
 800c5f4:	f3bf 8f6f 	isb	sy
 800c5f8:	f3bf 8f4f 	dsb	sy
 800c5fc:	60fb      	str	r3, [r7, #12]
}
 800c5fe:	bf00      	nop
 800c600:	e7fe      	b.n	800c600 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10a      	bne.n	800c620 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c60a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60e:	f383 8811 	msr	BASEPRI, r3
 800c612:	f3bf 8f6f 	isb	sy
 800c616:	f3bf 8f4f 	dsb	sy
 800c61a:	60bb      	str	r3, [r7, #8]
}
 800c61c:	bf00      	nop
 800c61e:	e7fe      	b.n	800c61e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c624:	1e5a      	subs	r2, r3, #1
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c632:	429a      	cmp	r2, r3
 800c634:	d044      	beq.n	800c6c0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d140      	bne.n	800c6c0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	3304      	adds	r3, #4
 800c642:	4618      	mov	r0, r3
 800c644:	f7fe f897 	bl	800a776 <uxListRemove>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d115      	bne.n	800c67a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c652:	491f      	ldr	r1, [pc, #124]	; (800c6d0 <xTaskPriorityDisinherit+0x104>)
 800c654:	4613      	mov	r3, r2
 800c656:	009b      	lsls	r3, r3, #2
 800c658:	4413      	add	r3, r2
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	440b      	add	r3, r1
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d10a      	bne.n	800c67a <xTaskPriorityDisinherit+0xae>
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c668:	2201      	movs	r2, #1
 800c66a:	fa02 f303 	lsl.w	r3, r2, r3
 800c66e:	43da      	mvns	r2, r3
 800c670:	4b18      	ldr	r3, [pc, #96]	; (800c6d4 <xTaskPriorityDisinherit+0x108>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	4013      	ands	r3, r2
 800c676:	4a17      	ldr	r2, [pc, #92]	; (800c6d4 <xTaskPriorityDisinherit+0x108>)
 800c678:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c682:	693b      	ldr	r3, [r7, #16]
 800c684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c686:	f1c3 0207 	rsb	r2, r3, #7
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c692:	2201      	movs	r2, #1
 800c694:	409a      	lsls	r2, r3
 800c696:	4b0f      	ldr	r3, [pc, #60]	; (800c6d4 <xTaskPriorityDisinherit+0x108>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	4a0d      	ldr	r2, [pc, #52]	; (800c6d4 <xTaskPriorityDisinherit+0x108>)
 800c69e:	6013      	str	r3, [r2, #0]
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a4:	4613      	mov	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	4413      	add	r3, r2
 800c6aa:	009b      	lsls	r3, r3, #2
 800c6ac:	4a08      	ldr	r2, [pc, #32]	; (800c6d0 <xTaskPriorityDisinherit+0x104>)
 800c6ae:	441a      	add	r2, r3
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	4610      	mov	r0, r2
 800c6b8:	f7fe f800 	bl	800a6bc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c6bc:	2301      	movs	r3, #1
 800c6be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c6c0:	697b      	ldr	r3, [r7, #20]
	}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3718      	adds	r7, #24
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	20006ce0 	.word	0x20006ce0
 800c6d0:	20006ce4 	.word	0x20006ce4
 800c6d4:	20006de8 	.word	0x20006de8

0800c6d8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b088      	sub	sp, #32
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
 800c6e0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d077      	beq.n	800c7e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c6f0:	69bb      	ldr	r3, [r7, #24]
 800c6f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d10a      	bne.n	800c70e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c6f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6fc:	f383 8811 	msr	BASEPRI, r3
 800c700:	f3bf 8f6f 	isb	sy
 800c704:	f3bf 8f4f 	dsb	sy
 800c708:	60fb      	str	r3, [r7, #12]
}
 800c70a:	bf00      	nop
 800c70c:	e7fe      	b.n	800c70c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c70e:	69bb      	ldr	r3, [r7, #24]
 800c710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	429a      	cmp	r2, r3
 800c716:	d902      	bls.n	800c71e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	61fb      	str	r3, [r7, #28]
 800c71c:	e002      	b.n	800c724 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c71e:	69bb      	ldr	r3, [r7, #24]
 800c720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c722:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c728:	69fa      	ldr	r2, [r7, #28]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d058      	beq.n	800c7e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c732:	697a      	ldr	r2, [r7, #20]
 800c734:	429a      	cmp	r2, r3
 800c736:	d153      	bne.n	800c7e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c738:	4b2b      	ldr	r3, [pc, #172]	; (800c7e8 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	69ba      	ldr	r2, [r7, #24]
 800c73e:	429a      	cmp	r2, r3
 800c740:	d10a      	bne.n	800c758 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c742:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	60bb      	str	r3, [r7, #8]
}
 800c754:	bf00      	nop
 800c756:	e7fe      	b.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c758:	69bb      	ldr	r3, [r7, #24]
 800c75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c75c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	69fa      	ldr	r2, [r7, #28]
 800c762:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	db04      	blt.n	800c776 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	f1c3 0207 	rsb	r2, r3, #7
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c776:	69bb      	ldr	r3, [r7, #24]
 800c778:	6959      	ldr	r1, [r3, #20]
 800c77a:	693a      	ldr	r2, [r7, #16]
 800c77c:	4613      	mov	r3, r2
 800c77e:	009b      	lsls	r3, r3, #2
 800c780:	4413      	add	r3, r2
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	4a19      	ldr	r2, [pc, #100]	; (800c7ec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c786:	4413      	add	r3, r2
 800c788:	4299      	cmp	r1, r3
 800c78a:	d129      	bne.n	800c7e0 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	3304      	adds	r3, #4
 800c790:	4618      	mov	r0, r3
 800c792:	f7fd fff0 	bl	800a776 <uxListRemove>
 800c796:	4603      	mov	r3, r0
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d10a      	bne.n	800c7b2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c79c:	69bb      	ldr	r3, [r7, #24]
 800c79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	fa02 f303 	lsl.w	r3, r2, r3
 800c7a6:	43da      	mvns	r2, r3
 800c7a8:	4b11      	ldr	r3, [pc, #68]	; (800c7f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4013      	ands	r3, r2
 800c7ae:	4a10      	ldr	r2, [pc, #64]	; (800c7f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c7b0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c7b2:	69bb      	ldr	r3, [r7, #24]
 800c7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	409a      	lsls	r2, r3
 800c7ba:	4b0d      	ldr	r3, [pc, #52]	; (800c7f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	4a0b      	ldr	r2, [pc, #44]	; (800c7f0 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c7c2:	6013      	str	r3, [r2, #0]
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	4a06      	ldr	r2, [pc, #24]	; (800c7ec <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c7d2:	441a      	add	r2, r3
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	3304      	adds	r3, #4
 800c7d8:	4619      	mov	r1, r3
 800c7da:	4610      	mov	r0, r2
 800c7dc:	f7fd ff6e 	bl	800a6bc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7e0:	bf00      	nop
 800c7e2:	3720      	adds	r7, #32
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	20006ce0 	.word	0x20006ce0
 800c7ec:	20006ce4 	.word	0x20006ce4
 800c7f0:	20006de8 	.word	0x20006de8

0800c7f4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c7f4:	b480      	push	{r7}
 800c7f6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c7f8:	4b07      	ldr	r3, [pc, #28]	; (800c818 <pvTaskIncrementMutexHeldCount+0x24>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d004      	beq.n	800c80a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c800:	4b05      	ldr	r3, [pc, #20]	; (800c818 <pvTaskIncrementMutexHeldCount+0x24>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c806:	3201      	adds	r2, #1
 800c808:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c80a:	4b03      	ldr	r3, [pc, #12]	; (800c818 <pvTaskIncrementMutexHeldCount+0x24>)
 800c80c:	681b      	ldr	r3, [r3, #0]
	}
 800c80e:	4618      	mov	r0, r3
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr
 800c818:	20006ce0 	.word	0x20006ce0

0800c81c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b084      	sub	sp, #16
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c826:	4b29      	ldr	r3, [pc, #164]	; (800c8cc <prvAddCurrentTaskToDelayedList+0xb0>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c82c:	4b28      	ldr	r3, [pc, #160]	; (800c8d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	3304      	adds	r3, #4
 800c832:	4618      	mov	r0, r3
 800c834:	f7fd ff9f 	bl	800a776 <uxListRemove>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10b      	bne.n	800c856 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c83e:	4b24      	ldr	r3, [pc, #144]	; (800c8d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c844:	2201      	movs	r2, #1
 800c846:	fa02 f303 	lsl.w	r3, r2, r3
 800c84a:	43da      	mvns	r2, r3
 800c84c:	4b21      	ldr	r3, [pc, #132]	; (800c8d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	4013      	ands	r3, r2
 800c852:	4a20      	ldr	r2, [pc, #128]	; (800c8d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c854:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c85c:	d10a      	bne.n	800c874 <prvAddCurrentTaskToDelayedList+0x58>
 800c85e:	683b      	ldr	r3, [r7, #0]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d007      	beq.n	800c874 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c864:	4b1a      	ldr	r3, [pc, #104]	; (800c8d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	3304      	adds	r3, #4
 800c86a:	4619      	mov	r1, r3
 800c86c:	481a      	ldr	r0, [pc, #104]	; (800c8d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c86e:	f7fd ff25 	bl	800a6bc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c872:	e026      	b.n	800c8c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4413      	add	r3, r2
 800c87a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c87c:	4b14      	ldr	r3, [pc, #80]	; (800c8d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	68ba      	ldr	r2, [r7, #8]
 800c882:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c884:	68ba      	ldr	r2, [r7, #8]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d209      	bcs.n	800c8a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c88c:	4b13      	ldr	r3, [pc, #76]	; (800c8dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800c88e:	681a      	ldr	r2, [r3, #0]
 800c890:	4b0f      	ldr	r3, [pc, #60]	; (800c8d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	3304      	adds	r3, #4
 800c896:	4619      	mov	r1, r3
 800c898:	4610      	mov	r0, r2
 800c89a:	f7fd ff33 	bl	800a704 <vListInsert>
}
 800c89e:	e010      	b.n	800c8c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c8a0:	4b0f      	ldr	r3, [pc, #60]	; (800c8e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	4b0a      	ldr	r3, [pc, #40]	; (800c8d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	3304      	adds	r3, #4
 800c8aa:	4619      	mov	r1, r3
 800c8ac:	4610      	mov	r0, r2
 800c8ae:	f7fd ff29 	bl	800a704 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c8b2:	4b0c      	ldr	r3, [pc, #48]	; (800c8e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d202      	bcs.n	800c8c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c8bc:	4a09      	ldr	r2, [pc, #36]	; (800c8e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	6013      	str	r3, [r2, #0]
}
 800c8c2:	bf00      	nop
 800c8c4:	3710      	adds	r7, #16
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	bd80      	pop	{r7, pc}
 800c8ca:	bf00      	nop
 800c8cc:	20006de4 	.word	0x20006de4
 800c8d0:	20006ce0 	.word	0x20006ce0
 800c8d4:	20006de8 	.word	0x20006de8
 800c8d8:	20006dcc 	.word	0x20006dcc
 800c8dc:	20006d9c 	.word	0x20006d9c
 800c8e0:	20006d98 	.word	0x20006d98
 800c8e4:	20006e00 	.word	0x20006e00

0800c8e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b08a      	sub	sp, #40	; 0x28
 800c8ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c8f2:	f000 faeb 	bl	800cecc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c8f6:	4b1c      	ldr	r3, [pc, #112]	; (800c968 <xTimerCreateTimerTask+0x80>)
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d021      	beq.n	800c942 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c8fe:	2300      	movs	r3, #0
 800c900:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c902:	2300      	movs	r3, #0
 800c904:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c906:	1d3a      	adds	r2, r7, #4
 800c908:	f107 0108 	add.w	r1, r7, #8
 800c90c:	f107 030c 	add.w	r3, r7, #12
 800c910:	4618      	mov	r0, r3
 800c912:	f7f5 fd05 	bl	8002320 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c916:	6879      	ldr	r1, [r7, #4]
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	9202      	str	r2, [sp, #8]
 800c91e:	9301      	str	r3, [sp, #4]
 800c920:	2302      	movs	r3, #2
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	2300      	movs	r3, #0
 800c926:	460a      	mov	r2, r1
 800c928:	4910      	ldr	r1, [pc, #64]	; (800c96c <xTimerCreateTimerTask+0x84>)
 800c92a:	4811      	ldr	r0, [pc, #68]	; (800c970 <xTimerCreateTimerTask+0x88>)
 800c92c:	f7fe ff76 	bl	800b81c <xTaskCreateStatic>
 800c930:	4603      	mov	r3, r0
 800c932:	4a10      	ldr	r2, [pc, #64]	; (800c974 <xTimerCreateTimerTask+0x8c>)
 800c934:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c936:	4b0f      	ldr	r3, [pc, #60]	; (800c974 <xTimerCreateTimerTask+0x8c>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d001      	beq.n	800c942 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c93e:	2301      	movs	r3, #1
 800c940:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d10a      	bne.n	800c95e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c94c:	f383 8811 	msr	BASEPRI, r3
 800c950:	f3bf 8f6f 	isb	sy
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	613b      	str	r3, [r7, #16]
}
 800c95a:	bf00      	nop
 800c95c:	e7fe      	b.n	800c95c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c95e:	697b      	ldr	r3, [r7, #20]
}
 800c960:	4618      	mov	r0, r3
 800c962:	3718      	adds	r7, #24
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	20006e3c 	.word	0x20006e3c
 800c96c:	08029da4 	.word	0x08029da4
 800c970:	0800caad 	.word	0x0800caad
 800c974:	20006e40 	.word	0x20006e40

0800c978 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b08a      	sub	sp, #40	; 0x28
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	60f8      	str	r0, [r7, #12]
 800c980:	60b9      	str	r1, [r7, #8]
 800c982:	607a      	str	r2, [r7, #4]
 800c984:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c986:	2300      	movs	r3, #0
 800c988:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d10a      	bne.n	800c9a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c994:	f383 8811 	msr	BASEPRI, r3
 800c998:	f3bf 8f6f 	isb	sy
 800c99c:	f3bf 8f4f 	dsb	sy
 800c9a0:	623b      	str	r3, [r7, #32]
}
 800c9a2:	bf00      	nop
 800c9a4:	e7fe      	b.n	800c9a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c9a6:	4b1a      	ldr	r3, [pc, #104]	; (800ca10 <xTimerGenericCommand+0x98>)
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d02a      	beq.n	800ca04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	2b05      	cmp	r3, #5
 800c9be:	dc18      	bgt.n	800c9f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c9c0:	f7ff fd70 	bl	800c4a4 <xTaskGetSchedulerState>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	d109      	bne.n	800c9de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c9ca:	4b11      	ldr	r3, [pc, #68]	; (800ca10 <xTimerGenericCommand+0x98>)
 800c9cc:	6818      	ldr	r0, [r3, #0]
 800c9ce:	f107 0114 	add.w	r1, r7, #20
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9d6:	f7fe f87f 	bl	800aad8 <xQueueGenericSend>
 800c9da:	6278      	str	r0, [r7, #36]	; 0x24
 800c9dc:	e012      	b.n	800ca04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c9de:	4b0c      	ldr	r3, [pc, #48]	; (800ca10 <xTimerGenericCommand+0x98>)
 800c9e0:	6818      	ldr	r0, [r3, #0]
 800c9e2:	f107 0114 	add.w	r1, r7, #20
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	f7fe f875 	bl	800aad8 <xQueueGenericSend>
 800c9ee:	6278      	str	r0, [r7, #36]	; 0x24
 800c9f0:	e008      	b.n	800ca04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c9f2:	4b07      	ldr	r3, [pc, #28]	; (800ca10 <xTimerGenericCommand+0x98>)
 800c9f4:	6818      	ldr	r0, [r3, #0]
 800c9f6:	f107 0114 	add.w	r1, r7, #20
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	683a      	ldr	r2, [r7, #0]
 800c9fe:	f7fe f969 	bl	800acd4 <xQueueGenericSendFromISR>
 800ca02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ca04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ca06:	4618      	mov	r0, r3
 800ca08:	3728      	adds	r7, #40	; 0x28
 800ca0a:	46bd      	mov	sp, r7
 800ca0c:	bd80      	pop	{r7, pc}
 800ca0e:	bf00      	nop
 800ca10:	20006e3c 	.word	0x20006e3c

0800ca14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b088      	sub	sp, #32
 800ca18:	af02      	add	r7, sp, #8
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca1e:	4b22      	ldr	r3, [pc, #136]	; (800caa8 <prvProcessExpiredTimer+0x94>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	68db      	ldr	r3, [r3, #12]
 800ca24:	68db      	ldr	r3, [r3, #12]
 800ca26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca28:	697b      	ldr	r3, [r7, #20]
 800ca2a:	3304      	adds	r3, #4
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	f7fd fea2 	bl	800a776 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca38:	f003 0304 	and.w	r3, r3, #4
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d022      	beq.n	800ca86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	699a      	ldr	r2, [r3, #24]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	18d1      	adds	r1, r2, r3
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	683a      	ldr	r2, [r7, #0]
 800ca4c:	6978      	ldr	r0, [r7, #20]
 800ca4e:	f000 f8d1 	bl	800cbf4 <prvInsertTimerInActiveList>
 800ca52:	4603      	mov	r3, r0
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d01f      	beq.n	800ca98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca58:	2300      	movs	r3, #0
 800ca5a:	9300      	str	r3, [sp, #0]
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	687a      	ldr	r2, [r7, #4]
 800ca60:	2100      	movs	r1, #0
 800ca62:	6978      	ldr	r0, [r7, #20]
 800ca64:	f7ff ff88 	bl	800c978 <xTimerGenericCommand>
 800ca68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d113      	bne.n	800ca98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	60fb      	str	r3, [r7, #12]
}
 800ca82:	bf00      	nop
 800ca84:	e7fe      	b.n	800ca84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ca8c:	f023 0301 	bic.w	r3, r3, #1
 800ca90:	b2da      	uxtb	r2, r3
 800ca92:	697b      	ldr	r3, [r7, #20]
 800ca94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca98:	697b      	ldr	r3, [r7, #20]
 800ca9a:	6a1b      	ldr	r3, [r3, #32]
 800ca9c:	6978      	ldr	r0, [r7, #20]
 800ca9e:	4798      	blx	r3
}
 800caa0:	bf00      	nop
 800caa2:	3718      	adds	r7, #24
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	20006e34 	.word	0x20006e34

0800caac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b084      	sub	sp, #16
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cab4:	f107 0308 	add.w	r3, r7, #8
 800cab8:	4618      	mov	r0, r3
 800caba:	f000 f857 	bl	800cb6c <prvGetNextExpireTime>
 800cabe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800cac0:	68bb      	ldr	r3, [r7, #8]
 800cac2:	4619      	mov	r1, r3
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f000 f803 	bl	800cad0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800caca:	f000 f8d5 	bl	800cc78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cace:	e7f1      	b.n	800cab4 <prvTimerTask+0x8>

0800cad0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800cada:	f7ff f8ed 	bl	800bcb8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cade:	f107 0308 	add.w	r3, r7, #8
 800cae2:	4618      	mov	r0, r3
 800cae4:	f000 f866 	bl	800cbb4 <prvSampleTimeNow>
 800cae8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d130      	bne.n	800cb52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d10a      	bne.n	800cb0c <prvProcessTimerOrBlockTask+0x3c>
 800caf6:	687a      	ldr	r2, [r7, #4]
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	429a      	cmp	r2, r3
 800cafc:	d806      	bhi.n	800cb0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800cafe:	f7ff f8e9 	bl	800bcd4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800cb02:	68f9      	ldr	r1, [r7, #12]
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f7ff ff85 	bl	800ca14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800cb0a:	e024      	b.n	800cb56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d008      	beq.n	800cb24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cb12:	4b13      	ldr	r3, [pc, #76]	; (800cb60 <prvProcessTimerOrBlockTask+0x90>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d101      	bne.n	800cb20 <prvProcessTimerOrBlockTask+0x50>
 800cb1c:	2301      	movs	r3, #1
 800cb1e:	e000      	b.n	800cb22 <prvProcessTimerOrBlockTask+0x52>
 800cb20:	2300      	movs	r3, #0
 800cb22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cb24:	4b0f      	ldr	r3, [pc, #60]	; (800cb64 <prvProcessTimerOrBlockTask+0x94>)
 800cb26:	6818      	ldr	r0, [r3, #0]
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	1ad3      	subs	r3, r2, r3
 800cb2e:	683a      	ldr	r2, [r7, #0]
 800cb30:	4619      	mov	r1, r3
 800cb32:	f7fe fe3f 	bl	800b7b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cb36:	f7ff f8cd 	bl	800bcd4 <xTaskResumeAll>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d10a      	bne.n	800cb56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800cb40:	4b09      	ldr	r3, [pc, #36]	; (800cb68 <prvProcessTimerOrBlockTask+0x98>)
 800cb42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb46:	601a      	str	r2, [r3, #0]
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	f3bf 8f6f 	isb	sy
}
 800cb50:	e001      	b.n	800cb56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800cb52:	f7ff f8bf 	bl	800bcd4 <xTaskResumeAll>
}
 800cb56:	bf00      	nop
 800cb58:	3710      	adds	r7, #16
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	20006e38 	.word	0x20006e38
 800cb64:	20006e3c 	.word	0x20006e3c
 800cb68:	e000ed04 	.word	0xe000ed04

0800cb6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cb6c:	b480      	push	{r7}
 800cb6e:	b085      	sub	sp, #20
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cb74:	4b0e      	ldr	r3, [pc, #56]	; (800cbb0 <prvGetNextExpireTime+0x44>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d101      	bne.n	800cb82 <prvGetNextExpireTime+0x16>
 800cb7e:	2201      	movs	r2, #1
 800cb80:	e000      	b.n	800cb84 <prvGetNextExpireTime+0x18>
 800cb82:	2200      	movs	r2, #0
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d105      	bne.n	800cb9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cb90:	4b07      	ldr	r3, [pc, #28]	; (800cbb0 <prvGetNextExpireTime+0x44>)
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	68db      	ldr	r3, [r3, #12]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	60fb      	str	r3, [r7, #12]
 800cb9a:	e001      	b.n	800cba0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cba0:	68fb      	ldr	r3, [r7, #12]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	3714      	adds	r7, #20
 800cba6:	46bd      	mov	sp, r7
 800cba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	20006e34 	.word	0x20006e34

0800cbb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cbbc:	f7ff f926 	bl	800be0c <xTaskGetTickCount>
 800cbc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cbc2:	4b0b      	ldr	r3, [pc, #44]	; (800cbf0 <prvSampleTimeNow+0x3c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68fa      	ldr	r2, [r7, #12]
 800cbc8:	429a      	cmp	r2, r3
 800cbca:	d205      	bcs.n	800cbd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cbcc:	f000 f91a 	bl	800ce04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	601a      	str	r2, [r3, #0]
 800cbd6:	e002      	b.n	800cbde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cbde:	4a04      	ldr	r2, [pc, #16]	; (800cbf0 <prvSampleTimeNow+0x3c>)
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}
 800cbee:	bf00      	nop
 800cbf0:	20006e44 	.word	0x20006e44

0800cbf4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b086      	sub	sp, #24
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cc02:	2300      	movs	r3, #0
 800cc04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cc12:	68ba      	ldr	r2, [r7, #8]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d812      	bhi.n	800cc40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	683b      	ldr	r3, [r7, #0]
 800cc1e:	1ad2      	subs	r2, r2, r3
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	699b      	ldr	r3, [r3, #24]
 800cc24:	429a      	cmp	r2, r3
 800cc26:	d302      	bcc.n	800cc2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	617b      	str	r3, [r7, #20]
 800cc2c:	e01b      	b.n	800cc66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cc2e:	4b10      	ldr	r3, [pc, #64]	; (800cc70 <prvInsertTimerInActiveList+0x7c>)
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	3304      	adds	r3, #4
 800cc36:	4619      	mov	r1, r3
 800cc38:	4610      	mov	r0, r2
 800cc3a:	f7fd fd63 	bl	800a704 <vListInsert>
 800cc3e:	e012      	b.n	800cc66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d206      	bcs.n	800cc56 <prvInsertTimerInActiveList+0x62>
 800cc48:	68ba      	ldr	r2, [r7, #8]
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d302      	bcc.n	800cc56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cc50:	2301      	movs	r3, #1
 800cc52:	617b      	str	r3, [r7, #20]
 800cc54:	e007      	b.n	800cc66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cc56:	4b07      	ldr	r3, [pc, #28]	; (800cc74 <prvInsertTimerInActiveList+0x80>)
 800cc58:	681a      	ldr	r2, [r3, #0]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	3304      	adds	r3, #4
 800cc5e:	4619      	mov	r1, r3
 800cc60:	4610      	mov	r0, r2
 800cc62:	f7fd fd4f 	bl	800a704 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cc66:	697b      	ldr	r3, [r7, #20]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3718      	adds	r7, #24
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	20006e38 	.word	0x20006e38
 800cc74:	20006e34 	.word	0x20006e34

0800cc78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b08c      	sub	sp, #48	; 0x30
 800cc7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc7e:	e0ae      	b.n	800cdde <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	f2c0 80ab 	blt.w	800cdde <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8e:	695b      	ldr	r3, [r3, #20]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d004      	beq.n	800cc9e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc96:	3304      	adds	r3, #4
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fd fd6c 	bl	800a776 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc9e:	1d3b      	adds	r3, r7, #4
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7ff ff87 	bl	800cbb4 <prvSampleTimeNow>
 800cca6:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	2b09      	cmp	r3, #9
 800ccac:	f200 8096 	bhi.w	800cddc <prvProcessReceivedCommands+0x164>
 800ccb0:	a201      	add	r2, pc, #4	; (adr r2, 800ccb8 <prvProcessReceivedCommands+0x40>)
 800ccb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb6:	bf00      	nop
 800ccb8:	0800cce1 	.word	0x0800cce1
 800ccbc:	0800cce1 	.word	0x0800cce1
 800ccc0:	0800cce1 	.word	0x0800cce1
 800ccc4:	0800cd55 	.word	0x0800cd55
 800ccc8:	0800cd69 	.word	0x0800cd69
 800cccc:	0800cdb3 	.word	0x0800cdb3
 800ccd0:	0800cce1 	.word	0x0800cce1
 800ccd4:	0800cce1 	.word	0x0800cce1
 800ccd8:	0800cd55 	.word	0x0800cd55
 800ccdc:	0800cd69 	.word	0x0800cd69
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cce6:	f043 0301 	orr.w	r3, r3, #1
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ccf2:	68fa      	ldr	r2, [r7, #12]
 800ccf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccf6:	699b      	ldr	r3, [r3, #24]
 800ccf8:	18d1      	adds	r1, r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	6a3a      	ldr	r2, [r7, #32]
 800ccfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd00:	f7ff ff78 	bl	800cbf4 <prvInsertTimerInActiveList>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d069      	beq.n	800cdde <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd10:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cd18:	f003 0304 	and.w	r3, r3, #4
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d05e      	beq.n	800cdde <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd24:	699b      	ldr	r3, [r3, #24]
 800cd26:	441a      	add	r2, r3
 800cd28:	2300      	movs	r3, #0
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	2100      	movs	r1, #0
 800cd30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd32:	f7ff fe21 	bl	800c978 <xTimerGenericCommand>
 800cd36:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800cd38:	69fb      	ldr	r3, [r7, #28]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d14f      	bne.n	800cdde <prvProcessReceivedCommands+0x166>
	__asm volatile
 800cd3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd42:	f383 8811 	msr	BASEPRI, r3
 800cd46:	f3bf 8f6f 	isb	sy
 800cd4a:	f3bf 8f4f 	dsb	sy
 800cd4e:	61bb      	str	r3, [r7, #24]
}
 800cd50:	bf00      	nop
 800cd52:	e7fe      	b.n	800cd52 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cd5a:	f023 0301 	bic.w	r3, r3, #1
 800cd5e:	b2da      	uxtb	r2, r3
 800cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800cd66:	e03a      	b.n	800cdde <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cd6e:	f043 0301 	orr.w	r3, r3, #1
 800cd72:	b2da      	uxtb	r2, r3
 800cd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cd7a:	68fa      	ldr	r2, [r7, #12]
 800cd7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd7e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd82:	699b      	ldr	r3, [r3, #24]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10a      	bne.n	800cd9e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	617b      	str	r3, [r7, #20]
}
 800cd9a:	bf00      	nop
 800cd9c:	e7fe      	b.n	800cd9c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cd9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda0:	699a      	ldr	r2, [r3, #24]
 800cda2:	6a3b      	ldr	r3, [r7, #32]
 800cda4:	18d1      	adds	r1, r2, r3
 800cda6:	6a3b      	ldr	r3, [r7, #32]
 800cda8:	6a3a      	ldr	r2, [r7, #32]
 800cdaa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdac:	f7ff ff22 	bl	800cbf4 <prvInsertTimerInActiveList>
					break;
 800cdb0:	e015      	b.n	800cdde <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cdb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cdb8:	f003 0302 	and.w	r3, r3, #2
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d103      	bne.n	800cdc8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800cdc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cdc2:	f000 fbdd 	bl	800d580 <vPortFree>
 800cdc6:	e00a      	b.n	800cdde <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800cdce:	f023 0301 	bic.w	r3, r3, #1
 800cdd2:	b2da      	uxtb	r2, r3
 800cdd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cdda:	e000      	b.n	800cdde <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 800cddc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cdde:	4b08      	ldr	r3, [pc, #32]	; (800ce00 <prvProcessReceivedCommands+0x188>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f107 0108 	add.w	r1, r7, #8
 800cde6:	2200      	movs	r2, #0
 800cde8:	4618      	mov	r0, r3
 800cdea:	f7fe f89b 	bl	800af24 <xQueueReceive>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f47f af45 	bne.w	800cc80 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cdf6:	bf00      	nop
 800cdf8:	bf00      	nop
 800cdfa:	3728      	adds	r7, #40	; 0x28
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}
 800ce00:	20006e3c 	.word	0x20006e3c

0800ce04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b088      	sub	sp, #32
 800ce08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce0a:	e048      	b.n	800ce9e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ce0c:	4b2d      	ldr	r3, [pc, #180]	; (800cec4 <prvSwitchTimerLists+0xc0>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	68db      	ldr	r3, [r3, #12]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce16:	4b2b      	ldr	r3, [pc, #172]	; (800cec4 <prvSwitchTimerLists+0xc0>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	68db      	ldr	r3, [r3, #12]
 800ce1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	3304      	adds	r3, #4
 800ce24:	4618      	mov	r0, r3
 800ce26:	f7fd fca6 	bl	800a776 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	6a1b      	ldr	r3, [r3, #32]
 800ce2e:	68f8      	ldr	r0, [r7, #12]
 800ce30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ce38:	f003 0304 	and.w	r3, r3, #4
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d02e      	beq.n	800ce9e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	699b      	ldr	r3, [r3, #24]
 800ce44:	693a      	ldr	r2, [r7, #16]
 800ce46:	4413      	add	r3, r2
 800ce48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ce4a:	68ba      	ldr	r2, [r7, #8]
 800ce4c:	693b      	ldr	r3, [r7, #16]
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d90e      	bls.n	800ce70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	68ba      	ldr	r2, [r7, #8]
 800ce56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	68fa      	ldr	r2, [r7, #12]
 800ce5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce5e:	4b19      	ldr	r3, [pc, #100]	; (800cec4 <prvSwitchTimerLists+0xc0>)
 800ce60:	681a      	ldr	r2, [r3, #0]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	3304      	adds	r3, #4
 800ce66:	4619      	mov	r1, r3
 800ce68:	4610      	mov	r0, r2
 800ce6a:	f7fd fc4b 	bl	800a704 <vListInsert>
 800ce6e:	e016      	b.n	800ce9e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ce70:	2300      	movs	r3, #0
 800ce72:	9300      	str	r3, [sp, #0]
 800ce74:	2300      	movs	r3, #0
 800ce76:	693a      	ldr	r2, [r7, #16]
 800ce78:	2100      	movs	r1, #0
 800ce7a:	68f8      	ldr	r0, [r7, #12]
 800ce7c:	f7ff fd7c 	bl	800c978 <xTimerGenericCommand>
 800ce80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10a      	bne.n	800ce9e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ce88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce8c:	f383 8811 	msr	BASEPRI, r3
 800ce90:	f3bf 8f6f 	isb	sy
 800ce94:	f3bf 8f4f 	dsb	sy
 800ce98:	603b      	str	r3, [r7, #0]
}
 800ce9a:	bf00      	nop
 800ce9c:	e7fe      	b.n	800ce9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce9e:	4b09      	ldr	r3, [pc, #36]	; (800cec4 <prvSwitchTimerLists+0xc0>)
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d1b1      	bne.n	800ce0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cea8:	4b06      	ldr	r3, [pc, #24]	; (800cec4 <prvSwitchTimerLists+0xc0>)
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ceae:	4b06      	ldr	r3, [pc, #24]	; (800cec8 <prvSwitchTimerLists+0xc4>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	4a04      	ldr	r2, [pc, #16]	; (800cec4 <prvSwitchTimerLists+0xc0>)
 800ceb4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ceb6:	4a04      	ldr	r2, [pc, #16]	; (800cec8 <prvSwitchTimerLists+0xc4>)
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	6013      	str	r3, [r2, #0]
}
 800cebc:	bf00      	nop
 800cebe:	3718      	adds	r7, #24
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	20006e34 	.word	0x20006e34
 800cec8:	20006e38 	.word	0x20006e38

0800cecc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ced2:	f000 f967 	bl	800d1a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ced6:	4b15      	ldr	r3, [pc, #84]	; (800cf2c <prvCheckForValidListAndQueue+0x60>)
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d120      	bne.n	800cf20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cede:	4814      	ldr	r0, [pc, #80]	; (800cf30 <prvCheckForValidListAndQueue+0x64>)
 800cee0:	f7fd fbbf 	bl	800a662 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cee4:	4813      	ldr	r0, [pc, #76]	; (800cf34 <prvCheckForValidListAndQueue+0x68>)
 800cee6:	f7fd fbbc 	bl	800a662 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ceea:	4b13      	ldr	r3, [pc, #76]	; (800cf38 <prvCheckForValidListAndQueue+0x6c>)
 800ceec:	4a10      	ldr	r2, [pc, #64]	; (800cf30 <prvCheckForValidListAndQueue+0x64>)
 800ceee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cef0:	4b12      	ldr	r3, [pc, #72]	; (800cf3c <prvCheckForValidListAndQueue+0x70>)
 800cef2:	4a10      	ldr	r2, [pc, #64]	; (800cf34 <prvCheckForValidListAndQueue+0x68>)
 800cef4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cef6:	2300      	movs	r3, #0
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	4b11      	ldr	r3, [pc, #68]	; (800cf40 <prvCheckForValidListAndQueue+0x74>)
 800cefc:	4a11      	ldr	r2, [pc, #68]	; (800cf44 <prvCheckForValidListAndQueue+0x78>)
 800cefe:	210c      	movs	r1, #12
 800cf00:	200a      	movs	r0, #10
 800cf02:	f7fd fccb 	bl	800a89c <xQueueGenericCreateStatic>
 800cf06:	4603      	mov	r3, r0
 800cf08:	4a08      	ldr	r2, [pc, #32]	; (800cf2c <prvCheckForValidListAndQueue+0x60>)
 800cf0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cf0c:	4b07      	ldr	r3, [pc, #28]	; (800cf2c <prvCheckForValidListAndQueue+0x60>)
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d005      	beq.n	800cf20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cf14:	4b05      	ldr	r3, [pc, #20]	; (800cf2c <prvCheckForValidListAndQueue+0x60>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	490b      	ldr	r1, [pc, #44]	; (800cf48 <prvCheckForValidListAndQueue+0x7c>)
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7fe fbf6 	bl	800b70c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf20:	f000 f970 	bl	800d204 <vPortExitCritical>
}
 800cf24:	bf00      	nop
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
 800cf2a:	bf00      	nop
 800cf2c:	20006e3c 	.word	0x20006e3c
 800cf30:	20006e0c 	.word	0x20006e0c
 800cf34:	20006e20 	.word	0x20006e20
 800cf38:	20006e34 	.word	0x20006e34
 800cf3c:	20006e38 	.word	0x20006e38
 800cf40:	20006ec0 	.word	0x20006ec0
 800cf44:	20006e48 	.word	0x20006e48
 800cf48:	08029dac 	.word	0x08029dac

0800cf4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	3b04      	subs	r3, #4
 800cf5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cf64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	3b04      	subs	r3, #4
 800cf6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	f023 0201 	bic.w	r2, r3, #1
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	3b04      	subs	r3, #4
 800cf7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf7c:	4a0c      	ldr	r2, [pc, #48]	; (800cfb0 <pxPortInitialiseStack+0x64>)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	3b14      	subs	r3, #20
 800cf86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf88:	687a      	ldr	r2, [r7, #4]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	3b04      	subs	r3, #4
 800cf92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f06f 0202 	mvn.w	r2, #2
 800cf9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	3b20      	subs	r3, #32
 800cfa0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	3714      	adds	r7, #20
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr
 800cfb0:	0800cfb5 	.word	0x0800cfb5

0800cfb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b085      	sub	sp, #20
 800cfb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cfbe:	4b12      	ldr	r3, [pc, #72]	; (800d008 <prvTaskExitError+0x54>)
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfc6:	d00a      	beq.n	800cfde <prvTaskExitError+0x2a>
	__asm volatile
 800cfc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfcc:	f383 8811 	msr	BASEPRI, r3
 800cfd0:	f3bf 8f6f 	isb	sy
 800cfd4:	f3bf 8f4f 	dsb	sy
 800cfd8:	60fb      	str	r3, [r7, #12]
}
 800cfda:	bf00      	nop
 800cfdc:	e7fe      	b.n	800cfdc <prvTaskExitError+0x28>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	60bb      	str	r3, [r7, #8]
}
 800cff0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cff2:	bf00      	nop
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d0fc      	beq.n	800cff4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cffa:	bf00      	nop
 800cffc:	bf00      	nop
 800cffe:	3714      	adds	r7, #20
 800d000:	46bd      	mov	sp, r7
 800d002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d006:	4770      	bx	lr
 800d008:	20000028 	.word	0x20000028
 800d00c:	00000000 	.word	0x00000000

0800d010 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d010:	4b07      	ldr	r3, [pc, #28]	; (800d030 <pxCurrentTCBConst2>)
 800d012:	6819      	ldr	r1, [r3, #0]
 800d014:	6808      	ldr	r0, [r1, #0]
 800d016:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01a:	f380 8809 	msr	PSP, r0
 800d01e:	f3bf 8f6f 	isb	sy
 800d022:	f04f 0000 	mov.w	r0, #0
 800d026:	f380 8811 	msr	BASEPRI, r0
 800d02a:	4770      	bx	lr
 800d02c:	f3af 8000 	nop.w

0800d030 <pxCurrentTCBConst2>:
 800d030:	20006ce0 	.word	0x20006ce0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d034:	bf00      	nop
 800d036:	bf00      	nop

0800d038 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d038:	4808      	ldr	r0, [pc, #32]	; (800d05c <prvPortStartFirstTask+0x24>)
 800d03a:	6800      	ldr	r0, [r0, #0]
 800d03c:	6800      	ldr	r0, [r0, #0]
 800d03e:	f380 8808 	msr	MSP, r0
 800d042:	f04f 0000 	mov.w	r0, #0
 800d046:	f380 8814 	msr	CONTROL, r0
 800d04a:	b662      	cpsie	i
 800d04c:	b661      	cpsie	f
 800d04e:	f3bf 8f4f 	dsb	sy
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	df00      	svc	0
 800d058:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d05a:	bf00      	nop
 800d05c:	e000ed08 	.word	0xe000ed08

0800d060 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b086      	sub	sp, #24
 800d064:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d066:	4b46      	ldr	r3, [pc, #280]	; (800d180 <xPortStartScheduler+0x120>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	4a46      	ldr	r2, [pc, #280]	; (800d184 <xPortStartScheduler+0x124>)
 800d06c:	4293      	cmp	r3, r2
 800d06e:	d10a      	bne.n	800d086 <xPortStartScheduler+0x26>
	__asm volatile
 800d070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	613b      	str	r3, [r7, #16]
}
 800d082:	bf00      	nop
 800d084:	e7fe      	b.n	800d084 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d086:	4b3e      	ldr	r3, [pc, #248]	; (800d180 <xPortStartScheduler+0x120>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	4a3f      	ldr	r2, [pc, #252]	; (800d188 <xPortStartScheduler+0x128>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d10a      	bne.n	800d0a6 <xPortStartScheduler+0x46>
	__asm volatile
 800d090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d094:	f383 8811 	msr	BASEPRI, r3
 800d098:	f3bf 8f6f 	isb	sy
 800d09c:	f3bf 8f4f 	dsb	sy
 800d0a0:	60fb      	str	r3, [r7, #12]
}
 800d0a2:	bf00      	nop
 800d0a4:	e7fe      	b.n	800d0a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d0a6:	4b39      	ldr	r3, [pc, #228]	; (800d18c <xPortStartScheduler+0x12c>)
 800d0a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	781b      	ldrb	r3, [r3, #0]
 800d0ae:	b2db      	uxtb	r3, r3
 800d0b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d0b2:	697b      	ldr	r3, [r7, #20]
 800d0b4:	22ff      	movs	r2, #255	; 0xff
 800d0b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0b8:	697b      	ldr	r3, [r7, #20]
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	b2db      	uxtb	r3, r3
 800d0be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0c0:	78fb      	ldrb	r3, [r7, #3]
 800d0c2:	b2db      	uxtb	r3, r3
 800d0c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	4b31      	ldr	r3, [pc, #196]	; (800d190 <xPortStartScheduler+0x130>)
 800d0cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d0ce:	4b31      	ldr	r3, [pc, #196]	; (800d194 <xPortStartScheduler+0x134>)
 800d0d0:	2207      	movs	r2, #7
 800d0d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0d4:	e009      	b.n	800d0ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d0d6:	4b2f      	ldr	r3, [pc, #188]	; (800d194 <xPortStartScheduler+0x134>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	3b01      	subs	r3, #1
 800d0dc:	4a2d      	ldr	r2, [pc, #180]	; (800d194 <xPortStartScheduler+0x134>)
 800d0de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d0e0:	78fb      	ldrb	r3, [r7, #3]
 800d0e2:	b2db      	uxtb	r3, r3
 800d0e4:	005b      	lsls	r3, r3, #1
 800d0e6:	b2db      	uxtb	r3, r3
 800d0e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d0ea:	78fb      	ldrb	r3, [r7, #3]
 800d0ec:	b2db      	uxtb	r3, r3
 800d0ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0f2:	2b80      	cmp	r3, #128	; 0x80
 800d0f4:	d0ef      	beq.n	800d0d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d0f6:	4b27      	ldr	r3, [pc, #156]	; (800d194 <xPortStartScheduler+0x134>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f1c3 0307 	rsb	r3, r3, #7
 800d0fe:	2b04      	cmp	r3, #4
 800d100:	d00a      	beq.n	800d118 <xPortStartScheduler+0xb8>
	__asm volatile
 800d102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d106:	f383 8811 	msr	BASEPRI, r3
 800d10a:	f3bf 8f6f 	isb	sy
 800d10e:	f3bf 8f4f 	dsb	sy
 800d112:	60bb      	str	r3, [r7, #8]
}
 800d114:	bf00      	nop
 800d116:	e7fe      	b.n	800d116 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d118:	4b1e      	ldr	r3, [pc, #120]	; (800d194 <xPortStartScheduler+0x134>)
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	021b      	lsls	r3, r3, #8
 800d11e:	4a1d      	ldr	r2, [pc, #116]	; (800d194 <xPortStartScheduler+0x134>)
 800d120:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d122:	4b1c      	ldr	r3, [pc, #112]	; (800d194 <xPortStartScheduler+0x134>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d12a:	4a1a      	ldr	r2, [pc, #104]	; (800d194 <xPortStartScheduler+0x134>)
 800d12c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	b2da      	uxtb	r2, r3
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d136:	4b18      	ldr	r3, [pc, #96]	; (800d198 <xPortStartScheduler+0x138>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	4a17      	ldr	r2, [pc, #92]	; (800d198 <xPortStartScheduler+0x138>)
 800d13c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d140:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d142:	4b15      	ldr	r3, [pc, #84]	; (800d198 <xPortStartScheduler+0x138>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	4a14      	ldr	r2, [pc, #80]	; (800d198 <xPortStartScheduler+0x138>)
 800d148:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d14c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d14e:	f000 f8dd 	bl	800d30c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d152:	4b12      	ldr	r3, [pc, #72]	; (800d19c <xPortStartScheduler+0x13c>)
 800d154:	2200      	movs	r2, #0
 800d156:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d158:	f000 f8fc 	bl	800d354 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d15c:	4b10      	ldr	r3, [pc, #64]	; (800d1a0 <xPortStartScheduler+0x140>)
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a0f      	ldr	r2, [pc, #60]	; (800d1a0 <xPortStartScheduler+0x140>)
 800d162:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d166:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d168:	f7ff ff66 	bl	800d038 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d16c:	f7fe ff28 	bl	800bfc0 <vTaskSwitchContext>
	prvTaskExitError();
 800d170:	f7ff ff20 	bl	800cfb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	e000ed00 	.word	0xe000ed00
 800d184:	410fc271 	.word	0x410fc271
 800d188:	410fc270 	.word	0x410fc270
 800d18c:	e000e400 	.word	0xe000e400
 800d190:	20006f08 	.word	0x20006f08
 800d194:	20006f0c 	.word	0x20006f0c
 800d198:	e000ed20 	.word	0xe000ed20
 800d19c:	20000028 	.word	0x20000028
 800d1a0:	e000ef34 	.word	0xe000ef34

0800d1a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	b083      	sub	sp, #12
 800d1a8:	af00      	add	r7, sp, #0
	__asm volatile
 800d1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1ae:	f383 8811 	msr	BASEPRI, r3
 800d1b2:	f3bf 8f6f 	isb	sy
 800d1b6:	f3bf 8f4f 	dsb	sy
 800d1ba:	607b      	str	r3, [r7, #4]
}
 800d1bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d1be:	4b0f      	ldr	r3, [pc, #60]	; (800d1fc <vPortEnterCritical+0x58>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	3301      	adds	r3, #1
 800d1c4:	4a0d      	ldr	r2, [pc, #52]	; (800d1fc <vPortEnterCritical+0x58>)
 800d1c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d1c8:	4b0c      	ldr	r3, [pc, #48]	; (800d1fc <vPortEnterCritical+0x58>)
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d10f      	bne.n	800d1f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d1d0:	4b0b      	ldr	r3, [pc, #44]	; (800d200 <vPortEnterCritical+0x5c>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d00a      	beq.n	800d1f0 <vPortEnterCritical+0x4c>
	__asm volatile
 800d1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1de:	f383 8811 	msr	BASEPRI, r3
 800d1e2:	f3bf 8f6f 	isb	sy
 800d1e6:	f3bf 8f4f 	dsb	sy
 800d1ea:	603b      	str	r3, [r7, #0]
}
 800d1ec:	bf00      	nop
 800d1ee:	e7fe      	b.n	800d1ee <vPortEnterCritical+0x4a>
	}
}
 800d1f0:	bf00      	nop
 800d1f2:	370c      	adds	r7, #12
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr
 800d1fc:	20000028 	.word	0x20000028
 800d200:	e000ed04 	.word	0xe000ed04

0800d204 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d204:	b480      	push	{r7}
 800d206:	b083      	sub	sp, #12
 800d208:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d20a:	4b12      	ldr	r3, [pc, #72]	; (800d254 <vPortExitCritical+0x50>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d10a      	bne.n	800d228 <vPortExitCritical+0x24>
	__asm volatile
 800d212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d216:	f383 8811 	msr	BASEPRI, r3
 800d21a:	f3bf 8f6f 	isb	sy
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	607b      	str	r3, [r7, #4]
}
 800d224:	bf00      	nop
 800d226:	e7fe      	b.n	800d226 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d228:	4b0a      	ldr	r3, [pc, #40]	; (800d254 <vPortExitCritical+0x50>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	3b01      	subs	r3, #1
 800d22e:	4a09      	ldr	r2, [pc, #36]	; (800d254 <vPortExitCritical+0x50>)
 800d230:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d232:	4b08      	ldr	r3, [pc, #32]	; (800d254 <vPortExitCritical+0x50>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d105      	bne.n	800d246 <vPortExitCritical+0x42>
 800d23a:	2300      	movs	r3, #0
 800d23c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	f383 8811 	msr	BASEPRI, r3
}
 800d244:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d246:	bf00      	nop
 800d248:	370c      	adds	r7, #12
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr
 800d252:	bf00      	nop
 800d254:	20000028 	.word	0x20000028
	...

0800d260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d260:	f3ef 8009 	mrs	r0, PSP
 800d264:	f3bf 8f6f 	isb	sy
 800d268:	4b15      	ldr	r3, [pc, #84]	; (800d2c0 <pxCurrentTCBConst>)
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	f01e 0f10 	tst.w	lr, #16
 800d270:	bf08      	it	eq
 800d272:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d276:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d27a:	6010      	str	r0, [r2, #0]
 800d27c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d280:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d284:	f380 8811 	msr	BASEPRI, r0
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	f3bf 8f6f 	isb	sy
 800d290:	f7fe fe96 	bl	800bfc0 <vTaskSwitchContext>
 800d294:	f04f 0000 	mov.w	r0, #0
 800d298:	f380 8811 	msr	BASEPRI, r0
 800d29c:	bc09      	pop	{r0, r3}
 800d29e:	6819      	ldr	r1, [r3, #0]
 800d2a0:	6808      	ldr	r0, [r1, #0]
 800d2a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2a6:	f01e 0f10 	tst.w	lr, #16
 800d2aa:	bf08      	it	eq
 800d2ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d2b0:	f380 8809 	msr	PSP, r0
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	f3af 8000 	nop.w

0800d2c0 <pxCurrentTCBConst>:
 800d2c0:	20006ce0 	.word	0x20006ce0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d2c4:	bf00      	nop
 800d2c6:	bf00      	nop

0800d2c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b082      	sub	sp, #8
 800d2cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	607b      	str	r3, [r7, #4]
}
 800d2e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d2e2:	f7fe fdb5 	bl	800be50 <xTaskIncrementTick>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d003      	beq.n	800d2f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d2ec:	4b06      	ldr	r3, [pc, #24]	; (800d308 <SysTick_Handler+0x40>)
 800d2ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2f2:	601a      	str	r2, [r3, #0]
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	f383 8811 	msr	BASEPRI, r3
}
 800d2fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d300:	bf00      	nop
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	e000ed04 	.word	0xe000ed04

0800d30c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d30c:	b480      	push	{r7}
 800d30e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d310:	4b0b      	ldr	r3, [pc, #44]	; (800d340 <vPortSetupTimerInterrupt+0x34>)
 800d312:	2200      	movs	r2, #0
 800d314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d316:	4b0b      	ldr	r3, [pc, #44]	; (800d344 <vPortSetupTimerInterrupt+0x38>)
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d31c:	4b0a      	ldr	r3, [pc, #40]	; (800d348 <vPortSetupTimerInterrupt+0x3c>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4a0a      	ldr	r2, [pc, #40]	; (800d34c <vPortSetupTimerInterrupt+0x40>)
 800d322:	fba2 2303 	umull	r2, r3, r2, r3
 800d326:	099b      	lsrs	r3, r3, #6
 800d328:	4a09      	ldr	r2, [pc, #36]	; (800d350 <vPortSetupTimerInterrupt+0x44>)
 800d32a:	3b01      	subs	r3, #1
 800d32c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d32e:	4b04      	ldr	r3, [pc, #16]	; (800d340 <vPortSetupTimerInterrupt+0x34>)
 800d330:	2207      	movs	r2, #7
 800d332:	601a      	str	r2, [r3, #0]
}
 800d334:	bf00      	nop
 800d336:	46bd      	mov	sp, r7
 800d338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33c:	4770      	bx	lr
 800d33e:	bf00      	nop
 800d340:	e000e010 	.word	0xe000e010
 800d344:	e000e018 	.word	0xe000e018
 800d348:	20000008 	.word	0x20000008
 800d34c:	10624dd3 	.word	0x10624dd3
 800d350:	e000e014 	.word	0xe000e014

0800d354 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d354:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d364 <vPortEnableVFP+0x10>
 800d358:	6801      	ldr	r1, [r0, #0]
 800d35a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d35e:	6001      	str	r1, [r0, #0]
 800d360:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d362:	bf00      	nop
 800d364:	e000ed88 	.word	0xe000ed88

0800d368 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d36e:	f3ef 8305 	mrs	r3, IPSR
 800d372:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	2b0f      	cmp	r3, #15
 800d378:	d914      	bls.n	800d3a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d37a:	4a17      	ldr	r2, [pc, #92]	; (800d3d8 <vPortValidateInterruptPriority+0x70>)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	4413      	add	r3, r2
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d384:	4b15      	ldr	r3, [pc, #84]	; (800d3dc <vPortValidateInterruptPriority+0x74>)
 800d386:	781b      	ldrb	r3, [r3, #0]
 800d388:	7afa      	ldrb	r2, [r7, #11]
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d20a      	bcs.n	800d3a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	607b      	str	r3, [r7, #4]
}
 800d3a0:	bf00      	nop
 800d3a2:	e7fe      	b.n	800d3a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d3a4:	4b0e      	ldr	r3, [pc, #56]	; (800d3e0 <vPortValidateInterruptPriority+0x78>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d3ac:	4b0d      	ldr	r3, [pc, #52]	; (800d3e4 <vPortValidateInterruptPriority+0x7c>)
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	429a      	cmp	r2, r3
 800d3b2:	d90a      	bls.n	800d3ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	603b      	str	r3, [r7, #0]
}
 800d3c6:	bf00      	nop
 800d3c8:	e7fe      	b.n	800d3c8 <vPortValidateInterruptPriority+0x60>
	}
 800d3ca:	bf00      	nop
 800d3cc:	3714      	adds	r7, #20
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3d4:	4770      	bx	lr
 800d3d6:	bf00      	nop
 800d3d8:	e000e3f0 	.word	0xe000e3f0
 800d3dc:	20006f08 	.word	0x20006f08
 800d3e0:	e000ed0c 	.word	0xe000ed0c
 800d3e4:	20006f0c 	.word	0x20006f0c

0800d3e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b08a      	sub	sp, #40	; 0x28
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d3f4:	f7fe fc60 	bl	800bcb8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d3f8:	4b5b      	ldr	r3, [pc, #364]	; (800d568 <pvPortMalloc+0x180>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d101      	bne.n	800d404 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d400:	f000 f920 	bl	800d644 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d404:	4b59      	ldr	r3, [pc, #356]	; (800d56c <pvPortMalloc+0x184>)
 800d406:	681a      	ldr	r2, [r3, #0]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	4013      	ands	r3, r2
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	f040 8093 	bne.w	800d538 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d01d      	beq.n	800d454 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d418:	2208      	movs	r2, #8
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	4413      	add	r3, r2
 800d41e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f003 0307 	and.w	r3, r3, #7
 800d426:	2b00      	cmp	r3, #0
 800d428:	d014      	beq.n	800d454 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f023 0307 	bic.w	r3, r3, #7
 800d430:	3308      	adds	r3, #8
 800d432:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f003 0307 	and.w	r3, r3, #7
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00a      	beq.n	800d454 <pvPortMalloc+0x6c>
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	617b      	str	r3, [r7, #20]
}
 800d450:	bf00      	nop
 800d452:	e7fe      	b.n	800d452 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d06e      	beq.n	800d538 <pvPortMalloc+0x150>
 800d45a:	4b45      	ldr	r3, [pc, #276]	; (800d570 <pvPortMalloc+0x188>)
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	429a      	cmp	r2, r3
 800d462:	d869      	bhi.n	800d538 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d464:	4b43      	ldr	r3, [pc, #268]	; (800d574 <pvPortMalloc+0x18c>)
 800d466:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d468:	4b42      	ldr	r3, [pc, #264]	; (800d574 <pvPortMalloc+0x18c>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d46e:	e004      	b.n	800d47a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47c:	685b      	ldr	r3, [r3, #4]
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	429a      	cmp	r2, r3
 800d482:	d903      	bls.n	800d48c <pvPortMalloc+0xa4>
 800d484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d1f1      	bne.n	800d470 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d48c:	4b36      	ldr	r3, [pc, #216]	; (800d568 <pvPortMalloc+0x180>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d492:	429a      	cmp	r2, r3
 800d494:	d050      	beq.n	800d538 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d496:	6a3b      	ldr	r3, [r7, #32]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	2208      	movs	r2, #8
 800d49c:	4413      	add	r3, r2
 800d49e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4a2:	681a      	ldr	r2, [r3, #0]
 800d4a4:	6a3b      	ldr	r3, [r7, #32]
 800d4a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4aa:	685a      	ldr	r2, [r3, #4]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	1ad2      	subs	r2, r2, r3
 800d4b0:	2308      	movs	r3, #8
 800d4b2:	005b      	lsls	r3, r3, #1
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d91f      	bls.n	800d4f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d4b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4413      	add	r3, r2
 800d4be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4c0:	69bb      	ldr	r3, [r7, #24]
 800d4c2:	f003 0307 	and.w	r3, r3, #7
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00a      	beq.n	800d4e0 <pvPortMalloc+0xf8>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	613b      	str	r3, [r7, #16]
}
 800d4dc:	bf00      	nop
 800d4de:	e7fe      	b.n	800d4de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d4e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e2:	685a      	ldr	r2, [r3, #4]
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	1ad2      	subs	r2, r2, r3
 800d4e8:	69bb      	ldr	r3, [r7, #24]
 800d4ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d4f2:	69b8      	ldr	r0, [r7, #24]
 800d4f4:	f000 f908 	bl	800d708 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d4f8:	4b1d      	ldr	r3, [pc, #116]	; (800d570 <pvPortMalloc+0x188>)
 800d4fa:	681a      	ldr	r2, [r3, #0]
 800d4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	1ad3      	subs	r3, r2, r3
 800d502:	4a1b      	ldr	r2, [pc, #108]	; (800d570 <pvPortMalloc+0x188>)
 800d504:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d506:	4b1a      	ldr	r3, [pc, #104]	; (800d570 <pvPortMalloc+0x188>)
 800d508:	681a      	ldr	r2, [r3, #0]
 800d50a:	4b1b      	ldr	r3, [pc, #108]	; (800d578 <pvPortMalloc+0x190>)
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	429a      	cmp	r2, r3
 800d510:	d203      	bcs.n	800d51a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d512:	4b17      	ldr	r3, [pc, #92]	; (800d570 <pvPortMalloc+0x188>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	4a18      	ldr	r2, [pc, #96]	; (800d578 <pvPortMalloc+0x190>)
 800d518:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51c:	685a      	ldr	r2, [r3, #4]
 800d51e:	4b13      	ldr	r3, [pc, #76]	; (800d56c <pvPortMalloc+0x184>)
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	431a      	orrs	r2, r3
 800d524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d526:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d52a:	2200      	movs	r2, #0
 800d52c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d52e:	4b13      	ldr	r3, [pc, #76]	; (800d57c <pvPortMalloc+0x194>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	3301      	adds	r3, #1
 800d534:	4a11      	ldr	r2, [pc, #68]	; (800d57c <pvPortMalloc+0x194>)
 800d536:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d538:	f7fe fbcc 	bl	800bcd4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	f003 0307 	and.w	r3, r3, #7
 800d542:	2b00      	cmp	r3, #0
 800d544:	d00a      	beq.n	800d55c <pvPortMalloc+0x174>
	__asm volatile
 800d546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d54a:	f383 8811 	msr	BASEPRI, r3
 800d54e:	f3bf 8f6f 	isb	sy
 800d552:	f3bf 8f4f 	dsb	sy
 800d556:	60fb      	str	r3, [r7, #12]
}
 800d558:	bf00      	nop
 800d55a:	e7fe      	b.n	800d55a <pvPortMalloc+0x172>
	return pvReturn;
 800d55c:	69fb      	ldr	r3, [r7, #28]
}
 800d55e:	4618      	mov	r0, r3
 800d560:	3728      	adds	r7, #40	; 0x28
 800d562:	46bd      	mov	sp, r7
 800d564:	bd80      	pop	{r7, pc}
 800d566:	bf00      	nop
 800d568:	20011ee0 	.word	0x20011ee0
 800d56c:	20011ef4 	.word	0x20011ef4
 800d570:	20011ee4 	.word	0x20011ee4
 800d574:	20011ed8 	.word	0x20011ed8
 800d578:	20011ee8 	.word	0x20011ee8
 800d57c:	20011eec 	.word	0x20011eec

0800d580 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d04d      	beq.n	800d62e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d592:	2308      	movs	r3, #8
 800d594:	425b      	negs	r3, r3
 800d596:	697a      	ldr	r2, [r7, #20]
 800d598:	4413      	add	r3, r2
 800d59a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d59c:	697b      	ldr	r3, [r7, #20]
 800d59e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d5a0:	693b      	ldr	r3, [r7, #16]
 800d5a2:	685a      	ldr	r2, [r3, #4]
 800d5a4:	4b24      	ldr	r3, [pc, #144]	; (800d638 <vPortFree+0xb8>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	4013      	ands	r3, r2
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d10a      	bne.n	800d5c4 <vPortFree+0x44>
	__asm volatile
 800d5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b2:	f383 8811 	msr	BASEPRI, r3
 800d5b6:	f3bf 8f6f 	isb	sy
 800d5ba:	f3bf 8f4f 	dsb	sy
 800d5be:	60fb      	str	r3, [r7, #12]
}
 800d5c0:	bf00      	nop
 800d5c2:	e7fe      	b.n	800d5c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00a      	beq.n	800d5e2 <vPortFree+0x62>
	__asm volatile
 800d5cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5d0:	f383 8811 	msr	BASEPRI, r3
 800d5d4:	f3bf 8f6f 	isb	sy
 800d5d8:	f3bf 8f4f 	dsb	sy
 800d5dc:	60bb      	str	r3, [r7, #8]
}
 800d5de:	bf00      	nop
 800d5e0:	e7fe      	b.n	800d5e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d5e2:	693b      	ldr	r3, [r7, #16]
 800d5e4:	685a      	ldr	r2, [r3, #4]
 800d5e6:	4b14      	ldr	r3, [pc, #80]	; (800d638 <vPortFree+0xb8>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	4013      	ands	r3, r2
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d01e      	beq.n	800d62e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d5f0:	693b      	ldr	r3, [r7, #16]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d11a      	bne.n	800d62e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	685a      	ldr	r2, [r3, #4]
 800d5fc:	4b0e      	ldr	r3, [pc, #56]	; (800d638 <vPortFree+0xb8>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	43db      	mvns	r3, r3
 800d602:	401a      	ands	r2, r3
 800d604:	693b      	ldr	r3, [r7, #16]
 800d606:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d608:	f7fe fb56 	bl	800bcb8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d60c:	693b      	ldr	r3, [r7, #16]
 800d60e:	685a      	ldr	r2, [r3, #4]
 800d610:	4b0a      	ldr	r3, [pc, #40]	; (800d63c <vPortFree+0xbc>)
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	4413      	add	r3, r2
 800d616:	4a09      	ldr	r2, [pc, #36]	; (800d63c <vPortFree+0xbc>)
 800d618:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d61a:	6938      	ldr	r0, [r7, #16]
 800d61c:	f000 f874 	bl	800d708 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d620:	4b07      	ldr	r3, [pc, #28]	; (800d640 <vPortFree+0xc0>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	3301      	adds	r3, #1
 800d626:	4a06      	ldr	r2, [pc, #24]	; (800d640 <vPortFree+0xc0>)
 800d628:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d62a:	f7fe fb53 	bl	800bcd4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d62e:	bf00      	nop
 800d630:	3718      	adds	r7, #24
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	20011ef4 	.word	0x20011ef4
 800d63c:	20011ee4 	.word	0x20011ee4
 800d640:	20011ef0 	.word	0x20011ef0

0800d644 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d644:	b480      	push	{r7}
 800d646:	b085      	sub	sp, #20
 800d648:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d64a:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 800d64e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d650:	4b27      	ldr	r3, [pc, #156]	; (800d6f0 <prvHeapInit+0xac>)
 800d652:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f003 0307 	and.w	r3, r3, #7
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00c      	beq.n	800d678 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	3307      	adds	r3, #7
 800d662:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	f023 0307 	bic.w	r3, r3, #7
 800d66a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d66c:	68ba      	ldr	r2, [r7, #8]
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	1ad3      	subs	r3, r2, r3
 800d672:	4a1f      	ldr	r2, [pc, #124]	; (800d6f0 <prvHeapInit+0xac>)
 800d674:	4413      	add	r3, r2
 800d676:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d67c:	4a1d      	ldr	r2, [pc, #116]	; (800d6f4 <prvHeapInit+0xb0>)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d682:	4b1c      	ldr	r3, [pc, #112]	; (800d6f4 <prvHeapInit+0xb0>)
 800d684:	2200      	movs	r2, #0
 800d686:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	68ba      	ldr	r2, [r7, #8]
 800d68c:	4413      	add	r3, r2
 800d68e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d690:	2208      	movs	r2, #8
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	1a9b      	subs	r3, r3, r2
 800d696:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f023 0307 	bic.w	r3, r3, #7
 800d69e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	4a15      	ldr	r2, [pc, #84]	; (800d6f8 <prvHeapInit+0xb4>)
 800d6a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d6a6:	4b14      	ldr	r3, [pc, #80]	; (800d6f8 <prvHeapInit+0xb4>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d6ae:	4b12      	ldr	r3, [pc, #72]	; (800d6f8 <prvHeapInit+0xb4>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	68fa      	ldr	r2, [r7, #12]
 800d6be:	1ad2      	subs	r2, r2, r3
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d6c4:	4b0c      	ldr	r3, [pc, #48]	; (800d6f8 <prvHeapInit+0xb4>)
 800d6c6:	681a      	ldr	r2, [r3, #0]
 800d6c8:	683b      	ldr	r3, [r7, #0]
 800d6ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	4a0a      	ldr	r2, [pc, #40]	; (800d6fc <prvHeapInit+0xb8>)
 800d6d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	685b      	ldr	r3, [r3, #4]
 800d6d8:	4a09      	ldr	r2, [pc, #36]	; (800d700 <prvHeapInit+0xbc>)
 800d6da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d6dc:	4b09      	ldr	r3, [pc, #36]	; (800d704 <prvHeapInit+0xc0>)
 800d6de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6e2:	601a      	str	r2, [r3, #0]
}
 800d6e4:	bf00      	nop
 800d6e6:	3714      	adds	r7, #20
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ee:	4770      	bx	lr
 800d6f0:	20006f10 	.word	0x20006f10
 800d6f4:	20011ed8 	.word	0x20011ed8
 800d6f8:	20011ee0 	.word	0x20011ee0
 800d6fc:	20011ee8 	.word	0x20011ee8
 800d700:	20011ee4 	.word	0x20011ee4
 800d704:	20011ef4 	.word	0x20011ef4

0800d708 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d708:	b480      	push	{r7}
 800d70a:	b085      	sub	sp, #20
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d710:	4b28      	ldr	r3, [pc, #160]	; (800d7b4 <prvInsertBlockIntoFreeList+0xac>)
 800d712:	60fb      	str	r3, [r7, #12]
 800d714:	e002      	b.n	800d71c <prvInsertBlockIntoFreeList+0x14>
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	60fb      	str	r3, [r7, #12]
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	429a      	cmp	r2, r3
 800d724:	d8f7      	bhi.n	800d716 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	685b      	ldr	r3, [r3, #4]
 800d72e:	68ba      	ldr	r2, [r7, #8]
 800d730:	4413      	add	r3, r2
 800d732:	687a      	ldr	r2, [r7, #4]
 800d734:	429a      	cmp	r2, r3
 800d736:	d108      	bne.n	800d74a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	685a      	ldr	r2, [r3, #4]
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	685b      	ldr	r3, [r3, #4]
 800d740:	441a      	add	r2, r3
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	685b      	ldr	r3, [r3, #4]
 800d752:	68ba      	ldr	r2, [r7, #8]
 800d754:	441a      	add	r2, r3
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d118      	bne.n	800d790 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	681a      	ldr	r2, [r3, #0]
 800d762:	4b15      	ldr	r3, [pc, #84]	; (800d7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	429a      	cmp	r2, r3
 800d768:	d00d      	beq.n	800d786 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	685a      	ldr	r2, [r3, #4]
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	685b      	ldr	r3, [r3, #4]
 800d774:	441a      	add	r2, r3
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	681a      	ldr	r2, [r3, #0]
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	601a      	str	r2, [r3, #0]
 800d784:	e008      	b.n	800d798 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d786:	4b0c      	ldr	r3, [pc, #48]	; (800d7b8 <prvInsertBlockIntoFreeList+0xb0>)
 800d788:	681a      	ldr	r2, [r3, #0]
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	601a      	str	r2, [r3, #0]
 800d78e:	e003      	b.n	800d798 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	429a      	cmp	r2, r3
 800d79e:	d002      	beq.n	800d7a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d7a6:	bf00      	nop
 800d7a8:	3714      	adds	r7, #20
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop
 800d7b4:	20011ed8 	.word	0x20011ed8
 800d7b8:	20011ee0 	.word	0x20011ee0

0800d7bc <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800d7bc:	b480      	push	{r7}
 800d7be:	b083      	sub	sp, #12
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
 800d7c4:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800d7c6:	683a      	ldr	r2, [r7, #0]
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	bf38      	it	cc
 800d7ce:	4613      	movcc	r3, r2
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800d7dc:	b480      	push	{r7}
 800d7de:	b083      	sub	sp, #12
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
 800d7e4:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800d7e6:	683a      	ldr	r2, [r7, #0]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	bf28      	it	cs
 800d7ee:	4613      	movcs	r3, r2
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	683a      	ldr	r2, [r7, #0]
 800d80a:	fbb3 f2f2 	udiv	r2, r3, r2
 800d80e:	6839      	ldr	r1, [r7, #0]
 800d810:	fb01 f202 	mul.w	r2, r1, r2
 800d814:	1a9b      	subs	r3, r3, r2
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	1ad3      	subs	r3, r2, r3
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	370c      	adds	r7, #12
 800d81e:	46bd      	mov	sp, r7
 800d820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d824:	4770      	bx	lr

0800d826 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800d826:	b580      	push	{r7, lr}
 800d828:	b082      	sub	sp, #8
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800d830:	687a      	ldr	r2, [r7, #4]
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	4413      	add	r3, r2
 800d836:	3b01      	subs	r3, #1
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	4618      	mov	r0, r3
 800d83c:	f7ff ffde 	bl	800d7fc <lfs_aligndown>
 800d840:	4603      	mov	r3, r0
}
 800d842:	4618      	mov	r0, r3
 800d844:	3708      	adds	r7, #8
 800d846:	46bd      	mov	sp, r7
 800d848:	bd80      	pop	{r7, pc}

0800d84a <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800d84a:	b480      	push	{r7}
 800d84c:	b083      	sub	sp, #12
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	3b01      	subs	r3, #1
 800d856:	fab3 f383 	clz	r3, r3
 800d85a:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800d85e:	4618      	mov	r0, r3
 800d860:	370c      	adds	r7, #12
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr

0800d86a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800d86a:	b480      	push	{r7}
 800d86c:	b083      	sub	sp, #12
 800d86e:	af00      	add	r7, sp, #0
 800d870:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	fa93 f3a3 	rbit	r3, r3
 800d878:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	370c      	adds	r7, #12
 800d880:	46bd      	mov	sp, r7
 800d882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d886:	4770      	bx	lr

0800d888 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800d888:	b580      	push	{r7, lr}
 800d88a:	b082      	sub	sp, #8
 800d88c:	af00      	add	r7, sp, #0
 800d88e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7f3 fa01 	bl	8000c98 <__popcountsi2>
 800d896:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	1ad3      	subs	r3, r2, r3
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	370c      	adds	r7, #12
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ba:	4770      	bx	lr

0800d8bc <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800d8bc:	b480      	push	{r7}
 800d8be:	b083      	sub	sp, #12
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 800d8c4:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	370c      	adds	r7, #12
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr

0800d8d2 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b082      	sub	sp, #8
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7ff ffee 	bl	800d8bc <lfs_fromle32>
 800d8e0:	4603      	mov	r3, r0
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3708      	adds	r7, #8
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}

0800d8ea <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800d8ea:	b480      	push	{r7}
 800d8ec:	b083      	sub	sp, #12
 800d8ee:	af00      	add	r7, sp, #0
 800d8f0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	370c      	adds	r7, #12
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr

0800d902 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800d902:	b580      	push	{r7, lr}
 800d904:	b082      	sub	sp, #8
 800d906:	af00      	add	r7, sp, #0
 800d908:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800d90a:	6878      	ldr	r0, [r7, #4]
 800d90c:	f7ff ffed 	bl	800d8ea <lfs_frombe32>
 800d910:	4603      	mov	r3, r0
}
 800d912:	4618      	mov	r0, r3
 800d914:	3708      	adds	r7, #8
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b082      	sub	sp, #8
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f016 fb94 	bl	8024050 <malloc>
 800d928:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	3708      	adds	r7, #8
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800d932:	b580      	push	{r7, lr}
 800d934:	b082      	sub	sp, #8
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800d93a:	6878      	ldr	r0, [r7, #4]
 800d93c:	f016 fb90 	bl	8024060 <free>
#else
    (void)p;
#endif
}
 800d940:	bf00      	nop
 800d942:	3708      	adds	r7, #8
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <lfs_cache_drop>:
int lfs_mounted;
lfs_t lfs;
struct lfs_config cfg;

/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800d948:	b480      	push	{r7}
 800d94a:	b083      	sub	sp, #12
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d958:	601a      	str	r2, [r3, #0]
}
 800d95a:	bf00      	nop
 800d95c:	370c      	adds	r7, #12
 800d95e:	46bd      	mov	sp, r7
 800d960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d964:	4770      	bx	lr

0800d966 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800d966:	b580      	push	{r7, lr}
 800d968:	b082      	sub	sp, #8
 800d96a:	af00      	add	r7, sp, #0
 800d96c:	6078      	str	r0, [r7, #4]
 800d96e:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	68d8      	ldr	r0, [r3, #12]
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d97a:	461a      	mov	r2, r3
 800d97c:	21ff      	movs	r1, #255	; 0xff
 800d97e:	f017 fbe5 	bl	802514c <memset>
    pcache->block = LFS_BLOCK_NULL;
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d988:	601a      	str	r2, [r3, #0]
}
 800d98a:	bf00      	nop
 800d98c:	3708      	adds	r7, #8
 800d98e:	46bd      	mov	sp, r7
 800d990:	bd80      	pop	{r7, pc}
	...

0800d994 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800d994:	b5b0      	push	{r4, r5, r7, lr}
 800d996:	b08a      	sub	sp, #40	; 0x28
 800d998:	af02      	add	r7, sp, #8
 800d99a:	60f8      	str	r0, [r7, #12]
 800d99c:	60b9      	str	r1, [r7, #8]
 800d99e:	607a      	str	r2, [r7, #4]
 800d9a0:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800d9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9a4:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9aa:	6a1b      	ldr	r3, [r3, #32]
 800d9ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ae:	429a      	cmp	r2, r3
 800d9b0:	d208      	bcs.n	800d9c4 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 800d9b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9b6:	441a      	add	r2, r3
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9bc:	69db      	ldr	r3, [r3, #28]
    if (block >= lfs->cfg->block_count ||
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	f240 811b 	bls.w	800dbfa <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 800d9c4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800d9c8:	e11c      	b.n	800dc04 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800d9ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9cc:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d03f      	beq.n	800da54 <lfs_bd_read+0xc0>
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d13a      	bne.n	800da54 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	685a      	ldr	r2, [r3, #4]
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	689b      	ldr	r3, [r3, #8]
 800d9e6:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800d9e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	d232      	bcs.n	800da54 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	685b      	ldr	r3, [r3, #4]
 800d9f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9f4:	429a      	cmp	r2, r3
 800d9f6:	d324      	bcc.n	800da42 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	689a      	ldr	r2, [r3, #8]
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	6859      	ldr	r1, [r3, #4]
 800da00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da02:	1acb      	subs	r3, r1, r3
 800da04:	4413      	add	r3, r2
 800da06:	4619      	mov	r1, r3
 800da08:	69b8      	ldr	r0, [r7, #24]
 800da0a:	f7ff fee7 	bl	800d7dc <lfs_min>
 800da0e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	68da      	ldr	r2, [r3, #12]
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	685b      	ldr	r3, [r3, #4]
 800da18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800da1a:	1acb      	subs	r3, r1, r3
 800da1c:	4413      	add	r3, r2
 800da1e:	69ba      	ldr	r2, [r7, #24]
 800da20:	4619      	mov	r1, r3
 800da22:	69f8      	ldr	r0, [r7, #28]
 800da24:	f018 fe8b 	bl	802673e <memcpy>

                data += diff;
 800da28:	69fa      	ldr	r2, [r7, #28]
 800da2a:	69bb      	ldr	r3, [r7, #24]
 800da2c:	4413      	add	r3, r2
 800da2e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800da30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	4413      	add	r3, r2
 800da36:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800da38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800da3a:	69bb      	ldr	r3, [r7, #24]
 800da3c:	1ad3      	subs	r3, r2, r3
 800da3e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800da40:	e0db      	b.n	800dbfa <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	685a      	ldr	r2, [r3, #4]
 800da46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da48:	1ad3      	subs	r3, r2, r3
 800da4a:	4619      	mov	r1, r3
 800da4c:	69b8      	ldr	r0, [r7, #24]
 800da4e:	f7ff fec5 	bl	800d7dc <lfs_min>
 800da52:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d13a      	bne.n	800dad4 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	685a      	ldr	r2, [r3, #4]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	689b      	ldr	r3, [r3, #8]
 800da66:	4413      	add	r3, r2
        if (block == rcache->block &&
 800da68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da6a:	429a      	cmp	r2, r3
 800da6c:	d232      	bcs.n	800dad4 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800da74:	429a      	cmp	r2, r3
 800da76:	d324      	bcc.n	800dac2 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	689a      	ldr	r2, [r3, #8]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	6859      	ldr	r1, [r3, #4]
 800da80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da82:	1acb      	subs	r3, r1, r3
 800da84:	4413      	add	r3, r2
 800da86:	4619      	mov	r1, r3
 800da88:	69b8      	ldr	r0, [r7, #24]
 800da8a:	f7ff fea7 	bl	800d7dc <lfs_min>
 800da8e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	68da      	ldr	r2, [r3, #12]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800da9a:	1acb      	subs	r3, r1, r3
 800da9c:	4413      	add	r3, r2
 800da9e:	69ba      	ldr	r2, [r7, #24]
 800daa0:	4619      	mov	r1, r3
 800daa2:	69f8      	ldr	r0, [r7, #28]
 800daa4:	f018 fe4b 	bl	802673e <memcpy>

                data += diff;
 800daa8:	69fa      	ldr	r2, [r7, #28]
 800daaa:	69bb      	ldr	r3, [r7, #24]
 800daac:	4413      	add	r3, r2
 800daae:	61fb      	str	r3, [r7, #28]
                off += diff;
 800dab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	4413      	add	r3, r2
 800dab6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800dab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800daba:	69bb      	ldr	r3, [r7, #24]
 800dabc:	1ad3      	subs	r3, r2, r3
 800dabe:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800dac0:	e09b      	b.n	800dbfa <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	685a      	ldr	r2, [r3, #4]
 800dac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dac8:	1ad3      	subs	r3, r2, r3
 800daca:	4619      	mov	r1, r3
 800dacc:	69b8      	ldr	r0, [r7, #24]
 800dace:	f7ff fe85 	bl	800d7dc <lfs_min>
 800dad2:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800dad4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dad6:	683b      	ldr	r3, [r7, #0]
 800dad8:	429a      	cmp	r2, r3
 800dada:	d336      	bcc.n	800db4a <lfs_bd_read+0x1b6>
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dae0:	695a      	ldr	r2, [r3, #20]
 800dae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae4:	fbb3 f1f2 	udiv	r1, r3, r2
 800dae8:	fb01 f202 	mul.w	r2, r1, r2
 800daec:	1a9b      	subs	r3, r3, r2
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d12b      	bne.n	800db4a <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daf6:	695b      	ldr	r3, [r3, #20]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800daf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d325      	bcc.n	800db4a <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db02:	695b      	ldr	r3, [r3, #20]
 800db04:	4619      	mov	r1, r3
 800db06:	69b8      	ldr	r0, [r7, #24]
 800db08:	f7ff fe78 	bl	800d7fc <lfs_aligndown>
 800db0c:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db12:	685c      	ldr	r4, [r3, #4]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800db18:	69bb      	ldr	r3, [r7, #24]
 800db1a:	9300      	str	r3, [sp, #0]
 800db1c:	69fb      	ldr	r3, [r7, #28]
 800db1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800db22:	47a0      	blx	r4
 800db24:	6178      	str	r0, [r7, #20]
            if (err) {
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d001      	beq.n	800db30 <lfs_bd_read+0x19c>
                return err;
 800db2c:	697b      	ldr	r3, [r7, #20]
 800db2e:	e069      	b.n	800dc04 <lfs_bd_read+0x270>
            }

            data += diff;
 800db30:	69fa      	ldr	r2, [r7, #28]
 800db32:	69bb      	ldr	r3, [r7, #24]
 800db34:	4413      	add	r3, r2
 800db36:	61fb      	str	r3, [r7, #28]
            off += diff;
 800db38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db3a:	69bb      	ldr	r3, [r7, #24]
 800db3c:	4413      	add	r3, r2
 800db3e:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 800db40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	1ad3      	subs	r3, r2, r3
 800db46:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 800db48:	e057      	b.n	800dbfa <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db4e:	6a1b      	ldr	r3, [r3, #32]
 800db50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db52:	429a      	cmp	r2, r3
 800db54:	d305      	bcc.n	800db62 <lfs_bd_read+0x1ce>
 800db56:	4b2d      	ldr	r3, [pc, #180]	; (800dc0c <lfs_bd_read+0x278>)
 800db58:	4a2d      	ldr	r2, [pc, #180]	; (800dc10 <lfs_bd_read+0x27c>)
 800db5a:	215e      	movs	r1, #94	; 0x5e
 800db5c:	482d      	ldr	r0, [pc, #180]	; (800dc14 <lfs_bd_read+0x280>)
 800db5e:	f016 fa59 	bl	8024014 <__assert_func>
        rcache->block = block;
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db66:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db6c:	695b      	ldr	r3, [r3, #20]
 800db6e:	4619      	mov	r1, r3
 800db70:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800db72:	f7ff fe43 	bl	800d7fc <lfs_aligndown>
 800db76:	4602      	mov	r2, r0
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800db7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db7e:	683b      	ldr	r3, [r7, #0]
 800db80:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db86:	695b      	ldr	r3, [r3, #20]
                lfs_min(
 800db88:	4619      	mov	r1, r3
 800db8a:	4610      	mov	r0, r2
 800db8c:	f7ff fe4b 	bl	800d826 <lfs_alignup>
 800db90:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db96:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800db98:	4619      	mov	r1, r3
 800db9a:	4610      	mov	r0, r2
 800db9c:	f7ff fe1e 	bl	800d7dc <lfs_min>
 800dba0:	4602      	mov	r2, r0
                - rcache->off,
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800dba6:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(
 800dbae:	4619      	mov	r1, r3
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	f7ff fe13 	bl	800d7dc <lfs_min>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbc0:	685c      	ldr	r4, [r3, #4]
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	6819      	ldr	r1, [r3, #0]
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	689b      	ldr	r3, [r3, #8]
 800dbd6:	9300      	str	r3, [sp, #0]
 800dbd8:	462b      	mov	r3, r5
 800dbda:	47a0      	blx	r4
 800dbdc:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	dd05      	ble.n	800dbf0 <lfs_bd_read+0x25c>
 800dbe4:	4b0c      	ldr	r3, [pc, #48]	; (800dc18 <lfs_bd_read+0x284>)
 800dbe6:	4a0a      	ldr	r2, [pc, #40]	; (800dc10 <lfs_bd_read+0x27c>)
 800dbe8:	2169      	movs	r1, #105	; 0x69
 800dbea:	480a      	ldr	r0, [pc, #40]	; (800dc14 <lfs_bd_read+0x280>)
 800dbec:	f016 fa12 	bl	8024014 <__assert_func>
        if (err) {
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d001      	beq.n	800dbfa <lfs_bd_read+0x266>
            return err;
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	e004      	b.n	800dc04 <lfs_bd_read+0x270>
    while (size > 0) {
 800dbfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	f47f aee4 	bne.w	800d9ca <lfs_bd_read+0x36>
        }
    }

    return 0;
 800dc02:	2300      	movs	r3, #0
}
 800dc04:	4618      	mov	r0, r3
 800dc06:	3720      	adds	r7, #32
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	bdb0      	pop	{r4, r5, r7, pc}
 800dc0c:	08029db4 	.word	0x08029db4
 800dc10:	0802dcb0 	.word	0x0802dcb0
 800dc14:	08029dd4 	.word	0x08029dd4
 800dc18:	08029e00 	.word	0x08029e00

0800dc1c <lfs_bd_cmp>:
};

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08e      	sub	sp, #56	; 0x38
 800dc20:	af04      	add	r7, sp, #16
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
 800dc28:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800dc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc2c:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800dc32:	2300      	movs	r3, #0
 800dc34:	627b      	str	r3, [r7, #36]	; 0x24
 800dc36:	e039      	b.n	800dcac <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800dc38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3c:	1ad3      	subs	r3, r2, r3
 800dc3e:	2108      	movs	r1, #8
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7ff fdcb 	bl	800d7dc <lfs_min>
 800dc46:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 800dc48:	683a      	ldr	r2, [r7, #0]
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc4c:	1ad1      	subs	r1, r2, r3
 800dc4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc52:	4413      	add	r3, r2
 800dc54:	69fa      	ldr	r2, [r7, #28]
 800dc56:	9203      	str	r2, [sp, #12]
 800dc58:	f107 0210 	add.w	r2, r7, #16
 800dc5c:	9202      	str	r2, [sp, #8]
 800dc5e:	9301      	str	r3, [sp, #4]
 800dc60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc62:	9300      	str	r3, [sp, #0]
 800dc64:	460b      	mov	r3, r1
 800dc66:	687a      	ldr	r2, [r7, #4]
 800dc68:	68b9      	ldr	r1, [r7, #8]
 800dc6a:	68f8      	ldr	r0, [r7, #12]
 800dc6c:	f7ff fe92 	bl	800d994 <lfs_bd_read>
 800dc70:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 800dc72:	69bb      	ldr	r3, [r7, #24]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d001      	beq.n	800dc7c <lfs_bd_cmp+0x60>
            return res;
 800dc78:	69bb      	ldr	r3, [r7, #24]
 800dc7a:	e01c      	b.n	800dcb6 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 800dc7c:	6a3a      	ldr	r2, [r7, #32]
 800dc7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc80:	18d1      	adds	r1, r2, r3
 800dc82:	f107 0310 	add.w	r3, r7, #16
 800dc86:	69fa      	ldr	r2, [r7, #28]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f017 fa35 	bl	80250f8 <memcmp>
 800dc8e:	61b8      	str	r0, [r7, #24]
        if (res) {
 800dc90:	69bb      	ldr	r3, [r7, #24]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d006      	beq.n	800dca4 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800dc96:	69bb      	ldr	r3, [r7, #24]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	da01      	bge.n	800dca0 <lfs_bd_cmp+0x84>
 800dc9c:	2301      	movs	r3, #1
 800dc9e:	e00a      	b.n	800dcb6 <lfs_bd_cmp+0x9a>
 800dca0:	2302      	movs	r3, #2
 800dca2:	e008      	b.n	800dcb6 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800dca4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	4413      	add	r3, r2
 800dcaa:	627b      	str	r3, [r7, #36]	; 0x24
 800dcac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d3c1      	bcc.n	800dc38 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3728      	adds	r7, #40	; 0x28
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
	...

0800dcc0 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800dcc0:	b5b0      	push	{r4, r5, r7, lr}
 800dcc2:	b08c      	sub	sp, #48	; 0x30
 800dcc4:	af04      	add	r7, sp, #16
 800dcc6:	60f8      	str	r0, [r7, #12]
 800dcc8:	60b9      	str	r1, [r7, #8]
 800dcca:	607a      	str	r2, [r7, #4]
 800dccc:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dcd6:	d061      	beq.n	800dd9c <lfs_bd_flush+0xdc>
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	f113 0f02 	cmn.w	r3, #2
 800dce0:	d05c      	beq.n	800dd9c <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800dce2:	68bb      	ldr	r3, [r7, #8]
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcea:	6a1b      	ldr	r3, [r3, #32]
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d305      	bcc.n	800dcfc <lfs_bd_flush+0x3c>
 800dcf0:	4b2d      	ldr	r3, [pc, #180]	; (800dda8 <lfs_bd_flush+0xe8>)
 800dcf2:	4a2e      	ldr	r2, [pc, #184]	; (800ddac <lfs_bd_flush+0xec>)
 800dcf4:	2197      	movs	r1, #151	; 0x97
 800dcf6:	482e      	ldr	r0, [pc, #184]	; (800ddb0 <lfs_bd_flush+0xf0>)
 800dcf8:	f016 f98c 	bl	8024014 <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800dcfc:	68bb      	ldr	r3, [r7, #8]
 800dcfe:	689a      	ldr	r2, [r3, #8]
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd04:	699b      	ldr	r3, [r3, #24]
 800dd06:	4619      	mov	r1, r3
 800dd08:	4610      	mov	r0, r2
 800dd0a:	f7ff fd8c 	bl	800d826 <lfs_alignup>
 800dd0e:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dd14:	689c      	ldr	r4, [r3, #8]
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	6819      	ldr	r1, [r3, #0]
 800dd1e:	68bb      	ldr	r3, [r7, #8]
 800dd20:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	9300      	str	r3, [sp, #0]
 800dd2a:	462b      	mov	r3, r5
 800dd2c:	47a0      	blx	r4
 800dd2e:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	dd05      	ble.n	800dd42 <lfs_bd_flush+0x82>
 800dd36:	4b1f      	ldr	r3, [pc, #124]	; (800ddb4 <lfs_bd_flush+0xf4>)
 800dd38:	4a1c      	ldr	r2, [pc, #112]	; (800ddac <lfs_bd_flush+0xec>)
 800dd3a:	219b      	movs	r1, #155	; 0x9b
 800dd3c:	481c      	ldr	r0, [pc, #112]	; (800ddb0 <lfs_bd_flush+0xf0>)
 800dd3e:	f016 f969 	bl	8024014 <__assert_func>
        if (err) {
 800dd42:	69bb      	ldr	r3, [r7, #24]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d001      	beq.n	800dd4c <lfs_bd_flush+0x8c>
            return err;
 800dd48:	69bb      	ldr	r3, [r7, #24]
 800dd4a:	e028      	b.n	800dd9e <lfs_bd_flush+0xde>
        }

        if (validate) {
 800dd4c:	78fb      	ldrb	r3, [r7, #3]
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d020      	beq.n	800dd94 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800dd52:	6879      	ldr	r1, [r7, #4]
 800dd54:	68f8      	ldr	r0, [r7, #12]
 800dd56:	f7ff fdf7 	bl	800d948 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	68ba      	ldr	r2, [r7, #8]
 800dd60:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800dd62:	68b9      	ldr	r1, [r7, #8]
 800dd64:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800dd66:	69f8      	ldr	r0, [r7, #28]
 800dd68:	9003      	str	r0, [sp, #12]
 800dd6a:	9102      	str	r1, [sp, #8]
 800dd6c:	9201      	str	r2, [sp, #4]
 800dd6e:	9300      	str	r3, [sp, #0]
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	687a      	ldr	r2, [r7, #4]
 800dd74:	2100      	movs	r1, #0
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f7ff ff50 	bl	800dc1c <lfs_bd_cmp>
 800dd7c:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	da01      	bge.n	800dd88 <lfs_bd_flush+0xc8>
                return res;
 800dd84:	697b      	ldr	r3, [r7, #20]
 800dd86:	e00a      	b.n	800dd9e <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 800dd88:	697b      	ldr	r3, [r7, #20]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d002      	beq.n	800dd94 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 800dd8e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800dd92:	e004      	b.n	800dd9e <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800dd94:	68b9      	ldr	r1, [r7, #8]
 800dd96:	68f8      	ldr	r0, [r7, #12]
 800dd98:	f7ff fde5 	bl	800d966 <lfs_cache_zero>
    }

    return 0;
 800dd9c:	2300      	movs	r3, #0
}
 800dd9e:	4618      	mov	r0, r3
 800dda0:	3720      	adds	r7, #32
 800dda2:	46bd      	mov	sp, r7
 800dda4:	bdb0      	pop	{r4, r5, r7, pc}
 800dda6:	bf00      	nop
 800dda8:	08029e0c 	.word	0x08029e0c
 800ddac:	0802dcbc 	.word	0x0802dcbc
 800ddb0:	08029dd4 	.word	0x08029dd4
 800ddb4:	08029e00 	.word	0x08029e00

0800ddb8 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b086      	sub	sp, #24
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	60f8      	str	r0, [r7, #12]
 800ddc0:	60b9      	str	r1, [r7, #8]
 800ddc2:	607a      	str	r2, [r7, #4]
 800ddc4:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800ddc6:	6879      	ldr	r1, [r7, #4]
 800ddc8:	68f8      	ldr	r0, [r7, #12]
 800ddca:	f7ff fdbd 	bl	800d948 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800ddce:	78fb      	ldrb	r3, [r7, #3]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	68b9      	ldr	r1, [r7, #8]
 800ddd4:	68f8      	ldr	r0, [r7, #12]
 800ddd6:	f7ff ff73 	bl	800dcc0 <lfs_bd_flush>
 800ddda:	6178      	str	r0, [r7, #20]
    if (err) {
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d001      	beq.n	800dde6 <lfs_bd_sync+0x2e>
        return err;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	e011      	b.n	800de0a <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ddea:	691b      	ldr	r3, [r3, #16]
 800ddec:	68fa      	ldr	r2, [r7, #12]
 800ddee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ddf0:	4610      	mov	r0, r2
 800ddf2:	4798      	blx	r3
 800ddf4:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	dd05      	ble.n	800de08 <lfs_bd_sync+0x50>
 800ddfc:	4b05      	ldr	r3, [pc, #20]	; (800de14 <lfs_bd_sync+0x5c>)
 800ddfe:	4a06      	ldr	r2, [pc, #24]	; (800de18 <lfs_bd_sync+0x60>)
 800de00:	21c1      	movs	r1, #193	; 0xc1
 800de02:	4806      	ldr	r0, [pc, #24]	; (800de1c <lfs_bd_sync+0x64>)
 800de04:	f016 f906 	bl	8024014 <__assert_func>
    return err;
 800de08:	697b      	ldr	r3, [r7, #20]
}
 800de0a:	4618      	mov	r0, r3
 800de0c:	3718      	adds	r7, #24
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
 800de12:	bf00      	nop
 800de14:	08029e00 	.word	0x08029e00
 800de18:	0802dccc 	.word	0x0802dccc
 800de1c:	08029dd4 	.word	0x08029dd4

0800de20 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800de20:	b580      	push	{r7, lr}
 800de22:	b088      	sub	sp, #32
 800de24:	af00      	add	r7, sp, #0
 800de26:	60f8      	str	r0, [r7, #12]
 800de28:	60b9      	str	r1, [r7, #8]
 800de2a:	607a      	str	r2, [r7, #4]
 800de2c:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 800de32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de34:	f113 0f02 	cmn.w	r3, #2
 800de38:	d00b      	beq.n	800de52 <lfs_bd_prog+0x32>
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de3e:	6a1b      	ldr	r3, [r3, #32]
 800de40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de42:	429a      	cmp	r2, r3
 800de44:	d305      	bcc.n	800de52 <lfs_bd_prog+0x32>
 800de46:	4b47      	ldr	r3, [pc, #284]	; (800df64 <lfs_bd_prog+0x144>)
 800de48:	4a47      	ldr	r2, [pc, #284]	; (800df68 <lfs_bd_prog+0x148>)
 800de4a:	21cc      	movs	r1, #204	; 0xcc
 800de4c:	4847      	ldr	r0, [pc, #284]	; (800df6c <lfs_bd_prog+0x14c>)
 800de4e:	f016 f8e1 	bl	8024014 <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800de52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de56:	441a      	add	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de5c:	69db      	ldr	r3, [r3, #28]
 800de5e:	429a      	cmp	r2, r3
 800de60:	d977      	bls.n	800df52 <lfs_bd_prog+0x132>
 800de62:	4b43      	ldr	r3, [pc, #268]	; (800df70 <lfs_bd_prog+0x150>)
 800de64:	4a40      	ldr	r2, [pc, #256]	; (800df68 <lfs_bd_prog+0x148>)
 800de66:	21cd      	movs	r1, #205	; 0xcd
 800de68:	4840      	ldr	r0, [pc, #256]	; (800df6c <lfs_bd_prog+0x14c>)
 800de6a:	f016 f8d3 	bl	8024014 <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800de6e:	68bb      	ldr	r3, [r7, #8]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de74:	429a      	cmp	r2, r3
 800de76:	d151      	bne.n	800df1c <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800de7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de7e:	429a      	cmp	r2, r3
 800de80:	d34c      	bcc.n	800df1c <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 800de82:	68bb      	ldr	r3, [r7, #8]
 800de84:	685a      	ldr	r2, [r3, #4]
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de8c:	4413      	add	r3, r2
                off >= pcache->off &&
 800de8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de90:	429a      	cmp	r2, r3
 800de92:	d243      	bcs.n	800df1c <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	6859      	ldr	r1, [r3, #4]
 800de9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dea0:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800dea2:	4413      	add	r3, r2
 800dea4:	4619      	mov	r1, r3
 800dea6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800dea8:	f7ff fc98 	bl	800d7dc <lfs_min>
 800deac:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	68da      	ldr	r2, [r3, #12]
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	685b      	ldr	r3, [r3, #4]
 800deb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800deb8:	1acb      	subs	r3, r1, r3
 800deba:	4413      	add	r3, r2
 800debc:	69ba      	ldr	r2, [r7, #24]
 800debe:	69f9      	ldr	r1, [r7, #28]
 800dec0:	4618      	mov	r0, r3
 800dec2:	f018 fc3c 	bl	802673e <memcpy>

            data += diff;
 800dec6:	69fa      	ldr	r2, [r7, #28]
 800dec8:	69bb      	ldr	r3, [r7, #24]
 800deca:	4413      	add	r3, r2
 800decc:	61fb      	str	r3, [r7, #28]
            off += diff;
 800dece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ded0:	69bb      	ldr	r3, [r7, #24]
 800ded2:	4413      	add	r3, r2
 800ded4:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800ded6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ded8:	69bb      	ldr	r3, [r7, #24]
 800deda:	1ad3      	subs	r3, r2, r3
 800dedc:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	6898      	ldr	r0, [r3, #8]
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dee8:	1ad3      	subs	r3, r2, r3
 800deea:	4619      	mov	r1, r3
 800deec:	f7ff fc66 	bl	800d7bc <lfs_max>
 800def0:	4602      	mov	r2, r0
 800def2:	68bb      	ldr	r3, [r7, #8]
 800def4:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800def6:	68bb      	ldr	r3, [r7, #8]
 800def8:	689a      	ldr	r2, [r3, #8]
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800defe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df00:	429a      	cmp	r2, r3
 800df02:	d126      	bne.n	800df52 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800df04:	78fb      	ldrb	r3, [r7, #3]
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	68b9      	ldr	r1, [r7, #8]
 800df0a:	68f8      	ldr	r0, [r7, #12]
 800df0c:	f7ff fed8 	bl	800dcc0 <lfs_bd_flush>
 800df10:	6178      	str	r0, [r7, #20]
                if (err) {
 800df12:	697b      	ldr	r3, [r7, #20]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d01c      	beq.n	800df52 <lfs_bd_prog+0x132>
                    return err;
 800df18:	697b      	ldr	r3, [r7, #20]
 800df1a:	e01e      	b.n	800df5a <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df24:	d005      	beq.n	800df32 <lfs_bd_prog+0x112>
 800df26:	4b13      	ldr	r3, [pc, #76]	; (800df74 <lfs_bd_prog+0x154>)
 800df28:	4a0f      	ldr	r2, [pc, #60]	; (800df68 <lfs_bd_prog+0x148>)
 800df2a:	21ea      	movs	r1, #234	; 0xea
 800df2c:	480f      	ldr	r0, [pc, #60]	; (800df6c <lfs_bd_prog+0x14c>)
 800df2e:	f016 f871 	bl	8024014 <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800df32:	68bb      	ldr	r3, [r7, #8]
 800df34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800df36:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df3c:	699b      	ldr	r3, [r3, #24]
 800df3e:	4619      	mov	r1, r3
 800df40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800df42:	f7ff fc5b 	bl	800d7fc <lfs_aligndown>
 800df46:	4602      	mov	r2, r0
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800df4c:	68bb      	ldr	r3, [r7, #8]
 800df4e:	2200      	movs	r2, #0
 800df50:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800df52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df54:	2b00      	cmp	r3, #0
 800df56:	d18a      	bne.n	800de6e <lfs_bd_prog+0x4e>
    }

    return 0;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3720      	adds	r7, #32
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
 800df62:	bf00      	nop
 800df64:	08029e34 	.word	0x08029e34
 800df68:	0802dcd8 	.word	0x0802dcd8
 800df6c:	08029dd4 	.word	0x08029dd4
 800df70:	08029e70 	.word	0x08029e70
 800df74:	08029e94 	.word	0x08029e94

0800df78 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800df78:	b580      	push	{r7, lr}
 800df7a:	b084      	sub	sp, #16
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
 800df80:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df86:	6a1b      	ldr	r3, [r3, #32]
 800df88:	683a      	ldr	r2, [r7, #0]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d305      	bcc.n	800df9a <lfs_bd_erase+0x22>
 800df8e:	4b0e      	ldr	r3, [pc, #56]	; (800dfc8 <lfs_bd_erase+0x50>)
 800df90:	4a0e      	ldr	r2, [pc, #56]	; (800dfcc <lfs_bd_erase+0x54>)
 800df92:	21f8      	movs	r1, #248	; 0xf8
 800df94:	480e      	ldr	r0, [pc, #56]	; (800dfd0 <lfs_bd_erase+0x58>)
 800df96:	f016 f83d 	bl	8024014 <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800dfa4:	6839      	ldr	r1, [r7, #0]
 800dfa6:	4610      	mov	r0, r2
 800dfa8:	4798      	blx	r3
 800dfaa:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	dd05      	ble.n	800dfbe <lfs_bd_erase+0x46>
 800dfb2:	4b08      	ldr	r3, [pc, #32]	; (800dfd4 <lfs_bd_erase+0x5c>)
 800dfb4:	4a05      	ldr	r2, [pc, #20]	; (800dfcc <lfs_bd_erase+0x54>)
 800dfb6:	21fa      	movs	r1, #250	; 0xfa
 800dfb8:	4805      	ldr	r0, [pc, #20]	; (800dfd0 <lfs_bd_erase+0x58>)
 800dfba:	f016 f82b 	bl	8024014 <__assert_func>
    return err;
 800dfbe:	68fb      	ldr	r3, [r7, #12]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3710      	adds	r7, #16
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	08029db4 	.word	0x08029db4
 800dfcc:	0802dce4 	.word	0x0802dce4
 800dfd0:	08029dd4 	.word	0x08029dd4
 800dfd4:	08029e00 	.word	0x08029e00

0800dfd8 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800dfd8:	b480      	push	{r7}
 800dfda:	b085      	sub	sp, #20
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	685a      	ldr	r2, [r3, #4]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	3304      	adds	r3, #4
 800dff2:	68fa      	ldr	r2, [r7, #12]
 800dff4:	601a      	str	r2, [r3, #0]
}
 800dff6:	bf00      	nop
 800dff8:	3714      	adds	r7, #20
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr

0800e002 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800e002:	b480      	push	{r7}
 800e004:	b083      	sub	sp, #12
 800e006:	af00      	add	r7, sp, #0
 800e008:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e012:	d005      	beq.n	800e020 <lfs_pair_isnull+0x1e>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	3304      	adds	r3, #4
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e01e:	d101      	bne.n	800e024 <lfs_pair_isnull+0x22>
 800e020:	2301      	movs	r3, #1
 800e022:	e000      	b.n	800e026 <lfs_pair_isnull+0x24>
 800e024:	2300      	movs	r3, #0
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	b2db      	uxtb	r3, r3
}
 800e02c:	4618      	mov	r0, r3
 800e02e:	370c      	adds	r7, #12
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr

0800e038 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800e038:	b480      	push	{r7}
 800e03a:	b083      	sub	sp, #12
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
 800e040:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	683b      	ldr	r3, [r7, #0]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	429a      	cmp	r2, r3
 800e04c:	d017      	beq.n	800e07e <lfs_pair_cmp+0x46>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	3304      	adds	r3, #4
 800e052:	681a      	ldr	r2, [r3, #0]
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	3304      	adds	r3, #4
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d00f      	beq.n	800e07e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	681a      	ldr	r2, [r3, #0]
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	3304      	adds	r3, #4
 800e066:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800e068:	429a      	cmp	r2, r3
 800e06a:	d008      	beq.n	800e07e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	3304      	adds	r3, #4
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	683b      	ldr	r3, [r7, #0]
 800e074:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800e076:	429a      	cmp	r2, r3
 800e078:	d001      	beq.n	800e07e <lfs_pair_cmp+0x46>
 800e07a:	2301      	movs	r3, #1
 800e07c:	e000      	b.n	800e080 <lfs_pair_cmp+0x48>
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	370c      	adds	r7, #12
 800e084:	46bd      	mov	sp, r7
 800e086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08a:	4770      	bx	lr

0800e08c <lfs_pair_sync>:

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800e08c:	b480      	push	{r7}
 800e08e:	b083      	sub	sp, #12
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
 800e094:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d107      	bne.n	800e0b2 <lfs_pair_sync+0x26>
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	3304      	adds	r3, #4
 800e0a6:	681a      	ldr	r2, [r3, #0]
 800e0a8:	683b      	ldr	r3, [r7, #0]
 800e0aa:	3304      	adds	r3, #4
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	429a      	cmp	r2, r3
 800e0b0:	d00d      	beq.n	800e0ce <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681a      	ldr	r2, [r3, #0]
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	3304      	adds	r3, #4
 800e0ba:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800e0bc:	429a      	cmp	r2, r3
 800e0be:	d108      	bne.n	800e0d2 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	3304      	adds	r3, #4
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d101      	bne.n	800e0d2 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800e0ce:	2301      	movs	r3, #1
 800e0d0:	e000      	b.n	800e0d4 <lfs_pair_sync+0x48>
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	f003 0301 	and.w	r3, r3, #1
 800e0d8:	b2db      	uxtb	r3, r3
}
 800e0da:	4618      	mov	r0, r3
 800e0dc:	370c      	adds	r7, #12
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e4:	4770      	bx	lr

0800e0e6 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800e0e6:	b590      	push	{r4, r7, lr}
 800e0e8:	b083      	sub	sp, #12
 800e0ea:	af00      	add	r7, sp, #0
 800e0ec:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7ff fbe2 	bl	800d8bc <lfs_fromle32>
 800e0f8:	4602      	mov	r2, r0
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	3304      	adds	r3, #4
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	1d1c      	adds	r4, r3, #4
 800e108:	4610      	mov	r0, r2
 800e10a:	f7ff fbd7 	bl	800d8bc <lfs_fromle32>
 800e10e:	4603      	mov	r3, r0
 800e110:	6023      	str	r3, [r4, #0]
}
 800e112:	bf00      	nop
 800e114:	370c      	adds	r7, #12
 800e116:	46bd      	mov	sp, r7
 800e118:	bd90      	pop	{r4, r7, pc}

0800e11a <lfs_pair_tole32>:

static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800e11a:	b590      	push	{r4, r7, lr}
 800e11c:	b083      	sub	sp, #12
 800e11e:	af00      	add	r7, sp, #0
 800e120:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	4618      	mov	r0, r3
 800e128:	f7ff fbd3 	bl	800d8d2 <lfs_tole32>
 800e12c:	4602      	mov	r2, r0
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	3304      	adds	r3, #4
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	1d1c      	adds	r4, r3, #4
 800e13c:	4610      	mov	r0, r2
 800e13e:	f7ff fbc8 	bl	800d8d2 <lfs_tole32>
 800e142:	4603      	mov	r3, r0
 800e144:	6023      	str	r3, [r4, #0]
}
 800e146:	bf00      	nop
 800e148:	370c      	adds	r7, #12
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd90      	pop	{r4, r7, pc}

0800e14e <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800e14e:	b480      	push	{r7}
 800e150:	b083      	sub	sp, #12
 800e152:	af00      	add	r7, sp, #0
 800e154:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	43db      	mvns	r3, r3
 800e15a:	0fdb      	lsrs	r3, r3, #31
 800e15c:	b2db      	uxtb	r3, r3
}
 800e15e:	4618      	mov	r0, r3
 800e160:	370c      	adds	r7, #12
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr

0800e16a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800e16a:	b480      	push	{r7}
 800e16c:	b083      	sub	sp, #12
 800e16e:	af00      	add	r7, sp, #0
 800e170:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	059b      	lsls	r3, r3, #22
 800e176:	159b      	asrs	r3, r3, #22
 800e178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e17c:	bf0c      	ite	eq
 800e17e:	2301      	moveq	r3, #1
 800e180:	2300      	movne	r3, #0
 800e182:	b2db      	uxtb	r3, r3
}
 800e184:	4618      	mov	r0, r3
 800e186:	370c      	adds	r7, #12
 800e188:	46bd      	mov	sp, r7
 800e18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18e:	4770      	bx	lr

0800e190 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	0d1b      	lsrs	r3, r3, #20
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e1a2:	b29b      	uxth	r3, r3
}
 800e1a4:	4618      	mov	r0, r3
 800e1a6:	370c      	adds	r7, #12
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ae:	4770      	bx	lr

0800e1b0 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	0d1b      	lsrs	r3, r3, #20
 800e1bc:	b29b      	uxth	r3, r3
 800e1be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800e1c2:	b29b      	uxth	r3, r3
}
 800e1c4:	4618      	mov	r0, r3
 800e1c6:	370c      	adds	r7, #12
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800e1d0:	b480      	push	{r7}
 800e1d2:	b083      	sub	sp, #12
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	0d1b      	lsrs	r3, r3, #20
 800e1dc:	b2db      	uxtb	r3, r3
}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	370c      	adds	r7, #12
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e8:	4770      	bx	lr

0800e1ea <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800e1ea:	b580      	push	{r7, lr}
 800e1ec:	b082      	sub	sp, #8
 800e1ee:	af00      	add	r7, sp, #0
 800e1f0:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f7ff ffec 	bl	800e1d0 <lfs_tag_chunk>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	b25b      	sxtb	r3, r3
}
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}

0800e204 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
 800e20a:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	0a9b      	lsrs	r3, r3, #10
 800e210:	b29b      	uxth	r3, r3
 800e212:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e216:	b29b      	uxth	r3, r3
}
 800e218:	4618      	mov	r0, r3
 800e21a:	370c      	adds	r7, #12
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800e232:	4618      	mov	r0, r3
 800e234:	370c      	adds	r7, #12
 800e236:	46bd      	mov	sp, r7
 800e238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23c:	4770      	bx	lr

0800e23e <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800e23e:	b580      	push	{r7, lr}
 800e240:	b082      	sub	sp, #8
 800e242:	af00      	add	r7, sp, #0
 800e244:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7ff ff8f 	bl	800e16a <lfs_tag_isdelete>
 800e24c:	4603      	mov	r3, r0
 800e24e:	461a      	mov	r2, r3
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	4413      	add	r3, r2
 800e254:	4618      	mov	r0, r3
 800e256:	f7ff ffe5 	bl	800e224 <lfs_tag_size>
 800e25a:	4603      	mov	r3, r0
 800e25c:	3304      	adds	r3, #4
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800e266:	b480      	push	{r7}
 800e268:	b085      	sub	sp, #20
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800e270:	2300      	movs	r3, #0
 800e272:	60fb      	str	r3, [r7, #12]
 800e274:	e012      	b.n	800e29c <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	687a      	ldr	r2, [r7, #4]
 800e27c:	4413      	add	r3, r2
 800e27e:	6819      	ldr	r1, [r3, #0]
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	683a      	ldr	r2, [r7, #0]
 800e286:	4413      	add	r3, r2
 800e288:	681a      	ldr	r2, [r3, #0]
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	4403      	add	r3, r0
 800e292:	404a      	eors	r2, r1
 800e294:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	3301      	adds	r3, #1
 800e29a:	60fb      	str	r3, [r7, #12]
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	2b02      	cmp	r3, #2
 800e2a0:	dde9      	ble.n	800e276 <lfs_gstate_xor+0x10>
    }
}
 800e2a2:	bf00      	nop
 800e2a4:	bf00      	nop
 800e2a6:	3714      	adds	r7, #20
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ae:	4770      	bx	lr

0800e2b0 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800e2b0:	b480      	push	{r7}
 800e2b2:	b085      	sub	sp, #20
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	60fb      	str	r3, [r7, #12]
 800e2bc:	e00b      	b.n	800e2d6 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	009b      	lsls	r3, r3, #2
 800e2c2:	687a      	ldr	r2, [r7, #4]
 800e2c4:	4413      	add	r3, r2
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d001      	beq.n	800e2d0 <lfs_gstate_iszero+0x20>
            return false;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	e006      	b.n	800e2de <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	60fb      	str	r3, [r7, #12]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	2b02      	cmp	r3, #2
 800e2da:	ddf0      	ble.n	800e2be <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800e2dc:	2301      	movs	r3, #1
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3714      	adds	r7, #20
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr

0800e2ea <lfs_gstate_hasorphans>:

static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800e2ea:	b580      	push	{r7, lr}
 800e2ec:	b082      	sub	sp, #8
 800e2ee:	af00      	add	r7, sp, #0
 800e2f0:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7ff ff94 	bl	800e224 <lfs_tag_size>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	bf14      	ite	ne
 800e302:	2301      	movne	r3, #1
 800e304:	2300      	moveq	r3, #0
 800e306:	b2db      	uxtb	r3, r3
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800e310:	b580      	push	{r7, lr}
 800e312:	b082      	sub	sp, #8
 800e314:	af00      	add	r7, sp, #0
 800e316:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7ff ff81 	bl	800e224 <lfs_tag_size>
 800e322:	4603      	mov	r3, r0
 800e324:	b2db      	uxtb	r3, r3
}
 800e326:	4618      	mov	r0, r3
 800e328:	3708      	adds	r7, #8
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}

0800e32e <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800e32e:	b580      	push	{r7, lr}
 800e330:	b082      	sub	sp, #8
 800e332:	af00      	add	r7, sp, #0
 800e334:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7ff ff28 	bl	800e190 <lfs_tag_type1>
 800e340:	4603      	mov	r3, r0
 800e342:	2b00      	cmp	r3, #0
 800e344:	bf14      	ite	ne
 800e346:	2301      	movne	r3, #1
 800e348:	2300      	moveq	r3, #0
 800e34a:	b2db      	uxtb	r3, r3
}
 800e34c:	4618      	mov	r0, r3
 800e34e:	3708      	adds	r7, #8
 800e350:	46bd      	mov	sp, r7
 800e352:	bd80      	pop	{r7, pc}

0800e354 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800e354:	b580      	push	{r7, lr}
 800e356:	b082      	sub	sp, #8
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
 800e35c:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	4618      	mov	r0, r3
 800e364:	f7ff ff14 	bl	800e190 <lfs_tag_type1>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d00a      	beq.n	800e384 <lfs_gstate_hasmovehere+0x30>
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	3304      	adds	r3, #4
 800e372:	6839      	ldr	r1, [r7, #0]
 800e374:	4618      	mov	r0, r3
 800e376:	f7ff fe5f 	bl	800e038 <lfs_pair_cmp>
 800e37a:	4603      	mov	r3, r0
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d101      	bne.n	800e384 <lfs_gstate_hasmovehere+0x30>
 800e380:	2301      	movs	r3, #1
 800e382:	e000      	b.n	800e386 <lfs_gstate_hasmovehere+0x32>
 800e384:	2300      	movs	r3, #0
 800e386:	f003 0301 	and.w	r3, r3, #1
 800e38a:	b2db      	uxtb	r3, r3
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3708      	adds	r7, #8
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f7ff fa8b 	bl	800d8bc <lfs_fromle32>
 800e3a6:	4602      	mov	r2, r0
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	685b      	ldr	r3, [r3, #4]
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7ff fa83 	bl	800d8bc <lfs_fromle32>
 800e3b6:	4602      	mov	r2, r0
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	689b      	ldr	r3, [r3, #8]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f7ff fa7b 	bl	800d8bc <lfs_fromle32>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	609a      	str	r2, [r3, #8]
}
 800e3cc:	bf00      	nop
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <lfs_gstate_tole32>:

static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4618      	mov	r0, r3
 800e3e2:	f7ff fa76 	bl	800d8d2 <lfs_tole32>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	4618      	mov	r0, r3
 800e3f2:	f7ff fa6e 	bl	800d8d2 <lfs_tole32>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	689b      	ldr	r3, [r3, #8]
 800e400:	4618      	mov	r0, r3
 800e402:	f7ff fa66 	bl	800d8d2 <lfs_tole32>
 800e406:	4602      	mov	r2, r0
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	609a      	str	r2, [r3, #8]
}
 800e40c:	bf00      	nop
 800e40e:	3708      	adds	r7, #8
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <lfs_ctz_fromle32>:

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	4618      	mov	r0, r3
 800e422:	f7ff fa4b 	bl	800d8bc <lfs_fromle32>
 800e426:	4602      	mov	r2, r0
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	4618      	mov	r0, r3
 800e432:	f7ff fa43 	bl	800d8bc <lfs_fromle32>
 800e436:	4602      	mov	r2, r0
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	605a      	str	r2, [r3, #4]
}
 800e43c:	bf00      	nop
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	4618      	mov	r0, r3
 800e452:	f7ff fa3e 	bl	800d8d2 <lfs_tole32>
 800e456:	4602      	mov	r2, r0
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	685b      	ldr	r3, [r3, #4]
 800e460:	4618      	mov	r0, r3
 800e462:	f7ff fa36 	bl	800d8d2 <lfs_tole32>
 800e466:	4602      	mov	r2, r0
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	605a      	str	r2, [r3, #4]
}
 800e46c:	bf00      	nop
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	4618      	mov	r0, r3
 800e482:	f7ff fa1b 	bl	800d8bc <lfs_fromle32>
 800e486:	4602      	mov	r2, r0
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	685b      	ldr	r3, [r3, #4]
 800e490:	4618      	mov	r0, r3
 800e492:	f7ff fa13 	bl	800d8bc <lfs_fromle32>
 800e496:	4602      	mov	r2, r0
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	689b      	ldr	r3, [r3, #8]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	f7ff fa0b 	bl	800d8bc <lfs_fromle32>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	68db      	ldr	r3, [r3, #12]
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	f7ff fa03 	bl	800d8bc <lfs_fromle32>
 800e4b6:	4602      	mov	r2, r0
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	691b      	ldr	r3, [r3, #16]
 800e4c0:	4618      	mov	r0, r3
 800e4c2:	f7ff f9fb 	bl	800d8bc <lfs_fromle32>
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	695b      	ldr	r3, [r3, #20]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f7ff f9f3 	bl	800d8bc <lfs_fromle32>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	615a      	str	r2, [r3, #20]
}
 800e4dc:	bf00      	nop
 800e4de:	3708      	adds	r7, #8
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bd80      	pop	{r7, pc}

0800e4e4 <lfs_superblock_tole32>:

static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800e4e4:	b580      	push	{r7, lr}
 800e4e6:	b082      	sub	sp, #8
 800e4e8:	af00      	add	r7, sp, #0
 800e4ea:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f7ff f9ee 	bl	800d8d2 <lfs_tole32>
 800e4f6:	4602      	mov	r2, r0
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	4618      	mov	r0, r3
 800e502:	f7ff f9e6 	bl	800d8d2 <lfs_tole32>
 800e506:	4602      	mov	r2, r0
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	689b      	ldr	r3, [r3, #8]
 800e510:	4618      	mov	r0, r3
 800e512:	f7ff f9de 	bl	800d8d2 <lfs_tole32>
 800e516:	4602      	mov	r2, r0
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff f9d6 	bl	800d8d2 <lfs_tole32>
 800e526:	4602      	mov	r2, r0
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	691b      	ldr	r3, [r3, #16]
 800e530:	4618      	mov	r0, r3
 800e532:	f7ff f9ce 	bl	800d8d2 <lfs_tole32>
 800e536:	4602      	mov	r2, r0
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	695b      	ldr	r3, [r3, #20]
 800e540:	4618      	mov	r0, r3
 800e542:	f7ff f9c6 	bl	800d8d2 <lfs_tole32>
 800e546:	4602      	mov	r2, r0
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	615a      	str	r2, [r3, #20]
}
 800e54c:	bf00      	nop
 800e54e:	3708      	adds	r7, #8
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}

0800e554 <lfs_mlist_isopen>:

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]
 800e55c:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800e55e:	1d3b      	adds	r3, r7, #4
 800e560:	60fb      	str	r3, [r7, #12]
 800e562:	e009      	b.n	800e578 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	683a      	ldr	r2, [r7, #0]
 800e56a:	429a      	cmp	r2, r3
 800e56c:	d101      	bne.n	800e572 <lfs_mlist_isopen+0x1e>
            return true;
 800e56e:	2301      	movs	r3, #1
 800e570:	e007      	b.n	800e582 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	60fb      	str	r3, [r7, #12]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d1f1      	bne.n	800e564 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800e580:	2300      	movs	r3, #0
}
 800e582:	4618      	mov	r0, r3
 800e584:	3714      	adds	r7, #20
 800e586:	46bd      	mov	sp, r7
 800e588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58c:	4770      	bx	lr

0800e58e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800e58e:	b480      	push	{r7}
 800e590:	b085      	sub	sp, #20
 800e592:	af00      	add	r7, sp, #0
 800e594:	6078      	str	r0, [r7, #4]
 800e596:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	3328      	adds	r3, #40	; 0x28
 800e59c:	60fb      	str	r3, [r7, #12]
 800e59e:	e00d      	b.n	800e5bc <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	683a      	ldr	r2, [r7, #0]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d105      	bne.n	800e5b6 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	681b      	ldr	r3, [r3, #0]
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	601a      	str	r2, [r3, #0]
            break;
 800e5b4:	e007      	b.n	800e5c6 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	60fb      	str	r3, [r7, #12]
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1ed      	bne.n	800e5a0 <lfs_mlist_remove+0x12>
        }
    }
}
 800e5c4:	bf00      	nop
 800e5c6:	bf00      	nop
 800e5c8:	3714      	adds	r7, #20
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr

0800e5d2 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800e5d2:	b480      	push	{r7}
 800e5d4:	b083      	sub	sp, #12
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
 800e5da:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	683a      	ldr	r2, [r7, #0]
 800e5e8:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e5ea:	bf00      	nop
 800e5ec:	370c      	adds	r7, #12
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800e5f6:	b480      	push	{r7}
 800e5f8:	b085      	sub	sp, #20
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e608:	683a      	ldr	r2, [r7, #0]
 800e60a:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e610:	6a1b      	ldr	r3, [r3, #32]
 800e612:	4413      	add	r3, r2
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e618:	6a12      	ldr	r2, [r2, #32]
    lfs_block_t off = ((block - lfs->free.off)
 800e61a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e61e:	fb01 f202 	mul.w	r2, r1, r2
 800e622:	1a9b      	subs	r3, r3, r2
 800e624:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e62a:	68ba      	ldr	r2, [r7, #8]
 800e62c:	429a      	cmp	r2, r3
 800e62e:	d212      	bcs.n	800e656 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	095b      	lsrs	r3, r3, #5
 800e638:	009a      	lsls	r2, r3, #2
 800e63a:	440a      	add	r2, r1
 800e63c:	6811      	ldr	r1, [r2, #0]
 800e63e:	68ba      	ldr	r2, [r7, #8]
 800e640:	f002 021f 	and.w	r2, r2, #31
 800e644:	2001      	movs	r0, #1
 800e646:	fa00 f202 	lsl.w	r2, r0, r2
 800e64a:	68f8      	ldr	r0, [r7, #12]
 800e64c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	4403      	add	r3, r0
 800e652:	430a      	orrs	r2, r1
 800e654:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800e656:	2300      	movs	r3, #0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3714      	adds	r7, #20
 800e65c:	46bd      	mov	sp, r7
 800e65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e662:	4770      	bx	lr

0800e664 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 800e664:	b480      	push	{r7}
 800e666:	b083      	sub	sp, #12
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e670:	6a1a      	ldr	r2, [r3, #32]
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	661a      	str	r2, [r3, #96]	; 0x60
}
 800e676:	bf00      	nop
 800e678:	370c      	adds	r7, #12
 800e67a:	46bd      	mov	sp, r7
 800e67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e680:	4770      	bx	lr

0800e682 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800e682:	b580      	push	{r7, lr}
 800e684:	b082      	sub	sp, #8
 800e686:	af00      	add	r7, sp, #0
 800e688:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	2200      	movs	r2, #0
 800e68e:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2200      	movs	r2, #0
 800e694:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800e696:	6878      	ldr	r0, [r7, #4]
 800e698:	f7ff ffe4 	bl	800e664 <lfs_alloc_ack>
}
 800e69c:	bf00      	nop
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b086      	sub	sp, #24
 800e6a8:	af02      	add	r7, sp, #8
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 800e6ae:	e04f      	b.n	800e750 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6b4:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6ba:	1c5a      	adds	r2, r3, #1
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6c4:	1e5a      	subs	r2, r3, #1
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	095b      	lsrs	r3, r3, #5
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	4413      	add	r3, r2
 800e6d6:	681a      	ldr	r2, [r3, #0]
 800e6d8:	68bb      	ldr	r3, [r7, #8]
 800e6da:	f003 031f 	and.w	r3, r3, #31
 800e6de:	2101      	movs	r1, #1
 800e6e0:	fa01 f303 	lsl.w	r3, r1, r3
 800e6e4:	4013      	ands	r3, r2
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d132      	bne.n	800e750 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	687a      	ldr	r2, [r7, #4]
 800e6f4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e6f6:	6a12      	ldr	r2, [r2, #32]
 800e6f8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6fc:	fb01 f202 	mul.w	r2, r1, r2
 800e700:	1a9a      	subs	r2, r3, r2
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800e706:	e009      	b.n	800e71c <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e70c:	1c5a      	adds	r2, r3, #1
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e716:	1e5a      	subs	r2, r3, #1
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e724:	429a      	cmp	r2, r3
 800e726:	d011      	beq.n	800e74c <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e730:	095b      	lsrs	r3, r3, #5
 800e732:	009b      	lsls	r3, r3, #2
 800e734:	4413      	add	r3, r2
 800e736:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e73c:	f003 031f 	and.w	r3, r3, #31
 800e740:	2101      	movs	r1, #1
 800e742:	fa01 f303 	lsl.w	r3, r1, r3
 800e746:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d1dd      	bne.n	800e708 <lfs_alloc+0x64>
                }

                return 0;
 800e74c:	2300      	movs	r3, #0
 800e74e:	e050      	b.n	800e7f2 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e758:	429a      	cmp	r2, r3
 800e75a:	d1a9      	bne.n	800e6b0 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e760:	2b00      	cmp	r3, #0
 800e762:	d10f      	bne.n	800e784 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e76c:	4413      	add	r3, r2
 800e76e:	4a23      	ldr	r2, [pc, #140]	; (800e7fc <lfs_alloc+0x158>)
 800e770:	9200      	str	r2, [sp, #0]
 800e772:	f44f 720d 	mov.w	r2, #564	; 0x234
 800e776:	4922      	ldr	r1, [pc, #136]	; (800e800 <lfs_alloc+0x15c>)
 800e778:	4822      	ldr	r0, [pc, #136]	; (800e804 <lfs_alloc+0x160>)
 800e77a:	f016 fb21 	bl	8024dc0 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 800e77e:	f06f 031b 	mvn.w	r3, #27
 800e782:	e036      	b.n	800e7f2 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e78c:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e792:	6a12      	ldr	r2, [r2, #32]
 800e794:	fbb3 f1f2 	udiv	r1, r3, r2
 800e798:	fb01 f202 	mul.w	r2, r1, r2
 800e79c:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a8:	00da      	lsls	r2, r3, #3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	4610      	mov	r0, r2
 800e7b2:	f7ff f813 	bl	800d7dc <lfs_min>
 800e7b6:	4602      	mov	r2, r0
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e7ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7cc:	461a      	mov	r2, r3
 800e7ce:	2100      	movs	r1, #0
 800e7d0:	f016 fcbc 	bl	802514c <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 800e7d4:	2301      	movs	r3, #1
 800e7d6:	687a      	ldr	r2, [r7, #4]
 800e7d8:	490b      	ldr	r1, [pc, #44]	; (800e808 <lfs_alloc+0x164>)
 800e7da:	6878      	ldr	r0, [r7, #4]
 800e7dc:	f004 faf2 	bl	8012dc4 <lfs_fs_rawtraverse>
 800e7e0:	60f8      	str	r0, [r7, #12]
        if (err) {
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	f43f af62 	beq.w	800e6ae <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7ff ff49 	bl	800e682 <lfs_alloc_drop>
            return err;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800e7f2:	4618      	mov	r0, r3
 800e7f4:	3710      	adds	r7, #16
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	bd80      	pop	{r7, pc}
 800e7fa:	bf00      	nop
 800e7fc:	08029ee0 	.word	0x08029ee0
 800e800:	08029dd4 	.word	0x08029dd4
 800e804:	08029eb8 	.word	0x08029eb8
 800e808:	0800e5f7 	.word	0x0800e5f7

0800e80c <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800e80c:	b590      	push	{r4, r7, lr}
 800e80e:	b08f      	sub	sp, #60	; 0x3c
 800e810:	af04      	add	r7, sp, #16
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	607a      	str	r2, [r7, #4]
 800e818:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800e81a:	68bb      	ldr	r3, [r7, #8]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 800e820:	68bb      	ldr	r3, [r7, #8]
 800e822:	691b      	ldr	r3, [r3, #16]
 800e824:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800e826:	2300      	movs	r3, #0
 800e828:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	333c      	adds	r3, #60	; 0x3c
 800e82e:	68ba      	ldr	r2, [r7, #8]
 800e830:	4611      	mov	r1, r2
 800e832:	4618      	mov	r0, r3
 800e834:	f7ff fd8e 	bl	800e354 <lfs_gstate_hasmovehere>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	f000 80ba 	beq.w	800e9b4 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 800e840:	6878      	ldr	r0, [r7, #4]
 800e842:	f7ff fcdf 	bl	800e204 <lfs_tag_id>
 800e846:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800e848:	2b00      	cmp	r3, #0
 800e84a:	f000 80b3 	beq.w	800e9b4 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e852:	4618      	mov	r0, r3
 800e854:	f7ff fcd6 	bl	800e204 <lfs_tag_id>
 800e858:	4603      	mov	r3, r0
 800e85a:	461c      	mov	r4, r3
 800e85c:	6838      	ldr	r0, [r7, #0]
 800e85e:	f7ff fcd1 	bl	800e204 <lfs_tag_id>
 800e862:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 800e864:	429c      	cmp	r4, r3
 800e866:	f200 80a5 	bhi.w	800e9b4 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800e86a:	6a3b      	ldr	r3, [r7, #32]
 800e86c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800e870:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800e872:	e09f      	b.n	800e9b4 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	4618      	mov	r0, r3
 800e878:	f7ff fce1 	bl	800e23e <lfs_tag_dsize>
 800e87c:	4602      	mov	r2, r0
 800e87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e880:	1a9b      	subs	r3, r3, r2
 800e882:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800e888:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800e88e:	2204      	movs	r2, #4
 800e890:	9203      	str	r2, [sp, #12]
 800e892:	f107 0210 	add.w	r2, r7, #16
 800e896:	9202      	str	r2, [sp, #8]
 800e898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e89a:	9201      	str	r2, [sp, #4]
 800e89c:	9300      	str	r3, [sp, #0]
 800e89e:	2304      	movs	r3, #4
 800e8a0:	460a      	mov	r2, r1
 800e8a2:	2100      	movs	r1, #0
 800e8a4:	68f8      	ldr	r0, [r7, #12]
 800e8a6:	f7ff f875 	bl	800d994 <lfs_bd_read>
 800e8aa:	61b8      	str	r0, [r7, #24]
        if (err) {
 800e8ac:	69bb      	ldr	r3, [r7, #24]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d001      	beq.n	800e8b6 <lfs_dir_getslice+0xaa>
            return err;
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	e08a      	b.n	800e9cc <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800e8b6:	693b      	ldr	r3, [r7, #16]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7ff f816 	bl	800d8ea <lfs_frombe32>
 800e8be:	4602      	mov	r2, r0
 800e8c0:	69fb      	ldr	r3, [r7, #28]
 800e8c2:	4053      	eors	r3, r2
 800e8c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e8c8:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f7ff fc9a 	bl	800e204 <lfs_tag_id>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d02b      	beq.n	800e92e <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e8d6:	69f8      	ldr	r0, [r7, #28]
 800e8d8:	f7ff fc5a 	bl	800e190 <lfs_tag_type1>
 800e8dc:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800e8de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8e2:	d124      	bne.n	800e92e <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800e8e4:	69f8      	ldr	r0, [r7, #28]
 800e8e6:	f7ff fc8d 	bl	800e204 <lfs_tag_id>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	461c      	mov	r4, r3
 800e8ee:	6a3b      	ldr	r3, [r7, #32]
 800e8f0:	683a      	ldr	r2, [r7, #0]
 800e8f2:	1ad3      	subs	r3, r2, r3
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	f7ff fc85 	bl	800e204 <lfs_tag_id>
 800e8fa:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800e8fc:	429c      	cmp	r4, r3
 800e8fe:	d816      	bhi.n	800e92e <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800e900:	6a3b      	ldr	r3, [r7, #32]
 800e902:	683a      	ldr	r2, [r7, #0]
 800e904:	1ad2      	subs	r2, r2, r3
 800e906:	4b33      	ldr	r3, [pc, #204]	; (800e9d4 <lfs_dir_getslice+0x1c8>)
 800e908:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800e90a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e90e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e912:	69fa      	ldr	r2, [r7, #28]
 800e914:	429a      	cmp	r2, r3
 800e916:	d102      	bne.n	800e91e <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 800e918:	f06f 0301 	mvn.w	r3, #1
 800e91c:	e056      	b.n	800e9cc <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800e91e:	69f8      	ldr	r0, [r7, #28]
 800e920:	f7ff fc63 	bl	800e1ea <lfs_tag_splice>
 800e924:	4603      	mov	r3, r0
 800e926:	029a      	lsls	r2, r3, #10
 800e928:	6a3b      	ldr	r3, [r7, #32]
 800e92a:	4413      	add	r3, r2
 800e92c:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	69fb      	ldr	r3, [r7, #28]
 800e932:	401a      	ands	r2, r3
 800e934:	6a3b      	ldr	r3, [r7, #32]
 800e936:	6839      	ldr	r1, [r7, #0]
 800e938:	1ac9      	subs	r1, r1, r3
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	400b      	ands	r3, r1
 800e93e:	429a      	cmp	r2, r3
 800e940:	d138      	bne.n	800e9b4 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 800e942:	69f8      	ldr	r0, [r7, #28]
 800e944:	f7ff fc11 	bl	800e16a <lfs_tag_isdelete>
 800e948:	4603      	mov	r3, r0
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d002      	beq.n	800e954 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 800e94e:	f06f 0301 	mvn.w	r3, #1
 800e952:	e03b      	b.n	800e9cc <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800e954:	69f8      	ldr	r0, [r7, #28]
 800e956:	f7ff fc65 	bl	800e224 <lfs_tag_size>
 800e95a:	4603      	mov	r3, r0
 800e95c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e95e:	4618      	mov	r0, r3
 800e960:	f7fe ff3c 	bl	800d7dc <lfs_min>
 800e964:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800e966:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e96e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e970:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800e972:	3204      	adds	r2, #4
 800e974:	6979      	ldr	r1, [r7, #20]
 800e976:	9103      	str	r1, [sp, #12]
 800e978:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e97a:	9102      	str	r1, [sp, #8]
 800e97c:	9201      	str	r2, [sp, #4]
 800e97e:	9300      	str	r3, [sp, #0]
 800e980:	697b      	ldr	r3, [r7, #20]
 800e982:	4602      	mov	r2, r0
 800e984:	2100      	movs	r1, #0
 800e986:	68f8      	ldr	r0, [r7, #12]
 800e988:	f7ff f804 	bl	800d994 <lfs_bd_read>
 800e98c:	61b8      	str	r0, [r7, #24]
            if (err) {
 800e98e:	69bb      	ldr	r3, [r7, #24]
 800e990:	2b00      	cmp	r3, #0
 800e992:	d001      	beq.n	800e998 <lfs_dir_getslice+0x18c>
                return err;
 800e994:	69bb      	ldr	r3, [r7, #24]
 800e996:	e019      	b.n	800e9cc <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800e998:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	18d0      	adds	r0, r2, r3
 800e99e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e9a0:	697b      	ldr	r3, [r7, #20]
 800e9a2:	1ad3      	subs	r3, r2, r3
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	2100      	movs	r1, #0
 800e9a8:	f016 fbd0 	bl	802514c <memset>

            return tag + gdiff;
 800e9ac:	6a3a      	ldr	r2, [r7, #32]
 800e9ae:	69fb      	ldr	r3, [r7, #28]
 800e9b0:	4413      	add	r3, r2
 800e9b2:	e00b      	b.n	800e9cc <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	f7ff fc41 	bl	800e23e <lfs_tag_dsize>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	3304      	adds	r3, #4
 800e9c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	f4bf af56 	bcs.w	800e874 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800e9c8:	f06f 0301 	mvn.w	r3, #1
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	372c      	adds	r7, #44	; 0x2c
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd90      	pop	{r4, r7, pc}
 800e9d4:	000ffc00 	.word	0x000ffc00

0800e9d8 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800e9d8:	b580      	push	{r7, lr}
 800e9da:	b088      	sub	sp, #32
 800e9dc:	af04      	add	r7, sp, #16
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
 800e9e4:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800e9e6:	6838      	ldr	r0, [r7, #0]
 800e9e8:	f7ff fc1c 	bl	800e224 <lfs_tag_size>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	9302      	str	r3, [sp, #8]
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	9301      	str	r3, [sp, #4]
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	68b9      	ldr	r1, [r7, #8]
 800e9fe:	68f8      	ldr	r0, [r7, #12]
 800ea00:	f7ff ff04 	bl	800e80c <lfs_dir_getslice>
 800ea04:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b08c      	sub	sp, #48	; 0x30
 800ea12:	af04      	add	r7, sp, #16
 800ea14:	60f8      	str	r0, [r7, #12]
 800ea16:	60b9      	str	r1, [r7, #8]
 800ea18:	607a      	str	r2, [r7, #4]
 800ea1a:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800ea1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1e:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800ea20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea24:	441a      	add	r2, r3
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea2a:	69db      	ldr	r3, [r3, #28]
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	f240 80c0 	bls.w	800ebb2 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800ea32:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800ea36:	e0c1      	b.n	800ebbc <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800ea38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea3a:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	d03f      	beq.n	800eac2 <lfs_dir_getread+0xb4>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f113 0f02 	cmn.w	r3, #2
 800ea4a:	d13a      	bne.n	800eac2 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	685a      	ldr	r2, [r3, #4]
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800ea56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d232      	bcs.n	800eac2 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d324      	bcc.n	800eab0 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	689a      	ldr	r2, [r3, #8]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6859      	ldr	r1, [r3, #4]
 800ea6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea70:	1acb      	subs	r3, r1, r3
 800ea72:	4413      	add	r3, r2
 800ea74:	4619      	mov	r1, r3
 800ea76:	69b8      	ldr	r0, [r7, #24]
 800ea78:	f7fe feb0 	bl	800d7dc <lfs_min>
 800ea7c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	68da      	ldr	r2, [r3, #12]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ea88:	1acb      	subs	r3, r1, r3
 800ea8a:	4413      	add	r3, r2
 800ea8c:	69ba      	ldr	r2, [r7, #24]
 800ea8e:	4619      	mov	r1, r3
 800ea90:	69f8      	ldr	r0, [r7, #28]
 800ea92:	f017 fe54 	bl	802673e <memcpy>

                data += diff;
 800ea96:	69fa      	ldr	r2, [r7, #28]
 800ea98:	69bb      	ldr	r3, [r7, #24]
 800ea9a:	4413      	add	r3, r2
 800ea9c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800ea9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800eaa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eaa8:	69bb      	ldr	r3, [r7, #24]
 800eaaa:	1ad3      	subs	r3, r2, r3
 800eaac:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800eaae:	e080      	b.n	800ebb2 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	685a      	ldr	r2, [r3, #4]
 800eab4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eab6:	1ad3      	subs	r3, r2, r3
 800eab8:	4619      	mov	r1, r3
 800eaba:	69b8      	ldr	r0, [r7, #24]
 800eabc:	f7fe fe8e 	bl	800d7dc <lfs_min>
 800eac0:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f113 0f02 	cmn.w	r3, #2
 800eaca:	d13a      	bne.n	800eb42 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800eacc:	683b      	ldr	r3, [r7, #0]
 800eace:	685a      	ldr	r2, [r3, #4]
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	689b      	ldr	r3, [r3, #8]
 800ead4:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800ead6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ead8:	429a      	cmp	r2, r3
 800eada:	d232      	bcs.n	800eb42 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eae2:	429a      	cmp	r2, r3
 800eae4:	d324      	bcc.n	800eb30 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	689a      	ldr	r2, [r3, #8]
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	6859      	ldr	r1, [r3, #4]
 800eaee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eaf0:	1acb      	subs	r3, r1, r3
 800eaf2:	4413      	add	r3, r2
 800eaf4:	4619      	mov	r1, r3
 800eaf6:	69b8      	ldr	r0, [r7, #24]
 800eaf8:	f7fe fe70 	bl	800d7dc <lfs_min>
 800eafc:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800eafe:	683b      	ldr	r3, [r7, #0]
 800eb00:	68da      	ldr	r2, [r3, #12]
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	685b      	ldr	r3, [r3, #4]
 800eb06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800eb08:	1acb      	subs	r3, r1, r3
 800eb0a:	4413      	add	r3, r2
 800eb0c:	69ba      	ldr	r2, [r7, #24]
 800eb0e:	4619      	mov	r1, r3
 800eb10:	69f8      	ldr	r0, [r7, #28]
 800eb12:	f017 fe14 	bl	802673e <memcpy>

                data += diff;
 800eb16:	69fa      	ldr	r2, [r7, #28]
 800eb18:	69bb      	ldr	r3, [r7, #24]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800eb1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb20:	69bb      	ldr	r3, [r7, #24]
 800eb22:	4413      	add	r3, r2
 800eb24:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800eb26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	1ad3      	subs	r3, r2, r3
 800eb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800eb2e:	e040      	b.n	800ebb2 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	685a      	ldr	r2, [r3, #4]
 800eb34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb36:	1ad3      	subs	r3, r2, r3
 800eb38:	4619      	mov	r1, r3
 800eb3a:	69b8      	ldr	r0, [r7, #24]
 800eb3c:	f7fe fe4e 	bl	800d7dc <lfs_min>
 800eb40:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	f06f 0201 	mvn.w	r2, #1
 800eb48:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb4e:	695b      	ldr	r3, [r3, #20]
 800eb50:	4619      	mov	r1, r3
 800eb52:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800eb54:	f7fe fe52 	bl	800d7fc <lfs_aligndown>
 800eb58:	4602      	mov	r2, r0
 800eb5a:	683b      	ldr	r3, [r7, #0]
 800eb5c:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800eb5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800eb60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb62:	441a      	add	r2, r3
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb68:	695b      	ldr	r3, [r3, #20]
 800eb6a:	4619      	mov	r1, r3
 800eb6c:	4610      	mov	r0, r2
 800eb6e:	f7fe fe5a 	bl	800d826 <lfs_alignup>
 800eb72:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eb78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800eb7a:	4619      	mov	r1, r3
 800eb7c:	4610      	mov	r0, r2
 800eb7e:	f7fe fe2d 	bl	800d7dc <lfs_min>
 800eb82:	4602      	mov	r2, r0
 800eb84:	683b      	ldr	r3, [r7, #0]
 800eb86:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800eb88:	683b      	ldr	r3, [r7, #0]
 800eb8a:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800eb8c:	683a      	ldr	r2, [r7, #0]
 800eb8e:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800eb90:	6839      	ldr	r1, [r7, #0]
 800eb92:	6889      	ldr	r1, [r1, #8]
 800eb94:	9102      	str	r1, [sp, #8]
 800eb96:	9201      	str	r2, [sp, #4]
 800eb98:	9300      	str	r3, [sp, #0]
 800eb9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eb9e:	68b9      	ldr	r1, [r7, #8]
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f7ff fe33 	bl	800e80c <lfs_dir_getslice>
 800eba6:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	da01      	bge.n	800ebb2 <lfs_dir_getread+0x1a4>
            return err;
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	e004      	b.n	800ebbc <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800ebb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f47f af3f 	bne.w	800ea38 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800ebba:	2300      	movs	r3, #0
}
 800ebbc:	4618      	mov	r0, r3
 800ebbe:	3720      	adds	r7, #32
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bd80      	pop	{r7, pc}

0800ebc4 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800ebc4:	b590      	push	{r4, r7, lr}
 800ebc6:	b087      	sub	sp, #28
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	60f8      	str	r0, [r7, #12]
 800ebcc:	60b9      	str	r1, [r7, #8]
 800ebce:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800ebd4:	68bb      	ldr	r3, [r7, #8]
 800ebd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <lfs_dir_traverse_filter+0x1e>
 800ebde:	4b23      	ldr	r3, [pc, #140]	; (800ec6c <lfs_dir_traverse_filter+0xa8>)
 800ebe0:	e000      	b.n	800ebe4 <lfs_dir_traverse_filter+0x20>
 800ebe2:	4b23      	ldr	r3, [pc, #140]	; (800ec70 <lfs_dir_traverse_filter+0xac>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800ebe4:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	405a      	eors	r2, r3
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	4013      	ands	r3, r2
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d014      	beq.n	800ec20 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800ebf6:	697b      	ldr	r3, [r7, #20]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	f7ff fab5 	bl	800e16a <lfs_tag_isdelete>
 800ec00:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d10c      	bne.n	800ec20 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	4a18      	ldr	r2, [pc, #96]	; (800ec6c <lfs_dir_traverse_filter+0xa8>)
 800ec0a:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	6819      	ldr	r1, [r3, #0]
 800ec10:	4b18      	ldr	r3, [pc, #96]	; (800ec74 <lfs_dir_traverse_filter+0xb0>)
 800ec12:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800ec14:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800ec18:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800ec1c:	429a      	cmp	r2, r3
 800ec1e:	d101      	bne.n	800ec24 <lfs_dir_traverse_filter+0x60>
        return true;
 800ec20:	2301      	movs	r3, #1
 800ec22:	e01e      	b.n	800ec62 <lfs_dir_traverse_filter+0x9e>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800ec24:	68b8      	ldr	r0, [r7, #8]
 800ec26:	f7ff fab3 	bl	800e190 <lfs_tag_type1>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ec30:	d116      	bne.n	800ec60 <lfs_dir_traverse_filter+0x9c>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800ec32:	68b8      	ldr	r0, [r7, #8]
 800ec34:	f7ff fae6 	bl	800e204 <lfs_tag_id>
 800ec38:	4603      	mov	r3, r0
 800ec3a:	461c      	mov	r4, r3
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7ff fadf 	bl	800e204 <lfs_tag_id>
 800ec46:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800ec48:	429c      	cmp	r4, r3
 800ec4a:	d809      	bhi.n	800ec60 <lfs_dir_traverse_filter+0x9c>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800ec4c:	68b8      	ldr	r0, [r7, #8]
 800ec4e:	f7ff facc 	bl	800e1ea <lfs_tag_splice>
 800ec52:	4603      	mov	r3, r0
 800ec54:	029a      	lsls	r2, r3, #10
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	441a      	add	r2, r3
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	601a      	str	r2, [r3, #0]
    }

    return false;
 800ec60:	2300      	movs	r3, #0
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	371c      	adds	r7, #28
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd90      	pop	{r4, r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	7ffffc00 	.word	0x7ffffc00
 800ec70:	700ffc00 	.word	0x700ffc00
 800ec74:	000ffc00 	.word	0x000ffc00

0800ec78 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800ec78:	b590      	push	{r4, r7, lr}
 800ec7a:	b09d      	sub	sp, #116	; 0x74
 800ec7c:	af0a      	add	r7, sp, #40	; 0x28
 800ec7e:	60f8      	str	r0, [r7, #12]
 800ec80:	60b9      	str	r1, [r7, #8]
 800ec82:	607a      	str	r2, [r7, #4]
 800ec84:	603b      	str	r3, [r7, #0]
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800ec86:	6838      	ldr	r0, [r7, #0]
 800ec88:	f7ff fad9 	bl	800e23e <lfs_tag_dsize>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	441a      	add	r2, r3
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	429a      	cmp	r2, r3
 800ec98:	d233      	bcs.n	800ed02 <lfs_dir_traverse+0x8a>
            off += lfs_tag_dsize(ptag);
 800ec9a:	6838      	ldr	r0, [r7, #0]
 800ec9c:	f7ff facf 	bl	800e23e <lfs_tag_dsize>
 800eca0:	4602      	mov	r2, r0
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	4413      	add	r3, r2
 800eca6:	607b      	str	r3, [r7, #4]
            int err = lfs_bd_read(lfs,
 800eca8:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	681b      	ldr	r3, [r3, #0]
            int err = lfs_bd_read(lfs,
 800ecae:	2204      	movs	r2, #4
 800ecb0:	9203      	str	r2, [sp, #12]
 800ecb2:	f107 021c 	add.w	r2, r7, #28
 800ecb6:	9202      	str	r2, [sp, #8]
 800ecb8:	687a      	ldr	r2, [r7, #4]
 800ecba:	9201      	str	r2, [sp, #4]
 800ecbc:	9300      	str	r3, [sp, #0]
 800ecbe:	2304      	movs	r3, #4
 800ecc0:	460a      	mov	r2, r1
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	68f8      	ldr	r0, [r7, #12]
 800ecc6:	f7fe fe65 	bl	800d994 <lfs_bd_read>
 800ecca:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (err) {
 800eccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <lfs_dir_traverse+0x5e>
                return err;
 800ecd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecd4:	e11e      	b.n	800ef14 <lfs_dir_traverse+0x29c>
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800ecd6:	69fb      	ldr	r3, [r7, #28]
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fe fe06 	bl	800d8ea <lfs_frombe32>
 800ecde:	4602      	mov	r2, r0
 800ece0:	683b      	ldr	r3, [r7, #0]
 800ece2:	4053      	eors	r3, r2
 800ece4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ece8:	61fb      	str	r3, [r7, #28]
            disk.block = dir->pair[0];
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	617b      	str	r3, [r7, #20]
            disk.off = off+sizeof(lfs_tag_t);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	3304      	adds	r3, #4
 800ecf4:	61bb      	str	r3, [r7, #24]
            buffer = &disk;
 800ecf6:	f107 0314 	add.w	r3, r7, #20
 800ecfa:	647b      	str	r3, [r7, #68]	; 0x44
            ptag = tag;
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	603b      	str	r3, [r7, #0]
 800ed00:	e011      	b.n	800ed26 <lfs_dir_traverse+0xae>
        } else if (attrcount > 0) {
 800ed02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	dd0c      	ble.n	800ed22 <lfs_dir_traverse+0xaa>
            tag = attrs[0].tag;
 800ed08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	61fb      	str	r3, [r7, #28]
            buffer = attrs[0].buffer;
 800ed0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed10:	685b      	ldr	r3, [r3, #4]
 800ed12:	647b      	str	r3, [r7, #68]	; 0x44
            attrs += 1;
 800ed14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed16:	3308      	adds	r3, #8
 800ed18:	65bb      	str	r3, [r7, #88]	; 0x58
            attrcount -= 1;
 800ed1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed20:	e001      	b.n	800ed26 <lfs_dir_traverse+0xae>
        } else {
            return 0;
 800ed22:	2300      	movs	r3, #0
 800ed24:	e0f6      	b.n	800ef14 <lfs_dir_traverse+0x29c>
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800ed26:	4b7d      	ldr	r3, [pc, #500]	; (800ef1c <lfs_dir_traverse+0x2a4>)
 800ed28:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800ed2a:	69fa      	ldr	r2, [r7, #28]
 800ed2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ed2e:	405a      	eors	r2, r3
 800ed30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ed32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ed34:	400b      	ands	r3, r1
 800ed36:	4013      	ands	r3, r2
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	f040 80e5 	bne.w	800ef08 <lfs_dir_traverse+0x290>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
 800ed3e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800ed40:	f7ff fa60 	bl	800e204 <lfs_tag_id>
 800ed44:	4603      	mov	r3, r0
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d038      	beq.n	800edbc <lfs_dir_traverse+0x144>
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
 800ed4a:	f107 031c 	add.w	r3, r7, #28
 800ed4e:	9308      	str	r3, [sp, #32]
 800ed50:	4b73      	ldr	r3, [pc, #460]	; (800ef20 <lfs_dir_traverse+0x2a8>)
 800ed52:	9307      	str	r3, [sp, #28]
 800ed54:	2300      	movs	r3, #0
 800ed56:	9306      	str	r3, [sp, #24]
 800ed58:	2300      	movs	r3, #0
 800ed5a:	9305      	str	r3, [sp, #20]
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	9304      	str	r3, [sp, #16]
 800ed60:	2300      	movs	r3, #0
 800ed62:	9303      	str	r3, [sp, #12]
 800ed64:	2300      	movs	r3, #0
 800ed66:	9302      	str	r3, [sp, #8]
 800ed68:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed6a:	9301      	str	r3, [sp, #4]
 800ed6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed6e:	9300      	str	r3, [sp, #0]
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	68b9      	ldr	r1, [r7, #8]
 800ed76:	68f8      	ldr	r0, [r7, #12]
 800ed78:	f7ff ff7e 	bl	800ec78 <lfs_dir_traverse>
 800ed7c:	6378      	str	r0, [r7, #52]	; 0x34
                    dir, off, ptag, attrs, attrcount,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
 800ed7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	da01      	bge.n	800ed88 <lfs_dir_traverse+0x110>
                return filter;
 800ed84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed86:	e0c5      	b.n	800ef14 <lfs_dir_traverse+0x29c>
            }

            if (filter) {
 800ed88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	f040 80be 	bne.w	800ef0c <lfs_dir_traverse+0x294>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	4618      	mov	r0, r3
 800ed94:	f7ff fa36 	bl	800e204 <lfs_tag_id>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800eda0:	4293      	cmp	r3, r2
 800eda2:	f200 80b5 	bhi.w	800ef10 <lfs_dir_traverse+0x298>
 800eda6:	69fb      	ldr	r3, [r7, #28]
 800eda8:	4618      	mov	r0, r3
 800edaa:	f7ff fa2b 	bl	800e204 <lfs_tag_id>
 800edae:	4603      	mov	r3, r0
 800edb0:	461a      	mov	r2, r3
 800edb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800edb6:	4293      	cmp	r3, r2
 800edb8:	f240 80aa 	bls.w	800ef10 <lfs_dir_traverse+0x298>
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800edbc:	69fb      	ldr	r3, [r7, #28]
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7ff f9f6 	bl	800e1b0 <lfs_tag_type3>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	f43f af5d 	beq.w	800ec86 <lfs_dir_traverse+0xe>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800edcc:	69fb      	ldr	r3, [r7, #28]
 800edce:	4618      	mov	r0, r3
 800edd0:	f7ff f9ee 	bl	800e1b0 <lfs_tag_type3>
 800edd4:	4603      	mov	r3, r0
 800edd6:	461a      	mov	r2, r3
 800edd8:	f240 1301 	movw	r3, #257	; 0x101
 800eddc:	429a      	cmp	r2, r3
 800edde:	d136      	bne.n	800ee4e <lfs_dir_traverse+0x1d6>
            uint16_t fromid = lfs_tag_size(tag);
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	4618      	mov	r0, r3
 800ede4:	f7ff fa1e 	bl	800e224 <lfs_tag_size>
 800ede8:	4603      	mov	r3, r0
 800edea:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t toid = lfs_tag_id(tag);
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	4618      	mov	r0, r3
 800edf0:	f7ff fa08 	bl	800e204 <lfs_tag_id>
 800edf4:	4603      	mov	r3, r0
 800edf6:	84bb      	strh	r3, [r7, #36]	; 0x24
            int err = lfs_dir_traverse(lfs,
 800edf8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800edfa:	3301      	adds	r3, #1
 800edfc:	b29b      	uxth	r3, r3
                    buffer, 0, 0xffffffff, NULL, 0,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
 800edfe:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800ee00:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ee02:	1a8a      	subs	r2, r1, r2
 800ee04:	b291      	uxth	r1, r2
 800ee06:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800ee0a:	440a      	add	r2, r1
 800ee0c:	b292      	uxth	r2, r2
            int err = lfs_dir_traverse(lfs,
 800ee0e:	b212      	sxth	r2, r2
 800ee10:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800ee12:	9108      	str	r1, [sp, #32]
 800ee14:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800ee16:	9107      	str	r1, [sp, #28]
 800ee18:	9206      	str	r2, [sp, #24]
 800ee1a:	9305      	str	r3, [sp, #20]
 800ee1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ee1e:	9304      	str	r3, [sp, #16]
 800ee20:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800ee24:	9303      	str	r3, [sp, #12]
 800ee26:	4b3f      	ldr	r3, [pc, #252]	; (800ef24 <lfs_dir_traverse+0x2ac>)
 800ee28:	9302      	str	r3, [sp, #8]
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	9301      	str	r3, [sp, #4]
 800ee2e:	2300      	movs	r3, #0
 800ee30:	9300      	str	r3, [sp, #0]
 800ee32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee36:	2200      	movs	r2, #0
 800ee38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ee3a:	68f8      	ldr	r0, [r7, #12]
 800ee3c:	f7ff ff1c 	bl	800ec78 <lfs_dir_traverse>
 800ee40:	6238      	str	r0, [r7, #32]
                    cb, data);
            if (err) {
 800ee42:	6a3b      	ldr	r3, [r7, #32]
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	f43f af1e 	beq.w	800ec86 <lfs_dir_traverse+0xe>
                return err;
 800ee4a:	6a3b      	ldr	r3, [r7, #32]
 800ee4c:	e062      	b.n	800ef14 <lfs_dir_traverse+0x29c>
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800ee4e:	69fb      	ldr	r3, [r7, #28]
 800ee50:	4618      	mov	r0, r3
 800ee52:	f7ff f9ad 	bl	800e1b0 <lfs_tag_type3>
 800ee56:	4603      	mov	r3, r0
 800ee58:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800ee5c:	d144      	bne.n	800eee8 <lfs_dir_traverse+0x270>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800ee5e:	2300      	movs	r3, #0
 800ee60:	643b      	str	r3, [r7, #64]	; 0x40
 800ee62:	e038      	b.n	800eed6 <lfs_dir_traverse+0x25e>
                const struct lfs_attr *a = buffer;
 800ee64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee66:	62fb      	str	r3, [r7, #44]	; 0x2c
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800ee68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	005b      	lsls	r3, r3, #1
 800ee6e:	4413      	add	r3, r2
 800ee70:	009b      	lsls	r3, r3, #2
 800ee72:	461a      	mov	r2, r3
 800ee74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee76:	4413      	add	r3, r2
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800ee7e:	051c      	lsls	r4, r3, #20
 800ee80:	69fb      	ldr	r3, [r7, #28]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7ff f9be 	bl	800e204 <lfs_tag_id>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800ee90:	4413      	add	r3, r2
 800ee92:	029b      	lsls	r3, r3, #10
 800ee94:	ea44 0103 	orr.w	r1, r4, r3
 800ee98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ee9a:	4613      	mov	r3, r2
 800ee9c:	005b      	lsls	r3, r3, #1
 800ee9e:	4413      	add	r3, r2
 800eea0:	009b      	lsls	r3, r3, #2
 800eea2:	461a      	mov	r2, r3
 800eea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eea6:	4413      	add	r3, r2
 800eea8:	689b      	ldr	r3, [r3, #8]
 800eeaa:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800eeac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800eeae:	4613      	mov	r3, r2
 800eeb0:	005b      	lsls	r3, r3, #1
 800eeb2:	4413      	add	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	461a      	mov	r2, r3
 800eeb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eeba:	4413      	add	r3, r2
 800eebc:	685a      	ldr	r2, [r3, #4]
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800eebe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eec0:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800eec2:	4798      	blx	r3
 800eec4:	62b8      	str	r0, [r7, #40]	; 0x28
                if (err) {
 800eec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d001      	beq.n	800eed0 <lfs_dir_traverse+0x258>
                    return err;
 800eecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eece:	e021      	b.n	800ef14 <lfs_dir_traverse+0x29c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800eed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eed2:	3301      	adds	r3, #1
 800eed4:	643b      	str	r3, [r7, #64]	; 0x40
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	4618      	mov	r0, r3
 800eeda:	f7ff f9a3 	bl	800e224 <lfs_tag_size>
 800eede:	4602      	mov	r2, r0
 800eee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eee2:	4293      	cmp	r3, r2
 800eee4:	d3be      	bcc.n	800ee64 <lfs_dir_traverse+0x1ec>
 800eee6:	e6ce      	b.n	800ec86 <lfs_dir_traverse+0xe>
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800eee8:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800eeec:	029a      	lsls	r2, r3, #10
 800eeee:	69fb      	ldr	r3, [r7, #28]
 800eef0:	18d1      	adds	r1, r2, r3
 800eef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800eef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eef6:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800eef8:	4798      	blx	r3
 800eefa:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 800eefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	f43f aec1 	beq.w	800ec86 <lfs_dir_traverse+0xe>
                return err;
 800ef04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef06:	e005      	b.n	800ef14 <lfs_dir_traverse+0x29c>
            continue;
 800ef08:	bf00      	nop
 800ef0a:	e6bc      	b.n	800ec86 <lfs_dir_traverse+0xe>
                continue;
 800ef0c:	bf00      	nop
 800ef0e:	e6ba      	b.n	800ec86 <lfs_dir_traverse+0xe>
                continue;
 800ef10:	bf00      	nop
    while (true) {
 800ef12:	e6b8      	b.n	800ec86 <lfs_dir_traverse+0xe>
            }
        }
    }
}
 800ef14:	4618      	mov	r0, r3
 800ef16:	374c      	adds	r7, #76	; 0x4c
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd90      	pop	{r4, r7, pc}
 800ef1c:	7ff00000 	.word	0x7ff00000
 800ef20:	0800ebc5 	.word	0x0800ebc5
 800ef24:	600ffc00 	.word	0x600ffc00

0800ef28 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800ef28:	b590      	push	{r4, r7, lr}
 800ef2a:	b09f      	sub	sp, #124	; 0x7c
 800ef2c:	af04      	add	r7, sp, #16
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
 800ef34:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800ef36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ef3a:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681a      	ldr	r2, [r3, #0]
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef44:	6a1b      	ldr	r3, [r3, #32]
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d207      	bcs.n	800ef5a <lfs_dir_fetchmatch+0x32>
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	3304      	adds	r3, #4
 800ef4e:	681a      	ldr	r2, [r3, #0]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef54:	6a1b      	ldr	r3, [r3, #32]
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d302      	bcc.n	800ef60 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800ef5a:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800ef5e:	e340      	b.n	800f5e2 <lfs_dir_fetchmatch+0x6ba>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800ef60:	2300      	movs	r3, #0
 800ef62:	633b      	str	r3, [r7, #48]	; 0x30
 800ef64:	2300      	movs	r3, #0
 800ef66:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 800ef68:	2300      	movs	r3, #0
 800ef6a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ef70:	e052      	b.n	800f018 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 800ef72:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800ef74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ef76:	009b      	lsls	r3, r3, #2
 800ef78:	687a      	ldr	r2, [r7, #4]
 800ef7a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800ef7c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800ef7e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800ef82:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ef84:	0092      	lsls	r2, r2, #2
 800ef86:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800ef88:	2104      	movs	r1, #4
 800ef8a:	9103      	str	r1, [sp, #12]
 800ef8c:	9202      	str	r2, [sp, #8]
 800ef8e:	2200      	movs	r2, #0
 800ef90:	9201      	str	r2, [sp, #4]
 800ef92:	9300      	str	r3, [sp, #0]
 800ef94:	2304      	movs	r3, #4
 800ef96:	4602      	mov	r2, r0
 800ef98:	2100      	movs	r1, #0
 800ef9a:	68f8      	ldr	r0, [r7, #12]
 800ef9c:	f7fe fcfa 	bl	800d994 <lfs_bd_read>
 800efa0:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 800efa2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efa4:	009b      	lsls	r3, r3, #2
 800efa6:	3368      	adds	r3, #104	; 0x68
 800efa8:	443b      	add	r3, r7
 800efaa:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800efae:	4618      	mov	r0, r3
 800efb0:	f7fe fc84 	bl	800d8bc <lfs_fromle32>
 800efb4:	4602      	mov	r2, r0
 800efb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efb8:	009b      	lsls	r3, r3, #2
 800efba:	3368      	adds	r3, #104	; 0x68
 800efbc:	443b      	add	r3, r7
 800efbe:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800efc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d005      	beq.n	800efd4 <lfs_dir_fetchmatch+0xac>
 800efc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efca:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800efce:	d001      	beq.n	800efd4 <lfs_dir_fetchmatch+0xac>
            return err;
 800efd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd2:	e306      	b.n	800f5e2 <lfs_dir_fetchmatch+0x6ba>
        }

        if (err != LFS_ERR_CORRUPT &&
 800efd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800efda:	d01a      	beq.n	800f012 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800efdc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efde:	009b      	lsls	r3, r3, #2
 800efe0:	3368      	adds	r3, #104	; 0x68
 800efe2:	443b      	add	r3, r7
 800efe4:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800efe8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800efea:	3301      	adds	r3, #1
 800efec:	2b00      	cmp	r3, #0
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	bfb8      	it	lt
 800eff4:	425b      	neglt	r3, r3
 800eff6:	009b      	lsls	r3, r3, #2
 800eff8:	3368      	adds	r3, #104	; 0x68
 800effa:	443b      	add	r3, r7
 800effc:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800f000:	4619      	mov	r1, r3
 800f002:	4610      	mov	r0, r2
 800f004:	f7fe fc4c 	bl	800d8a0 <lfs_scmp>
 800f008:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	dd01      	ble.n	800f012 <lfs_dir_fetchmatch+0xea>
            r = i;
 800f00e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f010:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800f012:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f014:	3301      	adds	r3, #1
 800f016:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f018:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f01a:	2b01      	cmp	r3, #1
 800f01c:	dda9      	ble.n	800ef72 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800f01e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f020:	2b00      	cmp	r3, #0
 800f022:	f003 0301 	and.w	r3, r3, #1
 800f026:	bfb8      	it	lt
 800f028:	425b      	neglt	r3, r3
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	687a      	ldr	r2, [r7, #4]
 800f02e:	4413      	add	r3, r2
 800f030:	681a      	ldr	r2, [r3, #0]
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800f036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f038:	3301      	adds	r3, #1
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	f003 0301 	and.w	r3, r3, #1
 800f040:	bfb8      	it	lt
 800f042:	425b      	neglt	r3, r3
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	687a      	ldr	r2, [r7, #4]
 800f048:	4413      	add	r3, r2
 800f04a:	681a      	ldr	r2, [r3, #0]
 800f04c:	68bb      	ldr	r3, [r7, #8]
 800f04e:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800f050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f052:	2b00      	cmp	r3, #0
 800f054:	f003 0301 	and.w	r3, r3, #1
 800f058:	bfb8      	it	lt
 800f05a:	425b      	neglt	r3, r3
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	3368      	adds	r3, #104	; 0x68
 800f060:	443b      	add	r3, r7
 800f062:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800f066:	68bb      	ldr	r3, [r7, #8]
 800f068:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800f06a:	68bb      	ldr	r3, [r7, #8]
 800f06c:	2200      	movs	r2, #0
 800f06e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800f070:	2300      	movs	r3, #0
 800f072:	65bb      	str	r3, [r7, #88]	; 0x58
 800f074:	e2a1      	b.n	800f5ba <lfs_dir_fetchmatch+0x692>
        lfs_off_t off = 0;
 800f076:	2300      	movs	r3, #0
 800f078:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 800f07a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f07e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 800f080:	2300      	movs	r3, #0
 800f082:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800f086:	4a96      	ldr	r2, [pc, #600]	; (800f2e0 <lfs_dir_fetchmatch+0x3b8>)
 800f088:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f08c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f090:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800f094:	2300      	movs	r3, #0
 800f096:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 800f09a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f09c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800f09e:	68bb      	ldr	r3, [r7, #8]
 800f0a0:	689b      	ldr	r3, [r3, #8]
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f7fe fc15 	bl	800d8d2 <lfs_tole32>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	3308      	adds	r3, #8
 800f0b2:	2204      	movs	r2, #4
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f0ba:	f004 fdc5 	bl	8013c48 <lfs_crc>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	689b      	ldr	r3, [r3, #8]
 800f0c6:	4618      	mov	r0, r3
 800f0c8:	f7fe fbf8 	bl	800d8bc <lfs_fromle32>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800f0d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f0d4:	f7ff f8b3 	bl	800e23e <lfs_tag_dsize>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f0dc:	4413      	add	r3, r2
 800f0de:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 800f0e0:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0e6:	69d8      	ldr	r0, [r3, #28]
            int err = lfs_bd_read(lfs,
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2204      	movs	r2, #4
 800f0ee:	9203      	str	r2, [sp, #12]
 800f0f0:	f107 0220 	add.w	r2, r7, #32
 800f0f4:	9202      	str	r2, [sp, #8]
 800f0f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f0f8:	9201      	str	r2, [sp, #4]
 800f0fa:	9300      	str	r3, [sp, #0]
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	460a      	mov	r2, r1
 800f100:	2100      	movs	r1, #0
 800f102:	68f8      	ldr	r0, [r7, #12]
 800f104:	f7fe fc46 	bl	800d994 <lfs_bd_read>
 800f108:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800f10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d009      	beq.n	800f124 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 800f110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f112:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f116:	d103      	bne.n	800f120 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 800f118:	68bb      	ldr	r3, [r7, #8]
 800f11a:	2200      	movs	r2, #0
 800f11c:	759a      	strb	r2, [r3, #22]
                    break;
 800f11e:	e1d4      	b.n	800f4ca <lfs_dir_fetchmatch+0x5a2>
                }
                return err;
 800f120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f122:	e25e      	b.n	800f5e2 <lfs_dir_fetchmatch+0x6ba>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800f124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f126:	f107 0120 	add.w	r1, r7, #32
 800f12a:	2204      	movs	r2, #4
 800f12c:	4618      	mov	r0, r3
 800f12e:	f004 fd8b 	bl	8013c48 <lfs_crc>
 800f132:	4603      	mov	r3, r0
 800f134:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 800f136:	6a3b      	ldr	r3, [r7, #32]
 800f138:	4618      	mov	r0, r3
 800f13a:	f7fe fbd6 	bl	800d8ea <lfs_frombe32>
 800f13e:	4602      	mov	r2, r0
 800f140:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f142:	4053      	eors	r3, r2
 800f144:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 800f146:	6a3b      	ldr	r3, [r7, #32]
 800f148:	4618      	mov	r0, r3
 800f14a:	f7ff f800 	bl	800e14e <lfs_tag_isvalid>
 800f14e:	4603      	mov	r3, r0
 800f150:	f083 0301 	eor.w	r3, r3, #1
 800f154:	b2db      	uxtb	r3, r3
 800f156:	2b00      	cmp	r3, #0
 800f158:	d01b      	beq.n	800f192 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800f15a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800f15c:	f7ff f818 	bl	800e190 <lfs_tag_type1>
 800f160:	4603      	mov	r3, r0
 800f162:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f166:	d10d      	bne.n	800f184 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 800f168:	68bb      	ldr	r3, [r7, #8]
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	68fa      	ldr	r2, [r7, #12]
 800f16e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800f170:	6992      	ldr	r2, [r2, #24]
 800f172:	fbb3 f1f2 	udiv	r1, r3, r2
 800f176:	fb01 f202 	mul.w	r2, r1, r2
 800f17a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d101      	bne.n	800f184 <lfs_dir_fetchmatch+0x25c>
 800f180:	2301      	movs	r3, #1
 800f182:	e000      	b.n	800f186 <lfs_dir_fetchmatch+0x25e>
 800f184:	2300      	movs	r3, #0
 800f186:	f003 0301 	and.w	r3, r3, #1
 800f18a:	b2da      	uxtb	r2, r3
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	759a      	strb	r2, [r3, #22]
                break;
 800f190:	e19b      	b.n	800f4ca <lfs_dir_fetchmatch+0x5a2>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800f192:	6a3b      	ldr	r3, [r7, #32]
 800f194:	4618      	mov	r0, r3
 800f196:	f7ff f852 	bl	800e23e <lfs_tag_dsize>
 800f19a:	4602      	mov	r2, r0
 800f19c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f19e:	441a      	add	r2, r3
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1a4:	69db      	ldr	r3, [r3, #28]
 800f1a6:	429a      	cmp	r2, r3
 800f1a8:	d903      	bls.n	800f1b2 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800f1aa:	68bb      	ldr	r3, [r7, #8]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	759a      	strb	r2, [r3, #22]
                break;
 800f1b0:	e18b      	b.n	800f4ca <lfs_dir_fetchmatch+0x5a2>
            }

            ptag = tag;
 800f1b2:	6a3b      	ldr	r3, [r7, #32]
 800f1b4:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800f1b6:	6a3b      	ldr	r3, [r7, #32]
 800f1b8:	4618      	mov	r0, r3
 800f1ba:	f7fe ffe9 	bl	800e190 <lfs_tag_type1>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800f1c4:	d164      	bne.n	800f290 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800f1c6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1cc:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f1d4:	3204      	adds	r2, #4
 800f1d6:	2104      	movs	r1, #4
 800f1d8:	9103      	str	r1, [sp, #12]
 800f1da:	f107 011c 	add.w	r1, r7, #28
 800f1de:	9102      	str	r1, [sp, #8]
 800f1e0:	9201      	str	r2, [sp, #4]
 800f1e2:	9300      	str	r3, [sp, #0]
 800f1e4:	4623      	mov	r3, r4
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	2100      	movs	r1, #0
 800f1ea:	68f8      	ldr	r0, [r7, #12]
 800f1ec:	f7fe fbd2 	bl	800d994 <lfs_bd_read>
 800f1f0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800f1f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d009      	beq.n	800f20c <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 800f1f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1fa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f1fe:	d103      	bne.n	800f208 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	2200      	movs	r2, #0
 800f204:	759a      	strb	r2, [r3, #22]
                        break;
 800f206:	e160      	b.n	800f4ca <lfs_dir_fetchmatch+0x5a2>
                    }
                    return err;
 800f208:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800f20a:	e1ea      	b.n	800f5e2 <lfs_dir_fetchmatch+0x6ba>
                }
                dcrc = lfs_fromle32(dcrc);
 800f20c:	69fb      	ldr	r3, [r7, #28]
 800f20e:	4618      	mov	r0, r3
 800f210:	f7fe fb54 	bl	800d8bc <lfs_fromle32>
 800f214:	4603      	mov	r3, r0
 800f216:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 800f218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f21a:	69fb      	ldr	r3, [r7, #28]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d003      	beq.n	800f228 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	2200      	movs	r2, #0
 800f224:	759a      	strb	r2, [r3, #22]
                    break;
 800f226:	e150      	b.n	800f4ca <lfs_dir_fetchmatch+0x5a2>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800f228:	6a3b      	ldr	r3, [r7, #32]
 800f22a:	4618      	mov	r0, r3
 800f22c:	f7fe ffd0 	bl	800e1d0 <lfs_tag_chunk>
 800f230:	4603      	mov	r3, r0
 800f232:	07db      	lsls	r3, r3, #31
 800f234:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f236:	4053      	eors	r3, r2
 800f238:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f23e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800f242:	2204      	movs	r2, #4
 800f244:	4618      	mov	r0, r3
 800f246:	f004 fcff 	bl	8013c48 <lfs_crc>
 800f24a:	4602      	mov	r2, r0
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800f250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f252:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800f254:	6a3b      	ldr	r3, [r7, #32]
 800f256:	4618      	mov	r0, r3
 800f258:	f7fe fff1 	bl	800e23e <lfs_tag_dsize>
 800f25c:	4602      	mov	r2, r0
 800f25e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f260:	441a      	add	r2, r3
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f26a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f272:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800f274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800f27a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f27c:	68bb      	ldr	r3, [r7, #8]
 800f27e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800f286:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 800f288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f28c:	627b      	str	r3, [r7, #36]	; 0x24
 800f28e:	e720      	b.n	800f0d2 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800f290:	2304      	movs	r3, #4
 800f292:	647b      	str	r3, [r7, #68]	; 0x44
 800f294:	e032      	b.n	800f2fc <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800f296:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f29c:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f2a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f2a6:	440a      	add	r2, r1
 800f2a8:	2101      	movs	r1, #1
 800f2aa:	9103      	str	r1, [sp, #12]
 800f2ac:	f107 011b 	add.w	r1, r7, #27
 800f2b0:	9102      	str	r1, [sp, #8]
 800f2b2:	9201      	str	r2, [sp, #4]
 800f2b4:	9300      	str	r3, [sp, #0]
 800f2b6:	4623      	mov	r3, r4
 800f2b8:	4602      	mov	r2, r0
 800f2ba:	2100      	movs	r1, #0
 800f2bc:	68f8      	ldr	r0, [r7, #12]
 800f2be:	f7fe fb69 	bl	800d994 <lfs_bd_read>
 800f2c2:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800f2c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00c      	beq.n	800f2e4 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 800f2ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2cc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f2d0:	d103      	bne.n	800f2da <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	759a      	strb	r2, [r3, #22]
 800f2d8:	e018      	b.n	800f30c <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 800f2da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800f2dc:	e181      	b.n	800f5e2 <lfs_dir_fetchmatch+0x6ba>
 800f2de:	bf00      	nop
 800f2e0:	08029f1c 	.word	0x08029f1c
                }

                crc = lfs_crc(crc, &dat, 1);
 800f2e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2e6:	f107 011b 	add.w	r1, r7, #27
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	f004 fcab 	bl	8013c48 <lfs_crc>
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800f2f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f2f8:	3301      	adds	r3, #1
 800f2fa:	647b      	str	r3, [r7, #68]	; 0x44
 800f2fc:	6a3b      	ldr	r3, [r7, #32]
 800f2fe:	4618      	mov	r0, r3
 800f300:	f7fe ff9d 	bl	800e23e <lfs_tag_dsize>
 800f304:	4602      	mov	r2, r0
 800f306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f308:	4293      	cmp	r3, r2
 800f30a:	d3c4      	bcc.n	800f296 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800f30c:	6a3b      	ldr	r3, [r7, #32]
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fe ff3e 	bl	800e190 <lfs_tag_type1>
 800f314:	4603      	mov	r3, r0
 800f316:	2b00      	cmp	r3, #0
 800f318:	d113      	bne.n	800f342 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800f31a:	6a3b      	ldr	r3, [r7, #32]
 800f31c:	4618      	mov	r0, r3
 800f31e:	f7fe ff71 	bl	800e204 <lfs_tag_id>
 800f322:	4603      	mov	r3, r0
 800f324:	461a      	mov	r2, r3
 800f326:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f32a:	4293      	cmp	r3, r2
 800f32c:	f200 8081 	bhi.w	800f432 <lfs_dir_fetchmatch+0x50a>
                    tempcount = lfs_tag_id(tag) + 1;
 800f330:	6a3b      	ldr	r3, [r7, #32]
 800f332:	4618      	mov	r0, r3
 800f334:	f7fe ff66 	bl	800e204 <lfs_tag_id>
 800f338:	4603      	mov	r3, r0
 800f33a:	3301      	adds	r3, #1
 800f33c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800f340:	e077      	b.n	800f432 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800f342:	6a3b      	ldr	r3, [r7, #32]
 800f344:	4618      	mov	r0, r3
 800f346:	f7fe ff23 	bl	800e190 <lfs_tag_type1>
 800f34a:	4603      	mov	r3, r0
 800f34c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f350:	d134      	bne.n	800f3bc <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800f352:	6a3b      	ldr	r3, [r7, #32]
 800f354:	4618      	mov	r0, r3
 800f356:	f7fe ff48 	bl	800e1ea <lfs_tag_splice>
 800f35a:	4603      	mov	r3, r0
 800f35c:	b29a      	uxth	r2, r3
 800f35e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f362:	4413      	add	r3, r2
 800f364:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800f368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f36a:	4ba0      	ldr	r3, [pc, #640]	; (800f5ec <lfs_dir_fetchmatch+0x6c4>)
 800f36c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800f36e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800f372:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800f376:	6a3a      	ldr	r2, [r7, #32]
 800f378:	4293      	cmp	r3, r2
 800f37a:	d104      	bne.n	800f386 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 800f37c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f37e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f382:	64bb      	str	r3, [r7, #72]	; 0x48
 800f384:	e055      	b.n	800f432 <lfs_dir_fetchmatch+0x50a>
                } else if (tempbesttag != -1 &&
 800f386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f388:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f38c:	d051      	beq.n	800f432 <lfs_dir_fetchmatch+0x50a>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800f38e:	6a3b      	ldr	r3, [r7, #32]
 800f390:	4618      	mov	r0, r3
 800f392:	f7fe ff37 	bl	800e204 <lfs_tag_id>
 800f396:	4603      	mov	r3, r0
 800f398:	461c      	mov	r4, r3
 800f39a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f39c:	4618      	mov	r0, r3
 800f39e:	f7fe ff31 	bl	800e204 <lfs_tag_id>
 800f3a2:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800f3a4:	429c      	cmp	r4, r3
 800f3a6:	d844      	bhi.n	800f432 <lfs_dir_fetchmatch+0x50a>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800f3a8:	6a3b      	ldr	r3, [r7, #32]
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7fe ff1d 	bl	800e1ea <lfs_tag_splice>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	029a      	lsls	r2, r3, #10
 800f3b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f3b6:	4413      	add	r3, r2
 800f3b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f3ba:	e03a      	b.n	800f432 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800f3bc:	6a3b      	ldr	r3, [r7, #32]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f7fe fee6 	bl	800e190 <lfs_tag_type1>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f3ca:	d132      	bne.n	800f432 <lfs_dir_fetchmatch+0x50a>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800f3cc:	6a3b      	ldr	r3, [r7, #32]
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f7fe fefe 	bl	800e1d0 <lfs_tag_chunk>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	f003 0301 	and.w	r3, r3, #1
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	bf14      	ite	ne
 800f3de:	2301      	movne	r3, #1
 800f3e0:	2300      	moveq	r3, #0
 800f3e2:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800f3e6:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f3ec:	69dc      	ldr	r4, [r3, #28]
                err = lfs_bd_read(lfs,
 800f3ee:	68bb      	ldr	r3, [r7, #8]
 800f3f0:	681b      	ldr	r3, [r3, #0]
 800f3f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f3f4:	3204      	adds	r2, #4
 800f3f6:	2108      	movs	r1, #8
 800f3f8:	9103      	str	r1, [sp, #12]
 800f3fa:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800f3fe:	9102      	str	r1, [sp, #8]
 800f400:	9201      	str	r2, [sp, #4]
 800f402:	9300      	str	r3, [sp, #0]
 800f404:	4623      	mov	r3, r4
 800f406:	4602      	mov	r2, r0
 800f408:	2100      	movs	r1, #0
 800f40a:	68f8      	ldr	r0, [r7, #12]
 800f40c:	f7fe fac2 	bl	800d994 <lfs_bd_read>
 800f410:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800f412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f414:	2b00      	cmp	r3, #0
 800f416:	d007      	beq.n	800f428 <lfs_dir_fetchmatch+0x500>
                    if (err == LFS_ERR_CORRUPT) {
 800f418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f41a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f41e:	d103      	bne.n	800f428 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	2200      	movs	r2, #0
 800f424:	759a      	strb	r2, [r3, #22]
                        break;
 800f426:	e050      	b.n	800f4ca <lfs_dir_fetchmatch+0x5a2>
                    }
                }
                lfs_pair_fromle32(temptail);
 800f428:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7fe fe5a 	bl	800e0e6 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800f432:	6a3a      	ldr	r2, [r7, #32]
 800f434:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f436:	405a      	eors	r2, r3
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	4013      	ands	r3, r2
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f47f ae48 	bne.w	800f0d2 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800f442:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800f448:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 800f44a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f44c:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800f44e:	617b      	str	r3, [r7, #20]
 800f450:	f107 0210 	add.w	r2, r7, #16
 800f454:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800f458:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800f45c:	4798      	blx	r3
 800f45e:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 800f460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f462:	2b00      	cmp	r3, #0
 800f464:	da09      	bge.n	800f47a <lfs_dir_fetchmatch+0x552>
                    if (res == LFS_ERR_CORRUPT) {
 800f466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f468:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800f46c:	d103      	bne.n	800f476 <lfs_dir_fetchmatch+0x54e>
                        dir->erased = false;
 800f46e:	68bb      	ldr	r3, [r7, #8]
 800f470:	2200      	movs	r2, #0
 800f472:	759a      	strb	r2, [r3, #22]
 800f474:	e029      	b.n	800f4ca <lfs_dir_fetchmatch+0x5a2>
                        break;
                    }
                    return res;
 800f476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800f478:	e0b3      	b.n	800f5e2 <lfs_dir_fetchmatch+0x6ba>
                }

                if (res == LFS_CMP_EQ) {
 800f47a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d102      	bne.n	800f486 <lfs_dir_fetchmatch+0x55e>
                    // found a match
                    tempbesttag = tag;
 800f480:	6a3b      	ldr	r3, [r7, #32]
 800f482:	64bb      	str	r3, [r7, #72]	; 0x48
 800f484:	e625      	b.n	800f0d2 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800f486:	6a3a      	ldr	r2, [r7, #32]
 800f488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f48a:	405a      	eors	r2, r3
 800f48c:	4b58      	ldr	r3, [pc, #352]	; (800f5f0 <lfs_dir_fetchmatch+0x6c8>)
 800f48e:	4013      	ands	r3, r2
 800f490:	2b00      	cmp	r3, #0
 800f492:	d103      	bne.n	800f49c <lfs_dir_fetchmatch+0x574>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800f494:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f498:	64bb      	str	r3, [r7, #72]	; 0x48
 800f49a:	e61a      	b.n	800f0d2 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 800f49c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f49e:	2b02      	cmp	r3, #2
 800f4a0:	f47f ae17 	bne.w	800f0d2 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800f4a4:	6a3b      	ldr	r3, [r7, #32]
 800f4a6:	4618      	mov	r0, r3
 800f4a8:	f7fe feac 	bl	800e204 <lfs_tag_id>
 800f4ac:	4603      	mov	r3, r0
 800f4ae:	461c      	mov	r4, r3
 800f4b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fe fea6 	bl	800e204 <lfs_tag_id>
 800f4b8:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800f4ba:	429c      	cmp	r4, r3
 800f4bc:	f63f ae09 	bhi.w	800f0d2 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800f4c0:	6a3b      	ldr	r3, [r7, #32]
 800f4c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f4c6:	64bb      	str	r3, [r7, #72]	; 0x48
 800f4c8:	e603      	b.n	800f0d2 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 800f4ca:	68bb      	ldr	r3, [r7, #8]
 800f4cc:	68db      	ldr	r3, [r3, #12]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d100      	bne.n	800f4d4 <lfs_dir_fetchmatch+0x5ac>
 800f4d2:	e05d      	b.n	800f590 <lfs_dir_fetchmatch+0x668>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	333c      	adds	r3, #60	; 0x3c
 800f4d8:	68ba      	ldr	r2, [r7, #8]
 800f4da:	4611      	mov	r1, r2
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7fe ff39 	bl	800e354 <lfs_gstate_hasmovehere>
 800f4e2:	4603      	mov	r3, r0
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d028      	beq.n	800f53a <lfs_dir_fetchmatch+0x612>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	f7fe fe89 	bl	800e204 <lfs_tag_id>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	461c      	mov	r4, r3
 800f4f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f4f8:	4618      	mov	r0, r3
 800f4fa:	f7fe fe83 	bl	800e204 <lfs_tag_id>
 800f4fe:	4603      	mov	r3, r0
 800f500:	429c      	cmp	r4, r3
 800f502:	d104      	bne.n	800f50e <lfs_dir_fetchmatch+0x5e6>
                    besttag |= 0x80000000;
 800f504:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f506:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f50a:	667b      	str	r3, [r7, #100]	; 0x64
 800f50c:	e015      	b.n	800f53a <lfs_dir_fetchmatch+0x612>
                } else if (besttag != -1 &&
 800f50e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f514:	d011      	beq.n	800f53a <lfs_dir_fetchmatch+0x612>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f51a:	4618      	mov	r0, r3
 800f51c:	f7fe fe72 	bl	800e204 <lfs_tag_id>
 800f520:	4603      	mov	r3, r0
 800f522:	461c      	mov	r4, r3
 800f524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f526:	4618      	mov	r0, r3
 800f528:	f7fe fe6c 	bl	800e204 <lfs_tag_id>
 800f52c:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 800f52e:	429c      	cmp	r4, r3
 800f530:	d203      	bcs.n	800f53a <lfs_dir_fetchmatch+0x612>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800f532:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f534:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800f538:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 800f53a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d00f      	beq.n	800f560 <lfs_dir_fetchmatch+0x638>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800f540:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f542:	4618      	mov	r0, r3
 800f544:	f7fe fe5e 	bl	800e204 <lfs_tag_id>
 800f548:	4603      	mov	r3, r0
 800f54a:	461a      	mov	r2, r3
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	8a9b      	ldrh	r3, [r3, #20]
 800f550:	4619      	mov	r1, r3
 800f552:	4610      	mov	r0, r2
 800f554:	f7fe f942 	bl	800d7dc <lfs_min>
 800f558:	4603      	mov	r3, r0
 800f55a:	b29a      	uxth	r2, r3
 800f55c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f55e:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 800f560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f562:	4618      	mov	r0, r3
 800f564:	f7fe fdf3 	bl	800e14e <lfs_tag_isvalid>
 800f568:	4603      	mov	r3, r0
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d001      	beq.n	800f572 <lfs_dir_fetchmatch+0x64a>
                return besttag;
 800f56e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f570:	e037      	b.n	800f5e2 <lfs_dir_fetchmatch+0x6ba>
            } else if (lfs_tag_id(besttag) < dir->count) {
 800f572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f574:	4618      	mov	r0, r3
 800f576:	f7fe fe45 	bl	800e204 <lfs_tag_id>
 800f57a:	4603      	mov	r3, r0
 800f57c:	461a      	mov	r2, r3
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	8a9b      	ldrh	r3, [r3, #20]
 800f582:	429a      	cmp	r2, r3
 800f584:	d202      	bcs.n	800f58c <lfs_dir_fetchmatch+0x664>
                return LFS_ERR_NOENT;
 800f586:	f06f 0301 	mvn.w	r3, #1
 800f58a:	e02a      	b.n	800f5e2 <lfs_dir_fetchmatch+0x6ba>
            } else {
                return 0;
 800f58c:	2300      	movs	r3, #0
 800f58e:	e028      	b.n	800f5e2 <lfs_dir_fetchmatch+0x6ba>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 800f590:	68bb      	ldr	r3, [r7, #8]
 800f592:	4618      	mov	r0, r3
 800f594:	f7fe fd20 	bl	800dfd8 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 800f598:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f59a:	3301      	adds	r3, #1
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	f003 0301 	and.w	r3, r3, #1
 800f5a2:	bfb8      	it	lt
 800f5a4:	425b      	neglt	r3, r3
 800f5a6:	009b      	lsls	r3, r3, #2
 800f5a8:	3368      	adds	r3, #104	; 0x68
 800f5aa:	443b      	add	r3, r7
 800f5ac:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800f5b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5b6:	3301      	adds	r3, #1
 800f5b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f5bc:	2b01      	cmp	r3, #1
 800f5be:	f77f ad5a 	ble.w	800f076 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800f5c2:	68bb      	ldr	r3, [r7, #8]
 800f5c4:	681a      	ldr	r2, [r3, #0]
 800f5c6:	68bb      	ldr	r3, [r7, #8]
 800f5c8:	685b      	ldr	r3, [r3, #4]
 800f5ca:	490a      	ldr	r1, [pc, #40]	; (800f5f4 <lfs_dir_fetchmatch+0x6cc>)
 800f5cc:	9101      	str	r1, [sp, #4]
 800f5ce:	9300      	str	r3, [sp, #0]
 800f5d0:	4613      	mov	r3, r2
 800f5d2:	f240 4232 	movw	r2, #1074	; 0x432
 800f5d6:	4908      	ldr	r1, [pc, #32]	; (800f5f8 <lfs_dir_fetchmatch+0x6d0>)
 800f5d8:	4808      	ldr	r0, [pc, #32]	; (800f5fc <lfs_dir_fetchmatch+0x6d4>)
 800f5da:	f015 fbf1 	bl	8024dc0 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800f5de:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	376c      	adds	r7, #108	; 0x6c
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd90      	pop	{r4, r7, pc}
 800f5ea:	bf00      	nop
 800f5ec:	000ffc00 	.word	0x000ffc00
 800f5f0:	7ffffc00 	.word	0x7ffffc00
 800f5f4:	08029ee0 	.word	0x08029ee0
 800f5f8:	08029dd4 	.word	0x08029dd4
 800f5fc:	08029ee4 	.word	0x08029ee4

0800f600 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800f600:	b580      	push	{r7, lr}
 800f602:	b088      	sub	sp, #32
 800f604:	af04      	add	r7, sp, #16
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800f60c:	2300      	movs	r3, #0
 800f60e:	9303      	str	r3, [sp, #12]
 800f610:	2300      	movs	r3, #0
 800f612:	9302      	str	r3, [sp, #8]
 800f614:	2300      	movs	r3, #0
 800f616:	9301      	str	r3, [sp, #4]
 800f618:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f61c:	9300      	str	r3, [sp, #0]
 800f61e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	68b9      	ldr	r1, [r7, #8]
 800f626:	68f8      	ldr	r0, [r7, #12]
 800f628:	f7ff fc7e 	bl	800ef28 <lfs_dir_fetchmatch>
 800f62c:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800f62e:	4618      	mov	r0, r3
 800f630:	3710      	adds	r7, #16
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
	...

0800f638 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800f638:	b580      	push	{r7, lr}
 800f63a:	b08a      	sub	sp, #40	; 0x28
 800f63c:	af02      	add	r7, sp, #8
 800f63e:	60f8      	str	r0, [r7, #12]
 800f640:	60b9      	str	r1, [r7, #8]
 800f642:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800f644:	f107 0310 	add.w	r3, r7, #16
 800f648:	9300      	str	r3, [sp, #0]
 800f64a:	4b12      	ldr	r3, [pc, #72]	; (800f694 <lfs_dir_getgstate+0x5c>)
 800f64c:	4a12      	ldr	r2, [pc, #72]	; (800f698 <lfs_dir_getgstate+0x60>)
 800f64e:	68b9      	ldr	r1, [r7, #8]
 800f650:	68f8      	ldr	r0, [r7, #12]
 800f652:	f7ff f9c1 	bl	800e9d8 <lfs_dir_get>
 800f656:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800f658:	69fb      	ldr	r3, [r7, #28]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	da05      	bge.n	800f66a <lfs_dir_getgstate+0x32>
 800f65e:	69fb      	ldr	r3, [r7, #28]
 800f660:	f113 0f02 	cmn.w	r3, #2
 800f664:	d001      	beq.n	800f66a <lfs_dir_getgstate+0x32>
        return res;
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	e00f      	b.n	800f68a <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800f66a:	69fb      	ldr	r3, [r7, #28]
 800f66c:	f113 0f02 	cmn.w	r3, #2
 800f670:	d00a      	beq.n	800f688 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800f672:	f107 0310 	add.w	r3, r7, #16
 800f676:	4618      	mov	r0, r3
 800f678:	f7fe fe8c 	bl	800e394 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800f67c:	f107 0310 	add.w	r3, r7, #16
 800f680:	4619      	mov	r1, r3
 800f682:	6878      	ldr	r0, [r7, #4]
 800f684:	f7fe fdef 	bl	800e266 <lfs_gstate_xor>
    }

    return 0;
 800f688:	2300      	movs	r3, #0
}
 800f68a:	4618      	mov	r0, r3
 800f68c:	3720      	adds	r7, #32
 800f68e:	46bd      	mov	sp, r7
 800f690:	bd80      	pop	{r7, pc}
 800f692:	bf00      	nop
 800f694:	7ff0000c 	.word	0x7ff0000c
 800f698:	7ff00000 	.word	0x7ff00000

0800f69c <lfs_dir_getinfo>:

static int lfs_dir_getinfo(lfs_t *lfs, lfs_mdir_t *dir,
        uint16_t id, struct lfs_info *info) {
 800f69c:	b580      	push	{r7, lr}
 800f69e:	b08a      	sub	sp, #40	; 0x28
 800f6a0:	af02      	add	r7, sp, #8
 800f6a2:	60f8      	str	r0, [r7, #12]
 800f6a4:	60b9      	str	r1, [r7, #8]
 800f6a6:	603b      	str	r3, [r7, #0]
 800f6a8:	4613      	mov	r3, r2
 800f6aa:	80fb      	strh	r3, [r7, #6]
    if (id == 0x3ff) {
 800f6ac:	88fb      	ldrh	r3, [r7, #6]
 800f6ae:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f6b2:	4293      	cmp	r3, r2
 800f6b4:	d10b      	bne.n	800f6ce <lfs_dir_getinfo+0x32>
        // special case for root
        strcpy(info->name, "/");
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	3308      	adds	r3, #8
 800f6ba:	4932      	ldr	r1, [pc, #200]	; (800f784 <lfs_dir_getinfo+0xe8>)
 800f6bc:	461a      	mov	r2, r3
 800f6be:	460b      	mov	r3, r1
 800f6c0:	881b      	ldrh	r3, [r3, #0]
 800f6c2:	8013      	strh	r3, [r2, #0]
        info->type = LFS_TYPE_DIR;
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	2202      	movs	r2, #2
 800f6c8:	701a      	strb	r2, [r3, #0]
        return 0;
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	e055      	b.n	800f77a <lfs_dir_getinfo+0xde>
    }

    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800f6ce:	88fb      	ldrh	r3, [r7, #6]
 800f6d0:	029a      	lsls	r2, r3, #10
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f6d6:	3301      	adds	r3, #1
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800f6d8:	431a      	orrs	r2, r3
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
 800f6da:	683b      	ldr	r3, [r7, #0]
 800f6dc:	3308      	adds	r3, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
 800f6de:	9300      	str	r3, [sp, #0]
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	4a29      	ldr	r2, [pc, #164]	; (800f788 <lfs_dir_getinfo+0xec>)
 800f6e4:	68b9      	ldr	r1, [r7, #8]
 800f6e6:	68f8      	ldr	r0, [r7, #12]
 800f6e8:	f7ff f976 	bl	800e9d8 <lfs_dir_get>
 800f6ec:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800f6ee:	69fb      	ldr	r3, [r7, #28]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	da01      	bge.n	800f6f8 <lfs_dir_getinfo+0x5c>
        return (int)tag;
 800f6f4:	69fb      	ldr	r3, [r7, #28]
 800f6f6:	e040      	b.n	800f77a <lfs_dir_getinfo+0xde>
    }

    info->type = lfs_tag_type3(tag);
 800f6f8:	69fb      	ldr	r3, [r7, #28]
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	f7fe fd58 	bl	800e1b0 <lfs_tag_type3>
 800f700:	4603      	mov	r3, r0
 800f702:	b2da      	uxtb	r2, r3
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	701a      	strb	r2, [r3, #0]

    struct lfs_ctz ctz;
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
            LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800f708:	88fb      	ldrh	r3, [r7, #6]
 800f70a:	029b      	lsls	r3, r3, #10
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f70c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f710:	f043 0308 	orr.w	r3, r3, #8
 800f714:	f107 0214 	add.w	r2, r7, #20
 800f718:	9200      	str	r2, [sp, #0]
 800f71a:	4a1c      	ldr	r2, [pc, #112]	; (800f78c <lfs_dir_getinfo+0xf0>)
 800f71c:	68b9      	ldr	r1, [r7, #8]
 800f71e:	68f8      	ldr	r0, [r7, #12]
 800f720:	f7ff f95a 	bl	800e9d8 <lfs_dir_get>
 800f724:	61f8      	str	r0, [r7, #28]
    if (tag < 0) {
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	da01      	bge.n	800f730 <lfs_dir_getinfo+0x94>
        return (int)tag;
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	e024      	b.n	800f77a <lfs_dir_getinfo+0xde>
    }
    lfs_ctz_fromle32(&ctz);
 800f730:	f107 0314 	add.w	r3, r7, #20
 800f734:	4618      	mov	r0, r3
 800f736:	f7fe fe6d 	bl	800e414 <lfs_ctz_fromle32>

    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7fe fd37 	bl	800e1b0 <lfs_tag_type3>
 800f742:	4603      	mov	r3, r0
 800f744:	461a      	mov	r2, r3
 800f746:	f240 2302 	movw	r3, #514	; 0x202
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d103      	bne.n	800f756 <lfs_dir_getinfo+0xba>
        info->size = ctz.size;
 800f74e:	69ba      	ldr	r2, [r7, #24]
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	605a      	str	r2, [r3, #4]
 800f754:	e010      	b.n	800f778 <lfs_dir_getinfo+0xdc>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	4618      	mov	r0, r3
 800f75a:	f7fe fd29 	bl	800e1b0 <lfs_tag_type3>
 800f75e:	4603      	mov	r3, r0
 800f760:	461a      	mov	r2, r3
 800f762:	f240 2301 	movw	r3, #513	; 0x201
 800f766:	429a      	cmp	r2, r3
 800f768:	d106      	bne.n	800f778 <lfs_dir_getinfo+0xdc>
        info->size = lfs_tag_size(tag);
 800f76a:	69fb      	ldr	r3, [r7, #28]
 800f76c:	4618      	mov	r0, r3
 800f76e:	f7fe fd59 	bl	800e224 <lfs_tag_size>
 800f772:	4602      	mov	r2, r0
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	605a      	str	r2, [r3, #4]
    }

    return 0;
 800f778:	2300      	movs	r3, #0
}
 800f77a:	4618      	mov	r0, r3
 800f77c:	3720      	adds	r7, #32
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}
 800f782:	bf00      	nop
 800f784:	08029f24 	.word	0x08029f24
 800f788:	780ffc00 	.word	0x780ffc00
 800f78c:	700ffc00 	.word	0x700ffc00

0800f790 <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800f790:	b590      	push	{r4, r7, lr}
 800f792:	b08f      	sub	sp, #60	; 0x3c
 800f794:	af04      	add	r7, sp, #16
 800f796:	60f8      	str	r0, [r7, #12]
 800f798:	60b9      	str	r1, [r7, #8]
 800f79a:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800f7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800f7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7ac:	689c      	ldr	r4, [r3, #8]
 800f7ae:	68b8      	ldr	r0, [r7, #8]
 800f7b0:	f7fe fd38 	bl	800e224 <lfs_tag_size>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	4619      	mov	r1, r3
 800f7b8:	4620      	mov	r0, r4
 800f7ba:	f7fe f80f 	bl	800d7dc <lfs_min>
 800f7be:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800f7c0:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	69fa      	ldr	r2, [r7, #28]
 800f7c8:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800f7ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f7cc:	6849      	ldr	r1, [r1, #4]
 800f7ce:	69b8      	ldr	r0, [r7, #24]
 800f7d0:	9003      	str	r0, [sp, #12]
 800f7d2:	9102      	str	r1, [sp, #8]
 800f7d4:	9201      	str	r2, [sp, #4]
 800f7d6:	9300      	str	r3, [sp, #0]
 800f7d8:	69bb      	ldr	r3, [r7, #24]
 800f7da:	4622      	mov	r2, r4
 800f7dc:	2100      	movs	r1, #0
 800f7de:	6a38      	ldr	r0, [r7, #32]
 800f7e0:	f7fe fa1c 	bl	800dc1c <lfs_bd_cmp>
 800f7e4:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d001      	beq.n	800f7f0 <lfs_dir_find_match+0x60>
        return res;
 800f7ec:	697b      	ldr	r3, [r7, #20]
 800f7ee:	e014      	b.n	800f81a <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800f7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f2:	689c      	ldr	r4, [r3, #8]
 800f7f4:	68b8      	ldr	r0, [r7, #8]
 800f7f6:	f7fe fd15 	bl	800e224 <lfs_tag_size>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	429c      	cmp	r4, r3
 800f7fe:	d00b      	beq.n	800f818 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800f800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f802:	689c      	ldr	r4, [r3, #8]
 800f804:	68b8      	ldr	r0, [r7, #8]
 800f806:	f7fe fd0d 	bl	800e224 <lfs_tag_size>
 800f80a:	4603      	mov	r3, r0
 800f80c:	429c      	cmp	r4, r3
 800f80e:	d201      	bcs.n	800f814 <lfs_dir_find_match+0x84>
 800f810:	2301      	movs	r3, #1
 800f812:	e002      	b.n	800f81a <lfs_dir_find_match+0x8a>
 800f814:	2302      	movs	r3, #2
 800f816:	e000      	b.n	800f81a <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800f818:	2300      	movs	r3, #0
}
 800f81a:	4618      	mov	r0, r3
 800f81c:	372c      	adds	r7, #44	; 0x2c
 800f81e:	46bd      	mov	sp, r7
 800f820:	bd90      	pop	{r4, r7, pc}
	...

0800f824 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800f824:	b590      	push	{r4, r7, lr}
 800f826:	b093      	sub	sp, #76	; 0x4c
 800f828:	af04      	add	r7, sp, #16
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	607a      	str	r2, [r7, #4]
 800f830:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d003      	beq.n	800f846 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800f844:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800f846:	4b6e      	ldr	r3, [pc, #440]	; (800fa00 <lfs_dir_find+0x1dc>)
 800f848:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	6a1a      	ldr	r2, [r3, #32]
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800f85a:	496a      	ldr	r1, [pc, #424]	; (800fa04 <lfs_dir_find+0x1e0>)
 800f85c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f85e:	f015 fccf 	bl	8025200 <strspn>
 800f862:	4602      	mov	r2, r0
 800f864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f866:	4413      	add	r3, r2
 800f868:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800f86a:	4966      	ldr	r1, [pc, #408]	; (800fa04 <lfs_dir_find+0x1e0>)
 800f86c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f86e:	f015 fc91 	bl	8025194 <strcspn>
 800f872:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800f874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f876:	2b01      	cmp	r3, #1
 800f878:	d105      	bne.n	800f886 <lfs_dir_find+0x62>
 800f87a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f87c:	781a      	ldrb	r2, [r3, #0]
 800f87e:	4b62      	ldr	r3, [pc, #392]	; (800fa08 <lfs_dir_find+0x1e4>)
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	429a      	cmp	r2, r3
 800f884:	d00a      	beq.n	800f89c <lfs_dir_find+0x78>
 800f886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f888:	2b02      	cmp	r3, #2
 800f88a:	d10c      	bne.n	800f8a6 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800f88c:	2202      	movs	r2, #2
 800f88e:	495f      	ldr	r1, [pc, #380]	; (800fa0c <lfs_dir_find+0x1e8>)
 800f890:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f892:	f015 fc31 	bl	80250f8 <memcmp>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d104      	bne.n	800f8a6 <lfs_dir_find+0x82>
            name += namelen;
 800f89c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8a0:	4413      	add	r3, r2
 800f8a2:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800f8a4:	e7d9      	b.n	800f85a <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800f8a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8aa:	4413      	add	r3, r2
 800f8ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800f8ae:	2301      	movs	r3, #1
 800f8b0:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800f8b2:	4954      	ldr	r1, [pc, #336]	; (800fa04 <lfs_dir_find+0x1e0>)
 800f8b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8b6:	f015 fca3 	bl	8025200 <strspn>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8be:	4413      	add	r3, r2
 800f8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800f8c2:	4950      	ldr	r1, [pc, #320]	; (800fa04 <lfs_dir_find+0x1e0>)
 800f8c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8c6:	f015 fc65 	bl	8025194 <strcspn>
 800f8ca:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800f8cc:	6a3b      	ldr	r3, [r7, #32]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d01d      	beq.n	800f90e <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800f8d2:	6a3b      	ldr	r3, [r7, #32]
 800f8d4:	2b02      	cmp	r3, #2
 800f8d6:	d112      	bne.n	800f8fe <lfs_dir_find+0xda>
 800f8d8:	2202      	movs	r2, #2
 800f8da:	494c      	ldr	r1, [pc, #304]	; (800fa0c <lfs_dir_find+0x1e8>)
 800f8dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f8de:	f015 fc0b 	bl	80250f8 <memcmp>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d10a      	bne.n	800f8fe <lfs_dir_find+0xda>
                depth -= 1;
 800f8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ea:	3b01      	subs	r3, #1
 800f8ec:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800f8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d107      	bne.n	800f904 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800f8f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8f6:	6a3b      	ldr	r3, [r7, #32]
 800f8f8:	4413      	add	r3, r2
 800f8fa:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800f8fc:	e7ad      	b.n	800f85a <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800f8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f900:	3301      	adds	r3, #1
 800f902:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 800f904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f906:	6a3b      	ldr	r3, [r7, #32]
 800f908:	4413      	add	r3, r2
 800f90a:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800f90c:	e7d1      	b.n	800f8b2 <lfs_dir_find+0x8e>
                break;
 800f90e:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800f910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f912:	781b      	ldrb	r3, [r3, #0]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d101      	bne.n	800f91c <lfs_dir_find+0xf8>
            return tag;
 800f918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f91a:	e06c      	b.n	800f9f6 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f920:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800f922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f924:	4618      	mov	r0, r3
 800f926:	f7fe fc43 	bl	800e1b0 <lfs_tag_type3>
 800f92a:	4603      	mov	r3, r0
 800f92c:	2b02      	cmp	r3, #2
 800f92e:	d002      	beq.n	800f936 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800f930:	f06f 0313 	mvn.w	r3, #19
 800f934:	e05f      	b.n	800f9f6 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800f936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f938:	4618      	mov	r0, r3
 800f93a:	f7fe fc63 	bl	800e204 <lfs_tag_id>
 800f93e:	4603      	mov	r3, r0
 800f940:	461a      	mov	r2, r3
 800f942:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800f946:	429a      	cmp	r2, r3
 800f948:	d01c      	beq.n	800f984 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800f94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fe fc59 	bl	800e204 <lfs_tag_id>
 800f952:	4603      	mov	r3, r0
 800f954:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f956:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f95a:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800f95e:	68ba      	ldr	r2, [r7, #8]
 800f960:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f962:	9200      	str	r2, [sp, #0]
 800f964:	4a2a      	ldr	r2, [pc, #168]	; (800fa10 <lfs_dir_find+0x1ec>)
 800f966:	68b9      	ldr	r1, [r7, #8]
 800f968:	68f8      	ldr	r0, [r7, #12]
 800f96a:	f7ff f835 	bl	800e9d8 <lfs_dir_get>
 800f96e:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800f970:	69fb      	ldr	r3, [r7, #28]
 800f972:	2b00      	cmp	r3, #0
 800f974:	da01      	bge.n	800f97a <lfs_dir_find+0x156>
                return res;
 800f976:	69fb      	ldr	r3, [r7, #28]
 800f978:	e03d      	b.n	800f9f6 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	3318      	adds	r3, #24
 800f97e:	4618      	mov	r0, r3
 800f980:	f7fe fbb1 	bl	800e0e6 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800f98a:	212f      	movs	r1, #47	; 0x2f
 800f98c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f98e:	f015 fbf4 	bl	802517a <strchr>
 800f992:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f994:	2b00      	cmp	r3, #0
 800f996:	d101      	bne.n	800f99c <lfs_dir_find+0x178>
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	e000      	b.n	800f99e <lfs_dir_find+0x17a>
 800f99c:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800f99e:	68fa      	ldr	r2, [r7, #12]
 800f9a0:	613a      	str	r2, [r7, #16]
 800f9a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9a4:	617a      	str	r2, [r7, #20]
 800f9a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9a8:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800f9aa:	f107 0210 	add.w	r2, r7, #16
 800f9ae:	9203      	str	r2, [sp, #12]
 800f9b0:	4a18      	ldr	r2, [pc, #96]	; (800fa14 <lfs_dir_find+0x1f0>)
 800f9b2:	9202      	str	r2, [sp, #8]
 800f9b4:	9301      	str	r3, [sp, #4]
 800f9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9b8:	9300      	str	r3, [sp, #0]
 800f9ba:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800f9be:	4622      	mov	r2, r4
 800f9c0:	68b9      	ldr	r1, [r7, #8]
 800f9c2:	68f8      	ldr	r0, [r7, #12]
 800f9c4:	f7ff fab0 	bl	800ef28 <lfs_dir_fetchmatch>
 800f9c8:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800f9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	da01      	bge.n	800f9d4 <lfs_dir_find+0x1b0>
                return tag;
 800f9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d2:	e010      	b.n	800f9f6 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800f9d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d004      	beq.n	800f9e4 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800f9da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9de:	4413      	add	r3, r2
 800f9e0:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800f9e2:	e73a      	b.n	800f85a <lfs_dir_find+0x36>
            if (!dir->split) {
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	7ddb      	ldrb	r3, [r3, #23]
 800f9e8:	f083 0301 	eor.w	r3, r3, #1
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d0c8      	beq.n	800f984 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800f9f2:	f06f 0301 	mvn.w	r3, #1
    }
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	373c      	adds	r7, #60	; 0x3c
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd90      	pop	{r4, r7, pc}
 800f9fe:	bf00      	nop
 800fa00:	002ffc00 	.word	0x002ffc00
 800fa04:	08029f24 	.word	0x08029f24
 800fa08:	08029f28 	.word	0x08029f28
 800fa0c:	08029f2c 	.word	0x08029f2c
 800fa10:	700ffc00 	.word	0x700ffc00
 800fa14:	0800f791 	.word	0x0800f791

0800fa18 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800fa18:	b590      	push	{r4, r7, lr}
 800fa1a:	b08b      	sub	sp, #44	; 0x2c
 800fa1c:	af04      	add	r7, sp, #16
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	607a      	str	r2, [r7, #4]
 800fa24:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	f103 0010 	add.w	r0, r3, #16
 800fa2c:	68fc      	ldr	r4, [r7, #12]
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	68ba      	ldr	r2, [r7, #8]
 800fa34:	6852      	ldr	r2, [r2, #4]
 800fa36:	6839      	ldr	r1, [r7, #0]
 800fa38:	9103      	str	r1, [sp, #12]
 800fa3a:	6879      	ldr	r1, [r7, #4]
 800fa3c:	9102      	str	r1, [sp, #8]
 800fa3e:	9201      	str	r2, [sp, #4]
 800fa40:	9300      	str	r3, [sp, #0]
 800fa42:	2300      	movs	r3, #0
 800fa44:	4622      	mov	r2, r4
 800fa46:	4601      	mov	r1, r0
 800fa48:	68f8      	ldr	r0, [r7, #12]
 800fa4a:	f7fe f9e9 	bl	800de20 <lfs_bd_prog>
 800fa4e:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800fa50:	697b      	ldr	r3, [r7, #20]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d001      	beq.n	800fa5a <lfs_dir_commitprog+0x42>
        return err;
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	e010      	b.n	800fa7c <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	68db      	ldr	r3, [r3, #12]
 800fa5e:	683a      	ldr	r2, [r7, #0]
 800fa60:	6879      	ldr	r1, [r7, #4]
 800fa62:	4618      	mov	r0, r3
 800fa64:	f004 f8f0 	bl	8013c48 <lfs_crc>
 800fa68:	4602      	mov	r2, r0
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	685a      	ldr	r2, [r3, #4]
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	441a      	add	r2, r3
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	605a      	str	r2, [r3, #4]
    return 0;
 800fa7a:	2300      	movs	r3, #0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	371c      	adds	r7, #28
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd90      	pop	{r4, r7, pc}

0800fa84 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800fa84:	b590      	push	{r4, r7, lr}
 800fa86:	b08f      	sub	sp, #60	; 0x3c
 800fa88:	af04      	add	r7, sp, #16
 800fa8a:	60f8      	str	r0, [r7, #12]
 800fa8c:	60b9      	str	r1, [r7, #8]
 800fa8e:	607a      	str	r2, [r7, #4]
 800fa90:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f7fe fbd3 	bl	800e23e <lfs_tag_dsize>
 800fa98:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800fa9a:	68bb      	ldr	r3, [r7, #8]
 800fa9c:	685a      	ldr	r2, [r3, #4]
 800fa9e:	6a3b      	ldr	r3, [r7, #32]
 800faa0:	441a      	add	r2, r3
 800faa2:	68bb      	ldr	r3, [r7, #8]
 800faa4:	695b      	ldr	r3, [r3, #20]
 800faa6:	429a      	cmp	r2, r3
 800faa8:	d902      	bls.n	800fab0 <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800faaa:	f06f 031b 	mvn.w	r3, #27
 800faae:	e065      	b.n	800fb7c <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	689b      	ldr	r3, [r3, #8]
 800faba:	4053      	eors	r3, r2
 800fabc:	4618      	mov	r0, r3
 800fabe:	f7fd ff20 	bl	800d902 <lfs_tobe32>
 800fac2:	4603      	mov	r3, r0
 800fac4:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800fac6:	f107 0214 	add.w	r2, r7, #20
 800faca:	2304      	movs	r3, #4
 800facc:	68b9      	ldr	r1, [r7, #8]
 800face:	68f8      	ldr	r0, [r7, #12]
 800fad0:	f7ff ffa2 	bl	800fa18 <lfs_dir_commitprog>
 800fad4:	61f8      	str	r0, [r7, #28]
    if (err) {
 800fad6:	69fb      	ldr	r3, [r7, #28]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d001      	beq.n	800fae0 <lfs_dir_commitattr+0x5c>
        return err;
 800fadc:	69fb      	ldr	r3, [r7, #28]
 800fade:	e04d      	b.n	800fb7c <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	db0c      	blt.n	800fb00 <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800fae6:	6a3b      	ldr	r3, [r7, #32]
 800fae8:	3b04      	subs	r3, #4
 800faea:	683a      	ldr	r2, [r7, #0]
 800faec:	68b9      	ldr	r1, [r7, #8]
 800faee:	68f8      	ldr	r0, [r7, #12]
 800faf0:	f7ff ff92 	bl	800fa18 <lfs_dir_commitprog>
 800faf4:	61f8      	str	r0, [r7, #28]
        if (err) {
 800faf6:	69fb      	ldr	r3, [r7, #28]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d039      	beq.n	800fb70 <lfs_dir_commitattr+0xec>
            return err;
 800fafc:	69fb      	ldr	r3, [r7, #28]
 800fafe:	e03d      	b.n	800fb7c <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800fb04:	2300      	movs	r3, #0
 800fb06:	627b      	str	r3, [r7, #36]	; 0x24
 800fb08:	e02d      	b.n	800fb66 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800fb0a:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800fb0c:	6a3a      	ldr	r2, [r7, #32]
 800fb0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb10:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800fb12:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800fb14:	69bb      	ldr	r3, [r7, #24]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	69ba      	ldr	r2, [r7, #24]
 800fb1a:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800fb1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb1e:	440a      	add	r2, r1
 800fb20:	2101      	movs	r1, #1
 800fb22:	9103      	str	r1, [sp, #12]
 800fb24:	f107 0113 	add.w	r1, r7, #19
 800fb28:	9102      	str	r1, [sp, #8]
 800fb2a:	9201      	str	r2, [sp, #4]
 800fb2c:	9300      	str	r3, [sp, #0]
 800fb2e:	4623      	mov	r3, r4
 800fb30:	4602      	mov	r2, r0
 800fb32:	2100      	movs	r1, #0
 800fb34:	68f8      	ldr	r0, [r7, #12]
 800fb36:	f7fd ff2d 	bl	800d994 <lfs_bd_read>
 800fb3a:	61f8      	str	r0, [r7, #28]
            if (err) {
 800fb3c:	69fb      	ldr	r3, [r7, #28]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d001      	beq.n	800fb46 <lfs_dir_commitattr+0xc2>
                return err;
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	e01a      	b.n	800fb7c <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800fb46:	f107 0213 	add.w	r2, r7, #19
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	68b9      	ldr	r1, [r7, #8]
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	f7ff ff62 	bl	800fa18 <lfs_dir_commitprog>
 800fb54:	61f8      	str	r0, [r7, #28]
            if (err) {
 800fb56:	69fb      	ldr	r3, [r7, #28]
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <lfs_dir_commitattr+0xdc>
                return err;
 800fb5c:	69fb      	ldr	r3, [r7, #28]
 800fb5e:	e00d      	b.n	800fb7c <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800fb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb62:	3301      	adds	r3, #1
 800fb64:	627b      	str	r3, [r7, #36]	; 0x24
 800fb66:	6a3b      	ldr	r3, [r7, #32]
 800fb68:	3b04      	subs	r3, #4
 800fb6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb6c:	429a      	cmp	r2, r3
 800fb6e:	d3cc      	bcc.n	800fb0a <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	609a      	str	r2, [r3, #8]
    return 0;
 800fb7a:	2300      	movs	r3, #0
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	372c      	adds	r7, #44	; 0x2c
 800fb80:	46bd      	mov	sp, r7
 800fb82:	bd90      	pop	{r4, r7, pc}

0800fb84 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800fb84:	b590      	push	{r4, r7, lr}
 800fb86:	b097      	sub	sp, #92	; 0x5c
 800fb88:	af04      	add	r7, sp, #16
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800fb8e:	683b      	ldr	r3, [r7, #0]
 800fb90:	685b      	ldr	r3, [r3, #4]
 800fb92:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb9a:	699b      	ldr	r3, [r3, #24]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	4610      	mov	r0, r2
 800fba0:	f7fd fe41 	bl	800d826 <lfs_alignup>
 800fba4:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 800fba6:	2300      	movs	r3, #0
 800fba8:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800fbae:	e0a6      	b.n	800fcfe <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	3304      	adds	r3, #4
 800fbb6:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 800fbb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fbba:	6a3b      	ldr	r3, [r7, #32]
 800fbbc:	1ad3      	subs	r3, r2, r3
 800fbbe:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f7fd fe0a 	bl	800d7dc <lfs_min>
 800fbc8:	4602      	mov	r2, r0
 800fbca:	6a3b      	ldr	r3, [r7, #32]
 800fbcc:	4413      	add	r3, r2
 800fbce:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 800fbd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d206      	bcs.n	800fbe6 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 800fbd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbda:	3b08      	subs	r3, #8
 800fbdc:	4619      	mov	r1, r3
 800fbde:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800fbe0:	f7fd fdfc 	bl	800d7dc <lfs_min>
 800fbe4:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 800fbe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fbea:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 800fbec:	6879      	ldr	r1, [r7, #4]
 800fbee:	683b      	ldr	r3, [r7, #0]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	2204      	movs	r2, #4
 800fbf4:	9203      	str	r2, [sp, #12]
 800fbf6:	f107 0214 	add.w	r2, r7, #20
 800fbfa:	9202      	str	r2, [sp, #8]
 800fbfc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800fbfe:	9201      	str	r2, [sp, #4]
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	2304      	movs	r3, #4
 800fc04:	460a      	mov	r2, r1
 800fc06:	2100      	movs	r1, #0
 800fc08:	6878      	ldr	r0, [r7, #4]
 800fc0a:	f7fd fec3 	bl	800d994 <lfs_bd_read>
 800fc0e:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800fc10:	69fb      	ldr	r3, [r7, #28]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d005      	beq.n	800fc22 <lfs_dir_commitcrc+0x9e>
 800fc16:	69fb      	ldr	r3, [r7, #28]
 800fc18:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800fc1c:	d001      	beq.n	800fc22 <lfs_dir_commitcrc+0x9e>
            return err;
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	e0e8      	b.n	800fdf4 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7fd fe60 	bl	800d8ea <lfs_frombe32>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	43db      	mvns	r3, r3
 800fc2e:	0fdb      	lsrs	r3, r3, #31
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	bf14      	ite	ne
 800fc34:	2301      	movne	r3, #1
 800fc36:	2300      	moveq	r3, #0
 800fc38:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800fc3a:	7efb      	ldrb	r3, [r7, #27]
 800fc3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800fc40:	051a      	lsls	r2, r3, #20
 800fc42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fc44:	6a3b      	ldr	r3, [r7, #32]
 800fc46:	1acb      	subs	r3, r1, r3
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800fc4e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800fc52:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	689a      	ldr	r2, [r3, #8]
 800fc58:	697b      	ldr	r3, [r7, #20]
 800fc5a:	4053      	eors	r3, r2
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7fd fe50 	bl	800d902 <lfs_tobe32>
 800fc62:	4603      	mov	r3, r0
 800fc64:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	68db      	ldr	r3, [r3, #12]
 800fc6a:	f107 010c 	add.w	r1, r7, #12
 800fc6e:	2204      	movs	r2, #4
 800fc70:	4618      	mov	r0, r3
 800fc72:	f003 ffe9 	bl	8013c48 <lfs_crc>
 800fc76:	4602      	mov	r2, r0
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800fc7c:	683b      	ldr	r3, [r7, #0]
 800fc7e:	68db      	ldr	r3, [r3, #12]
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7fd fe26 	bl	800d8d2 <lfs_tole32>
 800fc86:	4603      	mov	r3, r0
 800fc88:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	f103 0010 	add.w	r0, r3, #16
 800fc90:	687c      	ldr	r4, [r7, #4]
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	6852      	ldr	r2, [r2, #4]
 800fc9a:	2108      	movs	r1, #8
 800fc9c:	9103      	str	r1, [sp, #12]
 800fc9e:	f107 010c 	add.w	r1, r7, #12
 800fca2:	9102      	str	r1, [sp, #8]
 800fca4:	9201      	str	r2, [sp, #4]
 800fca6:	9300      	str	r3, [sp, #0]
 800fca8:	2300      	movs	r3, #0
 800fcaa:	4622      	mov	r2, r4
 800fcac:	4601      	mov	r1, r0
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f7fe f8b6 	bl	800de20 <lfs_bd_prog>
 800fcb4:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800fcb6:	69fb      	ldr	r3, [r7, #28]
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d001      	beq.n	800fcc0 <lfs_dir_commitcrc+0x13c>
            return err;
 800fcbc:	69fb      	ldr	r3, [r7, #28]
 800fcbe:	e099      	b.n	800fdf4 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800fcc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d106      	bne.n	800fcd4 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	685b      	ldr	r3, [r3, #4]
 800fcca:	3304      	adds	r3, #4
 800fccc:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	68db      	ldr	r3, [r3, #12]
 800fcd2:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800fcd4:	697b      	ldr	r3, [r7, #20]
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fe faa4 	bl	800e224 <lfs_tag_size>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	1d1a      	adds	r2, r3, #4
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	685b      	ldr	r3, [r3, #4]
 800fce4:	441a      	add	r2, r3
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800fcea:	7efb      	ldrb	r3, [r7, #27]
 800fcec:	07da      	lsls	r2, r3, #31
 800fcee:	697b      	ldr	r3, [r7, #20]
 800fcf0:	405a      	eors	r2, r3
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fcfc:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	685b      	ldr	r3, [r3, #4]
 800fd02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fd04:	429a      	cmp	r2, r3
 800fd06:	f63f af53 	bhi.w	800fbb0 <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f103 0110 	add.w	r1, r3, #16
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	2300      	movs	r3, #0
 800fd14:	6878      	ldr	r0, [r7, #4]
 800fd16:	f7fe f84f 	bl	800ddb8 <lfs_bd_sync>
 800fd1a:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800fd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d001      	beq.n	800fd26 <lfs_dir_commitcrc+0x1a2>
        return err;
 800fd22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd24:	e066      	b.n	800fdf4 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	691b      	ldr	r3, [r3, #16]
 800fd2a:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 800fd2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd2e:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800fd30:	e05b      	b.n	800fdea <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800fd32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fd36:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800fd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd3c:	e030      	b.n	800fda0 <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800fd3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fd42:	429a      	cmp	r2, r3
 800fd44:	d106      	bne.n	800fd54 <lfs_dir_commitcrc+0x1d0>
 800fd46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d002      	beq.n	800fd54 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800fd4e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800fd52:	e04f      	b.n	800fdf4 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800fd54:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 800fd56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd5a:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800fd5c:	1d18      	adds	r0, r3, #4
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	2201      	movs	r2, #1
 800fd64:	9203      	str	r2, [sp, #12]
 800fd66:	f107 020b 	add.w	r2, r7, #11
 800fd6a:	9202      	str	r2, [sp, #8]
 800fd6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd6e:	9201      	str	r2, [sp, #4]
 800fd70:	9300      	str	r3, [sp, #0]
 800fd72:	4603      	mov	r3, r0
 800fd74:	460a      	mov	r2, r1
 800fd76:	2100      	movs	r1, #0
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f7fd fe0b 	bl	800d994 <lfs_bd_read>
 800fd7e:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 800fd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d001      	beq.n	800fd8a <lfs_dir_commitcrc+0x206>
                return err;
 800fd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd88:	e034      	b.n	800fdf4 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800fd8a:	f107 030b 	add.w	r3, r7, #11
 800fd8e:	2201      	movs	r2, #1
 800fd90:	4619      	mov	r1, r3
 800fd92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd94:	f003 ff58 	bl	8013c48 <lfs_crc>
 800fd98:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800fd9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fda0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fda2:	3304      	adds	r3, #4
 800fda4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d3c9      	bcc.n	800fd3e <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800fdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d002      	beq.n	800fdb6 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 800fdb0:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800fdb4:	e01e      	b.n	800fdf4 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800fdb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fdb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdba:	1ad3      	subs	r3, r2, r3
 800fdbc:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7fd fd0b 	bl	800d7dc <lfs_min>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdca:	4413      	add	r3, r2
 800fdcc:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800fdce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d206      	bcs.n	800fde4 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800fdd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdd8:	3b08      	subs	r3, #8
 800fdda:	4619      	mov	r1, r3
 800fddc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fdde:	f7fd fcfd 	bl	800d7dc <lfs_min>
 800fde2:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 800fde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fde6:	3304      	adds	r3, #4
 800fde8:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800fdea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fdec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d39f      	bcc.n	800fd32 <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800fdf2:	2300      	movs	r3, #0
}
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	374c      	adds	r7, #76	; 0x4c
 800fdf8:	46bd      	mov	sp, r7
 800fdfa:	bd90      	pop	{r4, r7, pc}

0800fdfc <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b08a      	sub	sp, #40	; 0x28
 800fe00:	af04      	add	r7, sp, #16
 800fe02:	6078      	str	r0, [r7, #4]
 800fe04:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800fe06:	2300      	movs	r3, #0
 800fe08:	617b      	str	r3, [r7, #20]
 800fe0a:	e016      	b.n	800fe3a <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800fe0c:	697b      	ldr	r3, [r7, #20]
 800fe0e:	3301      	adds	r3, #1
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	f003 0301 	and.w	r3, r3, #1
 800fe16:	bfb8      	it	lt
 800fe18:	425b      	neglt	r3, r3
 800fe1a:	009b      	lsls	r3, r3, #2
 800fe1c:	683a      	ldr	r2, [r7, #0]
 800fe1e:	4413      	add	r3, r2
 800fe20:	4619      	mov	r1, r3
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f7fe fc3e 	bl	800e6a4 <lfs_alloc>
 800fe28:	60f8      	str	r0, [r7, #12]
        if (err) {
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d001      	beq.n	800fe34 <lfs_dir_alloc+0x38>
            return err;
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	e058      	b.n	800fee6 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	3301      	adds	r3, #1
 800fe38:	617b      	str	r3, [r7, #20]
 800fe3a:	697b      	ldr	r3, [r7, #20]
 800fe3c:	2b01      	cmp	r3, #1
 800fe3e:	dde5      	ble.n	800fe0c <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	2200      	movs	r2, #0
 800fe44:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800fe46:	6879      	ldr	r1, [r7, #4]
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800fe4c:	683a      	ldr	r2, [r7, #0]
 800fe4e:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800fe50:	2004      	movs	r0, #4
 800fe52:	9003      	str	r0, [sp, #12]
 800fe54:	9202      	str	r2, [sp, #8]
 800fe56:	2200      	movs	r2, #0
 800fe58:	9201      	str	r2, [sp, #4]
 800fe5a:	9300      	str	r3, [sp, #0]
 800fe5c:	2304      	movs	r3, #4
 800fe5e:	460a      	mov	r2, r1
 800fe60:	2100      	movs	r1, #0
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f7fd fd96 	bl	800d994 <lfs_bd_read>
 800fe68:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	689b      	ldr	r3, [r3, #8]
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7fd fd24 	bl	800d8bc <lfs_fromle32>
 800fe74:	4602      	mov	r2, r0
 800fe76:	683b      	ldr	r3, [r7, #0]
 800fe78:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d005      	beq.n	800fe8c <lfs_dir_alloc+0x90>
 800fe80:	693b      	ldr	r3, [r7, #16]
 800fe82:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800fe86:	d001      	beq.n	800fe8c <lfs_dir_alloc+0x90>
        return err;
 800fe88:	693b      	ldr	r3, [r7, #16]
 800fe8a:	e02c      	b.n	800fee6 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fe90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	dd0e      	ble.n	800feb4 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800fe96:	683b      	ldr	r3, [r7, #0]
 800fe98:	689a      	ldr	r2, [r3, #8]
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fe9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fea0:	3301      	adds	r3, #1
 800fea2:	f043 0301 	orr.w	r3, r3, #1
 800fea6:	4619      	mov	r1, r3
 800fea8:	4610      	mov	r0, r2
 800feaa:	f7fd fcbc 	bl	800d826 <lfs_alignup>
 800feae:	4602      	mov	r2, r0
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	2204      	movs	r2, #4
 800feb8:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800feba:	683b      	ldr	r3, [r7, #0]
 800febc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fec0:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	2200      	movs	r2, #0
 800fec6:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fece:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fed6:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	2200      	movs	r2, #0
 800fedc:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	2200      	movs	r2, #0
 800fee2:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800fee4:	2300      	movs	r3, #0
}
 800fee6:	4618      	mov	r0, r3
 800fee8:	3718      	adds	r7, #24
 800feea:	46bd      	mov	sp, r7
 800feec:	bd80      	pop	{r7, pc}
	...

0800fef0 <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b08a      	sub	sp, #40	; 0x28
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	60f8      	str	r0, [r7, #12]
 800fef8:	60b9      	str	r1, [r7, #8]
 800fefa:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	3348      	adds	r3, #72	; 0x48
 800ff00:	461a      	mov	r2, r3
 800ff02:	6879      	ldr	r1, [r7, #4]
 800ff04:	68f8      	ldr	r0, [r7, #12]
 800ff06:	f7ff fb97 	bl	800f638 <lfs_dir_getgstate>
 800ff0a:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800ff0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d001      	beq.n	800ff16 <lfs_dir_drop+0x26>
        return err;
 800ff12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff14:	e022      	b.n	800ff5c <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	3318      	adds	r3, #24
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	f7fe f8fd 	bl	800e11a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	7ddb      	ldrb	r3, [r3, #23]
 800ff24:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800ff28:	051a      	lsls	r2, r3, #20
 800ff2a:	4b0e      	ldr	r3, [pc, #56]	; (800ff64 <lfs_dir_drop+0x74>)
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	61fb      	str	r3, [r7, #28]
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	3318      	adds	r3, #24
 800ff34:	623b      	str	r3, [r7, #32]
 800ff36:	f107 021c 	add.w	r2, r7, #28
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	68b9      	ldr	r1, [r7, #8]
 800ff3e:	68f8      	ldr	r0, [r7, #12]
 800ff40:	f000 fbac 	bl	801069c <lfs_dir_commit>
 800ff44:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	3318      	adds	r3, #24
 800ff4a:	4618      	mov	r0, r3
 800ff4c:	f7fe f8cb 	bl	800e0e6 <lfs_pair_fromle32>
    if (err) {
 800ff50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d001      	beq.n	800ff5a <lfs_dir_drop+0x6a>
        return err;
 800ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff58:	e000      	b.n	800ff5c <lfs_dir_drop+0x6c>
    }

    return 0;
 800ff5a:	2300      	movs	r3, #0
}
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	3728      	adds	r7, #40	; 0x28
 800ff60:	46bd      	mov	sp, r7
 800ff62:	bd80      	pop	{r7, pc}
 800ff64:	000ffc08 	.word	0x000ffc08

0800ff68 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b092      	sub	sp, #72	; 0x48
 800ff6c:	af04      	add	r7, sp, #16
 800ff6e:	60f8      	str	r0, [r7, #12]
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	607a      	str	r2, [r7, #4]
 800ff74:	603b      	str	r3, [r7, #0]
    // create tail directory
    lfs_alloc_ack(lfs);
 800ff76:	68f8      	ldr	r0, [r7, #12]
 800ff78:	f7fe fb74 	bl	800e664 <lfs_alloc_ack>
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800ff7c:	f107 0314 	add.w	r3, r7, #20
 800ff80:	4619      	mov	r1, r3
 800ff82:	68f8      	ldr	r0, [r7, #12]
 800ff84:	f7ff ff3a 	bl	800fdfc <lfs_dir_alloc>
 800ff88:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800ff8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d001      	beq.n	800ff94 <lfs_dir_split+0x2c>
        return err;
 800ff90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff92:	e03c      	b.n	801000e <lfs_dir_split+0xa6>
    }

    tail.split = dir->split;
 800ff94:	68bb      	ldr	r3, [r7, #8]
 800ff96:	7ddb      	ldrb	r3, [r3, #23]
 800ff98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    tail.tail[0] = dir->tail[0];
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	699b      	ldr	r3, [r3, #24]
 800ffa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    tail.tail[1] = dir->tail[1];
 800ffa2:	68bb      	ldr	r3, [r7, #8]
 800ffa4:	69db      	ldr	r3, [r3, #28]
 800ffa6:	633b      	str	r3, [r7, #48]	; 0x30

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800ffa8:	f107 0114 	add.w	r1, r7, #20
 800ffac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ffb0:	9302      	str	r3, [sp, #8]
 800ffb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800ffb6:	9301      	str	r3, [sp, #4]
 800ffb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	683b      	ldr	r3, [r7, #0]
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	68f8      	ldr	r0, [r7, #12]
 800ffc2:	f000 f853 	bl	801006c <lfs_dir_compact>
 800ffc6:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800ffc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d001      	beq.n	800ffd2 <lfs_dir_split+0x6a>
        return err;
 800ffce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffd0:	e01d      	b.n	801000e <lfs_dir_split+0xa6>
    }

    dir->tail[0] = tail.pair[0];
 800ffd2:	697a      	ldr	r2, [r7, #20]
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800ffd8:	69ba      	ldr	r2, [r7, #24]
 800ffda:	68bb      	ldr	r3, [r7, #8]
 800ffdc:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	2201      	movs	r2, #1
 800ffe2:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800ffe4:	68ba      	ldr	r2, [r7, #8]
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	3320      	adds	r3, #32
 800ffea:	4619      	mov	r1, r3
 800ffec:	4610      	mov	r0, r2
 800ffee:	f7fe f823 	bl	800e038 <lfs_pair_cmp>
 800fff2:	4603      	mov	r3, r0
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d109      	bne.n	801000c <lfs_dir_split+0xa4>
 800fff8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d105      	bne.n	801000c <lfs_dir_split+0xa4>
        lfs->root[0] = tail.pair[0];
 8010000:	697a      	ldr	r2, [r7, #20]
 8010002:	68fb      	ldr	r3, [r7, #12]
 8010004:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 8010006:	69ba      	ldr	r2, [r7, #24]
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 801000c:	2300      	movs	r3, #0
}
 801000e:	4618      	mov	r0, r3
 8010010:	3738      	adds	r7, #56	; 0x38
 8010012:	46bd      	mov	sp, r7
 8010014:	bd80      	pop	{r7, pc}

08010016 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 8010016:	b580      	push	{r7, lr}
 8010018:	b086      	sub	sp, #24
 801001a:	af00      	add	r7, sp, #0
 801001c:	60f8      	str	r0, [r7, #12]
 801001e:	60b9      	str	r1, [r7, #8]
 8010020:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 8010026:	68b8      	ldr	r0, [r7, #8]
 8010028:	f7fe f909 	bl	800e23e <lfs_tag_dsize>
 801002c:	4602      	mov	r2, r0
 801002e:	697b      	ldr	r3, [r7, #20]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	441a      	add	r2, r3
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	601a      	str	r2, [r3, #0]
    return 0;
 8010038:	2300      	movs	r3, #0
}
 801003a:	4618      	mov	r0, r3
 801003c:	3718      	adds	r7, #24
 801003e:	46bd      	mov	sp, r7
 8010040:	bd80      	pop	{r7, pc}

08010042 <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 8010042:	b580      	push	{r7, lr}
 8010044:	b086      	sub	sp, #24
 8010046:	af00      	add	r7, sp, #0
 8010048:	60f8      	str	r0, [r7, #12]
 801004a:	60b9      	str	r1, [r7, #8]
 801004c:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 801004e:	68fb      	ldr	r3, [r7, #12]
 8010050:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 8010052:	697b      	ldr	r3, [r7, #20]
 8010054:	6818      	ldr	r0, [r3, #0]
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	6859      	ldr	r1, [r3, #4]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	68ba      	ldr	r2, [r7, #8]
 801005e:	f7ff fd11 	bl	800fa84 <lfs_dir_commitattr>
 8010062:	4603      	mov	r3, r0
}
 8010064:	4618      	mov	r0, r3
 8010066:	3718      	adds	r7, #24
 8010068:	46bd      	mov	sp, r7
 801006a:	bd80      	pop	{r7, pc}

0801006c <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 801006c:	b590      	push	{r4, r7, lr}
 801006e:	b0ad      	sub	sp, #180	; 0xb4
 8010070:	af0a      	add	r7, sp, #40	; 0x28
 8010072:	60f8      	str	r0, [r7, #12]
 8010074:	60b9      	str	r1, [r7, #8]
 8010076:	607a      	str	r2, [r7, #4]
 8010078:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	663b      	str	r3, [r7, #96]	; 0x60
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	685b      	ldr	r3, [r3, #4]
 8010084:	667b      	str	r3, [r7, #100]	; 0x64
    bool relocated = false;
 8010086:	2300      	movs	r3, #0
 8010088:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool tired = false;
 801008c:	2300      	movs	r3, #0
 801008e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    // should we split?
    while (end - begin > 1) {
 8010092:	e08f      	b.n	80101b4 <lfs_dir_compact+0x148>
        // find size
        lfs_size_t size = 0;
 8010094:	2300      	movs	r3, #0
 8010096:	65fb      	str	r3, [r7, #92]	; 0x5c
        int err = lfs_dir_traverse(lfs,
 8010098:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801009c:	425b      	negs	r3, r3
 801009e:	b29b      	uxth	r3, r3
 80100a0:	b21b      	sxth	r3, r3
 80100a2:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 80100a6:	9208      	str	r2, [sp, #32]
 80100a8:	4aa4      	ldr	r2, [pc, #656]	; (801033c <lfs_dir_compact+0x2d0>)
 80100aa:	9207      	str	r2, [sp, #28]
 80100ac:	9306      	str	r3, [sp, #24]
 80100ae:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80100b2:	9305      	str	r3, [sp, #20]
 80100b4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80100b8:	9304      	str	r3, [sp, #16]
 80100ba:	2300      	movs	r3, #0
 80100bc:	9303      	str	r3, [sp, #12]
 80100be:	4ba0      	ldr	r3, [pc, #640]	; (8010340 <lfs_dir_compact+0x2d4>)
 80100c0:	9302      	str	r3, [sp, #8]
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	9301      	str	r3, [sp, #4]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	9300      	str	r3, [sp, #0]
 80100ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80100ce:	2200      	movs	r2, #0
 80100d0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80100d4:	68f8      	ldr	r0, [r7, #12]
 80100d6:	f7fe fdcf 	bl	800ec78 <lfs_dir_traverse>
 80100da:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, 0, 0xffffffff, attrs, attrcount,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
 80100de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d002      	beq.n	80100ec <lfs_dir_compact+0x80>
            return err;
 80100e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80100ea:	e2cc      	b.n	8010686 <lfs_dir_compact+0x61a>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
 80100ec:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80100f0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80100f4:	1ad3      	subs	r3, r2, r3
 80100f6:	2bfe      	cmp	r3, #254	; 0xfe
 80100f8:	dc22      	bgt.n	8010140 <lfs_dir_compact+0xd4>
                size <= lfs_min(lfs->cfg->block_size - 36,
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80100fe:	69db      	ldr	r3, [r3, #28]
 8010100:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                    lfs_alignup((lfs->cfg->metadata_max ?
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                size <= lfs_min(lfs->cfg->block_size - 36,
 801010a:	2b00      	cmp	r3, #0
 801010c:	d004      	beq.n	8010118 <lfs_dir_compact+0xac>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                size <= lfs_min(lfs->cfg->block_size - 36,
 8010114:	085b      	lsrs	r3, r3, #1
 8010116:	e003      	b.n	8010120 <lfs_dir_compact+0xb4>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801011c:	69db      	ldr	r3, [r3, #28]
                size <= lfs_min(lfs->cfg->block_size - 36,
 801011e:	085b      	lsrs	r3, r3, #1
                        lfs->cfg->prog_size))) {
 8010120:	68fa      	ldr	r2, [r7, #12]
 8010122:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8010124:	6992      	ldr	r2, [r2, #24]
                size <= lfs_min(lfs->cfg->block_size - 36,
 8010126:	4611      	mov	r1, r2
 8010128:	4618      	mov	r0, r3
 801012a:	f7fd fb7c 	bl	800d826 <lfs_alignup>
 801012e:	4603      	mov	r3, r0
 8010130:	4619      	mov	r1, r3
 8010132:	4620      	mov	r0, r4
 8010134:	f7fd fb52 	bl	800d7dc <lfs_min>
 8010138:	4602      	mov	r2, r0
 801013a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
        if (end - begin < 0xff &&
 801013c:	429a      	cmp	r2, r3
 801013e:	d242      	bcs.n	80101c6 <lfs_dir_compact+0x15a>
        }

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
 8010140:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8010144:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8010148:	1ad3      	subs	r3, r2, r3
 801014a:	0fda      	lsrs	r2, r3, #31
 801014c:	4413      	add	r3, r2
 801014e:	105b      	asrs	r3, r3, #1
 8010150:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 8010154:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 8010158:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801015c:	4413      	add	r3, r2
 801015e:	b29b      	uxth	r3, r3
 8010160:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8010164:	9202      	str	r2, [sp, #8]
 8010166:	9301      	str	r3, [sp, #4]
 8010168:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801016c:	9300      	str	r3, [sp, #0]
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	68b9      	ldr	r1, [r7, #8]
 8010174:	68f8      	ldr	r0, [r7, #12]
 8010176:	f7ff fef7 	bl	800ff68 <lfs_dir_split>
 801017a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, begin+split, end);
        if (err) {
 801017e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00f      	beq.n	80101a6 <lfs_dir_compact+0x13a>
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 8010186:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801018a:	f113 0f1c 	cmn.w	r3, #28
 801018e:	d107      	bne.n	80101a0 <lfs_dir_compact+0x134>
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010194:	69db      	ldr	r3, [r3, #28]
 8010196:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 801019a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801019c:	429a      	cmp	r2, r3
 801019e:	d214      	bcs.n	80101ca <lfs_dir_compact+0x15e>
                break;
            }
            return err;
 80101a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80101a4:	e26f      	b.n	8010686 <lfs_dir_compact+0x61a>
        }

        end = begin + split;
 80101a6:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80101aa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80101ae:	4413      	add	r3, r2
 80101b0:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    while (end - begin > 1) {
 80101b4:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80101b8:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80101bc:	1ad3      	subs	r3, r2, r3
 80101be:	2b01      	cmp	r3, #1
 80101c0:	f73f af68 	bgt.w	8010094 <lfs_dir_compact+0x28>
 80101c4:	e002      	b.n	80101cc <lfs_dir_compact+0x160>
            break;
 80101c6:	bf00      	nop
 80101c8:	e000      	b.n	80101cc <lfs_dir_compact+0x160>
                break;
 80101ca:	bf00      	nop
    }

    // increment revision count
    dir->rev += 1;
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	689b      	ldr	r3, [r3, #8]
 80101d0:	1c5a      	adds	r2, r3, #1
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	609a      	str	r2, [r3, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101dc:	2b00      	cmp	r3, #0
 80101de:	dd5b      	ble.n	8010298 <lfs_dir_compact+0x22c>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
 80101e0:	68bb      	ldr	r3, [r7, #8]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	68fa      	ldr	r2, [r7, #12]
 80101e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80101e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80101ea:	3201      	adds	r2, #1
 80101ec:	f042 0201 	orr.w	r2, r2, #1
 80101f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80101f4:	fb01 f202 	mul.w	r2, r1, r2
 80101f8:	1a9b      	subs	r3, r3, r2
    if (lfs->cfg->block_cycles > 0 &&
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d14c      	bne.n	8010298 <lfs_dir_compact+0x22c>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80101fe:	68bb      	ldr	r3, [r7, #8]
 8010200:	2200      	movs	r2, #0
 8010202:	657a      	str	r2, [r7, #84]	; 0x54
 8010204:	2201      	movs	r2, #1
 8010206:	65ba      	str	r2, [r7, #88]	; 0x58
 8010208:	f107 0254 	add.w	r2, r7, #84	; 0x54
 801020c:	4611      	mov	r1, r2
 801020e:	4618      	mov	r0, r3
 8010210:	f7fd ff12 	bl	800e038 <lfs_pair_cmp>
 8010214:	4603      	mov	r3, r0
 8010216:	2b00      	cmp	r3, #0
 8010218:	d13a      	bne.n	8010290 <lfs_dir_compact+0x224>
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_rawsize(lfs);
 801021a:	68f8      	ldr	r0, [r7, #12]
 801021c:	f003 fb50 	bl	80138c0 <lfs_fs_rawsize>
 8010220:	67b8      	str	r0, [r7, #120]	; 0x78
            if (res < 0) {
 8010222:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010224:	2b00      	cmp	r3, #0
 8010226:	da01      	bge.n	801022c <lfs_dir_compact+0x1c0>
                return res;
 8010228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801022a:	e22c      	b.n	8010686 <lfs_dir_compact+0x61a>
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010230:	6a1b      	ldr	r3, [r3, #32]
 8010232:	085a      	lsrs	r2, r3, #1
 8010234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010236:	429a      	cmp	r2, r3
 8010238:	d92e      	bls.n	8010298 <lfs_dir_compact+0x22c>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	689b      	ldr	r3, [r3, #8]
 801023e:	4a41      	ldr	r2, [pc, #260]	; (8010344 <lfs_dir_compact+0x2d8>)
 8010240:	9200      	str	r2, [sp, #0]
 8010242:	f240 626c 	movw	r2, #1644	; 0x66c
 8010246:	4940      	ldr	r1, [pc, #256]	; (8010348 <lfs_dir_compact+0x2dc>)
 8010248:	4840      	ldr	r0, [pc, #256]	; (801034c <lfs_dir_compact+0x2e0>)
 801024a:	f014 fdb9 	bl	8024dc0 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 801024e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8010252:	9302      	str	r3, [sp, #8]
 8010254:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8010258:	9301      	str	r3, [sp, #4]
 801025a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801025e:	9300      	str	r3, [sp, #0]
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	687a      	ldr	r2, [r7, #4]
 8010264:	68b9      	ldr	r1, [r7, #8]
 8010266:	68f8      	ldr	r0, [r7, #12]
 8010268:	f7ff fe7e 	bl	800ff68 <lfs_dir_split>
 801026c:	6778      	str	r0, [r7, #116]	; 0x74
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
 801026e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010270:	2b00      	cmp	r3, #0
 8010272:	d005      	beq.n	8010280 <lfs_dir_compact+0x214>
 8010274:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010276:	f113 0f1c 	cmn.w	r3, #28
 801027a:	d001      	beq.n	8010280 <lfs_dir_compact+0x214>
                    return err;
 801027c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801027e:	e202      	b.n	8010686 <lfs_dir_compact+0x61a>
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
 8010280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010282:	2b00      	cmp	r3, #0
 8010284:	d108      	bne.n	8010298 <lfs_dir_compact+0x22c>
                    end = begin;
 8010286:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801028a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 801028e:	e003      	b.n	8010298 <lfs_dir_compact+0x22c>
            // this, relocations increase the overall complexity of
            // lfs_migration, which is already a delicate operation.
#endif
        } else {
            // we're writing too much, time to relocate
            tired = true;
 8010290:	2301      	movs	r3, #1
 8010292:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 8010296:	e16b      	b.n	8010570 <lfs_dir_compact+0x504>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 801029c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801029e:	2300      	movs	r3, #0
 80102a0:	643b      	str	r3, [r7, #64]	; 0x40
 80102a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102a6:	647b      	str	r3, [r7, #68]	; 0x44
 80102a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80102ae:	2300      	movs	r3, #0
 80102b0:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d004      	beq.n	80102c6 <lfs_dir_compact+0x25a>
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80102c2:	3b08      	subs	r3, #8
 80102c4:	e003      	b.n	80102ce <lfs_dir_compact+0x262>
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102ca:	69db      	ldr	r3, [r3, #28]
 80102cc:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 80102ce:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	685b      	ldr	r3, [r3, #4]
 80102d4:	4619      	mov	r1, r3
 80102d6:	68f8      	ldr	r0, [r7, #12]
 80102d8:	f7fd fe4e 	bl	800df78 <lfs_bd_erase>
 80102dc:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 80102de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d006      	beq.n	80102f2 <lfs_dir_compact+0x286>
                if (err == LFS_ERR_CORRUPT) {
 80102e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102e6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80102ea:	f000 8136 	beq.w	801055a <lfs_dir_compact+0x4ee>
                    goto relocate;
                }
                return err;
 80102ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80102f0:	e1c9      	b.n	8010686 <lfs_dir_compact+0x61a>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 80102f2:	68bb      	ldr	r3, [r7, #8]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	4618      	mov	r0, r3
 80102f8:	f7fd faeb 	bl	800d8d2 <lfs_tole32>
 80102fc:	4602      	mov	r2, r0
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 8010308:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 801030c:	2304      	movs	r3, #4
 801030e:	68f8      	ldr	r0, [r7, #12]
 8010310:	f7ff fb82 	bl	800fa18 <lfs_dir_commitprog>
 8010314:	6738      	str	r0, [r7, #112]	; 0x70
            dir->rev = lfs_fromle32(dir->rev);
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	689b      	ldr	r3, [r3, #8]
 801031a:	4618      	mov	r0, r3
 801031c:	f7fd face 	bl	800d8bc <lfs_fromle32>
 8010320:	4602      	mov	r2, r0
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	609a      	str	r2, [r3, #8]
            if (err) {
 8010326:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010328:	2b00      	cmp	r3, #0
 801032a:	d011      	beq.n	8010350 <lfs_dir_compact+0x2e4>
                if (err == LFS_ERR_CORRUPT) {
 801032c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801032e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8010332:	f000 8114 	beq.w	801055e <lfs_dir_compact+0x4f2>
                    goto relocate;
                }
                return err;
 8010336:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010338:	e1a5      	b.n	8010686 <lfs_dir_compact+0x61a>
 801033a:	bf00      	nop
 801033c:	08010017 	.word	0x08010017
 8010340:	400ffc00 	.word	0x400ffc00
 8010344:	08029ee0 	.word	0x08029ee0
 8010348:	08029dd4 	.word	0x08029dd4
 801034c:	08029f30 	.word	0x08029f30
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 8010350:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8010354:	425b      	negs	r3, r3
 8010356:	b29b      	uxth	r3, r3
 8010358:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 801035a:	68fa      	ldr	r2, [r7, #12]
 801035c:	637a      	str	r2, [r7, #52]	; 0x34
 801035e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8010362:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 8010364:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010368:	9208      	str	r2, [sp, #32]
 801036a:	4aaa      	ldr	r2, [pc, #680]	; (8010614 <lfs_dir_compact+0x5a8>)
 801036c:	9207      	str	r2, [sp, #28]
 801036e:	9306      	str	r3, [sp, #24]
 8010370:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8010374:	9305      	str	r3, [sp, #20]
 8010376:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801037a:	9304      	str	r3, [sp, #16]
 801037c:	2300      	movs	r3, #0
 801037e:	9303      	str	r3, [sp, #12]
 8010380:	4ba5      	ldr	r3, [pc, #660]	; (8010618 <lfs_dir_compact+0x5ac>)
 8010382:	9302      	str	r3, [sp, #8]
 8010384:	683b      	ldr	r3, [r7, #0]
 8010386:	9301      	str	r3, [sp, #4]
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	9300      	str	r3, [sp, #0]
 801038c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010390:	2200      	movs	r2, #0
 8010392:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010396:	68f8      	ldr	r0, [r7, #12]
 8010398:	f7fe fc6e 	bl	800ec78 <lfs_dir_traverse>
 801039c:	6738      	str	r0, [r7, #112]	; 0x70
                        lfs, &commit});
            if (err) {
 801039e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d006      	beq.n	80103b2 <lfs_dir_compact+0x346>
                if (err == LFS_ERR_CORRUPT) {
 80103a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103a6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80103aa:	f000 80da 	beq.w	8010562 <lfs_dir_compact+0x4f6>
                    goto relocate;
                }
                return err;
 80103ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103b0:	e169      	b.n	8010686 <lfs_dir_compact+0x61a>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	3318      	adds	r3, #24
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7fd fe23 	bl	800e002 <lfs_pair_isnull>
 80103bc:	4603      	mov	r3, r0
 80103be:	f083 0301 	eor.w	r3, r3, #1
 80103c2:	b2db      	uxtb	r3, r3
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d022      	beq.n	801040e <lfs_dir_compact+0x3a2>
                lfs_pair_tole32(dir->tail);
 80103c8:	68bb      	ldr	r3, [r7, #8]
 80103ca:	3318      	adds	r3, #24
 80103cc:	4618      	mov	r0, r3
 80103ce:	f7fd fea4 	bl	800e11a <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 80103d2:	68bb      	ldr	r3, [r7, #8]
 80103d4:	7ddb      	ldrb	r3, [r3, #23]
 80103d6:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80103da:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 80103dc:	4a8f      	ldr	r2, [pc, #572]	; (801061c <lfs_dir_compact+0x5b0>)
 80103de:	431a      	orrs	r2, r3
                        dir->tail);
 80103e0:	68bb      	ldr	r3, [r7, #8]
 80103e2:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 80103e4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80103e8:	68f8      	ldr	r0, [r7, #12]
 80103ea:	f7ff fb4b 	bl	800fa84 <lfs_dir_commitattr>
 80103ee:	6738      	str	r0, [r7, #112]	; 0x70
                lfs_pair_fromle32(dir->tail);
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	3318      	adds	r3, #24
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fd fe76 	bl	800e0e6 <lfs_pair_fromle32>
                if (err) {
 80103fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d006      	beq.n	801040e <lfs_dir_compact+0x3a2>
                    if (err == LFS_ERR_CORRUPT) {
 8010400:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010402:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8010406:	f000 80ae 	beq.w	8010566 <lfs_dir_compact+0x4fa>
                        goto relocate;
                    }
                    return err;
 801040a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801040c:	e13b      	b.n	8010686 <lfs_dir_compact+0x61a>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 801040e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010412:	2200      	movs	r2, #0
 8010414:	601a      	str	r2, [r3, #0]
 8010416:	605a      	str	r2, [r3, #4]
 8010418:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 801041a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 801041e:	f083 0301 	eor.w	r3, r3, #1
 8010422:	b2db      	uxtb	r3, r3
 8010424:	2b00      	cmp	r3, #0
 8010426:	d011      	beq.n	801044c <lfs_dir_compact+0x3e0>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 801042e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010432:	4611      	mov	r1, r2
 8010434:	4618      	mov	r0, r3
 8010436:	f7fd ff16 	bl	800e266 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010444:	4611      	mov	r1, r2
 8010446:	4618      	mov	r0, r3
 8010448:	f7fd ff0d 	bl	800e266 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8010452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010456:	4611      	mov	r1, r2
 8010458:	4618      	mov	r0, r3
 801045a:	f7fd ff04 	bl	800e266 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 801045e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010460:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010464:	f023 0303 	bic.w	r3, r3, #3
 8010468:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 801046a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801046e:	461a      	mov	r2, r3
 8010470:	68b9      	ldr	r1, [r7, #8]
 8010472:	68f8      	ldr	r0, [r7, #12]
 8010474:	f7ff f8e0 	bl	800f638 <lfs_dir_getgstate>
 8010478:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 801047a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801047c:	2b00      	cmp	r3, #0
 801047e:	d001      	beq.n	8010484 <lfs_dir_compact+0x418>
                return err;
 8010480:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010482:	e100      	b.n	8010686 <lfs_dir_compact+0x61a>
            }

            if (!lfs_gstate_iszero(&delta)) {
 8010484:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010488:	4618      	mov	r0, r3
 801048a:	f7fd ff11 	bl	800e2b0 <lfs_gstate_iszero>
 801048e:	4603      	mov	r3, r0
 8010490:	f083 0301 	eor.w	r3, r3, #1
 8010494:	b2db      	uxtb	r3, r3
 8010496:	2b00      	cmp	r3, #0
 8010498:	d016      	beq.n	80104c8 <lfs_dir_compact+0x45c>
                lfs_gstate_tole32(&delta);
 801049a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801049e:	4618      	mov	r0, r3
 80104a0:	f7fd ff98 	bl	800e3d4 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 80104a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104a8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80104ac:	4a5c      	ldr	r2, [pc, #368]	; (8010620 <lfs_dir_compact+0x5b4>)
 80104ae:	68f8      	ldr	r0, [r7, #12]
 80104b0:	f7ff fae8 	bl	800fa84 <lfs_dir_commitattr>
 80104b4:	6738      	str	r0, [r7, #112]	; 0x70
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 80104b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d005      	beq.n	80104c8 <lfs_dir_compact+0x45c>
                    if (err == LFS_ERR_CORRUPT) {
 80104bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104be:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80104c2:	d052      	beq.n	801056a <lfs_dir_compact+0x4fe>
                        goto relocate;
                    }
                    return err;
 80104c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104c6:	e0de      	b.n	8010686 <lfs_dir_compact+0x61a>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 80104c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80104cc:	4619      	mov	r1, r3
 80104ce:	68f8      	ldr	r0, [r7, #12]
 80104d0:	f7ff fb58 	bl	800fb84 <lfs_dir_commitcrc>
 80104d4:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 80104d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d005      	beq.n	80104e8 <lfs_dir_compact+0x47c>
                if (err == LFS_ERR_CORRUPT) {
 80104dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104de:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80104e2:	d044      	beq.n	801056e <lfs_dir_compact+0x502>
                    goto relocate;
                }
                return err;
 80104e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80104e6:	e0ce      	b.n	8010686 <lfs_dir_compact+0x61a>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 80104e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104ea:	68fa      	ldr	r2, [r7, #12]
 80104ec:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80104ee:	6992      	ldr	r2, [r2, #24]
 80104f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80104f4:	fb01 f202 	mul.w	r2, r1, r2
 80104f8:	1a9b      	subs	r3, r3, r2
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d006      	beq.n	801050c <lfs_dir_compact+0x4a0>
 80104fe:	4b49      	ldr	r3, [pc, #292]	; (8010624 <lfs_dir_compact+0x5b8>)
 8010500:	4a49      	ldr	r2, [pc, #292]	; (8010628 <lfs_dir_compact+0x5bc>)
 8010502:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 8010506:	4849      	ldr	r0, [pc, #292]	; (801062c <lfs_dir_compact+0x5c0>)
 8010508:	f013 fd84 	bl	8024014 <__assert_func>
            lfs_pair_swap(dir->pair);
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	4618      	mov	r0, r3
 8010510:	f7fd fd62 	bl	800dfd8 <lfs_pair_swap>
            dir->count = end - begin;
 8010514:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8010518:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 801051c:	1ad3      	subs	r3, r2, r3
 801051e:	b29a      	uxth	r2, r3
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 8010524:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010526:	68bb      	ldr	r3, [r7, #8]
 8010528:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 801052a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801052c:	68bb      	ldr	r3, [r7, #8]
 801052e:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 8010530:	68fb      	ldr	r3, [r7, #12]
 8010532:	3348      	adds	r3, #72	; 0x48
 8010534:	2200      	movs	r2, #0
 8010536:	601a      	str	r2, [r3, #0]
 8010538:	605a      	str	r2, [r3, #4]
 801053a:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 801053c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010540:	f083 0301 	eor.w	r3, r3, #1
 8010544:	b2db      	uxtb	r3, r3
 8010546:	2b00      	cmp	r3, #0
 8010548:	d078      	beq.n	801063c <lfs_dir_compact+0x5d0>
                lfs->gdisk = lfs->gstate;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	333c      	adds	r3, #60	; 0x3c
 8010550:	3230      	adds	r2, #48	; 0x30
 8010552:	ca07      	ldmia	r2, {r0, r1, r2}
 8010554:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 8010558:	e070      	b.n	801063c <lfs_dir_compact+0x5d0>
                    goto relocate;
 801055a:	bf00      	nop
 801055c:	e008      	b.n	8010570 <lfs_dir_compact+0x504>
                    goto relocate;
 801055e:	bf00      	nop
 8010560:	e006      	b.n	8010570 <lfs_dir_compact+0x504>
                    goto relocate;
 8010562:	bf00      	nop
 8010564:	e004      	b.n	8010570 <lfs_dir_compact+0x504>
                        goto relocate;
 8010566:	bf00      	nop
 8010568:	e002      	b.n	8010570 <lfs_dir_compact+0x504>
                        goto relocate;
 801056a:	bf00      	nop
 801056c:	e000      	b.n	8010570 <lfs_dir_compact+0x504>
                    goto relocate;
 801056e:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 8010570:	2301      	movs	r3, #1
 8010572:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        lfs_cache_drop(lfs, &lfs->pcache);
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	3310      	adds	r3, #16
 801057a:	4619      	mov	r1, r3
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f7fd f9e3 	bl	800d948 <lfs_cache_drop>
        if (!tired) {
 8010582:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8010586:	f083 0301 	eor.w	r3, r3, #1
 801058a:	b2db      	uxtb	r3, r3
 801058c:	2b00      	cmp	r3, #0
 801058e:	d009      	beq.n	80105a4 <lfs_dir_compact+0x538>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	4a26      	ldr	r2, [pc, #152]	; (8010630 <lfs_dir_compact+0x5c4>)
 8010596:	9200      	str	r2, [sp, #0]
 8010598:	f240 7202 	movw	r2, #1794	; 0x702
 801059c:	4923      	ldr	r1, [pc, #140]	; (801062c <lfs_dir_compact+0x5c0>)
 801059e:	4825      	ldr	r0, [pc, #148]	; (8010634 <lfs_dir_compact+0x5c8>)
 80105a0:	f014 fc0e 	bl	8024dc0 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	2200      	movs	r2, #0
 80105a8:	617a      	str	r2, [r7, #20]
 80105aa:	2201      	movs	r2, #1
 80105ac:	61ba      	str	r2, [r7, #24]
 80105ae:	f107 0214 	add.w	r2, r7, #20
 80105b2:	4611      	mov	r1, r2
 80105b4:	4618      	mov	r0, r3
 80105b6:	f7fd fd3f 	bl	800e038 <lfs_pair_cmp>
 80105ba:	4603      	mov	r3, r0
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d10c      	bne.n	80105da <lfs_dir_compact+0x56e>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 80105c0:	68bb      	ldr	r3, [r7, #8]
 80105c2:	685b      	ldr	r3, [r3, #4]
 80105c4:	4a1a      	ldr	r2, [pc, #104]	; (8010630 <lfs_dir_compact+0x5c4>)
 80105c6:	9200      	str	r2, [sp, #0]
 80105c8:	f240 7207 	movw	r2, #1799	; 0x707
 80105cc:	4917      	ldr	r1, [pc, #92]	; (801062c <lfs_dir_compact+0x5c0>)
 80105ce:	481a      	ldr	r0, [pc, #104]	; (8010638 <lfs_dir_compact+0x5cc>)
 80105d0:	f014 fbf6 	bl	8024dc0 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 80105d4:	f06f 031b 	mvn.w	r3, #27
 80105d8:	e055      	b.n	8010686 <lfs_dir_compact+0x61a>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 80105da:	68bb      	ldr	r3, [r7, #8]
 80105dc:	3304      	adds	r3, #4
 80105de:	4619      	mov	r1, r3
 80105e0:	68f8      	ldr	r0, [r7, #12]
 80105e2:	f7fe f85f 	bl	800e6a4 <lfs_alloc>
 80105e6:	66b8      	str	r0, [r7, #104]	; 0x68
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 80105e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d00c      	beq.n	8010608 <lfs_dir_compact+0x59c>
 80105ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80105f0:	f113 0f1c 	cmn.w	r3, #28
 80105f4:	d106      	bne.n	8010604 <lfs_dir_compact+0x598>
 80105f6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80105fa:	f083 0301 	eor.w	r3, r3, #1
 80105fe:	b2db      	uxtb	r3, r3
 8010600:	2b00      	cmp	r3, #0
 8010602:	d001      	beq.n	8010608 <lfs_dir_compact+0x59c>
            return err;
 8010604:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010606:	e03e      	b.n	8010686 <lfs_dir_compact+0x61a>
        }

        tired = false;
 8010608:	2300      	movs	r3, #0
 801060a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
        continue;
 801060e:	bf00      	nop
    while (true) {
 8010610:	e642      	b.n	8010298 <lfs_dir_compact+0x22c>
 8010612:	bf00      	nop
 8010614:	08010043 	.word	0x08010043
 8010618:	400ffc00 	.word	0x400ffc00
 801061c:	000ffc08 	.word	0x000ffc08
 8010620:	7ffffc0c 	.word	0x7ffffc0c
 8010624:	08029f60 	.word	0x08029f60
 8010628:	0802dcf4 	.word	0x0802dcf4
 801062c:	08029dd4 	.word	0x08029dd4
 8010630:	08029ee0 	.word	0x08029ee0
 8010634:	08029f88 	.word	0x08029f88
 8010638:	08029fac 	.word	0x08029fac
        break;
 801063c:	bf00      	nop
    }

    if (relocated) {
 801063e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8010642:	2b00      	cmp	r3, #0
 8010644:	d01e      	beq.n	8010684 <lfs_dir_compact+0x618>
        // update references if we relocated
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 8010646:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801064a:	68ba      	ldr	r2, [r7, #8]
 801064c:	6812      	ldr	r2, [r2, #0]
 801064e:	68b9      	ldr	r1, [r7, #8]
 8010650:	6849      	ldr	r1, [r1, #4]
 8010652:	4c0f      	ldr	r4, [pc, #60]	; (8010690 <lfs_dir_compact+0x624>)
 8010654:	9403      	str	r4, [sp, #12]
 8010656:	9102      	str	r1, [sp, #8]
 8010658:	9201      	str	r2, [sp, #4]
 801065a:	9300      	str	r3, [sp, #0]
 801065c:	4603      	mov	r3, r0
 801065e:	f44f 62e3 	mov.w	r2, #1816	; 0x718
 8010662:	490c      	ldr	r1, [pc, #48]	; (8010694 <lfs_dir_compact+0x628>)
 8010664:	480c      	ldr	r0, [pc, #48]	; (8010698 <lfs_dir_compact+0x62c>)
 8010666:	f014 fbab 	bl	8024dc0 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                oldpair[0], oldpair[1], dir->pair[0], dir->pair[1]);
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 801066a:	68ba      	ldr	r2, [r7, #8]
 801066c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8010670:	4619      	mov	r1, r3
 8010672:	68f8      	ldr	r0, [r7, #12]
 8010674:	f002 fdac 	bl	80131d0 <lfs_fs_relocate>
 8010678:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 801067a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801067c:	2b00      	cmp	r3, #0
 801067e:	d001      	beq.n	8010684 <lfs_dir_compact+0x618>
            return err;
 8010680:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010682:	e000      	b.n	8010686 <lfs_dir_compact+0x61a>
        }
    }

    return 0;
 8010684:	2300      	movs	r3, #0
}
 8010686:	4618      	mov	r0, r3
 8010688:	378c      	adds	r7, #140	; 0x8c
 801068a:	46bd      	mov	sp, r7
 801068c:	bd90      	pop	{r4, r7, pc}
 801068e:	bf00      	nop
 8010690:	08029ee0 	.word	0x08029ee0
 8010694:	08029dd4 	.word	0x08029dd4
 8010698:	08029fe4 	.word	0x08029fe4

0801069c <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 801069c:	b5b0      	push	{r4, r5, r7, lr}
 801069e:	b0b8      	sub	sp, #224	; 0xe0
 80106a0:	af0a      	add	r7, sp, #40	; 0x28
 80106a2:	60f8      	str	r0, [r7, #12]
 80106a4:	60b9      	str	r1, [r7, #8]
 80106a6:	607a      	str	r2, [r7, #4]
 80106a8:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 80106aa:	68fb      	ldr	r3, [r7, #12]
 80106ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80106b2:	e045      	b.n	8010740 <lfs_dir_commit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80106b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106b8:	3308      	adds	r3, #8
 80106ba:	68ba      	ldr	r2, [r7, #8]
 80106bc:	429a      	cmp	r2, r3
 80106be:	d03a      	beq.n	8010736 <lfs_dir_commit+0x9a>
 80106c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106c4:	3308      	adds	r3, #8
 80106c6:	68ba      	ldr	r2, [r7, #8]
 80106c8:	4611      	mov	r1, r2
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7fd fcb4 	bl	800e038 <lfs_pair_cmp>
 80106d0:	4603      	mov	r3, r0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d12f      	bne.n	8010736 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80106d6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106da:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 80106dc:	2b01      	cmp	r3, #1
 80106de:	d12a      	bne.n	8010736 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80106e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80106e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d023      	beq.n	8010736 <lfs_dir_commit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 80106ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80106f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d91b      	bls.n	8010736 <lfs_dir_commit+0x9a>
            int err = lfs_file_outline(lfs, f);
 80106fe:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8010702:	68f8      	ldr	r0, [r7, #12]
 8010704:	f001 faca 	bl	8011c9c <lfs_file_outline>
 8010708:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 801070c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010710:	2b00      	cmp	r3, #0
 8010712:	d002      	beq.n	801071a <lfs_dir_commit+0x7e>
                return err;
 8010714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010718:	e36e      	b.n	8010df8 <lfs_dir_commit+0x75c>
            }

            err = lfs_file_flush(lfs, f);
 801071a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801071e:	68f8      	ldr	r0, [r7, #12]
 8010720:	f001 fade 	bl	8011ce0 <lfs_file_flush>
 8010724:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 8010728:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801072c:	2b00      	cmp	r3, #0
 801072e:	d002      	beq.n	8010736 <lfs_dir_commit+0x9a>
                return err;
 8010730:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010734:	e360      	b.n	8010df8 <lfs_dir_commit+0x75c>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8010736:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010740:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8010744:	2b00      	cmp	r3, #0
 8010746:	d1b5      	bne.n	80106b4 <lfs_dir_commit+0x18>
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
 8010748:	68bb      	ldr	r3, [r7, #8]
 801074a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 801074e:	461d      	mov	r5, r3
 8010750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010754:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010758:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bool hasdelete = false;
 801075c:	2300      	movs	r3, #0
 801075e:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    for (int i = 0; i < attrcount; i++) {
 8010762:	2300      	movs	r3, #0
 8010764:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010768:	e075      	b.n	8010856 <lfs_dir_commit+0x1ba>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 801076a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801076e:	00db      	lsls	r3, r3, #3
 8010770:	687a      	ldr	r2, [r7, #4]
 8010772:	4413      	add	r3, r2
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4618      	mov	r0, r3
 8010778:	f7fd fd1a 	bl	800e1b0 <lfs_tag_type3>
 801077c:	4603      	mov	r3, r0
 801077e:	461a      	mov	r2, r3
 8010780:	f240 4301 	movw	r3, #1025	; 0x401
 8010784:	429a      	cmp	r2, r3
 8010786:	d106      	bne.n	8010796 <lfs_dir_commit+0xfa>
            dir->count += 1;
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	8a9b      	ldrh	r3, [r3, #20]
 801078c:	3301      	adds	r3, #1
 801078e:	b29a      	uxth	r2, r3
 8010790:	68bb      	ldr	r3, [r7, #8]
 8010792:	829a      	strh	r2, [r3, #20]
 8010794:	e05a      	b.n	801084c <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 8010796:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801079a:	00db      	lsls	r3, r3, #3
 801079c:	687a      	ldr	r2, [r7, #4]
 801079e:	4413      	add	r3, r2
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	4618      	mov	r0, r3
 80107a4:	f7fd fd04 	bl	800e1b0 <lfs_tag_type3>
 80107a8:	4603      	mov	r3, r0
 80107aa:	461a      	mov	r2, r3
 80107ac:	f240 43ff 	movw	r3, #1279	; 0x4ff
 80107b0:	429a      	cmp	r2, r3
 80107b2:	d114      	bne.n	80107de <lfs_dir_commit+0x142>
            LFS_ASSERT(dir->count > 0);
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	8a9b      	ldrh	r3, [r3, #20]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d106      	bne.n	80107ca <lfs_dir_commit+0x12e>
 80107bc:	4bac      	ldr	r3, [pc, #688]	; (8010a70 <lfs_dir_commit+0x3d4>)
 80107be:	4aad      	ldr	r2, [pc, #692]	; (8010a74 <lfs_dir_commit+0x3d8>)
 80107c0:	f240 7141 	movw	r1, #1857	; 0x741
 80107c4:	48ac      	ldr	r0, [pc, #688]	; (8010a78 <lfs_dir_commit+0x3dc>)
 80107c6:	f013 fc25 	bl	8024014 <__assert_func>
            dir->count -= 1;
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	8a9b      	ldrh	r3, [r3, #20]
 80107ce:	3b01      	subs	r3, #1
 80107d0:	b29a      	uxth	r2, r3
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 80107d6:	2301      	movs	r3, #1
 80107d8:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 80107dc:	e036      	b.n	801084c <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 80107de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	4413      	add	r3, r2
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fd fcd0 	bl	800e190 <lfs_tag_type1>
 80107f0:	4603      	mov	r3, r0
 80107f2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80107f6:	d129      	bne.n	801084c <lfs_dir_commit+0x1b0>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 80107f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80107fc:	00db      	lsls	r3, r3, #3
 80107fe:	687a      	ldr	r2, [r7, #4]
 8010800:	4413      	add	r3, r2
 8010802:	685b      	ldr	r3, [r3, #4]
 8010804:	681a      	ldr	r2, [r3, #0]
 8010806:	68bb      	ldr	r3, [r7, #8]
 8010808:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 801080a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801080e:	00db      	lsls	r3, r3, #3
 8010810:	687a      	ldr	r2, [r7, #4]
 8010812:	4413      	add	r3, r2
 8010814:	685b      	ldr	r3, [r3, #4]
 8010816:	685a      	ldr	r2, [r3, #4]
 8010818:	68bb      	ldr	r3, [r7, #8]
 801081a:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 801081c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010820:	00db      	lsls	r3, r3, #3
 8010822:	687a      	ldr	r2, [r7, #4]
 8010824:	4413      	add	r3, r2
 8010826:	681b      	ldr	r3, [r3, #0]
 8010828:	4618      	mov	r0, r3
 801082a:	f7fd fcd1 	bl	800e1d0 <lfs_tag_chunk>
 801082e:	4603      	mov	r3, r0
 8010830:	f003 0301 	and.w	r3, r3, #1
 8010834:	2b00      	cmp	r3, #0
 8010836:	bf14      	ite	ne
 8010838:	2301      	movne	r3, #1
 801083a:	2300      	moveq	r3, #0
 801083c:	b2da      	uxtb	r2, r3
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	3318      	adds	r3, #24
 8010846:	4618      	mov	r0, r3
 8010848:	f7fd fc4d 	bl	800e0e6 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 801084c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8010850:	3301      	adds	r3, #1
 8010852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010856:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801085a:	683b      	ldr	r3, [r7, #0]
 801085c:	429a      	cmp	r2, r3
 801085e:	db84      	blt.n	801076a <lfs_dir_commit+0xce>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 8010860:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8010864:	2b00      	cmp	r3, #0
 8010866:	d045      	beq.n	80108f4 <lfs_dir_commit+0x258>
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	8a9b      	ldrh	r3, [r3, #20]
 801086c:	2b00      	cmp	r3, #0
 801086e:	d141      	bne.n	80108f4 <lfs_dir_commit+0x258>
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 8010870:	68bb      	ldr	r3, [r7, #8]
 8010872:	f107 0214 	add.w	r2, r7, #20
 8010876:	4619      	mov	r1, r3
 8010878:	68f8      	ldr	r0, [r7, #12]
 801087a:	f002 fbc9 	bl	8013010 <lfs_fs_pred>
 801087e:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (err && err != LFS_ERR_NOENT) {
 8010882:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010886:	2b00      	cmp	r3, #0
 8010888:	d011      	beq.n	80108ae <lfs_dir_commit+0x212>
 801088a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801088e:	f113 0f02 	cmn.w	r3, #2
 8010892:	d00c      	beq.n	80108ae <lfs_dir_commit+0x212>
            *dir = olddir;
 8010894:	68bb      	ldr	r3, [r7, #8]
 8010896:	461d      	mov	r5, r3
 8010898:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 801089c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801089e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80108a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80108a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 80108a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80108ac:	e2a4      	b.n	8010df8 <lfs_dir_commit+0x75c>
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
 80108ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80108b2:	f113 0f02 	cmn.w	r3, #2
 80108b6:	d01d      	beq.n	80108f4 <lfs_dir_commit+0x258>
 80108b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d019      	beq.n	80108f4 <lfs_dir_commit+0x258>
            err = lfs_dir_drop(lfs, &pdir, dir);
 80108c0:	f107 0314 	add.w	r3, r7, #20
 80108c4:	68ba      	ldr	r2, [r7, #8]
 80108c6:	4619      	mov	r1, r3
 80108c8:	68f8      	ldr	r0, [r7, #12]
 80108ca:	f7ff fb11 	bl	800fef0 <lfs_dir_drop>
 80108ce:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (err) {
 80108d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d00c      	beq.n	80108f4 <lfs_dir_commit+0x258>
                *dir = olddir;
 80108da:	68bb      	ldr	r3, [r7, #8]
 80108dc:	461d      	mov	r5, r3
 80108de:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80108e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80108e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80108ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 80108ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80108f2:	e281      	b.n	8010df8 <lfs_dir_commit+0x75c>
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	7d9b      	ldrb	r3, [r3, #22]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d104      	bne.n	8010906 <lfs_dir_commit+0x26a>
 80108fc:	68bb      	ldr	r3, [r7, #8]
 80108fe:	8a9b      	ldrh	r3, [r3, #20]
 8010900:	2bfe      	cmp	r3, #254	; 0xfe
 8010902:	f240 8130 	bls.w	8010b66 <lfs_dir_commit+0x4ca>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 801090a:	657b      	str	r3, [r7, #84]	; 0x54
            .off = dir->off,
 801090c:	68bb      	ldr	r3, [r7, #8]
 801090e:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8010910:	65bb      	str	r3, [r7, #88]	; 0x58
            .ptag = dir->etag,
 8010912:	68bb      	ldr	r3, [r7, #8]
 8010914:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 8010916:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801091c:	663b      	str	r3, [r7, #96]	; 0x60
            .crc = 0xffffffff,

            .begin = dir->off,
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 8010922:	667b      	str	r3, [r7, #100]	; 0x64
            .end = (lfs->cfg->metadata_max ?
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 801092a:	2b00      	cmp	r3, #0
 801092c:	d004      	beq.n	8010938 <lfs_dir_commit+0x29c>
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010934:	3b08      	subs	r3, #8
 8010936:	e003      	b.n	8010940 <lfs_dir_commit+0x2a4>
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801093c:	69db      	ldr	r3, [r3, #28]
 801093e:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 8010940:	66bb      	str	r3, [r7, #104]	; 0x68
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	3318      	adds	r3, #24
 8010946:	4618      	mov	r0, r3
 8010948:	f7fd fbe7 	bl	800e11a <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	68da      	ldr	r2, [r3, #12]
 8010950:	68bb      	ldr	r3, [r7, #8]
 8010952:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010958:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801095c:	653b      	str	r3, [r7, #80]	; 0x50
        int err = lfs_dir_traverse(lfs,
 801095e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8010962:	9308      	str	r3, [sp, #32]
 8010964:	4b45      	ldr	r3, [pc, #276]	; (8010a7c <lfs_dir_commit+0x3e0>)
 8010966:	9307      	str	r3, [sp, #28]
 8010968:	2300      	movs	r3, #0
 801096a:	9306      	str	r3, [sp, #24]
 801096c:	2300      	movs	r3, #0
 801096e:	9305      	str	r3, [sp, #20]
 8010970:	2300      	movs	r3, #0
 8010972:	9304      	str	r3, [sp, #16]
 8010974:	2300      	movs	r3, #0
 8010976:	9303      	str	r3, [sp, #12]
 8010978:	2300      	movs	r3, #0
 801097a:	9302      	str	r3, [sp, #8]
 801097c:	683b      	ldr	r3, [r7, #0]
 801097e:	9301      	str	r3, [sp, #4]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	9300      	str	r3, [sp, #0]
 8010984:	460b      	mov	r3, r1
 8010986:	68b9      	ldr	r1, [r7, #8]
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f7fe f975 	bl	800ec78 <lfs_dir_traverse>
 801098e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	3318      	adds	r3, #24
 8010996:	4618      	mov	r0, r3
 8010998:	f7fd fba5 	bl	800e0e6 <lfs_pair_fromle32>
        if (err) {
 801099c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d018      	beq.n	80109d6 <lfs_dir_commit+0x33a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 80109a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80109a8:	f113 0f1c 	cmn.w	r3, #28
 80109ac:	f000 80dd 	beq.w	8010b6a <lfs_dir_commit+0x4ce>
 80109b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80109b4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80109b8:	f000 80d7 	beq.w	8010b6a <lfs_dir_commit+0x4ce>
                goto compact;
            }
            *dir = olddir;
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	461d      	mov	r5, r3
 80109c0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 80109c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80109c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80109c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80109cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 80109d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80109d4:	e210      	b.n	8010df8 <lfs_dir_commit+0x75c>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 80109d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80109da:	2200      	movs	r2, #0
 80109dc:	601a      	str	r2, [r3, #0]
 80109de:	605a      	str	r2, [r3, #4]
 80109e0:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80109e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80109ec:	4611      	mov	r1, r2
 80109ee:	4618      	mov	r0, r3
 80109f0:	f7fd fc39 	bl	800e266 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80109fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80109fe:	4611      	mov	r1, r2
 8010a00:	4618      	mov	r0, r3
 8010a02:	f7fd fc30 	bl	800e266 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8010a0c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a10:	4611      	mov	r1, r2
 8010a12:	4618      	mov	r0, r3
 8010a14:	f7fd fc27 	bl	800e266 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 8010a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010a1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8010a1e:	f023 0303 	bic.w	r3, r3, #3
 8010a22:	643b      	str	r3, [r7, #64]	; 0x40
        if (!lfs_gstate_iszero(&delta)) {
 8010a24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a28:	4618      	mov	r0, r3
 8010a2a:	f7fd fc41 	bl	800e2b0 <lfs_gstate_iszero>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	f083 0301 	eor.w	r3, r3, #1
 8010a34:	b2db      	uxtb	r3, r3
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d04c      	beq.n	8010ad4 <lfs_dir_commit+0x438>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 8010a3a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a3e:	461a      	mov	r2, r3
 8010a40:	68b9      	ldr	r1, [r7, #8]
 8010a42:	68f8      	ldr	r0, [r7, #12]
 8010a44:	f7fe fdf8 	bl	800f638 <lfs_dir_getgstate>
 8010a48:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            if (err) {
 8010a4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d015      	beq.n	8010a80 <lfs_dir_commit+0x3e4>
                *dir = olddir;
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	461d      	mov	r5, r3
 8010a58:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8010a5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010a5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010a60:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010a64:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 8010a68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010a6c:	e1c4      	b.n	8010df8 <lfs_dir_commit+0x75c>
 8010a6e:	bf00      	nop
 8010a70:	0802a020 	.word	0x0802a020
 8010a74:	0802dd04 	.word	0x0802dd04
 8010a78:	08029dd4 	.word	0x08029dd4
 8010a7c:	08010043 	.word	0x08010043
            }

            lfs_gstate_tole32(&delta);
 8010a80:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7fd fca5 	bl	800e3d4 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 8010a8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a8e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8010a92:	4aba      	ldr	r2, [pc, #744]	; (8010d7c <lfs_dir_commit+0x6e0>)
 8010a94:	68f8      	ldr	r0, [r7, #12]
 8010a96:	f7fe fff5 	bl	800fa84 <lfs_dir_commitattr>
 8010a9a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 8010a9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d016      	beq.n	8010ad4 <lfs_dir_commit+0x438>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8010aa6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010aaa:	f113 0f1c 	cmn.w	r3, #28
 8010aae:	d05e      	beq.n	8010b6e <lfs_dir_commit+0x4d2>
 8010ab0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ab4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8010ab8:	d059      	beq.n	8010b6e <lfs_dir_commit+0x4d2>
                    goto compact;
                }
                *dir = olddir;
 8010aba:	68bb      	ldr	r3, [r7, #8]
 8010abc:	461d      	mov	r5, r3
 8010abe:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8010ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010ac6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010aca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 8010ace:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ad2:	e191      	b.n	8010df8 <lfs_dir_commit+0x75c>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 8010ad4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8010ad8:	4619      	mov	r1, r3
 8010ada:	68f8      	ldr	r0, [r7, #12]
 8010adc:	f7ff f852 	bl	800fb84 <lfs_dir_commitcrc>
 8010ae0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if (err) {
 8010ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d016      	beq.n	8010b1a <lfs_dir_commit+0x47e>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 8010aec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010af0:	f113 0f1c 	cmn.w	r3, #28
 8010af4:	d03d      	beq.n	8010b72 <lfs_dir_commit+0x4d6>
 8010af6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010afa:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8010afe:	d038      	beq.n	8010b72 <lfs_dir_commit+0x4d6>
                goto compact;
            }
            *dir = olddir;
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	461d      	mov	r5, r3
 8010b04:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8010b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010b0c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010b10:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 8010b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010b18:	e16e      	b.n	8010df8 <lfs_dir_commit+0x75c>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 8010b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010b1c:	68fa      	ldr	r2, [r7, #12]
 8010b1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8010b20:	6992      	ldr	r2, [r2, #24]
 8010b22:	fbb3 f1f2 	udiv	r1, r3, r2
 8010b26:	fb01 f202 	mul.w	r2, r1, r2
 8010b2a:	1a9b      	subs	r3, r3, r2
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d006      	beq.n	8010b3e <lfs_dir_commit+0x4a2>
 8010b30:	4b93      	ldr	r3, [pc, #588]	; (8010d80 <lfs_dir_commit+0x6e4>)
 8010b32:	4a94      	ldr	r2, [pc, #592]	; (8010d84 <lfs_dir_commit+0x6e8>)
 8010b34:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 8010b38:	4893      	ldr	r0, [pc, #588]	; (8010d88 <lfs_dir_commit+0x6ec>)
 8010b3a:	f013 fa6b 	bl	8024014 <__assert_func>
        dir->off = commit.off;
 8010b3e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010b40:	68bb      	ldr	r3, [r7, #8]
 8010b42:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 8010b44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010b46:	68bb      	ldr	r3, [r7, #8]
 8010b48:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	68fa      	ldr	r2, [r7, #12]
 8010b4e:	333c      	adds	r3, #60	; 0x3c
 8010b50:	3230      	adds	r2, #48	; 0x30
 8010b52:	ca07      	ldmia	r2, {r0, r1, r2}
 8010b54:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	3348      	adds	r3, #72	; 0x48
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	601a      	str	r2, [r3, #0]
 8010b60:	605a      	str	r2, [r3, #4]
 8010b62:	609a      	str	r2, [r3, #8]
    if (dir->erased || dir->count >= 0xff) {
 8010b64:	e02c      	b.n	8010bc0 <lfs_dir_commit+0x524>
    } else {
compact:
 8010b66:	bf00      	nop
 8010b68:	e004      	b.n	8010b74 <lfs_dir_commit+0x4d8>
                goto compact;
 8010b6a:	bf00      	nop
 8010b6c:	e002      	b.n	8010b74 <lfs_dir_commit+0x4d8>
                    goto compact;
 8010b6e:	bf00      	nop
 8010b70:	e000      	b.n	8010b74 <lfs_dir_commit+0x4d8>
                goto compact;
 8010b72:	bf00      	nop
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);
 8010b74:	68fb      	ldr	r3, [r7, #12]
 8010b76:	3310      	adds	r3, #16
 8010b78:	4619      	mov	r1, r3
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	f7fc fee4 	bl	800d948 <lfs_cache_drop>

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 8010b80:	68bb      	ldr	r3, [r7, #8]
 8010b82:	8a9b      	ldrh	r3, [r3, #20]
 8010b84:	9302      	str	r3, [sp, #8]
 8010b86:	2300      	movs	r3, #0
 8010b88:	9301      	str	r3, [sp, #4]
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	9300      	str	r3, [sp, #0]
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	68b9      	ldr	r1, [r7, #8]
 8010b94:	68f8      	ldr	r0, [r7, #12]
 8010b96:	f7ff fa69 	bl	801006c <lfs_dir_compact>
 8010b9a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                dir, 0, dir->count);
        if (err) {
 8010b9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d00c      	beq.n	8010bc0 <lfs_dir_commit+0x524>
            *dir = olddir;
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	461d      	mov	r5, r3
 8010baa:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8010bae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010bb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010bb2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8010bb6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 8010bba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010bbe:	e11b      	b.n	8010df8 <lfs_dir_commit+0x75c>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010bc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010bc8:	e0c1      	b.n	8010d4e <lfs_dir_commit+0x6b2>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 8010bca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010bce:	3308      	adds	r3, #8
 8010bd0:	68ba      	ldr	r2, [r7, #8]
 8010bd2:	429a      	cmp	r2, r3
 8010bd4:	f000 80b6 	beq.w	8010d44 <lfs_dir_commit+0x6a8>
 8010bd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010bdc:	3308      	adds	r3, #8
 8010bde:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8010be2:	4611      	mov	r1, r2
 8010be4:	4618      	mov	r0, r3
 8010be6:	f7fd fa27 	bl	800e038 <lfs_pair_cmp>
 8010bea:	4603      	mov	r3, r0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	f040 80a9 	bne.w	8010d44 <lfs_dir_commit+0x6a8>
            d->m = *dir;
 8010bf2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010bf6:	68ba      	ldr	r2, [r7, #8]
 8010bf8:	f103 0408 	add.w	r4, r3, #8
 8010bfc:	4615      	mov	r5, r2
 8010bfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010c00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c02:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010c06:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010c10:	e092      	b.n	8010d38 <lfs_dir_commit+0x69c>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010c12:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c16:	00db      	lsls	r3, r3, #3
 8010c18:	687a      	ldr	r2, [r7, #4]
 8010c1a:	4413      	add	r3, r2
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7fd fac6 	bl	800e1b0 <lfs_tag_type3>
 8010c24:	4603      	mov	r3, r0
 8010c26:	461a      	mov	r2, r3
 8010c28:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8010c2c:	429a      	cmp	r2, r3
 8010c2e:	d119      	bne.n	8010c64 <lfs_dir_commit+0x5c8>
                        d->id == lfs_tag_id(attrs[i].tag)) {
 8010c30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c34:	889c      	ldrh	r4, [r3, #4]
 8010c36:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c3a:	00db      	lsls	r3, r3, #3
 8010c3c:	687a      	ldr	r2, [r7, #4]
 8010c3e:	4413      	add	r3, r2
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fd fade 	bl	800e204 <lfs_tag_id>
 8010c48:	4603      	mov	r3, r0
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010c4a:	429c      	cmp	r4, r3
 8010c4c:	d10a      	bne.n	8010c64 <lfs_dir_commit+0x5c8>
                    d->m.pair[0] = LFS_BLOCK_NULL;
 8010c4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c56:	609a      	str	r2, [r3, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
 8010c58:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c60:	60da      	str	r2, [r3, #12]
 8010c62:	e064      	b.n	8010d2e <lfs_dir_commit+0x692>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010c64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c68:	00db      	lsls	r3, r3, #3
 8010c6a:	687a      	ldr	r2, [r7, #4]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	4618      	mov	r0, r3
 8010c72:	f7fd fa9d 	bl	800e1b0 <lfs_tag_type3>
 8010c76:	4603      	mov	r3, r0
 8010c78:	461a      	mov	r2, r3
 8010c7a:	f240 43ff 	movw	r3, #1279	; 0x4ff
 8010c7e:	429a      	cmp	r2, r3
 8010c80:	d123      	bne.n	8010cca <lfs_dir_commit+0x62e>
                        d->id > lfs_tag_id(attrs[i].tag)) {
 8010c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010c86:	889c      	ldrh	r4, [r3, #4]
 8010c88:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010c8c:	00db      	lsls	r3, r3, #3
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	4413      	add	r3, r2
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fd fab5 	bl	800e204 <lfs_tag_id>
 8010c9a:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 8010c9c:	429c      	cmp	r4, r3
 8010c9e:	d914      	bls.n	8010cca <lfs_dir_commit+0x62e>
                    d->id -= 1;
 8010ca0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010ca4:	889b      	ldrh	r3, [r3, #4]
 8010ca6:	3b01      	subs	r3, #1
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010cae:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 8010cb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010cb4:	799b      	ldrb	r3, [r3, #6]
 8010cb6:	2b02      	cmp	r3, #2
 8010cb8:	d139      	bne.n	8010d2e <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos -= 1;
 8010cba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010cc0:	1e5a      	subs	r2, r3, #1
 8010cc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010cc6:	629a      	str	r2, [r3, #40]	; 0x28
                    if (d->type == LFS_TYPE_DIR) {
 8010cc8:	e031      	b.n	8010d2e <lfs_dir_commit+0x692>
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8010cca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010cce:	00db      	lsls	r3, r3, #3
 8010cd0:	687a      	ldr	r2, [r7, #4]
 8010cd2:	4413      	add	r3, r2
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fd fa6a 	bl	800e1b0 <lfs_tag_type3>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	461a      	mov	r2, r3
 8010ce0:	f240 4301 	movw	r3, #1025	; 0x401
 8010ce4:	429a      	cmp	r2, r3
 8010ce6:	d122      	bne.n	8010d2e <lfs_dir_commit+0x692>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
 8010ce8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010cec:	889c      	ldrh	r4, [r3, #4]
 8010cee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010cf2:	00db      	lsls	r3, r3, #3
 8010cf4:	687a      	ldr	r2, [r7, #4]
 8010cf6:	4413      	add	r3, r2
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fd fa82 	bl	800e204 <lfs_tag_id>
 8010d00:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 8010d02:	429c      	cmp	r4, r3
 8010d04:	d313      	bcc.n	8010d2e <lfs_dir_commit+0x692>
                    d->id += 1;
 8010d06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d0a:	889b      	ldrh	r3, [r3, #4]
 8010d0c:	3301      	adds	r3, #1
 8010d0e:	b29a      	uxth	r2, r3
 8010d10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d14:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 8010d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d1a:	799b      	ldrb	r3, [r3, #6]
 8010d1c:	2b02      	cmp	r3, #2
 8010d1e:	d106      	bne.n	8010d2e <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos += 1;
 8010d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d26:	1c5a      	adds	r2, r3, #1
 8010d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d2c:	629a      	str	r2, [r3, #40]	; 0x28
            for (int i = 0; i < attrcount; i++) {
 8010d2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010d32:	3301      	adds	r3, #1
 8010d34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010d38:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010d3c:	683b      	ldr	r3, [r7, #0]
 8010d3e:	429a      	cmp	r2, r3
 8010d40:	f6ff af67 	blt.w	8010c12 <lfs_dir_commit+0x576>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010d44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010d4e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	f47f af39 	bne.w	8010bca <lfs_dir_commit+0x52e>
                }
            }
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010d5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010d60:	e045      	b.n	8010dee <lfs_dir_commit+0x752>
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 8010d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d66:	3308      	adds	r3, #8
 8010d68:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8010d6c:	4611      	mov	r1, r2
 8010d6e:	4618      	mov	r0, r3
 8010d70:	f7fd f962 	bl	800e038 <lfs_pair_cmp>
 8010d74:	4603      	mov	r3, r0
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d134      	bne.n	8010de4 <lfs_dir_commit+0x748>
            while (d->id >= d->m.count && d->m.split) {
 8010d7a:	e026      	b.n	8010dca <lfs_dir_commit+0x72e>
 8010d7c:	7ffffc0c 	.word	0x7ffffc0c
 8010d80:	08029f60 	.word	0x08029f60
 8010d84:	0802dd04 	.word	0x0802dd04
 8010d88:	08029dd4 	.word	0x08029dd4
                // we split and id is on tail now
                d->id -= d->m.count;
 8010d8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d90:	889a      	ldrh	r2, [r3, #4]
 8010d92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010d96:	8b9b      	ldrh	r3, [r3, #28]
 8010d98:	1ad3      	subs	r3, r2, r3
 8010d9a:	b29a      	uxth	r2, r3
 8010d9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010da0:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 8010da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010da6:	f103 0108 	add.w	r1, r3, #8
 8010daa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010dae:	3320      	adds	r3, #32
 8010db0:	461a      	mov	r2, r3
 8010db2:	68f8      	ldr	r0, [r7, #12]
 8010db4:	f7fe fc24 	bl	800f600 <lfs_dir_fetch>
 8010db8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (err) {
 8010dbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d002      	beq.n	8010dca <lfs_dir_commit+0x72e>
                    return err;
 8010dc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010dc8:	e016      	b.n	8010df8 <lfs_dir_commit+0x75c>
            while (d->id >= d->m.count && d->m.split) {
 8010dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010dce:	889a      	ldrh	r2, [r3, #4]
 8010dd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010dd4:	8b9b      	ldrh	r3, [r3, #28]
 8010dd6:	429a      	cmp	r2, r3
 8010dd8:	d304      	bcc.n	8010de4 <lfs_dir_commit+0x748>
 8010dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010dde:	7fdb      	ldrb	r3, [r3, #31]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d1d3      	bne.n	8010d8c <lfs_dir_commit+0x6f0>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8010de4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1b5      	bne.n	8010d62 <lfs_dir_commit+0x6c6>
                }
            }
        }
    }

    return 0;
 8010df6:	2300      	movs	r3, #0
}
 8010df8:	4618      	mov	r0, r3
 8010dfa:	37b8      	adds	r7, #184	; 0xb8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bdb0      	pop	{r4, r5, r7, pc}

08010e00 <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 8010e00:	b5b0      	push	{r4, r5, r7, lr}
 8010e02:	b0b8      	sub	sp, #224	; 0xe0
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
 8010e08:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 8010e0a:	6878      	ldr	r0, [r7, #4]
 8010e0c:	f002 fd2a 	bl	8013864 <lfs_fs_forceconsistency>
 8010e10:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8010e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d002      	beq.n	8010e22 <lfs_rawmkdir+0x22>
        return err;
 8010e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e20:	e128      	b.n	8011074 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e26:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 8010e2a:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 8010e2e:	463a      	mov	r2, r7
 8010e30:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010e34:	f103 0108 	add.w	r1, r3, #8
 8010e38:	4603      	mov	r3, r0
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f7fe fcf2 	bl	800f824 <lfs_dir_find>
 8010e40:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 8010e44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e48:	f113 0f02 	cmn.w	r3, #2
 8010e4c:	d105      	bne.n	8010e5a <lfs_rawmkdir+0x5a>
 8010e4e:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8010e52:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d109      	bne.n	8010e6e <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 8010e5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	da02      	bge.n	8010e68 <lfs_rawmkdir+0x68>
 8010e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e66:	e105      	b.n	8011074 <lfs_rawmkdir+0x274>
 8010e68:	f06f 0310 	mvn.w	r3, #16
 8010e6c:	e102      	b.n	8011074 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 8010e6e:	683b      	ldr	r3, [r7, #0]
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7ef fa0d 	bl	8000290 <strlen>
 8010e76:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e7e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8010e82:	429a      	cmp	r2, r3
 8010e84:	d902      	bls.n	8010e8c <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 8010e86:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8010e8a:	e0f3      	b.n	8011074 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 8010e8c:	6878      	ldr	r0, [r7, #4]
 8010e8e:	f7fd fbe9 	bl	800e664 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 8010e92:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010e96:	4619      	mov	r1, r3
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f7fe ffaf 	bl	800fdfc <lfs_dir_alloc>
 8010e9e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 8010ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d002      	beq.n	8010eb0 <lfs_rawmkdir+0xb0>
        return err;
 8010eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010eae:	e0e1      	b.n	8011074 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 8010eb0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 8010eb4:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 8010eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010ebc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010ec0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 8010ec4:	e012      	b.n	8010eec <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 8010ec6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010eca:	f103 0218 	add.w	r2, r3, #24
 8010ece:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010ed2:	4619      	mov	r1, r3
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f7fe fb93 	bl	800f600 <lfs_dir_fetch>
 8010eda:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8010ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d002      	beq.n	8010eec <lfs_rawmkdir+0xec>
            return err;
 8010ee6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010eea:	e0c3      	b.n	8011074 <lfs_rawmkdir+0x274>
    while (pred.split) {
 8010eec:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d1e8      	bne.n	8010ec6 <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 8010ef4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010ef8:	3318      	adds	r3, #24
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fd f90d 	bl	800e11a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 8010f00:	4b5e      	ldr	r3, [pc, #376]	; (801107c <lfs_rawmkdir+0x27c>)
 8010f02:	667b      	str	r3, [r7, #100]	; 0x64
 8010f04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010f08:	3318      	adds	r3, #24
 8010f0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8010f0c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8010f10:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8010f14:	2301      	movs	r3, #1
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f7ff fbc0 	bl	801069c <lfs_dir_commit>
 8010f1c:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 8010f20:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8010f24:	3318      	adds	r3, #24
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7fd f8dd 	bl	800e0e6 <lfs_pair_fromle32>
    if (err) {
 8010f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d002      	beq.n	8010f3a <lfs_rawmkdir+0x13a>
        return err;
 8010f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f38:	e09c      	b.n	8011074 <lfs_rawmkdir+0x274>
    }

    // current block end of list?
    if (cwd.m.split) {
 8010f3a:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d04c      	beq.n	8010fdc <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 8010f42:	2101      	movs	r1, #1
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f002 faab 	bl	80134a0 <lfs_fs_preporphans>
 8010f4a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8010f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	d002      	beq.n	8010f5c <lfs_rawmkdir+0x15c>
            return err;
 8010f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010f5a:	e08b      	b.n	8011074 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 8010f5c:	2300      	movs	r3, #0
 8010f5e:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 8010f62:	2300      	movs	r3, #0
 8010f64:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8010f6e:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 8010f70:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010f74:	4618      	mov	r0, r3
 8010f76:	f7fd f8d0 	bl	800e11a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 8010f7a:	4b40      	ldr	r3, [pc, #256]	; (801107c <lfs_rawmkdir+0x27c>)
 8010f7c:	617b      	str	r3, [r7, #20]
 8010f7e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010f82:	61bb      	str	r3, [r7, #24]
 8010f84:	f107 0214 	add.w	r2, r7, #20
 8010f88:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8010f8c:	2301      	movs	r3, #1
 8010f8e:	6878      	ldr	r0, [r7, #4]
 8010f90:	f7ff fb84 	bl	801069c <lfs_dir_commit>
 8010f94:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 8010f98:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7fd f8a2 	bl	800e0e6 <lfs_pair_fromle32>
        if (err) {
 8010fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d006      	beq.n	8010fb8 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 8010faa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 8010fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010fb6:	e05d      	b.n	8011074 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 8010fb8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 8010fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f002 fa6b 	bl	80134a0 <lfs_fs_preporphans>
 8010fca:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 8010fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d002      	beq.n	8010fdc <lfs_rawmkdir+0x1dc>
            return err;
 8010fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010fda:	e04b      	b.n	8011074 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 8010fdc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f7fd f89a 	bl	800e11a <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 8010fe6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8010fea:	029b      	lsls	r3, r3, #10
 8010fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010ff0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010ff4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010ff6:	2300      	movs	r3, #0
 8010ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8010ffa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8010ffe:	029a      	lsls	r2, r3, #10
 8011000:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011004:	4313      	orrs	r3, r2
 8011006:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801100a:	647b      	str	r3, [r7, #68]	; 0x44
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	64bb      	str	r3, [r7, #72]	; 0x48
 8011010:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8011014:	029b      	lsls	r3, r3, #10
 8011016:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801101a:	f043 0308 	orr.w	r3, r3, #8
 801101e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011020:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011024:	653b      	str	r3, [r7, #80]	; 0x50
 8011026:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 801102a:	f083 0301 	eor.w	r3, r3, #1
 801102e:	b2db      	uxtb	r3, r3
 8011030:	2b00      	cmp	r3, #0
 8011032:	d001      	beq.n	8011038 <lfs_rawmkdir+0x238>
 8011034:	4b11      	ldr	r3, [pc, #68]	; (801107c <lfs_rawmkdir+0x27c>)
 8011036:	e000      	b.n	801103a <lfs_rawmkdir+0x23a>
 8011038:	2300      	movs	r3, #0
 801103a:	657b      	str	r3, [r7, #84]	; 0x54
 801103c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8011040:	65bb      	str	r3, [r7, #88]	; 0x58
 8011042:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8011046:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801104a:	f103 0108 	add.w	r1, r3, #8
 801104e:	2304      	movs	r3, #4
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f7ff fb23 	bl	801069c <lfs_dir_commit>
 8011056:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 801105a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801105e:	4618      	mov	r0, r3
 8011060:	f7fd f841 	bl	800e0e6 <lfs_pair_fromle32>
    if (err) {
 8011064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011068:	2b00      	cmp	r3, #0
 801106a:	d002      	beq.n	8011072 <lfs_rawmkdir+0x272>
        return err;
 801106c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011070:	e000      	b.n	8011074 <lfs_rawmkdir+0x274>
    }

    return 0;
 8011072:	2300      	movs	r3, #0
}
 8011074:	4618      	mov	r0, r3
 8011076:	37e0      	adds	r7, #224	; 0xe0
 8011078:	46bd      	mov	sp, r7
 801107a:	bdb0      	pop	{r4, r5, r7, pc}
 801107c:	600ffc08 	.word	0x600ffc08

08011080 <lfs_dir_rawopen>:
#endif

static int lfs_dir_rawopen(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8011080:	b590      	push	{r4, r7, lr}
 8011082:	b08d      	sub	sp, #52	; 0x34
 8011084:	af02      	add	r7, sp, #8
 8011086:	60f8      	str	r0, [r7, #12]
 8011088:	60b9      	str	r1, [r7, #8]
 801108a:	607a      	str	r2, [r7, #4]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	f103 0108 	add.w	r1, r3, #8
 8011092:	1d3a      	adds	r2, r7, #4
 8011094:	2300      	movs	r3, #0
 8011096:	68f8      	ldr	r0, [r7, #12]
 8011098:	f7fe fbc4 	bl	800f824 <lfs_dir_find>
 801109c:	6278      	str	r0, [r7, #36]	; 0x24
    if (tag < 0) {
 801109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	da01      	bge.n	80110a8 <lfs_dir_rawopen+0x28>
        return tag;
 80110a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a6:	e05e      	b.n	8011166 <lfs_dir_rawopen+0xe6>
    }

    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 80110a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110aa:	4618      	mov	r0, r3
 80110ac:	f7fd f880 	bl	800e1b0 <lfs_tag_type3>
 80110b0:	4603      	mov	r3, r0
 80110b2:	2b02      	cmp	r3, #2
 80110b4:	d002      	beq.n	80110bc <lfs_dir_rawopen+0x3c>
        return LFS_ERR_NOTDIR;
 80110b6:	f06f 0313 	mvn.w	r3, #19
 80110ba:	e054      	b.n	8011166 <lfs_dir_rawopen+0xe6>
    }

    lfs_block_t pair[2];
    if (lfs_tag_id(tag) == 0x3ff) {
 80110bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110be:	4618      	mov	r0, r3
 80110c0:	f7fd f8a0 	bl	800e204 <lfs_tag_id>
 80110c4:	4603      	mov	r3, r0
 80110c6:	461a      	mov	r2, r3
 80110c8:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80110cc:	429a      	cmp	r2, r3
 80110ce:	d106      	bne.n	80110de <lfs_dir_rawopen+0x5e>
        // handle root dir separately
        pair[0] = lfs->root[0];
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	6a1b      	ldr	r3, [r3, #32]
 80110d4:	617b      	str	r3, [r7, #20]
        pair[1] = lfs->root[1];
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110da:	61bb      	str	r3, [r7, #24]
 80110dc:	e01f      	b.n	801111e <lfs_dir_rawopen+0x9e>
    } else {
        // get dir pair from parent
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	f103 0408 	add.w	r4, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
 80110e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e6:	4618      	mov	r0, r3
 80110e8:	f7fd f88c 	bl	800e204 <lfs_tag_id>
 80110ec:	4603      	mov	r3, r0
 80110ee:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
 80110f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80110f4:	f043 0308 	orr.w	r3, r3, #8
 80110f8:	f107 0214 	add.w	r2, r7, #20
 80110fc:	9200      	str	r2, [sp, #0]
 80110fe:	4a1c      	ldr	r2, [pc, #112]	; (8011170 <lfs_dir_rawopen+0xf0>)
 8011100:	4621      	mov	r1, r4
 8011102:	68f8      	ldr	r0, [r7, #12]
 8011104:	f7fd fc68 	bl	800e9d8 <lfs_dir_get>
 8011108:	6238      	str	r0, [r7, #32]
        if (res < 0) {
 801110a:	6a3b      	ldr	r3, [r7, #32]
 801110c:	2b00      	cmp	r3, #0
 801110e:	da01      	bge.n	8011114 <lfs_dir_rawopen+0x94>
            return res;
 8011110:	6a3b      	ldr	r3, [r7, #32]
 8011112:	e028      	b.n	8011166 <lfs_dir_rawopen+0xe6>
        }
        lfs_pair_fromle32(pair);
 8011114:	f107 0314 	add.w	r3, r7, #20
 8011118:	4618      	mov	r0, r3
 801111a:	f7fc ffe4 	bl	800e0e6 <lfs_pair_fromle32>
    }

    // fetch first pair
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
 801111e:	68bb      	ldr	r3, [r7, #8]
 8011120:	3308      	adds	r3, #8
 8011122:	f107 0214 	add.w	r2, r7, #20
 8011126:	4619      	mov	r1, r3
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f7fe fa69 	bl	800f600 <lfs_dir_fetch>
 801112e:	61f8      	str	r0, [r7, #28]
    if (err) {
 8011130:	69fb      	ldr	r3, [r7, #28]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d001      	beq.n	801113a <lfs_dir_rawopen+0xba>
        return err;
 8011136:	69fb      	ldr	r3, [r7, #28]
 8011138:	e015      	b.n	8011166 <lfs_dir_rawopen+0xe6>
    }

    // setup entry
    dir->head[0] = dir->m.pair[0];
 801113a:	68bb      	ldr	r3, [r7, #8]
 801113c:	689a      	ldr	r2, [r3, #8]
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	62da      	str	r2, [r3, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	68da      	ldr	r2, [r3, #12]
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	631a      	str	r2, [r3, #48]	; 0x30
    dir->id = 0;
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	2200      	movs	r2, #0
 801114e:	809a      	strh	r2, [r3, #4]
    dir->pos = 0;
 8011150:	68bb      	ldr	r3, [r7, #8]
 8011152:	2200      	movs	r2, #0
 8011154:	629a      	str	r2, [r3, #40]	; 0x28

    // add to list of mdirs
    dir->type = LFS_TYPE_DIR;
 8011156:	68bb      	ldr	r3, [r7, #8]
 8011158:	2202      	movs	r2, #2
 801115a:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)dir);
 801115c:	68b9      	ldr	r1, [r7, #8]
 801115e:	68f8      	ldr	r0, [r7, #12]
 8011160:	f7fd fa37 	bl	800e5d2 <lfs_mlist_append>

    return 0;
 8011164:	2300      	movs	r3, #0
}
 8011166:	4618      	mov	r0, r3
 8011168:	372c      	adds	r7, #44	; 0x2c
 801116a:	46bd      	mov	sp, r7
 801116c:	bd90      	pop	{r4, r7, pc}
 801116e:	bf00      	nop
 8011170:	700ffc00 	.word	0x700ffc00

08011174 <lfs_dir_rawclose>:

static int lfs_dir_rawclose(lfs_t *lfs, lfs_dir_t *dir) {
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist *)dir);
 801117e:	6839      	ldr	r1, [r7, #0]
 8011180:	6878      	ldr	r0, [r7, #4]
 8011182:	f7fd fa04 	bl	800e58e <lfs_mlist_remove>

    return 0;
 8011186:	2300      	movs	r3, #0
}
 8011188:	4618      	mov	r0, r3
 801118a:	3708      	adds	r7, #8
 801118c:	46bd      	mov	sp, r7
 801118e:	bd80      	pop	{r7, pc}

08011190 <lfs_dir_rawread>:

static int lfs_dir_rawread(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8011190:	b580      	push	{r7, lr}
 8011192:	b086      	sub	sp, #24
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	607a      	str	r2, [r7, #4]
    memset(info, 0, sizeof(*info));
 801119c:	f44f 7284 	mov.w	r2, #264	; 0x108
 80111a0:	2100      	movs	r1, #0
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f013 ffd2 	bl	802514c <memset>

    // special offset for '.' and '..'
    if (dir->pos == 0) {
 80111a8:	68bb      	ldr	r3, [r7, #8]
 80111aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d110      	bne.n	80111d2 <lfs_dir_rawread+0x42>
        info->type = LFS_TYPE_DIR;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	2202      	movs	r2, #2
 80111b4:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, ".");
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	3308      	adds	r3, #8
 80111ba:	4935      	ldr	r1, [pc, #212]	; (8011290 <lfs_dir_rawread+0x100>)
 80111bc:	461a      	mov	r2, r3
 80111be:	460b      	mov	r3, r1
 80111c0:	881b      	ldrh	r3, [r3, #0]
 80111c2:	8013      	strh	r3, [r2, #0]
        dir->pos += 1;
 80111c4:	68bb      	ldr	r3, [r7, #8]
 80111c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111c8:	1c5a      	adds	r2, r3, #1
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 80111ce:	2301      	movs	r3, #1
 80111d0:	e05a      	b.n	8011288 <lfs_dir_rawread+0xf8>
    } else if (dir->pos == 1) {
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111d6:	2b01      	cmp	r3, #1
 80111d8:	d110      	bne.n	80111fc <lfs_dir_rawread+0x6c>
        info->type = LFS_TYPE_DIR;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2202      	movs	r2, #2
 80111de:	701a      	strb	r2, [r3, #0]
        strcpy(info->name, "..");
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	3308      	adds	r3, #8
 80111e4:	4a2b      	ldr	r2, [pc, #172]	; (8011294 <lfs_dir_rawread+0x104>)
 80111e6:	8811      	ldrh	r1, [r2, #0]
 80111e8:	7892      	ldrb	r2, [r2, #2]
 80111ea:	8019      	strh	r1, [r3, #0]
 80111ec:	709a      	strb	r2, [r3, #2]
        dir->pos += 1;
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111f2:	1c5a      	adds	r2, r3, #1
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	629a      	str	r2, [r3, #40]	; 0x28
        return true;
 80111f8:	2301      	movs	r3, #1
 80111fa:	e045      	b.n	8011288 <lfs_dir_rawread+0xf8>
    }

    while (true) {
        if (dir->id == dir->m.count) {
 80111fc:	68bb      	ldr	r3, [r7, #8]
 80111fe:	889a      	ldrh	r2, [r3, #4]
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	8b9b      	ldrh	r3, [r3, #28]
 8011204:	429a      	cmp	r2, r3
 8011206:	d11a      	bne.n	801123e <lfs_dir_rawread+0xae>
            if (!dir->m.split) {
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	7fdb      	ldrb	r3, [r3, #31]
 801120c:	f083 0301 	eor.w	r3, r3, #1
 8011210:	b2db      	uxtb	r3, r3
 8011212:	2b00      	cmp	r3, #0
 8011214:	d001      	beq.n	801121a <lfs_dir_rawread+0x8a>
                return false;
 8011216:	2300      	movs	r3, #0
 8011218:	e036      	b.n	8011288 <lfs_dir_rawread+0xf8>
            }

            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
 801121a:	68bb      	ldr	r3, [r7, #8]
 801121c:	f103 0108 	add.w	r1, r3, #8
 8011220:	68bb      	ldr	r3, [r7, #8]
 8011222:	3320      	adds	r3, #32
 8011224:	461a      	mov	r2, r3
 8011226:	68f8      	ldr	r0, [r7, #12]
 8011228:	f7fe f9ea 	bl	800f600 <lfs_dir_fetch>
 801122c:	6178      	str	r0, [r7, #20]
            if (err) {
 801122e:	697b      	ldr	r3, [r7, #20]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d001      	beq.n	8011238 <lfs_dir_rawread+0xa8>
                return err;
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	e027      	b.n	8011288 <lfs_dir_rawread+0xf8>
            }

            dir->id = 0;
 8011238:	68bb      	ldr	r3, [r7, #8]
 801123a:	2200      	movs	r2, #0
 801123c:	809a      	strh	r2, [r3, #4]
        }

        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
 801123e:	68bb      	ldr	r3, [r7, #8]
 8011240:	f103 0108 	add.w	r1, r3, #8
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	889a      	ldrh	r2, [r3, #4]
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f7fe fa26 	bl	800f69c <lfs_dir_getinfo>
 8011250:	6138      	str	r0, [r7, #16]
        if (err && err != LFS_ERR_NOENT) {
 8011252:	693b      	ldr	r3, [r7, #16]
 8011254:	2b00      	cmp	r3, #0
 8011256:	d005      	beq.n	8011264 <lfs_dir_rawread+0xd4>
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	f113 0f02 	cmn.w	r3, #2
 801125e:	d001      	beq.n	8011264 <lfs_dir_rawread+0xd4>
            return err;
 8011260:	693b      	ldr	r3, [r7, #16]
 8011262:	e011      	b.n	8011288 <lfs_dir_rawread+0xf8>
        }

        dir->id += 1;
 8011264:	68bb      	ldr	r3, [r7, #8]
 8011266:	889b      	ldrh	r3, [r3, #4]
 8011268:	3301      	adds	r3, #1
 801126a:	b29a      	uxth	r2, r3
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	809a      	strh	r2, [r3, #4]
        if (err != LFS_ERR_NOENT) {
 8011270:	693b      	ldr	r3, [r7, #16]
 8011272:	f113 0f02 	cmn.w	r3, #2
 8011276:	d100      	bne.n	801127a <lfs_dir_rawread+0xea>
    while (true) {
 8011278:	e7c0      	b.n	80111fc <lfs_dir_rawread+0x6c>
            break;
 801127a:	bf00      	nop
        }
    }

    dir->pos += 1;
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011280:	1c5a      	adds	r2, r3, #1
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	629a      	str	r2, [r3, #40]	; 0x28
    return true;
 8011286:	2301      	movs	r3, #1
}
 8011288:	4618      	mov	r0, r3
 801128a:	3718      	adds	r7, #24
 801128c:	46bd      	mov	sp, r7
 801128e:	bd80      	pop	{r7, pc}
 8011290:	08029f28 	.word	0x08029f28
 8011294:	08029f2c 	.word	0x08029f2c

08011298 <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 8011298:	b590      	push	{r4, r7, lr}
 801129a:	b087      	sub	sp, #28
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 80112a2:	683b      	ldr	r3, [r7, #0]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112ac:	69db      	ldr	r3, [r3, #28]
 80112ae:	3b08      	subs	r3, #8
 80112b0:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 80112b2:	697a      	ldr	r2, [r7, #20]
 80112b4:	693b      	ldr	r3, [r7, #16]
 80112b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80112ba:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 80112bc:	68fb      	ldr	r3, [r7, #12]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d101      	bne.n	80112c6 <lfs_ctz_index+0x2e>
        return 0;
 80112c2:	2300      	movs	r3, #0
 80112c4:	e01c      	b.n	8011300 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	3b01      	subs	r3, #1
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7fc fadc 	bl	800d888 <lfs_popc>
 80112d0:	4603      	mov	r3, r0
 80112d2:	3302      	adds	r3, #2
 80112d4:	009b      	lsls	r3, r3, #2
 80112d6:	697a      	ldr	r2, [r7, #20]
 80112d8:	1ad2      	subs	r2, r2, r3
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80112e0:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 80112e2:	693b      	ldr	r3, [r7, #16]
 80112e4:	68fa      	ldr	r2, [r7, #12]
 80112e6:	fb02 f303 	mul.w	r3, r2, r3
 80112ea:	697a      	ldr	r2, [r7, #20]
 80112ec:	1ad4      	subs	r4, r2, r3
 80112ee:	68f8      	ldr	r0, [r7, #12]
 80112f0:	f7fc faca 	bl	800d888 <lfs_popc>
 80112f4:	4603      	mov	r3, r0
 80112f6:	009b      	lsls	r3, r3, #2
 80112f8:	1ae2      	subs	r2, r4, r3
 80112fa:	683b      	ldr	r3, [r7, #0]
 80112fc:	601a      	str	r2, [r3, #0]
    return i;
 80112fe:	68fb      	ldr	r3, [r7, #12]
}
 8011300:	4618      	mov	r0, r3
 8011302:	371c      	adds	r7, #28
 8011304:	46bd      	mov	sp, r7
 8011306:	bd90      	pop	{r4, r7, pc}

08011308 <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 8011308:	b590      	push	{r4, r7, lr}
 801130a:	b08f      	sub	sp, #60	; 0x3c
 801130c:	af04      	add	r7, sp, #16
 801130e:	60f8      	str	r0, [r7, #12]
 8011310:	60b9      	str	r1, [r7, #8]
 8011312:	607a      	str	r2, [r7, #4]
 8011314:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 8011316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011318:	2b00      	cmp	r3, #0
 801131a:	d108      	bne.n	801132e <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 801131c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801131e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011322:	601a      	str	r2, [r3, #0]
        *off = 0;
 8011324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011326:	2200      	movs	r2, #0
 8011328:	601a      	str	r2, [r3, #0]
        return 0;
 801132a:	2300      	movs	r3, #0
 801132c:	e053      	b.n	80113d6 <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 801132e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011330:	3b01      	subs	r3, #1
 8011332:	617b      	str	r3, [r7, #20]
 8011334:	f107 0314 	add.w	r3, r7, #20
 8011338:	4619      	mov	r1, r3
 801133a:	68f8      	ldr	r0, [r7, #12]
 801133c:	f7ff ffac 	bl	8011298 <lfs_ctz_index>
 8011340:	4603      	mov	r3, r0
 8011342:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 8011344:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011348:	4619      	mov	r1, r3
 801134a:	68f8      	ldr	r0, [r7, #12]
 801134c:	f7ff ffa4 	bl	8011298 <lfs_ctz_index>
 8011350:	4603      	mov	r3, r0
 8011352:	623b      	str	r3, [r7, #32]

    while (current > target) {
 8011354:	e034      	b.n	80113c0 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 8011356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011358:	6a3b      	ldr	r3, [r7, #32]
 801135a:	1ad3      	subs	r3, r2, r3
 801135c:	3301      	adds	r3, #1
 801135e:	4618      	mov	r0, r3
 8011360:	f7fc fa73 	bl	800d84a <lfs_npw2>
 8011364:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 8011366:	1e5c      	subs	r4, r3, #1
 8011368:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801136a:	f7fc fa7e 	bl	800d86a <lfs_ctz>
 801136e:	4603      	mov	r3, r0
 8011370:	4619      	mov	r1, r3
 8011372:	4620      	mov	r0, r4
 8011374:	f7fc fa32 	bl	800d7dc <lfs_min>
 8011378:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 801137a:	683b      	ldr	r3, [r7, #0]
 801137c:	69fa      	ldr	r2, [r7, #28]
 801137e:	0092      	lsls	r2, r2, #2
 8011380:	2104      	movs	r1, #4
 8011382:	9103      	str	r1, [sp, #12]
 8011384:	4639      	mov	r1, r7
 8011386:	9102      	str	r1, [sp, #8]
 8011388:	9201      	str	r2, [sp, #4]
 801138a:	9300      	str	r3, [sp, #0]
 801138c:	2304      	movs	r3, #4
 801138e:	687a      	ldr	r2, [r7, #4]
 8011390:	68b9      	ldr	r1, [r7, #8]
 8011392:	68f8      	ldr	r0, [r7, #12]
 8011394:	f7fc fafe 	bl	800d994 <lfs_bd_read>
 8011398:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	4618      	mov	r0, r3
 801139e:	f7fc fa8d 	bl	800d8bc <lfs_fromle32>
 80113a2:	4603      	mov	r3, r0
 80113a4:	603b      	str	r3, [r7, #0]
        if (err) {
 80113a6:	69bb      	ldr	r3, [r7, #24]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d001      	beq.n	80113b0 <lfs_ctz_find+0xa8>
            return err;
 80113ac:	69bb      	ldr	r3, [r7, #24]
 80113ae:	e012      	b.n	80113d6 <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 80113b0:	2201      	movs	r2, #1
 80113b2:	69fb      	ldr	r3, [r7, #28]
 80113b4:	fa02 f303 	lsl.w	r3, r2, r3
 80113b8:	461a      	mov	r2, r3
 80113ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113bc:	1a9b      	subs	r3, r3, r2
 80113be:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 80113c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113c2:	6a3b      	ldr	r3, [r7, #32]
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d8c6      	bhi.n	8011356 <lfs_ctz_find+0x4e>
    }

    *block = head;
 80113c8:	683a      	ldr	r2, [r7, #0]
 80113ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113cc:	601a      	str	r2, [r3, #0]
    *off = pos;
 80113ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80113d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113d2:	601a      	str	r2, [r3, #0]
    return 0;
 80113d4:	2300      	movs	r3, #0
}
 80113d6:	4618      	mov	r0, r3
 80113d8:	372c      	adds	r7, #44	; 0x2c
 80113da:	46bd      	mov	sp, r7
 80113dc:	bd90      	pop	{r4, r7, pc}
	...

080113e0 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b092      	sub	sp, #72	; 0x48
 80113e4:	af04      	add	r7, sp, #16
 80113e6:	60f8      	str	r0, [r7, #12]
 80113e8:	60b9      	str	r1, [r7, #8]
 80113ea:	607a      	str	r2, [r7, #4]
 80113ec:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 80113ee:	f107 0320 	add.w	r3, r7, #32
 80113f2:	4619      	mov	r1, r3
 80113f4:	68f8      	ldr	r0, [r7, #12]
 80113f6:	f7fd f955 	bl	800e6a4 <lfs_alloc>
 80113fa:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 80113fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d001      	beq.n	8011406 <lfs_ctz_extend+0x26>
            return err;
 8011402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011404:	e0e9      	b.n	80115da <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 8011406:	6a3b      	ldr	r3, [r7, #32]
 8011408:	4619      	mov	r1, r3
 801140a:	68f8      	ldr	r0, [r7, #12]
 801140c:	f7fc fdb4 	bl	800df78 <lfs_bd_erase>
 8011410:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 8011412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011414:	2b00      	cmp	r3, #0
 8011416:	d006      	beq.n	8011426 <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 8011418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801141a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 801141e:	f000 80cb 	beq.w	80115b8 <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 8011422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011424:	e0d9      	b.n	80115da <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 8011426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011428:	2b00      	cmp	r3, #0
 801142a:	d107      	bne.n	801143c <lfs_ctz_extend+0x5c>
                *block = nblock;
 801142c:	6a3a      	ldr	r2, [r7, #32]
 801142e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011430:	601a      	str	r2, [r3, #0]
                *off = 0;
 8011432:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011434:	2200      	movs	r2, #0
 8011436:	601a      	str	r2, [r3, #0]
                return 0;
 8011438:	2300      	movs	r3, #0
 801143a:	e0ce      	b.n	80115da <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 801143c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801143e:	3b01      	subs	r3, #1
 8011440:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 8011442:	f107 031c 	add.w	r3, r7, #28
 8011446:	4619      	mov	r1, r3
 8011448:	68f8      	ldr	r0, [r7, #12]
 801144a:	f7ff ff25 	bl	8011298 <lfs_ctz_index>
 801144e:	4603      	mov	r3, r0
 8011450:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	3301      	adds	r3, #1
 8011456:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801145c:	69da      	ldr	r2, [r3, #28]
 801145e:	69fb      	ldr	r3, [r7, #28]
 8011460:	429a      	cmp	r2, r3
 8011462:	d044      	beq.n	80114ee <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 8011464:	2300      	movs	r3, #0
 8011466:	637b      	str	r3, [r7, #52]	; 0x34
 8011468:	e035      	b.n	80114d6 <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 801146a:	69fa      	ldr	r2, [r7, #28]
 801146c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801146e:	1ad2      	subs	r2, r2, r3
 8011470:	2301      	movs	r3, #1
 8011472:	9303      	str	r3, [sp, #12]
 8011474:	f107 0317 	add.w	r3, r7, #23
 8011478:	9302      	str	r3, [sp, #8]
 801147a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801147c:	9301      	str	r3, [sp, #4]
 801147e:	683b      	ldr	r3, [r7, #0]
 8011480:	9300      	str	r3, [sp, #0]
 8011482:	4613      	mov	r3, r2
 8011484:	687a      	ldr	r2, [r7, #4]
 8011486:	2100      	movs	r1, #0
 8011488:	68f8      	ldr	r0, [r7, #12]
 801148a:	f7fc fa83 	bl	800d994 <lfs_bd_read>
 801148e:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 8011490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011492:	2b00      	cmp	r3, #0
 8011494:	d001      	beq.n	801149a <lfs_ctz_extend+0xba>
                        return err;
 8011496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011498:	e09f      	b.n	80115da <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 801149a:	6a3b      	ldr	r3, [r7, #32]
 801149c:	2201      	movs	r2, #1
 801149e:	9203      	str	r2, [sp, #12]
 80114a0:	f107 0217 	add.w	r2, r7, #23
 80114a4:	9202      	str	r2, [sp, #8]
 80114a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114a8:	9201      	str	r2, [sp, #4]
 80114aa:	9300      	str	r3, [sp, #0]
 80114ac:	2301      	movs	r3, #1
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	68b9      	ldr	r1, [r7, #8]
 80114b2:	68f8      	ldr	r0, [r7, #12]
 80114b4:	f7fc fcb4 	bl	800de20 <lfs_bd_prog>
 80114b8:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 80114ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d007      	beq.n	80114d0 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 80114c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 80114c6:	d101      	bne.n	80114cc <lfs_ctz_extend+0xec>
                            goto relocate;
 80114c8:	bf00      	nop
                    goto relocate;
 80114ca:	e075      	b.n	80115b8 <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 80114cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 80114ce:	e084      	b.n	80115da <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 80114d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80114d2:	3301      	adds	r3, #1
 80114d4:	637b      	str	r3, [r7, #52]	; 0x34
 80114d6:	69fb      	ldr	r3, [r7, #28]
 80114d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80114da:	429a      	cmp	r2, r3
 80114dc:	d3c5      	bcc.n	801146a <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 80114de:	6a3a      	ldr	r2, [r7, #32]
 80114e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114e2:	601a      	str	r2, [r3, #0]
                *off = noff;
 80114e4:	69fa      	ldr	r2, [r7, #28]
 80114e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114e8:	601a      	str	r2, [r3, #0]
                return 0;
 80114ea:	2300      	movs	r3, #0
 80114ec:	e075      	b.n	80115da <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 80114ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114f0:	3301      	adds	r3, #1
 80114f2:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 80114f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114f6:	f7fc f9b8 	bl	800d86a <lfs_ctz>
 80114fa:	4603      	mov	r3, r0
 80114fc:	3301      	adds	r3, #1
 80114fe:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 8011504:	2300      	movs	r3, #0
 8011506:	633b      	str	r3, [r7, #48]	; 0x30
 8011508:	e049      	b.n	801159e <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 801150a:	69bb      	ldr	r3, [r7, #24]
 801150c:	4618      	mov	r0, r3
 801150e:	f7fc f9e0 	bl	800d8d2 <lfs_tole32>
 8011512:	4603      	mov	r3, r0
 8011514:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 8011516:	6a3b      	ldr	r3, [r7, #32]
 8011518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801151a:	0092      	lsls	r2, r2, #2
 801151c:	2104      	movs	r1, #4
 801151e:	9103      	str	r1, [sp, #12]
 8011520:	f107 0118 	add.w	r1, r7, #24
 8011524:	9102      	str	r1, [sp, #8]
 8011526:	9201      	str	r2, [sp, #4]
 8011528:	9300      	str	r3, [sp, #0]
 801152a:	2301      	movs	r3, #1
 801152c:	687a      	ldr	r2, [r7, #4]
 801152e:	68b9      	ldr	r1, [r7, #8]
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	f7fc fc75 	bl	800de20 <lfs_bd_prog>
 8011536:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 8011538:	69bb      	ldr	r3, [r7, #24]
 801153a:	4618      	mov	r0, r3
 801153c:	f7fc f9be 	bl	800d8bc <lfs_fromle32>
 8011540:	4603      	mov	r3, r0
 8011542:	61bb      	str	r3, [r7, #24]
                if (err) {
 8011544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011546:	2b00      	cmp	r3, #0
 8011548:	d005      	beq.n	8011556 <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 801154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8011550:	d034      	beq.n	80115bc <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 8011552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011554:	e041      	b.n	80115da <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 8011556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011558:	3b01      	subs	r3, #1
 801155a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801155c:	429a      	cmp	r2, r3
 801155e:	d01b      	beq.n	8011598 <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 8011560:	69bb      	ldr	r3, [r7, #24]
 8011562:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011564:	0092      	lsls	r2, r2, #2
 8011566:	2104      	movs	r1, #4
 8011568:	9103      	str	r1, [sp, #12]
 801156a:	f107 0118 	add.w	r1, r7, #24
 801156e:	9102      	str	r1, [sp, #8]
 8011570:	9201      	str	r2, [sp, #4]
 8011572:	9300      	str	r3, [sp, #0]
 8011574:	2304      	movs	r3, #4
 8011576:	687a      	ldr	r2, [r7, #4]
 8011578:	2100      	movs	r1, #0
 801157a:	68f8      	ldr	r0, [r7, #12]
 801157c:	f7fc fa0a 	bl	800d994 <lfs_bd_read>
 8011580:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 8011582:	69bb      	ldr	r3, [r7, #24]
 8011584:	4618      	mov	r0, r3
 8011586:	f7fc f999 	bl	800d8bc <lfs_fromle32>
 801158a:	4603      	mov	r3, r0
 801158c:	61bb      	str	r3, [r7, #24]
                    if (err) {
 801158e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011590:	2b00      	cmp	r3, #0
 8011592:	d001      	beq.n	8011598 <lfs_ctz_extend+0x1b8>
                        return err;
 8011594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011596:	e020      	b.n	80115da <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 8011598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159a:	3301      	adds	r3, #1
 801159c:	633b      	str	r3, [r7, #48]	; 0x30
 801159e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80115a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a2:	429a      	cmp	r2, r3
 80115a4:	d3b1      	bcc.n	801150a <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 80115a6:	6a3a      	ldr	r2, [r7, #32]
 80115a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80115aa:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 80115ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ae:	009a      	lsls	r2, r3, #2
 80115b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80115b2:	601a      	str	r2, [r3, #0]
            return 0;
 80115b4:	2300      	movs	r3, #0
 80115b6:	e010      	b.n	80115da <lfs_ctz_extend+0x1fa>
                    goto relocate;
 80115b8:	bf00      	nop
 80115ba:	e000      	b.n	80115be <lfs_ctz_extend+0x1de>
                        goto relocate;
 80115bc:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 80115be:	6a3b      	ldr	r3, [r7, #32]
 80115c0:	4a08      	ldr	r2, [pc, #32]	; (80115e4 <lfs_ctz_extend+0x204>)
 80115c2:	9200      	str	r2, [sp, #0]
 80115c4:	f640 126a 	movw	r2, #2410	; 0x96a
 80115c8:	4907      	ldr	r1, [pc, #28]	; (80115e8 <lfs_ctz_extend+0x208>)
 80115ca:	4808      	ldr	r0, [pc, #32]	; (80115ec <lfs_ctz_extend+0x20c>)
 80115cc:	f013 fbf8 	bl	8024dc0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 80115d0:	68b9      	ldr	r1, [r7, #8]
 80115d2:	68f8      	ldr	r0, [r7, #12]
 80115d4:	f7fc f9b8 	bl	800d948 <lfs_cache_drop>
    while (true) {
 80115d8:	e709      	b.n	80113ee <lfs_ctz_extend+0xe>
    }
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3738      	adds	r7, #56	; 0x38
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}
 80115e2:	bf00      	nop
 80115e4:	08029ee0 	.word	0x08029ee0
 80115e8:	08029dd4 	.word	0x08029dd4
 80115ec:	08029f88 	.word	0x08029f88

080115f0 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 80115f0:	b580      	push	{r7, lr}
 80115f2:	b090      	sub	sp, #64	; 0x40
 80115f4:	af04      	add	r7, sp, #16
 80115f6:	60f8      	str	r0, [r7, #12]
 80115f8:	60b9      	str	r1, [r7, #8]
 80115fa:	607a      	str	r2, [r7, #4]
 80115fc:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 80115fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011600:	2b00      	cmp	r3, #0
 8011602:	d101      	bne.n	8011608 <lfs_ctz_traverse+0x18>
        return 0;
 8011604:	2300      	movs	r3, #0
 8011606:	e06b      	b.n	80116e0 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 8011608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801160a:	3b01      	subs	r3, #1
 801160c:	61fb      	str	r3, [r7, #28]
 801160e:	f107 031c 	add.w	r3, r7, #28
 8011612:	4619      	mov	r1, r3
 8011614:	68f8      	ldr	r0, [r7, #12]
 8011616:	f7ff fe3f 	bl	8011298 <lfs_ctz_index>
 801161a:	4603      	mov	r3, r0
 801161c:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 801161e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011620:	6839      	ldr	r1, [r7, #0]
 8011622:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8011624:	4798      	blx	r3
 8011626:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8011628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801162a:	2b00      	cmp	r3, #0
 801162c:	d001      	beq.n	8011632 <lfs_ctz_traverse+0x42>
            return err;
 801162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011630:	e056      	b.n	80116e0 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 8011632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011634:	2b00      	cmp	r3, #0
 8011636:	d101      	bne.n	801163c <lfs_ctz_traverse+0x4c>
            return 0;
 8011638:	2300      	movs	r3, #0
 801163a:	e051      	b.n	80116e0 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 801163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801163e:	f003 0301 	and.w	r3, r3, #1
 8011642:	f1c3 0302 	rsb	r3, r3, #2
 8011646:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 8011648:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 801164a:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 801164c:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 801164e:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 8011650:	9303      	str	r3, [sp, #12]
 8011652:	f107 0314 	add.w	r3, r7, #20
 8011656:	9302      	str	r3, [sp, #8]
 8011658:	2300      	movs	r3, #0
 801165a:	9301      	str	r3, [sp, #4]
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	9300      	str	r3, [sp, #0]
 8011660:	4613      	mov	r3, r2
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	68b9      	ldr	r1, [r7, #8]
 8011666:	68f8      	ldr	r0, [r7, #12]
 8011668:	f7fc f994 	bl	800d994 <lfs_bd_read>
 801166c:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 801166e:	697b      	ldr	r3, [r7, #20]
 8011670:	4618      	mov	r0, r3
 8011672:	f7fc f923 	bl	800d8bc <lfs_fromle32>
 8011676:	4603      	mov	r3, r0
 8011678:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	4618      	mov	r0, r3
 801167e:	f7fc f91d 	bl	800d8bc <lfs_fromle32>
 8011682:	4603      	mov	r3, r0
 8011684:	61bb      	str	r3, [r7, #24]
        if (err) {
 8011686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011688:	2b00      	cmp	r3, #0
 801168a:	d001      	beq.n	8011690 <lfs_ctz_traverse+0xa0>
            return err;
 801168c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801168e:	e027      	b.n	80116e0 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 8011690:	2300      	movs	r3, #0
 8011692:	62bb      	str	r3, [r7, #40]	; 0x28
 8011694:	e012      	b.n	80116bc <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 8011696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011698:	009b      	lsls	r3, r3, #2
 801169a:	3330      	adds	r3, #48	; 0x30
 801169c:	443b      	add	r3, r7
 801169e:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 80116a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116a4:	4611      	mov	r1, r2
 80116a6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80116a8:	4798      	blx	r3
 80116aa:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 80116ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d001      	beq.n	80116b6 <lfs_ctz_traverse+0xc6>
                return err;
 80116b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b4:	e014      	b.n	80116e0 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 80116b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80116b8:	3301      	adds	r3, #1
 80116ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80116bc:	6a3b      	ldr	r3, [r7, #32]
 80116be:	3b01      	subs	r3, #1
 80116c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116c2:	429a      	cmp	r2, r3
 80116c4:	dbe7      	blt.n	8011696 <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 80116c6:	6a3b      	ldr	r3, [r7, #32]
 80116c8:	3b01      	subs	r3, #1
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	3330      	adds	r3, #48	; 0x30
 80116ce:	443b      	add	r3, r7
 80116d0:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80116d4:	603b      	str	r3, [r7, #0]
        index -= count;
 80116d6:	6a3b      	ldr	r3, [r7, #32]
 80116d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 80116de:	e79e      	b.n	801161e <lfs_ctz_traverse+0x2e>
    }
}
 80116e0:	4618      	mov	r0, r3
 80116e2:	3730      	adds	r7, #48	; 0x30
 80116e4:	46bd      	mov	sp, r7
 80116e6:	bd80      	pop	{r7, pc}

080116e8 <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 80116e8:	b5b0      	push	{r4, r5, r7, lr}
 80116ea:	b09a      	sub	sp, #104	; 0x68
 80116ec:	af02      	add	r7, sp, #8
 80116ee:	60f8      	str	r0, [r7, #12]
 80116f0:	60b9      	str	r1, [r7, #8]
 80116f2:	607a      	str	r2, [r7, #4]
 80116f4:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 80116f6:	683b      	ldr	r3, [r7, #0]
 80116f8:	f003 0302 	and.w	r3, r3, #2
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d008      	beq.n	8011712 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 8011700:	68f8      	ldr	r0, [r7, #12]
 8011702:	f002 f8af 	bl	8013864 <lfs_fs_forceconsistency>
 8011706:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 8011708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801170a:	2b00      	cmp	r3, #0
 801170c:	d001      	beq.n	8011712 <lfs_file_rawopencfg+0x2a>
            return err;
 801170e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011710:	e1a9      	b.n	8011a66 <lfs_file_rawopencfg+0x37e>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011716:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 8011718:	683a      	ldr	r2, [r7, #0]
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 801171e:	68bb      	ldr	r3, [r7, #8]
 8011720:	2200      	movs	r2, #0
 8011722:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	2200      	movs	r2, #0
 8011728:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 801172a:	68bb      	ldr	r3, [r7, #8]
 801172c:	2200      	movs	r2, #0
 801172e:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 8011730:	68bb      	ldr	r3, [r7, #8]
 8011732:	f103 0108 	add.w	r1, r3, #8
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	3304      	adds	r3, #4
 801173a:	1d3a      	adds	r2, r7, #4
 801173c:	68f8      	ldr	r0, [r7, #12]
 801173e:	f7fe f871 	bl	800f824 <lfs_dir_find>
 8011742:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 8011744:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011746:	2b00      	cmp	r3, #0
 8011748:	da0c      	bge.n	8011764 <lfs_file_rawopencfg+0x7c>
 801174a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801174c:	f113 0f02 	cmn.w	r3, #2
 8011750:	d105      	bne.n	801175e <lfs_file_rawopencfg+0x76>
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	889b      	ldrh	r3, [r3, #4]
 8011756:	f240 32ff 	movw	r2, #1023	; 0x3ff
 801175a:	4293      	cmp	r3, r2
 801175c:	d102      	bne.n	8011764 <lfs_file_rawopencfg+0x7c>
        err = tag;
 801175e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011760:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8011762:	e175      	b.n	8011a50 <lfs_file_rawopencfg+0x368>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 8011764:	68bb      	ldr	r3, [r7, #8]
 8011766:	2201      	movs	r2, #1
 8011768:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 801176a:	68b9      	ldr	r1, [r7, #8]
 801176c:	68f8      	ldr	r0, [r7, #12]
 801176e:	f7fc ff30 	bl	800e5d2 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 8011772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011774:	f113 0f02 	cmn.w	r3, #2
 8011778:	d148      	bne.n	801180c <lfs_file_rawopencfg+0x124>
        if (!(flags & LFS_O_CREAT)) {
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011780:	2b00      	cmp	r3, #0
 8011782:	d103      	bne.n	801178c <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 8011784:	f06f 0301 	mvn.w	r3, #1
 8011788:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 801178a:	e161      	b.n	8011a50 <lfs_file_rawopencfg+0x368>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	4618      	mov	r0, r3
 8011790:	f7ee fd7e 	bl	8000290 <strlen>
 8011794:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801179a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801179c:	429a      	cmp	r2, r3
 801179e:	d903      	bls.n	80117a8 <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 80117a0:	f06f 0323 	mvn.w	r3, #35	; 0x23
 80117a4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80117a6:	e153      	b.n	8011a50 <lfs_file_rawopencfg+0x368>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 80117a8:	68bb      	ldr	r3, [r7, #8]
 80117aa:	f103 0108 	add.w	r1, r3, #8
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	889b      	ldrh	r3, [r3, #4]
 80117b2:	029b      	lsls	r3, r3, #10
 80117b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80117b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80117bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117be:	2300      	movs	r3, #0
 80117c0:	633b      	str	r3, [r7, #48]	; 0x30
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	889b      	ldrh	r3, [r3, #4]
 80117c6:	029a      	lsls	r2, r3, #10
 80117c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80117ca:	4313      	orrs	r3, r2
 80117cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80117d0:	637b      	str	r3, [r7, #52]	; 0x34
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80117d6:	68bb      	ldr	r3, [r7, #8]
 80117d8:	889b      	ldrh	r3, [r3, #4]
 80117da:	029b      	lsls	r3, r3, #10
 80117dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80117e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80117e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117e6:	2300      	movs	r3, #0
 80117e8:	643b      	str	r3, [r7, #64]	; 0x40
 80117ea:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80117ee:	2303      	movs	r3, #3
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f7fe ff53 	bl	801069c <lfs_dir_commit>
 80117f6:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_CREATE, file->id, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));
        if (err) {
 80117f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d003      	beq.n	8011806 <lfs_file_rawopencfg+0x11e>
            err = LFS_ERR_NAMETOOLONG;
 80117fe:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8011802:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8011804:	e124      	b.n	8011a50 <lfs_file_rawopencfg+0x368>
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 8011806:	4b9a      	ldr	r3, [pc, #616]	; (8011a70 <lfs_file_rawopencfg+0x388>)
 8011808:	65bb      	str	r3, [r7, #88]	; 0x58
 801180a:	e044      	b.n	8011896 <lfs_file_rawopencfg+0x1ae>
    } else if (flags & LFS_O_EXCL) {
 801180c:	683b      	ldr	r3, [r7, #0]
 801180e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011812:	2b00      	cmp	r3, #0
 8011814:	d003      	beq.n	801181e <lfs_file_rawopencfg+0x136>
        err = LFS_ERR_EXIST;
 8011816:	f06f 0310 	mvn.w	r3, #16
 801181a:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 801181c:	e118      	b.n	8011a50 <lfs_file_rawopencfg+0x368>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 801181e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011820:	4618      	mov	r0, r3
 8011822:	f7fc fcc5 	bl	800e1b0 <lfs_tag_type3>
 8011826:	4603      	mov	r3, r0
 8011828:	2b01      	cmp	r3, #1
 801182a:	d003      	beq.n	8011834 <lfs_file_rawopencfg+0x14c>
        err = LFS_ERR_ISDIR;
 801182c:	f06f 0314 	mvn.w	r3, #20
 8011830:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8011832:	e10d      	b.n	8011a50 <lfs_file_rawopencfg+0x368>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 8011834:	683b      	ldr	r3, [r7, #0]
 8011836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801183a:	2b00      	cmp	r3, #0
 801183c:	d00e      	beq.n	801185c <lfs_file_rawopencfg+0x174>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	889b      	ldrh	r3, [r3, #4]
 8011842:	029b      	lsls	r3, r3, #10
 8011844:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801184c:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 801184e:	68bb      	ldr	r3, [r7, #8]
 8011850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011852:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011856:	68bb      	ldr	r3, [r7, #8]
 8011858:	631a      	str	r2, [r3, #48]	; 0x30
 801185a:	e01c      	b.n	8011896 <lfs_file_rawopencfg+0x1ae>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8011862:	68bb      	ldr	r3, [r7, #8]
 8011864:	889b      	ldrh	r3, [r3, #4]
 8011866:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8011868:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801186c:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 8011870:	68ba      	ldr	r2, [r7, #8]
 8011872:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 8011874:	9200      	str	r2, [sp, #0]
 8011876:	4a7f      	ldr	r2, [pc, #508]	; (8011a74 <lfs_file_rawopencfg+0x38c>)
 8011878:	68f8      	ldr	r0, [r7, #12]
 801187a:	f7fd f8ad 	bl	800e9d8 <lfs_dir_get>
 801187e:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 8011880:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011882:	2b00      	cmp	r3, #0
 8011884:	da02      	bge.n	801188c <lfs_file_rawopencfg+0x1a4>
            err = tag;
 8011886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011888:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 801188a:	e0e1      	b.n	8011a50 <lfs_file_rawopencfg+0x368>
        }
        lfs_ctz_fromle32(&file->ctz);
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	3328      	adds	r3, #40	; 0x28
 8011890:	4618      	mov	r0, r3
 8011892:	f7fc fdbf 	bl	800e414 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 8011896:	2300      	movs	r3, #0
 8011898:	657b      	str	r3, [r7, #84]	; 0x54
 801189a:	e063      	b.n	8011964 <lfs_file_rawopencfg+0x27c>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 801189c:	68bb      	ldr	r3, [r7, #8]
 801189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118a0:	f003 0301 	and.w	r3, r3, #1
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d03c      	beq.n	8011922 <lfs_file_rawopencfg+0x23a>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 80118ae:	68bb      	ldr	r3, [r7, #8]
 80118b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118b2:	6859      	ldr	r1, [r3, #4]
 80118b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118b6:	4613      	mov	r3, r2
 80118b8:	005b      	lsls	r3, r3, #1
 80118ba:	4413      	add	r3, r2
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	440b      	add	r3, r1
 80118c0:	781b      	ldrb	r3, [r3, #0]
 80118c2:	f503 7340 	add.w	r3, r3, #768	; 0x300
 80118c6:	051a      	lsls	r2, r3, #20
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	889b      	ldrh	r3, [r3, #4]
 80118cc:	029b      	lsls	r3, r3, #10
 80118ce:	ea42 0103 	orr.w	r1, r2, r3
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118d6:	6858      	ldr	r0, [r3, #4]
 80118d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118da:	4613      	mov	r3, r2
 80118dc:	005b      	lsls	r3, r3, #1
 80118de:	4413      	add	r3, r2
 80118e0:	009b      	lsls	r3, r3, #2
 80118e2:	4403      	add	r3, r0
 80118e4:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80118e6:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 80118ea:	68bb      	ldr	r3, [r7, #8]
 80118ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80118ee:	6859      	ldr	r1, [r3, #4]
 80118f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80118f2:	4613      	mov	r3, r2
 80118f4:	005b      	lsls	r3, r3, #1
 80118f6:	4413      	add	r3, r2
 80118f8:	009b      	lsls	r3, r3, #2
 80118fa:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 80118fc:	685b      	ldr	r3, [r3, #4]
 80118fe:	9300      	str	r3, [sp, #0]
 8011900:	4603      	mov	r3, r0
 8011902:	4a5d      	ldr	r2, [pc, #372]	; (8011a78 <lfs_file_rawopencfg+0x390>)
 8011904:	4621      	mov	r1, r4
 8011906:	68f8      	ldr	r0, [r7, #12]
 8011908:	f7fd f866 	bl	800e9d8 <lfs_dir_get>
 801190c:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 801190e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011910:	2b00      	cmp	r3, #0
 8011912:	da06      	bge.n	8011922 <lfs_file_rawopencfg+0x23a>
 8011914:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011916:	f113 0f02 	cmn.w	r3, #2
 801191a:	d002      	beq.n	8011922 <lfs_file_rawopencfg+0x23a>
                err = res;
 801191c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801191e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8011920:	e096      	b.n	8011a50 <lfs_file_rawopencfg+0x368>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011926:	f003 0302 	and.w	r3, r3, #2
 801192a:	2b00      	cmp	r3, #0
 801192c:	d017      	beq.n	801195e <lfs_file_rawopencfg+0x276>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011932:	6859      	ldr	r1, [r3, #4]
 8011934:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011936:	4613      	mov	r3, r2
 8011938:	005b      	lsls	r3, r3, #1
 801193a:	4413      	add	r3, r2
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	440b      	add	r3, r1
 8011940:	689a      	ldr	r2, [r3, #8]
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011946:	429a      	cmp	r2, r3
 8011948:	d903      	bls.n	8011952 <lfs_file_rawopencfg+0x26a>
                err = LFS_ERR_NOSPC;
 801194a:	f06f 031b 	mvn.w	r3, #27
 801194e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8011950:	e07e      	b.n	8011a50 <lfs_file_rawopencfg+0x368>
            }

            file->flags |= LFS_F_DIRTY;
 8011952:	68bb      	ldr	r3, [r7, #8]
 8011954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011956:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 801195e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011960:	3301      	adds	r3, #1
 8011962:	657b      	str	r3, [r7, #84]	; 0x54
 8011964:	68bb      	ldr	r3, [r7, #8]
 8011966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011968:	689b      	ldr	r3, [r3, #8]
 801196a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801196c:	429a      	cmp	r2, r3
 801196e:	d395      	bcc.n	801189c <lfs_file_rawopencfg+0x1b4>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 8011970:	68bb      	ldr	r3, [r7, #8]
 8011972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011974:	681b      	ldr	r3, [r3, #0]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d005      	beq.n	8011986 <lfs_file_rawopencfg+0x29e>
        file->cache.buffer = file->cfg->buffer;
 801197a:	68bb      	ldr	r3, [r7, #8]
 801197c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801197e:	681a      	ldr	r2, [r3, #0]
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	64da      	str	r2, [r3, #76]	; 0x4c
 8011984:	e010      	b.n	80119a8 <lfs_file_rawopencfg+0x2c0>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801198a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801198c:	4618      	mov	r0, r3
 801198e:	f7fb ffc4 	bl	800d91a <lfs_malloc>
 8011992:	4602      	mov	r2, r0
 8011994:	68bb      	ldr	r3, [r7, #8]
 8011996:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801199c:	2b00      	cmp	r3, #0
 801199e:	d103      	bne.n	80119a8 <lfs_file_rawopencfg+0x2c0>
            err = LFS_ERR_NOMEM;
 80119a0:	f06f 030b 	mvn.w	r3, #11
 80119a4:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 80119a6:	e053      	b.n	8011a50 <lfs_file_rawopencfg+0x368>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 80119a8:	68bb      	ldr	r3, [r7, #8]
 80119aa:	3340      	adds	r3, #64	; 0x40
 80119ac:	4619      	mov	r1, r3
 80119ae:	68f8      	ldr	r0, [r7, #12]
 80119b0:	f7fb ffd9 	bl	800d966 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 80119b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7fc fbfa 	bl	800e1b0 <lfs_tag_type3>
 80119bc:	4603      	mov	r3, r0
 80119be:	461a      	mov	r2, r3
 80119c0:	f240 2301 	movw	r3, #513	; 0x201
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d141      	bne.n	8011a4c <lfs_file_rawopencfg+0x364>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	f06f 0201 	mvn.w	r2, #1
 80119ce:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 80119d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fc fc26 	bl	800e224 <lfs_tag_size>
 80119d8:	4602      	mov	r2, r0
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80119e6:	68bb      	ldr	r3, [r7, #8]
 80119e8:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119ee:	68bb      	ldr	r3, [r7, #8]
 80119f0:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	2200      	movs	r2, #0
 80119f6:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d020      	beq.n	8011a4c <lfs_file_rawopencfg+0x364>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 8011a10:	68bb      	ldr	r3, [r7, #8]
 8011a12:	889b      	ldrh	r3, [r3, #4]
 8011a14:	029c      	lsls	r4, r3, #10
 8011a16:	68bb      	ldr	r3, [r7, #8]
 8011a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011a1a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8011a1e:	4618      	mov	r0, r3
 8011a20:	f7fb fedc 	bl	800d7dc <lfs_min>
 8011a24:	4603      	mov	r3, r0
 8011a26:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011a28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 8011a30:	9300      	str	r3, [sp, #0]
 8011a32:	4613      	mov	r3, r2
 8011a34:	4a0f      	ldr	r2, [pc, #60]	; (8011a74 <lfs_file_rawopencfg+0x38c>)
 8011a36:	4629      	mov	r1, r5
 8011a38:	68f8      	ldr	r0, [r7, #12]
 8011a3a:	f7fc ffcd 	bl	800e9d8 <lfs_dir_get>
 8011a3e:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 8011a40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	da02      	bge.n	8011a4c <lfs_file_rawopencfg+0x364>
                err = res;
 8011a46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011a48:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8011a4a:	e001      	b.n	8011a50 <lfs_file_rawopencfg+0x368>
            }
        }
    }

    return 0;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	e00a      	b.n	8011a66 <lfs_file_rawopencfg+0x37e>

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 8011a50:	68bb      	ldr	r3, [r7, #8]
 8011a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a54:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 8011a5c:	68b9      	ldr	r1, [r7, #8]
 8011a5e:	68f8      	ldr	r0, [r7, #12]
 8011a60:	f000 f824 	bl	8011aac <lfs_file_rawclose>
    return err;
 8011a64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8011a66:	4618      	mov	r0, r3
 8011a68:	3760      	adds	r7, #96	; 0x60
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bdb0      	pop	{r4, r5, r7, pc}
 8011a6e:	bf00      	nop
 8011a70:	20100000 	.word	0x20100000
 8011a74:	700ffc00 	.word	0x700ffc00
 8011a78:	7ffffc00 	.word	0x7ffffc00

08011a7c <lfs_file_rawopen>:

static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b088      	sub	sp, #32
 8011a80:	af02      	add	r7, sp, #8
 8011a82:	60f8      	str	r0, [r7, #12]
 8011a84:	60b9      	str	r1, [r7, #8]
 8011a86:	607a      	str	r2, [r7, #4]
 8011a88:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 8011a8a:	4b07      	ldr	r3, [pc, #28]	; (8011aa8 <lfs_file_rawopen+0x2c>)
 8011a8c:	9300      	str	r3, [sp, #0]
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	687a      	ldr	r2, [r7, #4]
 8011a92:	68b9      	ldr	r1, [r7, #8]
 8011a94:	68f8      	ldr	r0, [r7, #12]
 8011a96:	f7ff fe27 	bl	80116e8 <lfs_file_rawopencfg>
 8011a9a:	6178      	str	r0, [r7, #20]
    return err;
 8011a9c:	697b      	ldr	r3, [r7, #20]
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3718      	adds	r7, #24
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
 8011aa6:	bf00      	nop
 8011aa8:	0802dd14 	.word	0x0802dd14

08011aac <lfs_file_rawclose>:

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b084      	sub	sp, #16
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
 8011ab4:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 8011ab6:	6839      	ldr	r1, [r7, #0]
 8011ab8:	6878      	ldr	r0, [r7, #4]
 8011aba:	f000 f9e5 	bl	8011e88 <lfs_file_rawsync>
 8011abe:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 8011ac0:	6839      	ldr	r1, [r7, #0]
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7fc fd63 	bl	800e58e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 8011ac8:	683b      	ldr	r3, [r7, #0]
 8011aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d104      	bne.n	8011adc <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	f7fb ff2b 	bl	800d932 <lfs_free>
    }

    return err;
 8011adc:	68fb      	ldr	r3, [r7, #12]
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3710      	adds	r7, #16
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}
	...

08011ae8 <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 8011ae8:	b590      	push	{r4, r7, lr}
 8011aea:	b08d      	sub	sp, #52	; 0x34
 8011aec:	af06      	add	r7, sp, #24
 8011aee:	6078      	str	r0, [r7, #4]
 8011af0:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 8011af2:	f107 030c 	add.w	r3, r7, #12
 8011af6:	4619      	mov	r1, r3
 8011af8:	6878      	ldr	r0, [r7, #4]
 8011afa:	f7fc fdd3 	bl	800e6a4 <lfs_alloc>
 8011afe:	6138      	str	r0, [r7, #16]
        if (err) {
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d001      	beq.n	8011b0a <lfs_file_relocate+0x22>
            return err;
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	e0bb      	b.n	8011c82 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 8011b0a:	68fb      	ldr	r3, [r7, #12]
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	6878      	ldr	r0, [r7, #4]
 8011b10:	f7fc fa32 	bl	800df78 <lfs_bd_erase>
 8011b14:	6138      	str	r0, [r7, #16]
        if (err) {
 8011b16:	693b      	ldr	r3, [r7, #16]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d006      	beq.n	8011b2a <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8011b22:	f000 809b 	beq.w	8011c5c <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	e0ab      	b.n	8011c82 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	617b      	str	r3, [r7, #20]
 8011b2e:	e069      	b.n	8011c04 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 8011b30:	683b      	ldr	r3, [r7, #0]
 8011b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d027      	beq.n	8011b8c <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 8011b3c:	683b      	ldr	r3, [r7, #0]
 8011b3e:	f103 0008 	add.w	r0, r3, #8
 8011b42:	683b      	ldr	r3, [r7, #0]
 8011b44:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 8011b48:	683b      	ldr	r3, [r7, #0]
 8011b4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 8011b4c:	697b      	ldr	r3, [r7, #20]
 8011b4e:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	889b      	ldrh	r3, [r3, #4]
 8011b54:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 8011b56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011b5e:	2101      	movs	r1, #1
 8011b60:	9105      	str	r1, [sp, #20]
 8011b62:	f107 010b 	add.w	r1, r7, #11
 8011b66:	9104      	str	r1, [sp, #16]
 8011b68:	6979      	ldr	r1, [r7, #20]
 8011b6a:	9103      	str	r1, [sp, #12]
 8011b6c:	9302      	str	r3, [sp, #8]
 8011b6e:	4b47      	ldr	r3, [pc, #284]	; (8011c8c <lfs_file_relocate+0x1a4>)
 8011b70:	9301      	str	r3, [sp, #4]
 8011b72:	9200      	str	r2, [sp, #0]
 8011b74:	4623      	mov	r3, r4
 8011b76:	2200      	movs	r2, #0
 8011b78:	4601      	mov	r1, r0
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f7fc ff47 	bl	800ea0e <lfs_dir_getread>
 8011b80:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d01e      	beq.n	8011bc6 <lfs_file_relocate+0xde>
                    return err;
 8011b88:	693b      	ldr	r3, [r7, #16]
 8011b8a:	e07a      	b.n	8011c82 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 8011b92:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	1ad4      	subs	r4, r2, r3
 8011b9c:	683b      	ldr	r3, [r7, #0]
 8011b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	9203      	str	r2, [sp, #12]
 8011ba4:	f107 020b 	add.w	r2, r7, #11
 8011ba8:	9202      	str	r2, [sp, #8]
 8011baa:	697a      	ldr	r2, [r7, #20]
 8011bac:	9201      	str	r2, [sp, #4]
 8011bae:	9300      	str	r3, [sp, #0]
 8011bb0:	4623      	mov	r3, r4
 8011bb2:	4602      	mov	r2, r0
 8011bb4:	6878      	ldr	r0, [r7, #4]
 8011bb6:	f7fb feed 	bl	800d994 <lfs_bd_read>
 8011bba:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 8011bbc:	693b      	ldr	r3, [r7, #16]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d001      	beq.n	8011bc6 <lfs_file_relocate+0xde>
                    return err;
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	e05d      	b.n	8011c82 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f103 0110 	add.w	r1, r3, #16
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	9203      	str	r2, [sp, #12]
 8011bd4:	f107 020b 	add.w	r2, r7, #11
 8011bd8:	9202      	str	r2, [sp, #8]
 8011bda:	697a      	ldr	r2, [r7, #20]
 8011bdc:	9201      	str	r2, [sp, #4]
 8011bde:	9300      	str	r3, [sp, #0]
 8011be0:	2301      	movs	r3, #1
 8011be2:	4602      	mov	r2, r0
 8011be4:	6878      	ldr	r0, [r7, #4]
 8011be6:	f7fc f91b 	bl	800de20 <lfs_bd_prog>
 8011bea:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d005      	beq.n	8011bfe <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8011bf8:	d032      	beq.n	8011c60 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	e041      	b.n	8011c82 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 8011bfe:	697b      	ldr	r3, [r7, #20]
 8011c00:	3301      	adds	r3, #1
 8011c02:	617b      	str	r3, [r7, #20]
 8011c04:	683b      	ldr	r3, [r7, #0]
 8011c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c08:	697a      	ldr	r2, [r7, #20]
 8011c0a:	429a      	cmp	r2, r3
 8011c0c:	d390      	bcc.n	8011b30 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 8011c0e:	683b      	ldr	r3, [r7, #0]
 8011c10:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	69d9      	ldr	r1, [r3, #28]
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c1c:	461a      	mov	r2, r3
 8011c1e:	f014 fd8e 	bl	802673e <memcpy>
        file->cache.block = lfs->pcache.block;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	691a      	ldr	r2, [r3, #16]
 8011c26:	683b      	ldr	r3, [r7, #0]
 8011c28:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	695a      	ldr	r2, [r3, #20]
 8011c2e:	683b      	ldr	r3, [r7, #0]
 8011c30:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	699a      	ldr	r2, [r3, #24]
 8011c36:	683b      	ldr	r3, [r7, #0]
 8011c38:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	3310      	adds	r3, #16
 8011c3e:	4619      	mov	r1, r3
 8011c40:	6878      	ldr	r0, [r7, #4]
 8011c42:	f7fb fe90 	bl	800d966 <lfs_cache_zero>

        file->block = nblock;
 8011c46:	68fa      	ldr	r2, [r7, #12]
 8011c48:	683b      	ldr	r3, [r7, #0]
 8011c4a:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 8011c4c:	683b      	ldr	r3, [r7, #0]
 8011c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c50:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8011c54:	683b      	ldr	r3, [r7, #0]
 8011c56:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	e012      	b.n	8011c82 <lfs_file_relocate+0x19a>
                goto relocate;
 8011c5c:	bf00      	nop
 8011c5e:	e000      	b.n	8011c62 <lfs_file_relocate+0x17a>
                    goto relocate;
 8011c60:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	4a0a      	ldr	r2, [pc, #40]	; (8011c90 <lfs_file_relocate+0x1a8>)
 8011c66:	9200      	str	r2, [sp, #0]
 8011c68:	f640 229b 	movw	r2, #2715	; 0xa9b
 8011c6c:	4909      	ldr	r1, [pc, #36]	; (8011c94 <lfs_file_relocate+0x1ac>)
 8011c6e:	480a      	ldr	r0, [pc, #40]	; (8011c98 <lfs_file_relocate+0x1b0>)
 8011c70:	f013 f8a6 	bl	8024dc0 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 8011c74:	687b      	ldr	r3, [r7, #4]
 8011c76:	3310      	adds	r3, #16
 8011c78:	4619      	mov	r1, r3
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f7fb fe64 	bl	800d948 <lfs_cache_drop>
    while (true) {
 8011c80:	e737      	b.n	8011af2 <lfs_file_relocate+0xa>
    }
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	371c      	adds	r7, #28
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd90      	pop	{r4, r7, pc}
 8011c8a:	bf00      	nop
 8011c8c:	fff7fc00 	.word	0xfff7fc00
 8011c90:	08029ee0 	.word	0x08029ee0
 8011c94:	08029dd4 	.word	0x08029dd4
 8011c98:	08029f88 	.word	0x08029f88

08011c9c <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b084      	sub	sp, #16
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	6078      	str	r0, [r7, #4]
 8011ca4:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 8011ca6:	683b      	ldr	r3, [r7, #0]
 8011ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 8011cae:	6878      	ldr	r0, [r7, #4]
 8011cb0:	f7fc fcd8 	bl	800e664 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 8011cb4:	6839      	ldr	r1, [r7, #0]
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f7ff ff16 	bl	8011ae8 <lfs_file_relocate>
 8011cbc:	60f8      	str	r0, [r7, #12]
    if (err) {
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d001      	beq.n	8011cc8 <lfs_file_outline+0x2c>
        return err;
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	e006      	b.n	8011cd6 <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ccc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 8011cd4:	2300      	movs	r3, #0
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3710      	adds	r7, #16
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}
	...

08011ce0 <lfs_file_flush>:
#endif

#ifndef LFS_READONLY
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 8011ce0:	b590      	push	{r4, r7, lr}
 8011ce2:	b09f      	sub	sp, #124	; 0x7c
 8011ce4:	af02      	add	r7, sp, #8
 8011ce6:	6078      	str	r0, [r7, #4]
 8011ce8:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 8011cea:	683b      	ldr	r3, [r7, #0]
 8011cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d011      	beq.n	8011d1a <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d105      	bne.n	8011d0e <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 8011d02:	683b      	ldr	r3, [r7, #0]
 8011d04:	3340      	adds	r3, #64	; 0x40
 8011d06:	4619      	mov	r1, r3
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f7fb fe1d 	bl	800d948 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 8011d0e:	683b      	ldr	r3, [r7, #0]
 8011d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d12:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8011d16:	683b      	ldr	r3, [r7, #0]
 8011d18:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
 8011d1a:	683b      	ldr	r3, [r7, #0]
 8011d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	f000 80a4 	beq.w	8011e70 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011d2c:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d176      	bne.n	8011e28 <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 8011d3a:	f107 030c 	add.w	r3, r7, #12
 8011d3e:	2254      	movs	r2, #84	; 0x54
 8011d40:	2100      	movs	r1, #0
 8011d42:	4618      	mov	r0, r3
 8011d44:	f013 fa02 	bl	802514c <memset>
                .ctz.head = file->ctz.head,
 8011d48:	683b      	ldr	r3, [r7, #0]
 8011d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 8011d4c:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 8011d4e:	683b      	ldr	r3, [r7, #0]
 8011d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 8011d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8011d54:	2301      	movs	r3, #1
 8011d56:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 8011d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8011d64:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011d66:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	4619      	mov	r1, r3
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f7fb fdea 	bl	800d948 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 8011d74:	e02b      	b.n	8011dce <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_rawread(lfs, &orig, &data, 1);
 8011d76:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8011d7a:	f107 010c 	add.w	r1, r7, #12
 8011d7e:	2301      	movs	r3, #1
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f000 f90d 	bl	8011fa0 <lfs_file_rawread>
 8011d86:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8011d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	da01      	bge.n	8011d92 <lfs_file_flush+0xb2>
                    return res;
 8011d8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d90:	e06f      	b.n	8011e72 <lfs_file_flush+0x192>
                }

                res = lfs_file_rawwrite(lfs, file, &data, 1);
 8011d92:	f107 0263 	add.w	r2, r7, #99	; 0x63
 8011d96:	2301      	movs	r3, #1
 8011d98:	6839      	ldr	r1, [r7, #0]
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f000 f9f4 	bl	8012188 <lfs_file_rawwrite>
 8011da0:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 8011da2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	da01      	bge.n	8011dac <lfs_file_flush+0xcc>
                    return res;
 8011da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011daa:	e062      	b.n	8011e72 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011db4:	d00b      	beq.n	8011dce <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 8011db6:	f107 030c 	add.w	r3, r7, #12
 8011dba:	3340      	adds	r3, #64	; 0x40
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	6878      	ldr	r0, [r7, #4]
 8011dc0:	f7fb fdc2 	bl	800d948 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7fb fdbd 	bl	800d948 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dd6:	429a      	cmp	r2, r3
 8011dd8:	d3cd      	bcc.n	8011d76 <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8011de0:	687a      	ldr	r2, [r7, #4]
 8011de2:	2301      	movs	r3, #1
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f7fb ff6b 	bl	800dcc0 <lfs_bd_flush>
 8011dea:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8011dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d026      	beq.n	8011e40 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 8011df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011df4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8011df8:	d001      	beq.n	8011dfe <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 8011dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011dfc:	e039      	b.n	8011e72 <lfs_file_flush+0x192>
                        goto relocate;
 8011dfe:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 8011e00:	683b      	ldr	r3, [r7, #0]
 8011e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e04:	4a1d      	ldr	r2, [pc, #116]	; (8011e7c <lfs_file_flush+0x19c>)
 8011e06:	9200      	str	r2, [sp, #0]
 8011e08:	f640 22ea 	movw	r2, #2794	; 0xaea
 8011e0c:	491c      	ldr	r1, [pc, #112]	; (8011e80 <lfs_file_flush+0x1a0>)
 8011e0e:	481d      	ldr	r0, [pc, #116]	; (8011e84 <lfs_file_flush+0x1a4>)
 8011e10:	f012 ffd6 	bl	8024dc0 <iprintf>
                err = lfs_file_relocate(lfs, file);
 8011e14:	6839      	ldr	r1, [r7, #0]
 8011e16:	6878      	ldr	r0, [r7, #4]
 8011e18:	f7ff fe66 	bl	8011ae8 <lfs_file_relocate>
 8011e1c:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 8011e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d0da      	beq.n	8011dda <lfs_file_flush+0xfa>
                    return err;
 8011e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011e26:	e024      	b.n	8011e72 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e30:	4619      	mov	r1, r3
 8011e32:	4610      	mov	r0, r2
 8011e34:	f7fb fcc2 	bl	800d7bc <lfs_max>
 8011e38:	4602      	mov	r2, r0
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8011e3e:	e000      	b.n	8011e42 <lfs_file_flush+0x162>
                break;
 8011e40:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 8011e4a:	683b      	ldr	r3, [r7, #0]
 8011e4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 8011e52:	683b      	ldr	r3, [r7, #0]
 8011e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e56:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 8011e5e:	683b      	ldr	r3, [r7, #0]
 8011e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 8011e6a:	683b      	ldr	r3, [r7, #0]
 8011e6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011e6e:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return 0;
 8011e70:	2300      	movs	r3, #0
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3774      	adds	r7, #116	; 0x74
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd90      	pop	{r4, r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	08029ee0 	.word	0x08029ee0
 8011e80:	08029dd4 	.word	0x08029dd4
 8011e84:	08029f88 	.word	0x08029f88

08011e88 <lfs_file_rawsync>:
#endif

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b090      	sub	sp, #64	; 0x40
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
 8011e90:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011e96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d001      	beq.n	8011ea2 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	e07a      	b.n	8011f98 <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 8011ea2:	6839      	ldr	r1, [r7, #0]
 8011ea4:	6878      	ldr	r0, [r7, #4]
 8011ea6:	f7ff ff1b 	bl	8011ce0 <lfs_file_flush>
 8011eaa:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 8011eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d007      	beq.n	8011ec2 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 8011eb2:	683b      	ldr	r3, [r7, #0]
 8011eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011eb6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 8011ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ec0:	e06a      	b.n	8011f98 <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 8011ec2:	683b      	ldr	r3, [r7, #0]
 8011ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d063      	beq.n	8011f96 <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 8011ece:	683b      	ldr	r3, [r7, #0]
 8011ed0:	3308      	adds	r3, #8
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fc f895 	bl	800e002 <lfs_pair_isnull>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	f083 0301 	eor.w	r3, r3, #1
 8011ede:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d058      	beq.n	8011f96 <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ee8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d009      	beq.n	8011f04 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 8011ef0:	f240 2301 	movw	r3, #513	; 0x201
 8011ef4:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011efa:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 8011efc:	683b      	ldr	r3, [r7, #0]
 8011efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f00:	637b      	str	r3, [r7, #52]	; 0x34
 8011f02:	e014      	b.n	8011f2e <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 8011f04:	f240 2302 	movw	r3, #514	; 0x202
 8011f08:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 8011f0a:	683a      	ldr	r2, [r7, #0]
 8011f0c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f10:	3228      	adds	r2, #40	; 0x28
 8011f12:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f16:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 8011f1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7fc fa90 	bl	800e444 <lfs_ctz_tole32>
            buffer = &ctz;
 8011f24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8011f28:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 8011f2a:	2308      	movs	r3, #8
 8011f2c:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	f103 0108 	add.w	r1, r3, #8
 8011f34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011f36:	051a      	lsls	r2, r3, #20
 8011f38:	683b      	ldr	r3, [r7, #0]
 8011f3a:	889b      	ldrh	r3, [r3, #4]
 8011f3c:	029b      	lsls	r3, r3, #10
 8011f3e:	431a      	orrs	r2, r3
 8011f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f42:	4313      	orrs	r3, r2
 8011f44:	61bb      	str	r3, [r7, #24]
 8011f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f48:	61fb      	str	r3, [r7, #28]
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	889b      	ldrh	r3, [r3, #4]
 8011f4e:	029a      	lsls	r2, r3, #10
 8011f50:	683b      	ldr	r3, [r7, #0]
 8011f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f54:	689b      	ldr	r3, [r3, #8]
 8011f56:	4313      	orrs	r3, r2
 8011f58:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 8011f5c:	623b      	str	r3, [r7, #32]
 8011f5e:	683b      	ldr	r3, [r7, #0]
 8011f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f62:	685b      	ldr	r3, [r3, #4]
 8011f64:	627b      	str	r3, [r7, #36]	; 0x24
 8011f66:	f107 0218 	add.w	r2, r7, #24
 8011f6a:	2302      	movs	r3, #2
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f7fe fb95 	bl	801069c <lfs_dir_commit>
 8011f72:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 8011f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d007      	beq.n	8011f8a <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f7e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 8011f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f88:	e006      	b.n	8011f98 <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011f8e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011f92:	683b      	ldr	r3, [r7, #0]
 8011f94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 8011f96:	2300      	movs	r3, #0
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3740      	adds	r7, #64	; 0x40
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <lfs_file_rawread>:
#endif

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8011fa0:	b5b0      	push	{r4, r5, r7, lr}
 8011fa2:	b092      	sub	sp, #72	; 0x48
 8011fa4:	af06      	add	r7, sp, #24
 8011fa6:	60f8      	str	r0, [r7, #12]
 8011fa8:	60b9      	str	r1, [r7, #8]
 8011faa:	607a      	str	r2, [r7, #4]
 8011fac:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 8011fae:	68bb      	ldr	r3, [r7, #8]
 8011fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fb2:	f003 0301 	and.w	r3, r3, #1
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d106      	bne.n	8011fc8 <lfs_file_rawread+0x28>
 8011fba:	4b6f      	ldr	r3, [pc, #444]	; (8012178 <lfs_file_rawread+0x1d8>)
 8011fbc:	4a6f      	ldr	r2, [pc, #444]	; (801217c <lfs_file_rawread+0x1dc>)
 8011fbe:	f640 3138 	movw	r1, #2872	; 0xb38
 8011fc2:	486f      	ldr	r0, [pc, #444]	; (8012180 <lfs_file_rawread+0x1e0>)
 8011fc4:	f012 f826 	bl	8024014 <__assert_func>

    uint8_t *data = buffer;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 8011fcc:	683b      	ldr	r3, [r7, #0]
 8011fce:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8011fd0:	68bb      	ldr	r3, [r7, #8]
 8011fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d009      	beq.n	8011ff0 <lfs_file_rawread+0x50>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 8011fdc:	68b9      	ldr	r1, [r7, #8]
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f7ff fe7e 	bl	8011ce0 <lfs_file_flush>
 8011fe4:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 8011fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d001      	beq.n	8011ff0 <lfs_file_rawread+0x50>
            return err;
 8011fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fee:	e0bf      	b.n	8012170 <lfs_file_rawread+0x1d0>
        }
    }
#endif

    if (file->pos >= file->ctz.size) {
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ff8:	429a      	cmp	r2, r3
 8011ffa:	d301      	bcc.n	8012000 <lfs_file_rawread+0x60>
        // eof if past end
        return 0;
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	e0b7      	b.n	8012170 <lfs_file_rawread+0x1d0>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012008:	1ad3      	subs	r3, r2, r3
 801200a:	4619      	mov	r1, r3
 801200c:	6838      	ldr	r0, [r7, #0]
 801200e:	f7fb fbe5 	bl	800d7dc <lfs_min>
 8012012:	6038      	str	r0, [r7, #0]
    nsize = size;
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	62bb      	str	r3, [r7, #40]	; 0x28

    while (nsize > 0) {
 8012018:	e0a5      	b.n	8012166 <lfs_file_rawread+0x1c6>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801201e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012022:	2b00      	cmp	r3, #0
 8012024:	d006      	beq.n	8012034 <lfs_file_rawread+0x94>
                file->off == lfs->cfg->block_size) {
 8012026:	68bb      	ldr	r3, [r7, #8]
 8012028:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801202e:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_READING) ||
 8012030:	429a      	cmp	r2, r3
 8012032:	d130      	bne.n	8012096 <lfs_file_rawread+0xf6>
            if (!(file->flags & LFS_F_INLINE)) {
 8012034:	68bb      	ldr	r3, [r7, #8]
 8012036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801203c:	2b00      	cmp	r3, #0
 801203e:	d11c      	bne.n	801207a <lfs_file_rawread+0xda>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 8012040:	68bb      	ldr	r3, [r7, #8]
 8012042:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012046:	68bb      	ldr	r3, [r7, #8]
 8012048:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 801204a:	68bb      	ldr	r3, [r7, #8]
 801204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801204e:	68ba      	ldr	r2, [r7, #8]
 8012050:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8012052:	68b9      	ldr	r1, [r7, #8]
 8012054:	3138      	adds	r1, #56	; 0x38
 8012056:	68b8      	ldr	r0, [r7, #8]
 8012058:	303c      	adds	r0, #60	; 0x3c
 801205a:	9003      	str	r0, [sp, #12]
 801205c:	9102      	str	r1, [sp, #8]
 801205e:	9201      	str	r2, [sp, #4]
 8012060:	9300      	str	r3, [sp, #0]
 8012062:	462b      	mov	r3, r5
 8012064:	4622      	mov	r2, r4
 8012066:	2100      	movs	r1, #0
 8012068:	68f8      	ldr	r0, [r7, #12]
 801206a:	f7ff f94d 	bl	8011308 <lfs_ctz_find>
 801206e:	6238      	str	r0, [r7, #32]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 8012070:	6a3b      	ldr	r3, [r7, #32]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d009      	beq.n	801208a <lfs_file_rawread+0xea>
                    return err;
 8012076:	6a3b      	ldr	r3, [r7, #32]
 8012078:	e07a      	b.n	8012170 <lfs_file_rawread+0x1d0>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	f06f 0201 	mvn.w	r2, #1
 8012080:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801208e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801209a:	69da      	ldr	r2, [r3, #28]
 801209c:	68bb      	ldr	r3, [r7, #8]
 801209e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120a0:	1ad3      	subs	r3, r2, r3
 80120a2:	4619      	mov	r1, r3
 80120a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120a6:	f7fb fb99 	bl	800d7dc <lfs_min>
 80120aa:	61f8      	str	r0, [r7, #28]
        if (file->flags & LFS_F_INLINE) {
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80120b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d026      	beq.n	8012106 <lfs_file_rawread+0x166>
            int err = lfs_dir_getread(lfs, &file->m,
 80120b8:	68bb      	ldr	r3, [r7, #8]
 80120ba:	f103 0408 	add.w	r4, r3, #8
 80120be:	68bb      	ldr	r3, [r7, #8]
 80120c0:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 80120c4:	68fb      	ldr	r3, [r7, #12]
 80120c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80120c8:	69da      	ldr	r2, [r3, #28]
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 80120ca:	68bb      	ldr	r3, [r7, #8]
 80120cc:	889b      	ldrh	r3, [r3, #4]
 80120ce:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 80120d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80120d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80120d8:	68b9      	ldr	r1, [r7, #8]
 80120da:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80120dc:	69f8      	ldr	r0, [r7, #28]
 80120de:	9005      	str	r0, [sp, #20]
 80120e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120e2:	9004      	str	r0, [sp, #16]
 80120e4:	9103      	str	r1, [sp, #12]
 80120e6:	9302      	str	r3, [sp, #8]
 80120e8:	4b26      	ldr	r3, [pc, #152]	; (8012184 <lfs_file_rawread+0x1e4>)
 80120ea:	9301      	str	r3, [sp, #4]
 80120ec:	9200      	str	r2, [sp, #0]
 80120ee:	462b      	mov	r3, r5
 80120f0:	2200      	movs	r2, #0
 80120f2:	4621      	mov	r1, r4
 80120f4:	68f8      	ldr	r0, [r7, #12]
 80120f6:	f7fc fc8a 	bl	800ea0e <lfs_dir_getread>
 80120fa:	6178      	str	r0, [r7, #20]
                    file->off, data, diff);
            if (err) {
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	2b00      	cmp	r3, #0
 8012100:	d01d      	beq.n	801213e <lfs_file_rawread+0x19e>
                return err;
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	e034      	b.n	8012170 <lfs_file_rawread+0x1d0>
            }
        } else {
            int err = lfs_bd_read(lfs,
 8012106:	68bb      	ldr	r3, [r7, #8]
 8012108:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012110:	69dc      	ldr	r4, [r3, #28]
            int err = lfs_bd_read(lfs,
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012116:	68ba      	ldr	r2, [r7, #8]
 8012118:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 801211a:	69f9      	ldr	r1, [r7, #28]
 801211c:	9103      	str	r1, [sp, #12]
 801211e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012120:	9102      	str	r1, [sp, #8]
 8012122:	9201      	str	r2, [sp, #4]
 8012124:	9300      	str	r3, [sp, #0]
 8012126:	4623      	mov	r3, r4
 8012128:	4602      	mov	r2, r0
 801212a:	2100      	movs	r1, #0
 801212c:	68f8      	ldr	r0, [r7, #12]
 801212e:	f7fb fc31 	bl	800d994 <lfs_bd_read>
 8012132:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 8012134:	69bb      	ldr	r3, [r7, #24]
 8012136:	2b00      	cmp	r3, #0
 8012138:	d001      	beq.n	801213e <lfs_file_rawread+0x19e>
                return err;
 801213a:	69bb      	ldr	r3, [r7, #24]
 801213c:	e018      	b.n	8012170 <lfs_file_rawread+0x1d0>
            }
        }

        file->pos += diff;
 801213e:	68bb      	ldr	r3, [r7, #8]
 8012140:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012142:	69fb      	ldr	r3, [r7, #28]
 8012144:	441a      	add	r2, r3
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 801214a:	68bb      	ldr	r3, [r7, #8]
 801214c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801214e:	69fb      	ldr	r3, [r7, #28]
 8012150:	441a      	add	r2, r3
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 8012156:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012158:	69fb      	ldr	r3, [r7, #28]
 801215a:	4413      	add	r3, r2
 801215c:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 801215e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012160:	69fb      	ldr	r3, [r7, #28]
 8012162:	1ad3      	subs	r3, r2, r3
 8012164:	62bb      	str	r3, [r7, #40]	; 0x28
    while (nsize > 0) {
 8012166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012168:	2b00      	cmp	r3, #0
 801216a:	f47f af56 	bne.w	801201a <lfs_file_rawread+0x7a>
    }

    return size;
 801216e:	683b      	ldr	r3, [r7, #0]
}
 8012170:	4618      	mov	r0, r3
 8012172:	3730      	adds	r7, #48	; 0x30
 8012174:	46bd      	mov	sp, r7
 8012176:	bdb0      	pop	{r4, r5, r7, pc}
 8012178:	0802a030 	.word	0x0802a030
 801217c:	0802dd20 	.word	0x0802dd20
 8012180:	08029dd4 	.word	0x08029dd4
 8012184:	fff7fc00 	.word	0xfff7fc00

08012188 <lfs_file_rawwrite>:

#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8012188:	b5b0      	push	{r4, r5, r7, lr}
 801218a:	b094      	sub	sp, #80	; 0x50
 801218c:	af04      	add	r7, sp, #16
 801218e:	60f8      	str	r0, [r7, #12]
 8012190:	60b9      	str	r1, [r7, #8]
 8012192:	607a      	str	r2, [r7, #4]
 8012194:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 8012196:	68bb      	ldr	r3, [r7, #8]
 8012198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801219a:	f003 0302 	and.w	r3, r3, #2
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d106      	bne.n	80121b0 <lfs_file_rawwrite+0x28>
 80121a2:	4b85      	ldr	r3, [pc, #532]	; (80123b8 <lfs_file_rawwrite+0x230>)
 80121a4:	4a85      	ldr	r2, [pc, #532]	; (80123bc <lfs_file_rawwrite+0x234>)
 80121a6:	f640 3182 	movw	r1, #2946	; 0xb82
 80121aa:	4885      	ldr	r0, [pc, #532]	; (80123c0 <lfs_file_rawwrite+0x238>)
 80121ac:	f011 ff32 	bl	8024014 <__assert_func>

    const uint8_t *data = buffer;
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    lfs_size_t nsize = size;
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	63bb      	str	r3, [r7, #56]	; 0x38

    if (file->flags & LFS_F_READING) {
 80121b8:	68bb      	ldr	r3, [r7, #8]
 80121ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d009      	beq.n	80121d8 <lfs_file_rawwrite+0x50>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 80121c4:	68b9      	ldr	r1, [r7, #8]
 80121c6:	68f8      	ldr	r0, [r7, #12]
 80121c8:	f7ff fd8a 	bl	8011ce0 <lfs_file_flush>
 80121cc:	6378      	str	r0, [r7, #52]	; 0x34
        if (err) {
 80121ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d001      	beq.n	80121d8 <lfs_file_rawwrite+0x50>
            return err;
 80121d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80121d6:	e166      	b.n	80124a6 <lfs_file_rawwrite+0x31e>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 80121d8:	68bb      	ldr	r3, [r7, #8]
 80121da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d009      	beq.n	80121f8 <lfs_file_rawwrite+0x70>
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d203      	bcs.n	80121f8 <lfs_file_rawwrite+0x70>
        file->pos = file->ctz.size;
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121f4:	68bb      	ldr	r3, [r7, #8]
 80121f6:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 80121f8:	68bb      	ldr	r3, [r7, #8]
 80121fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	441a      	add	r2, r3
 8012200:	68fb      	ldr	r3, [r7, #12]
 8012202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012204:	429a      	cmp	r2, r3
 8012206:	d902      	bls.n	801220e <lfs_file_rawwrite+0x86>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 8012208:	f06f 031a 	mvn.w	r3, #26
 801220c:	e14b      	b.n	80124a6 <lfs_file_rawwrite+0x31e>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012216:	2b00      	cmp	r3, #0
 8012218:	d121      	bne.n	801225e <lfs_file_rawwrite+0xd6>
 801221a:	68bb      	ldr	r3, [r7, #8]
 801221c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012222:	429a      	cmp	r2, r3
 8012224:	d91b      	bls.n	801225e <lfs_file_rawwrite+0xd6>
        // fill with zeros
        lfs_off_t pos = file->pos;
 8012226:	68bb      	ldr	r3, [r7, #8]
 8012228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801222a:	633b      	str	r3, [r7, #48]	; 0x30
        file->pos = file->ctz.size;
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 8012234:	e00e      	b.n	8012254 <lfs_file_rawwrite+0xcc>
            lfs_ssize_t res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
 8012236:	2300      	movs	r3, #0
 8012238:	75fb      	strb	r3, [r7, #23]
 801223a:	f107 0217 	add.w	r2, r7, #23
 801223e:	2301      	movs	r3, #1
 8012240:	68b9      	ldr	r1, [r7, #8]
 8012242:	68f8      	ldr	r0, [r7, #12]
 8012244:	f7ff ffa0 	bl	8012188 <lfs_file_rawwrite>
 8012248:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0) {
 801224a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801224c:	2b00      	cmp	r3, #0
 801224e:	da01      	bge.n	8012254 <lfs_file_rawwrite+0xcc>
                return res;
 8012250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012252:	e128      	b.n	80124a6 <lfs_file_rawwrite+0x31e>
        while (file->pos < pos) {
 8012254:	68bb      	ldr	r3, [r7, #8]
 8012256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801225a:	429a      	cmp	r2, r3
 801225c:	d8eb      	bhi.n	8012236 <lfs_file_rawwrite+0xae>
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
 801225e:	68bb      	ldr	r3, [r7, #8]
 8012260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012266:	2b00      	cmp	r3, #0
 8012268:	f000 8112 	beq.w	8012490 <lfs_file_rawwrite+0x308>
            lfs_max(file->pos+nsize, file->ctz.size) >
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012272:	441a      	add	r2, r3
 8012274:	68bb      	ldr	r3, [r7, #8]
 8012276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012278:	4619      	mov	r1, r3
 801227a:	4610      	mov	r0, r2
 801227c:	f7fb fa9e 	bl	800d7bc <lfs_max>
 8012280:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012286:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                (lfs->cfg->metadata_max ?
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801228c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 801228e:	2b00      	cmp	r3, #0
 8012290:	d004      	beq.n	801229c <lfs_file_rawwrite+0x114>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            lfs_min(0x3fe, lfs_min(
 8012298:	08db      	lsrs	r3, r3, #3
 801229a:	e003      	b.n	80122a4 <lfs_file_rawwrite+0x11c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80122a0:	69db      	ldr	r3, [r3, #28]
            lfs_min(0x3fe, lfs_min(
 80122a2:	08db      	lsrs	r3, r3, #3
 80122a4:	4619      	mov	r1, r3
 80122a6:	4610      	mov	r0, r2
 80122a8:	f7fb fa98 	bl	800d7dc <lfs_min>
 80122ac:	4603      	mov	r3, r0
 80122ae:	4619      	mov	r1, r3
 80122b0:	f240 30fe 	movw	r0, #1022	; 0x3fe
 80122b4:	f7fb fa92 	bl	800d7dc <lfs_min>
 80122b8:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 80122ba:	429c      	cmp	r4, r3
 80122bc:	f240 80e8 	bls.w	8012490 <lfs_file_rawwrite+0x308>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 80122c0:	68b9      	ldr	r1, [r7, #8]
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	f7ff fcea 	bl	8011c9c <lfs_file_outline>
 80122c8:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err) {
 80122ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	f000 80df 	beq.w	8012490 <lfs_file_rawwrite+0x308>
            file->flags |= LFS_F_ERRED;
 80122d2:	68bb      	ldr	r3, [r7, #8]
 80122d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122d6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80122da:	68bb      	ldr	r3, [r7, #8]
 80122dc:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 80122de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e0:	e0e1      	b.n	80124a6 <lfs_file_rawwrite+0x31e>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d006      	beq.n	80122fc <lfs_file_rawwrite+0x174>
                file->off == lfs->cfg->block_size) {
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80122f6:	69db      	ldr	r3, [r3, #28]
        if (!(file->flags & LFS_F_WRITING) ||
 80122f8:	429a      	cmp	r2, r3
 80122fa:	d171      	bne.n	80123e0 <lfs_file_rawwrite+0x258>
            if (!(file->flags & LFS_F_INLINE)) {
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012300:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012304:	2b00      	cmp	r3, #0
 8012306:	d15d      	bne.n	80123c4 <lfs_file_rawwrite+0x23c>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012310:	2b00      	cmp	r3, #0
 8012312:	d12d      	bne.n	8012370 <lfs_file_rawwrite+0x1e8>
 8012314:	68bb      	ldr	r3, [r7, #8]
 8012316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012318:	2b00      	cmp	r3, #0
 801231a:	d029      	beq.n	8012370 <lfs_file_rawwrite+0x1e8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 801232a:	68ba      	ldr	r2, [r7, #8]
 801232c:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 801232e:	3a01      	subs	r2, #1
 8012330:	68b9      	ldr	r1, [r7, #8]
 8012332:	3138      	adds	r1, #56	; 0x38
 8012334:	68b8      	ldr	r0, [r7, #8]
 8012336:	303c      	adds	r0, #60	; 0x3c
 8012338:	9003      	str	r0, [sp, #12]
 801233a:	9102      	str	r1, [sp, #8]
 801233c:	9201      	str	r2, [sp, #4]
 801233e:	9300      	str	r3, [sp, #0]
 8012340:	462b      	mov	r3, r5
 8012342:	4622      	mov	r2, r4
 8012344:	2100      	movs	r1, #0
 8012346:	68f8      	ldr	r0, [r7, #12]
 8012348:	f7fe ffde 	bl	8011308 <lfs_ctz_find>
 801234c:	6278      	str	r0, [r7, #36]	; 0x24
                    if (err) {
 801234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012350:	2b00      	cmp	r3, #0
 8012352:	d007      	beq.n	8012364 <lfs_file_rawwrite+0x1dc>
                        file->flags |= LFS_F_ERRED;
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012358:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 8012360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012362:	e0a0      	b.n	80124a6 <lfs_file_rawwrite+0x31e>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 8012364:	68bb      	ldr	r3, [r7, #8]
 8012366:	3340      	adds	r3, #64	; 0x40
 8012368:	4619      	mov	r1, r3
 801236a:	68f8      	ldr	r0, [r7, #12]
 801236c:	f7fb fafb 	bl	800d966 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 8012370:	68f8      	ldr	r0, [r7, #12]
 8012372:	f7fc f977 	bl	800e664 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801237c:	68fc      	ldr	r4, [r7, #12]
 801237e:	68bb      	ldr	r3, [r7, #8]
 8012380:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8012382:	68bb      	ldr	r3, [r7, #8]
 8012384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012386:	68ba      	ldr	r2, [r7, #8]
 8012388:	3238      	adds	r2, #56	; 0x38
 801238a:	68b9      	ldr	r1, [r7, #8]
 801238c:	313c      	adds	r1, #60	; 0x3c
 801238e:	9102      	str	r1, [sp, #8]
 8012390:	9201      	str	r2, [sp, #4]
 8012392:	9300      	str	r3, [sp, #0]
 8012394:	462b      	mov	r3, r5
 8012396:	4622      	mov	r2, r4
 8012398:	4601      	mov	r1, r0
 801239a:	68f8      	ldr	r0, [r7, #12]
 801239c:	f7ff f820 	bl	80113e0 <lfs_ctz_extend>
 80123a0:	6238      	str	r0, [r7, #32]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 80123a2:	6a3b      	ldr	r3, [r7, #32]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d015      	beq.n	80123d4 <lfs_file_rawwrite+0x24c>
                    file->flags |= LFS_F_ERRED;
 80123a8:	68bb      	ldr	r3, [r7, #8]
 80123aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123ac:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80123b0:	68bb      	ldr	r3, [r7, #8]
 80123b2:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 80123b4:	6a3b      	ldr	r3, [r7, #32]
 80123b6:	e076      	b.n	80124a6 <lfs_file_rawwrite+0x31e>
 80123b8:	0802a060 	.word	0x0802a060
 80123bc:	0802dd34 	.word	0x0802dd34
 80123c0:	08029dd4 	.word	0x08029dd4
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	f06f 0201 	mvn.w	r2, #1
 80123ca:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 80123cc:	68bb      	ldr	r3, [r7, #8]
 80123ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80123d0:	68bb      	ldr	r3, [r7, #8]
 80123d2:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80123d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80123e4:	69da      	ldr	r2, [r3, #28]
 80123e6:	68bb      	ldr	r3, [r7, #8]
 80123e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123ea:	1ad3      	subs	r3, r2, r3
 80123ec:	4619      	mov	r1, r3
 80123ee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80123f0:	f7fb f9f4 	bl	800d7dc <lfs_min>
 80123f4:	61f8      	str	r0, [r7, #28]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	f103 0040 	add.w	r0, r3, #64	; 0x40
 80123fc:	68fc      	ldr	r4, [r7, #12]
 80123fe:	68bb      	ldr	r3, [r7, #8]
 8012400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012402:	68ba      	ldr	r2, [r7, #8]
 8012404:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8012406:	69f9      	ldr	r1, [r7, #28]
 8012408:	9103      	str	r1, [sp, #12]
 801240a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801240c:	9102      	str	r1, [sp, #8]
 801240e:	9201      	str	r2, [sp, #4]
 8012410:	9300      	str	r3, [sp, #0]
 8012412:	2301      	movs	r3, #1
 8012414:	4622      	mov	r2, r4
 8012416:	4601      	mov	r1, r0
 8012418:	68f8      	ldr	r0, [r7, #12]
 801241a:	f7fb fd01 	bl	800de20 <lfs_bd_prog>
 801241e:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 8012420:	69bb      	ldr	r3, [r7, #24]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d01c      	beq.n	8012460 <lfs_file_rawwrite+0x2d8>
                if (err == LFS_ERR_CORRUPT) {
 8012426:	69bb      	ldr	r3, [r7, #24]
 8012428:	f113 0f54 	cmn.w	r3, #84	; 0x54
 801242c:	d007      	beq.n	801243e <lfs_file_rawwrite+0x2b6>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012432:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8012436:	68bb      	ldr	r3, [r7, #8]
 8012438:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 801243a:	69bb      	ldr	r3, [r7, #24]
 801243c:	e033      	b.n	80124a6 <lfs_file_rawwrite+0x31e>
                    goto relocate;
 801243e:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 8012440:	68b9      	ldr	r1, [r7, #8]
 8012442:	68f8      	ldr	r0, [r7, #12]
 8012444:	f7ff fb50 	bl	8011ae8 <lfs_file_relocate>
 8012448:	61b8      	str	r0, [r7, #24]
            if (err) {
 801244a:	69bb      	ldr	r3, [r7, #24]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d0d2      	beq.n	80123f6 <lfs_file_rawwrite+0x26e>
                file->flags |= LFS_F_ERRED;
 8012450:	68bb      	ldr	r3, [r7, #8]
 8012452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012454:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8012458:	68bb      	ldr	r3, [r7, #8]
 801245a:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 801245c:	69bb      	ldr	r3, [r7, #24]
 801245e:	e022      	b.n	80124a6 <lfs_file_rawwrite+0x31e>
            break;
 8012460:	bf00      	nop
            }
        }

        file->pos += diff;
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012466:	69fb      	ldr	r3, [r7, #28]
 8012468:	441a      	add	r2, r3
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012472:	69fb      	ldr	r3, [r7, #28]
 8012474:	441a      	add	r2, r3
 8012476:	68bb      	ldr	r3, [r7, #8]
 8012478:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 801247a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	4413      	add	r3, r2
 8012480:	63fb      	str	r3, [r7, #60]	; 0x3c
        nsize -= diff;
 8012482:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012484:	69fb      	ldr	r3, [r7, #28]
 8012486:	1ad3      	subs	r3, r2, r3
 8012488:	63bb      	str	r3, [r7, #56]	; 0x38

        lfs_alloc_ack(lfs);
 801248a:	68f8      	ldr	r0, [r7, #12]
 801248c:	f7fc f8ea 	bl	800e664 <lfs_alloc_ack>
    while (nsize > 0) {
 8012490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012492:	2b00      	cmp	r3, #0
 8012494:	f47f af25 	bne.w	80122e2 <lfs_file_rawwrite+0x15a>
    }

    file->flags &= ~LFS_F_ERRED;
 8012498:	68bb      	ldr	r3, [r7, #8]
 801249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801249c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	631a      	str	r2, [r3, #48]	; 0x30
    return size;
 80124a4:	683b      	ldr	r3, [r7, #0]
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3740      	adds	r7, #64	; 0x40
 80124aa:	46bd      	mov	sp, r7
 80124ac:	bdb0      	pop	{r4, r5, r7, pc}
 80124ae:	bf00      	nop

080124b0 <lfs_file_rawseek>:
#endif

static lfs_soff_t lfs_file_rawseek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b086      	sub	sp, #24
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	60f8      	str	r0, [r7, #12]
 80124b8:	60b9      	str	r1, [r7, #8]
 80124ba:	607a      	str	r2, [r7, #4]
 80124bc:	603b      	str	r3, [r7, #0]
    // find new pos
    lfs_off_t npos = file->pos;
 80124be:	68bb      	ldr	r3, [r7, #8]
 80124c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80124c2:	617b      	str	r3, [r7, #20]
    if (whence == LFS_SEEK_SET) {
 80124c4:	683b      	ldr	r3, [r7, #0]
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d102      	bne.n	80124d0 <lfs_file_rawseek+0x20>
        npos = off;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	617b      	str	r3, [r7, #20]
 80124ce:	e013      	b.n	80124f8 <lfs_file_rawseek+0x48>
    } else if (whence == LFS_SEEK_CUR) {
 80124d0:	683b      	ldr	r3, [r7, #0]
 80124d2:	2b01      	cmp	r3, #1
 80124d4:	d105      	bne.n	80124e2 <lfs_file_rawseek+0x32>
        npos = file->pos + off;
 80124d6:	68bb      	ldr	r3, [r7, #8]
 80124d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	4413      	add	r3, r2
 80124de:	617b      	str	r3, [r7, #20]
 80124e0:	e00a      	b.n	80124f8 <lfs_file_rawseek+0x48>
    } else if (whence == LFS_SEEK_END) {
 80124e2:	683b      	ldr	r3, [r7, #0]
 80124e4:	2b02      	cmp	r3, #2
 80124e6:	d107      	bne.n	80124f8 <lfs_file_rawseek+0x48>
        npos = lfs_file_rawsize(lfs, file) + off;
 80124e8:	68b9      	ldr	r1, [r7, #8]
 80124ea:	68f8      	ldr	r0, [r7, #12]
 80124ec:	f000 f825 	bl	801253a <lfs_file_rawsize>
 80124f0:	4602      	mov	r2, r0
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	4413      	add	r3, r2
 80124f6:	617b      	str	r3, [r7, #20]
    }

    if (npos > lfs->file_max) {
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124fc:	697a      	ldr	r2, [r7, #20]
 80124fe:	429a      	cmp	r2, r3
 8012500:	d902      	bls.n	8012508 <lfs_file_rawseek+0x58>
        // file position out of range
        return LFS_ERR_INVAL;
 8012502:	f06f 0315 	mvn.w	r3, #21
 8012506:	e014      	b.n	8012532 <lfs_file_rawseek+0x82>
    }

    if (file->pos == npos) {
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801250c:	697a      	ldr	r2, [r7, #20]
 801250e:	429a      	cmp	r2, r3
 8012510:	d101      	bne.n	8012516 <lfs_file_rawseek+0x66>
        // noop - position has not changed
        return npos;
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	e00d      	b.n	8012532 <lfs_file_rawseek+0x82>
    }

#ifndef LFS_READONLY
    // write out everything beforehand, may be noop if rdonly
    int err = lfs_file_flush(lfs, file);
 8012516:	68b9      	ldr	r1, [r7, #8]
 8012518:	68f8      	ldr	r0, [r7, #12]
 801251a:	f7ff fbe1 	bl	8011ce0 <lfs_file_flush>
 801251e:	6138      	str	r0, [r7, #16]
    if (err) {
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d001      	beq.n	801252a <lfs_file_rawseek+0x7a>
        return err;
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	e003      	b.n	8012532 <lfs_file_rawseek+0x82>
    }
#endif

    // update pos
    file->pos = npos;
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	697a      	ldr	r2, [r7, #20]
 801252e:	635a      	str	r2, [r3, #52]	; 0x34
    return npos;
 8012530:	697b      	ldr	r3, [r7, #20]
}
 8012532:	4618      	mov	r0, r3
 8012534:	3718      	adds	r7, #24
 8012536:	46bd      	mov	sp, r7
 8012538:	bd80      	pop	{r7, pc}

0801253a <lfs_file_rawsize>:
    }

    return 0;
}

static lfs_soff_t lfs_file_rawsize(lfs_t *lfs, lfs_file_t *file) {
 801253a:	b580      	push	{r7, lr}
 801253c:	b082      	sub	sp, #8
 801253e:	af00      	add	r7, sp, #0
 8012540:	6078      	str	r0, [r7, #4]
 8012542:	6039      	str	r1, [r7, #0]
    (void)lfs;

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 8012544:	683b      	ldr	r3, [r7, #0]
 8012546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801254c:	2b00      	cmp	r3, #0
 801254e:	d009      	beq.n	8012564 <lfs_file_rawsize+0x2a>
        return lfs_max(file->pos, file->ctz.size);
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012554:	683b      	ldr	r3, [r7, #0]
 8012556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012558:	4619      	mov	r1, r3
 801255a:	4610      	mov	r0, r2
 801255c:	f7fb f92e 	bl	800d7bc <lfs_max>
 8012560:	4603      	mov	r3, r0
 8012562:	e001      	b.n	8012568 <lfs_file_rawsize+0x2e>
    }
#endif

    return file->ctz.size;
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8012568:	4618      	mov	r0, r3
 801256a:	3708      	adds	r7, #8
 801256c:	46bd      	mov	sp, r7
 801256e:	bd80      	pop	{r7, pc}

08012570 <lfs_rawstat>:


/// General fs operations ///
static int lfs_rawstat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 8012570:	b580      	push	{r7, lr}
 8012572:	b08e      	sub	sp, #56	; 0x38
 8012574:	af00      	add	r7, sp, #0
 8012576:	60f8      	str	r0, [r7, #12]
 8012578:	60b9      	str	r1, [r7, #8]
 801257a:	607a      	str	r2, [r7, #4]
    lfs_mdir_t cwd;
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
 801257c:	f107 0208 	add.w	r2, r7, #8
 8012580:	f107 0114 	add.w	r1, r7, #20
 8012584:	2300      	movs	r3, #0
 8012586:	68f8      	ldr	r0, [r7, #12]
 8012588:	f7fd f94c 	bl	800f824 <lfs_dir_find>
 801258c:	6378      	str	r0, [r7, #52]	; 0x34
    if (tag < 0) {
 801258e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012590:	2b00      	cmp	r3, #0
 8012592:	da01      	bge.n	8012598 <lfs_rawstat+0x28>
        return (int)tag;
 8012594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012596:	e00c      	b.n	80125b2 <lfs_rawstat+0x42>
    }

    return lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
 8012598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801259a:	4618      	mov	r0, r3
 801259c:	f7fb fe32 	bl	800e204 <lfs_tag_id>
 80125a0:	4603      	mov	r3, r0
 80125a2:	461a      	mov	r2, r3
 80125a4:	f107 0114 	add.w	r1, r7, #20
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	68f8      	ldr	r0, [r7, #12]
 80125ac:	f7fd f876 	bl	800f69c <lfs_dir_getinfo>
 80125b0:	4603      	mov	r3, r0
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	3738      	adds	r7, #56	; 0x38
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}
	...

080125bc <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 80125bc:	b580      	push	{r7, lr}
 80125be:	b08c      	sub	sp, #48	; 0x30
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	6078      	str	r0, [r7, #4]
 80125c4:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	683a      	ldr	r2, [r7, #0]
 80125ca:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 80125cc:	2300      	movs	r3, #0
 80125ce:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80125d4:	695b      	ldr	r3, [r3, #20]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d106      	bne.n	80125e8 <lfs_init+0x2c>
 80125da:	4b92      	ldr	r3, [pc, #584]	; (8012824 <lfs_init+0x268>)
 80125dc:	4a92      	ldr	r2, [pc, #584]	; (8012828 <lfs_init+0x26c>)
 80125de:	f640 51a4 	movw	r1, #3492	; 0xda4
 80125e2:	4892      	ldr	r0, [pc, #584]	; (801282c <lfs_init+0x270>)
 80125e4:	f011 fd16 	bl	8024014 <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80125ec:	699b      	ldr	r3, [r3, #24]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d106      	bne.n	8012600 <lfs_init+0x44>
 80125f2:	4b8f      	ldr	r3, [pc, #572]	; (8012830 <lfs_init+0x274>)
 80125f4:	4a8c      	ldr	r2, [pc, #560]	; (8012828 <lfs_init+0x26c>)
 80125f6:	f640 51a5 	movw	r1, #3493	; 0xda5
 80125fa:	488c      	ldr	r0, [pc, #560]	; (801282c <lfs_init+0x270>)
 80125fc:	f011 fd0a 	bl	8024014 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012606:	2b00      	cmp	r3, #0
 8012608:	d106      	bne.n	8012618 <lfs_init+0x5c>
 801260a:	4b8a      	ldr	r3, [pc, #552]	; (8012834 <lfs_init+0x278>)
 801260c:	4a86      	ldr	r2, [pc, #536]	; (8012828 <lfs_init+0x26c>)
 801260e:	f640 51a6 	movw	r1, #3494	; 0xda6
 8012612:	4886      	ldr	r0, [pc, #536]	; (801282c <lfs_init+0x270>)
 8012614:	f011 fcfe 	bl	8024014 <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801261e:	687a      	ldr	r2, [r7, #4]
 8012620:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8012622:	6952      	ldr	r2, [r2, #20]
 8012624:	fbb3 f1f2 	udiv	r1, r3, r2
 8012628:	fb01 f202 	mul.w	r2, r1, r2
 801262c:	1a9b      	subs	r3, r3, r2
 801262e:	2b00      	cmp	r3, #0
 8012630:	d006      	beq.n	8012640 <lfs_init+0x84>
 8012632:	4b81      	ldr	r3, [pc, #516]	; (8012838 <lfs_init+0x27c>)
 8012634:	4a7c      	ldr	r2, [pc, #496]	; (8012828 <lfs_init+0x26c>)
 8012636:	f640 51aa 	movw	r1, #3498	; 0xdaa
 801263a:	487c      	ldr	r0, [pc, #496]	; (801282c <lfs_init+0x270>)
 801263c:	f011 fcea 	bl	8024014 <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012646:	687a      	ldr	r2, [r7, #4]
 8012648:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801264a:	6992      	ldr	r2, [r2, #24]
 801264c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012650:	fb01 f202 	mul.w	r2, r1, r2
 8012654:	1a9b      	subs	r3, r3, r2
 8012656:	2b00      	cmp	r3, #0
 8012658:	d006      	beq.n	8012668 <lfs_init+0xac>
 801265a:	4b78      	ldr	r3, [pc, #480]	; (801283c <lfs_init+0x280>)
 801265c:	4a72      	ldr	r2, [pc, #456]	; (8012828 <lfs_init+0x26c>)
 801265e:	f640 51ab 	movw	r1, #3499	; 0xdab
 8012662:	4872      	ldr	r0, [pc, #456]	; (801282c <lfs_init+0x270>)
 8012664:	f011 fcd6 	bl	8024014 <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801266c:	69db      	ldr	r3, [r3, #28]
 801266e:	687a      	ldr	r2, [r7, #4]
 8012670:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8012672:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8012674:	fbb3 f1f2 	udiv	r1, r3, r2
 8012678:	fb01 f202 	mul.w	r2, r1, r2
 801267c:	1a9b      	subs	r3, r3, r2
 801267e:	2b00      	cmp	r3, #0
 8012680:	d006      	beq.n	8012690 <lfs_init+0xd4>
 8012682:	4b6f      	ldr	r3, [pc, #444]	; (8012840 <lfs_init+0x284>)
 8012684:	4a68      	ldr	r2, [pc, #416]	; (8012828 <lfs_init+0x26c>)
 8012686:	f640 51ac 	movw	r1, #3500	; 0xdac
 801268a:	4868      	ldr	r0, [pc, #416]	; (801282c <lfs_init+0x270>)
 801268c:	f011 fcc2 	bl	8024014 <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012694:	69db      	ldr	r3, [r3, #28]
 8012696:	3b08      	subs	r3, #8
 8012698:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801269c:	fbb2 f3f3 	udiv	r3, r2, r3
 80126a0:	4618      	mov	r0, r3
 80126a2:	f7fb f8d2 	bl	800d84a <lfs_npw2>
 80126a6:	4603      	mov	r3, r0
 80126a8:	009a      	lsls	r2, r3, #2
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126ae:	69db      	ldr	r3, [r3, #28]
 80126b0:	429a      	cmp	r2, r3
 80126b2:	d906      	bls.n	80126c2 <lfs_init+0x106>
 80126b4:	4b63      	ldr	r3, [pc, #396]	; (8012844 <lfs_init+0x288>)
 80126b6:	4a5c      	ldr	r2, [pc, #368]	; (8012828 <lfs_init+0x26c>)
 80126b8:	f640 51af 	movw	r1, #3503	; 0xdaf
 80126bc:	485b      	ldr	r0, [pc, #364]	; (801282c <lfs_init+0x270>)
 80126be:	f011 fca9 	bl	8024014 <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d106      	bne.n	80126da <lfs_init+0x11e>
 80126cc:	4b5e      	ldr	r3, [pc, #376]	; (8012848 <lfs_init+0x28c>)
 80126ce:	4a56      	ldr	r2, [pc, #344]	; (8012828 <lfs_init+0x26c>)
 80126d0:	f640 51b8 	movw	r1, #3512	; 0xdb8
 80126d4:	4855      	ldr	r0, [pc, #340]	; (801282c <lfs_init+0x270>)
 80126d6:	f011 fc9d 	bl	8024014 <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d005      	beq.n	80126f0 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	60da      	str	r2, [r3, #12]
 80126ee:	e010      	b.n	8012712 <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80126f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7fb f90f 	bl	800d91a <lfs_malloc>
 80126fc:	4602      	mov	r2, r0
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	68db      	ldr	r3, [r3, #12]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d103      	bne.n	8012712 <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 801270a:	f06f 030b 	mvn.w	r3, #11
 801270e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8012710:	e0fd      	b.n	801290e <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012718:	2b00      	cmp	r3, #0
 801271a:	d005      	beq.n	8012728 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012720:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	61da      	str	r2, [r3, #28]
 8012726:	e010      	b.n	801274a <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801272c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801272e:	4618      	mov	r0, r3
 8012730:	f7fb f8f3 	bl	800d91a <lfs_malloc>
 8012734:	4602      	mov	r2, r0
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	69db      	ldr	r3, [r3, #28]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d103      	bne.n	801274a <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 8012742:	f06f 030b 	mvn.w	r3, #11
 8012746:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 8012748:	e0e1      	b.n	801290e <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	4619      	mov	r1, r3
 801274e:	6878      	ldr	r0, [r7, #4]
 8012750:	f7fb f909 	bl	800d966 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	3310      	adds	r3, #16
 8012758:	4619      	mov	r1, r3
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f7fb f903 	bl	800d966 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012766:	2b00      	cmp	r3, #0
 8012768:	d106      	bne.n	8012778 <lfs_init+0x1bc>
 801276a:	4b38      	ldr	r3, [pc, #224]	; (801284c <lfs_init+0x290>)
 801276c:	4a2e      	ldr	r2, [pc, #184]	; (8012828 <lfs_init+0x26c>)
 801276e:	f640 51d6 	movw	r1, #3542	; 0xdd6
 8012772:	482e      	ldr	r0, [pc, #184]	; (801282c <lfs_init+0x270>)
 8012774:	f011 fc4e 	bl	8024014 <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801277e:	f003 0307 	and.w	r3, r3, #7
 8012782:	2b00      	cmp	r3, #0
 8012784:	d106      	bne.n	8012794 <lfs_init+0x1d8>
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801278a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801278c:	f003 0303 	and.w	r3, r3, #3
 8012790:	2b00      	cmp	r3, #0
 8012792:	d006      	beq.n	80127a2 <lfs_init+0x1e6>
 8012794:	4b2e      	ldr	r3, [pc, #184]	; (8012850 <lfs_init+0x294>)
 8012796:	4a24      	ldr	r2, [pc, #144]	; (8012828 <lfs_init+0x26c>)
 8012798:	f640 51d7 	movw	r1, #3543	; 0xdd7
 801279c:	4823      	ldr	r0, [pc, #140]	; (801282c <lfs_init+0x270>)
 801279e:	f011 fc39 	bl	8024014 <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d005      	beq.n	80127b8 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80127b2:	687b      	ldr	r3, [r7, #4]
 80127b4:	665a      	str	r2, [r3, #100]	; 0x64
 80127b6:	e010      	b.n	80127da <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127be:	4618      	mov	r0, r3
 80127c0:	f7fb f8ab 	bl	800d91a <lfs_malloc>
 80127c4:	4602      	mov	r2, r0
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d103      	bne.n	80127da <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 80127d2:	f06f 030b 	mvn.w	r3, #11
 80127d6:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 80127d8:	e099      	b.n	801290e <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127e0:	2bff      	cmp	r3, #255	; 0xff
 80127e2:	d906      	bls.n	80127f2 <lfs_init+0x236>
 80127e4:	4b1b      	ldr	r3, [pc, #108]	; (8012854 <lfs_init+0x298>)
 80127e6:	4a10      	ldr	r2, [pc, #64]	; (8012828 <lfs_init+0x26c>)
 80127e8:	f640 51e4 	movw	r1, #3556	; 0xde4
 80127ec:	480f      	ldr	r0, [pc, #60]	; (801282c <lfs_init+0x270>)
 80127ee:	f011 fc11 	bl	8024014 <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80127f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012800:	2b00      	cmp	r3, #0
 8012802:	d102      	bne.n	801280a <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	22ff      	movs	r2, #255	; 0xff
 8012808:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012810:	2b00      	cmp	r3, #0
 8012812:	da23      	bge.n	801285c <lfs_init+0x2a0>
 8012814:	4b10      	ldr	r3, [pc, #64]	; (8012858 <lfs_init+0x29c>)
 8012816:	4a04      	ldr	r2, [pc, #16]	; (8012828 <lfs_init+0x26c>)
 8012818:	f640 51ea 	movw	r1, #3562	; 0xdea
 801281c:	4803      	ldr	r0, [pc, #12]	; (801282c <lfs_init+0x270>)
 801281e:	f011 fbf9 	bl	8024014 <__assert_func>
 8012822:	bf00      	nop
 8012824:	0802a090 	.word	0x0802a090
 8012828:	0802dd48 	.word	0x0802dd48
 801282c:	08029dd4 	.word	0x08029dd4
 8012830:	0802a0ac 	.word	0x0802a0ac
 8012834:	0802a0c8 	.word	0x0802a0c8
 8012838:	0802a0e4 	.word	0x0802a0e4
 801283c:	0802a114 	.word	0x0802a114
 8012840:	0802a144 	.word	0x0802a144
 8012844:	0802a178 	.word	0x0802a178
 8012848:	0802a1c4 	.word	0x0802a1c4
 801284c:	0802a1e0 	.word	0x0802a1e0
 8012850:	0802a200 	.word	0x0802a200
 8012854:	0802a254 	.word	0x0802a254
 8012858:	0802a270 	.word	0x0802a270
    lfs->file_max = lfs->cfg->file_max;
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801286a:	2b00      	cmp	r3, #0
 801286c:	d103      	bne.n	8012876 <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8012874:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801287a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801287c:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8012880:	4293      	cmp	r3, r2
 8012882:	d906      	bls.n	8012892 <lfs_init+0x2d6>
 8012884:	4b26      	ldr	r3, [pc, #152]	; (8012920 <lfs_init+0x364>)
 8012886:	4a27      	ldr	r2, [pc, #156]	; (8012924 <lfs_init+0x368>)
 8012888:	f44f 615f 	mov.w	r1, #3568	; 0xdf0
 801288c:	4826      	ldr	r0, [pc, #152]	; (8012928 <lfs_init+0x36c>)
 801288e:	f011 fbc1 	bl	8024014 <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012896:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d103      	bne.n	80128ac <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80128aa:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80128b6:	69db      	ldr	r3, [r3, #28]
 80128b8:	429a      	cmp	r2, r3
 80128ba:	d906      	bls.n	80128ca <lfs_init+0x30e>
 80128bc:	4b1b      	ldr	r3, [pc, #108]	; (801292c <lfs_init+0x370>)
 80128be:	4a19      	ldr	r2, [pc, #100]	; (8012924 <lfs_init+0x368>)
 80128c0:	f640 51f6 	movw	r1, #3574	; 0xdf6
 80128c4:	4818      	ldr	r0, [pc, #96]	; (8012928 <lfs_init+0x36c>)
 80128c6:	f011 fba5 	bl	8024014 <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128d0:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80128d8:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	2200      	movs	r2, #0
 80128e4:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	333c      	adds	r3, #60	; 0x3c
 80128ea:	2200      	movs	r2, #0
 80128ec:	601a      	str	r2, [r3, #0]
 80128ee:	605a      	str	r2, [r3, #4]
 80128f0:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	3330      	adds	r3, #48	; 0x30
 80128f6:	2200      	movs	r2, #0
 80128f8:	601a      	str	r2, [r3, #0]
 80128fa:	605a      	str	r2, [r3, #4]
 80128fc:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	3348      	adds	r3, #72	; 0x48
 8012902:	2200      	movs	r2, #0
 8012904:	601a      	str	r2, [r3, #0]
 8012906:	605a      	str	r2, [r3, #4]
 8012908:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 801290a:	2300      	movs	r3, #0
 801290c:	e003      	b.n	8012916 <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f000 f80e 	bl	8012930 <lfs_deinit>
    return err;
 8012914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8012916:	4618      	mov	r0, r3
 8012918:	3730      	adds	r7, #48	; 0x30
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	0802a294 	.word	0x0802a294
 8012924:	0802dd48 	.word	0x0802dd48
 8012928:	08029dd4 	.word	0x08029dd4
 801292c:	0802a2b0 	.word	0x0802a2b0

08012930 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 8012930:	b580      	push	{r7, lr}
 8012932:	b082      	sub	sp, #8
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801293e:	2b00      	cmp	r3, #0
 8012940:	d104      	bne.n	801294c <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	68db      	ldr	r3, [r3, #12]
 8012946:	4618      	mov	r0, r3
 8012948:	f7fa fff3 	bl	800d932 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012950:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012952:	2b00      	cmp	r3, #0
 8012954:	d104      	bne.n	8012960 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	69db      	ldr	r3, [r3, #28]
 801295a:	4618      	mov	r0, r3
 801295c:	f7fa ffe9 	bl	800d932 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012966:	2b00      	cmp	r3, #0
 8012968:	d104      	bne.n	8012974 <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801296e:	4618      	mov	r0, r3
 8012970:	f7fa ffdf 	bl	800d932 <lfs_free>
    }

    return 0;
 8012974:	2300      	movs	r3, #0
}
 8012976:	4618      	mov	r0, r3
 8012978:	3708      	adds	r7, #8
 801297a:	46bd      	mov	sp, r7
 801297c:	bd80      	pop	{r7, pc}
	...

08012980 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 8012980:	b580      	push	{r7, lr}
 8012982:	b0a0      	sub	sp, #128	; 0x80
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	6039      	str	r1, [r7, #0]
    int err = 0;
 801298a:	2300      	movs	r3, #0
 801298c:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 801298e:	6839      	ldr	r1, [r7, #0]
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f7ff fe13 	bl	80125bc <lfs_init>
 8012996:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8012998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801299a:	2b00      	cmp	r3, #0
 801299c:	d001      	beq.n	80129a2 <lfs_rawformat+0x22>
            return err;
 801299e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80129a0:	e082      	b.n	8012aa8 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	6e58      	ldr	r0, [r3, #100]	; 0x64
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80129aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129ac:	461a      	mov	r2, r3
 80129ae:	2100      	movs	r1, #0
 80129b0:	f012 fbcc 	bl	802514c <memset>
        lfs->free.off = 0;
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	2200      	movs	r2, #0
 80129b8:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80129be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129c0:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80129c6:	6a1b      	ldr	r3, [r3, #32]
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 80129c8:	4619      	mov	r1, r3
 80129ca:	4610      	mov	r0, r2
 80129cc:	f7fa ff06 	bl	800d7dc <lfs_min>
 80129d0:	4602      	mov	r2, r0
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	2200      	movs	r2, #0
 80129da:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f7fb fe41 	bl	800e664 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 80129e2:	f107 030c 	add.w	r3, r7, #12
 80129e6:	4619      	mov	r1, r3
 80129e8:	6878      	ldr	r0, [r7, #4]
 80129ea:	f7fd fa07 	bl	800fdfc <lfs_dir_alloc>
 80129ee:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 80129f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d14f      	bne.n	8012a96 <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 80129f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80129fa:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012a00:	69db      	ldr	r3, [r3, #28]
        lfs_superblock_t superblock = {
 8012a02:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012a08:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
 8012a0a:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 8012a10:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 8012a16:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 8012a1c:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 8012a1e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012a22:	4618      	mov	r0, r3
 8012a24:	f7fb fd5e 	bl	800e4e4 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 8012a28:	4b21      	ldr	r3, [pc, #132]	; (8012ab0 <lfs_rawformat+0x130>)
 8012a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a2c:	2300      	movs	r3, #0
 8012a2e:	653b      	str	r3, [r7, #80]	; 0x50
 8012a30:	4b20      	ldr	r3, [pc, #128]	; (8012ab4 <lfs_rawformat+0x134>)
 8012a32:	657b      	str	r3, [r7, #84]	; 0x54
 8012a34:	4b20      	ldr	r3, [pc, #128]	; (8012ab8 <lfs_rawformat+0x138>)
 8012a36:	65bb      	str	r3, [r7, #88]	; 0x58
 8012a38:	4b20      	ldr	r3, [pc, #128]	; (8012abc <lfs_rawformat+0x13c>)
 8012a3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012a3c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012a40:	663b      	str	r3, [r7, #96]	; 0x60
 8012a42:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8012a46:	f107 010c 	add.w	r1, r7, #12
 8012a4a:	2303      	movs	r3, #3
 8012a4c:	6878      	ldr	r0, [r7, #4]
 8012a4e:	f7fd fe25 	bl	801069c <lfs_dir_commit>
 8012a52:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 8012a54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d11f      	bne.n	8012a9a <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 8012a5a:	2300      	movs	r3, #0
 8012a5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 8012a60:	f107 010c 	add.w	r1, r7, #12
 8012a64:	2300      	movs	r3, #0
 8012a66:	2200      	movs	r2, #0
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f7fd fe17 	bl	801069c <lfs_dir_commit>
 8012a6e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8012a70:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d113      	bne.n	8012a9e <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 8012a76:	2300      	movs	r3, #0
 8012a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8012a7e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012a82:	f107 030c 	add.w	r3, r7, #12
 8012a86:	4619      	mov	r1, r3
 8012a88:	6878      	ldr	r0, [r7, #4]
 8012a8a:	f7fc fdb9 	bl	800f600 <lfs_dir_fetch>
 8012a8e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 8012a90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	e004      	b.n	8012aa0 <lfs_rawformat+0x120>
            goto cleanup;
 8012a96:	bf00      	nop
 8012a98:	e002      	b.n	8012aa0 <lfs_rawformat+0x120>
            goto cleanup;
 8012a9a:	bf00      	nop
 8012a9c:	e000      	b.n	8012aa0 <lfs_rawformat+0x120>
            goto cleanup;
 8012a9e:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 8012aa0:	6878      	ldr	r0, [r7, #4]
 8012aa2:	f7ff ff45 	bl	8012930 <lfs_deinit>
    return err;
 8012aa6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3780      	adds	r7, #128	; 0x80
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	40100000 	.word	0x40100000
 8012ab4:	0ff00008 	.word	0x0ff00008
 8012ab8:	0802a2e0 	.word	0x0802a2e0
 8012abc:	20100018 	.word	0x20100018

08012ac0 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b09c      	sub	sp, #112	; 0x70
 8012ac4:	af04      	add	r7, sp, #16
 8012ac6:	6078      	str	r0, [r7, #4]
 8012ac8:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 8012aca:	6839      	ldr	r1, [r7, #0]
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f7ff fd75 	bl	80125bc <lfs_init>
 8012ad2:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 8012ad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d001      	beq.n	8012ade <lfs_rawmount+0x1e>
        return err;
 8012ada:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012adc:	e149      	b.n	8012d72 <lfs_rawmount+0x2b2>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 8012ade:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012ae2:	2220      	movs	r2, #32
 8012ae4:	2100      	movs	r1, #0
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f012 fb30 	bl	802514c <memset>
 8012aec:	2301      	movs	r3, #1
 8012aee:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 8012af0:	2300      	movs	r3, #0
 8012af2:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 8012af4:	e0dc      	b.n	8012cb0 <lfs_rawmount+0x1f0>
        if (cycle >= lfs->cfg->block_count/2) {
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012afa:	6a1b      	ldr	r3, [r3, #32]
 8012afc:	085b      	lsrs	r3, r3, #1
 8012afe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d303      	bcc.n	8012b0c <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 8012b04:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8012b08:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8012b0a:	e12e      	b.n	8012d6a <lfs_rawmount+0x2aa>
        }
        cycle += 1;
 8012b0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012b0e:	3301      	adds	r3, #1
 8012b10:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	627b      	str	r3, [r7, #36]	; 0x24
 8012b16:	4b99      	ldr	r3, [pc, #612]	; (8012d7c <lfs_rawmount+0x2bc>)
 8012b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b1a:	2308      	movs	r3, #8
 8012b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 8012b1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012b22:	f103 0218 	add.w	r2, r3, #24
 8012b26:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012b2e:	9303      	str	r3, [sp, #12]
 8012b30:	4b93      	ldr	r3, [pc, #588]	; (8012d80 <lfs_rawmount+0x2c0>)
 8012b32:	9302      	str	r3, [sp, #8]
 8012b34:	2300      	movs	r3, #0
 8012b36:	9301      	str	r3, [sp, #4]
 8012b38:	4b92      	ldr	r3, [pc, #584]	; (8012d84 <lfs_rawmount+0x2c4>)
 8012b3a:	9300      	str	r3, [sp, #0]
 8012b3c:	4b92      	ldr	r3, [pc, #584]	; (8012d88 <lfs_rawmount+0x2c8>)
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f7fc f9f2 	bl	800ef28 <lfs_dir_fetchmatch>
 8012b44:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 8012b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	da02      	bge.n	8012b52 <lfs_rawmount+0x92>
            err = tag;
 8012b4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b4e:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 8012b50:	e10b      	b.n	8012d6a <lfs_rawmount+0x2aa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 8012b52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	f000 809e 	beq.w	8012c96 <lfs_rawmount+0x1d6>
 8012b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b5c:	4618      	mov	r0, r3
 8012b5e:	f7fb fb04 	bl	800e16a <lfs_tag_isdelete>
 8012b62:	4603      	mov	r3, r0
 8012b64:	f083 0301 	eor.w	r3, r3, #1
 8012b68:	b2db      	uxtb	r3, r3
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	f000 8093 	beq.w	8012c96 <lfs_rawmount+0x1d6>
            // update root
            lfs->root[0] = dir.pair[0];
 8012b70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 8012b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 8012b7c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8012b80:	f107 030c 	add.w	r3, r7, #12
 8012b84:	9300      	str	r3, [sp, #0]
 8012b86:	4b81      	ldr	r3, [pc, #516]	; (8012d8c <lfs_rawmount+0x2cc>)
 8012b88:	4a7f      	ldr	r2, [pc, #508]	; (8012d88 <lfs_rawmount+0x2c8>)
 8012b8a:	6878      	ldr	r0, [r7, #4]
 8012b8c:	f7fb ff24 	bl	800e9d8 <lfs_dir_get>
 8012b90:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 8012b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	da02      	bge.n	8012b9e <lfs_rawmount+0xde>
                err = tag;
 8012b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b9a:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8012b9c:	e0e5      	b.n	8012d6a <lfs_rawmount+0x2aa>
            }
            lfs_superblock_fromle32(&superblock);
 8012b9e:	f107 030c 	add.w	r3, r7, #12
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	f7fb fc66 	bl	800e474 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	0c1b      	lsrs	r3, r3, #16
 8012bac:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 8012bb6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8012bba:	2b02      	cmp	r3, #2
 8012bbc:	d103      	bne.n	8012bc6 <lfs_rawmount+0x106>
 8012bbe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d011      	beq.n	8012bea <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 8012bc6:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 8012bca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8012bce:	4970      	ldr	r1, [pc, #448]	; (8012d90 <lfs_rawmount+0x2d0>)
 8012bd0:	9101      	str	r1, [sp, #4]
 8012bd2:	9300      	str	r3, [sp, #0]
 8012bd4:	4613      	mov	r3, r2
 8012bd6:	f640 6291 	movw	r2, #3729	; 0xe91
 8012bda:	496e      	ldr	r1, [pc, #440]	; (8012d94 <lfs_rawmount+0x2d4>)
 8012bdc:	486e      	ldr	r0, [pc, #440]	; (8012d98 <lfs_rawmount+0x2d8>)
 8012bde:	f012 f8ef 	bl	8024dc0 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 8012be2:	f06f 0315 	mvn.w	r3, #21
 8012be6:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 8012be8:	e054      	b.n	8012c94 <lfs_rawmount+0x1d4>
            }

            // check superblock configuration
            if (superblock.name_max) {
 8012bea:	69bb      	ldr	r3, [r7, #24]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d018      	beq.n	8012c22 <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 8012bf0:	69ba      	ldr	r2, [r7, #24]
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d910      	bls.n	8012c1c <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 8012bfa:	69ba      	ldr	r2, [r7, #24]
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c00:	4963      	ldr	r1, [pc, #396]	; (8012d90 <lfs_rawmount+0x2d0>)
 8012c02:	9101      	str	r1, [sp, #4]
 8012c04:	9300      	str	r3, [sp, #0]
 8012c06:	4613      	mov	r3, r2
 8012c08:	f640 629a 	movw	r2, #3738	; 0xe9a
 8012c0c:	4961      	ldr	r1, [pc, #388]	; (8012d94 <lfs_rawmount+0x2d4>)
 8012c0e:	4863      	ldr	r0, [pc, #396]	; (8012d9c <lfs_rawmount+0x2dc>)
 8012c10:	f012 f8d6 	bl	8024dc0 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 8012c14:	f06f 0315 	mvn.w	r3, #21
 8012c18:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8012c1a:	e03b      	b.n	8012c94 <lfs_rawmount+0x1d4>
                }

                lfs->name_max = superblock.name_max;
 8012c1c:	69ba      	ldr	r2, [r7, #24]
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 8012c22:	69fb      	ldr	r3, [r7, #28]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d018      	beq.n	8012c5a <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 8012c28:	69fa      	ldr	r2, [r7, #28]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c2e:	429a      	cmp	r2, r3
 8012c30:	d910      	bls.n	8012c54 <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 8012c32:	69fa      	ldr	r2, [r7, #28]
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012c38:	4955      	ldr	r1, [pc, #340]	; (8012d90 <lfs_rawmount+0x2d0>)
 8012c3a:	9101      	str	r1, [sp, #4]
 8012c3c:	9300      	str	r3, [sp, #0]
 8012c3e:	4613      	mov	r3, r2
 8012c40:	f640 62a5 	movw	r2, #3749	; 0xea5
 8012c44:	4953      	ldr	r1, [pc, #332]	; (8012d94 <lfs_rawmount+0x2d4>)
 8012c46:	4856      	ldr	r0, [pc, #344]	; (8012da0 <lfs_rawmount+0x2e0>)
 8012c48:	f012 f8ba 	bl	8024dc0 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 8012c4c:	f06f 0315 	mvn.w	r3, #21
 8012c50:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8012c52:	e01f      	b.n	8012c94 <lfs_rawmount+0x1d4>
                }

                lfs->file_max = superblock.file_max;
 8012c54:	69fa      	ldr	r2, [r7, #28]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 8012c5a:	6a3b      	ldr	r3, [r7, #32]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d01a      	beq.n	8012c96 <lfs_rawmount+0x1d6>
                if (superblock.attr_max > lfs->attr_max) {
 8012c60:	6a3a      	ldr	r2, [r7, #32]
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c66:	429a      	cmp	r2, r3
 8012c68:	d910      	bls.n	8012c8c <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 8012c6a:	6a3a      	ldr	r2, [r7, #32]
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012c70:	4947      	ldr	r1, [pc, #284]	; (8012d90 <lfs_rawmount+0x2d0>)
 8012c72:	9101      	str	r1, [sp, #4]
 8012c74:	9300      	str	r3, [sp, #0]
 8012c76:	4613      	mov	r3, r2
 8012c78:	f44f 626b 	mov.w	r2, #3760	; 0xeb0
 8012c7c:	4945      	ldr	r1, [pc, #276]	; (8012d94 <lfs_rawmount+0x2d4>)
 8012c7e:	4849      	ldr	r0, [pc, #292]	; (8012da4 <lfs_rawmount+0x2e4>)
 8012c80:	f012 f89e 	bl	8024dc0 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 8012c84:	f06f 0315 	mvn.w	r3, #21
 8012c88:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 8012c8a:	e003      	b.n	8012c94 <lfs_rawmount+0x1d4>
                }

                lfs->attr_max = superblock.attr_max;
 8012c8c:	6a3a      	ldr	r2, [r7, #32]
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	675a      	str	r2, [r3, #116]	; 0x74
 8012c92:	e000      	b.n	8012c96 <lfs_rawmount+0x1d6>
            goto cleanup;
 8012c94:	e069      	b.n	8012d6a <lfs_rawmount+0x2aa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012c9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012ca0:	4619      	mov	r1, r3
 8012ca2:	6878      	ldr	r0, [r7, #4]
 8012ca4:	f7fc fcc8 	bl	800f638 <lfs_dir_getgstate>
 8012ca8:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 8012caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d15b      	bne.n	8012d68 <lfs_rawmount+0x2a8>
    while (!lfs_pair_isnull(dir.tail)) {
 8012cb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8012cb4:	3318      	adds	r3, #24
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	f7fb f9a3 	bl	800e002 <lfs_pair_isnull>
 8012cbc:	4603      	mov	r3, r0
 8012cbe:	f083 0301 	eor.w	r3, r3, #1
 8012cc2:	b2db      	uxtb	r3, r3
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	f47f af16 	bne.w	8012af6 <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	3320      	adds	r3, #32
 8012cce:	4618      	mov	r0, r3
 8012cd0:	f7fb f997 	bl	800e002 <lfs_pair_isnull>
 8012cd4:	4603      	mov	r3, r0
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d003      	beq.n	8012ce2 <lfs_rawmount+0x222>
        err = LFS_ERR_INVAL;
 8012cda:	f06f 0315 	mvn.w	r3, #21
 8012cde:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 8012ce0:	e043      	b.n	8012d6a <lfs_rawmount+0x2aa>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	3330      	adds	r3, #48	; 0x30
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7fb fae2 	bl	800e2b0 <lfs_gstate_iszero>
 8012cec:	4603      	mov	r3, r0
 8012cee:	f083 0301 	eor.w	r3, r3, #1
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d010      	beq.n	8012d1a <lfs_rawmount+0x25a>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8012cfc:	687b      	ldr	r3, [r7, #4]
 8012cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d00:	687a      	ldr	r2, [r7, #4]
 8012d02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8012d04:	4822      	ldr	r0, [pc, #136]	; (8012d90 <lfs_rawmount+0x2d0>)
 8012d06:	9002      	str	r0, [sp, #8]
 8012d08:	9201      	str	r2, [sp, #4]
 8012d0a:	9300      	str	r3, [sp, #0]
 8012d0c:	460b      	mov	r3, r1
 8012d0e:	f640 62c9 	movw	r2, #3785	; 0xec9
 8012d12:	4920      	ldr	r1, [pc, #128]	; (8012d94 <lfs_rawmount+0x2d4>)
 8012d14:	4824      	ldr	r0, [pc, #144]	; (8012da8 <lfs_rawmount+0x2e8>)
 8012d16:	f012 f853 	bl	8024dc0 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d1e:	4618      	mov	r0, r3
 8012d20:	f7fb fa15 	bl	800e14e <lfs_tag_isvalid>
 8012d24:	4603      	mov	r3, r0
 8012d26:	f083 0301 	eor.w	r3, r3, #1
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	461a      	mov	r2, r3
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d32:	441a      	add	r2, r3
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	687a      	ldr	r2, [r7, #4]
 8012d3c:	333c      	adds	r3, #60	; 0x3c
 8012d3e:	3230      	adds	r2, #48	; 0x30
 8012d40:	ca07      	ldmia	r2, {r0, r1, r2}
 8012d42:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d4a:	687a      	ldr	r2, [r7, #4]
 8012d4c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8012d4e:	6a12      	ldr	r2, [r2, #32]
 8012d50:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d54:	fb01 f202 	mul.w	r2, r1, r2
 8012d58:	1a9a      	subs	r2, r3, r2
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 8012d5e:	6878      	ldr	r0, [r7, #4]
 8012d60:	f7fb fc8f 	bl	800e682 <lfs_alloc_drop>

    return 0;
 8012d64:	2300      	movs	r3, #0
 8012d66:	e004      	b.n	8012d72 <lfs_rawmount+0x2b2>
            goto cleanup;
 8012d68:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 8012d6a:	6878      	ldr	r0, [r7, #4]
 8012d6c:	f000 f81e 	bl	8012dac <lfs_rawunmount>
    return err;
 8012d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	3760      	adds	r7, #96	; 0x60
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	0802a2e0 	.word	0x0802a2e0
 8012d80:	0800f791 	.word	0x0800f791
 8012d84:	0ff00008 	.word	0x0ff00008
 8012d88:	7ffffc00 	.word	0x7ffffc00
 8012d8c:	20100018 	.word	0x20100018
 8012d90:	08029ee0 	.word	0x08029ee0
 8012d94:	08029dd4 	.word	0x08029dd4
 8012d98:	0802a2ec 	.word	0x0802a2ec
 8012d9c:	0802a318 	.word	0x0802a318
 8012da0:	0802a34c 	.word	0x0802a34c
 8012da4:	0802a380 	.word	0x0802a380
 8012da8:	0802a3b4 	.word	0x0802a3b4

08012dac <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b082      	sub	sp, #8
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 8012db4:	6878      	ldr	r0, [r7, #4]
 8012db6:	f7ff fdbb 	bl	8012930 <lfs_deinit>
 8012dba:	4603      	mov	r3, r0
}
 8012dbc:	4618      	mov	r0, r3
 8012dbe:	3708      	adds	r7, #8
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	bd80      	pop	{r7, pc}

08012dc4 <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 8012dc4:	b590      	push	{r4, r7, lr}
 8012dc6:	b09d      	sub	sp, #116	; 0x74
 8012dc8:	af04      	add	r7, sp, #16
 8012dca:	60f8      	str	r0, [r7, #12]
 8012dcc:	60b9      	str	r1, [r7, #8]
 8012dce:	607a      	str	r2, [r7, #4]
 8012dd0:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 8012dd2:	f107 0318 	add.w	r3, r7, #24
 8012dd6:	2220      	movs	r2, #32
 8012dd8:	2100      	movs	r1, #0
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f012 f9b6 	bl	802514c <memset>
 8012de0:	2301      	movs	r3, #1
 8012de2:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 8012de4:	2300      	movs	r3, #0
 8012de6:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 8012de8:	e0a7      	b.n	8012f3a <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012dee:	6a1b      	ldr	r3, [r3, #32]
 8012df0:	085b      	lsrs	r3, r3, #1
 8012df2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012df4:	429a      	cmp	r2, r3
 8012df6:	d302      	bcc.n	8012dfe <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 8012df8:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8012dfc:	e102      	b.n	8013004 <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 8012dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012e00:	3301      	adds	r3, #1
 8012e02:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 8012e04:	2300      	movs	r3, #0
 8012e06:	65bb      	str	r3, [r7, #88]	; 0x58
 8012e08:	e013      	b.n	8012e32 <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 8012e0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e0c:	3306      	adds	r3, #6
 8012e0e:	009b      	lsls	r3, r3, #2
 8012e10:	3360      	adds	r3, #96	; 0x60
 8012e12:	443b      	add	r3, r7
 8012e14:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	4611      	mov	r1, r2
 8012e1c:	6878      	ldr	r0, [r7, #4]
 8012e1e:	4798      	blx	r3
 8012e20:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 8012e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d001      	beq.n	8012e2c <lfs_fs_rawtraverse+0x68>
                return err;
 8012e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e2a:	e0eb      	b.n	8013004 <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 8012e2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e2e:	3301      	adds	r3, #1
 8012e30:	65bb      	str	r3, [r7, #88]	; 0x58
 8012e32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012e34:	2b01      	cmp	r3, #1
 8012e36:	dde8      	ble.n	8012e0a <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 8012e38:	f107 0318 	add.w	r3, r7, #24
 8012e3c:	f103 0218 	add.w	r2, r3, #24
 8012e40:	f107 0318 	add.w	r3, r7, #24
 8012e44:	4619      	mov	r1, r3
 8012e46:	68f8      	ldr	r0, [r7, #12]
 8012e48:	f7fc fbda 	bl	800f600 <lfs_dir_fetch>
 8012e4c:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 8012e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d001      	beq.n	8012e58 <lfs_fs_rawtraverse+0x94>
            return err;
 8012e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012e56:	e0d5      	b.n	8013004 <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 8012e58:	2300      	movs	r3, #0
 8012e5a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8012e5e:	e067      	b.n	8012f30 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 8012e60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012e64:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 8012e66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012e6a:	f043 0308 	orr.w	r3, r3, #8
 8012e6e:	f107 0118 	add.w	r1, r7, #24
 8012e72:	f107 0210 	add.w	r2, r7, #16
 8012e76:	9200      	str	r2, [sp, #0]
 8012e78:	4a64      	ldr	r2, [pc, #400]	; (801300c <lfs_fs_rawtraverse+0x248>)
 8012e7a:	68f8      	ldr	r0, [r7, #12]
 8012e7c:	f7fb fdac 	bl	800e9d8 <lfs_dir_get>
 8012e80:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 8012e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	da05      	bge.n	8012e94 <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 8012e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e8a:	f113 0f02 	cmn.w	r3, #2
 8012e8e:	d049      	beq.n	8012f24 <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 8012e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e92:	e0b7      	b.n	8013004 <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 8012e94:	f107 0310 	add.w	r3, r7, #16
 8012e98:	4618      	mov	r0, r3
 8012e9a:	f7fb fabb 	bl	800e414 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 8012e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7fb f985 	bl	800e1b0 <lfs_tag_type3>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	461a      	mov	r2, r3
 8012eaa:	f240 2302 	movw	r3, #514	; 0x202
 8012eae:	429a      	cmp	r2, r3
 8012eb0:	d113      	bne.n	8012eda <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 8012eb2:	68f9      	ldr	r1, [r7, #12]
 8012eb4:	6938      	ldr	r0, [r7, #16]
 8012eb6:	697b      	ldr	r3, [r7, #20]
 8012eb8:	687a      	ldr	r2, [r7, #4]
 8012eba:	9202      	str	r2, [sp, #8]
 8012ebc:	68ba      	ldr	r2, [r7, #8]
 8012ebe:	9201      	str	r2, [sp, #4]
 8012ec0:	9300      	str	r3, [sp, #0]
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	460a      	mov	r2, r1
 8012ec6:	2100      	movs	r1, #0
 8012ec8:	68f8      	ldr	r0, [r7, #12]
 8012eca:	f7fe fb91 	bl	80115f0 <lfs_ctz_traverse>
 8012ece:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 8012ed0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d027      	beq.n	8012f26 <lfs_fs_rawtraverse+0x162>
                    return err;
 8012ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012ed8:	e094      	b.n	8013004 <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 8012eda:	78fb      	ldrb	r3, [r7, #3]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d022      	beq.n	8012f26 <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 8012ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012ee2:	4618      	mov	r0, r3
 8012ee4:	f7fb f964 	bl	800e1b0 <lfs_tag_type3>
 8012ee8:	4603      	mov	r3, r0
            } else if (includeorphans &&
 8012eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012eee:	d11a      	bne.n	8012f26 <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	653b      	str	r3, [r7, #80]	; 0x50
 8012ef4:	e012      	b.n	8012f1c <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 8012ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ef8:	009b      	lsls	r3, r3, #2
 8012efa:	f107 0210 	add.w	r2, r7, #16
 8012efe:	4413      	add	r3, r2
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	4611      	mov	r1, r2
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	4798      	blx	r3
 8012f0a:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 8012f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d001      	beq.n	8012f16 <lfs_fs_rawtraverse+0x152>
                        return err;
 8012f12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012f14:	e076      	b.n	8013004 <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 8012f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f18:	3301      	adds	r3, #1
 8012f1a:	653b      	str	r3, [r7, #80]	; 0x50
 8012f1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012f1e:	2b01      	cmp	r3, #1
 8012f20:	dde9      	ble.n	8012ef6 <lfs_fs_rawtraverse+0x132>
 8012f22:	e000      	b.n	8012f26 <lfs_fs_rawtraverse+0x162>
                    continue;
 8012f24:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 8012f26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8012f2a:	3301      	adds	r3, #1
 8012f2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8012f30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012f32:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 8012f36:	429a      	cmp	r2, r3
 8012f38:	d392      	bcc.n	8012e60 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 8012f3a:	f107 0318 	add.w	r3, r7, #24
 8012f3e:	3318      	adds	r3, #24
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7fb f85e 	bl	800e002 <lfs_pair_isnull>
 8012f46:	4603      	mov	r3, r0
 8012f48:	f083 0301 	eor.w	r3, r3, #1
 8012f4c:	b2db      	uxtb	r3, r3
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	f47f af4b 	bne.w	8012dea <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012f5a:	e04f      	b.n	8012ffc <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 8012f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f5e:	799b      	ldrb	r3, [r3, #6]
 8012f60:	2b01      	cmp	r3, #1
 8012f62:	d147      	bne.n	8012ff4 <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 8012f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d01d      	beq.n	8012fac <lfs_fs_rawtraverse+0x1e8>
 8012f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d117      	bne.n	8012fac <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8012f7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f7e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8012f82:	68f8      	ldr	r0, [r7, #12]
 8012f84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f86:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 8012f88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f8c:	687a      	ldr	r2, [r7, #4]
 8012f8e:	9202      	str	r2, [sp, #8]
 8012f90:	68ba      	ldr	r2, [r7, #8]
 8012f92:	9201      	str	r2, [sp, #4]
 8012f94:	9300      	str	r3, [sp, #0]
 8012f96:	4623      	mov	r3, r4
 8012f98:	4602      	mov	r2, r0
 8012f9a:	68f8      	ldr	r0, [r7, #12]
 8012f9c:	f7fe fb28 	bl	80115f0 <lfs_ctz_traverse>
 8012fa0:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 8012fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d001      	beq.n	8012fac <lfs_fs_rawtraverse+0x1e8>
                return err;
 8012fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012faa:	e02b      	b.n	8013004 <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 8012fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d01e      	beq.n	8012ff6 <lfs_fs_rawtraverse+0x232>
 8012fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	d118      	bne.n	8012ff6 <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 8012fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fc6:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8012fca:	68f8      	ldr	r0, [r7, #12]
 8012fcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fce:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8012fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fd4:	687a      	ldr	r2, [r7, #4]
 8012fd6:	9202      	str	r2, [sp, #8]
 8012fd8:	68ba      	ldr	r2, [r7, #8]
 8012fda:	9201      	str	r2, [sp, #4]
 8012fdc:	9300      	str	r3, [sp, #0]
 8012fde:	4623      	mov	r3, r4
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	68f8      	ldr	r0, [r7, #12]
 8012fe4:	f7fe fb04 	bl	80115f0 <lfs_ctz_traverse>
 8012fe8:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 8012fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d002      	beq.n	8012ff6 <lfs_fs_rawtraverse+0x232>
                return err;
 8012ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ff2:	e007      	b.n	8013004 <lfs_fs_rawtraverse+0x240>
            continue;
 8012ff4:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 8012ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ff8:	681b      	ldr	r3, [r3, #0]
 8012ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d1ac      	bne.n	8012f5c <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 8013002:	2300      	movs	r3, #0
}
 8013004:	4618      	mov	r0, r3
 8013006:	3764      	adds	r7, #100	; 0x64
 8013008:	46bd      	mov	sp, r7
 801300a:	bd90      	pop	{r4, r7, pc}
 801300c:	700ffc00 	.word	0x700ffc00

08013010 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 8013010:	b580      	push	{r7, lr}
 8013012:	b086      	sub	sp, #24
 8013014:	af00      	add	r7, sp, #0
 8013016:	60f8      	str	r0, [r7, #12]
 8013018:	60b9      	str	r1, [r7, #8]
 801301a:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2200      	movs	r2, #0
 8013020:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	2201      	movs	r2, #1
 8013026:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8013028:	2300      	movs	r3, #0
 801302a:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 801302c:	e024      	b.n	8013078 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013032:	6a1b      	ldr	r3, [r3, #32]
 8013034:	085b      	lsrs	r3, r3, #1
 8013036:	697a      	ldr	r2, [r7, #20]
 8013038:	429a      	cmp	r2, r3
 801303a:	d302      	bcc.n	8013042 <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 801303c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8013040:	e027      	b.n	8013092 <lfs_fs_pred+0x82>
        }
        cycle += 1;
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	3301      	adds	r3, #1
 8013046:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	3318      	adds	r3, #24
 801304c:	68b9      	ldr	r1, [r7, #8]
 801304e:	4618      	mov	r0, r3
 8013050:	f7fa fff2 	bl	800e038 <lfs_pair_cmp>
 8013054:	4603      	mov	r3, r0
 8013056:	2b00      	cmp	r3, #0
 8013058:	d101      	bne.n	801305e <lfs_fs_pred+0x4e>
            return 0;
 801305a:	2300      	movs	r3, #0
 801305c:	e019      	b.n	8013092 <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	3318      	adds	r3, #24
 8013062:	461a      	mov	r2, r3
 8013064:	6879      	ldr	r1, [r7, #4]
 8013066:	68f8      	ldr	r0, [r7, #12]
 8013068:	f7fc faca 	bl	800f600 <lfs_dir_fetch>
 801306c:	6138      	str	r0, [r7, #16]
        if (err) {
 801306e:	693b      	ldr	r3, [r7, #16]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d001      	beq.n	8013078 <lfs_fs_pred+0x68>
            return err;
 8013074:	693b      	ldr	r3, [r7, #16]
 8013076:	e00c      	b.n	8013092 <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 8013078:	687b      	ldr	r3, [r7, #4]
 801307a:	3318      	adds	r3, #24
 801307c:	4618      	mov	r0, r3
 801307e:	f7fa ffc0 	bl	800e002 <lfs_pair_isnull>
 8013082:	4603      	mov	r3, r0
 8013084:	f083 0301 	eor.w	r3, r3, #1
 8013088:	b2db      	uxtb	r3, r3
 801308a:	2b00      	cmp	r3, #0
 801308c:	d1cf      	bne.n	801302e <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 801308e:	f06f 0301 	mvn.w	r3, #1
}
 8013092:	4618      	mov	r0, r3
 8013094:	3718      	adds	r7, #24
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 801309a:	b5b0      	push	{r4, r5, r7, lr}
 801309c:	b08e      	sub	sp, #56	; 0x38
 801309e:	af04      	add	r7, sp, #16
 80130a0:	60f8      	str	r0, [r7, #12]
 80130a2:	60b9      	str	r1, [r7, #8]
 80130a4:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80130b4:	6a3b      	ldr	r3, [r7, #32]
 80130b6:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 80130ba:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 80130bc:	6a3b      	ldr	r3, [r7, #32]
 80130be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80130c0:	69dd      	ldr	r5, [r3, #28]
            disk->block, disk->off, &child, sizeof(child));
 80130c2:	69fb      	ldr	r3, [r7, #28]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	69fa      	ldr	r2, [r7, #28]
 80130c8:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 80130ca:	2108      	movs	r1, #8
 80130cc:	9103      	str	r1, [sp, #12]
 80130ce:	f107 0110 	add.w	r1, r7, #16
 80130d2:	9102      	str	r1, [sp, #8]
 80130d4:	9201      	str	r2, [sp, #4]
 80130d6:	9300      	str	r3, [sp, #0]
 80130d8:	462b      	mov	r3, r5
 80130da:	4622      	mov	r2, r4
 80130dc:	4601      	mov	r1, r0
 80130de:	6a38      	ldr	r0, [r7, #32]
 80130e0:	f7fa fc58 	bl	800d994 <lfs_bd_read>
 80130e4:	61b8      	str	r0, [r7, #24]
    if (err) {
 80130e6:	69bb      	ldr	r3, [r7, #24]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d001      	beq.n	80130f0 <lfs_fs_parent_match+0x56>
        return err;
 80130ec:	69bb      	ldr	r3, [r7, #24]
 80130ee:	e012      	b.n	8013116 <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 80130f0:	f107 0310 	add.w	r3, r7, #16
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7fa fff6 	bl	800e0e6 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 80130fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fc:	1d1a      	adds	r2, r3, #4
 80130fe:	f107 0310 	add.w	r3, r7, #16
 8013102:	4611      	mov	r1, r2
 8013104:	4618      	mov	r0, r3
 8013106:	f7fa ff97 	bl	800e038 <lfs_pair_cmp>
 801310a:	4603      	mov	r3, r0
 801310c:	2b00      	cmp	r3, #0
 801310e:	bf14      	ite	ne
 8013110:	2301      	movne	r3, #1
 8013112:	2300      	moveq	r3, #0
 8013114:	b2db      	uxtb	r3, r3
}
 8013116:	4618      	mov	r0, r3
 8013118:	3728      	adds	r7, #40	; 0x28
 801311a:	46bd      	mov	sp, r7
 801311c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08013120 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 8013120:	b580      	push	{r7, lr}
 8013122:	b08e      	sub	sp, #56	; 0x38
 8013124:	af04      	add	r7, sp, #16
 8013126:	60f8      	str	r0, [r7, #12]
 8013128:	60b9      	str	r1, [r7, #8]
 801312a:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2200      	movs	r2, #0
 8013130:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	2201      	movs	r2, #1
 8013136:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 8013138:	2300      	movs	r3, #0
 801313a:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 801313c:	e030      	b.n	80131a0 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013142:	6a1b      	ldr	r3, [r3, #32]
 8013144:	085b      	lsrs	r3, r3, #1
 8013146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013148:	429a      	cmp	r2, r3
 801314a:	d302      	bcc.n	8013152 <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 801314c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 8013150:	e033      	b.n	80131ba <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 8013152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013154:	3301      	adds	r3, #1
 8013156:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 8013166:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	3304      	adds	r3, #4
 801316c:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 801316e:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 8013170:	f107 0314 	add.w	r3, r7, #20
 8013174:	9303      	str	r3, [sp, #12]
 8013176:	4b13      	ldr	r3, [pc, #76]	; (80131c4 <lfs_fs_parent+0xa4>)
 8013178:	9302      	str	r3, [sp, #8]
 801317a:	2300      	movs	r3, #0
 801317c:	9301      	str	r3, [sp, #4]
 801317e:	4b12      	ldr	r3, [pc, #72]	; (80131c8 <lfs_fs_parent+0xa8>)
 8013180:	9300      	str	r3, [sp, #0]
 8013182:	4b12      	ldr	r3, [pc, #72]	; (80131cc <lfs_fs_parent+0xac>)
 8013184:	6879      	ldr	r1, [r7, #4]
 8013186:	68f8      	ldr	r0, [r7, #12]
 8013188:	f7fb fece 	bl	800ef28 <lfs_dir_fetchmatch>
 801318c:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 801318e:	6a3b      	ldr	r3, [r7, #32]
 8013190:	2b00      	cmp	r3, #0
 8013192:	d005      	beq.n	80131a0 <lfs_fs_parent+0x80>
 8013194:	6a3b      	ldr	r3, [r7, #32]
 8013196:	f113 0f02 	cmn.w	r3, #2
 801319a:	d001      	beq.n	80131a0 <lfs_fs_parent+0x80>
            return tag;
 801319c:	6a3b      	ldr	r3, [r7, #32]
 801319e:	e00c      	b.n	80131ba <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	3318      	adds	r3, #24
 80131a4:	4618      	mov	r0, r3
 80131a6:	f7fa ff2c 	bl	800e002 <lfs_pair_isnull>
 80131aa:	4603      	mov	r3, r0
 80131ac:	f083 0301 	eor.w	r3, r3, #1
 80131b0:	b2db      	uxtb	r3, r3
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d1c3      	bne.n	801313e <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 80131b6:	f06f 0301 	mvn.w	r3, #1
}
 80131ba:	4618      	mov	r0, r3
 80131bc:	3728      	adds	r7, #40	; 0x28
 80131be:	46bd      	mov	sp, r7
 80131c0:	bd80      	pop	{r7, pc}
 80131c2:	bf00      	nop
 80131c4:	0801309b 	.word	0x0801309b
 80131c8:	20000008 	.word	0x20000008
 80131cc:	7ff003ff 	.word	0x7ff003ff

080131d0 <lfs_fs_relocate>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b0a6      	sub	sp, #152	; 0x98
 80131d4:	af04      	add	r7, sp, #16
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	60b9      	str	r1, [r7, #8]
 80131da:	607a      	str	r2, [r7, #4]
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	3320      	adds	r3, #32
 80131e0:	4619      	mov	r1, r3
 80131e2:	68b8      	ldr	r0, [r7, #8]
 80131e4:	f7fa ff28 	bl	800e038 <lfs_pair_cmp>
 80131e8:	4603      	mov	r3, r0
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d107      	bne.n	80131fe <lfs_fs_relocate+0x2e>
        lfs->root[0] = newpair[0];
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	681a      	ldr	r2, [r3, #0]
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	621a      	str	r2, [r3, #32]
        lfs->root[1] = newpair[1];
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	685a      	ldr	r2, [r3, #4]
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013206:	e031      	b.n	801326c <lfs_fs_relocate+0x9c>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 8013208:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801320c:	3308      	adds	r3, #8
 801320e:	4619      	mov	r1, r3
 8013210:	68b8      	ldr	r0, [r7, #8]
 8013212:	f7fa ff11 	bl	800e038 <lfs_pair_cmp>
 8013216:	4603      	mov	r3, r0
 8013218:	2b00      	cmp	r3, #0
 801321a:	d109      	bne.n	8013230 <lfs_fs_relocate+0x60>
            d->m.pair[0] = newpair[0];
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	681a      	ldr	r2, [r3, #0]
 8013220:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013224:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	685a      	ldr	r2, [r3, #4]
 801322a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801322e:	60da      	str	r2, [r3, #12]
        }

        if (d->type == LFS_TYPE_DIR &&
 8013230:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013234:	799b      	ldrb	r3, [r3, #6]
 8013236:	2b02      	cmp	r3, #2
 8013238:	d113      	bne.n	8013262 <lfs_fs_relocate+0x92>
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
 801323a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801323e:	332c      	adds	r3, #44	; 0x2c
 8013240:	4619      	mov	r1, r3
 8013242:	68b8      	ldr	r0, [r7, #8]
 8013244:	f7fa fef8 	bl	800e038 <lfs_pair_cmp>
 8013248:	4603      	mov	r3, r0
        if (d->type == LFS_TYPE_DIR &&
 801324a:	2b00      	cmp	r3, #0
 801324c:	d109      	bne.n	8013262 <lfs_fs_relocate+0x92>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	681a      	ldr	r2, [r3, #0]
 8013252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013256:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	685a      	ldr	r2, [r3, #4]
 801325c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013260:	631a      	str	r2, [r3, #48]	; 0x30
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 8013262:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013266:	681b      	ldr	r3, [r3, #0]
 8013268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801326c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013270:	2b00      	cmp	r3, #0
 8013272:	d1c9      	bne.n	8013208 <lfs_fs_relocate+0x38>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 8013274:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013278:	461a      	mov	r2, r3
 801327a:	68b9      	ldr	r1, [r7, #8]
 801327c:	68f8      	ldr	r0, [r7, #12]
 801327e:	f7ff ff4f 	bl	8013120 <lfs_fs_parent>
 8013282:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 8013286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801328a:	2b00      	cmp	r3, #0
 801328c:	da07      	bge.n	801329e <lfs_fs_relocate+0xce>
 801328e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013292:	f113 0f02 	cmn.w	r3, #2
 8013296:	d002      	beq.n	801329e <lfs_fs_relocate+0xce>
        return tag;
 8013298:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801329c:	e0f3      	b.n	8013486 <lfs_fs_relocate+0x2b6>
    }

    if (tag != LFS_ERR_NOENT) {
 801329e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80132a2:	f113 0f02 	cmn.w	r3, #2
 80132a6:	d07c      	beq.n	80133a2 <lfs_fs_relocate+0x1d2>
        // update disk, this creates a desync
        int err = lfs_fs_preporphans(lfs, +1);
 80132a8:	2101      	movs	r1, #1
 80132aa:	68f8      	ldr	r0, [r7, #12]
 80132ac:	f000 f8f8 	bl	80134a0 <lfs_fs_preporphans>
 80132b0:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 80132b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d001      	beq.n	80132bc <lfs_fs_relocate+0xec>
            return err;
 80132b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80132ba:	e0e4      	b.n	8013486 <lfs_fs_relocate+0x2b6>
        }

        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 80132bc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80132c0:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	3330      	adds	r3, #48	; 0x30
 80132c8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80132cc:	4611      	mov	r1, r2
 80132ce:	4618      	mov	r0, r3
 80132d0:	f7fb f840 	bl	800e354 <lfs_gstate_hasmovehere>
 80132d4:	4603      	mov	r3, r0
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d02d      	beq.n	8013336 <lfs_fs_relocate+0x166>
            moveid = lfs_tag_id(lfs->gstate.tag);
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132de:	4618      	mov	r0, r3
 80132e0:	f7fa ff90 	bl	800e204 <lfs_tag_id>
 80132e4:	4603      	mov	r3, r0
 80132e6:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            LFS_DEBUG("Fixing move while relocating "
 80132ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80132ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80132ee:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80132f2:	4867      	ldr	r0, [pc, #412]	; (8013490 <lfs_fs_relocate+0x2c0>)
 80132f4:	9002      	str	r0, [sp, #8]
 80132f6:	9201      	str	r2, [sp, #4]
 80132f8:	9300      	str	r3, [sp, #0]
 80132fa:	460b      	mov	r3, r1
 80132fc:	f640 72c4 	movw	r2, #4036	; 0xfc4
 8013300:	4964      	ldr	r1, [pc, #400]	; (8013494 <lfs_fs_relocate+0x2c4>)
 8013302:	4865      	ldr	r0, [pc, #404]	; (8013498 <lfs_fs_relocate+0x2c8>)
 8013304:	f011 fd5c 	bl	8024dc0 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8013308:	2200      	movs	r2, #0
 801330a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 801330e:	68f8      	ldr	r0, [r7, #12]
 8013310:	f000 f900 	bl	8013514 <lfs_fs_prepmove>
            if (moveid < lfs_tag_id(tag)) {
 8013314:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013318:	4618      	mov	r0, r3
 801331a:	f7fa ff73 	bl	800e204 <lfs_tag_id>
 801331e:	4603      	mov	r3, r0
 8013320:	461a      	mov	r2, r3
 8013322:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013326:	4293      	cmp	r3, r2
 8013328:	d205      	bcs.n	8013336 <lfs_fs_relocate+0x166>
                tag -= LFS_MKTAG(0, 1, 0);
 801332a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801332e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8013332:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
        }

        lfs_pair_tole32(newpair);
 8013336:	6878      	ldr	r0, [r7, #4]
 8013338:	f7fa feef 	bl	800e11a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 801333c:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8013340:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013344:	4293      	cmp	r3, r2
 8013346:	d007      	beq.n	8013358 <lfs_fs_relocate+0x188>
 8013348:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 801334c:	029b      	lsls	r3, r3, #10
 801334e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8013352:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8013356:	e000      	b.n	801335a <lfs_fs_relocate+0x18a>
 8013358:	2300      	movs	r3, #0
 801335a:	647b      	str	r3, [r7, #68]	; 0x44
 801335c:	2300      	movs	r3, #0
 801335e:	64bb      	str	r3, [r7, #72]	; 0x48
 8013360:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013364:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	653b      	str	r3, [r7, #80]	; 0x50
 801336a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801336e:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8013372:	2302      	movs	r3, #2
 8013374:	68f8      	ldr	r0, [r7, #12]
 8013376:	f7fd f991 	bl	801069c <lfs_dir_commit>
 801337a:	67b8      	str	r0, [r7, #120]	; 0x78
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {tag, newpair}));
        lfs_pair_fromle32(newpair);
 801337c:	6878      	ldr	r0, [r7, #4]
 801337e:	f7fa feb2 	bl	800e0e6 <lfs_pair_fromle32>
        if (err) {
 8013382:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8013384:	2b00      	cmp	r3, #0
 8013386:	d001      	beq.n	801338c <lfs_fs_relocate+0x1bc>
            return err;
 8013388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801338a:	e07c      	b.n	8013486 <lfs_fs_relocate+0x2b6>
        }

        // next step, clean up orphans
        err = lfs_fs_preporphans(lfs, -1);
 801338c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8013390:	68f8      	ldr	r0, [r7, #12]
 8013392:	f000 f885 	bl	80134a0 <lfs_fs_preporphans>
 8013396:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 8013398:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801339a:	2b00      	cmp	r3, #0
 801339c:	d001      	beq.n	80133a2 <lfs_fs_relocate+0x1d2>
            return err;
 801339e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80133a0:	e071      	b.n	8013486 <lfs_fs_relocate+0x2b6>
        }
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 80133a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80133a6:	461a      	mov	r2, r3
 80133a8:	68b9      	ldr	r1, [r7, #8]
 80133aa:	68f8      	ldr	r0, [r7, #12]
 80133ac:	f7ff fe30 	bl	8013010 <lfs_fs_pred>
 80133b0:	6778      	str	r0, [r7, #116]	; 0x74
    if (err && err != LFS_ERR_NOENT) {
 80133b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d005      	beq.n	80133c4 <lfs_fs_relocate+0x1f4>
 80133b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133ba:	f113 0f02 	cmn.w	r3, #2
 80133be:	d001      	beq.n	80133c4 <lfs_fs_relocate+0x1f4>
        return err;
 80133c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133c2:	e060      	b.n	8013486 <lfs_fs_relocate+0x2b6>
    }

    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
 80133c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80133c6:	f113 0f02 	cmn.w	r3, #2
 80133ca:	d05b      	beq.n	8013484 <lfs_fs_relocate+0x2b4>
        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 80133cc:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80133d0:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 80133d4:	68fb      	ldr	r3, [r7, #12]
 80133d6:	3330      	adds	r3, #48	; 0x30
 80133d8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80133dc:	4611      	mov	r1, r2
 80133de:	4618      	mov	r0, r3
 80133e0:	f7fa ffb8 	bl	800e354 <lfs_gstate_hasmovehere>
 80133e4:	4603      	mov	r3, r0
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d01c      	beq.n	8013424 <lfs_fs_relocate+0x254>
            moveid = lfs_tag_id(lfs->gstate.tag);
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7fa ff08 	bl	800e204 <lfs_tag_id>
 80133f4:	4603      	mov	r3, r0
 80133f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            LFS_DEBUG("Fixing move while relocating "
 80133fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80133fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80133fe:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8013402:	4823      	ldr	r0, [pc, #140]	; (8013490 <lfs_fs_relocate+0x2c0>)
 8013404:	9002      	str	r0, [sp, #8]
 8013406:	9201      	str	r2, [sp, #4]
 8013408:	9300      	str	r3, [sp, #0]
 801340a:	460b      	mov	r3, r1
 801340c:	f640 72eb 	movw	r2, #4075	; 0xfeb
 8013410:	4920      	ldr	r1, [pc, #128]	; (8013494 <lfs_fs_relocate+0x2c4>)
 8013412:	4821      	ldr	r0, [pc, #132]	; (8013498 <lfs_fs_relocate+0x2c8>)
 8013414:	f011 fcd4 	bl	8024dc0 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8013418:	2200      	movs	r2, #0
 801341a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 801341e:	68f8      	ldr	r0, [r7, #12]
 8013420:	f000 f878 	bl	8013514 <lfs_fs_prepmove>
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
 8013424:	6878      	ldr	r0, [r7, #4]
 8013426:	f7fa fe78 	bl	800e11a <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 801342a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 801342e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013432:	4293      	cmp	r3, r2
 8013434:	d007      	beq.n	8013446 <lfs_fs_relocate+0x276>
 8013436:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 801343a:	029b      	lsls	r3, r3, #10
 801343c:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8013440:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8013444:	e000      	b.n	8013448 <lfs_fs_relocate+0x278>
 8013446:	2300      	movs	r3, #0
 8013448:	627b      	str	r3, [r7, #36]	; 0x24
 801344a:	2300      	movs	r3, #0
 801344c:	62bb      	str	r3, [r7, #40]	; 0x28
 801344e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8013452:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8013456:	051a      	lsls	r2, r3, #20
 8013458:	4b10      	ldr	r3, [pc, #64]	; (801349c <lfs_fs_relocate+0x2cc>)
 801345a:	4313      	orrs	r3, r2
 801345c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	633b      	str	r3, [r7, #48]	; 0x30
 8013462:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8013466:	f107 0154 	add.w	r1, r7, #84	; 0x54
 801346a:	2302      	movs	r3, #2
 801346c:	68f8      	ldr	r0, [r7, #12]
 801346e:	f7fd f915 	bl	801069c <lfs_dir_commit>
 8013472:	6778      	str	r0, [r7, #116]	; 0x74
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
 8013474:	6878      	ldr	r0, [r7, #4]
 8013476:	f7fa fe36 	bl	800e0e6 <lfs_pair_fromle32>
        if (err) {
 801347a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801347c:	2b00      	cmp	r3, #0
 801347e:	d001      	beq.n	8013484 <lfs_fs_relocate+0x2b4>
            return err;
 8013480:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8013482:	e000      	b.n	8013486 <lfs_fs_relocate+0x2b6>
        }
    }

    return 0;
 8013484:	2300      	movs	r3, #0
}
 8013486:	4618      	mov	r0, r3
 8013488:	3788      	adds	r7, #136	; 0x88
 801348a:	46bd      	mov	sp, r7
 801348c:	bd80      	pop	{r7, pc}
 801348e:	bf00      	nop
 8013490:	08029ee0 	.word	0x08029ee0
 8013494:	08029dd4 	.word	0x08029dd4
 8013498:	0802a3ec 	.word	0x0802a3ec
 801349c:	000ffc08 	.word	0x000ffc08

080134a0 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 80134a0:	b590      	push	{r4, r7, lr}
 80134a2:	b083      	sub	sp, #12
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	460b      	mov	r3, r1
 80134aa:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7fa feb7 	bl	800e224 <lfs_tag_size>
 80134b6:	4603      	mov	r3, r0
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d10a      	bne.n	80134d2 <lfs_fs_preporphans+0x32>
 80134bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	da06      	bge.n	80134d2 <lfs_fs_preporphans+0x32>
 80134c4:	4b10      	ldr	r3, [pc, #64]	; (8013508 <lfs_fs_preporphans+0x68>)
 80134c6:	4a11      	ldr	r2, [pc, #68]	; (801350c <lfs_fs_preporphans+0x6c>)
 80134c8:	f241 0103 	movw	r1, #4099	; 0x1003
 80134cc:	4810      	ldr	r0, [pc, #64]	; (8013510 <lfs_fs_preporphans+0x70>)
 80134ce:	f010 fda1 	bl	8024014 <__assert_func>
    lfs->gstate.tag += orphans;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80134d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80134da:	441a      	add	r2, r3
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80134e4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	3330      	adds	r3, #48	; 0x30
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7fa fefc 	bl	800e2ea <lfs_gstate_hasorphans>
 80134f2:	4603      	mov	r3, r0
 80134f4:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 80134f6:	ea44 0203 	orr.w	r2, r4, r3
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 80134fe:	2300      	movs	r3, #0
}
 8013500:	4618      	mov	r0, r3
 8013502:	370c      	adds	r7, #12
 8013504:	46bd      	mov	sp, r7
 8013506:	bd90      	pop	{r4, r7, pc}
 8013508:	0802a430 	.word	0x0802a430
 801350c:	0802dd54 	.word	0x0802dd54
 8013510:	08029dd4 	.word	0x08029dd4

08013514 <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 8013514:	b480      	push	{r7}
 8013516:	b085      	sub	sp, #20
 8013518:	af00      	add	r7, sp, #0
 801351a:	60f8      	str	r0, [r7, #12]
 801351c:	460b      	mov	r3, r1
 801351e:	607a      	str	r2, [r7, #4]
 8013520:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013526:	4a17      	ldr	r2, [pc, #92]	; (8013584 <lfs_fs_prepmove+0x70>)
 8013528:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 801352a:	897b      	ldrh	r3, [r7, #10]
 801352c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8013530:	428b      	cmp	r3, r1
 8013532:	d006      	beq.n	8013542 <lfs_fs_prepmove+0x2e>
 8013534:	897b      	ldrh	r3, [r7, #10]
 8013536:	029b      	lsls	r3, r3, #10
 8013538:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 801353c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 8013540:	e000      	b.n	8013544 <lfs_fs_prepmove+0x30>
 8013542:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 8013544:	431a      	orrs	r2, r3
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 801354a:	897b      	ldrh	r3, [r7, #10]
 801354c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013550:	4293      	cmp	r3, r2
 8013552:	d002      	beq.n	801355a <lfs_fs_prepmove+0x46>
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	e000      	b.n	801355c <lfs_fs_prepmove+0x48>
 801355a:	2300      	movs	r3, #0
 801355c:	68fa      	ldr	r2, [r7, #12]
 801355e:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 8013560:	897b      	ldrh	r3, [r7, #10]
 8013562:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8013566:	4293      	cmp	r3, r2
 8013568:	d003      	beq.n	8013572 <lfs_fs_prepmove+0x5e>
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	3304      	adds	r3, #4
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	e000      	b.n	8013574 <lfs_fs_prepmove+0x60>
 8013572:	2300      	movs	r3, #0
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	6393      	str	r3, [r2, #56]	; 0x38
}
 8013578:	bf00      	nop
 801357a:	3714      	adds	r7, #20
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr
 8013584:	800003ff 	.word	0x800003ff

08013588 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 8013588:	b5b0      	push	{r4, r5, r7, lr}
 801358a:	b094      	sub	sp, #80	; 0x50
 801358c:	af04      	add	r7, sp, #16
 801358e:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	333c      	adds	r3, #60	; 0x3c
 8013594:	4618      	mov	r0, r3
 8013596:	f7fa feca 	bl	800e32e <lfs_gstate_hasmove>
 801359a:	4603      	mov	r3, r0
 801359c:	f083 0301 	eor.w	r3, r3, #1
 80135a0:	b2db      	uxtb	r3, r3
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d001      	beq.n	80135aa <lfs_fs_demove+0x22>
        return 0;
 80135a6:	2300      	movs	r3, #0
 80135a8:	e049      	b.n	801363e <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135b6:	4618      	mov	r0, r3
 80135b8:	f7fa fe24 	bl	800e204 <lfs_tag_id>
 80135bc:	4603      	mov	r3, r0
 80135be:	461a      	mov	r2, r3
 80135c0:	4b21      	ldr	r3, [pc, #132]	; (8013648 <lfs_fs_demove+0xc0>)
 80135c2:	9302      	str	r3, [sp, #8]
 80135c4:	9201      	str	r2, [sp, #4]
 80135c6:	9400      	str	r4, [sp, #0]
 80135c8:	462b      	mov	r3, r5
 80135ca:	f241 021d 	movw	r2, #4125	; 0x101d
 80135ce:	491f      	ldr	r1, [pc, #124]	; (801364c <lfs_fs_demove+0xc4>)
 80135d0:	481f      	ldr	r0, [pc, #124]	; (8013650 <lfs_fs_demove+0xc8>)
 80135d2:	f011 fbf5 	bl	8024dc0 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80135dc:	f107 0318 	add.w	r3, r7, #24
 80135e0:	4619      	mov	r1, r3
 80135e2:	6878      	ldr	r0, [r7, #4]
 80135e4:	f7fc f80c 	bl	800f600 <lfs_dir_fetch>
 80135e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 80135ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d001      	beq.n	80135f4 <lfs_fs_demove+0x6c>
        return err;
 80135f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80135f2:	e024      	b.n	801363e <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80135f8:	4618      	mov	r0, r3
 80135fa:	f7fa fe03 	bl	800e204 <lfs_tag_id>
 80135fe:	4603      	mov	r3, r0
 8013600:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 8013602:	2200      	movs	r2, #0
 8013604:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f7ff ff83 	bl	8013514 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 801360e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013610:	029b      	lsls	r3, r3, #10
 8013612:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 8013616:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 801361a:	613b      	str	r3, [r7, #16]
 801361c:	2300      	movs	r3, #0
 801361e:	617b      	str	r3, [r7, #20]
 8013620:	f107 0210 	add.w	r2, r7, #16
 8013624:	f107 0118 	add.w	r1, r7, #24
 8013628:	2301      	movs	r3, #1
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	f7fd f836 	bl	801069c <lfs_dir_commit>
 8013630:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 8013632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013634:	2b00      	cmp	r3, #0
 8013636:	d001      	beq.n	801363c <lfs_fs_demove+0xb4>
        return err;
 8013638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801363a:	e000      	b.n	801363e <lfs_fs_demove+0xb6>
    }

    return 0;
 801363c:	2300      	movs	r3, #0
}
 801363e:	4618      	mov	r0, r3
 8013640:	3740      	adds	r7, #64	; 0x40
 8013642:	46bd      	mov	sp, r7
 8013644:	bdb0      	pop	{r4, r5, r7, pc}
 8013646:	bf00      	nop
 8013648:	08029ee0 	.word	0x08029ee0
 801364c:	08029dd4 	.word	0x08029dd4
 8013650:	0802a464 	.word	0x0802a464

08013654 <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs) {
 8013654:	b5b0      	push	{r4, r5, r7, lr}
 8013656:	b0a8      	sub	sp, #160	; 0xa0
 8013658:	af04      	add	r7, sp, #16
 801365a:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	3330      	adds	r3, #48	; 0x30
 8013660:	4618      	mov	r0, r3
 8013662:	f7fa fe42 	bl	800e2ea <lfs_gstate_hasorphans>
 8013666:	4603      	mov	r3, r0
 8013668:	f083 0301 	eor.w	r3, r3, #1
 801366c:	b2db      	uxtb	r3, r3
 801366e:	2b00      	cmp	r3, #0
 8013670:	d001      	beq.n	8013676 <lfs_fs_deorphan+0x22>
        return 0;
 8013672:	2300      	movs	r3, #0
 8013674:	e0e6      	b.n	8013844 <lfs_fs_deorphan+0x1f0>
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 8013676:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801367a:	2220      	movs	r2, #32
 801367c:	2100      	movs	r1, #0
 801367e:	4618      	mov	r0, r3
 8013680:	f011 fd64 	bl	802514c <memset>
 8013684:	2301      	movs	r3, #1
 8013686:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 801368a:	2301      	movs	r3, #1
 801368c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    lfs_mdir_t dir;

    // iterate over all directory directory entries
    while (!lfs_pair_isnull(pdir.tail)) {
 8013690:	e0bd      	b.n	801380e <lfs_fs_deorphan+0x1ba>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 8013692:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013696:	f103 0218 	add.w	r2, r3, #24
 801369a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801369e:	4619      	mov	r1, r3
 80136a0:	6878      	ldr	r0, [r7, #4]
 80136a2:	f7fb ffad 	bl	800f600 <lfs_dir_fetch>
 80136a6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err) {
 80136aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d002      	beq.n	80136b8 <lfs_fs_deorphan+0x64>
            return err;
 80136b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80136b6:	e0c5      	b.n	8013844 <lfs_fs_deorphan+0x1f0>
        }

        // check head blocks for orphans
        if (!pdir.split) {
 80136b8:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80136bc:	f083 0301 	eor.w	r3, r3, #1
 80136c0:	b2db      	uxtb	r3, r3
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	f000 8099 	beq.w	80137fa <lfs_fs_deorphan+0x1a6>
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 80136c8:	f107 020c 	add.w	r2, r7, #12
 80136cc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80136d0:	3318      	adds	r3, #24
 80136d2:	4619      	mov	r1, r3
 80136d4:	6878      	ldr	r0, [r7, #4]
 80136d6:	f7ff fd23 	bl	8013120 <lfs_fs_parent>
 80136da:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 80136de:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	da07      	bge.n	80136f6 <lfs_fs_deorphan+0xa2>
 80136e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80136ea:	f113 0f02 	cmn.w	r3, #2
 80136ee:	d002      	beq.n	80136f6 <lfs_fs_deorphan+0xa2>
                return tag;
 80136f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80136f4:	e0a6      	b.n	8013844 <lfs_fs_deorphan+0x1f0>
            }

            if (tag == LFS_ERR_NOENT) {
 80136f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80136fa:	f113 0f02 	cmn.w	r3, #2
 80136fe:	d11d      	bne.n	801373c <lfs_fs_deorphan+0xe8>
                // we are an orphan
                LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 8013700:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013702:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013706:	4951      	ldr	r1, [pc, #324]	; (801384c <lfs_fs_deorphan+0x1f8>)
 8013708:	9101      	str	r1, [sp, #4]
 801370a:	9300      	str	r3, [sp, #0]
 801370c:	4613      	mov	r3, r2
 801370e:	f241 0252 	movw	r2, #4178	; 0x1052
 8013712:	494f      	ldr	r1, [pc, #316]	; (8013850 <lfs_fs_deorphan+0x1fc>)
 8013714:	484f      	ldr	r0, [pc, #316]	; (8013854 <lfs_fs_deorphan+0x200>)
 8013716:	f011 fb53 	bl	8024dc0 <iprintf>
                        pdir.tail[0], pdir.tail[1]);

                err = lfs_dir_drop(lfs, &pdir, &dir);
 801371a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801371e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013722:	4619      	mov	r1, r3
 8013724:	6878      	ldr	r0, [r7, #4]
 8013726:	f7fc fbe3 	bl	800fef0 <lfs_dir_drop>
 801372a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (err) {
 801372e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8013732:	2b00      	cmp	r3, #0
 8013734:	d05d      	beq.n	80137f2 <lfs_fs_deorphan+0x19e>
                    return err;
 8013736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801373a:	e083      	b.n	8013844 <lfs_fs_deorphan+0x1f0>
                // refetch tail
                continue;
            }

            lfs_block_t pair[2];
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 801373c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8013740:	f107 010c 	add.w	r1, r7, #12
 8013744:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013748:	9300      	str	r3, [sp, #0]
 801374a:	4613      	mov	r3, r2
 801374c:	4a42      	ldr	r2, [pc, #264]	; (8013858 <lfs_fs_deorphan+0x204>)
 801374e:	6878      	ldr	r0, [r7, #4]
 8013750:	f7fb f942 	bl	800e9d8 <lfs_dir_get>
 8013754:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                    LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
            if (res < 0) {
 8013758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801375c:	2b00      	cmp	r3, #0
 801375e:	da02      	bge.n	8013766 <lfs_fs_deorphan+0x112>
                return res;
 8013760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8013764:	e06e      	b.n	8013844 <lfs_fs_deorphan+0x1f0>
            }
            lfs_pair_fromle32(pair);
 8013766:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801376a:	4618      	mov	r0, r3
 801376c:	f7fa fcbb 	bl	800e0e6 <lfs_pair_fromle32>

            if (!lfs_pair_sync(pair, pdir.tail)) {
 8013770:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013774:	f103 0218 	add.w	r2, r3, #24
 8013778:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801377c:	4611      	mov	r1, r2
 801377e:	4618      	mov	r0, r3
 8013780:	f7fa fc84 	bl	800e08c <lfs_pair_sync>
 8013784:	4603      	mov	r3, r0
 8013786:	f083 0301 	eor.w	r3, r3, #1
 801378a:	b2db      	uxtb	r3, r3
 801378c:	2b00      	cmp	r3, #0
 801378e:	d034      	beq.n	80137fa <lfs_fs_deorphan+0x1a6>
                // we have desynced
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
 8013790:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8013792:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013798:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801379a:	4c2c      	ldr	r4, [pc, #176]	; (801384c <lfs_fs_deorphan+0x1f8>)
 801379c:	9403      	str	r4, [sp, #12]
 801379e:	9102      	str	r1, [sp, #8]
 80137a0:	9201      	str	r2, [sp, #4]
 80137a2:	9300      	str	r3, [sp, #0]
 80137a4:	4603      	mov	r3, r0
 80137a6:	f241 0268 	movw	r2, #4200	; 0x1068
 80137aa:	4929      	ldr	r1, [pc, #164]	; (8013850 <lfs_fs_deorphan+0x1fc>)
 80137ac:	482b      	ldr	r0, [pc, #172]	; (801385c <lfs_fs_deorphan+0x208>)
 80137ae:	f011 fb07 	bl	8024dc0 <iprintf>
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
 80137b2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7fa fcaf 	bl	800e11a <lfs_pair_tole32>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 80137bc:	4b28      	ldr	r3, [pc, #160]	; (8013860 <lfs_fs_deorphan+0x20c>)
 80137be:	637b      	str	r3, [r7, #52]	; 0x34
 80137c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80137c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80137c6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80137ca:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80137ce:	2301      	movs	r3, #1
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f7fc ff63 	bl	801069c <lfs_dir_commit>
 80137d6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                        {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pair}));
                lfs_pair_fromle32(pair);
 80137da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80137de:	4618      	mov	r0, r3
 80137e0:	f7fa fc81 	bl	800e0e6 <lfs_pair_fromle32>
                if (err) {
 80137e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d004      	beq.n	80137f6 <lfs_fs_deorphan+0x1a2>
                    return err;
 80137ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                return tag;
 80137f0:	e028      	b.n	8013844 <lfs_fs_deorphan+0x1f0>
                continue;
 80137f2:	bf00      	nop
 80137f4:	e00b      	b.n	801380e <lfs_fs_deorphan+0x1ba>
                }

                // refetch tail
                continue;
 80137f6:	bf00      	nop
 80137f8:	e009      	b.n	801380e <lfs_fs_deorphan+0x1ba>
            }
        }

        pdir = dir;
 80137fa:	f107 0464 	add.w	r4, r7, #100	; 0x64
 80137fe:	f107 0544 	add.w	r5, r7, #68	; 0x44
 8013802:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013804:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013806:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801380a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (!lfs_pair_isnull(pdir.tail)) {
 801380e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8013812:	3318      	adds	r3, #24
 8013814:	4618      	mov	r0, r3
 8013816:	f7fa fbf4 	bl	800e002 <lfs_pair_isnull>
 801381a:	4603      	mov	r3, r0
 801381c:	f083 0301 	eor.w	r3, r3, #1
 8013820:	b2db      	uxtb	r3, r3
 8013822:	2b00      	cmp	r3, #0
 8013824:	f47f af35 	bne.w	8013692 <lfs_fs_deorphan+0x3e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	3330      	adds	r3, #48	; 0x30
 801382c:	4618      	mov	r0, r3
 801382e:	f7fa fd6f 	bl	800e310 <lfs_gstate_getorphans>
 8013832:	4603      	mov	r3, r0
 8013834:	425b      	negs	r3, r3
 8013836:	b2db      	uxtb	r3, r3
 8013838:	b25b      	sxtb	r3, r3
 801383a:	4619      	mov	r1, r3
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f7ff fe2f 	bl	80134a0 <lfs_fs_preporphans>
 8013842:	4603      	mov	r3, r0
}
 8013844:	4618      	mov	r0, r3
 8013846:	3790      	adds	r7, #144	; 0x90
 8013848:	46bd      	mov	sp, r7
 801384a:	bdb0      	pop	{r4, r5, r7, pc}
 801384c:	08029ee0 	.word	0x08029ee0
 8013850:	08029dd4 	.word	0x08029dd4
 8013854:	0802a498 	.word	0x0802a498
 8013858:	7ffffc00 	.word	0x7ffffc00
 801385c:	0802a4c8 	.word	0x0802a4c8
 8013860:	600ffc08 	.word	0x600ffc08

08013864 <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 8013864:	b580      	push	{r7, lr}
 8013866:	b084      	sub	sp, #16
 8013868:	af00      	add	r7, sp, #0
 801386a:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f7ff fe8b 	bl	8013588 <lfs_fs_demove>
 8013872:	60f8      	str	r0, [r7, #12]
    if (err) {
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d001      	beq.n	801387e <lfs_fs_forceconsistency+0x1a>
        return err;
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	e009      	b.n	8013892 <lfs_fs_forceconsistency+0x2e>
    }

    err = lfs_fs_deorphan(lfs);
 801387e:	6878      	ldr	r0, [r7, #4]
 8013880:	f7ff fee8 	bl	8013654 <lfs_fs_deorphan>
 8013884:	60f8      	str	r0, [r7, #12]
    if (err) {
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d001      	beq.n	8013890 <lfs_fs_forceconsistency+0x2c>
        return err;
 801388c:	68fb      	ldr	r3, [r7, #12]
 801388e:	e000      	b.n	8013892 <lfs_fs_forceconsistency+0x2e>
    }

    return 0;
 8013890:	2300      	movs	r3, #0
}
 8013892:	4618      	mov	r0, r3
 8013894:	3710      	adds	r7, #16
 8013896:	46bd      	mov	sp, r7
 8013898:	bd80      	pop	{r7, pc}

0801389a <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 801389a:	b480      	push	{r7}
 801389c:	b085      	sub	sp, #20
 801389e:	af00      	add	r7, sp, #0
 80138a0:	6078      	str	r0, [r7, #4]
 80138a2:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	60fb      	str	r3, [r7, #12]
    *size += 1;
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	681b      	ldr	r3, [r3, #0]
 80138ac:	1c5a      	adds	r2, r3, #1
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	601a      	str	r2, [r3, #0]
    return 0;
 80138b2:	2300      	movs	r3, #0
}
 80138b4:	4618      	mov	r0, r3
 80138b6:	3714      	adds	r7, #20
 80138b8:	46bd      	mov	sp, r7
 80138ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138be:	4770      	bx	lr

080138c0 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b084      	sub	sp, #16
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 80138c8:	2300      	movs	r3, #0
 80138ca:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 80138cc:	f107 0208 	add.w	r2, r7, #8
 80138d0:	2300      	movs	r3, #0
 80138d2:	4907      	ldr	r1, [pc, #28]	; (80138f0 <lfs_fs_rawsize+0x30>)
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7ff fa75 	bl	8012dc4 <lfs_fs_rawtraverse>
 80138da:	60f8      	str	r0, [r7, #12]
    if (err) {
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d001      	beq.n	80138e6 <lfs_fs_rawsize+0x26>
        return err;
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	e000      	b.n	80138e8 <lfs_fs_rawsize+0x28>
    }

    return size;
 80138e6:	68bb      	ldr	r3, [r7, #8]
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	3710      	adds	r7, #16
 80138ec:	46bd      	mov	sp, r7
 80138ee:	bd80      	pop	{r7, pc}
 80138f0:	0801389b 	.word	0x0801389b

080138f4 <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 80138f4:	b580      	push	{r7, lr}
 80138f6:	b084      	sub	sp, #16
 80138f8:	af00      	add	r7, sp, #0
 80138fa:	6078      	str	r0, [r7, #4]
 80138fc:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80138fe:	2300      	movs	r3, #0
 8013900:	60fb      	str	r3, [r7, #12]
    if (err) {
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d001      	beq.n	801390c <lfs_format+0x18>
        return err;
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	e005      	b.n	8013918 <lfs_format+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 801390c:	6839      	ldr	r1, [r7, #0]
 801390e:	6878      	ldr	r0, [r7, #4]
 8013910:	f7ff f836 	bl	8012980 <lfs_rawformat>
 8013914:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8013916:	68fb      	ldr	r3, [r7, #12]
}
 8013918:	4618      	mov	r0, r3
 801391a:	3710      	adds	r7, #16
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}

08013920 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 8013920:	b580      	push	{r7, lr}
 8013922:	b084      	sub	sp, #16
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 801392a:	2300      	movs	r3, #0
 801392c:	60fb      	str	r3, [r7, #12]
    if (err) {
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d001      	beq.n	8013938 <lfs_mount+0x18>
        return err;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	e005      	b.n	8013944 <lfs_mount+0x24>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 8013938:	6839      	ldr	r1, [r7, #0]
 801393a:	6878      	ldr	r0, [r7, #4]
 801393c:	f7ff f8c0 	bl	8012ac0 <lfs_rawmount>
 8013940:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
    return err;
 8013942:	68fb      	ldr	r3, [r7, #12]
}
 8013944:	4618      	mov	r0, r3
 8013946:	3710      	adds	r7, #16
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}

0801394c <lfs_stat>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
 801394c:	b580      	push	{r7, lr}
 801394e:	b086      	sub	sp, #24
 8013950:	af00      	add	r7, sp, #0
 8013952:	60f8      	str	r0, [r7, #12]
 8013954:	60b9      	str	r1, [r7, #8]
 8013956:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8013958:	2300      	movs	r3, #0
 801395a:	617b      	str	r3, [r7, #20]
    if (err) {
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d001      	beq.n	8013966 <lfs_stat+0x1a>
        return err;
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	e006      	b.n	8013974 <lfs_stat+0x28>
    }
    LFS_TRACE("lfs_stat(%p, \"%s\", %p)", (void*)lfs, path, (void*)info);

    err = lfs_rawstat(lfs, path, info);
 8013966:	687a      	ldr	r2, [r7, #4]
 8013968:	68b9      	ldr	r1, [r7, #8]
 801396a:	68f8      	ldr	r0, [r7, #12]
 801396c:	f7fe fe00 	bl	8012570 <lfs_rawstat>
 8013970:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_stat -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8013972:	697b      	ldr	r3, [r7, #20]
}
 8013974:	4618      	mov	r0, r3
 8013976:	3718      	adds	r7, #24
 8013978:	46bd      	mov	sp, r7
 801397a:	bd80      	pop	{r7, pc}

0801397c <lfs_file_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 801397c:	b580      	push	{r7, lr}
 801397e:	b086      	sub	sp, #24
 8013980:	af00      	add	r7, sp, #0
 8013982:	60f8      	str	r0, [r7, #12]
 8013984:	60b9      	str	r1, [r7, #8]
 8013986:	607a      	str	r2, [r7, #4]
 8013988:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801398a:	2300      	movs	r3, #0
 801398c:	617b      	str	r3, [r7, #20]
    if (err) {
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	2b00      	cmp	r3, #0
 8013992:	d001      	beq.n	8013998 <lfs_file_open+0x1c>
        return err;
 8013994:	697b      	ldr	r3, [r7, #20]
 8013996:	e01a      	b.n	80139ce <lfs_file_open+0x52>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801399c:	68b9      	ldr	r1, [r7, #8]
 801399e:	4618      	mov	r0, r3
 80139a0:	f7fa fdd8 	bl	800e554 <lfs_mlist_isopen>
 80139a4:	4603      	mov	r3, r0
 80139a6:	f083 0301 	eor.w	r3, r3, #1
 80139aa:	b2db      	uxtb	r3, r3
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d106      	bne.n	80139be <lfs_file_open+0x42>
 80139b0:	4b09      	ldr	r3, [pc, #36]	; (80139d8 <lfs_file_open+0x5c>)
 80139b2:	4a0a      	ldr	r2, [pc, #40]	; (80139dc <lfs_file_open+0x60>)
 80139b4:	f241 31e8 	movw	r1, #5096	; 0x13e8
 80139b8:	4809      	ldr	r0, [pc, #36]	; (80139e0 <lfs_file_open+0x64>)
 80139ba:	f010 fb2b 	bl	8024014 <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 80139be:	683b      	ldr	r3, [r7, #0]
 80139c0:	687a      	ldr	r2, [r7, #4]
 80139c2:	68b9      	ldr	r1, [r7, #8]
 80139c4:	68f8      	ldr	r0, [r7, #12]
 80139c6:	f7fe f859 	bl	8011a7c <lfs_file_rawopen>
 80139ca:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 80139cc:	697b      	ldr	r3, [r7, #20]
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	3718      	adds	r7, #24
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}
 80139d6:	bf00      	nop
 80139d8:	0802a50c 	.word	0x0802a50c
 80139dc:	0802dd68 	.word	0x0802dd68
 80139e0:	08029dd4 	.word	0x08029dd4

080139e4 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 80139e4:	b580      	push	{r7, lr}
 80139e6:	b084      	sub	sp, #16
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	6078      	str	r0, [r7, #4]
 80139ec:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80139ee:	2300      	movs	r3, #0
 80139f0:	60fb      	str	r3, [r7, #12]
    if (err) {
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d001      	beq.n	80139fc <lfs_file_close+0x18>
        return err;
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	e015      	b.n	8013a28 <lfs_file_close+0x44>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a00:	6839      	ldr	r1, [r7, #0]
 8013a02:	4618      	mov	r0, r3
 8013a04:	f7fa fda6 	bl	800e554 <lfs_mlist_isopen>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	2b00      	cmp	r3, #0
 8013a0c:	d106      	bne.n	8013a1c <lfs_file_close+0x38>
 8013a0e:	4b08      	ldr	r3, [pc, #32]	; (8013a30 <lfs_file_close+0x4c>)
 8013a10:	4a08      	ldr	r2, [pc, #32]	; (8013a34 <lfs_file_close+0x50>)
 8013a12:	f241 410b 	movw	r1, #5131	; 0x140b
 8013a16:	4808      	ldr	r0, [pc, #32]	; (8013a38 <lfs_file_close+0x54>)
 8013a18:	f010 fafc 	bl	8024014 <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 8013a1c:	6839      	ldr	r1, [r7, #0]
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f7fe f844 	bl	8011aac <lfs_file_rawclose>
 8013a24:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8013a26:	68fb      	ldr	r3, [r7, #12]
}
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3710      	adds	r7, #16
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bd80      	pop	{r7, pc}
 8013a30:	0802a544 	.word	0x0802a544
 8013a34:	0802dd78 	.word	0x0802dd78
 8013a38:	08029dd4 	.word	0x08029dd4

08013a3c <lfs_file_read>:
    return err;
}
#endif

lfs_ssize_t lfs_file_read(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b086      	sub	sp, #24
 8013a40:	af00      	add	r7, sp, #0
 8013a42:	60f8      	str	r0, [r7, #12]
 8013a44:	60b9      	str	r1, [r7, #8]
 8013a46:	607a      	str	r2, [r7, #4]
 8013a48:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8013a4a:	2300      	movs	r3, #0
 8013a4c:	617b      	str	r3, [r7, #20]
    if (err) {
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d001      	beq.n	8013a58 <lfs_file_read+0x1c>
        return err;
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	e017      	b.n	8013a88 <lfs_file_read+0x4c>
    }
    LFS_TRACE("lfs_file_read(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013a5c:	68b9      	ldr	r1, [r7, #8]
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f7fa fd78 	bl	800e554 <lfs_mlist_isopen>
 8013a64:	4603      	mov	r3, r0
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d106      	bne.n	8013a78 <lfs_file_read+0x3c>
 8013a6a:	4b09      	ldr	r3, [pc, #36]	; (8013a90 <lfs_file_read+0x54>)
 8013a6c:	4a09      	ldr	r2, [pc, #36]	; (8013a94 <lfs_file_read+0x58>)
 8013a6e:	f241 412d 	movw	r1, #5165	; 0x142d
 8013a72:	4809      	ldr	r0, [pc, #36]	; (8013a98 <lfs_file_read+0x5c>)
 8013a74:	f010 face 	bl	8024014 <__assert_func>

    lfs_ssize_t res = lfs_file_rawread(lfs, file, buffer, size);
 8013a78:	683b      	ldr	r3, [r7, #0]
 8013a7a:	687a      	ldr	r2, [r7, #4]
 8013a7c:	68b9      	ldr	r1, [r7, #8]
 8013a7e:	68f8      	ldr	r0, [r7, #12]
 8013a80:	f7fe fa8e 	bl	8011fa0 <lfs_file_rawread>
 8013a84:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_read -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8013a86:	693b      	ldr	r3, [r7, #16]
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3718      	adds	r7, #24
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}
 8013a90:	0802a544 	.word	0x0802a544
 8013a94:	0802dd88 	.word	0x0802dd88
 8013a98:	08029dd4 	.word	0x08029dd4

08013a9c <lfs_file_write>:

#ifndef LFS_READONLY
lfs_ssize_t lfs_file_write(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b086      	sub	sp, #24
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
 8013aa8:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8013aaa:	2300      	movs	r3, #0
 8013aac:	617b      	str	r3, [r7, #20]
    if (err) {
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d001      	beq.n	8013ab8 <lfs_file_write+0x1c>
        return err;
 8013ab4:	697b      	ldr	r3, [r7, #20]
 8013ab6:	e017      	b.n	8013ae8 <lfs_file_write+0x4c>
    }
    LFS_TRACE("lfs_file_write(%p, %p, %p, %"PRIu32")",
            (void*)lfs, (void*)file, buffer, size);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013abc:	68b9      	ldr	r1, [r7, #8]
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f7fa fd48 	bl	800e554 <lfs_mlist_isopen>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d106      	bne.n	8013ad8 <lfs_file_write+0x3c>
 8013aca:	4b09      	ldr	r3, [pc, #36]	; (8013af0 <lfs_file_write+0x54>)
 8013acc:	4a09      	ldr	r2, [pc, #36]	; (8013af4 <lfs_file_write+0x58>)
 8013ace:	f241 413f 	movw	r1, #5183	; 0x143f
 8013ad2:	4809      	ldr	r0, [pc, #36]	; (8013af8 <lfs_file_write+0x5c>)
 8013ad4:	f010 fa9e 	bl	8024014 <__assert_func>

    lfs_ssize_t res = lfs_file_rawwrite(lfs, file, buffer, size);
 8013ad8:	683b      	ldr	r3, [r7, #0]
 8013ada:	687a      	ldr	r2, [r7, #4]
 8013adc:	68b9      	ldr	r1, [r7, #8]
 8013ade:	68f8      	ldr	r0, [r7, #12]
 8013ae0:	f7fe fb52 	bl	8012188 <lfs_file_rawwrite>
 8013ae4:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_write -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8013ae6:	693b      	ldr	r3, [r7, #16]
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3718      	adds	r7, #24
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}
 8013af0:	0802a544 	.word	0x0802a544
 8013af4:	0802dd98 	.word	0x0802dd98
 8013af8:	08029dd4 	.word	0x08029dd4

08013afc <lfs_file_seek>:
#endif

lfs_soff_t lfs_file_seek(lfs_t *lfs, lfs_file_t *file,
        lfs_soff_t off, int whence) {
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b086      	sub	sp, #24
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	60f8      	str	r0, [r7, #12]
 8013b04:	60b9      	str	r1, [r7, #8]
 8013b06:	607a      	str	r2, [r7, #4]
 8013b08:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	617b      	str	r3, [r7, #20]
    if (err) {
 8013b0e:	697b      	ldr	r3, [r7, #20]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	d001      	beq.n	8013b18 <lfs_file_seek+0x1c>
        return err;
 8013b14:	697b      	ldr	r3, [r7, #20]
 8013b16:	e017      	b.n	8013b48 <lfs_file_seek+0x4c>
    }
    LFS_TRACE("lfs_file_seek(%p, %p, %"PRId32", %d)",
            (void*)lfs, (void*)file, off, whence);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b1c:	68b9      	ldr	r1, [r7, #8]
 8013b1e:	4618      	mov	r0, r3
 8013b20:	f7fa fd18 	bl	800e554 <lfs_mlist_isopen>
 8013b24:	4603      	mov	r3, r0
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d106      	bne.n	8013b38 <lfs_file_seek+0x3c>
 8013b2a:	4b09      	ldr	r3, [pc, #36]	; (8013b50 <lfs_file_seek+0x54>)
 8013b2c:	4a09      	ldr	r2, [pc, #36]	; (8013b54 <lfs_file_seek+0x58>)
 8013b2e:	f241 4151 	movw	r1, #5201	; 0x1451
 8013b32:	4809      	ldr	r0, [pc, #36]	; (8013b58 <lfs_file_seek+0x5c>)
 8013b34:	f010 fa6e 	bl	8024014 <__assert_func>

    lfs_soff_t res = lfs_file_rawseek(lfs, file, off, whence);
 8013b38:	683b      	ldr	r3, [r7, #0]
 8013b3a:	687a      	ldr	r2, [r7, #4]
 8013b3c:	68b9      	ldr	r1, [r7, #8]
 8013b3e:	68f8      	ldr	r0, [r7, #12]
 8013b40:	f7fe fcb6 	bl	80124b0 <lfs_file_rawseek>
 8013b44:	6138      	str	r0, [r7, #16]

    LFS_TRACE("lfs_file_seek -> %"PRId32, res);
    LFS_UNLOCK(lfs->cfg);
    return res;
 8013b46:	693b      	ldr	r3, [r7, #16]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	3718      	adds	r7, #24
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	0802a544 	.word	0x0802a544
 8013b54:	0802dda8 	.word	0x0802dda8
 8013b58:	08029dd4 	.word	0x08029dd4

08013b5c <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b084      	sub	sp, #16
 8013b60:	af00      	add	r7, sp, #0
 8013b62:	6078      	str	r0, [r7, #4]
 8013b64:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8013b66:	2300      	movs	r3, #0
 8013b68:	60fb      	str	r3, [r7, #12]
    if (err) {
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d001      	beq.n	8013b74 <lfs_mkdir+0x18>
        return err;
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	e005      	b.n	8013b80 <lfs_mkdir+0x24>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 8013b74:	6839      	ldr	r1, [r7, #0]
 8013b76:	6878      	ldr	r0, [r7, #4]
 8013b78:	f7fd f942 	bl	8010e00 <lfs_rawmkdir>
 8013b7c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3710      	adds	r7, #16
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <lfs_dir_open>:
#endif

int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b086      	sub	sp, #24
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	60f8      	str	r0, [r7, #12]
 8013b90:	60b9      	str	r1, [r7, #8]
 8013b92:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8013b94:	2300      	movs	r3, #0
 8013b96:	617b      	str	r3, [r7, #20]
    if (err) {
 8013b98:	697b      	ldr	r3, [r7, #20]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d001      	beq.n	8013ba2 <lfs_dir_open+0x1a>
        return err;
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	e019      	b.n	8013bd6 <lfs_dir_open+0x4e>
    }
    LFS_TRACE("lfs_dir_open(%p, %p, \"%s\")", (void*)lfs, (void*)dir, path);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)dir));
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ba6:	68b9      	ldr	r1, [r7, #8]
 8013ba8:	4618      	mov	r0, r3
 8013baa:	f7fa fcd3 	bl	800e554 <lfs_mlist_isopen>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	f083 0301 	eor.w	r3, r3, #1
 8013bb4:	b2db      	uxtb	r3, r3
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d106      	bne.n	8013bc8 <lfs_dir_open+0x40>
 8013bba:	4b09      	ldr	r3, [pc, #36]	; (8013be0 <lfs_dir_open+0x58>)
 8013bbc:	4a09      	ldr	r2, [pc, #36]	; (8013be4 <lfs_dir_open+0x5c>)
 8013bbe:	f241 41ae 	movw	r1, #5294	; 0x14ae
 8013bc2:	4809      	ldr	r0, [pc, #36]	; (8013be8 <lfs_dir_open+0x60>)
 8013bc4:	f010 fa26 	bl	8024014 <__assert_func>

    err = lfs_dir_rawopen(lfs, dir, path);
 8013bc8:	687a      	ldr	r2, [r7, #4]
 8013bca:	68b9      	ldr	r1, [r7, #8]
 8013bcc:	68f8      	ldr	r0, [r7, #12]
 8013bce:	f7fd fa57 	bl	8011080 <lfs_dir_rawopen>
 8013bd2:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8013bd4:	697b      	ldr	r3, [r7, #20]
}
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	3718      	adds	r7, #24
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}
 8013bde:	bf00      	nop
 8013be0:	0802a57c 	.word	0x0802a57c
 8013be4:	0802ddb8 	.word	0x0802ddb8
 8013be8:	08029dd4 	.word	0x08029dd4

08013bec <lfs_dir_close>:

int lfs_dir_close(lfs_t *lfs, lfs_dir_t *dir) {
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b084      	sub	sp, #16
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	60fb      	str	r3, [r7, #12]
    if (err) {
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d001      	beq.n	8013c04 <lfs_dir_close+0x18>
        return err;
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	e005      	b.n	8013c10 <lfs_dir_close+0x24>
    }
    LFS_TRACE("lfs_dir_close(%p, %p)", (void*)lfs, (void*)dir);

    err = lfs_dir_rawclose(lfs, dir);
 8013c04:	6839      	ldr	r1, [r7, #0]
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f7fd fab4 	bl	8011174 <lfs_dir_rawclose>
 8013c0c:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_dir_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8013c0e:	68fb      	ldr	r3, [r7, #12]
}
 8013c10:	4618      	mov	r0, r3
 8013c12:	3710      	adds	r7, #16
 8013c14:	46bd      	mov	sp, r7
 8013c16:	bd80      	pop	{r7, pc}

08013c18 <lfs_dir_read>:

int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
 8013c18:	b580      	push	{r7, lr}
 8013c1a:	b086      	sub	sp, #24
 8013c1c:	af00      	add	r7, sp, #0
 8013c1e:	60f8      	str	r0, [r7, #12]
 8013c20:	60b9      	str	r1, [r7, #8]
 8013c22:	607a      	str	r2, [r7, #4]
    int err = LFS_LOCK(lfs->cfg);
 8013c24:	2300      	movs	r3, #0
 8013c26:	617b      	str	r3, [r7, #20]
    if (err) {
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d001      	beq.n	8013c32 <lfs_dir_read+0x1a>
        return err;
 8013c2e:	697b      	ldr	r3, [r7, #20]
 8013c30:	e006      	b.n	8013c40 <lfs_dir_read+0x28>
    }
    LFS_TRACE("lfs_dir_read(%p, %p, %p)",
            (void*)lfs, (void*)dir, (void*)info);

    err = lfs_dir_rawread(lfs, dir, info);
 8013c32:	687a      	ldr	r2, [r7, #4]
 8013c34:	68b9      	ldr	r1, [r7, #8]
 8013c36:	68f8      	ldr	r0, [r7, #12]
 8013c38:	f7fd faaa 	bl	8011190 <lfs_dir_rawread>
 8013c3c:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_dir_read -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
 8013c3e:	697b      	ldr	r3, [r7, #20]
}
 8013c40:	4618      	mov	r0, r3
 8013c42:	3718      	adds	r7, #24
 8013c44:	46bd      	mov	sp, r7
 8013c46:	bd80      	pop	{r7, pc}

08013c48 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 8013c48:	b480      	push	{r7}
 8013c4a:	b087      	sub	sp, #28
 8013c4c:	af00      	add	r7, sp, #0
 8013c4e:	60f8      	str	r0, [r7, #12]
 8013c50:	60b9      	str	r1, [r7, #8]
 8013c52:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 8013c58:	2300      	movs	r3, #0
 8013c5a:	617b      	str	r3, [r7, #20]
 8013c5c:	e024      	b.n	8013ca8 <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8013c5e:	68fb      	ldr	r3, [r7, #12]
 8013c60:	091a      	lsrs	r2, r3, #4
 8013c62:	6939      	ldr	r1, [r7, #16]
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	440b      	add	r3, r1
 8013c68:	781b      	ldrb	r3, [r3, #0]
 8013c6a:	4619      	mov	r1, r3
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	404b      	eors	r3, r1
 8013c70:	f003 030f 	and.w	r3, r3, #15
 8013c74:	4912      	ldr	r1, [pc, #72]	; (8013cc0 <lfs_crc+0x78>)
 8013c76:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013c7a:	4053      	eors	r3, r2
 8013c7c:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	091a      	lsrs	r2, r3, #4
 8013c82:	6939      	ldr	r1, [r7, #16]
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	440b      	add	r3, r1
 8013c88:	781b      	ldrb	r3, [r3, #0]
 8013c8a:	091b      	lsrs	r3, r3, #4
 8013c8c:	b2db      	uxtb	r3, r3
 8013c8e:	4619      	mov	r1, r3
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	404b      	eors	r3, r1
 8013c94:	f003 030f 	and.w	r3, r3, #15
 8013c98:	4909      	ldr	r1, [pc, #36]	; (8013cc0 <lfs_crc+0x78>)
 8013c9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8013c9e:	4053      	eors	r3, r2
 8013ca0:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8013ca2:	697b      	ldr	r3, [r7, #20]
 8013ca4:	3301      	adds	r3, #1
 8013ca6:	617b      	str	r3, [r7, #20]
 8013ca8:	697a      	ldr	r2, [r7, #20]
 8013caa:	687b      	ldr	r3, [r7, #4]
 8013cac:	429a      	cmp	r2, r3
 8013cae:	d3d6      	bcc.n	8013c5e <lfs_crc+0x16>
    }

    return crc;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	371c      	adds	r7, #28
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbc:	4770      	bx	lr
 8013cbe:	bf00      	nop
 8013cc0:	0802ddc8 	.word	0x0802ddc8

08013cc4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b084      	sub	sp, #16
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
 8013ccc:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	681b      	ldr	r3, [r3, #0]
 8013cd2:	330c      	adds	r3, #12
 8013cd4:	461a      	mov	r2, r3
 8013cd6:	6839      	ldr	r1, [r7, #0]
 8013cd8:	6878      	ldr	r0, [r7, #4]
 8013cda:	f002 fd53 	bl	8016784 <tcpip_send_msg_wait_sem>
 8013cde:	4603      	mov	r3, r0
 8013ce0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8013ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d103      	bne.n	8013cf2 <netconn_apimsg+0x2e>
    return apimsg->err;
 8013cea:	683b      	ldr	r3, [r7, #0]
 8013cec:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8013cf0:	e001      	b.n	8013cf6 <netconn_apimsg+0x32>
  }
  return err;
 8013cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3710      	adds	r7, #16
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	bd80      	pop	{r7, pc}
	...

08013d00 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b08c      	sub	sp, #48	; 0x30
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	4603      	mov	r3, r0
 8013d08:	603a      	str	r2, [r7, #0]
 8013d0a:	71fb      	strb	r3, [r7, #7]
 8013d0c:	460b      	mov	r3, r1
 8013d0e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8013d10:	79fb      	ldrb	r3, [r7, #7]
 8013d12:	6839      	ldr	r1, [r7, #0]
 8013d14:	4618      	mov	r0, r3
 8013d16:	f001 f9d9 	bl	80150cc <netconn_alloc>
 8013d1a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8013d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d054      	beq.n	8013dcc <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8013d22:	79bb      	ldrb	r3, [r7, #6]
 8013d24:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8013d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d28:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8013d2a:	f107 0308 	add.w	r3, r7, #8
 8013d2e:	4619      	mov	r1, r3
 8013d30:	4829      	ldr	r0, [pc, #164]	; (8013dd8 <netconn_new_with_proto_and_callback+0xd8>)
 8013d32:	f7ff ffc7 	bl	8013cc4 <netconn_apimsg>
 8013d36:	4603      	mov	r3, r0
 8013d38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8013d3c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d043      	beq.n	8013dcc <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8013d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d46:	685b      	ldr	r3, [r3, #4]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d005      	beq.n	8013d58 <netconn_new_with_proto_and_callback+0x58>
 8013d4c:	4b23      	ldr	r3, [pc, #140]	; (8013ddc <netconn_new_with_proto_and_callback+0xdc>)
 8013d4e:	22a3      	movs	r2, #163	; 0xa3
 8013d50:	4923      	ldr	r1, [pc, #140]	; (8013de0 <netconn_new_with_proto_and_callback+0xe0>)
 8013d52:	4824      	ldr	r0, [pc, #144]	; (8013de4 <netconn_new_with_proto_and_callback+0xe4>)
 8013d54:	f011 f834 	bl	8024dc0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8013d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d5a:	3310      	adds	r3, #16
 8013d5c:	4618      	mov	r0, r3
 8013d5e:	f00e fe90 	bl	8022a82 <sys_mbox_valid>
 8013d62:	4603      	mov	r3, r0
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d105      	bne.n	8013d74 <netconn_new_with_proto_and_callback+0x74>
 8013d68:	4b1c      	ldr	r3, [pc, #112]	; (8013ddc <netconn_new_with_proto_and_callback+0xdc>)
 8013d6a:	22a4      	movs	r2, #164	; 0xa4
 8013d6c:	491e      	ldr	r1, [pc, #120]	; (8013de8 <netconn_new_with_proto_and_callback+0xe8>)
 8013d6e:	481d      	ldr	r0, [pc, #116]	; (8013de4 <netconn_new_with_proto_and_callback+0xe4>)
 8013d70:	f011 f826 	bl	8024dc0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8013d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d76:	3314      	adds	r3, #20
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f00e fe82 	bl	8022a82 <sys_mbox_valid>
 8013d7e:	4603      	mov	r3, r0
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d005      	beq.n	8013d90 <netconn_new_with_proto_and_callback+0x90>
 8013d84:	4b15      	ldr	r3, [pc, #84]	; (8013ddc <netconn_new_with_proto_and_callback+0xdc>)
 8013d86:	22a6      	movs	r2, #166	; 0xa6
 8013d88:	4918      	ldr	r1, [pc, #96]	; (8013dec <netconn_new_with_proto_and_callback+0xec>)
 8013d8a:	4816      	ldr	r0, [pc, #88]	; (8013de4 <netconn_new_with_proto_and_callback+0xe4>)
 8013d8c:	f011 f818 	bl	8024dc0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8013d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d92:	330c      	adds	r3, #12
 8013d94:	4618      	mov	r0, r3
 8013d96:	f00e ff05 	bl	8022ba4 <sys_sem_valid>
 8013d9a:	4603      	mov	r3, r0
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d105      	bne.n	8013dac <netconn_new_with_proto_and_callback+0xac>
 8013da0:	4b0e      	ldr	r3, [pc, #56]	; (8013ddc <netconn_new_with_proto_and_callback+0xdc>)
 8013da2:	22a9      	movs	r2, #169	; 0xa9
 8013da4:	4912      	ldr	r1, [pc, #72]	; (8013df0 <netconn_new_with_proto_and_callback+0xf0>)
 8013da6:	480f      	ldr	r0, [pc, #60]	; (8013de4 <netconn_new_with_proto_and_callback+0xe4>)
 8013da8:	f011 f80a 	bl	8024dc0 <iprintf>
      sys_sem_free(&conn->op_completed);
 8013dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dae:	330c      	adds	r3, #12
 8013db0:	4618      	mov	r0, r3
 8013db2:	f00e feea 	bl	8022b8a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8013db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013db8:	3310      	adds	r3, #16
 8013dba:	4618      	mov	r0, r3
 8013dbc:	f00e fdda 	bl	8022974 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8013dc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013dc2:	2007      	movs	r0, #7
 8013dc4:	f003 fd56 	bl	8017874 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	e000      	b.n	8013dce <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8013dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3730      	adds	r7, #48	; 0x30
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}
 8013dd6:	bf00      	nop
 8013dd8:	080150a1 	.word	0x080150a1
 8013ddc:	0802a5b4 	.word	0x0802a5b4
 8013de0:	0802a5e8 	.word	0x0802a5e8
 8013de4:	0802a60c 	.word	0x0802a60c
 8013de8:	0802a634 	.word	0x0802a634
 8013dec:	0802a64c 	.word	0x0802a64c
 8013df0:	0802a670 	.word	0x0802a670

08013df4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b08c      	sub	sp, #48	; 0x30
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d101      	bne.n	8013e06 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8013e02:	2300      	movs	r3, #0
 8013e04:	e014      	b.n	8013e30 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8013e0a:	2329      	movs	r3, #41	; 0x29
 8013e0c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8013e0e:	f107 030c 	add.w	r3, r7, #12
 8013e12:	4619      	mov	r1, r3
 8013e14:	4808      	ldr	r0, [pc, #32]	; (8013e38 <netconn_prepare_delete+0x44>)
 8013e16:	f7ff ff55 	bl	8013cc4 <netconn_apimsg>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8013e20:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d002      	beq.n	8013e2e <netconn_prepare_delete+0x3a>
    return err;
 8013e28:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8013e2c:	e000      	b.n	8013e30 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8013e2e:	2300      	movs	r3, #0
}
 8013e30:	4618      	mov	r0, r3
 8013e32:	3730      	adds	r7, #48	; 0x30
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}
 8013e38:	08015615 	.word	0x08015615

08013e3c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b084      	sub	sp, #16
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d101      	bne.n	8013e4e <netconn_delete+0x12>
    return ERR_OK;
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	e00d      	b.n	8013e6a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8013e4e:	6878      	ldr	r0, [r7, #4]
 8013e50:	f7ff ffd0 	bl	8013df4 <netconn_prepare_delete>
 8013e54:	4603      	mov	r3, r0
 8013e56:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8013e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d102      	bne.n	8013e66 <netconn_delete+0x2a>
    netconn_free(conn);
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f001 f9a5 	bl	80151b0 <netconn_free>
  }
  return err;
 8013e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	3710      	adds	r7, #16
 8013e6e:	46bd      	mov	sp, r7
 8013e70:	bd80      	pop	{r7, pc}
	...

08013e74 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b08e      	sub	sp, #56	; 0x38
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	60f8      	str	r0, [r7, #12]
 8013e7c:	60b9      	str	r1, [r7, #8]
 8013e7e:	4613      	mov	r3, r2
 8013e80:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d109      	bne.n	8013e9c <netconn_bind+0x28>
 8013e88:	4b11      	ldr	r3, [pc, #68]	; (8013ed0 <netconn_bind+0x5c>)
 8013e8a:	f44f 729c 	mov.w	r2, #312	; 0x138
 8013e8e:	4911      	ldr	r1, [pc, #68]	; (8013ed4 <netconn_bind+0x60>)
 8013e90:	4811      	ldr	r0, [pc, #68]	; (8013ed8 <netconn_bind+0x64>)
 8013e92:	f010 ff95 	bl	8024dc0 <iprintf>
 8013e96:	f06f 030f 	mvn.w	r3, #15
 8013e9a:	e015      	b.n	8013ec8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8013e9c:	68bb      	ldr	r3, [r7, #8]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d101      	bne.n	8013ea6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8013ea2:	4b0e      	ldr	r3, [pc, #56]	; (8013edc <netconn_bind+0x68>)
 8013ea4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8013eae:	88fb      	ldrh	r3, [r7, #6]
 8013eb0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8013eb2:	f107 0314 	add.w	r3, r7, #20
 8013eb6:	4619      	mov	r1, r3
 8013eb8:	4809      	ldr	r0, [pc, #36]	; (8013ee0 <netconn_bind+0x6c>)
 8013eba:	f7ff ff03 	bl	8013cc4 <netconn_apimsg>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8013ec4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8013ec8:	4618      	mov	r0, r3
 8013eca:	3738      	adds	r7, #56	; 0x38
 8013ecc:	46bd      	mov	sp, r7
 8013ece:	bd80      	pop	{r7, pc}
 8013ed0:	0802a5b4 	.word	0x0802a5b4
 8013ed4:	0802a6ec 	.word	0x0802a6ec
 8013ed8:	0802a60c 	.word	0x0802a60c
 8013edc:	0802df34 	.word	0x0802df34
 8013ee0:	080157e1 	.word	0x080157e1

08013ee4 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b08e      	sub	sp, #56	; 0x38
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	60f8      	str	r0, [r7, #12]
 8013eec:	60b9      	str	r1, [r7, #8]
 8013eee:	4613      	mov	r3, r2
 8013ef0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d109      	bne.n	8013f0c <netconn_connect+0x28>
 8013ef8:	4b11      	ldr	r3, [pc, #68]	; (8013f40 <netconn_connect+0x5c>)
 8013efa:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8013efe:	4911      	ldr	r1, [pc, #68]	; (8013f44 <netconn_connect+0x60>)
 8013f00:	4811      	ldr	r0, [pc, #68]	; (8013f48 <netconn_connect+0x64>)
 8013f02:	f010 ff5d 	bl	8024dc0 <iprintf>
 8013f06:	f06f 030f 	mvn.w	r3, #15
 8013f0a:	e015      	b.n	8013f38 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8013f0c:	68bb      	ldr	r3, [r7, #8]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d101      	bne.n	8013f16 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8013f12:	4b0e      	ldr	r3, [pc, #56]	; (8013f4c <netconn_connect+0x68>)
 8013f14:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8013f1a:	68bb      	ldr	r3, [r7, #8]
 8013f1c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8013f1e:	88fb      	ldrh	r3, [r7, #6]
 8013f20:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8013f22:	f107 0314 	add.w	r3, r7, #20
 8013f26:	4619      	mov	r1, r3
 8013f28:	4809      	ldr	r0, [pc, #36]	; (8013f50 <netconn_connect+0x6c>)
 8013f2a:	f7ff fecb 	bl	8013cc4 <netconn_apimsg>
 8013f2e:	4603      	mov	r3, r0
 8013f30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8013f34:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8013f38:	4618      	mov	r0, r3
 8013f3a:	3738      	adds	r7, #56	; 0x38
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}
 8013f40:	0802a5b4 	.word	0x0802a5b4
 8013f44:	0802a728 	.word	0x0802a728
 8013f48:	0802a60c 	.word	0x0802a60c
 8013f4c:	0802df34 	.word	0x0802df34
 8013f50:	0801597d 	.word	0x0801597d

08013f54 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 8013f54:	b580      	push	{r7, lr}
 8013f56:	b08c      	sub	sp, #48	; 0x30
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d109      	bne.n	8013f76 <netconn_disconnect+0x22>
 8013f62:	4b0d      	ldr	r3, [pc, #52]	; (8013f98 <netconn_disconnect+0x44>)
 8013f64:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8013f68:	490c      	ldr	r1, [pc, #48]	; (8013f9c <netconn_disconnect+0x48>)
 8013f6a:	480d      	ldr	r0, [pc, #52]	; (8013fa0 <netconn_disconnect+0x4c>)
 8013f6c:	f010 ff28 	bl	8024dc0 <iprintf>
 8013f70:	f06f 030f 	mvn.w	r3, #15
 8013f74:	e00c      	b.n	8013f90 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 8013f7a:	f107 030c 	add.w	r3, r7, #12
 8013f7e:	4619      	mov	r1, r3
 8013f80:	4808      	ldr	r0, [pc, #32]	; (8013fa4 <netconn_disconnect+0x50>)
 8013f82:	f7ff fe9f 	bl	8013cc4 <netconn_apimsg>
 8013f86:	4603      	mov	r3, r0
 8013f88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8013f8c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8013f90:	4618      	mov	r0, r3
 8013f92:	3730      	adds	r7, #48	; 0x30
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}
 8013f98:	0802a5b4 	.word	0x0802a5b4
 8013f9c:	0802a748 	.word	0x0802a748
 8013fa0:	0802a60c 	.word	0x0802a60c
 8013fa4:	08015b05 	.word	0x08015b05

08013fa8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b08c      	sub	sp, #48	; 0x30
 8013fac:	af00      	add	r7, sp, #0
 8013fae:	6078      	str	r0, [r7, #4]
 8013fb0:	460b      	mov	r3, r1
 8013fb2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d109      	bne.n	8013fce <netconn_listen_with_backlog+0x26>
 8013fba:	4b0d      	ldr	r3, [pc, #52]	; (8013ff0 <netconn_listen_with_backlog+0x48>)
 8013fbc:	f240 12bb 	movw	r2, #443	; 0x1bb
 8013fc0:	490c      	ldr	r1, [pc, #48]	; (8013ff4 <netconn_listen_with_backlog+0x4c>)
 8013fc2:	480d      	ldr	r0, [pc, #52]	; (8013ff8 <netconn_listen_with_backlog+0x50>)
 8013fc4:	f010 fefc 	bl	8024dc0 <iprintf>
 8013fc8:	f06f 030f 	mvn.w	r3, #15
 8013fcc:	e00c      	b.n	8013fe8 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8013fd2:	f107 030c 	add.w	r3, r7, #12
 8013fd6:	4619      	mov	r1, r3
 8013fd8:	4808      	ldr	r0, [pc, #32]	; (8013ffc <netconn_listen_with_backlog+0x54>)
 8013fda:	f7ff fe73 	bl	8013cc4 <netconn_apimsg>
 8013fde:	4603      	mov	r3, r0
 8013fe0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8013fe4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8013fe8:	4618      	mov	r0, r3
 8013fea:	3730      	adds	r7, #48	; 0x30
 8013fec:	46bd      	mov	sp, r7
 8013fee:	bd80      	pop	{r7, pc}
 8013ff0:	0802a5b4 	.word	0x0802a5b4
 8013ff4:	0802a76c 	.word	0x0802a76c
 8013ff8:	0802a60c 	.word	0x0802a60c
 8013ffc:	08015b41 	.word	0x08015b41

08014000 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8014000:	b580      	push	{r7, lr}
 8014002:	b086      	sub	sp, #24
 8014004:	af00      	add	r7, sp, #0
 8014006:	6078      	str	r0, [r7, #4]
 8014008:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 801400a:	683b      	ldr	r3, [r7, #0]
 801400c:	2b00      	cmp	r3, #0
 801400e:	d109      	bne.n	8014024 <netconn_accept+0x24>
 8014010:	4b42      	ldr	r3, [pc, #264]	; (801411c <netconn_accept+0x11c>)
 8014012:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014016:	4942      	ldr	r1, [pc, #264]	; (8014120 <netconn_accept+0x120>)
 8014018:	4842      	ldr	r0, [pc, #264]	; (8014124 <netconn_accept+0x124>)
 801401a:	f010 fed1 	bl	8024dc0 <iprintf>
 801401e:	f06f 030f 	mvn.w	r3, #15
 8014022:	e077      	b.n	8014114 <netconn_accept+0x114>
  *new_conn = NULL;
 8014024:	683b      	ldr	r3, [r7, #0]
 8014026:	2200      	movs	r2, #0
 8014028:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d109      	bne.n	8014044 <netconn_accept+0x44>
 8014030:	4b3a      	ldr	r3, [pc, #232]	; (801411c <netconn_accept+0x11c>)
 8014032:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014036:	493c      	ldr	r1, [pc, #240]	; (8014128 <netconn_accept+0x128>)
 8014038:	483a      	ldr	r0, [pc, #232]	; (8014124 <netconn_accept+0x124>)
 801403a:	f010 fec1 	bl	8024dc0 <iprintf>
 801403e:	f06f 030f 	mvn.w	r3, #15
 8014042:	e067      	b.n	8014114 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f000 fbb6 	bl	80147b6 <netconn_err>
 801404a:	4603      	mov	r3, r0
 801404c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 801404e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d002      	beq.n	801405c <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8014056:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801405a:	e05b      	b.n	8014114 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	3314      	adds	r3, #20
 8014060:	4618      	mov	r0, r3
 8014062:	f00e fd0e 	bl	8022a82 <sys_mbox_valid>
 8014066:	4603      	mov	r3, r0
 8014068:	2b00      	cmp	r3, #0
 801406a:	d006      	beq.n	801407a <netconn_accept+0x7a>
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014072:	f003 0301 	and.w	r3, r3, #1
 8014076:	2b00      	cmp	r3, #0
 8014078:	d002      	beq.n	8014080 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 801407a:	f06f 030e 	mvn.w	r3, #14
 801407e:	e049      	b.n	8014114 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014086:	f003 0302 	and.w	r3, r3, #2
 801408a:	2b00      	cmp	r3, #0
 801408c:	d00e      	beq.n	80140ac <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	3314      	adds	r3, #20
 8014092:	f107 020c 	add.w	r2, r7, #12
 8014096:	4611      	mov	r1, r2
 8014098:	4618      	mov	r0, r3
 801409a:	f00e fcd6 	bl	8022a4a <sys_arch_mbox_tryfetch>
 801409e:	4603      	mov	r3, r0
 80140a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140a4:	d113      	bne.n	80140ce <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80140a6:	f06f 0306 	mvn.w	r3, #6
 80140aa:	e033      	b.n	8014114 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	f103 0014 	add.w	r0, r3, #20
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	69da      	ldr	r2, [r3, #28]
 80140b6:	f107 030c 	add.w	r3, r7, #12
 80140ba:	4619      	mov	r1, r3
 80140bc:	f00e fc86 	bl	80229cc <sys_arch_mbox_fetch>
 80140c0:	4603      	mov	r3, r0
 80140c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140c6:	d102      	bne.n	80140ce <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 80140c8:	f06f 0302 	mvn.w	r3, #2
 80140cc:	e022      	b.n	8014114 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d005      	beq.n	80140e2 <netconn_accept+0xe2>
 80140d6:	687b      	ldr	r3, [r7, #4]
 80140d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80140da:	2200      	movs	r2, #0
 80140dc:	2101      	movs	r1, #1
 80140de:	6878      	ldr	r0, [r7, #4]
 80140e0:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	f107 0213 	add.w	r2, r7, #19
 80140e8:	4611      	mov	r1, r2
 80140ea:	4618      	mov	r0, r3
 80140ec:	f000 fbb4 	bl	8014858 <lwip_netconn_is_err_msg>
 80140f0:	4603      	mov	r3, r0
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	d002      	beq.n	80140fc <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80140f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80140fa:	e00b      	b.n	8014114 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 80140fc:	68fb      	ldr	r3, [r7, #12]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d102      	bne.n	8014108 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8014102:	f06f 030e 	mvn.w	r3, #14
 8014106:	e005      	b.n	8014114 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 801410c:	683b      	ldr	r3, [r7, #0]
 801410e:	697a      	ldr	r2, [r7, #20]
 8014110:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8014112:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014114:	4618      	mov	r0, r3
 8014116:	3718      	adds	r7, #24
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}
 801411c:	0802a5b4 	.word	0x0802a5b4
 8014120:	0802a78c 	.word	0x0802a78c
 8014124:	0802a60c 	.word	0x0802a60c
 8014128:	0802a7ac 	.word	0x0802a7ac

0801412c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b088      	sub	sp, #32
 8014130:	af00      	add	r7, sp, #0
 8014132:	60f8      	str	r0, [r7, #12]
 8014134:	60b9      	str	r1, [r7, #8]
 8014136:	4613      	mov	r3, r2
 8014138:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801413a:	2300      	movs	r3, #0
 801413c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d109      	bne.n	8014158 <netconn_recv_data+0x2c>
 8014144:	4b5e      	ldr	r3, [pc, #376]	; (80142c0 <netconn_recv_data+0x194>)
 8014146:	f44f 7212 	mov.w	r2, #584	; 0x248
 801414a:	495e      	ldr	r1, [pc, #376]	; (80142c4 <netconn_recv_data+0x198>)
 801414c:	485e      	ldr	r0, [pc, #376]	; (80142c8 <netconn_recv_data+0x19c>)
 801414e:	f010 fe37 	bl	8024dc0 <iprintf>
 8014152:	f06f 030f 	mvn.w	r3, #15
 8014156:	e0ae      	b.n	80142b6 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 8014158:	68bb      	ldr	r3, [r7, #8]
 801415a:	2200      	movs	r2, #0
 801415c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801415e:	68fb      	ldr	r3, [r7, #12]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d109      	bne.n	8014178 <netconn_recv_data+0x4c>
 8014164:	4b56      	ldr	r3, [pc, #344]	; (80142c0 <netconn_recv_data+0x194>)
 8014166:	f240 224a 	movw	r2, #586	; 0x24a
 801416a:	4958      	ldr	r1, [pc, #352]	; (80142cc <netconn_recv_data+0x1a0>)
 801416c:	4856      	ldr	r0, [pc, #344]	; (80142c8 <netconn_recv_data+0x19c>)
 801416e:	f010 fe27 	bl	8024dc0 <iprintf>
 8014172:	f06f 030f 	mvn.w	r3, #15
 8014176:	e09e      	b.n	80142b6 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	3310      	adds	r3, #16
 801417c:	4618      	mov	r0, r3
 801417e:	f00e fc80 	bl	8022a82 <sys_mbox_valid>
 8014182:	4603      	mov	r3, r0
 8014184:	2b00      	cmp	r3, #0
 8014186:	d10e      	bne.n	80141a6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8014188:	68f8      	ldr	r0, [r7, #12]
 801418a:	f000 fb14 	bl	80147b6 <netconn_err>
 801418e:	4603      	mov	r3, r0
 8014190:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8014192:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d002      	beq.n	80141a0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 801419a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801419e:	e08a      	b.n	80142b6 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 80141a0:	f06f 030a 	mvn.w	r3, #10
 80141a4:	e087      	b.n	80142b6 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80141ac:	f003 0302 	and.w	r3, r3, #2
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d110      	bne.n	80141d6 <netconn_recv_data+0xaa>
 80141b4:	79fb      	ldrb	r3, [r7, #7]
 80141b6:	f003 0304 	and.w	r3, r3, #4
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d10b      	bne.n	80141d6 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80141be:	68fb      	ldr	r3, [r7, #12]
 80141c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80141c4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d104      	bne.n	80141d6 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d024      	beq.n	8014220 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	3310      	adds	r3, #16
 80141da:	f107 0218 	add.w	r2, r7, #24
 80141de:	4611      	mov	r1, r2
 80141e0:	4618      	mov	r0, r3
 80141e2:	f00e fc32 	bl	8022a4a <sys_arch_mbox_tryfetch>
 80141e6:	4603      	mov	r3, r0
 80141e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80141ec:	d129      	bne.n	8014242 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80141ee:	68f8      	ldr	r0, [r7, #12]
 80141f0:	f000 fae1 	bl	80147b6 <netconn_err>
 80141f4:	4603      	mov	r3, r0
 80141f6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80141f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d002      	beq.n	8014206 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 8014200:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014204:	e057      	b.n	80142b6 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	f893 3020 	ldrb.w	r3, [r3, #32]
 801420c:	f003 0301 	and.w	r3, r3, #1
 8014210:	2b00      	cmp	r3, #0
 8014212:	d002      	beq.n	801421a <netconn_recv_data+0xee>
        return ERR_CONN;
 8014214:	f06f 030a 	mvn.w	r3, #10
 8014218:	e04d      	b.n	80142b6 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 801421a:	f06f 0306 	mvn.w	r3, #6
 801421e:	e04a      	b.n	80142b6 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8014220:	68fb      	ldr	r3, [r7, #12]
 8014222:	f103 0010 	add.w	r0, r3, #16
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	69da      	ldr	r2, [r3, #28]
 801422a:	f107 0318 	add.w	r3, r7, #24
 801422e:	4619      	mov	r1, r3
 8014230:	f00e fbcc 	bl	80229cc <sys_arch_mbox_fetch>
 8014234:	4603      	mov	r3, r0
 8014236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801423a:	d102      	bne.n	8014242 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 801423c:	f06f 0302 	mvn.w	r3, #2
 8014240:	e039      	b.n	80142b6 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	781b      	ldrb	r3, [r3, #0]
 8014246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801424a:	2b10      	cmp	r3, #16
 801424c:	d117      	bne.n	801427e <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801424e:	69bb      	ldr	r3, [r7, #24]
 8014250:	f107 0217 	add.w	r2, r7, #23
 8014254:	4611      	mov	r1, r2
 8014256:	4618      	mov	r0, r3
 8014258:	f000 fafe 	bl	8014858 <lwip_netconn_is_err_msg>
 801425c:	4603      	mov	r3, r0
 801425e:	2b00      	cmp	r3, #0
 8014260:	d009      	beq.n	8014276 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8014262:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014266:	f113 0f0f 	cmn.w	r3, #15
 801426a:	d101      	bne.n	8014270 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 801426c:	2300      	movs	r3, #0
 801426e:	e022      	b.n	80142b6 <netconn_recv_data+0x18a>
      }
      return err;
 8014270:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014274:	e01f      	b.n	80142b6 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8014276:	69bb      	ldr	r3, [r7, #24]
 8014278:	891b      	ldrh	r3, [r3, #8]
 801427a:	83fb      	strh	r3, [r7, #30]
 801427c:	e00d      	b.n	801429a <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801427e:	69bb      	ldr	r3, [r7, #24]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d106      	bne.n	8014292 <netconn_recv_data+0x166>
 8014284:	4b0e      	ldr	r3, [pc, #56]	; (80142c0 <netconn_recv_data+0x194>)
 8014286:	f240 2291 	movw	r2, #657	; 0x291
 801428a:	4911      	ldr	r1, [pc, #68]	; (80142d0 <netconn_recv_data+0x1a4>)
 801428c:	480e      	ldr	r0, [pc, #56]	; (80142c8 <netconn_recv_data+0x19c>)
 801428e:	f010 fd97 	bl	8024dc0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8014292:	69bb      	ldr	r3, [r7, #24]
 8014294:	681b      	ldr	r3, [r3, #0]
 8014296:	891b      	ldrh	r3, [r3, #8]
 8014298:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d005      	beq.n	80142ae <netconn_recv_data+0x182>
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142a6:	8bfa      	ldrh	r2, [r7, #30]
 80142a8:	2101      	movs	r1, #1
 80142aa:	68f8      	ldr	r0, [r7, #12]
 80142ac:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80142ae:	69ba      	ldr	r2, [r7, #24]
 80142b0:	68bb      	ldr	r3, [r7, #8]
 80142b2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80142b4:	2300      	movs	r3, #0
}
 80142b6:	4618      	mov	r0, r3
 80142b8:	3720      	adds	r7, #32
 80142ba:	46bd      	mov	sp, r7
 80142bc:	bd80      	pop	{r7, pc}
 80142be:	bf00      	nop
 80142c0:	0802a5b4 	.word	0x0802a5b4
 80142c4:	0802a7cc 	.word	0x0802a7cc
 80142c8:	0802a60c 	.word	0x0802a60c
 80142cc:	0802a7ec 	.word	0x0802a7ec
 80142d0:	0802a808 	.word	0x0802a808

080142d4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80142d4:	b580      	push	{r7, lr}
 80142d6:	b084      	sub	sp, #16
 80142d8:	af00      	add	r7, sp, #0
 80142da:	60f8      	str	r0, [r7, #12]
 80142dc:	60b9      	str	r1, [r7, #8]
 80142de:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 80142e0:	68fb      	ldr	r3, [r7, #12]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	d005      	beq.n	80142f2 <netconn_tcp_recvd_msg+0x1e>
 80142e6:	68fb      	ldr	r3, [r7, #12]
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80142ee:	2b10      	cmp	r3, #16
 80142f0:	d009      	beq.n	8014306 <netconn_tcp_recvd_msg+0x32>
 80142f2:	4b0c      	ldr	r3, [pc, #48]	; (8014324 <netconn_tcp_recvd_msg+0x50>)
 80142f4:	f240 22a7 	movw	r2, #679	; 0x2a7
 80142f8:	490b      	ldr	r1, [pc, #44]	; (8014328 <netconn_tcp_recvd_msg+0x54>)
 80142fa:	480c      	ldr	r0, [pc, #48]	; (801432c <netconn_tcp_recvd_msg+0x58>)
 80142fc:	f010 fd60 	bl	8024dc0 <iprintf>
 8014300:	f06f 030f 	mvn.w	r3, #15
 8014304:	e00a      	b.n	801431c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	68fa      	ldr	r2, [r7, #12]
 801430a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	68ba      	ldr	r2, [r7, #8]
 8014310:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8014312:	6879      	ldr	r1, [r7, #4]
 8014314:	4806      	ldr	r0, [pc, #24]	; (8014330 <netconn_tcp_recvd_msg+0x5c>)
 8014316:	f7ff fcd5 	bl	8013cc4 <netconn_apimsg>
 801431a:	4603      	mov	r3, r0
}
 801431c:	4618      	mov	r0, r3
 801431e:	3710      	adds	r7, #16
 8014320:	46bd      	mov	sp, r7
 8014322:	bd80      	pop	{r7, pc}
 8014324:	0802a5b4 	.word	0x0802a5b4
 8014328:	0802a814 	.word	0x0802a814
 801432c:	0802a60c 	.word	0x0802a60c
 8014330:	08015d0b 	.word	0x08015d0b

08014334 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8014334:	b580      	push	{r7, lr}
 8014336:	b090      	sub	sp, #64	; 0x40
 8014338:	af00      	add	r7, sp, #0
 801433a:	60f8      	str	r0, [r7, #12]
 801433c:	60b9      	str	r1, [r7, #8]
 801433e:	4613      	mov	r3, r2
 8014340:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	3310      	adds	r3, #16
 8014346:	4618      	mov	r0, r3
 8014348:	f00e fb9b 	bl	8022a82 <sys_mbox_valid>
 801434c:	4603      	mov	r3, r0
 801434e:	2b00      	cmp	r3, #0
 8014350:	d102      	bne.n	8014358 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8014352:	f06f 030a 	mvn.w	r3, #10
 8014356:	e072      	b.n	801443e <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801435e:	b25b      	sxtb	r3, r3
 8014360:	2b00      	cmp	r3, #0
 8014362:	da09      	bge.n	8014378 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	f893 3020 	ldrb.w	r3, [r3, #32]
 801436a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801436e:	b2da      	uxtb	r2, r3
 8014370:	68fb      	ldr	r3, [r7, #12]
 8014372:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8014376:	e03b      	b.n	80143f0 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8014378:	79fb      	ldrb	r3, [r7, #7]
 801437a:	461a      	mov	r2, r3
 801437c:	68b9      	ldr	r1, [r7, #8]
 801437e:	68f8      	ldr	r0, [r7, #12]
 8014380:	f7ff fed4 	bl	801412c <netconn_recv_data>
 8014384:	4603      	mov	r3, r0
 8014386:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 801438a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801438e:	2b00      	cmp	r3, #0
 8014390:	d002      	beq.n	8014398 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8014392:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014396:	e052      	b.n	801443e <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 8014398:	68bb      	ldr	r3, [r7, #8]
 801439a:	681b      	ldr	r3, [r3, #0]
 801439c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 801439e:	79fb      	ldrb	r3, [r7, #7]
 80143a0:	f003 0308 	and.w	r3, r3, #8
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d10e      	bne.n	80143c6 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80143a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d002      	beq.n	80143b4 <netconn_recv_data_tcp+0x80>
 80143ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143b0:	891b      	ldrh	r3, [r3, #8]
 80143b2:	e000      	b.n	80143b6 <netconn_recv_data_tcp+0x82>
 80143b4:	2301      	movs	r3, #1
 80143b6:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80143b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80143ba:	f107 0214 	add.w	r2, r7, #20
 80143be:	4619      	mov	r1, r3
 80143c0:	68f8      	ldr	r0, [r7, #12]
 80143c2:	f7ff ff87 	bl	80142d4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80143c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d136      	bne.n	801443a <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 80143cc:	79fb      	ldrb	r3, [r7, #7]
 80143ce:	f003 0310 	and.w	r3, r3, #16
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d00b      	beq.n	80143ee <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80143dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80143e0:	b2da      	uxtb	r2, r3
 80143e2:	68fb      	ldr	r3, [r7, #12]
 80143e4:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 80143e8:	f06f 0306 	mvn.w	r3, #6
 80143ec:	e027      	b.n	801443e <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 80143ee:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d005      	beq.n	8014404 <netconn_recv_data_tcp+0xd0>
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80143fc:	2200      	movs	r2, #0
 80143fe:	2101      	movs	r1, #1
 8014400:	68f8      	ldr	r0, [r7, #12]
 8014402:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	685b      	ldr	r3, [r3, #4]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d10f      	bne.n	801442c <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 801440c:	68f8      	ldr	r0, [r7, #12]
 801440e:	f000 f9d2 	bl	80147b6 <netconn_err>
 8014412:	4603      	mov	r3, r0
 8014414:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8014418:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801441c:	2b00      	cmp	r3, #0
 801441e:	d002      	beq.n	8014426 <netconn_recv_data_tcp+0xf2>
          return err;
 8014420:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8014424:	e00b      	b.n	801443e <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8014426:	f06f 030d 	mvn.w	r3, #13
 801442a:	e008      	b.n	801443e <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 801442c:	2101      	movs	r1, #1
 801442e:	68f8      	ldr	r0, [r7, #12]
 8014430:	f000 f984 	bl	801473c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8014434:	f06f 030e 	mvn.w	r3, #14
 8014438:	e001      	b.n	801443e <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 801443a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801443e:	4618      	mov	r0, r3
 8014440:	3740      	adds	r7, #64	; 0x40
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}
	...

08014448 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b086      	sub	sp, #24
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
 8014450:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8014452:	2300      	movs	r3, #0
 8014454:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8014456:	683b      	ldr	r3, [r7, #0]
 8014458:	2b00      	cmp	r3, #0
 801445a:	d109      	bne.n	8014470 <netconn_recv+0x28>
 801445c:	4b32      	ldr	r3, [pc, #200]	; (8014528 <netconn_recv+0xe0>)
 801445e:	f240 3263 	movw	r2, #867	; 0x363
 8014462:	4932      	ldr	r1, [pc, #200]	; (801452c <netconn_recv+0xe4>)
 8014464:	4832      	ldr	r0, [pc, #200]	; (8014530 <netconn_recv+0xe8>)
 8014466:	f010 fcab 	bl	8024dc0 <iprintf>
 801446a:	f06f 030f 	mvn.w	r3, #15
 801446e:	e056      	b.n	801451e <netconn_recv+0xd6>
  *new_buf = NULL;
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	2200      	movs	r2, #0
 8014474:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d109      	bne.n	8014490 <netconn_recv+0x48>
 801447c:	4b2a      	ldr	r3, [pc, #168]	; (8014528 <netconn_recv+0xe0>)
 801447e:	f240 3265 	movw	r2, #869	; 0x365
 8014482:	492c      	ldr	r1, [pc, #176]	; (8014534 <netconn_recv+0xec>)
 8014484:	482a      	ldr	r0, [pc, #168]	; (8014530 <netconn_recv+0xe8>)
 8014486:	f010 fc9b 	bl	8024dc0 <iprintf>
 801448a:	f06f 030f 	mvn.w	r3, #15
 801448e:	e046      	b.n	801451e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	781b      	ldrb	r3, [r3, #0]
 8014494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014498:	2b10      	cmp	r3, #16
 801449a:	d13a      	bne.n	8014512 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 801449c:	2300      	movs	r3, #0
 801449e:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80144a0:	2006      	movs	r0, #6
 80144a2:	f003 f971 	bl	8017788 <memp_malloc>
 80144a6:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80144a8:	697b      	ldr	r3, [r7, #20]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d102      	bne.n	80144b4 <netconn_recv+0x6c>
      return ERR_MEM;
 80144ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80144b2:	e034      	b.n	801451e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80144b4:	f107 030c 	add.w	r3, r7, #12
 80144b8:	2200      	movs	r2, #0
 80144ba:	4619      	mov	r1, r3
 80144bc:	6878      	ldr	r0, [r7, #4]
 80144be:	f7ff ff39 	bl	8014334 <netconn_recv_data_tcp>
 80144c2:	4603      	mov	r3, r0
 80144c4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80144c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	d006      	beq.n	80144dc <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80144ce:	6979      	ldr	r1, [r7, #20]
 80144d0:	2006      	movs	r0, #6
 80144d2:	f003 f9cf 	bl	8017874 <memp_free>
      return err;
 80144d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80144da:	e020      	b.n	801451e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d106      	bne.n	80144f0 <netconn_recv+0xa8>
 80144e2:	4b11      	ldr	r3, [pc, #68]	; (8014528 <netconn_recv+0xe0>)
 80144e4:	f240 3279 	movw	r2, #889	; 0x379
 80144e8:	4913      	ldr	r1, [pc, #76]	; (8014538 <netconn_recv+0xf0>)
 80144ea:	4811      	ldr	r0, [pc, #68]	; (8014530 <netconn_recv+0xe8>)
 80144ec:	f010 fc68 	bl	8024dc0 <iprintf>

    buf->p = p;
 80144f0:	68fa      	ldr	r2, [r7, #12]
 80144f2:	697b      	ldr	r3, [r7, #20]
 80144f4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80144f6:	68fa      	ldr	r2, [r7, #12]
 80144f8:	697b      	ldr	r3, [r7, #20]
 80144fa:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80144fc:	697b      	ldr	r3, [r7, #20]
 80144fe:	2200      	movs	r2, #0
 8014500:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8014502:	697b      	ldr	r3, [r7, #20]
 8014504:	2200      	movs	r2, #0
 8014506:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8014508:	683b      	ldr	r3, [r7, #0]
 801450a:	697a      	ldr	r2, [r7, #20]
 801450c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 801450e:	2300      	movs	r3, #0
 8014510:	e005      	b.n	801451e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8014512:	2200      	movs	r2, #0
 8014514:	6839      	ldr	r1, [r7, #0]
 8014516:	6878      	ldr	r0, [r7, #4]
 8014518:	f7ff fe08 	bl	801412c <netconn_recv_data>
 801451c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 801451e:	4618      	mov	r0, r3
 8014520:	3718      	adds	r7, #24
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}
 8014526:	bf00      	nop
 8014528:	0802a5b4 	.word	0x0802a5b4
 801452c:	0802a7cc 	.word	0x0802a7cc
 8014530:	0802a60c 	.word	0x0802a60c
 8014534:	0802a7ec 	.word	0x0802a7ec
 8014538:	0802a864 	.word	0x0802a864

0801453c <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b08c      	sub	sp, #48	; 0x30
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
 8014544:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d109      	bne.n	8014560 <netconn_send+0x24>
 801454c:	4b0e      	ldr	r3, [pc, #56]	; (8014588 <netconn_send+0x4c>)
 801454e:	f240 32b2 	movw	r2, #946	; 0x3b2
 8014552:	490e      	ldr	r1, [pc, #56]	; (801458c <netconn_send+0x50>)
 8014554:	480e      	ldr	r0, [pc, #56]	; (8014590 <netconn_send+0x54>)
 8014556:	f010 fc33 	bl	8024dc0 <iprintf>
 801455a:	f06f 030f 	mvn.w	r3, #15
 801455e:	e00e      	b.n	801457e <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8014568:	f107 030c 	add.w	r3, r7, #12
 801456c:	4619      	mov	r1, r3
 801456e:	4809      	ldr	r0, [pc, #36]	; (8014594 <netconn_send+0x58>)
 8014570:	f7ff fba8 	bl	8013cc4 <netconn_apimsg>
 8014574:	4603      	mov	r3, r0
 8014576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 801457a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 801457e:	4618      	mov	r0, r3
 8014580:	3730      	adds	r7, #48	; 0x30
 8014582:	46bd      	mov	sp, r7
 8014584:	bd80      	pop	{r7, pc}
 8014586:	bf00      	nop
 8014588:	0802a5b4 	.word	0x0802a5b4
 801458c:	0802a870 	.word	0x0802a870
 8014590:	0802a60c 	.word	0x0802a60c
 8014594:	08015c71 	.word	0x08015c71

08014598 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8014598:	b580      	push	{r7, lr}
 801459a:	b088      	sub	sp, #32
 801459c:	af02      	add	r7, sp, #8
 801459e:	60f8      	str	r0, [r7, #12]
 80145a0:	60b9      	str	r1, [r7, #8]
 80145a2:	607a      	str	r2, [r7, #4]
 80145a4:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 80145a6:	68bb      	ldr	r3, [r7, #8]
 80145a8:	613b      	str	r3, [r7, #16]
  vector.len = size;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 80145ae:	78fa      	ldrb	r2, [r7, #3]
 80145b0:	f107 0110 	add.w	r1, r7, #16
 80145b4:	6a3b      	ldr	r3, [r7, #32]
 80145b6:	9300      	str	r3, [sp, #0]
 80145b8:	4613      	mov	r3, r2
 80145ba:	2201      	movs	r2, #1
 80145bc:	68f8      	ldr	r0, [r7, #12]
 80145be:	f000 f805 	bl	80145cc <netconn_write_vectors_partly>
 80145c2:	4603      	mov	r3, r0
}
 80145c4:	4618      	mov	r0, r3
 80145c6:	3718      	adds	r7, #24
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b092      	sub	sp, #72	; 0x48
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	60f8      	str	r0, [r7, #12]
 80145d4:	60b9      	str	r1, [r7, #8]
 80145d6:	4611      	mov	r1, r2
 80145d8:	461a      	mov	r2, r3
 80145da:	460b      	mov	r3, r1
 80145dc:	80fb      	strh	r3, [r7, #6]
 80145de:	4613      	mov	r3, r2
 80145e0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d109      	bne.n	80145fc <netconn_write_vectors_partly+0x30>
 80145e8:	4b4e      	ldr	r3, [pc, #312]	; (8014724 <netconn_write_vectors_partly+0x158>)
 80145ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80145ee:	494e      	ldr	r1, [pc, #312]	; (8014728 <netconn_write_vectors_partly+0x15c>)
 80145f0:	484e      	ldr	r0, [pc, #312]	; (801472c <netconn_write_vectors_partly+0x160>)
 80145f2:	f010 fbe5 	bl	8024dc0 <iprintf>
 80145f6:	f06f 030f 	mvn.w	r3, #15
 80145fa:	e08f      	b.n	801471c <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	781b      	ldrb	r3, [r3, #0]
 8014600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014604:	2b10      	cmp	r3, #16
 8014606:	d009      	beq.n	801461c <netconn_write_vectors_partly+0x50>
 8014608:	4b46      	ldr	r3, [pc, #280]	; (8014724 <netconn_write_vectors_partly+0x158>)
 801460a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 801460e:	4948      	ldr	r1, [pc, #288]	; (8014730 <netconn_write_vectors_partly+0x164>)
 8014610:	4846      	ldr	r0, [pc, #280]	; (801472c <netconn_write_vectors_partly+0x160>)
 8014612:	f010 fbd5 	bl	8024dc0 <iprintf>
 8014616:	f06f 0305 	mvn.w	r3, #5
 801461a:	e07f      	b.n	801471c <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014622:	f003 0302 	and.w	r3, r3, #2
 8014626:	2b00      	cmp	r3, #0
 8014628:	d104      	bne.n	8014634 <netconn_write_vectors_partly+0x68>
 801462a:	797b      	ldrb	r3, [r7, #5]
 801462c:	f003 0304 	and.w	r3, r3, #4
 8014630:	2b00      	cmp	r3, #0
 8014632:	d001      	beq.n	8014638 <netconn_write_vectors_partly+0x6c>
 8014634:	2301      	movs	r3, #1
 8014636:	e000      	b.n	801463a <netconn_write_vectors_partly+0x6e>
 8014638:	2300      	movs	r3, #0
 801463a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 801463e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014642:	2b00      	cmp	r3, #0
 8014644:	d005      	beq.n	8014652 <netconn_write_vectors_partly+0x86>
 8014646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014648:	2b00      	cmp	r3, #0
 801464a:	d102      	bne.n	8014652 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 801464c:	f06f 0305 	mvn.w	r3, #5
 8014650:	e064      	b.n	801471c <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8014652:	2300      	movs	r3, #0
 8014654:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8014656:	2300      	movs	r3, #0
 8014658:	643b      	str	r3, [r7, #64]	; 0x40
 801465a:	e015      	b.n	8014688 <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 801465c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801465e:	00db      	lsls	r3, r3, #3
 8014660:	68ba      	ldr	r2, [r7, #8]
 8014662:	4413      	add	r3, r2
 8014664:	685b      	ldr	r3, [r3, #4]
 8014666:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014668:	4413      	add	r3, r2
 801466a:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 801466c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801466e:	00db      	lsls	r3, r3, #3
 8014670:	68ba      	ldr	r2, [r7, #8]
 8014672:	4413      	add	r3, r2
 8014674:	685b      	ldr	r3, [r3, #4]
 8014676:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014678:	429a      	cmp	r2, r3
 801467a:	d202      	bcs.n	8014682 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 801467c:	f06f 0305 	mvn.w	r3, #5
 8014680:	e04c      	b.n	801471c <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8014682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014684:	3301      	adds	r3, #1
 8014686:	643b      	str	r3, [r7, #64]	; 0x40
 8014688:	88fb      	ldrh	r3, [r7, #6]
 801468a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801468c:	429a      	cmp	r2, r3
 801468e:	dbe5      	blt.n	801465c <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8014690:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014692:	2b00      	cmp	r3, #0
 8014694:	d101      	bne.n	801469a <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 8014696:	2300      	movs	r3, #0
 8014698:	e040      	b.n	801471c <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 801469a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801469c:	2b00      	cmp	r3, #0
 801469e:	da0a      	bge.n	80146b6 <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 80146a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146a2:	2b00      	cmp	r3, #0
 80146a4:	d102      	bne.n	80146ac <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 80146a6:	f06f 0305 	mvn.w	r3, #5
 80146aa:	e037      	b.n	801471c <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 80146ac:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80146b0:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 80146b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146b4:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 80146be:	88fb      	ldrh	r3, [r7, #6]
 80146c0:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 80146c2:	2300      	movs	r3, #0
 80146c4:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 80146c6:	797b      	ldrb	r3, [r7, #5]
 80146c8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 80146cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80146ce:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 80146d0:	2300      	movs	r3, #0
 80146d2:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80146d4:	f107 0314 	add.w	r3, r7, #20
 80146d8:	4619      	mov	r1, r3
 80146da:	4816      	ldr	r0, [pc, #88]	; (8014734 <netconn_write_vectors_partly+0x168>)
 80146dc:	f7ff faf2 	bl	8013cc4 <netconn_apimsg>
 80146e0:	4603      	mov	r3, r0
 80146e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80146e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d114      	bne.n	8014718 <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 80146ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d002      	beq.n	80146fa <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80146f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80146f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80146f8:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80146fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d10a      	bne.n	8014718 <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8014702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8014706:	429a      	cmp	r2, r3
 8014708:	d006      	beq.n	8014718 <netconn_write_vectors_partly+0x14c>
 801470a:	4b06      	ldr	r3, [pc, #24]	; (8014724 <netconn_write_vectors_partly+0x158>)
 801470c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014710:	4909      	ldr	r1, [pc, #36]	; (8014738 <netconn_write_vectors_partly+0x16c>)
 8014712:	4806      	ldr	r0, [pc, #24]	; (801472c <netconn_write_vectors_partly+0x160>)
 8014714:	f010 fb54 	bl	8024dc0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8014718:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 801471c:	4618      	mov	r0, r3
 801471e:	3748      	adds	r7, #72	; 0x48
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}
 8014724:	0802a5b4 	.word	0x0802a5b4
 8014728:	0802a88c 	.word	0x0802a88c
 801472c:	0802a60c 	.word	0x0802a60c
 8014730:	0802a8a8 	.word	0x0802a8a8
 8014734:	08016115 	.word	0x08016115
 8014738:	0802a8cc 	.word	0x0802a8cc

0801473c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 801473c:	b580      	push	{r7, lr}
 801473e:	b08c      	sub	sp, #48	; 0x30
 8014740:	af00      	add	r7, sp, #0
 8014742:	6078      	str	r0, [r7, #4]
 8014744:	460b      	mov	r3, r1
 8014746:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d109      	bne.n	8014762 <netconn_close_shutdown+0x26>
 801474e:	4b0f      	ldr	r3, [pc, #60]	; (801478c <netconn_close_shutdown+0x50>)
 8014750:	f240 4247 	movw	r2, #1095	; 0x447
 8014754:	490e      	ldr	r1, [pc, #56]	; (8014790 <netconn_close_shutdown+0x54>)
 8014756:	480f      	ldr	r0, [pc, #60]	; (8014794 <netconn_close_shutdown+0x58>)
 8014758:	f010 fb32 	bl	8024dc0 <iprintf>
 801475c:	f06f 030f 	mvn.w	r3, #15
 8014760:	e010      	b.n	8014784 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8014766:	78fb      	ldrb	r3, [r7, #3]
 8014768:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801476a:	2329      	movs	r3, #41	; 0x29
 801476c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 801476e:	f107 030c 	add.w	r3, r7, #12
 8014772:	4619      	mov	r1, r3
 8014774:	4808      	ldr	r0, [pc, #32]	; (8014798 <netconn_close_shutdown+0x5c>)
 8014776:	f7ff faa5 	bl	8013cc4 <netconn_apimsg>
 801477a:	4603      	mov	r3, r0
 801477c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8014780:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8014784:	4618      	mov	r0, r3
 8014786:	3730      	adds	r7, #48	; 0x30
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	0802a5b4 	.word	0x0802a5b4
 8014790:	0802a8f0 	.word	0x0802a8f0
 8014794:	0802a60c 	.word	0x0802a60c
 8014798:	0801622d 	.word	0x0801622d

0801479c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 801479c:	b580      	push	{r7, lr}
 801479e:	b082      	sub	sp, #8
 80147a0:	af00      	add	r7, sp, #0
 80147a2:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 80147a4:	2103      	movs	r1, #3
 80147a6:	6878      	ldr	r0, [r7, #4]
 80147a8:	f7ff ffc8 	bl	801473c <netconn_close_shutdown>
 80147ac:	4603      	mov	r3, r0
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3708      	adds	r7, #8
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}

080147b6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 80147b6:	b580      	push	{r7, lr}
 80147b8:	b084      	sub	sp, #16
 80147ba:	af00      	add	r7, sp, #0
 80147bc:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	2b00      	cmp	r3, #0
 80147c2:	d101      	bne.n	80147c8 <netconn_err+0x12>
    return ERR_OK;
 80147c4:	2300      	movs	r3, #0
 80147c6:	e00d      	b.n	80147e4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80147c8:	f00e fa76 	bl	8022cb8 <sys_arch_protect>
 80147cc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	7a1b      	ldrb	r3, [r3, #8]
 80147d2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2200      	movs	r2, #0
 80147d8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80147da:	68f8      	ldr	r0, [r7, #12]
 80147dc:	f00e fa7a 	bl	8022cd4 <sys_arch_unprotect>
  return err;
 80147e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3710      	adds	r7, #16
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}

080147ec <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b082      	sub	sp, #8
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	4603      	mov	r3, r0
 80147f4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80147f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80147fa:	f113 0f0d 	cmn.w	r3, #13
 80147fe:	d009      	beq.n	8014814 <lwip_netconn_err_to_msg+0x28>
 8014800:	f113 0f0d 	cmn.w	r3, #13
 8014804:	dc0c      	bgt.n	8014820 <lwip_netconn_err_to_msg+0x34>
 8014806:	f113 0f0f 	cmn.w	r3, #15
 801480a:	d007      	beq.n	801481c <lwip_netconn_err_to_msg+0x30>
 801480c:	f113 0f0e 	cmn.w	r3, #14
 8014810:	d002      	beq.n	8014818 <lwip_netconn_err_to_msg+0x2c>
 8014812:	e005      	b.n	8014820 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8014814:	4b0a      	ldr	r3, [pc, #40]	; (8014840 <lwip_netconn_err_to_msg+0x54>)
 8014816:	e00e      	b.n	8014836 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8014818:	4b0a      	ldr	r3, [pc, #40]	; (8014844 <lwip_netconn_err_to_msg+0x58>)
 801481a:	e00c      	b.n	8014836 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 801481c:	4b0a      	ldr	r3, [pc, #40]	; (8014848 <lwip_netconn_err_to_msg+0x5c>)
 801481e:	e00a      	b.n	8014836 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8014820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014824:	2b00      	cmp	r3, #0
 8014826:	d005      	beq.n	8014834 <lwip_netconn_err_to_msg+0x48>
 8014828:	4b08      	ldr	r3, [pc, #32]	; (801484c <lwip_netconn_err_to_msg+0x60>)
 801482a:	227d      	movs	r2, #125	; 0x7d
 801482c:	4908      	ldr	r1, [pc, #32]	; (8014850 <lwip_netconn_err_to_msg+0x64>)
 801482e:	4809      	ldr	r0, [pc, #36]	; (8014854 <lwip_netconn_err_to_msg+0x68>)
 8014830:	f010 fac6 	bl	8024dc0 <iprintf>
      return NULL;
 8014834:	2300      	movs	r3, #0
  }
}
 8014836:	4618      	mov	r0, r3
 8014838:	3708      	adds	r7, #8
 801483a:	46bd      	mov	sp, r7
 801483c:	bd80      	pop	{r7, pc}
 801483e:	bf00      	nop
 8014840:	0802de08 	.word	0x0802de08
 8014844:	0802de09 	.word	0x0802de09
 8014848:	0802de0a 	.word	0x0802de0a
 801484c:	0802a954 	.word	0x0802a954
 8014850:	0802a988 	.word	0x0802a988
 8014854:	0802a998 	.word	0x0802a998

08014858 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b082      	sub	sp, #8
 801485c:	af00      	add	r7, sp, #0
 801485e:	6078      	str	r0, [r7, #4]
 8014860:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d105      	bne.n	8014874 <lwip_netconn_is_err_msg+0x1c>
 8014868:	4b12      	ldr	r3, [pc, #72]	; (80148b4 <lwip_netconn_is_err_msg+0x5c>)
 801486a:	2285      	movs	r2, #133	; 0x85
 801486c:	4912      	ldr	r1, [pc, #72]	; (80148b8 <lwip_netconn_is_err_msg+0x60>)
 801486e:	4813      	ldr	r0, [pc, #76]	; (80148bc <lwip_netconn_is_err_msg+0x64>)
 8014870:	f010 faa6 	bl	8024dc0 <iprintf>

  if (msg == &netconn_aborted) {
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	4a12      	ldr	r2, [pc, #72]	; (80148c0 <lwip_netconn_is_err_msg+0x68>)
 8014878:	4293      	cmp	r3, r2
 801487a:	d104      	bne.n	8014886 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 801487c:	683b      	ldr	r3, [r7, #0]
 801487e:	22f3      	movs	r2, #243	; 0xf3
 8014880:	701a      	strb	r2, [r3, #0]
    return 1;
 8014882:	2301      	movs	r3, #1
 8014884:	e012      	b.n	80148ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	4a0e      	ldr	r2, [pc, #56]	; (80148c4 <lwip_netconn_is_err_msg+0x6c>)
 801488a:	4293      	cmp	r3, r2
 801488c:	d104      	bne.n	8014898 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801488e:	683b      	ldr	r3, [r7, #0]
 8014890:	22f2      	movs	r2, #242	; 0xf2
 8014892:	701a      	strb	r2, [r3, #0]
    return 1;
 8014894:	2301      	movs	r3, #1
 8014896:	e009      	b.n	80148ac <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	4a0b      	ldr	r2, [pc, #44]	; (80148c8 <lwip_netconn_is_err_msg+0x70>)
 801489c:	4293      	cmp	r3, r2
 801489e:	d104      	bne.n	80148aa <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80148a0:	683b      	ldr	r3, [r7, #0]
 80148a2:	22f1      	movs	r2, #241	; 0xf1
 80148a4:	701a      	strb	r2, [r3, #0]
    return 1;
 80148a6:	2301      	movs	r3, #1
 80148a8:	e000      	b.n	80148ac <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80148aa:	2300      	movs	r3, #0
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	3708      	adds	r7, #8
 80148b0:	46bd      	mov	sp, r7
 80148b2:	bd80      	pop	{r7, pc}
 80148b4:	0802a954 	.word	0x0802a954
 80148b8:	0802a9c0 	.word	0x0802a9c0
 80148bc:	0802a998 	.word	0x0802a998
 80148c0:	0802de08 	.word	0x0802de08
 80148c4:	0802de09 	.word	0x0802de09
 80148c8:	0802de0a 	.word	0x0802de0a

080148cc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	b088      	sub	sp, #32
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	607a      	str	r2, [r7, #4]
 80148d8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	2b00      	cmp	r3, #0
 80148de:	d105      	bne.n	80148ec <recv_udp+0x20>
 80148e0:	4b34      	ldr	r3, [pc, #208]	; (80149b4 <recv_udp+0xe8>)
 80148e2:	22e5      	movs	r2, #229	; 0xe5
 80148e4:	4934      	ldr	r1, [pc, #208]	; (80149b8 <recv_udp+0xec>)
 80148e6:	4835      	ldr	r0, [pc, #212]	; (80149bc <recv_udp+0xf0>)
 80148e8:	f010 fa6a 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d105      	bne.n	80148fe <recv_udp+0x32>
 80148f2:	4b30      	ldr	r3, [pc, #192]	; (80149b4 <recv_udp+0xe8>)
 80148f4:	22e6      	movs	r2, #230	; 0xe6
 80148f6:	4932      	ldr	r1, [pc, #200]	; (80149c0 <recv_udp+0xf4>)
 80148f8:	4830      	ldr	r0, [pc, #192]	; (80149bc <recv_udp+0xf0>)
 80148fa:	f010 fa61 	bl	8024dc0 <iprintf>
  conn = (struct netconn *)arg;
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8014902:	69fb      	ldr	r3, [r7, #28]
 8014904:	2b00      	cmp	r3, #0
 8014906:	d103      	bne.n	8014910 <recv_udp+0x44>
    pbuf_free(p);
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f003 fe57 	bl	80185bc <pbuf_free>
    return;
 801490e:	e04d      	b.n	80149ac <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8014910:	69fb      	ldr	r3, [r7, #28]
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	68ba      	ldr	r2, [r7, #8]
 8014916:	429a      	cmp	r2, r3
 8014918:	d005      	beq.n	8014926 <recv_udp+0x5a>
 801491a:	4b26      	ldr	r3, [pc, #152]	; (80149b4 <recv_udp+0xe8>)
 801491c:	22ee      	movs	r2, #238	; 0xee
 801491e:	4929      	ldr	r1, [pc, #164]	; (80149c4 <recv_udp+0xf8>)
 8014920:	4826      	ldr	r0, [pc, #152]	; (80149bc <recv_udp+0xf0>)
 8014922:	f010 fa4d 	bl	8024dc0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8014926:	69fb      	ldr	r3, [r7, #28]
 8014928:	3310      	adds	r3, #16
 801492a:	4618      	mov	r0, r3
 801492c:	f00e f8a9 	bl	8022a82 <sys_mbox_valid>
 8014930:	4603      	mov	r3, r0
 8014932:	2b00      	cmp	r3, #0
 8014934:	d103      	bne.n	801493e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	f003 fe40 	bl	80185bc <pbuf_free>
    return;
 801493c:	e036      	b.n	80149ac <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801493e:	2006      	movs	r0, #6
 8014940:	f002 ff22 	bl	8017788 <memp_malloc>
 8014944:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8014946:	69bb      	ldr	r3, [r7, #24]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d103      	bne.n	8014954 <recv_udp+0x88>
    pbuf_free(p);
 801494c:	6878      	ldr	r0, [r7, #4]
 801494e:	f003 fe35 	bl	80185bc <pbuf_free>
    return;
 8014952:	e02b      	b.n	80149ac <recv_udp+0xe0>
  } else {
    buf->p = p;
 8014954:	69bb      	ldr	r3, [r7, #24]
 8014956:	687a      	ldr	r2, [r7, #4]
 8014958:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801495a:	69bb      	ldr	r3, [r7, #24]
 801495c:	687a      	ldr	r2, [r7, #4]
 801495e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8014960:	683b      	ldr	r3, [r7, #0]
 8014962:	2b00      	cmp	r3, #0
 8014964:	d002      	beq.n	801496c <recv_udp+0xa0>
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	e000      	b.n	801496e <recv_udp+0xa2>
 801496c:	2300      	movs	r3, #0
 801496e:	69ba      	ldr	r2, [r7, #24]
 8014970:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8014972:	69bb      	ldr	r3, [r7, #24]
 8014974:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8014976:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	891b      	ldrh	r3, [r3, #8]
 801497c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	3310      	adds	r3, #16
 8014982:	69b9      	ldr	r1, [r7, #24]
 8014984:	4618      	mov	r0, r3
 8014986:	f00e f807 	bl	8022998 <sys_mbox_trypost>
 801498a:	4603      	mov	r3, r0
 801498c:	2b00      	cmp	r3, #0
 801498e:	d003      	beq.n	8014998 <recv_udp+0xcc>
    netbuf_delete(buf);
 8014990:	69b8      	ldr	r0, [r7, #24]
 8014992:	f001 fceb 	bl	801636c <netbuf_delete>
    return;
 8014996:	e009      	b.n	80149ac <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8014998:	69fb      	ldr	r3, [r7, #28]
 801499a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801499c:	2b00      	cmp	r3, #0
 801499e:	d005      	beq.n	80149ac <recv_udp+0xe0>
 80149a0:	69fb      	ldr	r3, [r7, #28]
 80149a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149a4:	8afa      	ldrh	r2, [r7, #22]
 80149a6:	2100      	movs	r1, #0
 80149a8:	69f8      	ldr	r0, [r7, #28]
 80149aa:	4798      	blx	r3
  }
}
 80149ac:	3720      	adds	r7, #32
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}
 80149b2:	bf00      	nop
 80149b4:	0802a954 	.word	0x0802a954
 80149b8:	0802a9cc 	.word	0x0802a9cc
 80149bc:	0802a998 	.word	0x0802a998
 80149c0:	0802a9f0 	.word	0x0802a9f0
 80149c4:	0802aa10 	.word	0x0802aa10

080149c8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80149c8:	b580      	push	{r7, lr}
 80149ca:	b088      	sub	sp, #32
 80149cc:	af00      	add	r7, sp, #0
 80149ce:	60f8      	str	r0, [r7, #12]
 80149d0:	60b9      	str	r1, [r7, #8]
 80149d2:	607a      	str	r2, [r7, #4]
 80149d4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80149d6:	68bb      	ldr	r3, [r7, #8]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d106      	bne.n	80149ea <recv_tcp+0x22>
 80149dc:	4b36      	ldr	r3, [pc, #216]	; (8014ab8 <recv_tcp+0xf0>)
 80149de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80149e2:	4936      	ldr	r1, [pc, #216]	; (8014abc <recv_tcp+0xf4>)
 80149e4:	4836      	ldr	r0, [pc, #216]	; (8014ac0 <recv_tcp+0xf8>)
 80149e6:	f010 f9eb 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d106      	bne.n	80149fe <recv_tcp+0x36>
 80149f0:	4b31      	ldr	r3, [pc, #196]	; (8014ab8 <recv_tcp+0xf0>)
 80149f2:	f240 122d 	movw	r2, #301	; 0x12d
 80149f6:	4933      	ldr	r1, [pc, #204]	; (8014ac4 <recv_tcp+0xfc>)
 80149f8:	4831      	ldr	r0, [pc, #196]	; (8014ac0 <recv_tcp+0xf8>)
 80149fa:	f010 f9e1 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80149fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d006      	beq.n	8014a14 <recv_tcp+0x4c>
 8014a06:	4b2c      	ldr	r3, [pc, #176]	; (8014ab8 <recv_tcp+0xf0>)
 8014a08:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8014a0c:	492e      	ldr	r1, [pc, #184]	; (8014ac8 <recv_tcp+0x100>)
 8014a0e:	482c      	ldr	r0, [pc, #176]	; (8014ac0 <recv_tcp+0xf8>)
 8014a10:	f010 f9d6 	bl	8024dc0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8014a14:	68fb      	ldr	r3, [r7, #12]
 8014a16:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8014a18:	697b      	ldr	r3, [r7, #20]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d102      	bne.n	8014a24 <recv_tcp+0x5c>
    return ERR_VAL;
 8014a1e:	f06f 0305 	mvn.w	r3, #5
 8014a22:	e045      	b.n	8014ab0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8014a24:	697b      	ldr	r3, [r7, #20]
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	68ba      	ldr	r2, [r7, #8]
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d006      	beq.n	8014a3c <recv_tcp+0x74>
 8014a2e:	4b22      	ldr	r3, [pc, #136]	; (8014ab8 <recv_tcp+0xf0>)
 8014a30:	f240 1235 	movw	r2, #309	; 0x135
 8014a34:	4925      	ldr	r1, [pc, #148]	; (8014acc <recv_tcp+0x104>)
 8014a36:	4822      	ldr	r0, [pc, #136]	; (8014ac0 <recv_tcp+0xf8>)
 8014a38:	f010 f9c2 	bl	8024dc0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8014a3c:	697b      	ldr	r3, [r7, #20]
 8014a3e:	3310      	adds	r3, #16
 8014a40:	4618      	mov	r0, r3
 8014a42:	f00e f81e 	bl	8022a82 <sys_mbox_valid>
 8014a46:	4603      	mov	r3, r0
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d10d      	bne.n	8014a68 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d008      	beq.n	8014a64 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	891b      	ldrh	r3, [r3, #8]
 8014a56:	4619      	mov	r1, r3
 8014a58:	68b8      	ldr	r0, [r7, #8]
 8014a5a:	f004 ff05 	bl	8019868 <tcp_recved>
      pbuf_free(p);
 8014a5e:	6878      	ldr	r0, [r7, #4]
 8014a60:	f003 fdac 	bl	80185bc <pbuf_free>
    }
    return ERR_OK;
 8014a64:	2300      	movs	r3, #0
 8014a66:	e023      	b.n	8014ab0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d005      	beq.n	8014a7a <recv_tcp+0xb2>
    msg = p;
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	891b      	ldrh	r3, [r3, #8]
 8014a76:	83fb      	strh	r3, [r7, #30]
 8014a78:	e003      	b.n	8014a82 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8014a7a:	4b15      	ldr	r3, [pc, #84]	; (8014ad0 <recv_tcp+0x108>)
 8014a7c:	61bb      	str	r3, [r7, #24]
    len = 0;
 8014a7e:	2300      	movs	r3, #0
 8014a80:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8014a82:	697b      	ldr	r3, [r7, #20]
 8014a84:	3310      	adds	r3, #16
 8014a86:	69b9      	ldr	r1, [r7, #24]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f00d ff85 	bl	8022998 <sys_mbox_trypost>
 8014a8e:	4603      	mov	r3, r0
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d002      	beq.n	8014a9a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8014a94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014a98:	e00a      	b.n	8014ab0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d005      	beq.n	8014aae <recv_tcp+0xe6>
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014aa6:	8bfa      	ldrh	r2, [r7, #30]
 8014aa8:	2100      	movs	r1, #0
 8014aaa:	6978      	ldr	r0, [r7, #20]
 8014aac:	4798      	blx	r3
  }

  return ERR_OK;
 8014aae:	2300      	movs	r3, #0
}
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	3720      	adds	r7, #32
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}
 8014ab8:	0802a954 	.word	0x0802a954
 8014abc:	0802aa30 	.word	0x0802aa30
 8014ac0:	0802a998 	.word	0x0802a998
 8014ac4:	0802aa54 	.word	0x0802aa54
 8014ac8:	0802aa74 	.word	0x0802aa74
 8014acc:	0802aa8c 	.word	0x0802aa8c
 8014ad0:	0802de0a 	.word	0x0802de0a

08014ad4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	b084      	sub	sp, #16
 8014ad8:	af00      	add	r7, sp, #0
 8014ada:	6078      	str	r0, [r7, #4]
 8014adc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d106      	bne.n	8014af6 <poll_tcp+0x22>
 8014ae8:	4b2b      	ldr	r3, [pc, #172]	; (8014b98 <poll_tcp+0xc4>)
 8014aea:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8014aee:	492b      	ldr	r1, [pc, #172]	; (8014b9c <poll_tcp+0xc8>)
 8014af0:	482b      	ldr	r0, [pc, #172]	; (8014ba0 <poll_tcp+0xcc>)
 8014af2:	f010 f965 	bl	8024dc0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	785b      	ldrb	r3, [r3, #1]
 8014afa:	2b01      	cmp	r3, #1
 8014afc:	d104      	bne.n	8014b08 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8014afe:	2101      	movs	r1, #1
 8014b00:	68f8      	ldr	r0, [r7, #12]
 8014b02:	f001 f937 	bl	8015d74 <lwip_netconn_do_writemore>
 8014b06:	e016      	b.n	8014b36 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	785b      	ldrb	r3, [r3, #1]
 8014b0c:	2b04      	cmp	r3, #4
 8014b0e:	d112      	bne.n	8014b36 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d00a      	beq.n	8014b2e <poll_tcp+0x5a>
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b1c:	7a5b      	ldrb	r3, [r3, #9]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d005      	beq.n	8014b2e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b26:	7a5a      	ldrb	r2, [r3, #9]
 8014b28:	3a01      	subs	r2, #1
 8014b2a:	b2d2      	uxtb	r2, r2
 8014b2c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8014b2e:	2101      	movs	r1, #1
 8014b30:	68f8      	ldr	r0, [r7, #12]
 8014b32:	f000 fc05 	bl	8015340 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b3c:	f003 0310 	and.w	r3, r3, #16
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	d023      	beq.n	8014b8c <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8014b44:	68fb      	ldr	r3, [r7, #12]
 8014b46:	685b      	ldr	r3, [r3, #4]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d01f      	beq.n	8014b8c <poll_tcp+0xb8>
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	685b      	ldr	r3, [r3, #4]
 8014b50:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014b54:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8014b58:	d318      	bcc.n	8014b8c <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	685b      	ldr	r3, [r3, #4]
 8014b5e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8014b62:	2b04      	cmp	r3, #4
 8014b64:	d812      	bhi.n	8014b8c <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8014b66:	68fb      	ldr	r3, [r7, #12]
 8014b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014b6c:	f023 0310 	bic.w	r3, r3, #16
 8014b70:	b2da      	uxtb	r2, r3
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d005      	beq.n	8014b8c <poll_tcp+0xb8>
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b84:	2200      	movs	r2, #0
 8014b86:	2102      	movs	r1, #2
 8014b88:	68f8      	ldr	r0, [r7, #12]
 8014b8a:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8014b8c:	2300      	movs	r3, #0
}
 8014b8e:	4618      	mov	r0, r3
 8014b90:	3710      	adds	r7, #16
 8014b92:	46bd      	mov	sp, r7
 8014b94:	bd80      	pop	{r7, pc}
 8014b96:	bf00      	nop
 8014b98:	0802a954 	.word	0x0802a954
 8014b9c:	0802aaac 	.word	0x0802aaac
 8014ba0:	0802a998 	.word	0x0802a998

08014ba4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8014ba4:	b580      	push	{r7, lr}
 8014ba6:	b086      	sub	sp, #24
 8014ba8:	af00      	add	r7, sp, #0
 8014baa:	60f8      	str	r0, [r7, #12]
 8014bac:	60b9      	str	r1, [r7, #8]
 8014bae:	4613      	mov	r3, r2
 8014bb0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014bb6:	697b      	ldr	r3, [r7, #20]
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d106      	bne.n	8014bca <sent_tcp+0x26>
 8014bbc:	4b21      	ldr	r3, [pc, #132]	; (8014c44 <sent_tcp+0xa0>)
 8014bbe:	f240 1293 	movw	r2, #403	; 0x193
 8014bc2:	4921      	ldr	r1, [pc, #132]	; (8014c48 <sent_tcp+0xa4>)
 8014bc4:	4821      	ldr	r0, [pc, #132]	; (8014c4c <sent_tcp+0xa8>)
 8014bc6:	f010 f8fb 	bl	8024dc0 <iprintf>

  if (conn) {
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d034      	beq.n	8014c3a <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	785b      	ldrb	r3, [r3, #1]
 8014bd4:	2b01      	cmp	r3, #1
 8014bd6:	d104      	bne.n	8014be2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8014bd8:	2101      	movs	r1, #1
 8014bda:	6978      	ldr	r0, [r7, #20]
 8014bdc:	f001 f8ca 	bl	8015d74 <lwip_netconn_do_writemore>
 8014be0:	e007      	b.n	8014bf2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	785b      	ldrb	r3, [r3, #1]
 8014be6:	2b04      	cmp	r3, #4
 8014be8:	d103      	bne.n	8014bf2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8014bea:	2101      	movs	r1, #1
 8014bec:	6978      	ldr	r0, [r7, #20]
 8014bee:	f000 fba7 	bl	8015340 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	685b      	ldr	r3, [r3, #4]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d01f      	beq.n	8014c3a <sent_tcp+0x96>
 8014bfa:	697b      	ldr	r3, [r7, #20]
 8014bfc:	685b      	ldr	r3, [r3, #4]
 8014bfe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014c02:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8014c06:	d318      	bcc.n	8014c3a <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8014c08:	697b      	ldr	r3, [r7, #20]
 8014c0a:	685b      	ldr	r3, [r3, #4]
 8014c0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8014c10:	2b04      	cmp	r3, #4
 8014c12:	d812      	bhi.n	8014c3a <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8014c14:	697b      	ldr	r3, [r7, #20]
 8014c16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c1a:	f023 0310 	bic.w	r3, r3, #16
 8014c1e:	b2da      	uxtb	r2, r3
 8014c20:	697b      	ldr	r3, [r7, #20]
 8014c22:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d005      	beq.n	8014c3a <sent_tcp+0x96>
 8014c2e:	697b      	ldr	r3, [r7, #20]
 8014c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c32:	88fa      	ldrh	r2, [r7, #6]
 8014c34:	2102      	movs	r1, #2
 8014c36:	6978      	ldr	r0, [r7, #20]
 8014c38:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8014c3a:	2300      	movs	r3, #0
}
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	3718      	adds	r7, #24
 8014c40:	46bd      	mov	sp, r7
 8014c42:	bd80      	pop	{r7, pc}
 8014c44:	0802a954 	.word	0x0802a954
 8014c48:	0802aaac 	.word	0x0802aaac
 8014c4c:	0802a998 	.word	0x0802a998

08014c50 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8014c50:	b580      	push	{r7, lr}
 8014c52:	b088      	sub	sp, #32
 8014c54:	af00      	add	r7, sp, #0
 8014c56:	6078      	str	r0, [r7, #4]
 8014c58:	460b      	mov	r3, r1
 8014c5a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8014c60:	69fb      	ldr	r3, [r7, #28]
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d106      	bne.n	8014c74 <err_tcp+0x24>
 8014c66:	4b61      	ldr	r3, [pc, #388]	; (8014dec <err_tcp+0x19c>)
 8014c68:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8014c6c:	4960      	ldr	r1, [pc, #384]	; (8014df0 <err_tcp+0x1a0>)
 8014c6e:	4861      	ldr	r0, [pc, #388]	; (8014df4 <err_tcp+0x1a4>)
 8014c70:	f010 f8a6 	bl	8024dc0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8014c74:	f00e f820 	bl	8022cb8 <sys_arch_protect>
 8014c78:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8014c7a:	69fb      	ldr	r3, [r7, #28]
 8014c7c:	2200      	movs	r2, #0
 8014c7e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8014c80:	69fb      	ldr	r3, [r7, #28]
 8014c82:	78fa      	ldrb	r2, [r7, #3]
 8014c84:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8014c86:	69fb      	ldr	r3, [r7, #28]
 8014c88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014c8c:	f043 0301 	orr.w	r3, r3, #1
 8014c90:	b2da      	uxtb	r2, r3
 8014c92:	69fb      	ldr	r3, [r7, #28]
 8014c94:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8014c98:	69fb      	ldr	r3, [r7, #28]
 8014c9a:	785b      	ldrb	r3, [r3, #1]
 8014c9c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8014c9e:	69fb      	ldr	r3, [r7, #28]
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8014ca4:	69b8      	ldr	r0, [r7, #24]
 8014ca6:	f00e f815 	bl	8022cd4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8014caa:	69fb      	ldr	r3, [r7, #28]
 8014cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d005      	beq.n	8014cbe <err_tcp+0x6e>
 8014cb2:	69fb      	ldr	r3, [r7, #28]
 8014cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cb6:	2200      	movs	r2, #0
 8014cb8:	2104      	movs	r1, #4
 8014cba:	69f8      	ldr	r0, [r7, #28]
 8014cbc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014cbe:	69fb      	ldr	r3, [r7, #28]
 8014cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cc2:	2b00      	cmp	r3, #0
 8014cc4:	d005      	beq.n	8014cd2 <err_tcp+0x82>
 8014cc6:	69fb      	ldr	r3, [r7, #28]
 8014cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cca:	2200      	movs	r2, #0
 8014ccc:	2100      	movs	r1, #0
 8014cce:	69f8      	ldr	r0, [r7, #28]
 8014cd0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8014cd2:	69fb      	ldr	r3, [r7, #28]
 8014cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d005      	beq.n	8014ce6 <err_tcp+0x96>
 8014cda:	69fb      	ldr	r3, [r7, #28]
 8014cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014cde:	2200      	movs	r2, #0
 8014ce0:	2102      	movs	r1, #2
 8014ce2:	69f8      	ldr	r0, [r7, #28]
 8014ce4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8014ce6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014cea:	4618      	mov	r0, r3
 8014cec:	f7ff fd7e 	bl	80147ec <lwip_netconn_err_to_msg>
 8014cf0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8014cf2:	69fb      	ldr	r3, [r7, #28]
 8014cf4:	3310      	adds	r3, #16
 8014cf6:	4618      	mov	r0, r3
 8014cf8:	f00d fec3 	bl	8022a82 <sys_mbox_valid>
 8014cfc:	4603      	mov	r3, r0
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d005      	beq.n	8014d0e <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8014d02:	69fb      	ldr	r3, [r7, #28]
 8014d04:	3310      	adds	r3, #16
 8014d06:	6939      	ldr	r1, [r7, #16]
 8014d08:	4618      	mov	r0, r3
 8014d0a:	f00d fe45 	bl	8022998 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8014d0e:	69fb      	ldr	r3, [r7, #28]
 8014d10:	3314      	adds	r3, #20
 8014d12:	4618      	mov	r0, r3
 8014d14:	f00d feb5 	bl	8022a82 <sys_mbox_valid>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d005      	beq.n	8014d2a <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8014d1e:	69fb      	ldr	r3, [r7, #28]
 8014d20:	3314      	adds	r3, #20
 8014d22:	6939      	ldr	r1, [r7, #16]
 8014d24:	4618      	mov	r0, r3
 8014d26:	f00d fe37 	bl	8022998 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8014d2a:	7dfb      	ldrb	r3, [r7, #23]
 8014d2c:	2b01      	cmp	r3, #1
 8014d2e:	d005      	beq.n	8014d3c <err_tcp+0xec>
 8014d30:	7dfb      	ldrb	r3, [r7, #23]
 8014d32:	2b04      	cmp	r3, #4
 8014d34:	d002      	beq.n	8014d3c <err_tcp+0xec>
 8014d36:	7dfb      	ldrb	r3, [r7, #23]
 8014d38:	2b03      	cmp	r3, #3
 8014d3a:	d146      	bne.n	8014dca <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8014d3c:	69fb      	ldr	r3, [r7, #28]
 8014d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d42:	f003 0304 	and.w	r3, r3, #4
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	bf14      	ite	ne
 8014d4a:	2301      	movne	r3, #1
 8014d4c:	2300      	moveq	r3, #0
 8014d4e:	b2db      	uxtb	r3, r3
 8014d50:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8014d52:	69fb      	ldr	r3, [r7, #28]
 8014d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014d58:	f023 0304 	bic.w	r3, r3, #4
 8014d5c:	b2da      	uxtb	r2, r3
 8014d5e:	69fb      	ldr	r3, [r7, #28]
 8014d60:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d13b      	bne.n	8014de2 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8014d6a:	69fb      	ldr	r3, [r7, #28]
 8014d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d106      	bne.n	8014d80 <err_tcp+0x130>
 8014d72:	4b1e      	ldr	r3, [pc, #120]	; (8014dec <err_tcp+0x19c>)
 8014d74:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014d78:	491f      	ldr	r1, [pc, #124]	; (8014df8 <err_tcp+0x1a8>)
 8014d7a:	481e      	ldr	r0, [pc, #120]	; (8014df4 <err_tcp+0x1a4>)
 8014d7c:	f010 f820 	bl	8024dc0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8014d80:	7dfb      	ldrb	r3, [r7, #23]
 8014d82:	2b04      	cmp	r3, #4
 8014d84:	d104      	bne.n	8014d90 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8014d86:	69fb      	ldr	r3, [r7, #28]
 8014d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	711a      	strb	r2, [r3, #4]
 8014d8e:	e003      	b.n	8014d98 <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8014d90:	69fb      	ldr	r3, [r7, #28]
 8014d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d94:	78fa      	ldrb	r2, [r7, #3]
 8014d96:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8014d98:	69fb      	ldr	r3, [r7, #28]
 8014d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	330c      	adds	r3, #12
 8014da0:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8014da2:	68b8      	ldr	r0, [r7, #8]
 8014da4:	f00d fefe 	bl	8022ba4 <sys_sem_valid>
 8014da8:	4603      	mov	r3, r0
 8014daa:	2b00      	cmp	r3, #0
 8014dac:	d106      	bne.n	8014dbc <err_tcp+0x16c>
 8014dae:	4b0f      	ldr	r3, [pc, #60]	; (8014dec <err_tcp+0x19c>)
 8014db0:	f240 12ef 	movw	r2, #495	; 0x1ef
 8014db4:	4911      	ldr	r1, [pc, #68]	; (8014dfc <err_tcp+0x1ac>)
 8014db6:	480f      	ldr	r0, [pc, #60]	; (8014df4 <err_tcp+0x1a4>)
 8014db8:	f010 f802 	bl	8024dc0 <iprintf>
      conn->current_msg = NULL;
 8014dbc:	69fb      	ldr	r3, [r7, #28]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8014dc2:	68b8      	ldr	r0, [r7, #8]
 8014dc4:	f00d fed4 	bl	8022b70 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8014dc8:	e00b      	b.n	8014de2 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8014dca:	69fb      	ldr	r3, [r7, #28]
 8014dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d008      	beq.n	8014de4 <err_tcp+0x194>
 8014dd2:	4b06      	ldr	r3, [pc, #24]	; (8014dec <err_tcp+0x19c>)
 8014dd4:	f240 12f7 	movw	r2, #503	; 0x1f7
 8014dd8:	4909      	ldr	r1, [pc, #36]	; (8014e00 <err_tcp+0x1b0>)
 8014dda:	4806      	ldr	r0, [pc, #24]	; (8014df4 <err_tcp+0x1a4>)
 8014ddc:	f00f fff0 	bl	8024dc0 <iprintf>
  }
}
 8014de0:	e000      	b.n	8014de4 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 8014de2:	bf00      	nop
}
 8014de4:	bf00      	nop
 8014de6:	3720      	adds	r7, #32
 8014de8:	46bd      	mov	sp, r7
 8014dea:	bd80      	pop	{r7, pc}
 8014dec:	0802a954 	.word	0x0802a954
 8014df0:	0802aaac 	.word	0x0802aaac
 8014df4:	0802a998 	.word	0x0802a998
 8014df8:	0802aabc 	.word	0x0802aabc
 8014dfc:	0802aad8 	.word	0x0802aad8
 8014e00:	0802aaf4 	.word	0x0802aaf4

08014e04 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b084      	sub	sp, #16
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	685b      	ldr	r3, [r3, #4]
 8014e10:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8014e12:	6879      	ldr	r1, [r7, #4]
 8014e14:	68f8      	ldr	r0, [r7, #12]
 8014e16:	f005 fd49 	bl	801a8ac <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8014e1a:	490a      	ldr	r1, [pc, #40]	; (8014e44 <setup_tcp+0x40>)
 8014e1c:	68f8      	ldr	r0, [r7, #12]
 8014e1e:	f005 fd57 	bl	801a8d0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8014e22:	4909      	ldr	r1, [pc, #36]	; (8014e48 <setup_tcp+0x44>)
 8014e24:	68f8      	ldr	r0, [r7, #12]
 8014e26:	f005 fd75 	bl	801a914 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8014e2a:	2202      	movs	r2, #2
 8014e2c:	4907      	ldr	r1, [pc, #28]	; (8014e4c <setup_tcp+0x48>)
 8014e2e:	68f8      	ldr	r0, [r7, #12]
 8014e30:	f005 fdcc 	bl	801a9cc <tcp_poll>
  tcp_err(pcb, err_tcp);
 8014e34:	4906      	ldr	r1, [pc, #24]	; (8014e50 <setup_tcp+0x4c>)
 8014e36:	68f8      	ldr	r0, [r7, #12]
 8014e38:	f005 fd8e 	bl	801a958 <tcp_err>
}
 8014e3c:	bf00      	nop
 8014e3e:	3710      	adds	r7, #16
 8014e40:	46bd      	mov	sp, r7
 8014e42:	bd80      	pop	{r7, pc}
 8014e44:	080149c9 	.word	0x080149c9
 8014e48:	08014ba5 	.word	0x08014ba5
 8014e4c:	08014ad5 	.word	0x08014ad5
 8014e50:	08014c51 	.word	0x08014c51

08014e54 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8014e54:	b590      	push	{r4, r7, lr}
 8014e56:	b089      	sub	sp, #36	; 0x24
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	60f8      	str	r0, [r7, #12]
 8014e5c:	60b9      	str	r1, [r7, #8]
 8014e5e:	4613      	mov	r3, r2
 8014e60:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8014e66:	69fb      	ldr	r3, [r7, #28]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d102      	bne.n	8014e72 <accept_function+0x1e>
    return ERR_VAL;
 8014e6c:	f06f 0305 	mvn.w	r3, #5
 8014e70:	e0a1      	b.n	8014fb6 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8014e72:	69fb      	ldr	r3, [r7, #28]
 8014e74:	3314      	adds	r3, #20
 8014e76:	4618      	mov	r0, r3
 8014e78:	f00d fe03 	bl	8022a82 <sys_mbox_valid>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d102      	bne.n	8014e88 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8014e82:	f06f 0305 	mvn.w	r3, #5
 8014e86:	e096      	b.n	8014fb6 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	2b00      	cmp	r3, #0
 8014e8c:	d11b      	bne.n	8014ec6 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8014e8e:	69fb      	ldr	r3, [r7, #28]
 8014e90:	f103 0414 	add.w	r4, r3, #20
 8014e94:	f06f 000c 	mvn.w	r0, #12
 8014e98:	f7ff fca8 	bl	80147ec <lwip_netconn_err_to_msg>
 8014e9c:	4603      	mov	r3, r0
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	4620      	mov	r0, r4
 8014ea2:	f00d fd79 	bl	8022998 <sys_mbox_trypost>
 8014ea6:	4603      	mov	r3, r0
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	d109      	bne.n	8014ec0 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d005      	beq.n	8014ec0 <accept_function+0x6c>
 8014eb4:	69fb      	ldr	r3, [r7, #28]
 8014eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014eb8:	2200      	movs	r2, #0
 8014eba:	2100      	movs	r1, #0
 8014ebc:	69f8      	ldr	r0, [r7, #28]
 8014ebe:	4798      	blx	r3
    }
    return ERR_VAL;
 8014ec0:	f06f 0305 	mvn.w	r3, #5
 8014ec4:	e077      	b.n	8014fb6 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8014ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d006      	beq.n	8014edc <accept_function+0x88>
 8014ece:	4b3c      	ldr	r3, [pc, #240]	; (8014fc0 <accept_function+0x16c>)
 8014ed0:	f240 222a 	movw	r2, #554	; 0x22a
 8014ed4:	493b      	ldr	r1, [pc, #236]	; (8014fc4 <accept_function+0x170>)
 8014ed6:	483c      	ldr	r0, [pc, #240]	; (8014fc8 <accept_function+0x174>)
 8014ed8:	f00f ff72 	bl	8024dc0 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8014edc:	69fb      	ldr	r3, [r7, #28]
 8014ede:	781a      	ldrb	r2, [r3, #0]
 8014ee0:	69fb      	ldr	r3, [r7, #28]
 8014ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ee4:	4619      	mov	r1, r3
 8014ee6:	4610      	mov	r0, r2
 8014ee8:	f000 f8f0 	bl	80150cc <netconn_alloc>
 8014eec:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8014eee:	69bb      	ldr	r3, [r7, #24]
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d11b      	bne.n	8014f2c <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8014ef4:	69fb      	ldr	r3, [r7, #28]
 8014ef6:	f103 0414 	add.w	r4, r3, #20
 8014efa:	f06f 000c 	mvn.w	r0, #12
 8014efe:	f7ff fc75 	bl	80147ec <lwip_netconn_err_to_msg>
 8014f02:	4603      	mov	r3, r0
 8014f04:	4619      	mov	r1, r3
 8014f06:	4620      	mov	r0, r4
 8014f08:	f00d fd46 	bl	8022998 <sys_mbox_trypost>
 8014f0c:	4603      	mov	r3, r0
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	d109      	bne.n	8014f26 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014f12:	69fb      	ldr	r3, [r7, #28]
 8014f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d005      	beq.n	8014f26 <accept_function+0xd2>
 8014f1a:	69fb      	ldr	r3, [r7, #28]
 8014f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f1e:	2200      	movs	r2, #0
 8014f20:	2100      	movs	r1, #0
 8014f22:	69f8      	ldr	r0, [r7, #28]
 8014f24:	4798      	blx	r3
    }
    return ERR_MEM;
 8014f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f2a:	e044      	b.n	8014fb6 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8014f2c:	69bb      	ldr	r3, [r7, #24]
 8014f2e:	68ba      	ldr	r2, [r7, #8]
 8014f30:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8014f32:	69b8      	ldr	r0, [r7, #24]
 8014f34:	f7ff ff66 	bl	8014e04 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8014f38:	69fb      	ldr	r3, [r7, #28]
 8014f3a:	3314      	adds	r3, #20
 8014f3c:	69b9      	ldr	r1, [r7, #24]
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f00d fd2a 	bl	8022998 <sys_mbox_trypost>
 8014f44:	4603      	mov	r3, r0
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d02a      	beq.n	8014fa0 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8014f4a:	69bb      	ldr	r3, [r7, #24]
 8014f4c:	685b      	ldr	r3, [r3, #4]
 8014f4e:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8014f50:	2100      	movs	r1, #0
 8014f52:	6978      	ldr	r0, [r7, #20]
 8014f54:	f005 fcaa 	bl	801a8ac <tcp_arg>
    tcp_recv(pcb, NULL);
 8014f58:	2100      	movs	r1, #0
 8014f5a:	6978      	ldr	r0, [r7, #20]
 8014f5c:	f005 fcb8 	bl	801a8d0 <tcp_recv>
    tcp_sent(pcb, NULL);
 8014f60:	2100      	movs	r1, #0
 8014f62:	6978      	ldr	r0, [r7, #20]
 8014f64:	f005 fcd6 	bl	801a914 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8014f68:	2200      	movs	r2, #0
 8014f6a:	2100      	movs	r1, #0
 8014f6c:	6978      	ldr	r0, [r7, #20]
 8014f6e:	f005 fd2d 	bl	801a9cc <tcp_poll>
    tcp_err(pcb, NULL);
 8014f72:	2100      	movs	r1, #0
 8014f74:	6978      	ldr	r0, [r7, #20]
 8014f76:	f005 fcef 	bl	801a958 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8014f7a:	69bb      	ldr	r3, [r7, #24]
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8014f80:	69bb      	ldr	r3, [r7, #24]
 8014f82:	3310      	adds	r3, #16
 8014f84:	4618      	mov	r0, r3
 8014f86:	f00d fcf5 	bl	8022974 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8014f8a:	69bb      	ldr	r3, [r7, #24]
 8014f8c:	3310      	adds	r3, #16
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f00d fd88 	bl	8022aa4 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8014f94:	69b8      	ldr	r0, [r7, #24]
 8014f96:	f000 f90b 	bl	80151b0 <netconn_free>
    return ERR_MEM;
 8014f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014f9e:	e00a      	b.n	8014fb6 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8014fa0:	69fb      	ldr	r3, [r7, #28]
 8014fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d005      	beq.n	8014fb4 <accept_function+0x160>
 8014fa8:	69fb      	ldr	r3, [r7, #28]
 8014faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014fac:	2200      	movs	r2, #0
 8014fae:	2100      	movs	r1, #0
 8014fb0:	69f8      	ldr	r0, [r7, #28]
 8014fb2:	4798      	blx	r3
  }

  return ERR_OK;
 8014fb4:	2300      	movs	r3, #0
}
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	3724      	adds	r7, #36	; 0x24
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd90      	pop	{r4, r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	0802a954 	.word	0x0802a954
 8014fc4:	0802ab10 	.word	0x0802ab10
 8014fc8:	0802a998 	.word	0x0802a998

08014fcc <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8014fcc:	b590      	push	{r4, r7, lr}
 8014fce:	b085      	sub	sp, #20
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d006      	beq.n	8014ff0 <pcb_new+0x24>
 8014fe2:	4b2b      	ldr	r3, [pc, #172]	; (8015090 <pcb_new+0xc4>)
 8014fe4:	f240 2265 	movw	r2, #613	; 0x265
 8014fe8:	492a      	ldr	r1, [pc, #168]	; (8015094 <pcb_new+0xc8>)
 8014fea:	482b      	ldr	r0, [pc, #172]	; (8015098 <pcb_new+0xcc>)
 8014fec:	f00f fee8 	bl	8024dc0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8014ff0:	687b      	ldr	r3, [r7, #4]
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	781b      	ldrb	r3, [r3, #0]
 8014ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014ffa:	2b10      	cmp	r3, #16
 8014ffc:	d022      	beq.n	8015044 <pcb_new+0x78>
 8014ffe:	2b20      	cmp	r3, #32
 8015000:	d133      	bne.n	801506a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	681c      	ldr	r4, [r3, #0]
 8015006:	7bfb      	ldrb	r3, [r7, #15]
 8015008:	4618      	mov	r0, r3
 801500a:	f00a ffd4 	bl	801ffb6 <udp_new_ip_type>
 801500e:	4603      	mov	r3, r0
 8015010:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	2b00      	cmp	r3, #0
 801501a:	d02a      	beq.n	8015072 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	781b      	ldrb	r3, [r3, #0]
 8015022:	2b22      	cmp	r3, #34	; 0x22
 8015024:	d104      	bne.n	8015030 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	685b      	ldr	r3, [r3, #4]
 801502c:	2201      	movs	r2, #1
 801502e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	6858      	ldr	r0, [r3, #4]
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	461a      	mov	r2, r3
 801503c:	4917      	ldr	r1, [pc, #92]	; (801509c <pcb_new+0xd0>)
 801503e:	f00a ff41 	bl	801fec4 <udp_recv>
      }
      break;
 8015042:	e016      	b.n	8015072 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	681c      	ldr	r4, [r3, #0]
 8015048:	7bfb      	ldrb	r3, [r7, #15]
 801504a:	4618      	mov	r0, r3
 801504c:	f005 fc20 	bl	801a890 <tcp_new_ip_type>
 8015050:	4603      	mov	r3, r0
 8015052:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	685b      	ldr	r3, [r3, #4]
 801505a:	2b00      	cmp	r3, #0
 801505c:	d00b      	beq.n	8015076 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	4618      	mov	r0, r3
 8015064:	f7ff fece 	bl	8014e04 <setup_tcp>
      }
      break;
 8015068:	e005      	b.n	8015076 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	22fa      	movs	r2, #250	; 0xfa
 801506e:	711a      	strb	r2, [r3, #4]
      return;
 8015070:	e00a      	b.n	8015088 <pcb_new+0xbc>
      break;
 8015072:	bf00      	nop
 8015074:	e000      	b.n	8015078 <pcb_new+0xac>
      break;
 8015076:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	685b      	ldr	r3, [r3, #4]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d102      	bne.n	8015088 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	22ff      	movs	r2, #255	; 0xff
 8015086:	711a      	strb	r2, [r3, #4]
  }
}
 8015088:	3714      	adds	r7, #20
 801508a:	46bd      	mov	sp, r7
 801508c:	bd90      	pop	{r4, r7, pc}
 801508e:	bf00      	nop
 8015090:	0802a954 	.word	0x0802a954
 8015094:	0802ab38 	.word	0x0802ab38
 8015098:	0802a998 	.word	0x0802a998
 801509c:	080148cd 	.word	0x080148cd

080150a0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 80150a0:	b580      	push	{r7, lr}
 80150a2:	b084      	sub	sp, #16
 80150a4:	af00      	add	r7, sp, #0
 80150a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 80150ac:	68fb      	ldr	r3, [r7, #12]
 80150ae:	2200      	movs	r2, #0
 80150b0:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	681b      	ldr	r3, [r3, #0]
 80150b6:	685b      	ldr	r3, [r3, #4]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d102      	bne.n	80150c2 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 80150bc:	68f8      	ldr	r0, [r7, #12]
 80150be:	f7ff ff85 	bl	8014fcc <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 80150c2:	bf00      	nop
 80150c4:	3710      	adds	r7, #16
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}
	...

080150cc <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 80150cc:	b580      	push	{r7, lr}
 80150ce:	b086      	sub	sp, #24
 80150d0:	af00      	add	r7, sp, #0
 80150d2:	4603      	mov	r3, r0
 80150d4:	6039      	str	r1, [r7, #0]
 80150d6:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 80150d8:	2300      	movs	r3, #0
 80150da:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80150dc:	2007      	movs	r0, #7
 80150de:	f002 fb53 	bl	8017788 <memp_malloc>
 80150e2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80150e4:	68fb      	ldr	r3, [r7, #12]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d101      	bne.n	80150ee <netconn_alloc+0x22>
    return NULL;
 80150ea:	2300      	movs	r3, #0
 80150ec:	e056      	b.n	801519c <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	2200      	movs	r2, #0
 80150f2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80150f4:	68fb      	ldr	r3, [r7, #12]
 80150f6:	79fa      	ldrb	r2, [r7, #7]
 80150f8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80150fa:	68fb      	ldr	r3, [r7, #12]
 80150fc:	2200      	movs	r2, #0
 80150fe:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8015100:	79fb      	ldrb	r3, [r7, #7]
 8015102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015106:	2b10      	cmp	r3, #16
 8015108:	d004      	beq.n	8015114 <netconn_alloc+0x48>
 801510a:	2b20      	cmp	r3, #32
 801510c:	d105      	bne.n	801511a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 801510e:	2306      	movs	r3, #6
 8015110:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8015112:	e00a      	b.n	801512a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8015114:	2306      	movs	r3, #6
 8015116:	617b      	str	r3, [r7, #20]
      break;
 8015118:	e007      	b.n	801512a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 801511a:	4b22      	ldr	r3, [pc, #136]	; (80151a4 <netconn_alloc+0xd8>)
 801511c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8015120:	4921      	ldr	r1, [pc, #132]	; (80151a8 <netconn_alloc+0xdc>)
 8015122:	4822      	ldr	r0, [pc, #136]	; (80151ac <netconn_alloc+0xe0>)
 8015124:	f00f fe4c 	bl	8024dc0 <iprintf>
      goto free_and_return;
 8015128:	e033      	b.n	8015192 <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	3310      	adds	r3, #16
 801512e:	6979      	ldr	r1, [r7, #20]
 8015130:	4618      	mov	r0, r3
 8015132:	f00d fbfd 	bl	8022930 <sys_mbox_new>
 8015136:	4603      	mov	r3, r0
 8015138:	2b00      	cmp	r3, #0
 801513a:	d129      	bne.n	8015190 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 801513c:	68fb      	ldr	r3, [r7, #12]
 801513e:	330c      	adds	r3, #12
 8015140:	2100      	movs	r1, #0
 8015142:	4618      	mov	r0, r3
 8015144:	f00d fcbb 	bl	8022abe <sys_sem_new>
 8015148:	4603      	mov	r3, r0
 801514a:	2b00      	cmp	r3, #0
 801514c:	d005      	beq.n	801515a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	3310      	adds	r3, #16
 8015152:	4618      	mov	r0, r3
 8015154:	f00d fc0e 	bl	8022974 <sys_mbox_free>
    goto free_and_return;
 8015158:	e01b      	b.n	8015192 <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	3314      	adds	r3, #20
 801515e:	4618      	mov	r0, r3
 8015160:	f00d fca0 	bl	8022aa4 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	2200      	movs	r2, #0
 8015168:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015170:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	683a      	ldr	r2, [r7, #0]
 8015176:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	2200      	movs	r2, #0
 801517c:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	2200      	movs	r2, #0
 8015182:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8015184:	68fb      	ldr	r3, [r7, #12]
 8015186:	7cfa      	ldrb	r2, [r7, #19]
 8015188:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 801518c:	68fb      	ldr	r3, [r7, #12]
 801518e:	e005      	b.n	801519c <netconn_alloc+0xd0>
    goto free_and_return;
 8015190:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8015192:	68f9      	ldr	r1, [r7, #12]
 8015194:	2007      	movs	r0, #7
 8015196:	f002 fb6d 	bl	8017874 <memp_free>
  return NULL;
 801519a:	2300      	movs	r3, #0
}
 801519c:	4618      	mov	r0, r3
 801519e:	3718      	adds	r7, #24
 80151a0:	46bd      	mov	sp, r7
 80151a2:	bd80      	pop	{r7, pc}
 80151a4:	0802a954 	.word	0x0802a954
 80151a8:	0802ab58 	.word	0x0802ab58
 80151ac:	0802a998 	.word	0x0802a998

080151b0 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 80151b0:	b580      	push	{r7, lr}
 80151b2:	b082      	sub	sp, #8
 80151b4:	af00      	add	r7, sp, #0
 80151b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	685b      	ldr	r3, [r3, #4]
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d006      	beq.n	80151ce <netconn_free+0x1e>
 80151c0:	4b1b      	ldr	r3, [pc, #108]	; (8015230 <netconn_free+0x80>)
 80151c2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80151c6:	491b      	ldr	r1, [pc, #108]	; (8015234 <netconn_free+0x84>)
 80151c8:	481b      	ldr	r0, [pc, #108]	; (8015238 <netconn_free+0x88>)
 80151ca:	f00f fdf9 	bl	8024dc0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	3310      	adds	r3, #16
 80151d2:	4618      	mov	r0, r3
 80151d4:	f00d fc55 	bl	8022a82 <sys_mbox_valid>
 80151d8:	4603      	mov	r3, r0
 80151da:	2b00      	cmp	r3, #0
 80151dc:	d006      	beq.n	80151ec <netconn_free+0x3c>
 80151de:	4b14      	ldr	r3, [pc, #80]	; (8015230 <netconn_free+0x80>)
 80151e0:	f240 3223 	movw	r2, #803	; 0x323
 80151e4:	4915      	ldr	r1, [pc, #84]	; (801523c <netconn_free+0x8c>)
 80151e6:	4814      	ldr	r0, [pc, #80]	; (8015238 <netconn_free+0x88>)
 80151e8:	f00f fdea 	bl	8024dc0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	3314      	adds	r3, #20
 80151f0:	4618      	mov	r0, r3
 80151f2:	f00d fc46 	bl	8022a82 <sys_mbox_valid>
 80151f6:	4603      	mov	r3, r0
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d006      	beq.n	801520a <netconn_free+0x5a>
 80151fc:	4b0c      	ldr	r3, [pc, #48]	; (8015230 <netconn_free+0x80>)
 80151fe:	f240 3226 	movw	r2, #806	; 0x326
 8015202:	490f      	ldr	r1, [pc, #60]	; (8015240 <netconn_free+0x90>)
 8015204:	480c      	ldr	r0, [pc, #48]	; (8015238 <netconn_free+0x88>)
 8015206:	f00f fddb 	bl	8024dc0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	330c      	adds	r3, #12
 801520e:	4618      	mov	r0, r3
 8015210:	f00d fcbb 	bl	8022b8a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	330c      	adds	r3, #12
 8015218:	4618      	mov	r0, r3
 801521a:	f00d fcd4 	bl	8022bc6 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 801521e:	6879      	ldr	r1, [r7, #4]
 8015220:	2007      	movs	r0, #7
 8015222:	f002 fb27 	bl	8017874 <memp_free>
}
 8015226:	bf00      	nop
 8015228:	3708      	adds	r7, #8
 801522a:	46bd      	mov	sp, r7
 801522c:	bd80      	pop	{r7, pc}
 801522e:	bf00      	nop
 8015230:	0802a954 	.word	0x0802a954
 8015234:	0802ab80 	.word	0x0802ab80
 8015238:	0802a998 	.word	0x0802a998
 801523c:	0802abb0 	.word	0x0802abb0
 8015240:	0802abec 	.word	0x0802abec

08015244 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8015244:	b580      	push	{r7, lr}
 8015246:	b086      	sub	sp, #24
 8015248:	af00      	add	r7, sp, #0
 801524a:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	3310      	adds	r3, #16
 8015250:	4618      	mov	r0, r3
 8015252:	f00d fc16 	bl	8022a82 <sys_mbox_valid>
 8015256:	4603      	mov	r3, r0
 8015258:	2b00      	cmp	r3, #0
 801525a:	d02f      	beq.n	80152bc <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 801525c:	e018      	b.n	8015290 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	781b      	ldrb	r3, [r3, #0]
 8015262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015266:	2b10      	cmp	r3, #16
 8015268:	d10e      	bne.n	8015288 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801526a:	693b      	ldr	r3, [r7, #16]
 801526c:	f107 020f 	add.w	r2, r7, #15
 8015270:	4611      	mov	r1, r2
 8015272:	4618      	mov	r0, r3
 8015274:	f7ff faf0 	bl	8014858 <lwip_netconn_is_err_msg>
 8015278:	4603      	mov	r3, r0
 801527a:	2b00      	cmp	r3, #0
 801527c:	d108      	bne.n	8015290 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 801527e:	693b      	ldr	r3, [r7, #16]
 8015280:	4618      	mov	r0, r3
 8015282:	f003 f99b 	bl	80185bc <pbuf_free>
 8015286:	e003      	b.n	8015290 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8015288:	693b      	ldr	r3, [r7, #16]
 801528a:	4618      	mov	r0, r3
 801528c:	f001 f86e 	bl	801636c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	3310      	adds	r3, #16
 8015294:	f107 0210 	add.w	r2, r7, #16
 8015298:	4611      	mov	r1, r2
 801529a:	4618      	mov	r0, r3
 801529c:	f00d fbd5 	bl	8022a4a <sys_arch_mbox_tryfetch>
 80152a0:	4603      	mov	r3, r0
 80152a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152a6:	d1da      	bne.n	801525e <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	3310      	adds	r3, #16
 80152ac:	4618      	mov	r0, r3
 80152ae:	f00d fb61 	bl	8022974 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	3310      	adds	r3, #16
 80152b6:	4618      	mov	r0, r3
 80152b8:	f00d fbf4 	bl	8022aa4 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	3314      	adds	r3, #20
 80152c0:	4618      	mov	r0, r3
 80152c2:	f00d fbde 	bl	8022a82 <sys_mbox_valid>
 80152c6:	4603      	mov	r3, r0
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d034      	beq.n	8015336 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80152cc:	e01d      	b.n	801530a <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 80152ce:	693b      	ldr	r3, [r7, #16]
 80152d0:	f107 020e 	add.w	r2, r7, #14
 80152d4:	4611      	mov	r1, r2
 80152d6:	4618      	mov	r0, r3
 80152d8:	f7ff fabe 	bl	8014858 <lwip_netconn_is_err_msg>
 80152dc:	4603      	mov	r3, r0
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d113      	bne.n	801530a <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80152e2:	693b      	ldr	r3, [r7, #16]
 80152e4:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80152e6:	6978      	ldr	r0, [r7, #20]
 80152e8:	f7ff ffac 	bl	8015244 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80152ec:	697b      	ldr	r3, [r7, #20]
 80152ee:	685b      	ldr	r3, [r3, #4]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d007      	beq.n	8015304 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80152f4:	697b      	ldr	r3, [r7, #20]
 80152f6:	685b      	ldr	r3, [r3, #4]
 80152f8:	4618      	mov	r0, r3
 80152fa:	f004 f8b9 	bl	8019470 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80152fe:	697b      	ldr	r3, [r7, #20]
 8015300:	2200      	movs	r2, #0
 8015302:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8015304:	6978      	ldr	r0, [r7, #20]
 8015306:	f7ff ff53 	bl	80151b0 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	3314      	adds	r3, #20
 801530e:	f107 0210 	add.w	r2, r7, #16
 8015312:	4611      	mov	r1, r2
 8015314:	4618      	mov	r0, r3
 8015316:	f00d fb98 	bl	8022a4a <sys_arch_mbox_tryfetch>
 801531a:	4603      	mov	r3, r0
 801531c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015320:	d1d5      	bne.n	80152ce <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	3314      	adds	r3, #20
 8015326:	4618      	mov	r0, r3
 8015328:	f00d fb24 	bl	8022974 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	3314      	adds	r3, #20
 8015330:	4618      	mov	r0, r3
 8015332:	f00d fbb7 	bl	8022aa4 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8015336:	bf00      	nop
 8015338:	3718      	adds	r7, #24
 801533a:	46bd      	mov	sp, r7
 801533c:	bd80      	pop	{r7, pc}
	...

08015340 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8015340:	b580      	push	{r7, lr}
 8015342:	b086      	sub	sp, #24
 8015344:	af00      	add	r7, sp, #0
 8015346:	6078      	str	r0, [r7, #4]
 8015348:	460b      	mov	r3, r1
 801534a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 801534c:	2300      	movs	r3, #0
 801534e:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	2b00      	cmp	r3, #0
 8015354:	d106      	bne.n	8015364 <lwip_netconn_do_close_internal+0x24>
 8015356:	4b87      	ldr	r3, [pc, #540]	; (8015574 <lwip_netconn_do_close_internal+0x234>)
 8015358:	f240 32a2 	movw	r2, #930	; 0x3a2
 801535c:	4986      	ldr	r1, [pc, #536]	; (8015578 <lwip_netconn_do_close_internal+0x238>)
 801535e:	4887      	ldr	r0, [pc, #540]	; (801557c <lwip_netconn_do_close_internal+0x23c>)
 8015360:	f00f fd2e 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	781b      	ldrb	r3, [r3, #0]
 8015368:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801536c:	2b10      	cmp	r3, #16
 801536e:	d006      	beq.n	801537e <lwip_netconn_do_close_internal+0x3e>
 8015370:	4b80      	ldr	r3, [pc, #512]	; (8015574 <lwip_netconn_do_close_internal+0x234>)
 8015372:	f240 32a3 	movw	r2, #931	; 0x3a3
 8015376:	4982      	ldr	r1, [pc, #520]	; (8015580 <lwip_netconn_do_close_internal+0x240>)
 8015378:	4880      	ldr	r0, [pc, #512]	; (801557c <lwip_netconn_do_close_internal+0x23c>)
 801537a:	f00f fd21 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	785b      	ldrb	r3, [r3, #1]
 8015382:	2b04      	cmp	r3, #4
 8015384:	d006      	beq.n	8015394 <lwip_netconn_do_close_internal+0x54>
 8015386:	4b7b      	ldr	r3, [pc, #492]	; (8015574 <lwip_netconn_do_close_internal+0x234>)
 8015388:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 801538c:	497d      	ldr	r1, [pc, #500]	; (8015584 <lwip_netconn_do_close_internal+0x244>)
 801538e:	487b      	ldr	r0, [pc, #492]	; (801557c <lwip_netconn_do_close_internal+0x23c>)
 8015390:	f00f fd16 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	685b      	ldr	r3, [r3, #4]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d106      	bne.n	80153aa <lwip_netconn_do_close_internal+0x6a>
 801539c:	4b75      	ldr	r3, [pc, #468]	; (8015574 <lwip_netconn_do_close_internal+0x234>)
 801539e:	f240 32a5 	movw	r2, #933	; 0x3a5
 80153a2:	4979      	ldr	r1, [pc, #484]	; (8015588 <lwip_netconn_do_close_internal+0x248>)
 80153a4:	4875      	ldr	r0, [pc, #468]	; (801557c <lwip_netconn_do_close_internal+0x23c>)
 80153a6:	f00f fd0b 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ae:	2b00      	cmp	r3, #0
 80153b0:	d106      	bne.n	80153c0 <lwip_netconn_do_close_internal+0x80>
 80153b2:	4b70      	ldr	r3, [pc, #448]	; (8015574 <lwip_netconn_do_close_internal+0x234>)
 80153b4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80153b8:	4974      	ldr	r1, [pc, #464]	; (801558c <lwip_netconn_do_close_internal+0x24c>)
 80153ba:	4870      	ldr	r0, [pc, #448]	; (801557c <lwip_netconn_do_close_internal+0x23c>)
 80153bc:	f00f fd00 	bl	8024dc0 <iprintf>

  tpcb = conn->pcb.tcp;
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	685b      	ldr	r3, [r3, #4]
 80153c4:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153ca:	7a1b      	ldrb	r3, [r3, #8]
 80153cc:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 80153ce:	7bfb      	ldrb	r3, [r7, #15]
 80153d0:	f003 0301 	and.w	r3, r3, #1
 80153d4:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 80153d6:	7bfb      	ldrb	r3, [r7, #15]
 80153d8:	f003 0302 	and.w	r3, r3, #2
 80153dc:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80153de:	7bfb      	ldrb	r3, [r7, #15]
 80153e0:	2b03      	cmp	r3, #3
 80153e2:	d102      	bne.n	80153ea <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80153e4:	2301      	movs	r3, #1
 80153e6:	75bb      	strb	r3, [r7, #22]
 80153e8:	e01f      	b.n	801542a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80153ea:	7bbb      	ldrb	r3, [r7, #14]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d00e      	beq.n	801540e <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80153f0:	693b      	ldr	r3, [r7, #16]
 80153f2:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80153f4:	2b05      	cmp	r3, #5
 80153f6:	d007      	beq.n	8015408 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80153f8:	693b      	ldr	r3, [r7, #16]
 80153fa:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80153fc:	2b06      	cmp	r3, #6
 80153fe:	d003      	beq.n	8015408 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8015400:	693b      	ldr	r3, [r7, #16]
 8015402:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8015404:	2b08      	cmp	r3, #8
 8015406:	d102      	bne.n	801540e <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8015408:	2301      	movs	r3, #1
 801540a:	75bb      	strb	r3, [r7, #22]
 801540c:	e00d      	b.n	801542a <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 801540e:	7b7b      	ldrb	r3, [r7, #13]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d008      	beq.n	8015426 <lwip_netconn_do_close_internal+0xe6>
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	8b5b      	ldrh	r3, [r3, #26]
 8015418:	f003 0310 	and.w	r3, r3, #16
 801541c:	2b00      	cmp	r3, #0
 801541e:	d002      	beq.n	8015426 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8015420:	2301      	movs	r3, #1
 8015422:	75bb      	strb	r3, [r7, #22]
 8015424:	e001      	b.n	801542a <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8015426:	2300      	movs	r3, #0
 8015428:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 801542a:	7dbb      	ldrb	r3, [r7, #22]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d003      	beq.n	8015438 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8015430:	2100      	movs	r1, #0
 8015432:	6938      	ldr	r0, [r7, #16]
 8015434:	f005 fa3a 	bl	801a8ac <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8015438:	693b      	ldr	r3, [r7, #16]
 801543a:	7d1b      	ldrb	r3, [r3, #20]
 801543c:	2b01      	cmp	r3, #1
 801543e:	d104      	bne.n	801544a <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8015440:	2100      	movs	r1, #0
 8015442:	6938      	ldr	r0, [r7, #16]
 8015444:	f005 faaa 	bl	801a99c <tcp_accept>
 8015448:	e01d      	b.n	8015486 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 801544a:	7bbb      	ldrb	r3, [r7, #14]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d007      	beq.n	8015460 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8015450:	2100      	movs	r1, #0
 8015452:	6938      	ldr	r0, [r7, #16]
 8015454:	f005 fa3c 	bl	801a8d0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8015458:	2100      	movs	r1, #0
 801545a:	6938      	ldr	r0, [r7, #16]
 801545c:	f005 fa9e 	bl	801a99c <tcp_accept>
    }
    if (shut_tx) {
 8015460:	7b7b      	ldrb	r3, [r7, #13]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d003      	beq.n	801546e <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8015466:	2100      	movs	r1, #0
 8015468:	6938      	ldr	r0, [r7, #16]
 801546a:	f005 fa53 	bl	801a914 <tcp_sent>
    }
    if (shut_close) {
 801546e:	7dbb      	ldrb	r3, [r7, #22]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d008      	beq.n	8015486 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8015474:	2200      	movs	r2, #0
 8015476:	2100      	movs	r1, #0
 8015478:	6938      	ldr	r0, [r7, #16]
 801547a:	f005 faa7 	bl	801a9cc <tcp_poll>
      tcp_err(tpcb, NULL);
 801547e:	2100      	movs	r1, #0
 8015480:	6938      	ldr	r0, [r7, #16]
 8015482:	f005 fa69 	bl	801a958 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8015486:	7dbb      	ldrb	r3, [r7, #22]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d005      	beq.n	8015498 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 801548c:	6938      	ldr	r0, [r7, #16]
 801548e:	f003 fea9 	bl	80191e4 <tcp_close>
 8015492:	4603      	mov	r3, r0
 8015494:	75fb      	strb	r3, [r7, #23]
 8015496:	e007      	b.n	80154a8 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8015498:	7bbb      	ldrb	r3, [r7, #14]
 801549a:	7b7a      	ldrb	r2, [r7, #13]
 801549c:	4619      	mov	r1, r3
 801549e:	6938      	ldr	r0, [r7, #16]
 80154a0:	f003 fecc 	bl	801923c <tcp_shutdown>
 80154a4:	4603      	mov	r3, r0
 80154a6:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80154a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d102      	bne.n	80154b6 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80154b0:	2301      	movs	r3, #1
 80154b2:	757b      	strb	r3, [r7, #21]
 80154b4:	e016      	b.n	80154e4 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80154b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80154ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80154be:	d10f      	bne.n	80154e0 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154c4:	7a5b      	ldrb	r3, [r3, #9]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d10c      	bne.n	80154e4 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 80154ca:	2301      	movs	r3, #1
 80154cc:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 80154ce:	7dbb      	ldrb	r3, [r7, #22]
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d007      	beq.n	80154e4 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 80154d4:	6938      	ldr	r0, [r7, #16]
 80154d6:	f003 ffcb 	bl	8019470 <tcp_abort>
          err = ERR_OK;
 80154da:	2300      	movs	r3, #0
 80154dc:	75fb      	strb	r3, [r7, #23]
 80154de:	e001      	b.n	80154e4 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 80154e0:	2301      	movs	r3, #1
 80154e2:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 80154e4:	7d7b      	ldrb	r3, [r7, #21]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d052      	beq.n	8015590 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	330c      	adds	r3, #12
 80154f2:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154f8:	7dfa      	ldrb	r2, [r7, #23]
 80154fa:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80154fc:	687b      	ldr	r3, [r7, #4]
 80154fe:	2200      	movs	r2, #0
 8015500:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2200      	movs	r2, #0
 8015506:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8015508:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d129      	bne.n	8015564 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8015510:	7dbb      	ldrb	r3, [r7, #22]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d00c      	beq.n	8015530 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	2200      	movs	r2, #0
 801551a:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015520:	2b00      	cmp	r3, #0
 8015522:	d005      	beq.n	8015530 <lwip_netconn_do_close_internal+0x1f0>
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015528:	2200      	movs	r2, #0
 801552a:	2104      	movs	r1, #4
 801552c:	6878      	ldr	r0, [r7, #4]
 801552e:	4798      	blx	r3
      }
      if (shut_rx) {
 8015530:	7bbb      	ldrb	r3, [r7, #14]
 8015532:	2b00      	cmp	r3, #0
 8015534:	d009      	beq.n	801554a <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801553a:	2b00      	cmp	r3, #0
 801553c:	d005      	beq.n	801554a <lwip_netconn_do_close_internal+0x20a>
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015542:	2200      	movs	r2, #0
 8015544:	2100      	movs	r1, #0
 8015546:	6878      	ldr	r0, [r7, #4]
 8015548:	4798      	blx	r3
      }
      if (shut_tx) {
 801554a:	7b7b      	ldrb	r3, [r7, #13]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d009      	beq.n	8015564 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015554:	2b00      	cmp	r3, #0
 8015556:	d005      	beq.n	8015564 <lwip_netconn_do_close_internal+0x224>
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801555c:	2200      	movs	r2, #0
 801555e:	2102      	movs	r1, #2
 8015560:	6878      	ldr	r0, [r7, #4]
 8015562:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8015564:	78fb      	ldrb	r3, [r7, #3]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d002      	beq.n	8015570 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 801556a:	68b8      	ldr	r0, [r7, #8]
 801556c:	f00d fb00 	bl	8022b70 <sys_sem_signal>
    }
    return ERR_OK;
 8015570:	2300      	movs	r3, #0
 8015572:	e03c      	b.n	80155ee <lwip_netconn_do_close_internal+0x2ae>
 8015574:	0802a954 	.word	0x0802a954
 8015578:	0802ac28 	.word	0x0802ac28
 801557c:	0802a998 	.word	0x0802a998
 8015580:	0802ac38 	.word	0x0802ac38
 8015584:	0802ac58 	.word	0x0802ac58
 8015588:	0802ac7c 	.word	0x0802ac7c
 801558c:	0802aabc 	.word	0x0802aabc
  }
  if (!close_finished) {
 8015590:	7d7b      	ldrb	r3, [r7, #21]
 8015592:	2b00      	cmp	r3, #0
 8015594:	d11e      	bne.n	80155d4 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8015596:	693b      	ldr	r3, [r7, #16]
 8015598:	7d1b      	ldrb	r3, [r3, #20]
 801559a:	2b01      	cmp	r3, #1
 801559c:	d106      	bne.n	80155ac <lwip_netconn_do_close_internal+0x26c>
 801559e:	4b16      	ldr	r3, [pc, #88]	; (80155f8 <lwip_netconn_do_close_internal+0x2b8>)
 80155a0:	f240 4241 	movw	r2, #1089	; 0x441
 80155a4:	4915      	ldr	r1, [pc, #84]	; (80155fc <lwip_netconn_do_close_internal+0x2bc>)
 80155a6:	4816      	ldr	r0, [pc, #88]	; (8015600 <lwip_netconn_do_close_internal+0x2c0>)
 80155a8:	f00f fc0a 	bl	8024dc0 <iprintf>
    if (shut_tx) {
 80155ac:	7b7b      	ldrb	r3, [r7, #13]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d003      	beq.n	80155ba <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 80155b2:	4914      	ldr	r1, [pc, #80]	; (8015604 <lwip_netconn_do_close_internal+0x2c4>)
 80155b4:	6938      	ldr	r0, [r7, #16]
 80155b6:	f005 f9ad 	bl	801a914 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80155ba:	2201      	movs	r2, #1
 80155bc:	4912      	ldr	r1, [pc, #72]	; (8015608 <lwip_netconn_do_close_internal+0x2c8>)
 80155be:	6938      	ldr	r0, [r7, #16]
 80155c0:	f005 fa04 	bl	801a9cc <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80155c4:	4911      	ldr	r1, [pc, #68]	; (801560c <lwip_netconn_do_close_internal+0x2cc>)
 80155c6:	6938      	ldr	r0, [r7, #16]
 80155c8:	f005 f9c6 	bl	801a958 <tcp_err>
    tcp_arg(tpcb, conn);
 80155cc:	6879      	ldr	r1, [r7, #4]
 80155ce:	6938      	ldr	r0, [r7, #16]
 80155d0:	f005 f96c 	bl	801a8ac <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80155d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d106      	bne.n	80155ea <lwip_netconn_do_close_internal+0x2aa>
 80155dc:	4b06      	ldr	r3, [pc, #24]	; (80155f8 <lwip_netconn_do_close_internal+0x2b8>)
 80155de:	f240 424d 	movw	r2, #1101	; 0x44d
 80155e2:	490b      	ldr	r1, [pc, #44]	; (8015610 <lwip_netconn_do_close_internal+0x2d0>)
 80155e4:	4806      	ldr	r0, [pc, #24]	; (8015600 <lwip_netconn_do_close_internal+0x2c0>)
 80155e6:	f00f fbeb 	bl	8024dc0 <iprintf>
  return err;
 80155ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3718      	adds	r7, #24
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
 80155f6:	bf00      	nop
 80155f8:	0802a954 	.word	0x0802a954
 80155fc:	0802ac90 	.word	0x0802ac90
 8015600:	0802a998 	.word	0x0802a998
 8015604:	08014ba5 	.word	0x08014ba5
 8015608:	08014ad5 	.word	0x08014ad5
 801560c:	08014c51 	.word	0x08014c51
 8015610:	0802acb4 	.word	0x0802acb4

08015614 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8015614:	b580      	push	{r7, lr}
 8015616:	b084      	sub	sp, #16
 8015618:	af00      	add	r7, sp, #0
 801561a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	785b      	ldrb	r3, [r3, #1]
 8015626:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8015628:	7afb      	ldrb	r3, [r7, #11]
 801562a:	2b00      	cmp	r3, #0
 801562c:	d00d      	beq.n	801564a <lwip_netconn_do_delconn+0x36>
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	781b      	ldrb	r3, [r3, #0]
 8015634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015638:	2b10      	cmp	r3, #16
 801563a:	d006      	beq.n	801564a <lwip_netconn_do_delconn+0x36>
 801563c:	4b61      	ldr	r3, [pc, #388]	; (80157c4 <lwip_netconn_do_delconn+0x1b0>)
 801563e:	f240 425e 	movw	r2, #1118	; 0x45e
 8015642:	4961      	ldr	r1, [pc, #388]	; (80157c8 <lwip_netconn_do_delconn+0x1b4>)
 8015644:	4861      	ldr	r0, [pc, #388]	; (80157cc <lwip_netconn_do_delconn+0x1b8>)
 8015646:	f00f fbbb 	bl	8024dc0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801564a:	7afb      	ldrb	r3, [r7, #11]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d005      	beq.n	801565c <lwip_netconn_do_delconn+0x48>
 8015650:	7afb      	ldrb	r3, [r7, #11]
 8015652:	2b02      	cmp	r3, #2
 8015654:	d002      	beq.n	801565c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8015656:	7afb      	ldrb	r3, [r7, #11]
 8015658:	2b03      	cmp	r3, #3
 801565a:	d10a      	bne.n	8015672 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 801565c:	7afb      	ldrb	r3, [r7, #11]
 801565e:	2b03      	cmp	r3, #3
 8015660:	d10b      	bne.n	801567a <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	f893 3020 	ldrb.w	r3, [r3, #32]
 801566a:	f003 0304 	and.w	r3, r3, #4
 801566e:	2b00      	cmp	r3, #0
 8015670:	d103      	bne.n	801567a <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	22fb      	movs	r2, #251	; 0xfb
 8015676:	711a      	strb	r2, [r3, #4]
 8015678:	e098      	b.n	80157ac <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 801567a:	7afb      	ldrb	r3, [r7, #11]
 801567c:	2b03      	cmp	r3, #3
 801567e:	d10e      	bne.n	801569e <lwip_netconn_do_delconn+0x8a>
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015688:	f003 0304 	and.w	r3, r3, #4
 801568c:	2b00      	cmp	r3, #0
 801568e:	d106      	bne.n	801569e <lwip_netconn_do_delconn+0x8a>
 8015690:	4b4c      	ldr	r3, [pc, #304]	; (80157c4 <lwip_netconn_do_delconn+0x1b0>)
 8015692:	f240 427a 	movw	r2, #1146	; 0x47a
 8015696:	494e      	ldr	r1, [pc, #312]	; (80157d0 <lwip_netconn_do_delconn+0x1bc>)
 8015698:	484c      	ldr	r0, [pc, #304]	; (80157cc <lwip_netconn_do_delconn+0x1b8>)
 801569a:	f00f fb91 	bl	8024dc0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	2200      	movs	r2, #0
 80156a2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	4618      	mov	r0, r3
 80156aa:	f7ff fdcb 	bl	8015244 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80156ae:	68fb      	ldr	r3, [r7, #12]
 80156b0:	681b      	ldr	r3, [r3, #0]
 80156b2:	685b      	ldr	r3, [r3, #4]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d05f      	beq.n	8015778 <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80156b8:	68fb      	ldr	r3, [r7, #12]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	781b      	ldrb	r3, [r3, #0]
 80156be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80156c2:	2b10      	cmp	r3, #16
 80156c4:	d00d      	beq.n	80156e2 <lwip_netconn_do_delconn+0xce>
 80156c6:	2b20      	cmp	r3, #32
 80156c8:	d151      	bne.n	801576e <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	685b      	ldr	r3, [r3, #4]
 80156d0:	2200      	movs	r2, #0
 80156d2:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	681b      	ldr	r3, [r3, #0]
 80156d8:	685b      	ldr	r3, [r3, #4]
 80156da:	4618      	mov	r0, r3
 80156dc:	f00a fc12 	bl	801ff04 <udp_remove>
          break;
 80156e0:	e046      	b.n	8015770 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80156e2:	68fb      	ldr	r3, [r7, #12]
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d006      	beq.n	80156fa <lwip_netconn_do_delconn+0xe6>
 80156ec:	4b35      	ldr	r3, [pc, #212]	; (80157c4 <lwip_netconn_do_delconn+0x1b0>)
 80156ee:	f240 4294 	movw	r2, #1172	; 0x494
 80156f2:	4938      	ldr	r1, [pc, #224]	; (80157d4 <lwip_netconn_do_delconn+0x1c0>)
 80156f4:	4835      	ldr	r0, [pc, #212]	; (80157cc <lwip_netconn_do_delconn+0x1b8>)
 80156f6:	f00f fb63 	bl	8024dc0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	2204      	movs	r2, #4
 8015700:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	2203      	movs	r2, #3
 8015706:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	68fa      	ldr	r2, [r7, #12]
 801570e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	2100      	movs	r1, #0
 8015716:	4618      	mov	r0, r3
 8015718:	f7ff fe12 	bl	8015340 <lwip_netconn_do_close_internal>
 801571c:	4603      	mov	r3, r0
 801571e:	2b00      	cmp	r3, #0
 8015720:	d04b      	beq.n	80157ba <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	785b      	ldrb	r3, [r3, #1]
 8015728:	2b04      	cmp	r3, #4
 801572a:	d006      	beq.n	801573a <lwip_netconn_do_delconn+0x126>
 801572c:	4b25      	ldr	r3, [pc, #148]	; (80157c4 <lwip_netconn_do_delconn+0x1b0>)
 801572e:	f240 429a 	movw	r2, #1178	; 0x49a
 8015732:	4929      	ldr	r1, [pc, #164]	; (80157d8 <lwip_netconn_do_delconn+0x1c4>)
 8015734:	4825      	ldr	r0, [pc, #148]	; (80157cc <lwip_netconn_do_delconn+0x1b8>)
 8015736:	f00f fb43 	bl	8024dc0 <iprintf>
            UNLOCK_TCPIP_CORE();
 801573a:	4828      	ldr	r0, [pc, #160]	; (80157dc <lwip_netconn_do_delconn+0x1c8>)
 801573c:	f00d fa89 	bl	8022c52 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	330c      	adds	r3, #12
 8015746:	2100      	movs	r1, #0
 8015748:	4618      	mov	r0, r3
 801574a:	f00d f9e0 	bl	8022b0e <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801574e:	4823      	ldr	r0, [pc, #140]	; (80157dc <lwip_netconn_do_delconn+0x1c8>)
 8015750:	f00d fa70 	bl	8022c34 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	785b      	ldrb	r3, [r3, #1]
 801575a:	2b00      	cmp	r3, #0
 801575c:	d02d      	beq.n	80157ba <lwip_netconn_do_delconn+0x1a6>
 801575e:	4b19      	ldr	r3, [pc, #100]	; (80157c4 <lwip_netconn_do_delconn+0x1b0>)
 8015760:	f240 429e 	movw	r2, #1182	; 0x49e
 8015764:	491c      	ldr	r1, [pc, #112]	; (80157d8 <lwip_netconn_do_delconn+0x1c4>)
 8015766:	4819      	ldr	r0, [pc, #100]	; (80157cc <lwip_netconn_do_delconn+0x1b8>)
 8015768:	f00f fb2a 	bl	8024dc0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 801576c:	e025      	b.n	80157ba <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 801576e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	2200      	movs	r2, #0
 8015776:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801577e:	2b00      	cmp	r3, #0
 8015780:	d007      	beq.n	8015792 <lwip_netconn_do_delconn+0x17e>
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015788:	68fa      	ldr	r2, [r7, #12]
 801578a:	6810      	ldr	r0, [r2, #0]
 801578c:	2200      	movs	r2, #0
 801578e:	2100      	movs	r1, #0
 8015790:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015798:	2b00      	cmp	r3, #0
 801579a:	d007      	beq.n	80157ac <lwip_netconn_do_delconn+0x198>
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	681b      	ldr	r3, [r3, #0]
 80157a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80157a2:	68fa      	ldr	r2, [r7, #12]
 80157a4:	6810      	ldr	r0, [r2, #0]
 80157a6:	2200      	movs	r2, #0
 80157a8:	2102      	movs	r1, #2
 80157aa:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	330c      	adds	r3, #12
 80157b2:	4618      	mov	r0, r3
 80157b4:	f00d f9f6 	bl	8022ba4 <sys_sem_valid>
 80157b8:	e000      	b.n	80157bc <lwip_netconn_do_delconn+0x1a8>
          return;
 80157ba:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80157bc:	3710      	adds	r7, #16
 80157be:	46bd      	mov	sp, r7
 80157c0:	bd80      	pop	{r7, pc}
 80157c2:	bf00      	nop
 80157c4:	0802a954 	.word	0x0802a954
 80157c8:	0802acc4 	.word	0x0802acc4
 80157cc:	0802a998 	.word	0x0802a998
 80157d0:	0802acd8 	.word	0x0802acd8
 80157d4:	0802acf8 	.word	0x0802acf8
 80157d8:	0802ad14 	.word	0x0802ad14
 80157dc:	20011fcc 	.word	0x20011fcc

080157e0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 80157e0:	b580      	push	{r7, lr}
 80157e2:	b084      	sub	sp, #16
 80157e4:	af00      	add	r7, sp, #0
 80157e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	685b      	ldr	r3, [r3, #4]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d025      	beq.n	8015842 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	781b      	ldrb	r3, [r3, #0]
 80157fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015800:	2b10      	cmp	r3, #16
 8015802:	d00e      	beq.n	8015822 <lwip_netconn_do_bind+0x42>
 8015804:	2b20      	cmp	r3, #32
 8015806:	d119      	bne.n	801583c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8015808:	68bb      	ldr	r3, [r7, #8]
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	6858      	ldr	r0, [r3, #4]
 801580e:	68bb      	ldr	r3, [r7, #8]
 8015810:	6899      	ldr	r1, [r3, #8]
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	899b      	ldrh	r3, [r3, #12]
 8015816:	461a      	mov	r2, r3
 8015818:	f00a fa2a 	bl	801fc70 <udp_bind>
 801581c:	4603      	mov	r3, r0
 801581e:	73fb      	strb	r3, [r7, #15]
        break;
 8015820:	e011      	b.n	8015846 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	681b      	ldr	r3, [r3, #0]
 8015826:	6858      	ldr	r0, [r3, #4]
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	6899      	ldr	r1, [r3, #8]
 801582c:	68bb      	ldr	r3, [r7, #8]
 801582e:	899b      	ldrh	r3, [r3, #12]
 8015830:	461a      	mov	r2, r3
 8015832:	f003 fe29 	bl	8019488 <tcp_bind>
 8015836:	4603      	mov	r3, r0
 8015838:	73fb      	strb	r3, [r7, #15]
        break;
 801583a:	e004      	b.n	8015846 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 801583c:	23fa      	movs	r3, #250	; 0xfa
 801583e:	73fb      	strb	r3, [r7, #15]
        break;
 8015840:	e001      	b.n	8015846 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8015842:	23fa      	movs	r3, #250	; 0xfa
 8015844:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8015846:	68bb      	ldr	r3, [r7, #8]
 8015848:	7bfa      	ldrb	r2, [r7, #15]
 801584a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801584c:	bf00      	nop
 801584e:	3710      	adds	r7, #16
 8015850:	46bd      	mov	sp, r7
 8015852:	bd80      	pop	{r7, pc}

08015854 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8015854:	b580      	push	{r7, lr}
 8015856:	b088      	sub	sp, #32
 8015858:	af00      	add	r7, sp, #0
 801585a:	60f8      	str	r0, [r7, #12]
 801585c:	60b9      	str	r1, [r7, #8]
 801585e:	4613      	mov	r3, r2
 8015860:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8015862:	2300      	movs	r3, #0
 8015864:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 801586a:	69bb      	ldr	r3, [r7, #24]
 801586c:	2b00      	cmp	r3, #0
 801586e:	d102      	bne.n	8015876 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8015870:	f06f 0305 	mvn.w	r3, #5
 8015874:	e074      	b.n	8015960 <lwip_netconn_do_connected+0x10c>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 8015876:	69bb      	ldr	r3, [r7, #24]
 8015878:	785b      	ldrb	r3, [r3, #1]
 801587a:	2b03      	cmp	r3, #3
 801587c:	d006      	beq.n	801588c <lwip_netconn_do_connected+0x38>
 801587e:	4b3a      	ldr	r3, [pc, #232]	; (8015968 <lwip_netconn_do_connected+0x114>)
 8015880:	f240 5223 	movw	r2, #1315	; 0x523
 8015884:	4939      	ldr	r1, [pc, #228]	; (801596c <lwip_netconn_do_connected+0x118>)
 8015886:	483a      	ldr	r0, [pc, #232]	; (8015970 <lwip_netconn_do_connected+0x11c>)
 8015888:	f00f fa9a 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 801588c:	69bb      	ldr	r3, [r7, #24]
 801588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015890:	2b00      	cmp	r3, #0
 8015892:	d10d      	bne.n	80158b0 <lwip_netconn_do_connected+0x5c>
 8015894:	69bb      	ldr	r3, [r7, #24]
 8015896:	f893 3020 	ldrb.w	r3, [r3, #32]
 801589a:	f003 0304 	and.w	r3, r3, #4
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d106      	bne.n	80158b0 <lwip_netconn_do_connected+0x5c>
 80158a2:	4b31      	ldr	r3, [pc, #196]	; (8015968 <lwip_netconn_do_connected+0x114>)
 80158a4:	f240 5224 	movw	r2, #1316	; 0x524
 80158a8:	4932      	ldr	r1, [pc, #200]	; (8015974 <lwip_netconn_do_connected+0x120>)
 80158aa:	4831      	ldr	r0, [pc, #196]	; (8015970 <lwip_netconn_do_connected+0x11c>)
 80158ac:	f00f fa88 	bl	8024dc0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 80158b0:	69bb      	ldr	r3, [r7, #24]
 80158b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d008      	beq.n	80158ca <lwip_netconn_do_connected+0x76>
    conn->current_msg->err = err;
 80158b8:	69bb      	ldr	r3, [r7, #24]
 80158ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158bc:	79fa      	ldrb	r2, [r7, #7]
 80158be:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80158c0:	69bb      	ldr	r3, [r7, #24]
 80158c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	330c      	adds	r3, #12
 80158c8:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 80158ca:	69bb      	ldr	r3, [r7, #24]
 80158cc:	781b      	ldrb	r3, [r3, #0]
 80158ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80158d2:	2b10      	cmp	r3, #16
 80158d4:	d106      	bne.n	80158e4 <lwip_netconn_do_connected+0x90>
 80158d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80158da:	2b00      	cmp	r3, #0
 80158dc:	d102      	bne.n	80158e4 <lwip_netconn_do_connected+0x90>
    setup_tcp(conn);
 80158de:	69b8      	ldr	r0, [r7, #24]
 80158e0:	f7ff fa90 	bl	8014e04 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 80158e4:	69bb      	ldr	r3, [r7, #24]
 80158e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80158ea:	f003 0304 	and.w	r3, r3, #4
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	bf0c      	ite	eq
 80158f2:	2301      	moveq	r3, #1
 80158f4:	2300      	movne	r3, #0
 80158f6:	b2db      	uxtb	r3, r3
 80158f8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80158fa:	69bb      	ldr	r3, [r7, #24]
 80158fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015900:	f023 0304 	bic.w	r3, r3, #4
 8015904:	b2da      	uxtb	r2, r3
 8015906:	69bb      	ldr	r3, [r7, #24]
 8015908:	f883 2020 	strb.w	r2, [r3, #32]
  LWIP_ASSERT("blocking connect state error",
 801590c:	697b      	ldr	r3, [r7, #20]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d002      	beq.n	8015918 <lwip_netconn_do_connected+0xc4>
 8015912:	69fb      	ldr	r3, [r7, #28]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d10c      	bne.n	8015932 <lwip_netconn_do_connected+0xde>
 8015918:	697b      	ldr	r3, [r7, #20]
 801591a:	2b00      	cmp	r3, #0
 801591c:	d102      	bne.n	8015924 <lwip_netconn_do_connected+0xd0>
 801591e:	69fb      	ldr	r3, [r7, #28]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d006      	beq.n	8015932 <lwip_netconn_do_connected+0xde>
 8015924:	4b10      	ldr	r3, [pc, #64]	; (8015968 <lwip_netconn_do_connected+0x114>)
 8015926:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 801592a:	4913      	ldr	r1, [pc, #76]	; (8015978 <lwip_netconn_do_connected+0x124>)
 801592c:	4810      	ldr	r0, [pc, #64]	; (8015970 <lwip_netconn_do_connected+0x11c>)
 801592e:	f00f fa47 	bl	8024dc0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 8015932:	69bb      	ldr	r3, [r7, #24]
 8015934:	2200      	movs	r2, #0
 8015936:	625a      	str	r2, [r3, #36]	; 0x24
  conn->state = NETCONN_NONE;
 8015938:	69bb      	ldr	r3, [r7, #24]
 801593a:	2200      	movs	r2, #0
 801593c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801593e:	69bb      	ldr	r3, [r7, #24]
 8015940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015942:	2b00      	cmp	r3, #0
 8015944:	d005      	beq.n	8015952 <lwip_netconn_do_connected+0xfe>
 8015946:	69bb      	ldr	r3, [r7, #24]
 8015948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801594a:	2200      	movs	r2, #0
 801594c:	2102      	movs	r1, #2
 801594e:	69b8      	ldr	r0, [r7, #24]
 8015950:	4798      	blx	r3

  if (was_blocking) {
 8015952:	697b      	ldr	r3, [r7, #20]
 8015954:	2b00      	cmp	r3, #0
 8015956:	d002      	beq.n	801595e <lwip_netconn_do_connected+0x10a>
    sys_sem_signal(op_completed_sem);
 8015958:	69f8      	ldr	r0, [r7, #28]
 801595a:	f00d f909 	bl	8022b70 <sys_sem_signal>
  }
  return ERR_OK;
 801595e:	2300      	movs	r3, #0
}
 8015960:	4618      	mov	r0, r3
 8015962:	3720      	adds	r7, #32
 8015964:	46bd      	mov	sp, r7
 8015966:	bd80      	pop	{r7, pc}
 8015968:	0802a954 	.word	0x0802a954
 801596c:	0802ad1c 	.word	0x0802ad1c
 8015970:	0802a998 	.word	0x0802a998
 8015974:	0802ad3c 	.word	0x0802ad3c
 8015978:	0802ad7c 	.word	0x0802ad7c

0801597c <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 801597c:	b580      	push	{r7, lr}
 801597e:	b086      	sub	sp, #24
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8015988:	693b      	ldr	r3, [r7, #16]
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	685b      	ldr	r3, [r3, #4]
 801598e:	2b00      	cmp	r3, #0
 8015990:	d102      	bne.n	8015998 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 8015992:	23f1      	movs	r3, #241	; 0xf1
 8015994:	75fb      	strb	r3, [r7, #23]
 8015996:	e0a0      	b.n	8015ada <lwip_netconn_do_connect+0x15e>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	781b      	ldrb	r3, [r3, #0]
 801599e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80159a2:	2b10      	cmp	r3, #16
 80159a4:	d00f      	beq.n	80159c6 <lwip_netconn_do_connect+0x4a>
 80159a6:	2b20      	cmp	r3, #32
 80159a8:	f040 808c 	bne.w	8015ac4 <lwip_netconn_do_connect+0x148>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80159ac:	693b      	ldr	r3, [r7, #16]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	6858      	ldr	r0, [r3, #4]
 80159b2:	693b      	ldr	r3, [r7, #16]
 80159b4:	6899      	ldr	r1, [r3, #8]
 80159b6:	693b      	ldr	r3, [r7, #16]
 80159b8:	899b      	ldrh	r3, [r3, #12]
 80159ba:	461a      	mov	r2, r3
 80159bc:	f00a f9ec 	bl	801fd98 <udp_connect>
 80159c0:	4603      	mov	r3, r0
 80159c2:	75fb      	strb	r3, [r7, #23]
        break;
 80159c4:	e089      	b.n	8015ada <lwip_netconn_do_connect+0x15e>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	785b      	ldrb	r3, [r3, #1]
 80159cc:	2b03      	cmp	r3, #3
 80159ce:	d102      	bne.n	80159d6 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 80159d0:	23f7      	movs	r3, #247	; 0xf7
 80159d2:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 80159d4:	e080      	b.n	8015ad8 <lwip_netconn_do_connect+0x15c>
        } else if (msg->conn->state != NETCONN_NONE) {
 80159d6:	693b      	ldr	r3, [r7, #16]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	785b      	ldrb	r3, [r3, #1]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d002      	beq.n	80159e6 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 80159e0:	23f6      	movs	r3, #246	; 0xf6
 80159e2:	75fb      	strb	r3, [r7, #23]
        break;
 80159e4:	e078      	b.n	8015ad8 <lwip_netconn_do_connect+0x15c>
          setup_tcp(msg->conn);
 80159e6:	693b      	ldr	r3, [r7, #16]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7ff fa0a 	bl	8014e04 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 80159f0:	693b      	ldr	r3, [r7, #16]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	6858      	ldr	r0, [r3, #4]
 80159f6:	693b      	ldr	r3, [r7, #16]
 80159f8:	6899      	ldr	r1, [r3, #8]
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	899a      	ldrh	r2, [r3, #12]
 80159fe:	4b3b      	ldr	r3, [pc, #236]	; (8015aec <lwip_netconn_do_connect+0x170>)
 8015a00:	f003 ffc8 	bl	8019994 <tcp_connect>
 8015a04:	4603      	mov	r3, r0
 8015a06:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8015a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d163      	bne.n	8015ad8 <lwip_netconn_do_connect+0x15c>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 8015a10:	693b      	ldr	r3, [r7, #16]
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a18:	f003 0302 	and.w	r3, r3, #2
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	bf14      	ite	ne
 8015a20:	2301      	movne	r3, #1
 8015a22:	2300      	moveq	r3, #0
 8015a24:	b2db      	uxtb	r3, r3
 8015a26:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 8015a28:	693b      	ldr	r3, [r7, #16]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	2203      	movs	r2, #3
 8015a2e:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 8015a30:	7bfb      	ldrb	r3, [r7, #15]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d00b      	beq.n	8015a4e <lwip_netconn_do_connect+0xd2>
 8015a36:	693b      	ldr	r3, [r7, #16]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015a3e:	693b      	ldr	r3, [r7, #16]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	f042 0204 	orr.w	r2, r2, #4
 8015a46:	b2d2      	uxtb	r2, r2
 8015a48:	f883 2020 	strb.w	r2, [r3, #32]
 8015a4c:	e00a      	b.n	8015a64 <lwip_netconn_do_connect+0xe8>
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	f893 2020 	ldrb.w	r2, [r3, #32]
 8015a56:	693b      	ldr	r3, [r7, #16]
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	f022 0204 	bic.w	r2, r2, #4
 8015a5e:	b2d2      	uxtb	r2, r2
 8015a60:	f883 2020 	strb.w	r2, [r3, #32]
            if (non_blocking) {
 8015a64:	7bfb      	ldrb	r3, [r7, #15]
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	d002      	beq.n	8015a70 <lwip_netconn_do_connect+0xf4>
              err = ERR_INPROGRESS;
 8015a6a:	23fb      	movs	r3, #251	; 0xfb
 8015a6c:	75fb      	strb	r3, [r7, #23]
        break;
 8015a6e:	e033      	b.n	8015ad8 <lwip_netconn_do_connect+0x15c>
              msg->conn->current_msg = msg;
 8015a70:	693b      	ldr	r3, [r7, #16]
 8015a72:	681b      	ldr	r3, [r3, #0]
 8015a74:	693a      	ldr	r2, [r7, #16]
 8015a76:	625a      	str	r2, [r3, #36]	; 0x24
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 8015a78:	693b      	ldr	r3, [r7, #16]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	785b      	ldrb	r3, [r3, #1]
 8015a7e:	2b03      	cmp	r3, #3
 8015a80:	d006      	beq.n	8015a90 <lwip_netconn_do_connect+0x114>
 8015a82:	4b1b      	ldr	r3, [pc, #108]	; (8015af0 <lwip_netconn_do_connect+0x174>)
 8015a84:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8015a88:	491a      	ldr	r1, [pc, #104]	; (8015af4 <lwip_netconn_do_connect+0x178>)
 8015a8a:	481b      	ldr	r0, [pc, #108]	; (8015af8 <lwip_netconn_do_connect+0x17c>)
 8015a8c:	f00f f998 	bl	8024dc0 <iprintf>
              UNLOCK_TCPIP_CORE();
 8015a90:	481a      	ldr	r0, [pc, #104]	; (8015afc <lwip_netconn_do_connect+0x180>)
 8015a92:	f00d f8de 	bl	8022c52 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8015a96:	693b      	ldr	r3, [r7, #16]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	330c      	adds	r3, #12
 8015a9c:	2100      	movs	r1, #0
 8015a9e:	4618      	mov	r0, r3
 8015aa0:	f00d f835 	bl	8022b0e <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8015aa4:	4815      	ldr	r0, [pc, #84]	; (8015afc <lwip_netconn_do_connect+0x180>)
 8015aa6:	f00d f8c5 	bl	8022c34 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 8015aaa:	693b      	ldr	r3, [r7, #16]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	785b      	ldrb	r3, [r3, #1]
 8015ab0:	2b03      	cmp	r3, #3
 8015ab2:	d116      	bne.n	8015ae2 <lwip_netconn_do_connect+0x166>
 8015ab4:	4b0e      	ldr	r3, [pc, #56]	; (8015af0 <lwip_netconn_do_connect+0x174>)
 8015ab6:	f240 5274 	movw	r2, #1396	; 0x574
 8015aba:	490e      	ldr	r1, [pc, #56]	; (8015af4 <lwip_netconn_do_connect+0x178>)
 8015abc:	480e      	ldr	r0, [pc, #56]	; (8015af8 <lwip_netconn_do_connect+0x17c>)
 8015abe:	f00f f97f 	bl	8024dc0 <iprintf>
              return;
 8015ac2:	e00e      	b.n	8015ae2 <lwip_netconn_do_connect+0x166>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8015ac4:	4b0a      	ldr	r3, [pc, #40]	; (8015af0 <lwip_netconn_do_connect+0x174>)
 8015ac6:	f240 527d 	movw	r2, #1405	; 0x57d
 8015aca:	490d      	ldr	r1, [pc, #52]	; (8015b00 <lwip_netconn_do_connect+0x184>)
 8015acc:	480a      	ldr	r0, [pc, #40]	; (8015af8 <lwip_netconn_do_connect+0x17c>)
 8015ace:	f00f f977 	bl	8024dc0 <iprintf>
 8015ad2:	23fa      	movs	r3, #250	; 0xfa
 8015ad4:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8015ad6:	e000      	b.n	8015ada <lwip_netconn_do_connect+0x15e>
        break;
 8015ad8:	bf00      	nop
    }
  }
  msg->err = err;
 8015ada:	693b      	ldr	r3, [r7, #16]
 8015adc:	7dfa      	ldrb	r2, [r7, #23]
 8015ade:	711a      	strb	r2, [r3, #4]
 8015ae0:	e000      	b.n	8015ae4 <lwip_netconn_do_connect+0x168>
              return;
 8015ae2:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8015ae4:	3718      	adds	r7, #24
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}
 8015aea:	bf00      	nop
 8015aec:	08015855 	.word	0x08015855
 8015af0:	0802a954 	.word	0x0802a954
 8015af4:	0802ad14 	.word	0x0802ad14
 8015af8:	0802a998 	.word	0x0802a998
 8015afc:	20011fcc 	.word	0x20011fcc
 8015b00:	0802ad9c 	.word	0x0802ad9c

08015b04 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	781b      	ldrb	r3, [r3, #0]
 8015b16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b1a:	2b20      	cmp	r3, #32
 8015b1c:	d109      	bne.n	8015b32 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 8015b1e:	68fb      	ldr	r3, [r7, #12]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	685b      	ldr	r3, [r3, #4]
 8015b24:	4618      	mov	r0, r3
 8015b26:	f00a f9a5 	bl	801fe74 <udp_disconnect>
    msg->err = ERR_OK;
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	2200      	movs	r2, #0
 8015b2e:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 8015b30:	e002      	b.n	8015b38 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	22fa      	movs	r2, #250	; 0xfa
 8015b36:	711a      	strb	r2, [r3, #4]
}
 8015b38:	bf00      	nop
 8015b3a:	3710      	adds	r7, #16
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}

08015b40 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8015b40:	b580      	push	{r7, lr}
 8015b42:	b086      	sub	sp, #24
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	681b      	ldr	r3, [r3, #0]
 8015b50:	685b      	ldr	r3, [r3, #4]
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d07f      	beq.n	8015c56 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015b56:	697b      	ldr	r3, [r7, #20]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	781b      	ldrb	r3, [r3, #0]
 8015b5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015b60:	2b10      	cmp	r3, #16
 8015b62:	d175      	bne.n	8015c50 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8015b64:	697b      	ldr	r3, [r7, #20]
 8015b66:	681b      	ldr	r3, [r3, #0]
 8015b68:	785b      	ldrb	r3, [r3, #1]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d165      	bne.n	8015c3a <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	685b      	ldr	r3, [r3, #4]
 8015b74:	7d1b      	ldrb	r3, [r3, #20]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d002      	beq.n	8015b80 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8015b7a:	23fa      	movs	r3, #250	; 0xfa
 8015b7c:	72fb      	strb	r3, [r7, #11]
 8015b7e:	e06c      	b.n	8015c5a <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8015b80:	23ff      	movs	r3, #255	; 0xff
 8015b82:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8015b84:	697b      	ldr	r3, [r7, #20]
 8015b86:	681b      	ldr	r3, [r3, #0]
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	f107 020b 	add.w	r2, r7, #11
 8015b8e:	7cf9      	ldrb	r1, [r7, #19]
 8015b90:	4618      	mov	r0, r3
 8015b92:	f003 fd45 	bl	8019620 <tcp_listen_with_backlog_and_err>
 8015b96:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d05d      	beq.n	8015c5a <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8015b9e:	697b      	ldr	r3, [r7, #20]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	3310      	adds	r3, #16
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f00c ff6c 	bl	8022a82 <sys_mbox_valid>
 8015baa:	4603      	mov	r3, r0
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d00b      	beq.n	8015bc8 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8015bb0:	697b      	ldr	r3, [r7, #20]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	3310      	adds	r3, #16
 8015bb6:	4618      	mov	r0, r3
 8015bb8:	f00c fedc 	bl	8022974 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	3310      	adds	r3, #16
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f00c ff6e 	bl	8022aa4 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8015bc8:	2300      	movs	r3, #0
 8015bca:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8015bcc:	697b      	ldr	r3, [r7, #20]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	3314      	adds	r3, #20
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f00c ff55 	bl	8022a82 <sys_mbox_valid>
 8015bd8:	4603      	mov	r3, r0
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d108      	bne.n	8015bf0 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	3314      	adds	r3, #20
 8015be4:	2106      	movs	r1, #6
 8015be6:	4618      	mov	r0, r3
 8015be8:	f00c fea2 	bl	8022930 <sys_mbox_new>
 8015bec:	4603      	mov	r3, r0
 8015bee:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8015bf0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d118      	bne.n	8015c2a <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	681b      	ldr	r3, [r3, #0]
 8015bfc:	2202      	movs	r2, #2
 8015bfe:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8015c00:	697b      	ldr	r3, [r7, #20]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	68fa      	ldr	r2, [r7, #12]
 8015c06:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	685a      	ldr	r2, [r3, #4]
 8015c0e:	697b      	ldr	r3, [r7, #20]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	4619      	mov	r1, r3
 8015c14:	4610      	mov	r0, r2
 8015c16:	f004 fe49 	bl	801a8ac <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8015c1a:	697b      	ldr	r3, [r7, #20]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	685b      	ldr	r3, [r3, #4]
 8015c20:	4912      	ldr	r1, [pc, #72]	; (8015c6c <lwip_netconn_do_listen+0x12c>)
 8015c22:	4618      	mov	r0, r3
 8015c24:	f004 feba 	bl	801a99c <tcp_accept>
 8015c28:	e017      	b.n	8015c5a <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8015c2a:	68f8      	ldr	r0, [r7, #12]
 8015c2c:	f003 fada 	bl	80191e4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8015c30:	697b      	ldr	r3, [r7, #20]
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	2200      	movs	r2, #0
 8015c36:	605a      	str	r2, [r3, #4]
 8015c38:	e00f      	b.n	8015c5a <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8015c3a:	697b      	ldr	r3, [r7, #20]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	785b      	ldrb	r3, [r3, #1]
 8015c40:	2b02      	cmp	r3, #2
 8015c42:	d102      	bne.n	8015c4a <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8015c44:	2300      	movs	r3, #0
 8015c46:	72fb      	strb	r3, [r7, #11]
 8015c48:	e007      	b.n	8015c5a <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8015c4a:	23f5      	movs	r3, #245	; 0xf5
 8015c4c:	72fb      	strb	r3, [r7, #11]
 8015c4e:	e004      	b.n	8015c5a <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8015c50:	23f0      	movs	r3, #240	; 0xf0
 8015c52:	72fb      	strb	r3, [r7, #11]
 8015c54:	e001      	b.n	8015c5a <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8015c56:	23f5      	movs	r3, #245	; 0xf5
 8015c58:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8015c5a:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8015c5e:	697b      	ldr	r3, [r7, #20]
 8015c60:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8015c62:	bf00      	nop
 8015c64:	3718      	adds	r7, #24
 8015c66:	46bd      	mov	sp, r7
 8015c68:	bd80      	pop	{r7, pc}
 8015c6a:	bf00      	nop
 8015c6c:	08014e55 	.word	0x08014e55

08015c70 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8015c70:	b580      	push	{r7, lr}
 8015c72:	b084      	sub	sp, #16
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8015c7c:	68bb      	ldr	r3, [r7, #8]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	4618      	mov	r0, r3
 8015c82:	f7fe fd98 	bl	80147b6 <netconn_err>
 8015c86:	4603      	mov	r3, r0
 8015c88:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8015c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d134      	bne.n	8015cfc <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8015c92:	68bb      	ldr	r3, [r7, #8]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d02d      	beq.n	8015cf8 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015c9c:	68bb      	ldr	r3, [r7, #8]
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	781b      	ldrb	r3, [r3, #0]
 8015ca2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015ca6:	2b20      	cmp	r3, #32
 8015ca8:	d123      	bne.n	8015cf2 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8015caa:	68bb      	ldr	r3, [r7, #8]
 8015cac:	689b      	ldr	r3, [r3, #8]
 8015cae:	689b      	ldr	r3, [r3, #8]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d10c      	bne.n	8015cce <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8015cb4:	68bb      	ldr	r3, [r7, #8]
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	685a      	ldr	r2, [r3, #4]
 8015cba:	68bb      	ldr	r3, [r7, #8]
 8015cbc:	689b      	ldr	r3, [r3, #8]
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	4619      	mov	r1, r3
 8015cc2:	4610      	mov	r0, r2
 8015cc4:	f009 fdea 	bl	801f89c <udp_send>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8015ccc:	e016      	b.n	8015cfc <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8015cce:	68bb      	ldr	r3, [r7, #8]
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	6858      	ldr	r0, [r3, #4]
 8015cd4:	68bb      	ldr	r3, [r7, #8]
 8015cd6:	689b      	ldr	r3, [r3, #8]
 8015cd8:	6819      	ldr	r1, [r3, #0]
 8015cda:	68bb      	ldr	r3, [r7, #8]
 8015cdc:	689b      	ldr	r3, [r3, #8]
 8015cde:	f103 0208 	add.w	r2, r3, #8
 8015ce2:	68bb      	ldr	r3, [r7, #8]
 8015ce4:	689b      	ldr	r3, [r3, #8]
 8015ce6:	899b      	ldrh	r3, [r3, #12]
 8015ce8:	f009 fe0c 	bl	801f904 <udp_sendto>
 8015cec:	4603      	mov	r3, r0
 8015cee:	73fb      	strb	r3, [r7, #15]
          break;
 8015cf0:	e004      	b.n	8015cfc <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8015cf2:	23f5      	movs	r3, #245	; 0xf5
 8015cf4:	73fb      	strb	r3, [r7, #15]
          break;
 8015cf6:	e001      	b.n	8015cfc <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8015cf8:	23f5      	movs	r3, #245	; 0xf5
 8015cfa:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8015cfc:	68bb      	ldr	r3, [r7, #8]
 8015cfe:	7bfa      	ldrb	r2, [r7, #15]
 8015d00:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8015d02:	bf00      	nop
 8015d04:	3710      	adds	r7, #16
 8015d06:	46bd      	mov	sp, r7
 8015d08:	bd80      	pop	{r7, pc}

08015d0a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8015d0a:	b580      	push	{r7, lr}
 8015d0c:	b086      	sub	sp, #24
 8015d0e:	af00      	add	r7, sp, #0
 8015d10:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8015d16:	693b      	ldr	r3, [r7, #16]
 8015d18:	2200      	movs	r2, #0
 8015d1a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8015d1c:	693b      	ldr	r3, [r7, #16]
 8015d1e:	681b      	ldr	r3, [r3, #0]
 8015d20:	685b      	ldr	r3, [r3, #4]
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d022      	beq.n	8015d6c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8015d26:	693b      	ldr	r3, [r7, #16]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	781b      	ldrb	r3, [r3, #0]
 8015d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015d30:	2b10      	cmp	r3, #16
 8015d32:	d11b      	bne.n	8015d6c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8015d34:	693b      	ldr	r3, [r7, #16]
 8015d36:	689b      	ldr	r3, [r3, #8]
 8015d38:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8015d3a:	697b      	ldr	r3, [r7, #20]
 8015d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015d40:	d202      	bcs.n	8015d48 <lwip_netconn_do_recv+0x3e>
 8015d42:	697b      	ldr	r3, [r7, #20]
 8015d44:	b29b      	uxth	r3, r3
 8015d46:	e001      	b.n	8015d4c <lwip_netconn_do_recv+0x42>
 8015d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d4c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	685b      	ldr	r3, [r3, #4]
 8015d54:	89fa      	ldrh	r2, [r7, #14]
 8015d56:	4611      	mov	r1, r2
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f003 fd85 	bl	8019868 <tcp_recved>
        remaining -= recved;
 8015d5e:	89fb      	ldrh	r3, [r7, #14]
 8015d60:	697a      	ldr	r2, [r7, #20]
 8015d62:	1ad3      	subs	r3, r2, r3
 8015d64:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8015d66:	697b      	ldr	r3, [r7, #20]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d1e6      	bne.n	8015d3a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8015d6c:	bf00      	nop
 8015d6e:	3718      	adds	r7, #24
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}

08015d74 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8015d74:	b580      	push	{r7, lr}
 8015d76:	b088      	sub	sp, #32
 8015d78:	af00      	add	r7, sp, #0
 8015d7a:	6078      	str	r0, [r7, #4]
 8015d7c:	460b      	mov	r3, r1
 8015d7e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8015d80:	2300      	movs	r3, #0
 8015d82:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d106      	bne.n	8015d98 <lwip_netconn_do_writemore+0x24>
 8015d8a:	4b61      	ldr	r3, [pc, #388]	; (8015f10 <lwip_netconn_do_writemore+0x19c>)
 8015d8c:	f240 6273 	movw	r2, #1651	; 0x673
 8015d90:	4960      	ldr	r1, [pc, #384]	; (8015f14 <lwip_netconn_do_writemore+0x1a0>)
 8015d92:	4861      	ldr	r0, [pc, #388]	; (8015f18 <lwip_netconn_do_writemore+0x1a4>)
 8015d94:	f00f f814 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	785b      	ldrb	r3, [r3, #1]
 8015d9c:	2b01      	cmp	r3, #1
 8015d9e:	d006      	beq.n	8015dae <lwip_netconn_do_writemore+0x3a>
 8015da0:	4b5b      	ldr	r3, [pc, #364]	; (8015f10 <lwip_netconn_do_writemore+0x19c>)
 8015da2:	f240 6274 	movw	r2, #1652	; 0x674
 8015da6:	495d      	ldr	r1, [pc, #372]	; (8015f1c <lwip_netconn_do_writemore+0x1a8>)
 8015da8:	485b      	ldr	r0, [pc, #364]	; (8015f18 <lwip_netconn_do_writemore+0x1a4>)
 8015daa:	f00f f809 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d106      	bne.n	8015dc4 <lwip_netconn_do_writemore+0x50>
 8015db6:	4b56      	ldr	r3, [pc, #344]	; (8015f10 <lwip_netconn_do_writemore+0x19c>)
 8015db8:	f240 6275 	movw	r2, #1653	; 0x675
 8015dbc:	4958      	ldr	r1, [pc, #352]	; (8015f20 <lwip_netconn_do_writemore+0x1ac>)
 8015dbe:	4856      	ldr	r0, [pc, #344]	; (8015f18 <lwip_netconn_do_writemore+0x1a4>)
 8015dc0:	f00e fffe 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	685b      	ldr	r3, [r3, #4]
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d106      	bne.n	8015dda <lwip_netconn_do_writemore+0x66>
 8015dcc:	4b50      	ldr	r3, [pc, #320]	; (8015f10 <lwip_netconn_do_writemore+0x19c>)
 8015dce:	f240 6276 	movw	r2, #1654	; 0x676
 8015dd2:	4954      	ldr	r1, [pc, #336]	; (8015f24 <lwip_netconn_do_writemore+0x1b0>)
 8015dd4:	4850      	ldr	r0, [pc, #320]	; (8015f18 <lwip_netconn_do_writemore+0x1a4>)
 8015dd6:	f00e fff3 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dde:	699a      	ldr	r2, [r3, #24]
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015de4:	695b      	ldr	r3, [r3, #20]
 8015de6:	429a      	cmp	r2, r3
 8015de8:	d306      	bcc.n	8015df8 <lwip_netconn_do_writemore+0x84>
 8015dea:	4b49      	ldr	r3, [pc, #292]	; (8015f10 <lwip_netconn_do_writemore+0x19c>)
 8015dec:	f240 6277 	movw	r2, #1655	; 0x677
 8015df0:	494d      	ldr	r1, [pc, #308]	; (8015f28 <lwip_netconn_do_writemore+0x1b4>)
 8015df2:	4849      	ldr	r0, [pc, #292]	; (8015f18 <lwip_netconn_do_writemore+0x1a4>)
 8015df4:	f00e ffe4 	bl	8024dc0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dfc:	899b      	ldrh	r3, [r3, #12]
 8015dfe:	2b00      	cmp	r3, #0
 8015e00:	d106      	bne.n	8015e10 <lwip_netconn_do_writemore+0x9c>
 8015e02:	4b43      	ldr	r3, [pc, #268]	; (8015f10 <lwip_netconn_do_writemore+0x19c>)
 8015e04:	f240 6279 	movw	r2, #1657	; 0x679
 8015e08:	4948      	ldr	r1, [pc, #288]	; (8015f2c <lwip_netconn_do_writemore+0x1b8>)
 8015e0a:	4843      	ldr	r0, [pc, #268]	; (8015f18 <lwip_netconn_do_writemore+0x1a4>)
 8015e0c:	f00e ffd8 	bl	8024dc0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e14:	7f1b      	ldrb	r3, [r3, #28]
 8015e16:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015e1e:	f003 0302 	and.w	r3, r3, #2
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d104      	bne.n	8015e30 <lwip_netconn_do_writemore+0xbc>
 8015e26:	7ebb      	ldrb	r3, [r7, #26]
 8015e28:	f003 0304 	and.w	r3, r3, #4
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d001      	beq.n	8015e34 <lwip_netconn_do_writemore+0xc0>
 8015e30:	2301      	movs	r3, #1
 8015e32:	e000      	b.n	8015e36 <lwip_netconn_do_writemore+0xc2>
 8015e34:	2300      	movs	r3, #0
 8015e36:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e3c:	689b      	ldr	r3, [r3, #8]
 8015e3e:	681a      	ldr	r2, [r3, #0]
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e44:	691b      	ldr	r3, [r3, #16]
 8015e46:	4413      	add	r3, r2
 8015e48:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e4e:	689b      	ldr	r3, [r3, #8]
 8015e50:	685a      	ldr	r2, [r3, #4]
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e56:	691b      	ldr	r3, [r3, #16]
 8015e58:	1ad3      	subs	r3, r2, r3
 8015e5a:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8015e5c:	693b      	ldr	r3, [r7, #16]
 8015e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e62:	d307      	bcc.n	8015e74 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 8015e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015e68:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8015e6a:	7ebb      	ldrb	r3, [r7, #26]
 8015e6c:	f043 0302 	orr.w	r3, r3, #2
 8015e70:	76bb      	strb	r3, [r7, #26]
 8015e72:	e001      	b.n	8015e78 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	685b      	ldr	r3, [r3, #4]
 8015e7c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015e80:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8015e82:	89fa      	ldrh	r2, [r7, #14]
 8015e84:	8bbb      	ldrh	r3, [r7, #28]
 8015e86:	429a      	cmp	r2, r3
 8015e88:	d216      	bcs.n	8015eb8 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 8015e8a:	89fb      	ldrh	r3, [r7, #14]
 8015e8c:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8015e8e:	7e3b      	ldrb	r3, [r7, #24]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d00d      	beq.n	8015eb0 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 8015e94:	8bbb      	ldrh	r3, [r7, #28]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d10e      	bne.n	8015eb8 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e9e:	699b      	ldr	r3, [r3, #24]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d102      	bne.n	8015eaa <lwip_netconn_do_writemore+0x136>
 8015ea4:	f06f 0306 	mvn.w	r3, #6
 8015ea8:	e000      	b.n	8015eac <lwip_netconn_do_writemore+0x138>
 8015eaa:	2300      	movs	r3, #0
 8015eac:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8015eae:	e08f      	b.n	8015fd0 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8015eb0:	7ebb      	ldrb	r3, [r7, #26]
 8015eb2:	f043 0302 	orr.w	r3, r3, #2
 8015eb6:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ebc:	691a      	ldr	r2, [r3, #16]
 8015ebe:	8bbb      	ldrh	r3, [r7, #28]
 8015ec0:	441a      	add	r2, r3
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ec6:	689b      	ldr	r3, [r3, #8]
 8015ec8:	685b      	ldr	r3, [r3, #4]
 8015eca:	429a      	cmp	r2, r3
 8015ecc:	d906      	bls.n	8015edc <lwip_netconn_do_writemore+0x168>
 8015ece:	4b10      	ldr	r3, [pc, #64]	; (8015f10 <lwip_netconn_do_writemore+0x19c>)
 8015ed0:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8015ed4:	4916      	ldr	r1, [pc, #88]	; (8015f30 <lwip_netconn_do_writemore+0x1bc>)
 8015ed6:	4810      	ldr	r0, [pc, #64]	; (8015f18 <lwip_netconn_do_writemore+0x1a4>)
 8015ed8:	f00e ff72 	bl	8024dc0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8015edc:	8bbb      	ldrh	r3, [r7, #28]
 8015ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ee2:	4293      	cmp	r3, r2
 8015ee4:	d103      	bne.n	8015eee <lwip_netconn_do_writemore+0x17a>
 8015ee6:	693b      	ldr	r3, [r7, #16]
 8015ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015eec:	d209      	bcs.n	8015f02 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8015eee:	693b      	ldr	r3, [r7, #16]
 8015ef0:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8015ef2:	8bba      	ldrh	r2, [r7, #28]
 8015ef4:	429a      	cmp	r2, r3
 8015ef6:	d11d      	bne.n	8015f34 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015efc:	899b      	ldrh	r3, [r3, #12]
 8015efe:	2b01      	cmp	r3, #1
 8015f00:	d918      	bls.n	8015f34 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 8015f02:	2301      	movs	r3, #1
 8015f04:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8015f06:	7ebb      	ldrb	r3, [r7, #26]
 8015f08:	f043 0302 	orr.w	r3, r3, #2
 8015f0c:	76bb      	strb	r3, [r7, #26]
 8015f0e:	e013      	b.n	8015f38 <lwip_netconn_do_writemore+0x1c4>
 8015f10:	0802a954 	.word	0x0802a954
 8015f14:	0802aaac 	.word	0x0802aaac
 8015f18:	0802a998 	.word	0x0802a998
 8015f1c:	0802adb4 	.word	0x0802adb4
 8015f20:	0802aabc 	.word	0x0802aabc
 8015f24:	0802add4 	.word	0x0802add4
 8015f28:	0802adec 	.word	0x0802adec
 8015f2c:	0802ae2c 	.word	0x0802ae2c
 8015f30:	0802ae54 	.word	0x0802ae54
      } else {
        write_more = 0;
 8015f34:	2300      	movs	r3, #0
 8015f36:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	6858      	ldr	r0, [r3, #4]
 8015f3c:	7ebb      	ldrb	r3, [r7, #26]
 8015f3e:	8bba      	ldrh	r2, [r7, #28]
 8015f40:	6979      	ldr	r1, [r7, #20]
 8015f42:	f007 fc03 	bl	801d74c <tcp_write>
 8015f46:	4603      	mov	r3, r0
 8015f48:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8015f4a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d12c      	bne.n	8015fac <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f56:	6999      	ldr	r1, [r3, #24]
 8015f58:	8bba      	ldrh	r2, [r7, #28]
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f5e:	440a      	add	r2, r1
 8015f60:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f66:	6919      	ldr	r1, [r3, #16]
 8015f68:	8bba      	ldrh	r2, [r7, #28]
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f6e:	440a      	add	r2, r1
 8015f70:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f76:	691a      	ldr	r2, [r3, #16]
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f7c:	689b      	ldr	r3, [r3, #8]
 8015f7e:	685b      	ldr	r3, [r3, #4]
 8015f80:	429a      	cmp	r2, r3
 8015f82:	d113      	bne.n	8015fac <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f88:	899a      	ldrh	r2, [r3, #12]
 8015f8a:	3a01      	subs	r2, #1
 8015f8c:	b292      	uxth	r2, r2
 8015f8e:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f94:	899b      	ldrh	r3, [r3, #12]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d008      	beq.n	8015fac <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f9e:	689a      	ldr	r2, [r3, #8]
 8015fa0:	3208      	adds	r2, #8
 8015fa2:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fa8:	2200      	movs	r2, #0
 8015faa:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8015fac:	7e7b      	ldrb	r3, [r7, #25]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d004      	beq.n	8015fbc <lwip_netconn_do_writemore+0x248>
 8015fb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015fb6:	2b00      	cmp	r3, #0
 8015fb8:	f43f af3e 	beq.w	8015e38 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8015fbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015fc0:	2b00      	cmp	r3, #0
 8015fc2:	d004      	beq.n	8015fce <lwip_netconn_do_writemore+0x25a>
 8015fc4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015fcc:	d136      	bne.n	801603c <lwip_netconn_do_writemore+0x2c8>
err_mem:
 8015fce:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8015fd0:	7e3b      	ldrb	r3, [r7, #24]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d01b      	beq.n	801600e <lwip_netconn_do_writemore+0x29a>
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fda:	699a      	ldr	r2, [r3, #24]
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fe0:	695b      	ldr	r3, [r3, #20]
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	d213      	bcs.n	801600e <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d005      	beq.n	8015ffa <lwip_netconn_do_writemore+0x286>
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	2103      	movs	r1, #3
 8015ff6:	6878      	ldr	r0, [r7, #4]
 8015ff8:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016000:	f043 0310 	orr.w	r3, r3, #16
 8016004:	b2da      	uxtb	r2, r3
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	f883 2020 	strb.w	r2, [r3, #32]
 801600c:	e016      	b.n	801603c <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	685b      	ldr	r3, [r3, #4]
 8016012:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016016:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801601a:	d305      	bcc.n	8016028 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 801601c:	687b      	ldr	r3, [r7, #4]
 801601e:	685b      	ldr	r3, [r3, #4]
 8016020:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8016024:	2b04      	cmp	r3, #4
 8016026:	d909      	bls.n	801603c <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801602c:	2b00      	cmp	r3, #0
 801602e:	d005      	beq.n	801603c <lwip_netconn_do_writemore+0x2c8>
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016034:	2200      	movs	r2, #0
 8016036:	2103      	movs	r1, #3
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801603c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016040:	2b00      	cmp	r3, #0
 8016042:	d11d      	bne.n	8016080 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016048:	699a      	ldr	r2, [r3, #24]
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801604e:	695b      	ldr	r3, [r3, #20]
 8016050:	429a      	cmp	r2, r3
 8016052:	d002      	beq.n	801605a <lwip_netconn_do_writemore+0x2e6>
 8016054:	7e3b      	ldrb	r3, [r7, #24]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d001      	beq.n	801605e <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 801605a:	2301      	movs	r3, #1
 801605c:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	4618      	mov	r0, r3
 8016064:	f008 f95c 	bl	801e320 <tcp_output>
 8016068:	4603      	mov	r3, r0
 801606a:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 801606c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8016070:	f113 0f04 	cmn.w	r3, #4
 8016074:	d12c      	bne.n	80160d0 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016076:	7b3b      	ldrb	r3, [r7, #12]
 8016078:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801607a:	2301      	movs	r3, #1
 801607c:	76fb      	strb	r3, [r7, #27]
 801607e:	e027      	b.n	80160d0 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 8016080:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016084:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016088:	d120      	bne.n	80160cc <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	685b      	ldr	r3, [r3, #4]
 801608e:	4618      	mov	r0, r3
 8016090:	f008 f946 	bl	801e320 <tcp_output>
 8016094:	4603      	mov	r3, r0
 8016096:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8016098:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801609c:	f113 0f04 	cmn.w	r3, #4
 80160a0:	d104      	bne.n	80160ac <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80160a2:	7b7b      	ldrb	r3, [r7, #13]
 80160a4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80160a6:	2301      	movs	r3, #1
 80160a8:	76fb      	strb	r3, [r7, #27]
 80160aa:	e011      	b.n	80160d0 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 80160ac:	7e3b      	ldrb	r3, [r7, #24]
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d00e      	beq.n	80160d0 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160b6:	699b      	ldr	r3, [r3, #24]
 80160b8:	2b00      	cmp	r3, #0
 80160ba:	d102      	bne.n	80160c2 <lwip_netconn_do_writemore+0x34e>
 80160bc:	f06f 0306 	mvn.w	r3, #6
 80160c0:	e000      	b.n	80160c4 <lwip_netconn_do_writemore+0x350>
 80160c2:	2300      	movs	r3, #0
 80160c4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80160c6:	2301      	movs	r3, #1
 80160c8:	76fb      	strb	r3, [r7, #27]
 80160ca:	e001      	b.n	80160d0 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80160cc:	2301      	movs	r3, #1
 80160ce:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80160d0:	7efb      	ldrb	r3, [r7, #27]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d015      	beq.n	8016102 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	330c      	adds	r3, #12
 80160de:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160e4:	7ffa      	ldrb	r2, [r7, #31]
 80160e6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	2200      	movs	r2, #0
 80160ec:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	2200      	movs	r2, #0
 80160f2:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80160f4:	78fb      	ldrb	r3, [r7, #3]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d006      	beq.n	8016108 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80160fa:	68b8      	ldr	r0, [r7, #8]
 80160fc:	f00c fd38 	bl	8022b70 <sys_sem_signal>
 8016100:	e002      	b.n	8016108 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8016102:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016106:	e000      	b.n	801610a <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 8016108:	2300      	movs	r3, #0
}
 801610a:	4618      	mov	r0, r3
 801610c:	3720      	adds	r7, #32
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}
 8016112:	bf00      	nop

08016114 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8016114:	b580      	push	{r7, lr}
 8016116:	b084      	sub	sp, #16
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	681b      	ldr	r3, [r3, #0]
 8016124:	4618      	mov	r0, r3
 8016126:	f7fe fb46 	bl	80147b6 <netconn_err>
 801612a:	4603      	mov	r3, r0
 801612c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801612e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d166      	bne.n	8016204 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	781b      	ldrb	r3, [r3, #0]
 801613c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016140:	2b10      	cmp	r3, #16
 8016142:	d15d      	bne.n	8016200 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8016144:	68bb      	ldr	r3, [r7, #8]
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	785b      	ldrb	r3, [r3, #1]
 801614a:	2b00      	cmp	r3, #0
 801614c:	d002      	beq.n	8016154 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 801614e:	23fb      	movs	r3, #251	; 0xfb
 8016150:	73fb      	strb	r3, [r7, #15]
 8016152:	e057      	b.n	8016204 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8016154:	68bb      	ldr	r3, [r7, #8]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	685b      	ldr	r3, [r3, #4]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d04d      	beq.n	80161fa <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	681b      	ldr	r3, [r3, #0]
 8016162:	2201      	movs	r2, #1
 8016164:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016166:	68bb      	ldr	r3, [r7, #8]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801616c:	2b00      	cmp	r3, #0
 801616e:	d006      	beq.n	801617e <lwip_netconn_do_write+0x6a>
 8016170:	4b28      	ldr	r3, [pc, #160]	; (8016214 <lwip_netconn_do_write+0x100>)
 8016172:	f240 7223 	movw	r2, #1827	; 0x723
 8016176:	4928      	ldr	r1, [pc, #160]	; (8016218 <lwip_netconn_do_write+0x104>)
 8016178:	4828      	ldr	r0, [pc, #160]	; (801621c <lwip_netconn_do_write+0x108>)
 801617a:	f00e fe21 	bl	8024dc0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 801617e:	68bb      	ldr	r3, [r7, #8]
 8016180:	695b      	ldr	r3, [r3, #20]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d106      	bne.n	8016194 <lwip_netconn_do_write+0x80>
 8016186:	4b23      	ldr	r3, [pc, #140]	; (8016214 <lwip_netconn_do_write+0x100>)
 8016188:	f240 7224 	movw	r2, #1828	; 0x724
 801618c:	4924      	ldr	r1, [pc, #144]	; (8016220 <lwip_netconn_do_write+0x10c>)
 801618e:	4823      	ldr	r0, [pc, #140]	; (801621c <lwip_netconn_do_write+0x108>)
 8016190:	f00e fe16 	bl	8024dc0 <iprintf>
        msg->conn->current_msg = msg;
 8016194:	68bb      	ldr	r3, [r7, #8]
 8016196:	681b      	ldr	r3, [r3, #0]
 8016198:	68ba      	ldr	r2, [r7, #8]
 801619a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 801619c:	68bb      	ldr	r3, [r7, #8]
 801619e:	681b      	ldr	r3, [r3, #0]
 80161a0:	2100      	movs	r1, #0
 80161a2:	4618      	mov	r0, r3
 80161a4:	f7ff fde6 	bl	8015d74 <lwip_netconn_do_writemore>
 80161a8:	4603      	mov	r3, r0
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d02e      	beq.n	801620c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80161ae:	68bb      	ldr	r3, [r7, #8]
 80161b0:	681b      	ldr	r3, [r3, #0]
 80161b2:	785b      	ldrb	r3, [r3, #1]
 80161b4:	2b01      	cmp	r3, #1
 80161b6:	d006      	beq.n	80161c6 <lwip_netconn_do_write+0xb2>
 80161b8:	4b16      	ldr	r3, [pc, #88]	; (8016214 <lwip_netconn_do_write+0x100>)
 80161ba:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80161be:	4919      	ldr	r1, [pc, #100]	; (8016224 <lwip_netconn_do_write+0x110>)
 80161c0:	4816      	ldr	r0, [pc, #88]	; (801621c <lwip_netconn_do_write+0x108>)
 80161c2:	f00e fdfd 	bl	8024dc0 <iprintf>
          UNLOCK_TCPIP_CORE();
 80161c6:	4818      	ldr	r0, [pc, #96]	; (8016228 <lwip_netconn_do_write+0x114>)
 80161c8:	f00c fd43 	bl	8022c52 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80161cc:	68bb      	ldr	r3, [r7, #8]
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	330c      	adds	r3, #12
 80161d2:	2100      	movs	r1, #0
 80161d4:	4618      	mov	r0, r3
 80161d6:	f00c fc9a 	bl	8022b0e <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80161da:	4813      	ldr	r0, [pc, #76]	; (8016228 <lwip_netconn_do_write+0x114>)
 80161dc:	f00c fd2a 	bl	8022c34 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80161e0:	68bb      	ldr	r3, [r7, #8]
 80161e2:	681b      	ldr	r3, [r3, #0]
 80161e4:	785b      	ldrb	r3, [r3, #1]
 80161e6:	2b01      	cmp	r3, #1
 80161e8:	d110      	bne.n	801620c <lwip_netconn_do_write+0xf8>
 80161ea:	4b0a      	ldr	r3, [pc, #40]	; (8016214 <lwip_netconn_do_write+0x100>)
 80161ec:	f240 722c 	movw	r2, #1836	; 0x72c
 80161f0:	490c      	ldr	r1, [pc, #48]	; (8016224 <lwip_netconn_do_write+0x110>)
 80161f2:	480a      	ldr	r0, [pc, #40]	; (801621c <lwip_netconn_do_write+0x108>)
 80161f4:	f00e fde4 	bl	8024dc0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80161f8:	e008      	b.n	801620c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80161fa:	23f5      	movs	r3, #245	; 0xf5
 80161fc:	73fb      	strb	r3, [r7, #15]
 80161fe:	e001      	b.n	8016204 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8016200:	23fa      	movs	r3, #250	; 0xfa
 8016202:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8016204:	68bb      	ldr	r3, [r7, #8]
 8016206:	7bfa      	ldrb	r2, [r7, #15]
 8016208:	711a      	strb	r2, [r3, #4]
 801620a:	e000      	b.n	801620e <lwip_netconn_do_write+0xfa>
        return;
 801620c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 801620e:	3710      	adds	r7, #16
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}
 8016214:	0802a954 	.word	0x0802a954
 8016218:	0802acf8 	.word	0x0802acf8
 801621c:	0802a998 	.word	0x0802a998
 8016220:	0802ae80 	.word	0x0802ae80
 8016224:	0802ad14 	.word	0x0802ad14
 8016228:	20011fcc 	.word	0x20011fcc

0801622c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 801622c:	b580      	push	{r7, lr}
 801622e:	b084      	sub	sp, #16
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8016238:	68fb      	ldr	r3, [r7, #12]
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	785b      	ldrb	r3, [r3, #1]
 801623e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	685b      	ldr	r3, [r3, #4]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d069      	beq.n	801631e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	781b      	ldrb	r3, [r3, #0]
 8016250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8016254:	2b10      	cmp	r3, #16
 8016256:	d162      	bne.n	801631e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801625c:	2b03      	cmp	r3, #3
 801625e:	d002      	beq.n	8016266 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8016260:	7afb      	ldrb	r3, [r7, #11]
 8016262:	2b02      	cmp	r3, #2
 8016264:	d05b      	beq.n	801631e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8016266:	7afb      	ldrb	r3, [r7, #11]
 8016268:	2b03      	cmp	r3, #3
 801626a:	d103      	bne.n	8016274 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	22f5      	movs	r2, #245	; 0xf5
 8016270:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8016272:	e059      	b.n	8016328 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8016274:	7afb      	ldrb	r3, [r7, #11]
 8016276:	2b01      	cmp	r3, #1
 8016278:	d103      	bne.n	8016282 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801627a:	68fb      	ldr	r3, [r7, #12]
 801627c:	22fb      	movs	r2, #251	; 0xfb
 801627e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8016280:	e052      	b.n	8016328 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	7a1b      	ldrb	r3, [r3, #8]
 8016286:	f003 0301 	and.w	r3, r3, #1
 801628a:	2b00      	cmp	r3, #0
 801628c:	d004      	beq.n	8016298 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801628e:	68fb      	ldr	r3, [r7, #12]
 8016290:	681b      	ldr	r3, [r3, #0]
 8016292:	4618      	mov	r0, r3
 8016294:	f7fe ffd6 	bl	8015244 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	681b      	ldr	r3, [r3, #0]
 801629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d006      	beq.n	80162b0 <lwip_netconn_do_close+0x84>
 80162a2:	4b23      	ldr	r3, [pc, #140]	; (8016330 <lwip_netconn_do_close+0x104>)
 80162a4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80162a8:	4922      	ldr	r1, [pc, #136]	; (8016334 <lwip_netconn_do_close+0x108>)
 80162aa:	4823      	ldr	r0, [pc, #140]	; (8016338 <lwip_netconn_do_close+0x10c>)
 80162ac:	f00e fd88 	bl	8024dc0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80162b0:	68fb      	ldr	r3, [r7, #12]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	2204      	movs	r2, #4
 80162b6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80162b8:	68fb      	ldr	r3, [r7, #12]
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	68fa      	ldr	r2, [r7, #12]
 80162be:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80162c0:	68fb      	ldr	r3, [r7, #12]
 80162c2:	681b      	ldr	r3, [r3, #0]
 80162c4:	2100      	movs	r1, #0
 80162c6:	4618      	mov	r0, r3
 80162c8:	f7ff f83a 	bl	8015340 <lwip_netconn_do_close_internal>
 80162cc:	4603      	mov	r3, r0
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d029      	beq.n	8016326 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80162d2:	68fb      	ldr	r3, [r7, #12]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	785b      	ldrb	r3, [r3, #1]
 80162d8:	2b04      	cmp	r3, #4
 80162da:	d006      	beq.n	80162ea <lwip_netconn_do_close+0xbe>
 80162dc:	4b14      	ldr	r3, [pc, #80]	; (8016330 <lwip_netconn_do_close+0x104>)
 80162de:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80162e2:	4916      	ldr	r1, [pc, #88]	; (801633c <lwip_netconn_do_close+0x110>)
 80162e4:	4814      	ldr	r0, [pc, #80]	; (8016338 <lwip_netconn_do_close+0x10c>)
 80162e6:	f00e fd6b 	bl	8024dc0 <iprintf>
        UNLOCK_TCPIP_CORE();
 80162ea:	4815      	ldr	r0, [pc, #84]	; (8016340 <lwip_netconn_do_close+0x114>)
 80162ec:	f00c fcb1 	bl	8022c52 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	681b      	ldr	r3, [r3, #0]
 80162f4:	330c      	adds	r3, #12
 80162f6:	2100      	movs	r1, #0
 80162f8:	4618      	mov	r0, r3
 80162fa:	f00c fc08 	bl	8022b0e <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80162fe:	4810      	ldr	r0, [pc, #64]	; (8016340 <lwip_netconn_do_close+0x114>)
 8016300:	f00c fc98 	bl	8022c34 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	681b      	ldr	r3, [r3, #0]
 8016308:	785b      	ldrb	r3, [r3, #1]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d00b      	beq.n	8016326 <lwip_netconn_do_close+0xfa>
 801630e:	4b08      	ldr	r3, [pc, #32]	; (8016330 <lwip_netconn_do_close+0x104>)
 8016310:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8016314:	4909      	ldr	r1, [pc, #36]	; (801633c <lwip_netconn_do_close+0x110>)
 8016316:	4808      	ldr	r0, [pc, #32]	; (8016338 <lwip_netconn_do_close+0x10c>)
 8016318:	f00e fd52 	bl	8024dc0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 801631c:	e003      	b.n	8016326 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	22f5      	movs	r2, #245	; 0xf5
 8016322:	711a      	strb	r2, [r3, #4]
 8016324:	e000      	b.n	8016328 <lwip_netconn_do_close+0xfc>
      return;
 8016326:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8016328:	3710      	adds	r7, #16
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}
 801632e:	bf00      	nop
 8016330:	0802a954 	.word	0x0802a954
 8016334:	0802acf8 	.word	0x0802acf8
 8016338:	0802a998 	.word	0x0802a998
 801633c:	0802ad14 	.word	0x0802ad14
 8016340:	20011fcc 	.word	0x20011fcc

08016344 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8016344:	b580      	push	{r7, lr}
 8016346:	b082      	sub	sp, #8
 8016348:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801634a:	2006      	movs	r0, #6
 801634c:	f001 fa1c 	bl	8017788 <memp_malloc>
 8016350:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	2b00      	cmp	r3, #0
 8016356:	d004      	beq.n	8016362 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8016358:	2210      	movs	r2, #16
 801635a:	2100      	movs	r1, #0
 801635c:	6878      	ldr	r0, [r7, #4]
 801635e:	f00e fef5 	bl	802514c <memset>
  }
  return buf;
 8016362:	687b      	ldr	r3, [r7, #4]
}
 8016364:	4618      	mov	r0, r3
 8016366:	3708      	adds	r7, #8
 8016368:	46bd      	mov	sp, r7
 801636a:	bd80      	pop	{r7, pc}

0801636c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 801636c:	b580      	push	{r7, lr}
 801636e:	b082      	sub	sp, #8
 8016370:	af00      	add	r7, sp, #0
 8016372:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d013      	beq.n	80163a2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d00b      	beq.n	801639a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	4618      	mov	r0, r3
 8016388:	f002 f918 	bl	80185bc <pbuf_free>
      buf->p = buf->ptr = NULL;
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2200      	movs	r2, #0
 8016390:	605a      	str	r2, [r3, #4]
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	685a      	ldr	r2, [r3, #4]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 801639a:	6879      	ldr	r1, [r7, #4]
 801639c:	2006      	movs	r0, #6
 801639e:	f001 fa69 	bl	8017874 <memp_free>
  }
}
 80163a2:	bf00      	nop
 80163a4:	3708      	adds	r7, #8
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd80      	pop	{r7, pc}
	...

080163ac <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80163ac:	b580      	push	{r7, lr}
 80163ae:	b084      	sub	sp, #16
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	60b9      	str	r1, [r7, #8]
 80163b6:	4613      	mov	r3, r2
 80163b8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80163ba:	68fb      	ldr	r3, [r7, #12]
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d108      	bne.n	80163d2 <netbuf_ref+0x26>
 80163c0:	4b1c      	ldr	r3, [pc, #112]	; (8016434 <netbuf_ref+0x88>)
 80163c2:	2299      	movs	r2, #153	; 0x99
 80163c4:	491c      	ldr	r1, [pc, #112]	; (8016438 <netbuf_ref+0x8c>)
 80163c6:	481d      	ldr	r0, [pc, #116]	; (801643c <netbuf_ref+0x90>)
 80163c8:	f00e fcfa 	bl	8024dc0 <iprintf>
 80163cc:	f06f 030f 	mvn.w	r3, #15
 80163d0:	e02b      	b.n	801642a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 80163d2:	68fb      	ldr	r3, [r7, #12]
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d004      	beq.n	80163e4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	4618      	mov	r0, r3
 80163e0:	f002 f8ec 	bl	80185bc <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 80163e4:	2241      	movs	r2, #65	; 0x41
 80163e6:	2100      	movs	r1, #0
 80163e8:	2036      	movs	r0, #54	; 0x36
 80163ea:	f001 fe03 	bl	8017ff4 <pbuf_alloc>
 80163ee:	4602      	mov	r2, r0
 80163f0:	68fb      	ldr	r3, [r7, #12]
 80163f2:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d105      	bne.n	8016408 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	2200      	movs	r2, #0
 8016400:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8016402:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016406:	e010      	b.n	801642a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	68ba      	ldr	r2, [r7, #8]
 801640e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	681b      	ldr	r3, [r3, #0]
 8016414:	88fa      	ldrh	r2, [r7, #6]
 8016416:	811a      	strh	r2, [r3, #8]
 8016418:	68fa      	ldr	r2, [r7, #12]
 801641a:	6812      	ldr	r2, [r2, #0]
 801641c:	891b      	ldrh	r3, [r3, #8]
 801641e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8016420:	68fb      	ldr	r3, [r7, #12]
 8016422:	681a      	ldr	r2, [r3, #0]
 8016424:	68fb      	ldr	r3, [r7, #12]
 8016426:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8016428:	2300      	movs	r3, #0
}
 801642a:	4618      	mov	r0, r3
 801642c:	3710      	adds	r7, #16
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	0802aed4 	.word	0x0802aed4
 8016438:	0802af8c 	.word	0x0802af8c
 801643c:	0802af24 	.word	0x0802af24

08016440 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8016440:	b580      	push	{r7, lr}
 8016442:	b084      	sub	sp, #16
 8016444:	af00      	add	r7, sp, #0
 8016446:	60f8      	str	r0, [r7, #12]
 8016448:	60b9      	str	r1, [r7, #8]
 801644a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	2b00      	cmp	r3, #0
 8016450:	d108      	bne.n	8016464 <netbuf_data+0x24>
 8016452:	4b1b      	ldr	r3, [pc, #108]	; (80164c0 <netbuf_data+0x80>)
 8016454:	22c6      	movs	r2, #198	; 0xc6
 8016456:	491b      	ldr	r1, [pc, #108]	; (80164c4 <netbuf_data+0x84>)
 8016458:	481b      	ldr	r0, [pc, #108]	; (80164c8 <netbuf_data+0x88>)
 801645a:	f00e fcb1 	bl	8024dc0 <iprintf>
 801645e:	f06f 030f 	mvn.w	r3, #15
 8016462:	e029      	b.n	80164b8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8016464:	68bb      	ldr	r3, [r7, #8]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d108      	bne.n	801647c <netbuf_data+0x3c>
 801646a:	4b15      	ldr	r3, [pc, #84]	; (80164c0 <netbuf_data+0x80>)
 801646c:	22c7      	movs	r2, #199	; 0xc7
 801646e:	4917      	ldr	r1, [pc, #92]	; (80164cc <netbuf_data+0x8c>)
 8016470:	4815      	ldr	r0, [pc, #84]	; (80164c8 <netbuf_data+0x88>)
 8016472:	f00e fca5 	bl	8024dc0 <iprintf>
 8016476:	f06f 030f 	mvn.w	r3, #15
 801647a:	e01d      	b.n	80164b8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d108      	bne.n	8016494 <netbuf_data+0x54>
 8016482:	4b0f      	ldr	r3, [pc, #60]	; (80164c0 <netbuf_data+0x80>)
 8016484:	22c8      	movs	r2, #200	; 0xc8
 8016486:	4912      	ldr	r1, [pc, #72]	; (80164d0 <netbuf_data+0x90>)
 8016488:	480f      	ldr	r0, [pc, #60]	; (80164c8 <netbuf_data+0x88>)
 801648a:	f00e fc99 	bl	8024dc0 <iprintf>
 801648e:	f06f 030f 	mvn.w	r3, #15
 8016492:	e011      	b.n	80164b8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	685b      	ldr	r3, [r3, #4]
 8016498:	2b00      	cmp	r3, #0
 801649a:	d102      	bne.n	80164a2 <netbuf_data+0x62>
    return ERR_BUF;
 801649c:	f06f 0301 	mvn.w	r3, #1
 80164a0:	e00a      	b.n	80164b8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	685a      	ldr	r2, [r3, #4]
 80164a8:	68bb      	ldr	r3, [r7, #8]
 80164aa:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80164ac:	68fb      	ldr	r3, [r7, #12]
 80164ae:	685b      	ldr	r3, [r3, #4]
 80164b0:	895a      	ldrh	r2, [r3, #10]
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80164b6:	2300      	movs	r3, #0
}
 80164b8:	4618      	mov	r0, r3
 80164ba:	3710      	adds	r7, #16
 80164bc:	46bd      	mov	sp, r7
 80164be:	bd80      	pop	{r7, pc}
 80164c0:	0802aed4 	.word	0x0802aed4
 80164c4:	0802afdc 	.word	0x0802afdc
 80164c8:	0802af24 	.word	0x0802af24
 80164cc:	0802aff8 	.word	0x0802aff8
 80164d0:	0802b018 	.word	0x0802b018

080164d4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b084      	sub	sp, #16
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
 80164dc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80164de:	f008 ffd7 	bl	801f490 <sys_timeouts_sleeptime>
 80164e2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80164ea:	d10b      	bne.n	8016504 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80164ec:	4813      	ldr	r0, [pc, #76]	; (801653c <tcpip_timeouts_mbox_fetch+0x68>)
 80164ee:	f00c fbb0 	bl	8022c52 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80164f2:	2200      	movs	r2, #0
 80164f4:	6839      	ldr	r1, [r7, #0]
 80164f6:	6878      	ldr	r0, [r7, #4]
 80164f8:	f00c fa68 	bl	80229cc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80164fc:	480f      	ldr	r0, [pc, #60]	; (801653c <tcpip_timeouts_mbox_fetch+0x68>)
 80164fe:	f00c fb99 	bl	8022c34 <sys_mutex_lock>
    return;
 8016502:	e018      	b.n	8016536 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	2b00      	cmp	r3, #0
 8016508:	d102      	bne.n	8016510 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801650a:	f008 ff87 	bl	801f41c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801650e:	e7e6      	b.n	80164de <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8016510:	480a      	ldr	r0, [pc, #40]	; (801653c <tcpip_timeouts_mbox_fetch+0x68>)
 8016512:	f00c fb9e 	bl	8022c52 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8016516:	68fa      	ldr	r2, [r7, #12]
 8016518:	6839      	ldr	r1, [r7, #0]
 801651a:	6878      	ldr	r0, [r7, #4]
 801651c:	f00c fa56 	bl	80229cc <sys_arch_mbox_fetch>
 8016520:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8016522:	4806      	ldr	r0, [pc, #24]	; (801653c <tcpip_timeouts_mbox_fetch+0x68>)
 8016524:	f00c fb86 	bl	8022c34 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8016528:	68bb      	ldr	r3, [r7, #8]
 801652a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801652e:	d102      	bne.n	8016536 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8016530:	f008 ff74 	bl	801f41c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8016534:	e7d3      	b.n	80164de <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8016536:	3710      	adds	r7, #16
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}
 801653c:	20011fcc 	.word	0x20011fcc

08016540 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b084      	sub	sp, #16
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8016548:	4810      	ldr	r0, [pc, #64]	; (801658c <tcpip_thread+0x4c>)
 801654a:	f00c fb73 	bl	8022c34 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801654e:	4b10      	ldr	r3, [pc, #64]	; (8016590 <tcpip_thread+0x50>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	2b00      	cmp	r3, #0
 8016554:	d005      	beq.n	8016562 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8016556:	4b0e      	ldr	r3, [pc, #56]	; (8016590 <tcpip_thread+0x50>)
 8016558:	681b      	ldr	r3, [r3, #0]
 801655a:	4a0e      	ldr	r2, [pc, #56]	; (8016594 <tcpip_thread+0x54>)
 801655c:	6812      	ldr	r2, [r2, #0]
 801655e:	4610      	mov	r0, r2
 8016560:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8016562:	f107 030c 	add.w	r3, r7, #12
 8016566:	4619      	mov	r1, r3
 8016568:	480b      	ldr	r0, [pc, #44]	; (8016598 <tcpip_thread+0x58>)
 801656a:	f7ff ffb3 	bl	80164d4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d106      	bne.n	8016582 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016574:	4b09      	ldr	r3, [pc, #36]	; (801659c <tcpip_thread+0x5c>)
 8016576:	2291      	movs	r2, #145	; 0x91
 8016578:	4909      	ldr	r1, [pc, #36]	; (80165a0 <tcpip_thread+0x60>)
 801657a:	480a      	ldr	r0, [pc, #40]	; (80165a4 <tcpip_thread+0x64>)
 801657c:	f00e fc20 	bl	8024dc0 <iprintf>
      continue;
 8016580:	e003      	b.n	801658a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8016582:	68fb      	ldr	r3, [r7, #12]
 8016584:	4618      	mov	r0, r3
 8016586:	f000 f80f 	bl	80165a8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801658a:	e7ea      	b.n	8016562 <tcpip_thread+0x22>
 801658c:	20011fcc 	.word	0x20011fcc
 8016590:	20011fc0 	.word	0x20011fc0
 8016594:	20011fc4 	.word	0x20011fc4
 8016598:	20011fc8 	.word	0x20011fc8
 801659c:	0802b06c 	.word	0x0802b06c
 80165a0:	0802b09c 	.word	0x0802b09c
 80165a4:	0802b0bc 	.word	0x0802b0bc

080165a8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80165a8:	b580      	push	{r7, lr}
 80165aa:	b082      	sub	sp, #8
 80165ac:	af00      	add	r7, sp, #0
 80165ae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	781b      	ldrb	r3, [r3, #0]
 80165b4:	2b02      	cmp	r3, #2
 80165b6:	d026      	beq.n	8016606 <tcpip_thread_handle_msg+0x5e>
 80165b8:	2b02      	cmp	r3, #2
 80165ba:	dc2b      	bgt.n	8016614 <tcpip_thread_handle_msg+0x6c>
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d002      	beq.n	80165c6 <tcpip_thread_handle_msg+0x1e>
 80165c0:	2b01      	cmp	r3, #1
 80165c2:	d015      	beq.n	80165f0 <tcpip_thread_handle_msg+0x48>
 80165c4:	e026      	b.n	8016614 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	68db      	ldr	r3, [r3, #12]
 80165ca:	687a      	ldr	r2, [r7, #4]
 80165cc:	6850      	ldr	r0, [r2, #4]
 80165ce:	687a      	ldr	r2, [r7, #4]
 80165d0:	6892      	ldr	r2, [r2, #8]
 80165d2:	4611      	mov	r1, r2
 80165d4:	4798      	blx	r3
 80165d6:	4603      	mov	r3, r0
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d004      	beq.n	80165e6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	685b      	ldr	r3, [r3, #4]
 80165e0:	4618      	mov	r0, r3
 80165e2:	f001 ffeb 	bl	80185bc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80165e6:	6879      	ldr	r1, [r7, #4]
 80165e8:	2009      	movs	r0, #9
 80165ea:	f001 f943 	bl	8017874 <memp_free>
      break;
 80165ee:	e018      	b.n	8016622 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	685b      	ldr	r3, [r3, #4]
 80165f4:	687a      	ldr	r2, [r7, #4]
 80165f6:	6892      	ldr	r2, [r2, #8]
 80165f8:	4610      	mov	r0, r2
 80165fa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80165fc:	6879      	ldr	r1, [r7, #4]
 80165fe:	2008      	movs	r0, #8
 8016600:	f001 f938 	bl	8017874 <memp_free>
      break;
 8016604:	e00d      	b.n	8016622 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8016606:	687b      	ldr	r3, [r7, #4]
 8016608:	685b      	ldr	r3, [r3, #4]
 801660a:	687a      	ldr	r2, [r7, #4]
 801660c:	6892      	ldr	r2, [r2, #8]
 801660e:	4610      	mov	r0, r2
 8016610:	4798      	blx	r3
      break;
 8016612:	e006      	b.n	8016622 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8016614:	4b05      	ldr	r3, [pc, #20]	; (801662c <tcpip_thread_handle_msg+0x84>)
 8016616:	22cf      	movs	r2, #207	; 0xcf
 8016618:	4905      	ldr	r1, [pc, #20]	; (8016630 <tcpip_thread_handle_msg+0x88>)
 801661a:	4806      	ldr	r0, [pc, #24]	; (8016634 <tcpip_thread_handle_msg+0x8c>)
 801661c:	f00e fbd0 	bl	8024dc0 <iprintf>
      break;
 8016620:	bf00      	nop
  }
}
 8016622:	bf00      	nop
 8016624:	3708      	adds	r7, #8
 8016626:	46bd      	mov	sp, r7
 8016628:	bd80      	pop	{r7, pc}
 801662a:	bf00      	nop
 801662c:	0802b06c 	.word	0x0802b06c
 8016630:	0802b09c 	.word	0x0802b09c
 8016634:	0802b0bc 	.word	0x0802b0bc

08016638 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8016638:	b580      	push	{r7, lr}
 801663a:	b086      	sub	sp, #24
 801663c:	af00      	add	r7, sp, #0
 801663e:	60f8      	str	r0, [r7, #12]
 8016640:	60b9      	str	r1, [r7, #8]
 8016642:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8016644:	481a      	ldr	r0, [pc, #104]	; (80166b0 <tcpip_inpkt+0x78>)
 8016646:	f00c fa1c 	bl	8022a82 <sys_mbox_valid>
 801664a:	4603      	mov	r3, r0
 801664c:	2b00      	cmp	r3, #0
 801664e:	d105      	bne.n	801665c <tcpip_inpkt+0x24>
 8016650:	4b18      	ldr	r3, [pc, #96]	; (80166b4 <tcpip_inpkt+0x7c>)
 8016652:	22fc      	movs	r2, #252	; 0xfc
 8016654:	4918      	ldr	r1, [pc, #96]	; (80166b8 <tcpip_inpkt+0x80>)
 8016656:	4819      	ldr	r0, [pc, #100]	; (80166bc <tcpip_inpkt+0x84>)
 8016658:	f00e fbb2 	bl	8024dc0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801665c:	2009      	movs	r0, #9
 801665e:	f001 f893 	bl	8017788 <memp_malloc>
 8016662:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	2b00      	cmp	r3, #0
 8016668:	d102      	bne.n	8016670 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801666a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801666e:	e01a      	b.n	80166a6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	2200      	movs	r2, #0
 8016674:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	68fa      	ldr	r2, [r7, #12]
 801667a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801667c:	697b      	ldr	r3, [r7, #20]
 801667e:	68ba      	ldr	r2, [r7, #8]
 8016680:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8016682:	697b      	ldr	r3, [r7, #20]
 8016684:	687a      	ldr	r2, [r7, #4]
 8016686:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8016688:	6979      	ldr	r1, [r7, #20]
 801668a:	4809      	ldr	r0, [pc, #36]	; (80166b0 <tcpip_inpkt+0x78>)
 801668c:	f00c f984 	bl	8022998 <sys_mbox_trypost>
 8016690:	4603      	mov	r3, r0
 8016692:	2b00      	cmp	r3, #0
 8016694:	d006      	beq.n	80166a4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8016696:	6979      	ldr	r1, [r7, #20]
 8016698:	2009      	movs	r0, #9
 801669a:	f001 f8eb 	bl	8017874 <memp_free>
    return ERR_MEM;
 801669e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166a2:	e000      	b.n	80166a6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80166a4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80166a6:	4618      	mov	r0, r3
 80166a8:	3718      	adds	r7, #24
 80166aa:	46bd      	mov	sp, r7
 80166ac:	bd80      	pop	{r7, pc}
 80166ae:	bf00      	nop
 80166b0:	20011fc8 	.word	0x20011fc8
 80166b4:	0802b06c 	.word	0x0802b06c
 80166b8:	0802b0e4 	.word	0x0802b0e4
 80166bc:	0802b0bc 	.word	0x0802b0bc

080166c0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80166d0:	f003 0318 	and.w	r3, r3, #24
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d006      	beq.n	80166e6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80166d8:	4a08      	ldr	r2, [pc, #32]	; (80166fc <tcpip_input+0x3c>)
 80166da:	6839      	ldr	r1, [r7, #0]
 80166dc:	6878      	ldr	r0, [r7, #4]
 80166de:	f7ff ffab 	bl	8016638 <tcpip_inpkt>
 80166e2:	4603      	mov	r3, r0
 80166e4:	e005      	b.n	80166f2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80166e6:	4a06      	ldr	r2, [pc, #24]	; (8016700 <tcpip_input+0x40>)
 80166e8:	6839      	ldr	r1, [r7, #0]
 80166ea:	6878      	ldr	r0, [r7, #4]
 80166ec:	f7ff ffa4 	bl	8016638 <tcpip_inpkt>
 80166f0:	4603      	mov	r3, r0
}
 80166f2:	4618      	mov	r0, r3
 80166f4:	3708      	adds	r7, #8
 80166f6:	46bd      	mov	sp, r7
 80166f8:	bd80      	pop	{r7, pc}
 80166fa:	bf00      	nop
 80166fc:	08022785 	.word	0x08022785
 8016700:	08021319 	.word	0x08021319

08016704 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8016704:	b580      	push	{r7, lr}
 8016706:	b084      	sub	sp, #16
 8016708:	af00      	add	r7, sp, #0
 801670a:	6078      	str	r0, [r7, #4]
 801670c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801670e:	4819      	ldr	r0, [pc, #100]	; (8016774 <tcpip_try_callback+0x70>)
 8016710:	f00c f9b7 	bl	8022a82 <sys_mbox_valid>
 8016714:	4603      	mov	r3, r0
 8016716:	2b00      	cmp	r3, #0
 8016718:	d106      	bne.n	8016728 <tcpip_try_callback+0x24>
 801671a:	4b17      	ldr	r3, [pc, #92]	; (8016778 <tcpip_try_callback+0x74>)
 801671c:	f240 125d 	movw	r2, #349	; 0x15d
 8016720:	4916      	ldr	r1, [pc, #88]	; (801677c <tcpip_try_callback+0x78>)
 8016722:	4817      	ldr	r0, [pc, #92]	; (8016780 <tcpip_try_callback+0x7c>)
 8016724:	f00e fb4c 	bl	8024dc0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8016728:	2008      	movs	r0, #8
 801672a:	f001 f82d 	bl	8017788 <memp_malloc>
 801672e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d102      	bne.n	801673c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8016736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801673a:	e017      	b.n	801676c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	2201      	movs	r2, #1
 8016740:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	687a      	ldr	r2, [r7, #4]
 8016746:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	683a      	ldr	r2, [r7, #0]
 801674c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801674e:	68f9      	ldr	r1, [r7, #12]
 8016750:	4808      	ldr	r0, [pc, #32]	; (8016774 <tcpip_try_callback+0x70>)
 8016752:	f00c f921 	bl	8022998 <sys_mbox_trypost>
 8016756:	4603      	mov	r3, r0
 8016758:	2b00      	cmp	r3, #0
 801675a:	d006      	beq.n	801676a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801675c:	68f9      	ldr	r1, [r7, #12]
 801675e:	2008      	movs	r0, #8
 8016760:	f001 f888 	bl	8017874 <memp_free>
    return ERR_MEM;
 8016764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016768:	e000      	b.n	801676c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801676a:	2300      	movs	r3, #0
}
 801676c:	4618      	mov	r0, r3
 801676e:	3710      	adds	r7, #16
 8016770:	46bd      	mov	sp, r7
 8016772:	bd80      	pop	{r7, pc}
 8016774:	20011fc8 	.word	0x20011fc8
 8016778:	0802b06c 	.word	0x0802b06c
 801677c:	0802b0e4 	.word	0x0802b0e4
 8016780:	0802b0bc 	.word	0x0802b0bc

08016784 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8016784:	b580      	push	{r7, lr}
 8016786:	b084      	sub	sp, #16
 8016788:	af00      	add	r7, sp, #0
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8016790:	4806      	ldr	r0, [pc, #24]	; (80167ac <tcpip_send_msg_wait_sem+0x28>)
 8016792:	f00c fa4f 	bl	8022c34 <sys_mutex_lock>
  fn(apimsg);
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	68b8      	ldr	r0, [r7, #8]
 801679a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801679c:	4803      	ldr	r0, [pc, #12]	; (80167ac <tcpip_send_msg_wait_sem+0x28>)
 801679e:	f00c fa58 	bl	8022c52 <sys_mutex_unlock>
  return ERR_OK;
 80167a2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 80167a4:	4618      	mov	r0, r3
 80167a6:	3710      	adds	r7, #16
 80167a8:	46bd      	mov	sp, r7
 80167aa:	bd80      	pop	{r7, pc}
 80167ac:	20011fcc 	.word	0x20011fcc

080167b0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80167b0:	b580      	push	{r7, lr}
 80167b2:	b084      	sub	sp, #16
 80167b4:	af02      	add	r7, sp, #8
 80167b6:	6078      	str	r0, [r7, #4]
 80167b8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80167ba:	f000 fb3a 	bl	8016e32 <lwip_init>

  tcpip_init_done = initfunc;
 80167be:	4a17      	ldr	r2, [pc, #92]	; (801681c <tcpip_init+0x6c>)
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80167c4:	4a16      	ldr	r2, [pc, #88]	; (8016820 <tcpip_init+0x70>)
 80167c6:	683b      	ldr	r3, [r7, #0]
 80167c8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80167ca:	2106      	movs	r1, #6
 80167cc:	4815      	ldr	r0, [pc, #84]	; (8016824 <tcpip_init+0x74>)
 80167ce:	f00c f8af 	bl	8022930 <sys_mbox_new>
 80167d2:	4603      	mov	r3, r0
 80167d4:	2b00      	cmp	r3, #0
 80167d6:	d006      	beq.n	80167e6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80167d8:	4b13      	ldr	r3, [pc, #76]	; (8016828 <tcpip_init+0x78>)
 80167da:	f240 2261 	movw	r2, #609	; 0x261
 80167de:	4913      	ldr	r1, [pc, #76]	; (801682c <tcpip_init+0x7c>)
 80167e0:	4813      	ldr	r0, [pc, #76]	; (8016830 <tcpip_init+0x80>)
 80167e2:	f00e faed 	bl	8024dc0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80167e6:	4813      	ldr	r0, [pc, #76]	; (8016834 <tcpip_init+0x84>)
 80167e8:	f00c fa08 	bl	8022bfc <sys_mutex_new>
 80167ec:	4603      	mov	r3, r0
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d006      	beq.n	8016800 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80167f2:	4b0d      	ldr	r3, [pc, #52]	; (8016828 <tcpip_init+0x78>)
 80167f4:	f240 2265 	movw	r2, #613	; 0x265
 80167f8:	490f      	ldr	r1, [pc, #60]	; (8016838 <tcpip_init+0x88>)
 80167fa:	480d      	ldr	r0, [pc, #52]	; (8016830 <tcpip_init+0x80>)
 80167fc:	f00e fae0 	bl	8024dc0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8016800:	2300      	movs	r3, #0
 8016802:	9300      	str	r3, [sp, #0]
 8016804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016808:	2200      	movs	r2, #0
 801680a:	490c      	ldr	r1, [pc, #48]	; (801683c <tcpip_init+0x8c>)
 801680c:	480c      	ldr	r0, [pc, #48]	; (8016840 <tcpip_init+0x90>)
 801680e:	f00c fa2d 	bl	8022c6c <sys_thread_new>
}
 8016812:	bf00      	nop
 8016814:	3708      	adds	r7, #8
 8016816:	46bd      	mov	sp, r7
 8016818:	bd80      	pop	{r7, pc}
 801681a:	bf00      	nop
 801681c:	20011fc0 	.word	0x20011fc0
 8016820:	20011fc4 	.word	0x20011fc4
 8016824:	20011fc8 	.word	0x20011fc8
 8016828:	0802b06c 	.word	0x0802b06c
 801682c:	0802b0f4 	.word	0x0802b0f4
 8016830:	0802b0bc 	.word	0x0802b0bc
 8016834:	20011fcc 	.word	0x20011fcc
 8016838:	0802b118 	.word	0x0802b118
 801683c:	08016541 	.word	0x08016541
 8016840:	0802b13c 	.word	0x0802b13c

08016844 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8016844:	b480      	push	{r7}
 8016846:	b083      	sub	sp, #12
 8016848:	af00      	add	r7, sp, #0
 801684a:	4603      	mov	r3, r0
 801684c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801684e:	88fb      	ldrh	r3, [r7, #6]
 8016850:	021b      	lsls	r3, r3, #8
 8016852:	b21a      	sxth	r2, r3
 8016854:	88fb      	ldrh	r3, [r7, #6]
 8016856:	0a1b      	lsrs	r3, r3, #8
 8016858:	b29b      	uxth	r3, r3
 801685a:	b21b      	sxth	r3, r3
 801685c:	4313      	orrs	r3, r2
 801685e:	b21b      	sxth	r3, r3
 8016860:	b29b      	uxth	r3, r3
}
 8016862:	4618      	mov	r0, r3
 8016864:	370c      	adds	r7, #12
 8016866:	46bd      	mov	sp, r7
 8016868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801686c:	4770      	bx	lr

0801686e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801686e:	b480      	push	{r7}
 8016870:	b083      	sub	sp, #12
 8016872:	af00      	add	r7, sp, #0
 8016874:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	061a      	lsls	r2, r3, #24
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	021b      	lsls	r3, r3, #8
 801687e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8016882:	431a      	orrs	r2, r3
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	0a1b      	lsrs	r3, r3, #8
 8016888:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801688c:	431a      	orrs	r2, r3
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	0e1b      	lsrs	r3, r3, #24
 8016892:	4313      	orrs	r3, r2
}
 8016894:	4618      	mov	r0, r3
 8016896:	370c      	adds	r7, #12
 8016898:	46bd      	mov	sp, r7
 801689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801689e:	4770      	bx	lr

080168a0 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 80168a0:	b480      	push	{r7}
 80168a2:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 80168a4:	bf00      	nop
 80168a6:	46bd      	mov	sp, r7
 80168a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ac:	4770      	bx	lr

080168ae <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 80168ae:	b580      	push	{r7, lr}
 80168b0:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80168b2:	f000 faa9 	bl	8016e08 <dns_check_entries>
}
 80168b6:	bf00      	nop
 80168b8:	bd80      	pop	{r7, pc}
	...

080168bc <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80168bc:	b580      	push	{r7, lr}
 80168be:	b090      	sub	sp, #64	; 0x40
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	4603      	mov	r3, r0
 80168c4:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 80168c6:	79fa      	ldrb	r2, [r7, #7]
 80168c8:	4613      	mov	r3, r2
 80168ca:	011b      	lsls	r3, r3, #4
 80168cc:	4413      	add	r3, r2
 80168ce:	011b      	lsls	r3, r3, #4
 80168d0:	4a6c      	ldr	r2, [pc, #432]	; (8016a84 <dns_send+0x1c8>)
 80168d2:	4413      	add	r3, r2
 80168d4:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80168d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d8:	7adb      	ldrb	r3, [r3, #11]
 80168da:	2b01      	cmp	r3, #1
 80168dc:	d906      	bls.n	80168ec <dns_send+0x30>
 80168de:	4b6a      	ldr	r3, [pc, #424]	; (8016a88 <dns_send+0x1cc>)
 80168e0:	f240 22fa 	movw	r2, #762	; 0x2fa
 80168e4:	4969      	ldr	r1, [pc, #420]	; (8016a8c <dns_send+0x1d0>)
 80168e6:	486a      	ldr	r0, [pc, #424]	; (8016a90 <dns_send+0x1d4>)
 80168e8:	f00e fa6a 	bl	8024dc0 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80168ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ee:	7adb      	ldrb	r3, [r3, #11]
 80168f0:	461a      	mov	r2, r3
 80168f2:	4b68      	ldr	r3, [pc, #416]	; (8016a94 <dns_send+0x1d8>)
 80168f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d109      	bne.n	8016910 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 80168fc:	79fb      	ldrb	r3, [r7, #7]
 80168fe:	2100      	movs	r1, #0
 8016900:	4618      	mov	r0, r3
 8016902:	f000 f8cb 	bl	8016a9c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 8016906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016908:	2200      	movs	r2, #0
 801690a:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 801690c:	2300      	movs	r3, #0
 801690e:	e0b4      	b.n	8016a7a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8016910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016912:	3310      	adds	r3, #16
 8016914:	4618      	mov	r0, r3
 8016916:	f7e9 fcbb 	bl	8000290 <strlen>
 801691a:	4603      	mov	r3, r0
 801691c:	b29b      	uxth	r3, r3
 801691e:	3312      	adds	r3, #18
 8016920:	b29b      	uxth	r3, r3
 8016922:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016926:	4619      	mov	r1, r3
 8016928:	2036      	movs	r0, #54	; 0x36
 801692a:	f001 fb63 	bl	8017ff4 <pbuf_alloc>
 801692e:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 8016930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016932:	2b00      	cmp	r3, #0
 8016934:	f000 8095 	beq.w	8016a62 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8016938:	f107 0310 	add.w	r3, r7, #16
 801693c:	220c      	movs	r2, #12
 801693e:	2100      	movs	r1, #0
 8016940:	4618      	mov	r0, r3
 8016942:	f00e fc03 	bl	802514c <memset>
    hdr.id = lwip_htons(entry->txid);
 8016946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016948:	891b      	ldrh	r3, [r3, #8]
 801694a:	4618      	mov	r0, r3
 801694c:	f7ff ff7a 	bl	8016844 <lwip_htons>
 8016950:	4603      	mov	r3, r0
 8016952:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8016954:	2301      	movs	r3, #1
 8016956:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8016958:	f44f 7380 	mov.w	r3, #256	; 0x100
 801695c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801695e:	f107 0310 	add.w	r3, r7, #16
 8016962:	220c      	movs	r2, #12
 8016964:	4619      	mov	r1, r3
 8016966:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016968:	f002 f8dc 	bl	8018b24 <pbuf_take>
    hostname = entry->name;
 801696c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801696e:	3310      	adds	r3, #16
 8016970:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8016972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016974:	3b01      	subs	r3, #1
 8016976:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8016978:	230c      	movs	r3, #12
 801697a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 801697c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801697e:	3301      	adds	r3, #1
 8016980:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8016982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016984:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8016986:	2300      	movs	r3, #0
 8016988:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801698c:	e007      	b.n	801699e <dns_send+0xe2>
        ++n;
 801698e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016992:	3301      	adds	r3, #1
 8016994:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8016998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801699a:	3301      	adds	r3, #1
 801699c:	63bb      	str	r3, [r7, #56]	; 0x38
 801699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169a0:	781b      	ldrb	r3, [r3, #0]
 80169a2:	2b2e      	cmp	r3, #46	; 0x2e
 80169a4:	d003      	beq.n	80169ae <dns_send+0xf2>
 80169a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169a8:	781b      	ldrb	r3, [r3, #0]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d1ef      	bne.n	801698e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 80169ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80169b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169b2:	1ad3      	subs	r3, r2, r3
 80169b4:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 80169b6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80169b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80169bc:	4413      	add	r3, r2
 80169be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80169c2:	4293      	cmp	r3, r2
 80169c4:	dc53      	bgt.n	8016a6e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 80169c6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80169ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169cc:	4619      	mov	r1, r3
 80169ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80169d0:	f002 f9d6 	bl	8018d80 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80169d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169d6:	3301      	adds	r3, #1
 80169d8:	b29b      	uxth	r3, r3
 80169da:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80169dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80169de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80169e0:	f002 f932 	bl	8018c48 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 80169e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80169e8:	b29a      	uxth	r2, r3
 80169ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169ec:	4413      	add	r3, r2
 80169ee:	b29b      	uxth	r3, r3
 80169f0:	3301      	adds	r3, #1
 80169f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 80169f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80169f6:	781b      	ldrb	r3, [r3, #0]
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d1bf      	bne.n	801697c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 80169fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80169fe:	2200      	movs	r2, #0
 8016a00:	4619      	mov	r1, r3
 8016a02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a04:	f002 f9bc 	bl	8018d80 <pbuf_put_at>
    query_idx++;
 8016a08:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a0a:	3301      	adds	r3, #1
 8016a0c:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8016a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016a12:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8016a14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8016a18:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8016a1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016a1c:	f107 010c 	add.w	r1, r7, #12
 8016a20:	2204      	movs	r2, #4
 8016a22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a24:	f002 f910 	bl	8018c48 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8016a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a2a:	7bdb      	ldrb	r3, [r3, #15]
 8016a2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8016a30:	2335      	movs	r3, #53	; 0x35
 8016a32:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8016a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a36:	7adb      	ldrb	r3, [r3, #11]
 8016a38:	009b      	lsls	r3, r3, #2
 8016a3a:	4a16      	ldr	r2, [pc, #88]	; (8016a94 <dns_send+0x1d8>)
 8016a3c:	4413      	add	r3, r2
 8016a3e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8016a40:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8016a44:	4a14      	ldr	r2, [pc, #80]	; (8016a98 <dns_send+0x1dc>)
 8016a46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016a4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016a4c:	69fa      	ldr	r2, [r7, #28]
 8016a4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a50:	f008 ff58 	bl	801f904 <udp_sendto>
 8016a54:	4603      	mov	r3, r0
 8016a56:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8016a5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a5c:	f001 fdae 	bl	80185bc <pbuf_free>
 8016a60:	e002      	b.n	8016a68 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8016a62:	23ff      	movs	r3, #255	; 0xff
 8016a64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8016a68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8016a6c:	e005      	b.n	8016a7a <dns_send+0x1be>
        goto overflow_return;
 8016a6e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8016a70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8016a72:	f001 fda3 	bl	80185bc <pbuf_free>
  return ERR_VAL;
 8016a76:	f06f 0305 	mvn.w	r3, #5
}
 8016a7a:	4618      	mov	r0, r3
 8016a7c:	3740      	adds	r7, #64	; 0x40
 8016a7e:	46bd      	mov	sp, r7
 8016a80:	bd80      	pop	{r7, pc}
 8016a82:	bf00      	nop
 8016a84:	20011fe0 	.word	0x20011fe0
 8016a88:	0802b14c 	.word	0x0802b14c
 8016a8c:	0802b17c 	.word	0x0802b17c
 8016a90:	0802b194 	.word	0x0802b194
 8016a94:	20012450 	.word	0x20012450
 8016a98:	20011fd0 	.word	0x20011fd0

08016a9c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8016a9c:	b590      	push	{r4, r7, lr}
 8016a9e:	b085      	sub	sp, #20
 8016aa0:	af00      	add	r7, sp, #0
 8016aa2:	4603      	mov	r3, r0
 8016aa4:	6039      	str	r1, [r7, #0]
 8016aa6:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	73fb      	strb	r3, [r7, #15]
 8016aac:	e03d      	b.n	8016b2a <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8016aae:	7bfa      	ldrb	r2, [r7, #15]
 8016ab0:	4957      	ldr	r1, [pc, #348]	; (8016c10 <dns_call_found+0x174>)
 8016ab2:	4613      	mov	r3, r2
 8016ab4:	005b      	lsls	r3, r3, #1
 8016ab6:	4413      	add	r3, r2
 8016ab8:	009b      	lsls	r3, r3, #2
 8016aba:	440b      	add	r3, r1
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d030      	beq.n	8016b24 <dns_call_found+0x88>
 8016ac2:	7bfa      	ldrb	r2, [r7, #15]
 8016ac4:	4952      	ldr	r1, [pc, #328]	; (8016c10 <dns_call_found+0x174>)
 8016ac6:	4613      	mov	r3, r2
 8016ac8:	005b      	lsls	r3, r3, #1
 8016aca:	4413      	add	r3, r2
 8016acc:	009b      	lsls	r3, r3, #2
 8016ace:	440b      	add	r3, r1
 8016ad0:	3308      	adds	r3, #8
 8016ad2:	781b      	ldrb	r3, [r3, #0]
 8016ad4:	79fa      	ldrb	r2, [r7, #7]
 8016ad6:	429a      	cmp	r2, r3
 8016ad8:	d124      	bne.n	8016b24 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8016ada:	7bfa      	ldrb	r2, [r7, #15]
 8016adc:	494c      	ldr	r1, [pc, #304]	; (8016c10 <dns_call_found+0x174>)
 8016ade:	4613      	mov	r3, r2
 8016ae0:	005b      	lsls	r3, r3, #1
 8016ae2:	4413      	add	r3, r2
 8016ae4:	009b      	lsls	r3, r3, #2
 8016ae6:	440b      	add	r3, r1
 8016ae8:	681c      	ldr	r4, [r3, #0]
 8016aea:	79fa      	ldrb	r2, [r7, #7]
 8016aec:	4613      	mov	r3, r2
 8016aee:	011b      	lsls	r3, r3, #4
 8016af0:	4413      	add	r3, r2
 8016af2:	011b      	lsls	r3, r3, #4
 8016af4:	3310      	adds	r3, #16
 8016af6:	4a47      	ldr	r2, [pc, #284]	; (8016c14 <dns_call_found+0x178>)
 8016af8:	1898      	adds	r0, r3, r2
 8016afa:	7bfa      	ldrb	r2, [r7, #15]
 8016afc:	4944      	ldr	r1, [pc, #272]	; (8016c10 <dns_call_found+0x174>)
 8016afe:	4613      	mov	r3, r2
 8016b00:	005b      	lsls	r3, r3, #1
 8016b02:	4413      	add	r3, r2
 8016b04:	009b      	lsls	r3, r3, #2
 8016b06:	440b      	add	r3, r1
 8016b08:	3304      	adds	r3, #4
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	461a      	mov	r2, r3
 8016b0e:	6839      	ldr	r1, [r7, #0]
 8016b10:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8016b12:	7bfa      	ldrb	r2, [r7, #15]
 8016b14:	493e      	ldr	r1, [pc, #248]	; (8016c10 <dns_call_found+0x174>)
 8016b16:	4613      	mov	r3, r2
 8016b18:	005b      	lsls	r3, r3, #1
 8016b1a:	4413      	add	r3, r2
 8016b1c:	009b      	lsls	r3, r3, #2
 8016b1e:	440b      	add	r3, r1
 8016b20:	2200      	movs	r2, #0
 8016b22:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8016b24:	7bfb      	ldrb	r3, [r7, #15]
 8016b26:	3301      	adds	r3, #1
 8016b28:	73fb      	strb	r3, [r7, #15]
 8016b2a:	7bfb      	ldrb	r3, [r7, #15]
 8016b2c:	2b03      	cmp	r3, #3
 8016b2e:	d9be      	bls.n	8016aae <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8016b30:	2300      	movs	r3, #0
 8016b32:	73fb      	strb	r3, [r7, #15]
 8016b34:	e031      	b.n	8016b9a <dns_call_found+0xfe>
    if (i == idx) {
 8016b36:	7bfa      	ldrb	r2, [r7, #15]
 8016b38:	79fb      	ldrb	r3, [r7, #7]
 8016b3a:	429a      	cmp	r2, r3
 8016b3c:	d029      	beq.n	8016b92 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8016b3e:	7bfa      	ldrb	r2, [r7, #15]
 8016b40:	4934      	ldr	r1, [pc, #208]	; (8016c14 <dns_call_found+0x178>)
 8016b42:	4613      	mov	r3, r2
 8016b44:	011b      	lsls	r3, r3, #4
 8016b46:	4413      	add	r3, r2
 8016b48:	011b      	lsls	r3, r3, #4
 8016b4a:	440b      	add	r3, r1
 8016b4c:	330a      	adds	r3, #10
 8016b4e:	781b      	ldrb	r3, [r3, #0]
 8016b50:	2b02      	cmp	r3, #2
 8016b52:	d11f      	bne.n	8016b94 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8016b54:	7bfa      	ldrb	r2, [r7, #15]
 8016b56:	492f      	ldr	r1, [pc, #188]	; (8016c14 <dns_call_found+0x178>)
 8016b58:	4613      	mov	r3, r2
 8016b5a:	011b      	lsls	r3, r3, #4
 8016b5c:	4413      	add	r3, r2
 8016b5e:	011b      	lsls	r3, r3, #4
 8016b60:	440b      	add	r3, r1
 8016b62:	330f      	adds	r3, #15
 8016b64:	7819      	ldrb	r1, [r3, #0]
 8016b66:	79fa      	ldrb	r2, [r7, #7]
 8016b68:	482a      	ldr	r0, [pc, #168]	; (8016c14 <dns_call_found+0x178>)
 8016b6a:	4613      	mov	r3, r2
 8016b6c:	011b      	lsls	r3, r3, #4
 8016b6e:	4413      	add	r3, r2
 8016b70:	011b      	lsls	r3, r3, #4
 8016b72:	4403      	add	r3, r0
 8016b74:	330f      	adds	r3, #15
 8016b76:	781b      	ldrb	r3, [r3, #0]
 8016b78:	4299      	cmp	r1, r3
 8016b7a:	d10b      	bne.n	8016b94 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8016b7c:	79fa      	ldrb	r2, [r7, #7]
 8016b7e:	4925      	ldr	r1, [pc, #148]	; (8016c14 <dns_call_found+0x178>)
 8016b80:	4613      	mov	r3, r2
 8016b82:	011b      	lsls	r3, r3, #4
 8016b84:	4413      	add	r3, r2
 8016b86:	011b      	lsls	r3, r3, #4
 8016b88:	440b      	add	r3, r1
 8016b8a:	330f      	adds	r3, #15
 8016b8c:	2204      	movs	r2, #4
 8016b8e:	701a      	strb	r2, [r3, #0]
        break;
 8016b90:	e006      	b.n	8016ba0 <dns_call_found+0x104>
      continue; /* only check other requests */
 8016b92:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8016b94:	7bfb      	ldrb	r3, [r7, #15]
 8016b96:	3301      	adds	r3, #1
 8016b98:	73fb      	strb	r3, [r7, #15]
 8016b9a:	7bfb      	ldrb	r3, [r7, #15]
 8016b9c:	2b03      	cmp	r3, #3
 8016b9e:	d9ca      	bls.n	8016b36 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8016ba0:	79fa      	ldrb	r2, [r7, #7]
 8016ba2:	491c      	ldr	r1, [pc, #112]	; (8016c14 <dns_call_found+0x178>)
 8016ba4:	4613      	mov	r3, r2
 8016ba6:	011b      	lsls	r3, r3, #4
 8016ba8:	4413      	add	r3, r2
 8016baa:	011b      	lsls	r3, r3, #4
 8016bac:	440b      	add	r3, r1
 8016bae:	330f      	adds	r3, #15
 8016bb0:	781b      	ldrb	r3, [r3, #0]
 8016bb2:	2b03      	cmp	r3, #3
 8016bb4:	d827      	bhi.n	8016c06 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8016bb6:	79fa      	ldrb	r2, [r7, #7]
 8016bb8:	4916      	ldr	r1, [pc, #88]	; (8016c14 <dns_call_found+0x178>)
 8016bba:	4613      	mov	r3, r2
 8016bbc:	011b      	lsls	r3, r3, #4
 8016bbe:	4413      	add	r3, r2
 8016bc0:	011b      	lsls	r3, r3, #4
 8016bc2:	440b      	add	r3, r1
 8016bc4:	330f      	adds	r3, #15
 8016bc6:	781b      	ldrb	r3, [r3, #0]
 8016bc8:	461a      	mov	r2, r3
 8016bca:	4b13      	ldr	r3, [pc, #76]	; (8016c18 <dns_call_found+0x17c>)
 8016bcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	f009 f997 	bl	801ff04 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8016bd6:	79fa      	ldrb	r2, [r7, #7]
 8016bd8:	490e      	ldr	r1, [pc, #56]	; (8016c14 <dns_call_found+0x178>)
 8016bda:	4613      	mov	r3, r2
 8016bdc:	011b      	lsls	r3, r3, #4
 8016bde:	4413      	add	r3, r2
 8016be0:	011b      	lsls	r3, r3, #4
 8016be2:	440b      	add	r3, r1
 8016be4:	330f      	adds	r3, #15
 8016be6:	781b      	ldrb	r3, [r3, #0]
 8016be8:	4619      	mov	r1, r3
 8016bea:	4b0b      	ldr	r3, [pc, #44]	; (8016c18 <dns_call_found+0x17c>)
 8016bec:	2200      	movs	r2, #0
 8016bee:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8016bf2:	79fa      	ldrb	r2, [r7, #7]
 8016bf4:	4907      	ldr	r1, [pc, #28]	; (8016c14 <dns_call_found+0x178>)
 8016bf6:	4613      	mov	r3, r2
 8016bf8:	011b      	lsls	r3, r3, #4
 8016bfa:	4413      	add	r3, r2
 8016bfc:	011b      	lsls	r3, r3, #4
 8016bfe:	440b      	add	r3, r1
 8016c00:	330f      	adds	r3, #15
 8016c02:	2204      	movs	r2, #4
 8016c04:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8016c06:	bf00      	nop
 8016c08:	3714      	adds	r7, #20
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd90      	pop	{r4, r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	20012420 	.word	0x20012420
 8016c14:	20011fe0 	.word	0x20011fe0
 8016c18:	20011fd0 	.word	0x20011fd0

08016c1c <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b082      	sub	sp, #8
 8016c20:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8016c22:	f00d fad1 	bl	80241c8 <rand>
 8016c26:	4603      	mov	r3, r0
 8016c28:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8016c2a:	2300      	movs	r3, #0
 8016c2c:	71fb      	strb	r3, [r7, #7]
 8016c2e:	e01a      	b.n	8016c66 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8016c30:	79fa      	ldrb	r2, [r7, #7]
 8016c32:	4911      	ldr	r1, [pc, #68]	; (8016c78 <dns_create_txid+0x5c>)
 8016c34:	4613      	mov	r3, r2
 8016c36:	011b      	lsls	r3, r3, #4
 8016c38:	4413      	add	r3, r2
 8016c3a:	011b      	lsls	r3, r3, #4
 8016c3c:	440b      	add	r3, r1
 8016c3e:	330a      	adds	r3, #10
 8016c40:	781b      	ldrb	r3, [r3, #0]
 8016c42:	2b02      	cmp	r3, #2
 8016c44:	d10c      	bne.n	8016c60 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8016c46:	79fa      	ldrb	r2, [r7, #7]
 8016c48:	490b      	ldr	r1, [pc, #44]	; (8016c78 <dns_create_txid+0x5c>)
 8016c4a:	4613      	mov	r3, r2
 8016c4c:	011b      	lsls	r3, r3, #4
 8016c4e:	4413      	add	r3, r2
 8016c50:	011b      	lsls	r3, r3, #4
 8016c52:	440b      	add	r3, r1
 8016c54:	3308      	adds	r3, #8
 8016c56:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8016c58:	88ba      	ldrh	r2, [r7, #4]
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d100      	bne.n	8016c60 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8016c5e:	e7e0      	b.n	8016c22 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8016c60:	79fb      	ldrb	r3, [r7, #7]
 8016c62:	3301      	adds	r3, #1
 8016c64:	71fb      	strb	r3, [r7, #7]
 8016c66:	79fb      	ldrb	r3, [r7, #7]
 8016c68:	2b03      	cmp	r3, #3
 8016c6a:	d9e1      	bls.n	8016c30 <dns_create_txid+0x14>
    }
  }

  return txid;
 8016c6c:	88bb      	ldrh	r3, [r7, #4]
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3708      	adds	r7, #8
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
 8016c76:	bf00      	nop
 8016c78:	20011fe0 	.word	0x20011fe0

08016c7c <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8016c7c:	b480      	push	{r7}
 8016c7e:	b085      	sub	sp, #20
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8016c84:	2300      	movs	r3, #0
 8016c86:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d00d      	beq.n	8016caa <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	7adb      	ldrb	r3, [r3, #11]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d109      	bne.n	8016caa <dns_backupserver_available+0x2e>
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	7adb      	ldrb	r3, [r3, #11]
 8016c9a:	3301      	adds	r3, #1
 8016c9c:	4a06      	ldr	r2, [pc, #24]	; (8016cb8 <dns_backupserver_available+0x3c>)
 8016c9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d001      	beq.n	8016caa <dns_backupserver_available+0x2e>
      ret = 1;
 8016ca6:	2301      	movs	r3, #1
 8016ca8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8016caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cac:	4618      	mov	r0, r3
 8016cae:	3714      	adds	r7, #20
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb6:	4770      	bx	lr
 8016cb8:	20012450 	.word	0x20012450

08016cbc <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b084      	sub	sp, #16
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8016cc6:	79fa      	ldrb	r2, [r7, #7]
 8016cc8:	4613      	mov	r3, r2
 8016cca:	011b      	lsls	r3, r3, #4
 8016ccc:	4413      	add	r3, r2
 8016cce:	011b      	lsls	r3, r3, #4
 8016cd0:	4a48      	ldr	r2, [pc, #288]	; (8016df4 <dns_check_entry+0x138>)
 8016cd2:	4413      	add	r3, r2
 8016cd4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8016cd6:	79fb      	ldrb	r3, [r7, #7]
 8016cd8:	2b03      	cmp	r3, #3
 8016cda:	d906      	bls.n	8016cea <dns_check_entry+0x2e>
 8016cdc:	4b46      	ldr	r3, [pc, #280]	; (8016df8 <dns_check_entry+0x13c>)
 8016cde:	f240 421c 	movw	r2, #1052	; 0x41c
 8016ce2:	4946      	ldr	r1, [pc, #280]	; (8016dfc <dns_check_entry+0x140>)
 8016ce4:	4846      	ldr	r0, [pc, #280]	; (8016e00 <dns_check_entry+0x144>)
 8016ce6:	f00e f86b 	bl	8024dc0 <iprintf>

  switch (entry->state) {
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	7a9b      	ldrb	r3, [r3, #10]
 8016cee:	2b03      	cmp	r3, #3
 8016cf0:	d86f      	bhi.n	8016dd2 <dns_check_entry+0x116>
 8016cf2:	a201      	add	r2, pc, #4	; (adr r2, 8016cf8 <dns_check_entry+0x3c>)
 8016cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cf8:	08016de3 	.word	0x08016de3
 8016cfc:	08016d09 	.word	0x08016d09
 8016d00:	08016d3b 	.word	0x08016d3b
 8016d04:	08016db1 	.word	0x08016db1
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8016d08:	f7ff ff88 	bl	8016c1c <dns_create_txid>
 8016d0c:	4603      	mov	r3, r0
 8016d0e:	461a      	mov	r2, r3
 8016d10:	68fb      	ldr	r3, [r7, #12]
 8016d12:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	2202      	movs	r2, #2
 8016d18:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	2201      	movs	r2, #1
 8016d24:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8016d26:	68fb      	ldr	r3, [r7, #12]
 8016d28:	2200      	movs	r2, #0
 8016d2a:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8016d2c:	79fb      	ldrb	r3, [r7, #7]
 8016d2e:	4618      	mov	r0, r3
 8016d30:	f7ff fdc4 	bl	80168bc <dns_send>
 8016d34:	4603      	mov	r3, r0
 8016d36:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8016d38:	e058      	b.n	8016dec <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	7b1b      	ldrb	r3, [r3, #12]
 8016d3e:	3b01      	subs	r3, #1
 8016d40:	b2da      	uxtb	r2, r3
 8016d42:	68fb      	ldr	r3, [r7, #12]
 8016d44:	731a      	strb	r2, [r3, #12]
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	7b1b      	ldrb	r3, [r3, #12]
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d14b      	bne.n	8016de6 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8016d4e:	68fb      	ldr	r3, [r7, #12]
 8016d50:	7b5b      	ldrb	r3, [r3, #13]
 8016d52:	3301      	adds	r3, #1
 8016d54:	b2da      	uxtb	r2, r3
 8016d56:	68fb      	ldr	r3, [r7, #12]
 8016d58:	735a      	strb	r2, [r3, #13]
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	7b5b      	ldrb	r3, [r3, #13]
 8016d5e:	2b04      	cmp	r3, #4
 8016d60:	d11b      	bne.n	8016d9a <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8016d62:	68f8      	ldr	r0, [r7, #12]
 8016d64:	f7ff ff8a 	bl	8016c7c <dns_backupserver_available>
 8016d68:	4603      	mov	r3, r0
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d00c      	beq.n	8016d88 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8016d6e:	68fb      	ldr	r3, [r7, #12]
 8016d70:	7adb      	ldrb	r3, [r3, #11]
 8016d72:	3301      	adds	r3, #1
 8016d74:	b2da      	uxtb	r2, r3
 8016d76:	68fb      	ldr	r3, [r7, #12]
 8016d78:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	2201      	movs	r2, #1
 8016d7e:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8016d80:	68fb      	ldr	r3, [r7, #12]
 8016d82:	2200      	movs	r2, #0
 8016d84:	735a      	strb	r2, [r3, #13]
 8016d86:	e00c      	b.n	8016da2 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8016d88:	79fb      	ldrb	r3, [r7, #7]
 8016d8a:	2100      	movs	r1, #0
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	f7ff fe85 	bl	8016a9c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	2200      	movs	r2, #0
 8016d96:	729a      	strb	r2, [r3, #10]
            break;
 8016d98:	e028      	b.n	8016dec <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	7b5a      	ldrb	r2, [r3, #13]
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8016da2:	79fb      	ldrb	r3, [r7, #7]
 8016da4:	4618      	mov	r0, r3
 8016da6:	f7ff fd89 	bl	80168bc <dns_send>
 8016daa:	4603      	mov	r3, r0
 8016dac:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8016dae:	e01a      	b.n	8016de6 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8016db0:	68fb      	ldr	r3, [r7, #12]
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d008      	beq.n	8016dca <dns_check_entry+0x10e>
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	681b      	ldr	r3, [r3, #0]
 8016dbc:	1e5a      	subs	r2, r3, #1
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	601a      	str	r2, [r3, #0]
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d10f      	bne.n	8016dea <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	2200      	movs	r2, #0
 8016dce:	729a      	strb	r2, [r3, #10]
      }
      break;
 8016dd0:	e00b      	b.n	8016dea <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8016dd2:	4b09      	ldr	r3, [pc, #36]	; (8016df8 <dns_check_entry+0x13c>)
 8016dd4:	f240 425b 	movw	r2, #1115	; 0x45b
 8016dd8:	490a      	ldr	r1, [pc, #40]	; (8016e04 <dns_check_entry+0x148>)
 8016dda:	4809      	ldr	r0, [pc, #36]	; (8016e00 <dns_check_entry+0x144>)
 8016ddc:	f00d fff0 	bl	8024dc0 <iprintf>
      break;
 8016de0:	e004      	b.n	8016dec <dns_check_entry+0x130>
      break;
 8016de2:	bf00      	nop
 8016de4:	e002      	b.n	8016dec <dns_check_entry+0x130>
      break;
 8016de6:	bf00      	nop
 8016de8:	e000      	b.n	8016dec <dns_check_entry+0x130>
      break;
 8016dea:	bf00      	nop
  }
}
 8016dec:	bf00      	nop
 8016dee:	3710      	adds	r7, #16
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}
 8016df4:	20011fe0 	.word	0x20011fe0
 8016df8:	0802b14c 	.word	0x0802b14c
 8016dfc:	0802b1bc 	.word	0x0802b1bc
 8016e00:	0802b194 	.word	0x0802b194
 8016e04:	0802b1d8 	.word	0x0802b1d8

08016e08 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b082      	sub	sp, #8
 8016e0c:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8016e0e:	2300      	movs	r3, #0
 8016e10:	71fb      	strb	r3, [r7, #7]
 8016e12:	e006      	b.n	8016e22 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8016e14:	79fb      	ldrb	r3, [r7, #7]
 8016e16:	4618      	mov	r0, r3
 8016e18:	f7ff ff50 	bl	8016cbc <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8016e1c:	79fb      	ldrb	r3, [r7, #7]
 8016e1e:	3301      	adds	r3, #1
 8016e20:	71fb      	strb	r3, [r7, #7]
 8016e22:	79fb      	ldrb	r3, [r7, #7]
 8016e24:	2b03      	cmp	r3, #3
 8016e26:	d9f5      	bls.n	8016e14 <dns_check_entries+0xc>
  }
}
 8016e28:	bf00      	nop
 8016e2a:	bf00      	nop
 8016e2c:	3708      	adds	r7, #8
 8016e2e:	46bd      	mov	sp, r7
 8016e30:	bd80      	pop	{r7, pc}

08016e32 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8016e32:	b580      	push	{r7, lr}
 8016e34:	b082      	sub	sp, #8
 8016e36:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8016e3c:	f00b fed0 	bl	8022be0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8016e40:	f000 f8d6 	bl	8016ff0 <mem_init>
  memp_init();
 8016e44:	f000 fc32 	bl	80176ac <memp_init>
  pbuf_init();
  netif_init();
 8016e48:	f000 fd3e 	bl	80178c8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8016e4c:	f008 fb58 	bl	801f500 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8016e50:	f001 ffb8 	bl	8018dc4 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8016e54:	f7ff fd24 	bl	80168a0 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8016e58:	f008 fa98 	bl	801f38c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8016e5c:	bf00      	nop
 8016e5e:	3708      	adds	r7, #8
 8016e60:	46bd      	mov	sp, r7
 8016e62:	bd80      	pop	{r7, pc}

08016e64 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8016e64:	b480      	push	{r7}
 8016e66:	b083      	sub	sp, #12
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8016e6e:	4b05      	ldr	r3, [pc, #20]	; (8016e84 <ptr_to_mem+0x20>)
 8016e70:	681a      	ldr	r2, [r3, #0]
 8016e72:	88fb      	ldrh	r3, [r7, #6]
 8016e74:	4413      	add	r3, r2
}
 8016e76:	4618      	mov	r0, r3
 8016e78:	370c      	adds	r7, #12
 8016e7a:	46bd      	mov	sp, r7
 8016e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e80:	4770      	bx	lr
 8016e82:	bf00      	nop
 8016e84:	20012c84 	.word	0x20012c84

08016e88 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8016e88:	b480      	push	{r7}
 8016e8a:	b083      	sub	sp, #12
 8016e8c:	af00      	add	r7, sp, #0
 8016e8e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8016e90:	4b05      	ldr	r3, [pc, #20]	; (8016ea8 <mem_to_ptr+0x20>)
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	687a      	ldr	r2, [r7, #4]
 8016e96:	1ad3      	subs	r3, r2, r3
 8016e98:	b29b      	uxth	r3, r3
}
 8016e9a:	4618      	mov	r0, r3
 8016e9c:	370c      	adds	r7, #12
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea4:	4770      	bx	lr
 8016ea6:	bf00      	nop
 8016ea8:	20012c84 	.word	0x20012c84

08016eac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8016eac:	b590      	push	{r4, r7, lr}
 8016eae:	b085      	sub	sp, #20
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8016eb4:	4b45      	ldr	r3, [pc, #276]	; (8016fcc <plug_holes+0x120>)
 8016eb6:	681b      	ldr	r3, [r3, #0]
 8016eb8:	687a      	ldr	r2, [r7, #4]
 8016eba:	429a      	cmp	r2, r3
 8016ebc:	d206      	bcs.n	8016ecc <plug_holes+0x20>
 8016ebe:	4b44      	ldr	r3, [pc, #272]	; (8016fd0 <plug_holes+0x124>)
 8016ec0:	f240 12df 	movw	r2, #479	; 0x1df
 8016ec4:	4943      	ldr	r1, [pc, #268]	; (8016fd4 <plug_holes+0x128>)
 8016ec6:	4844      	ldr	r0, [pc, #272]	; (8016fd8 <plug_holes+0x12c>)
 8016ec8:	f00d ff7a 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8016ecc:	4b43      	ldr	r3, [pc, #268]	; (8016fdc <plug_holes+0x130>)
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	687a      	ldr	r2, [r7, #4]
 8016ed2:	429a      	cmp	r2, r3
 8016ed4:	d306      	bcc.n	8016ee4 <plug_holes+0x38>
 8016ed6:	4b3e      	ldr	r3, [pc, #248]	; (8016fd0 <plug_holes+0x124>)
 8016ed8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016edc:	4940      	ldr	r1, [pc, #256]	; (8016fe0 <plug_holes+0x134>)
 8016ede:	483e      	ldr	r0, [pc, #248]	; (8016fd8 <plug_holes+0x12c>)
 8016ee0:	f00d ff6e 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	791b      	ldrb	r3, [r3, #4]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	d006      	beq.n	8016efa <plug_holes+0x4e>
 8016eec:	4b38      	ldr	r3, [pc, #224]	; (8016fd0 <plug_holes+0x124>)
 8016eee:	f240 12e1 	movw	r2, #481	; 0x1e1
 8016ef2:	493c      	ldr	r1, [pc, #240]	; (8016fe4 <plug_holes+0x138>)
 8016ef4:	4838      	ldr	r0, [pc, #224]	; (8016fd8 <plug_holes+0x12c>)
 8016ef6:	f00d ff63 	bl	8024dc0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	881b      	ldrh	r3, [r3, #0]
 8016efe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016f02:	d906      	bls.n	8016f12 <plug_holes+0x66>
 8016f04:	4b32      	ldr	r3, [pc, #200]	; (8016fd0 <plug_holes+0x124>)
 8016f06:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8016f0a:	4937      	ldr	r1, [pc, #220]	; (8016fe8 <plug_holes+0x13c>)
 8016f0c:	4832      	ldr	r0, [pc, #200]	; (8016fd8 <plug_holes+0x12c>)
 8016f0e:	f00d ff57 	bl	8024dc0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	881b      	ldrh	r3, [r3, #0]
 8016f16:	4618      	mov	r0, r3
 8016f18:	f7ff ffa4 	bl	8016e64 <ptr_to_mem>
 8016f1c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8016f1e:	687a      	ldr	r2, [r7, #4]
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	429a      	cmp	r2, r3
 8016f24:	d024      	beq.n	8016f70 <plug_holes+0xc4>
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	791b      	ldrb	r3, [r3, #4]
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d120      	bne.n	8016f70 <plug_holes+0xc4>
 8016f2e:	4b2b      	ldr	r3, [pc, #172]	; (8016fdc <plug_holes+0x130>)
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	68fa      	ldr	r2, [r7, #12]
 8016f34:	429a      	cmp	r2, r3
 8016f36:	d01b      	beq.n	8016f70 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8016f38:	4b2c      	ldr	r3, [pc, #176]	; (8016fec <plug_holes+0x140>)
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	68fa      	ldr	r2, [r7, #12]
 8016f3e:	429a      	cmp	r2, r3
 8016f40:	d102      	bne.n	8016f48 <plug_holes+0x9c>
      lfree = mem;
 8016f42:	4a2a      	ldr	r2, [pc, #168]	; (8016fec <plug_holes+0x140>)
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	881a      	ldrh	r2, [r3, #0]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	881b      	ldrh	r3, [r3, #0]
 8016f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016f58:	d00a      	beq.n	8016f70 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	881b      	ldrh	r3, [r3, #0]
 8016f5e:	4618      	mov	r0, r3
 8016f60:	f7ff ff80 	bl	8016e64 <ptr_to_mem>
 8016f64:	4604      	mov	r4, r0
 8016f66:	6878      	ldr	r0, [r7, #4]
 8016f68:	f7ff ff8e 	bl	8016e88 <mem_to_ptr>
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	885b      	ldrh	r3, [r3, #2]
 8016f74:	4618      	mov	r0, r3
 8016f76:	f7ff ff75 	bl	8016e64 <ptr_to_mem>
 8016f7a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8016f7c:	68ba      	ldr	r2, [r7, #8]
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	429a      	cmp	r2, r3
 8016f82:	d01f      	beq.n	8016fc4 <plug_holes+0x118>
 8016f84:	68bb      	ldr	r3, [r7, #8]
 8016f86:	791b      	ldrb	r3, [r3, #4]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d11b      	bne.n	8016fc4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8016f8c:	4b17      	ldr	r3, [pc, #92]	; (8016fec <plug_holes+0x140>)
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	687a      	ldr	r2, [r7, #4]
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d102      	bne.n	8016f9c <plug_holes+0xf0>
      lfree = pmem;
 8016f96:	4a15      	ldr	r2, [pc, #84]	; (8016fec <plug_holes+0x140>)
 8016f98:	68bb      	ldr	r3, [r7, #8]
 8016f9a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	881a      	ldrh	r2, [r3, #0]
 8016fa0:	68bb      	ldr	r3, [r7, #8]
 8016fa2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	881b      	ldrh	r3, [r3, #0]
 8016fa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016fac:	d00a      	beq.n	8016fc4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	881b      	ldrh	r3, [r3, #0]
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f7ff ff56 	bl	8016e64 <ptr_to_mem>
 8016fb8:	4604      	mov	r4, r0
 8016fba:	68b8      	ldr	r0, [r7, #8]
 8016fbc:	f7ff ff64 	bl	8016e88 <mem_to_ptr>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8016fc4:	bf00      	nop
 8016fc6:	3714      	adds	r7, #20
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	bd90      	pop	{r4, r7, pc}
 8016fcc:	20012c84 	.word	0x20012c84
 8016fd0:	0802b1f8 	.word	0x0802b1f8
 8016fd4:	0802b228 	.word	0x0802b228
 8016fd8:	0802b240 	.word	0x0802b240
 8016fdc:	20012c88 	.word	0x20012c88
 8016fe0:	0802b268 	.word	0x0802b268
 8016fe4:	0802b284 	.word	0x0802b284
 8016fe8:	0802b2a0 	.word	0x0802b2a0
 8016fec:	20012c90 	.word	0x20012c90

08016ff0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8016ff0:	b580      	push	{r7, lr}
 8016ff2:	b082      	sub	sp, #8
 8016ff4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8016ff6:	4b1f      	ldr	r3, [pc, #124]	; (8017074 <mem_init+0x84>)
 8016ff8:	3303      	adds	r3, #3
 8016ffa:	f023 0303 	bic.w	r3, r3, #3
 8016ffe:	461a      	mov	r2, r3
 8017000:	4b1d      	ldr	r3, [pc, #116]	; (8017078 <mem_init+0x88>)
 8017002:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8017004:	4b1c      	ldr	r3, [pc, #112]	; (8017078 <mem_init+0x88>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017010:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	2200      	movs	r2, #0
 8017016:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	2200      	movs	r2, #0
 801701c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801701e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8017022:	f7ff ff1f 	bl	8016e64 <ptr_to_mem>
 8017026:	4603      	mov	r3, r0
 8017028:	4a14      	ldr	r2, [pc, #80]	; (801707c <mem_init+0x8c>)
 801702a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801702c:	4b13      	ldr	r3, [pc, #76]	; (801707c <mem_init+0x8c>)
 801702e:	681b      	ldr	r3, [r3, #0]
 8017030:	2201      	movs	r2, #1
 8017032:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8017034:	4b11      	ldr	r3, [pc, #68]	; (801707c <mem_init+0x8c>)
 8017036:	681b      	ldr	r3, [r3, #0]
 8017038:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801703c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801703e:	4b0f      	ldr	r3, [pc, #60]	; (801707c <mem_init+0x8c>)
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017046:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8017048:	4b0b      	ldr	r3, [pc, #44]	; (8017078 <mem_init+0x88>)
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	4a0c      	ldr	r2, [pc, #48]	; (8017080 <mem_init+0x90>)
 801704e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8017050:	480c      	ldr	r0, [pc, #48]	; (8017084 <mem_init+0x94>)
 8017052:	f00b fdd3 	bl	8022bfc <sys_mutex_new>
 8017056:	4603      	mov	r3, r0
 8017058:	2b00      	cmp	r3, #0
 801705a:	d006      	beq.n	801706a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 801705c:	4b0a      	ldr	r3, [pc, #40]	; (8017088 <mem_init+0x98>)
 801705e:	f240 221f 	movw	r2, #543	; 0x21f
 8017062:	490a      	ldr	r1, [pc, #40]	; (801708c <mem_init+0x9c>)
 8017064:	480a      	ldr	r0, [pc, #40]	; (8017090 <mem_init+0xa0>)
 8017066:	f00d feab 	bl	8024dc0 <iprintf>
  }
}
 801706a:	bf00      	nop
 801706c:	3708      	adds	r7, #8
 801706e:	46bd      	mov	sp, r7
 8017070:	bd80      	pop	{r7, pc}
 8017072:	bf00      	nop
 8017074:	20012470 	.word	0x20012470
 8017078:	20012c84 	.word	0x20012c84
 801707c:	20012c88 	.word	0x20012c88
 8017080:	20012c90 	.word	0x20012c90
 8017084:	20012c8c 	.word	0x20012c8c
 8017088:	0802b1f8 	.word	0x0802b1f8
 801708c:	0802b2cc 	.word	0x0802b2cc
 8017090:	0802b240 	.word	0x0802b240

08017094 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8017094:	b580      	push	{r7, lr}
 8017096:	b086      	sub	sp, #24
 8017098:	af00      	add	r7, sp, #0
 801709a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801709c:	6878      	ldr	r0, [r7, #4]
 801709e:	f7ff fef3 	bl	8016e88 <mem_to_ptr>
 80170a2:	4603      	mov	r3, r0
 80170a4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	881b      	ldrh	r3, [r3, #0]
 80170aa:	4618      	mov	r0, r3
 80170ac:	f7ff feda 	bl	8016e64 <ptr_to_mem>
 80170b0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	885b      	ldrh	r3, [r3, #2]
 80170b6:	4618      	mov	r0, r3
 80170b8:	f7ff fed4 	bl	8016e64 <ptr_to_mem>
 80170bc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	881b      	ldrh	r3, [r3, #0]
 80170c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80170c6:	d818      	bhi.n	80170fa <mem_link_valid+0x66>
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	885b      	ldrh	r3, [r3, #2]
 80170cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80170d0:	d813      	bhi.n	80170fa <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80170d6:	8afa      	ldrh	r2, [r7, #22]
 80170d8:	429a      	cmp	r2, r3
 80170da:	d004      	beq.n	80170e6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	881b      	ldrh	r3, [r3, #0]
 80170e0:	8afa      	ldrh	r2, [r7, #22]
 80170e2:	429a      	cmp	r2, r3
 80170e4:	d109      	bne.n	80170fa <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80170e6:	4b08      	ldr	r3, [pc, #32]	; (8017108 <mem_link_valid+0x74>)
 80170e8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80170ea:	693a      	ldr	r2, [r7, #16]
 80170ec:	429a      	cmp	r2, r3
 80170ee:	d006      	beq.n	80170fe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80170f0:	693b      	ldr	r3, [r7, #16]
 80170f2:	885b      	ldrh	r3, [r3, #2]
 80170f4:	8afa      	ldrh	r2, [r7, #22]
 80170f6:	429a      	cmp	r2, r3
 80170f8:	d001      	beq.n	80170fe <mem_link_valid+0x6a>
    return 0;
 80170fa:	2300      	movs	r3, #0
 80170fc:	e000      	b.n	8017100 <mem_link_valid+0x6c>
  }
  return 1;
 80170fe:	2301      	movs	r3, #1
}
 8017100:	4618      	mov	r0, r3
 8017102:	3718      	adds	r7, #24
 8017104:	46bd      	mov	sp, r7
 8017106:	bd80      	pop	{r7, pc}
 8017108:	20012c88 	.word	0x20012c88

0801710c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801710c:	b580      	push	{r7, lr}
 801710e:	b088      	sub	sp, #32
 8017110:	af00      	add	r7, sp, #0
 8017112:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8017114:	687b      	ldr	r3, [r7, #4]
 8017116:	2b00      	cmp	r3, #0
 8017118:	d070      	beq.n	80171fc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	f003 0303 	and.w	r3, r3, #3
 8017120:	2b00      	cmp	r3, #0
 8017122:	d00d      	beq.n	8017140 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8017124:	4b37      	ldr	r3, [pc, #220]	; (8017204 <mem_free+0xf8>)
 8017126:	f240 2273 	movw	r2, #627	; 0x273
 801712a:	4937      	ldr	r1, [pc, #220]	; (8017208 <mem_free+0xfc>)
 801712c:	4837      	ldr	r0, [pc, #220]	; (801720c <mem_free+0x100>)
 801712e:	f00d fe47 	bl	8024dc0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017132:	f00b fdc1 	bl	8022cb8 <sys_arch_protect>
 8017136:	60f8      	str	r0, [r7, #12]
 8017138:	68f8      	ldr	r0, [r7, #12]
 801713a:	f00b fdcb 	bl	8022cd4 <sys_arch_unprotect>
    return;
 801713e:	e05e      	b.n	80171fe <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017140:	687b      	ldr	r3, [r7, #4]
 8017142:	3b08      	subs	r3, #8
 8017144:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8017146:	4b32      	ldr	r3, [pc, #200]	; (8017210 <mem_free+0x104>)
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	69fa      	ldr	r2, [r7, #28]
 801714c:	429a      	cmp	r2, r3
 801714e:	d306      	bcc.n	801715e <mem_free+0x52>
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	f103 020c 	add.w	r2, r3, #12
 8017156:	4b2f      	ldr	r3, [pc, #188]	; (8017214 <mem_free+0x108>)
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	429a      	cmp	r2, r3
 801715c:	d90d      	bls.n	801717a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801715e:	4b29      	ldr	r3, [pc, #164]	; (8017204 <mem_free+0xf8>)
 8017160:	f240 227f 	movw	r2, #639	; 0x27f
 8017164:	492c      	ldr	r1, [pc, #176]	; (8017218 <mem_free+0x10c>)
 8017166:	4829      	ldr	r0, [pc, #164]	; (801720c <mem_free+0x100>)
 8017168:	f00d fe2a 	bl	8024dc0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801716c:	f00b fda4 	bl	8022cb8 <sys_arch_protect>
 8017170:	6138      	str	r0, [r7, #16]
 8017172:	6938      	ldr	r0, [r7, #16]
 8017174:	f00b fdae 	bl	8022cd4 <sys_arch_unprotect>
    return;
 8017178:	e041      	b.n	80171fe <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801717a:	4828      	ldr	r0, [pc, #160]	; (801721c <mem_free+0x110>)
 801717c:	f00b fd5a 	bl	8022c34 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8017180:	69fb      	ldr	r3, [r7, #28]
 8017182:	791b      	ldrb	r3, [r3, #4]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d110      	bne.n	80171aa <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8017188:	4b1e      	ldr	r3, [pc, #120]	; (8017204 <mem_free+0xf8>)
 801718a:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801718e:	4924      	ldr	r1, [pc, #144]	; (8017220 <mem_free+0x114>)
 8017190:	481e      	ldr	r0, [pc, #120]	; (801720c <mem_free+0x100>)
 8017192:	f00d fe15 	bl	8024dc0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8017196:	4821      	ldr	r0, [pc, #132]	; (801721c <mem_free+0x110>)
 8017198:	f00b fd5b 	bl	8022c52 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801719c:	f00b fd8c 	bl	8022cb8 <sys_arch_protect>
 80171a0:	6178      	str	r0, [r7, #20]
 80171a2:	6978      	ldr	r0, [r7, #20]
 80171a4:	f00b fd96 	bl	8022cd4 <sys_arch_unprotect>
    return;
 80171a8:	e029      	b.n	80171fe <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80171aa:	69f8      	ldr	r0, [r7, #28]
 80171ac:	f7ff ff72 	bl	8017094 <mem_link_valid>
 80171b0:	4603      	mov	r3, r0
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d110      	bne.n	80171d8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80171b6:	4b13      	ldr	r3, [pc, #76]	; (8017204 <mem_free+0xf8>)
 80171b8:	f240 2295 	movw	r2, #661	; 0x295
 80171bc:	4919      	ldr	r1, [pc, #100]	; (8017224 <mem_free+0x118>)
 80171be:	4813      	ldr	r0, [pc, #76]	; (801720c <mem_free+0x100>)
 80171c0:	f00d fdfe 	bl	8024dc0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80171c4:	4815      	ldr	r0, [pc, #84]	; (801721c <mem_free+0x110>)
 80171c6:	f00b fd44 	bl	8022c52 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80171ca:	f00b fd75 	bl	8022cb8 <sys_arch_protect>
 80171ce:	61b8      	str	r0, [r7, #24]
 80171d0:	69b8      	ldr	r0, [r7, #24]
 80171d2:	f00b fd7f 	bl	8022cd4 <sys_arch_unprotect>
    return;
 80171d6:	e012      	b.n	80171fe <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80171d8:	69fb      	ldr	r3, [r7, #28]
 80171da:	2200      	movs	r2, #0
 80171dc:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80171de:	4b12      	ldr	r3, [pc, #72]	; (8017228 <mem_free+0x11c>)
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	69fa      	ldr	r2, [r7, #28]
 80171e4:	429a      	cmp	r2, r3
 80171e6:	d202      	bcs.n	80171ee <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80171e8:	4a0f      	ldr	r2, [pc, #60]	; (8017228 <mem_free+0x11c>)
 80171ea:	69fb      	ldr	r3, [r7, #28]
 80171ec:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80171ee:	69f8      	ldr	r0, [r7, #28]
 80171f0:	f7ff fe5c 	bl	8016eac <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80171f4:	4809      	ldr	r0, [pc, #36]	; (801721c <mem_free+0x110>)
 80171f6:	f00b fd2c 	bl	8022c52 <sys_mutex_unlock>
 80171fa:	e000      	b.n	80171fe <mem_free+0xf2>
    return;
 80171fc:	bf00      	nop
}
 80171fe:	3720      	adds	r7, #32
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}
 8017204:	0802b1f8 	.word	0x0802b1f8
 8017208:	0802b2e8 	.word	0x0802b2e8
 801720c:	0802b240 	.word	0x0802b240
 8017210:	20012c84 	.word	0x20012c84
 8017214:	20012c88 	.word	0x20012c88
 8017218:	0802b30c 	.word	0x0802b30c
 801721c:	20012c8c 	.word	0x20012c8c
 8017220:	0802b328 	.word	0x0802b328
 8017224:	0802b350 	.word	0x0802b350
 8017228:	20012c90 	.word	0x20012c90

0801722c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b088      	sub	sp, #32
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
 8017234:	460b      	mov	r3, r1
 8017236:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8017238:	887b      	ldrh	r3, [r7, #2]
 801723a:	3303      	adds	r3, #3
 801723c:	b29b      	uxth	r3, r3
 801723e:	f023 0303 	bic.w	r3, r3, #3
 8017242:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8017244:	8bfb      	ldrh	r3, [r7, #30]
 8017246:	2b0b      	cmp	r3, #11
 8017248:	d801      	bhi.n	801724e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801724a:	230c      	movs	r3, #12
 801724c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801724e:	8bfb      	ldrh	r3, [r7, #30]
 8017250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017254:	d803      	bhi.n	801725e <mem_trim+0x32>
 8017256:	8bfa      	ldrh	r2, [r7, #30]
 8017258:	887b      	ldrh	r3, [r7, #2]
 801725a:	429a      	cmp	r2, r3
 801725c:	d201      	bcs.n	8017262 <mem_trim+0x36>
    return NULL;
 801725e:	2300      	movs	r3, #0
 8017260:	e0d8      	b.n	8017414 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017262:	4b6e      	ldr	r3, [pc, #440]	; (801741c <mem_trim+0x1f0>)
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	687a      	ldr	r2, [r7, #4]
 8017268:	429a      	cmp	r2, r3
 801726a:	d304      	bcc.n	8017276 <mem_trim+0x4a>
 801726c:	4b6c      	ldr	r3, [pc, #432]	; (8017420 <mem_trim+0x1f4>)
 801726e:	681b      	ldr	r3, [r3, #0]
 8017270:	687a      	ldr	r2, [r7, #4]
 8017272:	429a      	cmp	r2, r3
 8017274:	d306      	bcc.n	8017284 <mem_trim+0x58>
 8017276:	4b6b      	ldr	r3, [pc, #428]	; (8017424 <mem_trim+0x1f8>)
 8017278:	f240 22d1 	movw	r2, #721	; 0x2d1
 801727c:	496a      	ldr	r1, [pc, #424]	; (8017428 <mem_trim+0x1fc>)
 801727e:	486b      	ldr	r0, [pc, #428]	; (801742c <mem_trim+0x200>)
 8017280:	f00d fd9e 	bl	8024dc0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017284:	4b65      	ldr	r3, [pc, #404]	; (801741c <mem_trim+0x1f0>)
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	687a      	ldr	r2, [r7, #4]
 801728a:	429a      	cmp	r2, r3
 801728c:	d304      	bcc.n	8017298 <mem_trim+0x6c>
 801728e:	4b64      	ldr	r3, [pc, #400]	; (8017420 <mem_trim+0x1f4>)
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	687a      	ldr	r2, [r7, #4]
 8017294:	429a      	cmp	r2, r3
 8017296:	d307      	bcc.n	80172a8 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017298:	f00b fd0e 	bl	8022cb8 <sys_arch_protect>
 801729c:	60b8      	str	r0, [r7, #8]
 801729e:	68b8      	ldr	r0, [r7, #8]
 80172a0:	f00b fd18 	bl	8022cd4 <sys_arch_unprotect>
    return rmem;
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	e0b5      	b.n	8017414 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	3b08      	subs	r3, #8
 80172ac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80172ae:	69b8      	ldr	r0, [r7, #24]
 80172b0:	f7ff fdea 	bl	8016e88 <mem_to_ptr>
 80172b4:	4603      	mov	r3, r0
 80172b6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80172b8:	69bb      	ldr	r3, [r7, #24]
 80172ba:	881a      	ldrh	r2, [r3, #0]
 80172bc:	8afb      	ldrh	r3, [r7, #22]
 80172be:	1ad3      	subs	r3, r2, r3
 80172c0:	b29b      	uxth	r3, r3
 80172c2:	3b08      	subs	r3, #8
 80172c4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80172c6:	8bfa      	ldrh	r2, [r7, #30]
 80172c8:	8abb      	ldrh	r3, [r7, #20]
 80172ca:	429a      	cmp	r2, r3
 80172cc:	d906      	bls.n	80172dc <mem_trim+0xb0>
 80172ce:	4b55      	ldr	r3, [pc, #340]	; (8017424 <mem_trim+0x1f8>)
 80172d0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80172d4:	4956      	ldr	r1, [pc, #344]	; (8017430 <mem_trim+0x204>)
 80172d6:	4855      	ldr	r0, [pc, #340]	; (801742c <mem_trim+0x200>)
 80172d8:	f00d fd72 	bl	8024dc0 <iprintf>
  if (newsize > size) {
 80172dc:	8bfa      	ldrh	r2, [r7, #30]
 80172de:	8abb      	ldrh	r3, [r7, #20]
 80172e0:	429a      	cmp	r2, r3
 80172e2:	d901      	bls.n	80172e8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80172e4:	2300      	movs	r3, #0
 80172e6:	e095      	b.n	8017414 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 80172e8:	8bfa      	ldrh	r2, [r7, #30]
 80172ea:	8abb      	ldrh	r3, [r7, #20]
 80172ec:	429a      	cmp	r2, r3
 80172ee:	d101      	bne.n	80172f4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	e08f      	b.n	8017414 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80172f4:	484f      	ldr	r0, [pc, #316]	; (8017434 <mem_trim+0x208>)
 80172f6:	f00b fc9d 	bl	8022c34 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80172fa:	69bb      	ldr	r3, [r7, #24]
 80172fc:	881b      	ldrh	r3, [r3, #0]
 80172fe:	4618      	mov	r0, r3
 8017300:	f7ff fdb0 	bl	8016e64 <ptr_to_mem>
 8017304:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8017306:	693b      	ldr	r3, [r7, #16]
 8017308:	791b      	ldrb	r3, [r3, #4]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d13f      	bne.n	801738e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801730e:	69bb      	ldr	r3, [r7, #24]
 8017310:	881b      	ldrh	r3, [r3, #0]
 8017312:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017316:	d106      	bne.n	8017326 <mem_trim+0xfa>
 8017318:	4b42      	ldr	r3, [pc, #264]	; (8017424 <mem_trim+0x1f8>)
 801731a:	f240 22f5 	movw	r2, #757	; 0x2f5
 801731e:	4946      	ldr	r1, [pc, #280]	; (8017438 <mem_trim+0x20c>)
 8017320:	4842      	ldr	r0, [pc, #264]	; (801742c <mem_trim+0x200>)
 8017322:	f00d fd4d 	bl	8024dc0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8017326:	693b      	ldr	r3, [r7, #16]
 8017328:	881b      	ldrh	r3, [r3, #0]
 801732a:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801732c:	8afa      	ldrh	r2, [r7, #22]
 801732e:	8bfb      	ldrh	r3, [r7, #30]
 8017330:	4413      	add	r3, r2
 8017332:	b29b      	uxth	r3, r3
 8017334:	3308      	adds	r3, #8
 8017336:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8017338:	4b40      	ldr	r3, [pc, #256]	; (801743c <mem_trim+0x210>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	693a      	ldr	r2, [r7, #16]
 801733e:	429a      	cmp	r2, r3
 8017340:	d106      	bne.n	8017350 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8017342:	89fb      	ldrh	r3, [r7, #14]
 8017344:	4618      	mov	r0, r3
 8017346:	f7ff fd8d 	bl	8016e64 <ptr_to_mem>
 801734a:	4603      	mov	r3, r0
 801734c:	4a3b      	ldr	r2, [pc, #236]	; (801743c <mem_trim+0x210>)
 801734e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8017350:	89fb      	ldrh	r3, [r7, #14]
 8017352:	4618      	mov	r0, r3
 8017354:	f7ff fd86 	bl	8016e64 <ptr_to_mem>
 8017358:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801735a:	693b      	ldr	r3, [r7, #16]
 801735c:	2200      	movs	r2, #0
 801735e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017360:	693b      	ldr	r3, [r7, #16]
 8017362:	89ba      	ldrh	r2, [r7, #12]
 8017364:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8017366:	693b      	ldr	r3, [r7, #16]
 8017368:	8afa      	ldrh	r2, [r7, #22]
 801736a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801736c:	69bb      	ldr	r3, [r7, #24]
 801736e:	89fa      	ldrh	r2, [r7, #14]
 8017370:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017372:	693b      	ldr	r3, [r7, #16]
 8017374:	881b      	ldrh	r3, [r3, #0]
 8017376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801737a:	d047      	beq.n	801740c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801737c:	693b      	ldr	r3, [r7, #16]
 801737e:	881b      	ldrh	r3, [r3, #0]
 8017380:	4618      	mov	r0, r3
 8017382:	f7ff fd6f 	bl	8016e64 <ptr_to_mem>
 8017386:	4602      	mov	r2, r0
 8017388:	89fb      	ldrh	r3, [r7, #14]
 801738a:	8053      	strh	r3, [r2, #2]
 801738c:	e03e      	b.n	801740c <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801738e:	8bfb      	ldrh	r3, [r7, #30]
 8017390:	f103 0214 	add.w	r2, r3, #20
 8017394:	8abb      	ldrh	r3, [r7, #20]
 8017396:	429a      	cmp	r2, r3
 8017398:	d838      	bhi.n	801740c <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801739a:	8afa      	ldrh	r2, [r7, #22]
 801739c:	8bfb      	ldrh	r3, [r7, #30]
 801739e:	4413      	add	r3, r2
 80173a0:	b29b      	uxth	r3, r3
 80173a2:	3308      	adds	r3, #8
 80173a4:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80173a6:	69bb      	ldr	r3, [r7, #24]
 80173a8:	881b      	ldrh	r3, [r3, #0]
 80173aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80173ae:	d106      	bne.n	80173be <mem_trim+0x192>
 80173b0:	4b1c      	ldr	r3, [pc, #112]	; (8017424 <mem_trim+0x1f8>)
 80173b2:	f240 3216 	movw	r2, #790	; 0x316
 80173b6:	4920      	ldr	r1, [pc, #128]	; (8017438 <mem_trim+0x20c>)
 80173b8:	481c      	ldr	r0, [pc, #112]	; (801742c <mem_trim+0x200>)
 80173ba:	f00d fd01 	bl	8024dc0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80173be:	89fb      	ldrh	r3, [r7, #14]
 80173c0:	4618      	mov	r0, r3
 80173c2:	f7ff fd4f 	bl	8016e64 <ptr_to_mem>
 80173c6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80173c8:	4b1c      	ldr	r3, [pc, #112]	; (801743c <mem_trim+0x210>)
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	693a      	ldr	r2, [r7, #16]
 80173ce:	429a      	cmp	r2, r3
 80173d0:	d202      	bcs.n	80173d8 <mem_trim+0x1ac>
      lfree = mem2;
 80173d2:	4a1a      	ldr	r2, [pc, #104]	; (801743c <mem_trim+0x210>)
 80173d4:	693b      	ldr	r3, [r7, #16]
 80173d6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80173d8:	693b      	ldr	r3, [r7, #16]
 80173da:	2200      	movs	r2, #0
 80173dc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80173de:	69bb      	ldr	r3, [r7, #24]
 80173e0:	881a      	ldrh	r2, [r3, #0]
 80173e2:	693b      	ldr	r3, [r7, #16]
 80173e4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80173e6:	693b      	ldr	r3, [r7, #16]
 80173e8:	8afa      	ldrh	r2, [r7, #22]
 80173ea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80173ec:	69bb      	ldr	r3, [r7, #24]
 80173ee:	89fa      	ldrh	r2, [r7, #14]
 80173f0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80173f2:	693b      	ldr	r3, [r7, #16]
 80173f4:	881b      	ldrh	r3, [r3, #0]
 80173f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80173fa:	d007      	beq.n	801740c <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80173fc:	693b      	ldr	r3, [r7, #16]
 80173fe:	881b      	ldrh	r3, [r3, #0]
 8017400:	4618      	mov	r0, r3
 8017402:	f7ff fd2f 	bl	8016e64 <ptr_to_mem>
 8017406:	4602      	mov	r2, r0
 8017408:	89fb      	ldrh	r3, [r7, #14]
 801740a:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801740c:	4809      	ldr	r0, [pc, #36]	; (8017434 <mem_trim+0x208>)
 801740e:	f00b fc20 	bl	8022c52 <sys_mutex_unlock>
  return rmem;
 8017412:	687b      	ldr	r3, [r7, #4]
}
 8017414:	4618      	mov	r0, r3
 8017416:	3720      	adds	r7, #32
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}
 801741c:	20012c84 	.word	0x20012c84
 8017420:	20012c88 	.word	0x20012c88
 8017424:	0802b1f8 	.word	0x0802b1f8
 8017428:	0802b384 	.word	0x0802b384
 801742c:	0802b240 	.word	0x0802b240
 8017430:	0802b39c 	.word	0x0802b39c
 8017434:	20012c8c 	.word	0x20012c8c
 8017438:	0802b3bc 	.word	0x0802b3bc
 801743c:	20012c90 	.word	0x20012c90

08017440 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b088      	sub	sp, #32
 8017444:	af00      	add	r7, sp, #0
 8017446:	4603      	mov	r3, r0
 8017448:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801744a:	88fb      	ldrh	r3, [r7, #6]
 801744c:	2b00      	cmp	r3, #0
 801744e:	d101      	bne.n	8017454 <mem_malloc+0x14>
    return NULL;
 8017450:	2300      	movs	r3, #0
 8017452:	e0e2      	b.n	801761a <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8017454:	88fb      	ldrh	r3, [r7, #6]
 8017456:	3303      	adds	r3, #3
 8017458:	b29b      	uxth	r3, r3
 801745a:	f023 0303 	bic.w	r3, r3, #3
 801745e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8017460:	8bbb      	ldrh	r3, [r7, #28]
 8017462:	2b0b      	cmp	r3, #11
 8017464:	d801      	bhi.n	801746a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8017466:	230c      	movs	r3, #12
 8017468:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801746a:	8bbb      	ldrh	r3, [r7, #28]
 801746c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017470:	d803      	bhi.n	801747a <mem_malloc+0x3a>
 8017472:	8bba      	ldrh	r2, [r7, #28]
 8017474:	88fb      	ldrh	r3, [r7, #6]
 8017476:	429a      	cmp	r2, r3
 8017478:	d201      	bcs.n	801747e <mem_malloc+0x3e>
    return NULL;
 801747a:	2300      	movs	r3, #0
 801747c:	e0cd      	b.n	801761a <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801747e:	4869      	ldr	r0, [pc, #420]	; (8017624 <mem_malloc+0x1e4>)
 8017480:	f00b fbd8 	bl	8022c34 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017484:	4b68      	ldr	r3, [pc, #416]	; (8017628 <mem_malloc+0x1e8>)
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	4618      	mov	r0, r3
 801748a:	f7ff fcfd 	bl	8016e88 <mem_to_ptr>
 801748e:	4603      	mov	r3, r0
 8017490:	83fb      	strh	r3, [r7, #30]
 8017492:	e0b7      	b.n	8017604 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8017494:	8bfb      	ldrh	r3, [r7, #30]
 8017496:	4618      	mov	r0, r3
 8017498:	f7ff fce4 	bl	8016e64 <ptr_to_mem>
 801749c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801749e:	697b      	ldr	r3, [r7, #20]
 80174a0:	791b      	ldrb	r3, [r3, #4]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	f040 80a7 	bne.w	80175f6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80174a8:	697b      	ldr	r3, [r7, #20]
 80174aa:	881b      	ldrh	r3, [r3, #0]
 80174ac:	461a      	mov	r2, r3
 80174ae:	8bfb      	ldrh	r3, [r7, #30]
 80174b0:	1ad3      	subs	r3, r2, r3
 80174b2:	f1a3 0208 	sub.w	r2, r3, #8
 80174b6:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80174b8:	429a      	cmp	r2, r3
 80174ba:	f0c0 809c 	bcc.w	80175f6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80174be:	697b      	ldr	r3, [r7, #20]
 80174c0:	881b      	ldrh	r3, [r3, #0]
 80174c2:	461a      	mov	r2, r3
 80174c4:	8bfb      	ldrh	r3, [r7, #30]
 80174c6:	1ad3      	subs	r3, r2, r3
 80174c8:	f1a3 0208 	sub.w	r2, r3, #8
 80174cc:	8bbb      	ldrh	r3, [r7, #28]
 80174ce:	3314      	adds	r3, #20
 80174d0:	429a      	cmp	r2, r3
 80174d2:	d333      	bcc.n	801753c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80174d4:	8bfa      	ldrh	r2, [r7, #30]
 80174d6:	8bbb      	ldrh	r3, [r7, #28]
 80174d8:	4413      	add	r3, r2
 80174da:	b29b      	uxth	r3, r3
 80174dc:	3308      	adds	r3, #8
 80174de:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80174e0:	8a7b      	ldrh	r3, [r7, #18]
 80174e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80174e6:	d106      	bne.n	80174f6 <mem_malloc+0xb6>
 80174e8:	4b50      	ldr	r3, [pc, #320]	; (801762c <mem_malloc+0x1ec>)
 80174ea:	f240 3287 	movw	r2, #903	; 0x387
 80174ee:	4950      	ldr	r1, [pc, #320]	; (8017630 <mem_malloc+0x1f0>)
 80174f0:	4850      	ldr	r0, [pc, #320]	; (8017634 <mem_malloc+0x1f4>)
 80174f2:	f00d fc65 	bl	8024dc0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80174f6:	8a7b      	ldrh	r3, [r7, #18]
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7ff fcb3 	bl	8016e64 <ptr_to_mem>
 80174fe:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	2200      	movs	r2, #0
 8017504:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8017506:	697b      	ldr	r3, [r7, #20]
 8017508:	881a      	ldrh	r2, [r3, #0]
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801750e:	68fb      	ldr	r3, [r7, #12]
 8017510:	8bfa      	ldrh	r2, [r7, #30]
 8017512:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8017514:	697b      	ldr	r3, [r7, #20]
 8017516:	8a7a      	ldrh	r2, [r7, #18]
 8017518:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801751a:	697b      	ldr	r3, [r7, #20]
 801751c:	2201      	movs	r2, #1
 801751e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017520:	68fb      	ldr	r3, [r7, #12]
 8017522:	881b      	ldrh	r3, [r3, #0]
 8017524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8017528:	d00b      	beq.n	8017542 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801752a:	68fb      	ldr	r3, [r7, #12]
 801752c:	881b      	ldrh	r3, [r3, #0]
 801752e:	4618      	mov	r0, r3
 8017530:	f7ff fc98 	bl	8016e64 <ptr_to_mem>
 8017534:	4602      	mov	r2, r0
 8017536:	8a7b      	ldrh	r3, [r7, #18]
 8017538:	8053      	strh	r3, [r2, #2]
 801753a:	e002      	b.n	8017542 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801753c:	697b      	ldr	r3, [r7, #20]
 801753e:	2201      	movs	r2, #1
 8017540:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8017542:	4b39      	ldr	r3, [pc, #228]	; (8017628 <mem_malloc+0x1e8>)
 8017544:	681b      	ldr	r3, [r3, #0]
 8017546:	697a      	ldr	r2, [r7, #20]
 8017548:	429a      	cmp	r2, r3
 801754a:	d127      	bne.n	801759c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 801754c:	4b36      	ldr	r3, [pc, #216]	; (8017628 <mem_malloc+0x1e8>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8017552:	e005      	b.n	8017560 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8017554:	69bb      	ldr	r3, [r7, #24]
 8017556:	881b      	ldrh	r3, [r3, #0]
 8017558:	4618      	mov	r0, r3
 801755a:	f7ff fc83 	bl	8016e64 <ptr_to_mem>
 801755e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8017560:	69bb      	ldr	r3, [r7, #24]
 8017562:	791b      	ldrb	r3, [r3, #4]
 8017564:	2b00      	cmp	r3, #0
 8017566:	d004      	beq.n	8017572 <mem_malloc+0x132>
 8017568:	4b33      	ldr	r3, [pc, #204]	; (8017638 <mem_malloc+0x1f8>)
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	69ba      	ldr	r2, [r7, #24]
 801756e:	429a      	cmp	r2, r3
 8017570:	d1f0      	bne.n	8017554 <mem_malloc+0x114>
          }
          lfree = cur;
 8017572:	4a2d      	ldr	r2, [pc, #180]	; (8017628 <mem_malloc+0x1e8>)
 8017574:	69bb      	ldr	r3, [r7, #24]
 8017576:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017578:	4b2b      	ldr	r3, [pc, #172]	; (8017628 <mem_malloc+0x1e8>)
 801757a:	681a      	ldr	r2, [r3, #0]
 801757c:	4b2e      	ldr	r3, [pc, #184]	; (8017638 <mem_malloc+0x1f8>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	429a      	cmp	r2, r3
 8017582:	d00b      	beq.n	801759c <mem_malloc+0x15c>
 8017584:	4b28      	ldr	r3, [pc, #160]	; (8017628 <mem_malloc+0x1e8>)
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	791b      	ldrb	r3, [r3, #4]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d006      	beq.n	801759c <mem_malloc+0x15c>
 801758e:	4b27      	ldr	r3, [pc, #156]	; (801762c <mem_malloc+0x1ec>)
 8017590:	f240 32b5 	movw	r2, #949	; 0x3b5
 8017594:	4929      	ldr	r1, [pc, #164]	; (801763c <mem_malloc+0x1fc>)
 8017596:	4827      	ldr	r0, [pc, #156]	; (8017634 <mem_malloc+0x1f4>)
 8017598:	f00d fc12 	bl	8024dc0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801759c:	4821      	ldr	r0, [pc, #132]	; (8017624 <mem_malloc+0x1e4>)
 801759e:	f00b fb58 	bl	8022c52 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80175a2:	8bba      	ldrh	r2, [r7, #28]
 80175a4:	697b      	ldr	r3, [r7, #20]
 80175a6:	4413      	add	r3, r2
 80175a8:	3308      	adds	r3, #8
 80175aa:	4a23      	ldr	r2, [pc, #140]	; (8017638 <mem_malloc+0x1f8>)
 80175ac:	6812      	ldr	r2, [r2, #0]
 80175ae:	4293      	cmp	r3, r2
 80175b0:	d906      	bls.n	80175c0 <mem_malloc+0x180>
 80175b2:	4b1e      	ldr	r3, [pc, #120]	; (801762c <mem_malloc+0x1ec>)
 80175b4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80175b8:	4921      	ldr	r1, [pc, #132]	; (8017640 <mem_malloc+0x200>)
 80175ba:	481e      	ldr	r0, [pc, #120]	; (8017634 <mem_malloc+0x1f4>)
 80175bc:	f00d fc00 	bl	8024dc0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80175c0:	697b      	ldr	r3, [r7, #20]
 80175c2:	f003 0303 	and.w	r3, r3, #3
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d006      	beq.n	80175d8 <mem_malloc+0x198>
 80175ca:	4b18      	ldr	r3, [pc, #96]	; (801762c <mem_malloc+0x1ec>)
 80175cc:	f240 32bb 	movw	r2, #955	; 0x3bb
 80175d0:	491c      	ldr	r1, [pc, #112]	; (8017644 <mem_malloc+0x204>)
 80175d2:	4818      	ldr	r0, [pc, #96]	; (8017634 <mem_malloc+0x1f4>)
 80175d4:	f00d fbf4 	bl	8024dc0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80175d8:	697b      	ldr	r3, [r7, #20]
 80175da:	f003 0303 	and.w	r3, r3, #3
 80175de:	2b00      	cmp	r3, #0
 80175e0:	d006      	beq.n	80175f0 <mem_malloc+0x1b0>
 80175e2:	4b12      	ldr	r3, [pc, #72]	; (801762c <mem_malloc+0x1ec>)
 80175e4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80175e8:	4917      	ldr	r1, [pc, #92]	; (8017648 <mem_malloc+0x208>)
 80175ea:	4812      	ldr	r0, [pc, #72]	; (8017634 <mem_malloc+0x1f4>)
 80175ec:	f00d fbe8 	bl	8024dc0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80175f0:	697b      	ldr	r3, [r7, #20]
 80175f2:	3308      	adds	r3, #8
 80175f4:	e011      	b.n	801761a <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80175f6:	8bfb      	ldrh	r3, [r7, #30]
 80175f8:	4618      	mov	r0, r3
 80175fa:	f7ff fc33 	bl	8016e64 <ptr_to_mem>
 80175fe:	4603      	mov	r3, r0
 8017600:	881b      	ldrh	r3, [r3, #0]
 8017602:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017604:	8bfa      	ldrh	r2, [r7, #30]
 8017606:	8bbb      	ldrh	r3, [r7, #28]
 8017608:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 801760c:	429a      	cmp	r2, r3
 801760e:	f4ff af41 	bcc.w	8017494 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8017612:	4804      	ldr	r0, [pc, #16]	; (8017624 <mem_malloc+0x1e4>)
 8017614:	f00b fb1d 	bl	8022c52 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8017618:	2300      	movs	r3, #0
}
 801761a:	4618      	mov	r0, r3
 801761c:	3720      	adds	r7, #32
 801761e:	46bd      	mov	sp, r7
 8017620:	bd80      	pop	{r7, pc}
 8017622:	bf00      	nop
 8017624:	20012c8c 	.word	0x20012c8c
 8017628:	20012c90 	.word	0x20012c90
 801762c:	0802b1f8 	.word	0x0802b1f8
 8017630:	0802b3bc 	.word	0x0802b3bc
 8017634:	0802b240 	.word	0x0802b240
 8017638:	20012c88 	.word	0x20012c88
 801763c:	0802b3d0 	.word	0x0802b3d0
 8017640:	0802b3ec 	.word	0x0802b3ec
 8017644:	0802b41c 	.word	0x0802b41c
 8017648:	0802b44c 	.word	0x0802b44c

0801764c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801764c:	b480      	push	{r7}
 801764e:	b085      	sub	sp, #20
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	689b      	ldr	r3, [r3, #8]
 8017658:	2200      	movs	r2, #0
 801765a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	685b      	ldr	r3, [r3, #4]
 8017660:	3303      	adds	r3, #3
 8017662:	f023 0303 	bic.w	r3, r3, #3
 8017666:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8017668:	2300      	movs	r3, #0
 801766a:	60fb      	str	r3, [r7, #12]
 801766c:	e011      	b.n	8017692 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	689b      	ldr	r3, [r3, #8]
 8017672:	681a      	ldr	r2, [r3, #0]
 8017674:	68bb      	ldr	r3, [r7, #8]
 8017676:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	689b      	ldr	r3, [r3, #8]
 801767c:	68ba      	ldr	r2, [r7, #8]
 801767e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8017680:	687b      	ldr	r3, [r7, #4]
 8017682:	881b      	ldrh	r3, [r3, #0]
 8017684:	461a      	mov	r2, r3
 8017686:	68bb      	ldr	r3, [r7, #8]
 8017688:	4413      	add	r3, r2
 801768a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801768c:	68fb      	ldr	r3, [r7, #12]
 801768e:	3301      	adds	r3, #1
 8017690:	60fb      	str	r3, [r7, #12]
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	885b      	ldrh	r3, [r3, #2]
 8017696:	461a      	mov	r2, r3
 8017698:	68fb      	ldr	r3, [r7, #12]
 801769a:	4293      	cmp	r3, r2
 801769c:	dbe7      	blt.n	801766e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801769e:	bf00      	nop
 80176a0:	bf00      	nop
 80176a2:	3714      	adds	r7, #20
 80176a4:	46bd      	mov	sp, r7
 80176a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176aa:	4770      	bx	lr

080176ac <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b082      	sub	sp, #8
 80176b0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80176b2:	2300      	movs	r3, #0
 80176b4:	80fb      	strh	r3, [r7, #6]
 80176b6:	e009      	b.n	80176cc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80176b8:	88fb      	ldrh	r3, [r7, #6]
 80176ba:	4a08      	ldr	r2, [pc, #32]	; (80176dc <memp_init+0x30>)
 80176bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80176c0:	4618      	mov	r0, r3
 80176c2:	f7ff ffc3 	bl	801764c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80176c6:	88fb      	ldrh	r3, [r7, #6]
 80176c8:	3301      	adds	r3, #1
 80176ca:	80fb      	strh	r3, [r7, #6]
 80176cc:	88fb      	ldrh	r3, [r7, #6]
 80176ce:	2b0d      	cmp	r3, #13
 80176d0:	d9f2      	bls.n	80176b8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80176d2:	bf00      	nop
 80176d4:	bf00      	nop
 80176d6:	3708      	adds	r7, #8
 80176d8:	46bd      	mov	sp, r7
 80176da:	bd80      	pop	{r7, pc}
 80176dc:	0802deb4 	.word	0x0802deb4

080176e0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b084      	sub	sp, #16
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80176e8:	f00b fae6 	bl	8022cb8 <sys_arch_protect>
 80176ec:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	689b      	ldr	r3, [r3, #8]
 80176f2:	681b      	ldr	r3, [r3, #0]
 80176f4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80176f6:	68bb      	ldr	r3, [r7, #8]
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d015      	beq.n	8017728 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	689b      	ldr	r3, [r3, #8]
 8017700:	68ba      	ldr	r2, [r7, #8]
 8017702:	6812      	ldr	r2, [r2, #0]
 8017704:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017706:	68bb      	ldr	r3, [r7, #8]
 8017708:	f003 0303 	and.w	r3, r3, #3
 801770c:	2b00      	cmp	r3, #0
 801770e:	d006      	beq.n	801771e <do_memp_malloc_pool+0x3e>
 8017710:	4b09      	ldr	r3, [pc, #36]	; (8017738 <do_memp_malloc_pool+0x58>)
 8017712:	f44f 728c 	mov.w	r2, #280	; 0x118
 8017716:	4909      	ldr	r1, [pc, #36]	; (801773c <do_memp_malloc_pool+0x5c>)
 8017718:	4809      	ldr	r0, [pc, #36]	; (8017740 <do_memp_malloc_pool+0x60>)
 801771a:	f00d fb51 	bl	8024dc0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801771e:	68f8      	ldr	r0, [r7, #12]
 8017720:	f00b fad8 	bl	8022cd4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8017724:	68bb      	ldr	r3, [r7, #8]
 8017726:	e003      	b.n	8017730 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017728:	68f8      	ldr	r0, [r7, #12]
 801772a:	f00b fad3 	bl	8022cd4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801772e:	2300      	movs	r3, #0
}
 8017730:	4618      	mov	r0, r3
 8017732:	3710      	adds	r7, #16
 8017734:	46bd      	mov	sp, r7
 8017736:	bd80      	pop	{r7, pc}
 8017738:	0802b470 	.word	0x0802b470
 801773c:	0802b4a0 	.word	0x0802b4a0
 8017740:	0802b4c4 	.word	0x0802b4c4

08017744 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b082      	sub	sp, #8
 8017748:	af00      	add	r7, sp, #0
 801774a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d106      	bne.n	8017760 <memp_malloc_pool+0x1c>
 8017752:	4b0a      	ldr	r3, [pc, #40]	; (801777c <memp_malloc_pool+0x38>)
 8017754:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8017758:	4909      	ldr	r1, [pc, #36]	; (8017780 <memp_malloc_pool+0x3c>)
 801775a:	480a      	ldr	r0, [pc, #40]	; (8017784 <memp_malloc_pool+0x40>)
 801775c:	f00d fb30 	bl	8024dc0 <iprintf>
  if (desc == NULL) {
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d101      	bne.n	801776a <memp_malloc_pool+0x26>
    return NULL;
 8017766:	2300      	movs	r3, #0
 8017768:	e003      	b.n	8017772 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801776a:	6878      	ldr	r0, [r7, #4]
 801776c:	f7ff ffb8 	bl	80176e0 <do_memp_malloc_pool>
 8017770:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8017772:	4618      	mov	r0, r3
 8017774:	3708      	adds	r7, #8
 8017776:	46bd      	mov	sp, r7
 8017778:	bd80      	pop	{r7, pc}
 801777a:	bf00      	nop
 801777c:	0802b470 	.word	0x0802b470
 8017780:	0802b4ec 	.word	0x0802b4ec
 8017784:	0802b4c4 	.word	0x0802b4c4

08017788 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8017788:	b580      	push	{r7, lr}
 801778a:	b084      	sub	sp, #16
 801778c:	af00      	add	r7, sp, #0
 801778e:	4603      	mov	r3, r0
 8017790:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017792:	79fb      	ldrb	r3, [r7, #7]
 8017794:	2b0d      	cmp	r3, #13
 8017796:	d908      	bls.n	80177aa <memp_malloc+0x22>
 8017798:	4b0a      	ldr	r3, [pc, #40]	; (80177c4 <memp_malloc+0x3c>)
 801779a:	f240 1257 	movw	r2, #343	; 0x157
 801779e:	490a      	ldr	r1, [pc, #40]	; (80177c8 <memp_malloc+0x40>)
 80177a0:	480a      	ldr	r0, [pc, #40]	; (80177cc <memp_malloc+0x44>)
 80177a2:	f00d fb0d 	bl	8024dc0 <iprintf>
 80177a6:	2300      	movs	r3, #0
 80177a8:	e008      	b.n	80177bc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80177aa:	79fb      	ldrb	r3, [r7, #7]
 80177ac:	4a08      	ldr	r2, [pc, #32]	; (80177d0 <memp_malloc+0x48>)
 80177ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80177b2:	4618      	mov	r0, r3
 80177b4:	f7ff ff94 	bl	80176e0 <do_memp_malloc_pool>
 80177b8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80177ba:	68fb      	ldr	r3, [r7, #12]
}
 80177bc:	4618      	mov	r0, r3
 80177be:	3710      	adds	r7, #16
 80177c0:	46bd      	mov	sp, r7
 80177c2:	bd80      	pop	{r7, pc}
 80177c4:	0802b470 	.word	0x0802b470
 80177c8:	0802b500 	.word	0x0802b500
 80177cc:	0802b4c4 	.word	0x0802b4c4
 80177d0:	0802deb4 	.word	0x0802deb4

080177d4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b084      	sub	sp, #16
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
 80177dc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	f003 0303 	and.w	r3, r3, #3
 80177e4:	2b00      	cmp	r3, #0
 80177e6:	d006      	beq.n	80177f6 <do_memp_free_pool+0x22>
 80177e8:	4b0d      	ldr	r3, [pc, #52]	; (8017820 <do_memp_free_pool+0x4c>)
 80177ea:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80177ee:	490d      	ldr	r1, [pc, #52]	; (8017824 <do_memp_free_pool+0x50>)
 80177f0:	480d      	ldr	r0, [pc, #52]	; (8017828 <do_memp_free_pool+0x54>)
 80177f2:	f00d fae5 	bl	8024dc0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80177f6:	683b      	ldr	r3, [r7, #0]
 80177f8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80177fa:	f00b fa5d 	bl	8022cb8 <sys_arch_protect>
 80177fe:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	689b      	ldr	r3, [r3, #8]
 8017804:	681a      	ldr	r2, [r3, #0]
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	689b      	ldr	r3, [r3, #8]
 801780e:	68fa      	ldr	r2, [r7, #12]
 8017810:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8017812:	68b8      	ldr	r0, [r7, #8]
 8017814:	f00b fa5e 	bl	8022cd4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8017818:	bf00      	nop
 801781a:	3710      	adds	r7, #16
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}
 8017820:	0802b470 	.word	0x0802b470
 8017824:	0802b520 	.word	0x0802b520
 8017828:	0802b4c4 	.word	0x0802b4c4

0801782c <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801782c:	b580      	push	{r7, lr}
 801782e:	b082      	sub	sp, #8
 8017830:	af00      	add	r7, sp, #0
 8017832:	6078      	str	r0, [r7, #4]
 8017834:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d106      	bne.n	801784a <memp_free_pool+0x1e>
 801783c:	4b0a      	ldr	r3, [pc, #40]	; (8017868 <memp_free_pool+0x3c>)
 801783e:	f240 1295 	movw	r2, #405	; 0x195
 8017842:	490a      	ldr	r1, [pc, #40]	; (801786c <memp_free_pool+0x40>)
 8017844:	480a      	ldr	r0, [pc, #40]	; (8017870 <memp_free_pool+0x44>)
 8017846:	f00d fabb 	bl	8024dc0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d007      	beq.n	8017860 <memp_free_pool+0x34>
 8017850:	683b      	ldr	r3, [r7, #0]
 8017852:	2b00      	cmp	r3, #0
 8017854:	d004      	beq.n	8017860 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8017856:	6839      	ldr	r1, [r7, #0]
 8017858:	6878      	ldr	r0, [r7, #4]
 801785a:	f7ff ffbb 	bl	80177d4 <do_memp_free_pool>
 801785e:	e000      	b.n	8017862 <memp_free_pool+0x36>
    return;
 8017860:	bf00      	nop
}
 8017862:	3708      	adds	r7, #8
 8017864:	46bd      	mov	sp, r7
 8017866:	bd80      	pop	{r7, pc}
 8017868:	0802b470 	.word	0x0802b470
 801786c:	0802b4ec 	.word	0x0802b4ec
 8017870:	0802b4c4 	.word	0x0802b4c4

08017874 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b082      	sub	sp, #8
 8017878:	af00      	add	r7, sp, #0
 801787a:	4603      	mov	r3, r0
 801787c:	6039      	str	r1, [r7, #0]
 801787e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8017880:	79fb      	ldrb	r3, [r7, #7]
 8017882:	2b0d      	cmp	r3, #13
 8017884:	d907      	bls.n	8017896 <memp_free+0x22>
 8017886:	4b0c      	ldr	r3, [pc, #48]	; (80178b8 <memp_free+0x44>)
 8017888:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801788c:	490b      	ldr	r1, [pc, #44]	; (80178bc <memp_free+0x48>)
 801788e:	480c      	ldr	r0, [pc, #48]	; (80178c0 <memp_free+0x4c>)
 8017890:	f00d fa96 	bl	8024dc0 <iprintf>
 8017894:	e00c      	b.n	80178b0 <memp_free+0x3c>

  if (mem == NULL) {
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d008      	beq.n	80178ae <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801789c:	79fb      	ldrb	r3, [r7, #7]
 801789e:	4a09      	ldr	r2, [pc, #36]	; (80178c4 <memp_free+0x50>)
 80178a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80178a4:	6839      	ldr	r1, [r7, #0]
 80178a6:	4618      	mov	r0, r3
 80178a8:	f7ff ff94 	bl	80177d4 <do_memp_free_pool>
 80178ac:	e000      	b.n	80178b0 <memp_free+0x3c>
    return;
 80178ae:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80178b0:	3708      	adds	r7, #8
 80178b2:	46bd      	mov	sp, r7
 80178b4:	bd80      	pop	{r7, pc}
 80178b6:	bf00      	nop
 80178b8:	0802b470 	.word	0x0802b470
 80178bc:	0802b540 	.word	0x0802b540
 80178c0:	0802b4c4 	.word	0x0802b4c4
 80178c4:	0802deb4 	.word	0x0802deb4

080178c8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80178c8:	b480      	push	{r7}
 80178ca:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80178cc:	bf00      	nop
 80178ce:	46bd      	mov	sp, r7
 80178d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d4:	4770      	bx	lr
	...

080178d8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80178d8:	b580      	push	{r7, lr}
 80178da:	b086      	sub	sp, #24
 80178dc:	af00      	add	r7, sp, #0
 80178de:	60f8      	str	r0, [r7, #12]
 80178e0:	60b9      	str	r1, [r7, #8]
 80178e2:	607a      	str	r2, [r7, #4]
 80178e4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80178e6:	68fb      	ldr	r3, [r7, #12]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d108      	bne.n	80178fe <netif_add+0x26>
 80178ec:	4b57      	ldr	r3, [pc, #348]	; (8017a4c <netif_add+0x174>)
 80178ee:	f240 1227 	movw	r2, #295	; 0x127
 80178f2:	4957      	ldr	r1, [pc, #348]	; (8017a50 <netif_add+0x178>)
 80178f4:	4857      	ldr	r0, [pc, #348]	; (8017a54 <netif_add+0x17c>)
 80178f6:	f00d fa63 	bl	8024dc0 <iprintf>
 80178fa:	2300      	movs	r3, #0
 80178fc:	e0a2      	b.n	8017a44 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80178fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017900:	2b00      	cmp	r3, #0
 8017902:	d108      	bne.n	8017916 <netif_add+0x3e>
 8017904:	4b51      	ldr	r3, [pc, #324]	; (8017a4c <netif_add+0x174>)
 8017906:	f44f 7294 	mov.w	r2, #296	; 0x128
 801790a:	4953      	ldr	r1, [pc, #332]	; (8017a58 <netif_add+0x180>)
 801790c:	4851      	ldr	r0, [pc, #324]	; (8017a54 <netif_add+0x17c>)
 801790e:	f00d fa57 	bl	8024dc0 <iprintf>
 8017912:	2300      	movs	r3, #0
 8017914:	e096      	b.n	8017a44 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8017916:	68bb      	ldr	r3, [r7, #8]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d101      	bne.n	8017920 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801791c:	4b4f      	ldr	r3, [pc, #316]	; (8017a5c <netif_add+0x184>)
 801791e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	2b00      	cmp	r3, #0
 8017924:	d101      	bne.n	801792a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8017926:	4b4d      	ldr	r3, [pc, #308]	; (8017a5c <netif_add+0x184>)
 8017928:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801792a:	683b      	ldr	r3, [r7, #0]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d101      	bne.n	8017934 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8017930:	4b4a      	ldr	r3, [pc, #296]	; (8017a5c <netif_add+0x184>)
 8017932:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8017934:	68fb      	ldr	r3, [r7, #12]
 8017936:	2200      	movs	r2, #0
 8017938:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801793a:	68fb      	ldr	r3, [r7, #12]
 801793c:	2200      	movs	r2, #0
 801793e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	2200      	movs	r2, #0
 8017944:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8017946:	68fb      	ldr	r3, [r7, #12]
 8017948:	4a45      	ldr	r2, [pc, #276]	; (8017a60 <netif_add+0x188>)
 801794a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	2200      	movs	r2, #0
 8017950:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	2200      	movs	r2, #0
 8017956:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	2200      	movs	r2, #0
 801795e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	6a3a      	ldr	r2, [r7, #32]
 8017964:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8017966:	4b3f      	ldr	r3, [pc, #252]	; (8017a64 <netif_add+0x18c>)
 8017968:	781a      	ldrb	r2, [r3, #0]
 801796a:	68fb      	ldr	r3, [r7, #12]
 801796c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017974:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8017976:	683b      	ldr	r3, [r7, #0]
 8017978:	687a      	ldr	r2, [r7, #4]
 801797a:	68b9      	ldr	r1, [r7, #8]
 801797c:	68f8      	ldr	r0, [r7, #12]
 801797e:	f000 f913 	bl	8017ba8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8017982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017984:	68f8      	ldr	r0, [r7, #12]
 8017986:	4798      	blx	r3
 8017988:	4603      	mov	r3, r0
 801798a:	2b00      	cmp	r3, #0
 801798c:	d001      	beq.n	8017992 <netif_add+0xba>
    return NULL;
 801798e:	2300      	movs	r3, #0
 8017990:	e058      	b.n	8017a44 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017998:	2bff      	cmp	r3, #255	; 0xff
 801799a:	d103      	bne.n	80179a4 <netif_add+0xcc>
        netif->num = 0;
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	2200      	movs	r2, #0
 80179a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80179a4:	2300      	movs	r3, #0
 80179a6:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80179a8:	4b2f      	ldr	r3, [pc, #188]	; (8017a68 <netif_add+0x190>)
 80179aa:	681b      	ldr	r3, [r3, #0]
 80179ac:	617b      	str	r3, [r7, #20]
 80179ae:	e02b      	b.n	8017a08 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80179b0:	697a      	ldr	r2, [r7, #20]
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	429a      	cmp	r2, r3
 80179b6:	d106      	bne.n	80179c6 <netif_add+0xee>
 80179b8:	4b24      	ldr	r3, [pc, #144]	; (8017a4c <netif_add+0x174>)
 80179ba:	f240 128b 	movw	r2, #395	; 0x18b
 80179be:	492b      	ldr	r1, [pc, #172]	; (8017a6c <netif_add+0x194>)
 80179c0:	4824      	ldr	r0, [pc, #144]	; (8017a54 <netif_add+0x17c>)
 80179c2:	f00d f9fd 	bl	8024dc0 <iprintf>
        num_netifs++;
 80179c6:	693b      	ldr	r3, [r7, #16]
 80179c8:	3301      	adds	r3, #1
 80179ca:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80179cc:	693b      	ldr	r3, [r7, #16]
 80179ce:	2bff      	cmp	r3, #255	; 0xff
 80179d0:	dd06      	ble.n	80179e0 <netif_add+0x108>
 80179d2:	4b1e      	ldr	r3, [pc, #120]	; (8017a4c <netif_add+0x174>)
 80179d4:	f240 128d 	movw	r2, #397	; 0x18d
 80179d8:	4925      	ldr	r1, [pc, #148]	; (8017a70 <netif_add+0x198>)
 80179da:	481e      	ldr	r0, [pc, #120]	; (8017a54 <netif_add+0x17c>)
 80179dc:	f00d f9f0 	bl	8024dc0 <iprintf>
        if (netif2->num == netif->num) {
 80179e0:	697b      	ldr	r3, [r7, #20]
 80179e2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80179ec:	429a      	cmp	r2, r3
 80179ee:	d108      	bne.n	8017a02 <netif_add+0x12a>
          netif->num++;
 80179f0:	68fb      	ldr	r3, [r7, #12]
 80179f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80179f6:	3301      	adds	r3, #1
 80179f8:	b2da      	uxtb	r2, r3
 80179fa:	68fb      	ldr	r3, [r7, #12]
 80179fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8017a00:	e005      	b.n	8017a0e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8017a02:	697b      	ldr	r3, [r7, #20]
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	617b      	str	r3, [r7, #20]
 8017a08:	697b      	ldr	r3, [r7, #20]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d1d0      	bne.n	80179b0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8017a0e:	697b      	ldr	r3, [r7, #20]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d1be      	bne.n	8017992 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8017a14:	68fb      	ldr	r3, [r7, #12]
 8017a16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017a1a:	2bfe      	cmp	r3, #254	; 0xfe
 8017a1c:	d103      	bne.n	8017a26 <netif_add+0x14e>
    netif_num = 0;
 8017a1e:	4b11      	ldr	r3, [pc, #68]	; (8017a64 <netif_add+0x18c>)
 8017a20:	2200      	movs	r2, #0
 8017a22:	701a      	strb	r2, [r3, #0]
 8017a24:	e006      	b.n	8017a34 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017a2c:	3301      	adds	r3, #1
 8017a2e:	b2da      	uxtb	r2, r3
 8017a30:	4b0c      	ldr	r3, [pc, #48]	; (8017a64 <netif_add+0x18c>)
 8017a32:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8017a34:	4b0c      	ldr	r3, [pc, #48]	; (8017a68 <netif_add+0x190>)
 8017a36:	681a      	ldr	r2, [r3, #0]
 8017a38:	68fb      	ldr	r3, [r7, #12]
 8017a3a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8017a3c:	4a0a      	ldr	r2, [pc, #40]	; (8017a68 <netif_add+0x190>)
 8017a3e:	68fb      	ldr	r3, [r7, #12]
 8017a40:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8017a42:	68fb      	ldr	r3, [r7, #12]
}
 8017a44:	4618      	mov	r0, r3
 8017a46:	3718      	adds	r7, #24
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd80      	pop	{r7, pc}
 8017a4c:	0802b55c 	.word	0x0802b55c
 8017a50:	0802b5f0 	.word	0x0802b5f0
 8017a54:	0802b5ac 	.word	0x0802b5ac
 8017a58:	0802b60c 	.word	0x0802b60c
 8017a5c:	0802df34 	.word	0x0802df34
 8017a60:	08017e83 	.word	0x08017e83
 8017a64:	20015fd0 	.word	0x20015fd0
 8017a68:	20015fc8 	.word	0x20015fc8
 8017a6c:	0802b630 	.word	0x0802b630
 8017a70:	0802b644 	.word	0x0802b644

08017a74 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b082      	sub	sp, #8
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
 8017a7c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8017a7e:	6839      	ldr	r1, [r7, #0]
 8017a80:	6878      	ldr	r0, [r7, #4]
 8017a82:	f003 f949 	bl	801ad18 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8017a86:	6839      	ldr	r1, [r7, #0]
 8017a88:	6878      	ldr	r0, [r7, #4]
 8017a8a:	f008 faa1 	bl	801ffd0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8017a8e:	bf00      	nop
 8017a90:	3708      	adds	r7, #8
 8017a92:	46bd      	mov	sp, r7
 8017a94:	bd80      	pop	{r7, pc}
	...

08017a98 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	b086      	sub	sp, #24
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	60f8      	str	r0, [r7, #12]
 8017aa0:	60b9      	str	r1, [r7, #8]
 8017aa2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8017aa4:	68bb      	ldr	r3, [r7, #8]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d106      	bne.n	8017ab8 <netif_do_set_ipaddr+0x20>
 8017aaa:	4b1d      	ldr	r3, [pc, #116]	; (8017b20 <netif_do_set_ipaddr+0x88>)
 8017aac:	f240 12cb 	movw	r2, #459	; 0x1cb
 8017ab0:	491c      	ldr	r1, [pc, #112]	; (8017b24 <netif_do_set_ipaddr+0x8c>)
 8017ab2:	481d      	ldr	r0, [pc, #116]	; (8017b28 <netif_do_set_ipaddr+0x90>)
 8017ab4:	f00d f984 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d106      	bne.n	8017acc <netif_do_set_ipaddr+0x34>
 8017abe:	4b18      	ldr	r3, [pc, #96]	; (8017b20 <netif_do_set_ipaddr+0x88>)
 8017ac0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8017ac4:	4917      	ldr	r1, [pc, #92]	; (8017b24 <netif_do_set_ipaddr+0x8c>)
 8017ac6:	4818      	ldr	r0, [pc, #96]	; (8017b28 <netif_do_set_ipaddr+0x90>)
 8017ac8:	f00d f97a 	bl	8024dc0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8017acc:	68bb      	ldr	r3, [r7, #8]
 8017ace:	681a      	ldr	r2, [r3, #0]
 8017ad0:	68fb      	ldr	r3, [r7, #12]
 8017ad2:	3304      	adds	r3, #4
 8017ad4:	681b      	ldr	r3, [r3, #0]
 8017ad6:	429a      	cmp	r2, r3
 8017ad8:	d01c      	beq.n	8017b14 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8017ada:	68bb      	ldr	r3, [r7, #8]
 8017adc:	681b      	ldr	r3, [r3, #0]
 8017ade:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8017ae0:	68fb      	ldr	r3, [r7, #12]
 8017ae2:	3304      	adds	r3, #4
 8017ae4:	681a      	ldr	r2, [r3, #0]
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8017aea:	f107 0314 	add.w	r3, r7, #20
 8017aee:	4619      	mov	r1, r3
 8017af0:	6878      	ldr	r0, [r7, #4]
 8017af2:	f7ff ffbf 	bl	8017a74 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8017af6:	68bb      	ldr	r3, [r7, #8]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d002      	beq.n	8017b02 <netif_do_set_ipaddr+0x6a>
 8017afc:	68bb      	ldr	r3, [r7, #8]
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	e000      	b.n	8017b04 <netif_do_set_ipaddr+0x6c>
 8017b02:	2300      	movs	r3, #0
 8017b04:	68fa      	ldr	r2, [r7, #12]
 8017b06:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8017b08:	2101      	movs	r1, #1
 8017b0a:	68f8      	ldr	r0, [r7, #12]
 8017b0c:	f000 f8d2 	bl	8017cb4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8017b10:	2301      	movs	r3, #1
 8017b12:	e000      	b.n	8017b16 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8017b14:	2300      	movs	r3, #0
}
 8017b16:	4618      	mov	r0, r3
 8017b18:	3718      	adds	r7, #24
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	bd80      	pop	{r7, pc}
 8017b1e:	bf00      	nop
 8017b20:	0802b55c 	.word	0x0802b55c
 8017b24:	0802b674 	.word	0x0802b674
 8017b28:	0802b5ac 	.word	0x0802b5ac

08017b2c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8017b2c:	b480      	push	{r7}
 8017b2e:	b085      	sub	sp, #20
 8017b30:	af00      	add	r7, sp, #0
 8017b32:	60f8      	str	r0, [r7, #12]
 8017b34:	60b9      	str	r1, [r7, #8]
 8017b36:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8017b38:	68bb      	ldr	r3, [r7, #8]
 8017b3a:	681a      	ldr	r2, [r3, #0]
 8017b3c:	68fb      	ldr	r3, [r7, #12]
 8017b3e:	3308      	adds	r3, #8
 8017b40:	681b      	ldr	r3, [r3, #0]
 8017b42:	429a      	cmp	r2, r3
 8017b44:	d00a      	beq.n	8017b5c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8017b46:	68bb      	ldr	r3, [r7, #8]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d002      	beq.n	8017b52 <netif_do_set_netmask+0x26>
 8017b4c:	68bb      	ldr	r3, [r7, #8]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	e000      	b.n	8017b54 <netif_do_set_netmask+0x28>
 8017b52:	2300      	movs	r3, #0
 8017b54:	68fa      	ldr	r2, [r7, #12]
 8017b56:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8017b58:	2301      	movs	r3, #1
 8017b5a:	e000      	b.n	8017b5e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8017b5c:	2300      	movs	r3, #0
}
 8017b5e:	4618      	mov	r0, r3
 8017b60:	3714      	adds	r7, #20
 8017b62:	46bd      	mov	sp, r7
 8017b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b68:	4770      	bx	lr

08017b6a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8017b6a:	b480      	push	{r7}
 8017b6c:	b085      	sub	sp, #20
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	60f8      	str	r0, [r7, #12]
 8017b72:	60b9      	str	r1, [r7, #8]
 8017b74:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8017b76:	68bb      	ldr	r3, [r7, #8]
 8017b78:	681a      	ldr	r2, [r3, #0]
 8017b7a:	68fb      	ldr	r3, [r7, #12]
 8017b7c:	330c      	adds	r3, #12
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	429a      	cmp	r2, r3
 8017b82:	d00a      	beq.n	8017b9a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8017b84:	68bb      	ldr	r3, [r7, #8]
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d002      	beq.n	8017b90 <netif_do_set_gw+0x26>
 8017b8a:	68bb      	ldr	r3, [r7, #8]
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	e000      	b.n	8017b92 <netif_do_set_gw+0x28>
 8017b90:	2300      	movs	r3, #0
 8017b92:	68fa      	ldr	r2, [r7, #12]
 8017b94:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8017b96:	2301      	movs	r3, #1
 8017b98:	e000      	b.n	8017b9c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8017b9a:	2300      	movs	r3, #0
}
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	3714      	adds	r7, #20
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba6:	4770      	bx	lr

08017ba8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b088      	sub	sp, #32
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	60f8      	str	r0, [r7, #12]
 8017bb0:	60b9      	str	r1, [r7, #8]
 8017bb2:	607a      	str	r2, [r7, #4]
 8017bb4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8017bb6:	2300      	movs	r3, #0
 8017bb8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8017bba:	2300      	movs	r3, #0
 8017bbc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017bbe:	68bb      	ldr	r3, [r7, #8]
 8017bc0:	2b00      	cmp	r3, #0
 8017bc2:	d101      	bne.n	8017bc8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8017bc4:	4b1c      	ldr	r3, [pc, #112]	; (8017c38 <netif_set_addr+0x90>)
 8017bc6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8017bc8:	687b      	ldr	r3, [r7, #4]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d101      	bne.n	8017bd2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8017bce:	4b1a      	ldr	r3, [pc, #104]	; (8017c38 <netif_set_addr+0x90>)
 8017bd0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8017bd2:	683b      	ldr	r3, [r7, #0]
 8017bd4:	2b00      	cmp	r3, #0
 8017bd6:	d101      	bne.n	8017bdc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8017bd8:	4b17      	ldr	r3, [pc, #92]	; (8017c38 <netif_set_addr+0x90>)
 8017bda:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8017bdc:	68bb      	ldr	r3, [r7, #8]
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	d003      	beq.n	8017bea <netif_set_addr+0x42>
 8017be2:	68bb      	ldr	r3, [r7, #8]
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d101      	bne.n	8017bee <netif_set_addr+0x46>
 8017bea:	2301      	movs	r3, #1
 8017bec:	e000      	b.n	8017bf0 <netif_set_addr+0x48>
 8017bee:	2300      	movs	r3, #0
 8017bf0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8017bf2:	697b      	ldr	r3, [r7, #20]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d006      	beq.n	8017c06 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017bf8:	f107 0310 	add.w	r3, r7, #16
 8017bfc:	461a      	mov	r2, r3
 8017bfe:	68b9      	ldr	r1, [r7, #8]
 8017c00:	68f8      	ldr	r0, [r7, #12]
 8017c02:	f7ff ff49 	bl	8017a98 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8017c06:	69fa      	ldr	r2, [r7, #28]
 8017c08:	6879      	ldr	r1, [r7, #4]
 8017c0a:	68f8      	ldr	r0, [r7, #12]
 8017c0c:	f7ff ff8e 	bl	8017b2c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8017c10:	69ba      	ldr	r2, [r7, #24]
 8017c12:	6839      	ldr	r1, [r7, #0]
 8017c14:	68f8      	ldr	r0, [r7, #12]
 8017c16:	f7ff ffa8 	bl	8017b6a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8017c1a:	697b      	ldr	r3, [r7, #20]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d106      	bne.n	8017c2e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8017c20:	f107 0310 	add.w	r3, r7, #16
 8017c24:	461a      	mov	r2, r3
 8017c26:	68b9      	ldr	r1, [r7, #8]
 8017c28:	68f8      	ldr	r0, [r7, #12]
 8017c2a:	f7ff ff35 	bl	8017a98 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8017c2e:	bf00      	nop
 8017c30:	3720      	adds	r7, #32
 8017c32:	46bd      	mov	sp, r7
 8017c34:	bd80      	pop	{r7, pc}
 8017c36:	bf00      	nop
 8017c38:	0802df34 	.word	0x0802df34

08017c3c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8017c3c:	b480      	push	{r7}
 8017c3e:	b083      	sub	sp, #12
 8017c40:	af00      	add	r7, sp, #0
 8017c42:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8017c44:	4a04      	ldr	r2, [pc, #16]	; (8017c58 <netif_set_default+0x1c>)
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8017c4a:	bf00      	nop
 8017c4c:	370c      	adds	r7, #12
 8017c4e:	46bd      	mov	sp, r7
 8017c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c54:	4770      	bx	lr
 8017c56:	bf00      	nop
 8017c58:	20015fcc 	.word	0x20015fcc

08017c5c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b082      	sub	sp, #8
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d107      	bne.n	8017c7a <netif_set_up+0x1e>
 8017c6a:	4b0f      	ldr	r3, [pc, #60]	; (8017ca8 <netif_set_up+0x4c>)
 8017c6c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8017c70:	490e      	ldr	r1, [pc, #56]	; (8017cac <netif_set_up+0x50>)
 8017c72:	480f      	ldr	r0, [pc, #60]	; (8017cb0 <netif_set_up+0x54>)
 8017c74:	f00d f8a4 	bl	8024dc0 <iprintf>
 8017c78:	e013      	b.n	8017ca2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c80:	f003 0301 	and.w	r3, r3, #1
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d10c      	bne.n	8017ca2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017c8e:	f043 0301 	orr.w	r3, r3, #1
 8017c92:	b2da      	uxtb	r2, r3
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017c9a:	2103      	movs	r1, #3
 8017c9c:	6878      	ldr	r0, [r7, #4]
 8017c9e:	f000 f809 	bl	8017cb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8017ca2:	3708      	adds	r7, #8
 8017ca4:	46bd      	mov	sp, r7
 8017ca6:	bd80      	pop	{r7, pc}
 8017ca8:	0802b55c 	.word	0x0802b55c
 8017cac:	0802b6e4 	.word	0x0802b6e4
 8017cb0:	0802b5ac 	.word	0x0802b5ac

08017cb4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b082      	sub	sp, #8
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	6078      	str	r0, [r7, #4]
 8017cbc:	460b      	mov	r3, r1
 8017cbe:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d106      	bne.n	8017cd4 <netif_issue_reports+0x20>
 8017cc6:	4b18      	ldr	r3, [pc, #96]	; (8017d28 <netif_issue_reports+0x74>)
 8017cc8:	f240 326d 	movw	r2, #877	; 0x36d
 8017ccc:	4917      	ldr	r1, [pc, #92]	; (8017d2c <netif_issue_reports+0x78>)
 8017cce:	4818      	ldr	r0, [pc, #96]	; (8017d30 <netif_issue_reports+0x7c>)
 8017cd0:	f00d f876 	bl	8024dc0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017cda:	f003 0304 	and.w	r3, r3, #4
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d01e      	beq.n	8017d20 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ce8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d017      	beq.n	8017d20 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017cf0:	78fb      	ldrb	r3, [r7, #3]
 8017cf2:	f003 0301 	and.w	r3, r3, #1
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d013      	beq.n	8017d22 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	3304      	adds	r3, #4
 8017cfe:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d00e      	beq.n	8017d22 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d0a:	f003 0308 	and.w	r3, r3, #8
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d007      	beq.n	8017d22 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	3304      	adds	r3, #4
 8017d16:	4619      	mov	r1, r3
 8017d18:	6878      	ldr	r0, [r7, #4]
 8017d1a:	f009 f8c3 	bl	8020ea4 <etharp_request>
 8017d1e:	e000      	b.n	8017d22 <netif_issue_reports+0x6e>
    return;
 8017d20:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8017d22:	3708      	adds	r7, #8
 8017d24:	46bd      	mov	sp, r7
 8017d26:	bd80      	pop	{r7, pc}
 8017d28:	0802b55c 	.word	0x0802b55c
 8017d2c:	0802b700 	.word	0x0802b700
 8017d30:	0802b5ac 	.word	0x0802b5ac

08017d34 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b082      	sub	sp, #8
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	d107      	bne.n	8017d52 <netif_set_down+0x1e>
 8017d42:	4b12      	ldr	r3, [pc, #72]	; (8017d8c <netif_set_down+0x58>)
 8017d44:	f240 329b 	movw	r2, #923	; 0x39b
 8017d48:	4911      	ldr	r1, [pc, #68]	; (8017d90 <netif_set_down+0x5c>)
 8017d4a:	4812      	ldr	r0, [pc, #72]	; (8017d94 <netif_set_down+0x60>)
 8017d4c:	f00d f838 	bl	8024dc0 <iprintf>
 8017d50:	e019      	b.n	8017d86 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d58:	f003 0301 	and.w	r3, r3, #1
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	d012      	beq.n	8017d86 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d66:	f023 0301 	bic.w	r3, r3, #1
 8017d6a:	b2da      	uxtb	r2, r3
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017d78:	f003 0308 	and.w	r3, r3, #8
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	d002      	beq.n	8017d86 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8017d80:	6878      	ldr	r0, [r7, #4]
 8017d82:	f008 fc4d 	bl	8020620 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8017d86:	3708      	adds	r7, #8
 8017d88:	46bd      	mov	sp, r7
 8017d8a:	bd80      	pop	{r7, pc}
 8017d8c:	0802b55c 	.word	0x0802b55c
 8017d90:	0802b724 	.word	0x0802b724
 8017d94:	0802b5ac 	.word	0x0802b5ac

08017d98 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8017d98:	b580      	push	{r7, lr}
 8017d9a:	b082      	sub	sp, #8
 8017d9c:	af00      	add	r7, sp, #0
 8017d9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d107      	bne.n	8017db6 <netif_set_link_up+0x1e>
 8017da6:	4b13      	ldr	r3, [pc, #76]	; (8017df4 <netif_set_link_up+0x5c>)
 8017da8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8017dac:	4912      	ldr	r1, [pc, #72]	; (8017df8 <netif_set_link_up+0x60>)
 8017dae:	4813      	ldr	r0, [pc, #76]	; (8017dfc <netif_set_link_up+0x64>)
 8017db0:	f00d f806 	bl	8024dc0 <iprintf>
 8017db4:	e01b      	b.n	8017dee <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017dbc:	f003 0304 	and.w	r3, r3, #4
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d114      	bne.n	8017dee <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017dca:	f043 0304 	orr.w	r3, r3, #4
 8017dce:	b2da      	uxtb	r2, r3
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8017dd6:	2103      	movs	r1, #3
 8017dd8:	6878      	ldr	r0, [r7, #4]
 8017dda:	f7ff ff6b 	bl	8017cb4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	69db      	ldr	r3, [r3, #28]
 8017de2:	2b00      	cmp	r3, #0
 8017de4:	d003      	beq.n	8017dee <netif_set_link_up+0x56>
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	69db      	ldr	r3, [r3, #28]
 8017dea:	6878      	ldr	r0, [r7, #4]
 8017dec:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8017dee:	3708      	adds	r7, #8
 8017df0:	46bd      	mov	sp, r7
 8017df2:	bd80      	pop	{r7, pc}
 8017df4:	0802b55c 	.word	0x0802b55c
 8017df8:	0802b744 	.word	0x0802b744
 8017dfc:	0802b5ac 	.word	0x0802b5ac

08017e00 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8017e00:	b580      	push	{r7, lr}
 8017e02:	b082      	sub	sp, #8
 8017e04:	af00      	add	r7, sp, #0
 8017e06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	2b00      	cmp	r3, #0
 8017e0c:	d107      	bne.n	8017e1e <netif_set_link_down+0x1e>
 8017e0e:	4b11      	ldr	r3, [pc, #68]	; (8017e54 <netif_set_link_down+0x54>)
 8017e10:	f240 4206 	movw	r2, #1030	; 0x406
 8017e14:	4910      	ldr	r1, [pc, #64]	; (8017e58 <netif_set_link_down+0x58>)
 8017e16:	4811      	ldr	r0, [pc, #68]	; (8017e5c <netif_set_link_down+0x5c>)
 8017e18:	f00c ffd2 	bl	8024dc0 <iprintf>
 8017e1c:	e017      	b.n	8017e4e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e24:	f003 0304 	and.w	r3, r3, #4
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d010      	beq.n	8017e4e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017e32:	f023 0304 	bic.w	r3, r3, #4
 8017e36:	b2da      	uxtb	r2, r3
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	69db      	ldr	r3, [r3, #28]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d003      	beq.n	8017e4e <netif_set_link_down+0x4e>
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	69db      	ldr	r3, [r3, #28]
 8017e4a:	6878      	ldr	r0, [r7, #4]
 8017e4c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8017e4e:	3708      	adds	r7, #8
 8017e50:	46bd      	mov	sp, r7
 8017e52:	bd80      	pop	{r7, pc}
 8017e54:	0802b55c 	.word	0x0802b55c
 8017e58:	0802b768 	.word	0x0802b768
 8017e5c:	0802b5ac 	.word	0x0802b5ac

08017e60 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8017e60:	b480      	push	{r7}
 8017e62:	b083      	sub	sp, #12
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
 8017e68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d002      	beq.n	8017e76 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	683a      	ldr	r2, [r7, #0]
 8017e74:	61da      	str	r2, [r3, #28]
  }
}
 8017e76:	bf00      	nop
 8017e78:	370c      	adds	r7, #12
 8017e7a:	46bd      	mov	sp, r7
 8017e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e80:	4770      	bx	lr

08017e82 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8017e82:	b480      	push	{r7}
 8017e84:	b085      	sub	sp, #20
 8017e86:	af00      	add	r7, sp, #0
 8017e88:	60f8      	str	r0, [r7, #12]
 8017e8a:	60b9      	str	r1, [r7, #8]
 8017e8c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8017e8e:	f06f 030b 	mvn.w	r3, #11
}
 8017e92:	4618      	mov	r0, r3
 8017e94:	3714      	adds	r7, #20
 8017e96:	46bd      	mov	sp, r7
 8017e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e9c:	4770      	bx	lr
	...

08017ea0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8017ea0:	b480      	push	{r7}
 8017ea2:	b085      	sub	sp, #20
 8017ea4:	af00      	add	r7, sp, #0
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8017eaa:	79fb      	ldrb	r3, [r7, #7]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d013      	beq.n	8017ed8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8017eb0:	4b0d      	ldr	r3, [pc, #52]	; (8017ee8 <netif_get_by_index+0x48>)
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	60fb      	str	r3, [r7, #12]
 8017eb6:	e00c      	b.n	8017ed2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ebe:	3301      	adds	r3, #1
 8017ec0:	b2db      	uxtb	r3, r3
 8017ec2:	79fa      	ldrb	r2, [r7, #7]
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	d101      	bne.n	8017ecc <netif_get_by_index+0x2c>
        return netif; /* found! */
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	e006      	b.n	8017eda <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	60fb      	str	r3, [r7, #12]
 8017ed2:	68fb      	ldr	r3, [r7, #12]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d1ef      	bne.n	8017eb8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8017ed8:	2300      	movs	r3, #0
}
 8017eda:	4618      	mov	r0, r3
 8017edc:	3714      	adds	r7, #20
 8017ede:	46bd      	mov	sp, r7
 8017ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ee4:	4770      	bx	lr
 8017ee6:	bf00      	nop
 8017ee8:	20015fc8 	.word	0x20015fc8

08017eec <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8017eec:	b580      	push	{r7, lr}
 8017eee:	b082      	sub	sp, #8
 8017ef0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8017ef2:	f00a fee1 	bl	8022cb8 <sys_arch_protect>
 8017ef6:	6038      	str	r0, [r7, #0]
 8017ef8:	4b0d      	ldr	r3, [pc, #52]	; (8017f30 <pbuf_free_ooseq+0x44>)
 8017efa:	2200      	movs	r2, #0
 8017efc:	701a      	strb	r2, [r3, #0]
 8017efe:	6838      	ldr	r0, [r7, #0]
 8017f00:	f00a fee8 	bl	8022cd4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017f04:	4b0b      	ldr	r3, [pc, #44]	; (8017f34 <pbuf_free_ooseq+0x48>)
 8017f06:	681b      	ldr	r3, [r3, #0]
 8017f08:	607b      	str	r3, [r7, #4]
 8017f0a:	e00a      	b.n	8017f22 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8017f0c:	687b      	ldr	r3, [r7, #4]
 8017f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d003      	beq.n	8017f1c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8017f14:	6878      	ldr	r0, [r7, #4]
 8017f16:	f002 ff3d 	bl	801ad94 <tcp_free_ooseq>
      return;
 8017f1a:	e005      	b.n	8017f28 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	68db      	ldr	r3, [r3, #12]
 8017f20:	607b      	str	r3, [r7, #4]
 8017f22:	687b      	ldr	r3, [r7, #4]
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d1f1      	bne.n	8017f0c <pbuf_free_ooseq+0x20>
    }
  }
}
 8017f28:	3708      	adds	r7, #8
 8017f2a:	46bd      	mov	sp, r7
 8017f2c:	bd80      	pop	{r7, pc}
 8017f2e:	bf00      	nop
 8017f30:	20015fd1 	.word	0x20015fd1
 8017f34:	20015fe0 	.word	0x20015fe0

08017f38 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8017f38:	b580      	push	{r7, lr}
 8017f3a:	b082      	sub	sp, #8
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8017f40:	f7ff ffd4 	bl	8017eec <pbuf_free_ooseq>
}
 8017f44:	bf00      	nop
 8017f46:	3708      	adds	r7, #8
 8017f48:	46bd      	mov	sp, r7
 8017f4a:	bd80      	pop	{r7, pc}

08017f4c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b082      	sub	sp, #8
 8017f50:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8017f52:	f00a feb1 	bl	8022cb8 <sys_arch_protect>
 8017f56:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8017f58:	4b0f      	ldr	r3, [pc, #60]	; (8017f98 <pbuf_pool_is_empty+0x4c>)
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8017f5e:	4b0e      	ldr	r3, [pc, #56]	; (8017f98 <pbuf_pool_is_empty+0x4c>)
 8017f60:	2201      	movs	r2, #1
 8017f62:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8017f64:	6878      	ldr	r0, [r7, #4]
 8017f66:	f00a feb5 	bl	8022cd4 <sys_arch_unprotect>

  if (!queued) {
 8017f6a:	78fb      	ldrb	r3, [r7, #3]
 8017f6c:	2b00      	cmp	r3, #0
 8017f6e:	d10f      	bne.n	8017f90 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8017f70:	2100      	movs	r1, #0
 8017f72:	480a      	ldr	r0, [pc, #40]	; (8017f9c <pbuf_pool_is_empty+0x50>)
 8017f74:	f7fe fbc6 	bl	8016704 <tcpip_try_callback>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d008      	beq.n	8017f90 <pbuf_pool_is_empty+0x44>
 8017f7e:	f00a fe9b 	bl	8022cb8 <sys_arch_protect>
 8017f82:	6078      	str	r0, [r7, #4]
 8017f84:	4b04      	ldr	r3, [pc, #16]	; (8017f98 <pbuf_pool_is_empty+0x4c>)
 8017f86:	2200      	movs	r2, #0
 8017f88:	701a      	strb	r2, [r3, #0]
 8017f8a:	6878      	ldr	r0, [r7, #4]
 8017f8c:	f00a fea2 	bl	8022cd4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8017f90:	bf00      	nop
 8017f92:	3708      	adds	r7, #8
 8017f94:	46bd      	mov	sp, r7
 8017f96:	bd80      	pop	{r7, pc}
 8017f98:	20015fd1 	.word	0x20015fd1
 8017f9c:	08017f39 	.word	0x08017f39

08017fa0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8017fa0:	b480      	push	{r7}
 8017fa2:	b085      	sub	sp, #20
 8017fa4:	af00      	add	r7, sp, #0
 8017fa6:	60f8      	str	r0, [r7, #12]
 8017fa8:	60b9      	str	r1, [r7, #8]
 8017faa:	4611      	mov	r1, r2
 8017fac:	461a      	mov	r2, r3
 8017fae:	460b      	mov	r3, r1
 8017fb0:	80fb      	strh	r3, [r7, #6]
 8017fb2:	4613      	mov	r3, r2
 8017fb4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	2200      	movs	r2, #0
 8017fba:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8017fbc:	68fb      	ldr	r3, [r7, #12]
 8017fbe:	68ba      	ldr	r2, [r7, #8]
 8017fc0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8017fc2:	68fb      	ldr	r3, [r7, #12]
 8017fc4:	88fa      	ldrh	r2, [r7, #6]
 8017fc6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8017fc8:	68fb      	ldr	r3, [r7, #12]
 8017fca:	88ba      	ldrh	r2, [r7, #4]
 8017fcc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8017fce:	8b3b      	ldrh	r3, [r7, #24]
 8017fd0:	b2da      	uxtb	r2, r3
 8017fd2:	68fb      	ldr	r3, [r7, #12]
 8017fd4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8017fd6:	68fb      	ldr	r3, [r7, #12]
 8017fd8:	7f3a      	ldrb	r2, [r7, #28]
 8017fda:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8017fdc:	68fb      	ldr	r3, [r7, #12]
 8017fde:	2201      	movs	r2, #1
 8017fe0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	2200      	movs	r2, #0
 8017fe6:	73da      	strb	r2, [r3, #15]
}
 8017fe8:	bf00      	nop
 8017fea:	3714      	adds	r7, #20
 8017fec:	46bd      	mov	sp, r7
 8017fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ff2:	4770      	bx	lr

08017ff4 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b08c      	sub	sp, #48	; 0x30
 8017ff8:	af02      	add	r7, sp, #8
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	71fb      	strb	r3, [r7, #7]
 8017ffe:	460b      	mov	r3, r1
 8018000:	80bb      	strh	r3, [r7, #4]
 8018002:	4613      	mov	r3, r2
 8018004:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8018006:	79fb      	ldrb	r3, [r7, #7]
 8018008:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801800a:	887b      	ldrh	r3, [r7, #2]
 801800c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018010:	d07f      	beq.n	8018112 <pbuf_alloc+0x11e>
 8018012:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018016:	f300 80c8 	bgt.w	80181aa <pbuf_alloc+0x1b6>
 801801a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801801e:	d010      	beq.n	8018042 <pbuf_alloc+0x4e>
 8018020:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018024:	f300 80c1 	bgt.w	80181aa <pbuf_alloc+0x1b6>
 8018028:	2b01      	cmp	r3, #1
 801802a:	d002      	beq.n	8018032 <pbuf_alloc+0x3e>
 801802c:	2b41      	cmp	r3, #65	; 0x41
 801802e:	f040 80bc 	bne.w	80181aa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8018032:	887a      	ldrh	r2, [r7, #2]
 8018034:	88bb      	ldrh	r3, [r7, #4]
 8018036:	4619      	mov	r1, r3
 8018038:	2000      	movs	r0, #0
 801803a:	f000 f8d1 	bl	80181e0 <pbuf_alloc_reference>
 801803e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8018040:	e0bd      	b.n	80181be <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8018042:	2300      	movs	r3, #0
 8018044:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8018046:	2300      	movs	r3, #0
 8018048:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801804a:	88bb      	ldrh	r3, [r7, #4]
 801804c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801804e:	200d      	movs	r0, #13
 8018050:	f7ff fb9a 	bl	8017788 <memp_malloc>
 8018054:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8018056:	693b      	ldr	r3, [r7, #16]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d109      	bne.n	8018070 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 801805c:	f7ff ff76 	bl	8017f4c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8018060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018062:	2b00      	cmp	r3, #0
 8018064:	d002      	beq.n	801806c <pbuf_alloc+0x78>
            pbuf_free(p);
 8018066:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018068:	f000 faa8 	bl	80185bc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801806c:	2300      	movs	r3, #0
 801806e:	e0a7      	b.n	80181c0 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8018070:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018072:	3303      	adds	r3, #3
 8018074:	b29b      	uxth	r3, r3
 8018076:	f023 0303 	bic.w	r3, r3, #3
 801807a:	b29b      	uxth	r3, r3
 801807c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8018080:	b29b      	uxth	r3, r3
 8018082:	8b7a      	ldrh	r2, [r7, #26]
 8018084:	4293      	cmp	r3, r2
 8018086:	bf28      	it	cs
 8018088:	4613      	movcs	r3, r2
 801808a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801808c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801808e:	3310      	adds	r3, #16
 8018090:	693a      	ldr	r2, [r7, #16]
 8018092:	4413      	add	r3, r2
 8018094:	3303      	adds	r3, #3
 8018096:	f023 0303 	bic.w	r3, r3, #3
 801809a:	4618      	mov	r0, r3
 801809c:	89f9      	ldrh	r1, [r7, #14]
 801809e:	8b7a      	ldrh	r2, [r7, #26]
 80180a0:	2300      	movs	r3, #0
 80180a2:	9301      	str	r3, [sp, #4]
 80180a4:	887b      	ldrh	r3, [r7, #2]
 80180a6:	9300      	str	r3, [sp, #0]
 80180a8:	460b      	mov	r3, r1
 80180aa:	4601      	mov	r1, r0
 80180ac:	6938      	ldr	r0, [r7, #16]
 80180ae:	f7ff ff77 	bl	8017fa0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80180b2:	693b      	ldr	r3, [r7, #16]
 80180b4:	685b      	ldr	r3, [r3, #4]
 80180b6:	f003 0303 	and.w	r3, r3, #3
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d006      	beq.n	80180cc <pbuf_alloc+0xd8>
 80180be:	4b42      	ldr	r3, [pc, #264]	; (80181c8 <pbuf_alloc+0x1d4>)
 80180c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80180c4:	4941      	ldr	r1, [pc, #260]	; (80181cc <pbuf_alloc+0x1d8>)
 80180c6:	4842      	ldr	r0, [pc, #264]	; (80181d0 <pbuf_alloc+0x1dc>)
 80180c8:	f00c fe7a 	bl	8024dc0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80180cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180ce:	3303      	adds	r3, #3
 80180d0:	f023 0303 	bic.w	r3, r3, #3
 80180d4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80180d8:	d106      	bne.n	80180e8 <pbuf_alloc+0xf4>
 80180da:	4b3b      	ldr	r3, [pc, #236]	; (80181c8 <pbuf_alloc+0x1d4>)
 80180dc:	f44f 7281 	mov.w	r2, #258	; 0x102
 80180e0:	493c      	ldr	r1, [pc, #240]	; (80181d4 <pbuf_alloc+0x1e0>)
 80180e2:	483b      	ldr	r0, [pc, #236]	; (80181d0 <pbuf_alloc+0x1dc>)
 80180e4:	f00c fe6c 	bl	8024dc0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80180e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ea:	2b00      	cmp	r3, #0
 80180ec:	d102      	bne.n	80180f4 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80180ee:	693b      	ldr	r3, [r7, #16]
 80180f0:	627b      	str	r3, [r7, #36]	; 0x24
 80180f2:	e002      	b.n	80180fa <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80180f4:	69fb      	ldr	r3, [r7, #28]
 80180f6:	693a      	ldr	r2, [r7, #16]
 80180f8:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80180fa:	693b      	ldr	r3, [r7, #16]
 80180fc:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80180fe:	8b7a      	ldrh	r2, [r7, #26]
 8018100:	89fb      	ldrh	r3, [r7, #14]
 8018102:	1ad3      	subs	r3, r2, r3
 8018104:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8018106:	2300      	movs	r3, #0
 8018108:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801810a:	8b7b      	ldrh	r3, [r7, #26]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d19e      	bne.n	801804e <pbuf_alloc+0x5a>
      break;
 8018110:	e055      	b.n	80181be <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8018112:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018114:	3303      	adds	r3, #3
 8018116:	b29b      	uxth	r3, r3
 8018118:	f023 0303 	bic.w	r3, r3, #3
 801811c:	b29a      	uxth	r2, r3
 801811e:	88bb      	ldrh	r3, [r7, #4]
 8018120:	3303      	adds	r3, #3
 8018122:	b29b      	uxth	r3, r3
 8018124:	f023 0303 	bic.w	r3, r3, #3
 8018128:	b29b      	uxth	r3, r3
 801812a:	4413      	add	r3, r2
 801812c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801812e:	8b3b      	ldrh	r3, [r7, #24]
 8018130:	3310      	adds	r3, #16
 8018132:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018134:	8b3a      	ldrh	r2, [r7, #24]
 8018136:	88bb      	ldrh	r3, [r7, #4]
 8018138:	3303      	adds	r3, #3
 801813a:	f023 0303 	bic.w	r3, r3, #3
 801813e:	429a      	cmp	r2, r3
 8018140:	d306      	bcc.n	8018150 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8018142:	8afa      	ldrh	r2, [r7, #22]
 8018144:	88bb      	ldrh	r3, [r7, #4]
 8018146:	3303      	adds	r3, #3
 8018148:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801814c:	429a      	cmp	r2, r3
 801814e:	d201      	bcs.n	8018154 <pbuf_alloc+0x160>
        return NULL;
 8018150:	2300      	movs	r3, #0
 8018152:	e035      	b.n	80181c0 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8018154:	8afb      	ldrh	r3, [r7, #22]
 8018156:	4618      	mov	r0, r3
 8018158:	f7ff f972 	bl	8017440 <mem_malloc>
 801815c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801815e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018160:	2b00      	cmp	r3, #0
 8018162:	d101      	bne.n	8018168 <pbuf_alloc+0x174>
        return NULL;
 8018164:	2300      	movs	r3, #0
 8018166:	e02b      	b.n	80181c0 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8018168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801816a:	3310      	adds	r3, #16
 801816c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801816e:	4413      	add	r3, r2
 8018170:	3303      	adds	r3, #3
 8018172:	f023 0303 	bic.w	r3, r3, #3
 8018176:	4618      	mov	r0, r3
 8018178:	88b9      	ldrh	r1, [r7, #4]
 801817a:	88ba      	ldrh	r2, [r7, #4]
 801817c:	2300      	movs	r3, #0
 801817e:	9301      	str	r3, [sp, #4]
 8018180:	887b      	ldrh	r3, [r7, #2]
 8018182:	9300      	str	r3, [sp, #0]
 8018184:	460b      	mov	r3, r1
 8018186:	4601      	mov	r1, r0
 8018188:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801818a:	f7ff ff09 	bl	8017fa0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801818e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018190:	685b      	ldr	r3, [r3, #4]
 8018192:	f003 0303 	and.w	r3, r3, #3
 8018196:	2b00      	cmp	r3, #0
 8018198:	d010      	beq.n	80181bc <pbuf_alloc+0x1c8>
 801819a:	4b0b      	ldr	r3, [pc, #44]	; (80181c8 <pbuf_alloc+0x1d4>)
 801819c:	f44f 7291 	mov.w	r2, #290	; 0x122
 80181a0:	490d      	ldr	r1, [pc, #52]	; (80181d8 <pbuf_alloc+0x1e4>)
 80181a2:	480b      	ldr	r0, [pc, #44]	; (80181d0 <pbuf_alloc+0x1dc>)
 80181a4:	f00c fe0c 	bl	8024dc0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80181a8:	e008      	b.n	80181bc <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80181aa:	4b07      	ldr	r3, [pc, #28]	; (80181c8 <pbuf_alloc+0x1d4>)
 80181ac:	f240 1227 	movw	r2, #295	; 0x127
 80181b0:	490a      	ldr	r1, [pc, #40]	; (80181dc <pbuf_alloc+0x1e8>)
 80181b2:	4807      	ldr	r0, [pc, #28]	; (80181d0 <pbuf_alloc+0x1dc>)
 80181b4:	f00c fe04 	bl	8024dc0 <iprintf>
      return NULL;
 80181b8:	2300      	movs	r3, #0
 80181ba:	e001      	b.n	80181c0 <pbuf_alloc+0x1cc>
      break;
 80181bc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80181be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80181c0:	4618      	mov	r0, r3
 80181c2:	3728      	adds	r7, #40	; 0x28
 80181c4:	46bd      	mov	sp, r7
 80181c6:	bd80      	pop	{r7, pc}
 80181c8:	0802b78c 	.word	0x0802b78c
 80181cc:	0802b7bc 	.word	0x0802b7bc
 80181d0:	0802b7ec 	.word	0x0802b7ec
 80181d4:	0802b814 	.word	0x0802b814
 80181d8:	0802b848 	.word	0x0802b848
 80181dc:	0802b874 	.word	0x0802b874

080181e0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b086      	sub	sp, #24
 80181e4:	af02      	add	r7, sp, #8
 80181e6:	6078      	str	r0, [r7, #4]
 80181e8:	460b      	mov	r3, r1
 80181ea:	807b      	strh	r3, [r7, #2]
 80181ec:	4613      	mov	r3, r2
 80181ee:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80181f0:	883b      	ldrh	r3, [r7, #0]
 80181f2:	2b41      	cmp	r3, #65	; 0x41
 80181f4:	d009      	beq.n	801820a <pbuf_alloc_reference+0x2a>
 80181f6:	883b      	ldrh	r3, [r7, #0]
 80181f8:	2b01      	cmp	r3, #1
 80181fa:	d006      	beq.n	801820a <pbuf_alloc_reference+0x2a>
 80181fc:	4b0f      	ldr	r3, [pc, #60]	; (801823c <pbuf_alloc_reference+0x5c>)
 80181fe:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8018202:	490f      	ldr	r1, [pc, #60]	; (8018240 <pbuf_alloc_reference+0x60>)
 8018204:	480f      	ldr	r0, [pc, #60]	; (8018244 <pbuf_alloc_reference+0x64>)
 8018206:	f00c fddb 	bl	8024dc0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801820a:	200c      	movs	r0, #12
 801820c:	f7ff fabc 	bl	8017788 <memp_malloc>
 8018210:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8018212:	68fb      	ldr	r3, [r7, #12]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d101      	bne.n	801821c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8018218:	2300      	movs	r3, #0
 801821a:	e00b      	b.n	8018234 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801821c:	8879      	ldrh	r1, [r7, #2]
 801821e:	887a      	ldrh	r2, [r7, #2]
 8018220:	2300      	movs	r3, #0
 8018222:	9301      	str	r3, [sp, #4]
 8018224:	883b      	ldrh	r3, [r7, #0]
 8018226:	9300      	str	r3, [sp, #0]
 8018228:	460b      	mov	r3, r1
 801822a:	6879      	ldr	r1, [r7, #4]
 801822c:	68f8      	ldr	r0, [r7, #12]
 801822e:	f7ff feb7 	bl	8017fa0 <pbuf_init_alloced_pbuf>
  return p;
 8018232:	68fb      	ldr	r3, [r7, #12]
}
 8018234:	4618      	mov	r0, r3
 8018236:	3710      	adds	r7, #16
 8018238:	46bd      	mov	sp, r7
 801823a:	bd80      	pop	{r7, pc}
 801823c:	0802b78c 	.word	0x0802b78c
 8018240:	0802b890 	.word	0x0802b890
 8018244:	0802b7ec 	.word	0x0802b7ec

08018248 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b088      	sub	sp, #32
 801824c:	af02      	add	r7, sp, #8
 801824e:	607b      	str	r3, [r7, #4]
 8018250:	4603      	mov	r3, r0
 8018252:	73fb      	strb	r3, [r7, #15]
 8018254:	460b      	mov	r3, r1
 8018256:	81bb      	strh	r3, [r7, #12]
 8018258:	4613      	mov	r3, r2
 801825a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801825c:	7bfb      	ldrb	r3, [r7, #15]
 801825e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8018260:	8a7b      	ldrh	r3, [r7, #18]
 8018262:	3303      	adds	r3, #3
 8018264:	f023 0203 	bic.w	r2, r3, #3
 8018268:	89bb      	ldrh	r3, [r7, #12]
 801826a:	441a      	add	r2, r3
 801826c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801826e:	429a      	cmp	r2, r3
 8018270:	d901      	bls.n	8018276 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8018272:	2300      	movs	r3, #0
 8018274:	e018      	b.n	80182a8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8018276:	6a3b      	ldr	r3, [r7, #32]
 8018278:	2b00      	cmp	r3, #0
 801827a:	d007      	beq.n	801828c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801827c:	8a7b      	ldrh	r3, [r7, #18]
 801827e:	3303      	adds	r3, #3
 8018280:	f023 0303 	bic.w	r3, r3, #3
 8018284:	6a3a      	ldr	r2, [r7, #32]
 8018286:	4413      	add	r3, r2
 8018288:	617b      	str	r3, [r7, #20]
 801828a:	e001      	b.n	8018290 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801828c:	2300      	movs	r3, #0
 801828e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8018290:	6878      	ldr	r0, [r7, #4]
 8018292:	89b9      	ldrh	r1, [r7, #12]
 8018294:	89ba      	ldrh	r2, [r7, #12]
 8018296:	2302      	movs	r3, #2
 8018298:	9301      	str	r3, [sp, #4]
 801829a:	897b      	ldrh	r3, [r7, #10]
 801829c:	9300      	str	r3, [sp, #0]
 801829e:	460b      	mov	r3, r1
 80182a0:	6979      	ldr	r1, [r7, #20]
 80182a2:	f7ff fe7d 	bl	8017fa0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80182a6:	687b      	ldr	r3, [r7, #4]
}
 80182a8:	4618      	mov	r0, r3
 80182aa:	3718      	adds	r7, #24
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd80      	pop	{r7, pc}

080182b0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	b084      	sub	sp, #16
 80182b4:	af00      	add	r7, sp, #0
 80182b6:	6078      	str	r0, [r7, #4]
 80182b8:	460b      	mov	r3, r1
 80182ba:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d106      	bne.n	80182d0 <pbuf_realloc+0x20>
 80182c2:	4b3a      	ldr	r3, [pc, #232]	; (80183ac <pbuf_realloc+0xfc>)
 80182c4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80182c8:	4939      	ldr	r1, [pc, #228]	; (80183b0 <pbuf_realloc+0x100>)
 80182ca:	483a      	ldr	r0, [pc, #232]	; (80183b4 <pbuf_realloc+0x104>)
 80182cc:	f00c fd78 	bl	8024dc0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	891b      	ldrh	r3, [r3, #8]
 80182d4:	887a      	ldrh	r2, [r7, #2]
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d263      	bcs.n	80183a2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	891a      	ldrh	r2, [r3, #8]
 80182de:	887b      	ldrh	r3, [r7, #2]
 80182e0:	1ad3      	subs	r3, r2, r3
 80182e2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80182e4:	887b      	ldrh	r3, [r7, #2]
 80182e6:	817b      	strh	r3, [r7, #10]
  q = p;
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80182ec:	e018      	b.n	8018320 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80182ee:	68fb      	ldr	r3, [r7, #12]
 80182f0:	895b      	ldrh	r3, [r3, #10]
 80182f2:	897a      	ldrh	r2, [r7, #10]
 80182f4:	1ad3      	subs	r3, r2, r3
 80182f6:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80182f8:	68fb      	ldr	r3, [r7, #12]
 80182fa:	891a      	ldrh	r2, [r3, #8]
 80182fc:	893b      	ldrh	r3, [r7, #8]
 80182fe:	1ad3      	subs	r3, r2, r3
 8018300:	b29a      	uxth	r2, r3
 8018302:	68fb      	ldr	r3, [r7, #12]
 8018304:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8018306:	68fb      	ldr	r3, [r7, #12]
 8018308:	681b      	ldr	r3, [r3, #0]
 801830a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	2b00      	cmp	r3, #0
 8018310:	d106      	bne.n	8018320 <pbuf_realloc+0x70>
 8018312:	4b26      	ldr	r3, [pc, #152]	; (80183ac <pbuf_realloc+0xfc>)
 8018314:	f240 12af 	movw	r2, #431	; 0x1af
 8018318:	4927      	ldr	r1, [pc, #156]	; (80183b8 <pbuf_realloc+0x108>)
 801831a:	4826      	ldr	r0, [pc, #152]	; (80183b4 <pbuf_realloc+0x104>)
 801831c:	f00c fd50 	bl	8024dc0 <iprintf>
  while (rem_len > q->len) {
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	895b      	ldrh	r3, [r3, #10]
 8018324:	897a      	ldrh	r2, [r7, #10]
 8018326:	429a      	cmp	r2, r3
 8018328:	d8e1      	bhi.n	80182ee <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	7b1b      	ldrb	r3, [r3, #12]
 801832e:	f003 030f 	and.w	r3, r3, #15
 8018332:	2b00      	cmp	r3, #0
 8018334:	d121      	bne.n	801837a <pbuf_realloc+0xca>
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	895b      	ldrh	r3, [r3, #10]
 801833a:	897a      	ldrh	r2, [r7, #10]
 801833c:	429a      	cmp	r2, r3
 801833e:	d01c      	beq.n	801837a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	7b5b      	ldrb	r3, [r3, #13]
 8018344:	f003 0302 	and.w	r3, r3, #2
 8018348:	2b00      	cmp	r3, #0
 801834a:	d116      	bne.n	801837a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801834c:	68fb      	ldr	r3, [r7, #12]
 801834e:	685a      	ldr	r2, [r3, #4]
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	1ad3      	subs	r3, r2, r3
 8018354:	b29a      	uxth	r2, r3
 8018356:	897b      	ldrh	r3, [r7, #10]
 8018358:	4413      	add	r3, r2
 801835a:	b29b      	uxth	r3, r3
 801835c:	4619      	mov	r1, r3
 801835e:	68f8      	ldr	r0, [r7, #12]
 8018360:	f7fe ff64 	bl	801722c <mem_trim>
 8018364:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d106      	bne.n	801837a <pbuf_realloc+0xca>
 801836c:	4b0f      	ldr	r3, [pc, #60]	; (80183ac <pbuf_realloc+0xfc>)
 801836e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8018372:	4912      	ldr	r1, [pc, #72]	; (80183bc <pbuf_realloc+0x10c>)
 8018374:	480f      	ldr	r0, [pc, #60]	; (80183b4 <pbuf_realloc+0x104>)
 8018376:	f00c fd23 	bl	8024dc0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	897a      	ldrh	r2, [r7, #10]
 801837e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	895a      	ldrh	r2, [r3, #10]
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	2b00      	cmp	r3, #0
 801838e:	d004      	beq.n	801839a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	681b      	ldr	r3, [r3, #0]
 8018394:	4618      	mov	r0, r3
 8018396:	f000 f911 	bl	80185bc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	2200      	movs	r2, #0
 801839e:	601a      	str	r2, [r3, #0]
 80183a0:	e000      	b.n	80183a4 <pbuf_realloc+0xf4>
    return;
 80183a2:	bf00      	nop

}
 80183a4:	3710      	adds	r7, #16
 80183a6:	46bd      	mov	sp, r7
 80183a8:	bd80      	pop	{r7, pc}
 80183aa:	bf00      	nop
 80183ac:	0802b78c 	.word	0x0802b78c
 80183b0:	0802b8a4 	.word	0x0802b8a4
 80183b4:	0802b7ec 	.word	0x0802b7ec
 80183b8:	0802b8bc 	.word	0x0802b8bc
 80183bc:	0802b8d4 	.word	0x0802b8d4

080183c0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80183c0:	b580      	push	{r7, lr}
 80183c2:	b086      	sub	sp, #24
 80183c4:	af00      	add	r7, sp, #0
 80183c6:	60f8      	str	r0, [r7, #12]
 80183c8:	60b9      	str	r1, [r7, #8]
 80183ca:	4613      	mov	r3, r2
 80183cc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d106      	bne.n	80183e2 <pbuf_add_header_impl+0x22>
 80183d4:	4b2b      	ldr	r3, [pc, #172]	; (8018484 <pbuf_add_header_impl+0xc4>)
 80183d6:	f240 12df 	movw	r2, #479	; 0x1df
 80183da:	492b      	ldr	r1, [pc, #172]	; (8018488 <pbuf_add_header_impl+0xc8>)
 80183dc:	482b      	ldr	r0, [pc, #172]	; (801848c <pbuf_add_header_impl+0xcc>)
 80183de:	f00c fcef 	bl	8024dc0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	2b00      	cmp	r3, #0
 80183e6:	d003      	beq.n	80183f0 <pbuf_add_header_impl+0x30>
 80183e8:	68bb      	ldr	r3, [r7, #8]
 80183ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80183ee:	d301      	bcc.n	80183f4 <pbuf_add_header_impl+0x34>
    return 1;
 80183f0:	2301      	movs	r3, #1
 80183f2:	e043      	b.n	801847c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80183f4:	68bb      	ldr	r3, [r7, #8]
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d101      	bne.n	80183fe <pbuf_add_header_impl+0x3e>
    return 0;
 80183fa:	2300      	movs	r3, #0
 80183fc:	e03e      	b.n	801847c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80183fe:	68bb      	ldr	r3, [r7, #8]
 8018400:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	891a      	ldrh	r2, [r3, #8]
 8018406:	8a7b      	ldrh	r3, [r7, #18]
 8018408:	4413      	add	r3, r2
 801840a:	b29b      	uxth	r3, r3
 801840c:	8a7a      	ldrh	r2, [r7, #18]
 801840e:	429a      	cmp	r2, r3
 8018410:	d901      	bls.n	8018416 <pbuf_add_header_impl+0x56>
    return 1;
 8018412:	2301      	movs	r3, #1
 8018414:	e032      	b.n	801847c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	7b1b      	ldrb	r3, [r3, #12]
 801841a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801841c:	8a3b      	ldrh	r3, [r7, #16]
 801841e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018422:	2b00      	cmp	r3, #0
 8018424:	d00c      	beq.n	8018440 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	685a      	ldr	r2, [r3, #4]
 801842a:	68bb      	ldr	r3, [r7, #8]
 801842c:	425b      	negs	r3, r3
 801842e:	4413      	add	r3, r2
 8018430:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	3310      	adds	r3, #16
 8018436:	697a      	ldr	r2, [r7, #20]
 8018438:	429a      	cmp	r2, r3
 801843a:	d20d      	bcs.n	8018458 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801843c:	2301      	movs	r3, #1
 801843e:	e01d      	b.n	801847c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8018440:	79fb      	ldrb	r3, [r7, #7]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d006      	beq.n	8018454 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	685a      	ldr	r2, [r3, #4]
 801844a:	68bb      	ldr	r3, [r7, #8]
 801844c:	425b      	negs	r3, r3
 801844e:	4413      	add	r3, r2
 8018450:	617b      	str	r3, [r7, #20]
 8018452:	e001      	b.n	8018458 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8018454:	2301      	movs	r3, #1
 8018456:	e011      	b.n	801847c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	697a      	ldr	r2, [r7, #20]
 801845c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801845e:	68fb      	ldr	r3, [r7, #12]
 8018460:	895a      	ldrh	r2, [r3, #10]
 8018462:	8a7b      	ldrh	r3, [r7, #18]
 8018464:	4413      	add	r3, r2
 8018466:	b29a      	uxth	r2, r3
 8018468:	68fb      	ldr	r3, [r7, #12]
 801846a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	891a      	ldrh	r2, [r3, #8]
 8018470:	8a7b      	ldrh	r3, [r7, #18]
 8018472:	4413      	add	r3, r2
 8018474:	b29a      	uxth	r2, r3
 8018476:	68fb      	ldr	r3, [r7, #12]
 8018478:	811a      	strh	r2, [r3, #8]


  return 0;
 801847a:	2300      	movs	r3, #0
}
 801847c:	4618      	mov	r0, r3
 801847e:	3718      	adds	r7, #24
 8018480:	46bd      	mov	sp, r7
 8018482:	bd80      	pop	{r7, pc}
 8018484:	0802b78c 	.word	0x0802b78c
 8018488:	0802b8f0 	.word	0x0802b8f0
 801848c:	0802b7ec 	.word	0x0802b7ec

08018490 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	b082      	sub	sp, #8
 8018494:	af00      	add	r7, sp, #0
 8018496:	6078      	str	r0, [r7, #4]
 8018498:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801849a:	2200      	movs	r2, #0
 801849c:	6839      	ldr	r1, [r7, #0]
 801849e:	6878      	ldr	r0, [r7, #4]
 80184a0:	f7ff ff8e 	bl	80183c0 <pbuf_add_header_impl>
 80184a4:	4603      	mov	r3, r0
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	3708      	adds	r7, #8
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}
	...

080184b0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b084      	sub	sp, #16
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
 80184b8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80184ba:	687b      	ldr	r3, [r7, #4]
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d106      	bne.n	80184ce <pbuf_remove_header+0x1e>
 80184c0:	4b20      	ldr	r3, [pc, #128]	; (8018544 <pbuf_remove_header+0x94>)
 80184c2:	f240 224b 	movw	r2, #587	; 0x24b
 80184c6:	4920      	ldr	r1, [pc, #128]	; (8018548 <pbuf_remove_header+0x98>)
 80184c8:	4820      	ldr	r0, [pc, #128]	; (801854c <pbuf_remove_header+0x9c>)
 80184ca:	f00c fc79 	bl	8024dc0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d003      	beq.n	80184dc <pbuf_remove_header+0x2c>
 80184d4:	683b      	ldr	r3, [r7, #0]
 80184d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80184da:	d301      	bcc.n	80184e0 <pbuf_remove_header+0x30>
    return 1;
 80184dc:	2301      	movs	r3, #1
 80184de:	e02c      	b.n	801853a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80184e0:	683b      	ldr	r3, [r7, #0]
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d101      	bne.n	80184ea <pbuf_remove_header+0x3a>
    return 0;
 80184e6:	2300      	movs	r3, #0
 80184e8:	e027      	b.n	801853a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80184ea:	683b      	ldr	r3, [r7, #0]
 80184ec:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	895b      	ldrh	r3, [r3, #10]
 80184f2:	89fa      	ldrh	r2, [r7, #14]
 80184f4:	429a      	cmp	r2, r3
 80184f6:	d908      	bls.n	801850a <pbuf_remove_header+0x5a>
 80184f8:	4b12      	ldr	r3, [pc, #72]	; (8018544 <pbuf_remove_header+0x94>)
 80184fa:	f240 2255 	movw	r2, #597	; 0x255
 80184fe:	4914      	ldr	r1, [pc, #80]	; (8018550 <pbuf_remove_header+0xa0>)
 8018500:	4812      	ldr	r0, [pc, #72]	; (801854c <pbuf_remove_header+0x9c>)
 8018502:	f00c fc5d 	bl	8024dc0 <iprintf>
 8018506:	2301      	movs	r3, #1
 8018508:	e017      	b.n	801853a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	685b      	ldr	r3, [r3, #4]
 801850e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	685a      	ldr	r2, [r3, #4]
 8018514:	683b      	ldr	r3, [r7, #0]
 8018516:	441a      	add	r2, r3
 8018518:	687b      	ldr	r3, [r7, #4]
 801851a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	895a      	ldrh	r2, [r3, #10]
 8018520:	89fb      	ldrh	r3, [r7, #14]
 8018522:	1ad3      	subs	r3, r2, r3
 8018524:	b29a      	uxth	r2, r3
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	891a      	ldrh	r2, [r3, #8]
 801852e:	89fb      	ldrh	r3, [r7, #14]
 8018530:	1ad3      	subs	r3, r2, r3
 8018532:	b29a      	uxth	r2, r3
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8018538:	2300      	movs	r3, #0
}
 801853a:	4618      	mov	r0, r3
 801853c:	3710      	adds	r7, #16
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}
 8018542:	bf00      	nop
 8018544:	0802b78c 	.word	0x0802b78c
 8018548:	0802b8f0 	.word	0x0802b8f0
 801854c:	0802b7ec 	.word	0x0802b7ec
 8018550:	0802b8fc 	.word	0x0802b8fc

08018554 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8018554:	b580      	push	{r7, lr}
 8018556:	b082      	sub	sp, #8
 8018558:	af00      	add	r7, sp, #0
 801855a:	6078      	str	r0, [r7, #4]
 801855c:	460b      	mov	r3, r1
 801855e:	807b      	strh	r3, [r7, #2]
 8018560:	4613      	mov	r3, r2
 8018562:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8018564:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018568:	2b00      	cmp	r3, #0
 801856a:	da08      	bge.n	801857e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801856c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018570:	425b      	negs	r3, r3
 8018572:	4619      	mov	r1, r3
 8018574:	6878      	ldr	r0, [r7, #4]
 8018576:	f7ff ff9b 	bl	80184b0 <pbuf_remove_header>
 801857a:	4603      	mov	r3, r0
 801857c:	e007      	b.n	801858e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801857e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018582:	787a      	ldrb	r2, [r7, #1]
 8018584:	4619      	mov	r1, r3
 8018586:	6878      	ldr	r0, [r7, #4]
 8018588:	f7ff ff1a 	bl	80183c0 <pbuf_add_header_impl>
 801858c:	4603      	mov	r3, r0
  }
}
 801858e:	4618      	mov	r0, r3
 8018590:	3708      	adds	r7, #8
 8018592:	46bd      	mov	sp, r7
 8018594:	bd80      	pop	{r7, pc}

08018596 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8018596:	b580      	push	{r7, lr}
 8018598:	b082      	sub	sp, #8
 801859a:	af00      	add	r7, sp, #0
 801859c:	6078      	str	r0, [r7, #4]
 801859e:	460b      	mov	r3, r1
 80185a0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80185a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80185a6:	2201      	movs	r2, #1
 80185a8:	4619      	mov	r1, r3
 80185aa:	6878      	ldr	r0, [r7, #4]
 80185ac:	f7ff ffd2 	bl	8018554 <pbuf_header_impl>
 80185b0:	4603      	mov	r3, r0
}
 80185b2:	4618      	mov	r0, r3
 80185b4:	3708      	adds	r7, #8
 80185b6:	46bd      	mov	sp, r7
 80185b8:	bd80      	pop	{r7, pc}
	...

080185bc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b088      	sub	sp, #32
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d10b      	bne.n	80185e2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80185ca:	687b      	ldr	r3, [r7, #4]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d106      	bne.n	80185de <pbuf_free+0x22>
 80185d0:	4b3b      	ldr	r3, [pc, #236]	; (80186c0 <pbuf_free+0x104>)
 80185d2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80185d6:	493b      	ldr	r1, [pc, #236]	; (80186c4 <pbuf_free+0x108>)
 80185d8:	483b      	ldr	r0, [pc, #236]	; (80186c8 <pbuf_free+0x10c>)
 80185da:	f00c fbf1 	bl	8024dc0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80185de:	2300      	movs	r3, #0
 80185e0:	e069      	b.n	80186b6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80185e2:	2300      	movs	r3, #0
 80185e4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80185e6:	e062      	b.n	80186ae <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80185e8:	f00a fb66 	bl	8022cb8 <sys_arch_protect>
 80185ec:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	7b9b      	ldrb	r3, [r3, #14]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d106      	bne.n	8018604 <pbuf_free+0x48>
 80185f6:	4b32      	ldr	r3, [pc, #200]	; (80186c0 <pbuf_free+0x104>)
 80185f8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80185fc:	4933      	ldr	r1, [pc, #204]	; (80186cc <pbuf_free+0x110>)
 80185fe:	4832      	ldr	r0, [pc, #200]	; (80186c8 <pbuf_free+0x10c>)
 8018600:	f00c fbde 	bl	8024dc0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	7b9b      	ldrb	r3, [r3, #14]
 8018608:	3b01      	subs	r3, #1
 801860a:	b2da      	uxtb	r2, r3
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	739a      	strb	r2, [r3, #14]
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	7b9b      	ldrb	r3, [r3, #14]
 8018614:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8018616:	69b8      	ldr	r0, [r7, #24]
 8018618:	f00a fb5c 	bl	8022cd4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801861c:	7dfb      	ldrb	r3, [r7, #23]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d143      	bne.n	80186aa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	7b1b      	ldrb	r3, [r3, #12]
 801862c:	f003 030f 	and.w	r3, r3, #15
 8018630:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	7b5b      	ldrb	r3, [r3, #13]
 8018636:	f003 0302 	and.w	r3, r3, #2
 801863a:	2b00      	cmp	r3, #0
 801863c:	d011      	beq.n	8018662 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8018642:	68bb      	ldr	r3, [r7, #8]
 8018644:	691b      	ldr	r3, [r3, #16]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d106      	bne.n	8018658 <pbuf_free+0x9c>
 801864a:	4b1d      	ldr	r3, [pc, #116]	; (80186c0 <pbuf_free+0x104>)
 801864c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8018650:	491f      	ldr	r1, [pc, #124]	; (80186d0 <pbuf_free+0x114>)
 8018652:	481d      	ldr	r0, [pc, #116]	; (80186c8 <pbuf_free+0x10c>)
 8018654:	f00c fbb4 	bl	8024dc0 <iprintf>
        pc->custom_free_function(p);
 8018658:	68bb      	ldr	r3, [r7, #8]
 801865a:	691b      	ldr	r3, [r3, #16]
 801865c:	6878      	ldr	r0, [r7, #4]
 801865e:	4798      	blx	r3
 8018660:	e01d      	b.n	801869e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8018662:	7bfb      	ldrb	r3, [r7, #15]
 8018664:	2b02      	cmp	r3, #2
 8018666:	d104      	bne.n	8018672 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8018668:	6879      	ldr	r1, [r7, #4]
 801866a:	200d      	movs	r0, #13
 801866c:	f7ff f902 	bl	8017874 <memp_free>
 8018670:	e015      	b.n	801869e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8018672:	7bfb      	ldrb	r3, [r7, #15]
 8018674:	2b01      	cmp	r3, #1
 8018676:	d104      	bne.n	8018682 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8018678:	6879      	ldr	r1, [r7, #4]
 801867a:	200c      	movs	r0, #12
 801867c:	f7ff f8fa 	bl	8017874 <memp_free>
 8018680:	e00d      	b.n	801869e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8018682:	7bfb      	ldrb	r3, [r7, #15]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d103      	bne.n	8018690 <pbuf_free+0xd4>
          mem_free(p);
 8018688:	6878      	ldr	r0, [r7, #4]
 801868a:	f7fe fd3f 	bl	801710c <mem_free>
 801868e:	e006      	b.n	801869e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8018690:	4b0b      	ldr	r3, [pc, #44]	; (80186c0 <pbuf_free+0x104>)
 8018692:	f240 320f 	movw	r2, #783	; 0x30f
 8018696:	490f      	ldr	r1, [pc, #60]	; (80186d4 <pbuf_free+0x118>)
 8018698:	480b      	ldr	r0, [pc, #44]	; (80186c8 <pbuf_free+0x10c>)
 801869a:	f00c fb91 	bl	8024dc0 <iprintf>
        }
      }
      count++;
 801869e:	7ffb      	ldrb	r3, [r7, #31]
 80186a0:	3301      	adds	r3, #1
 80186a2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80186a4:	693b      	ldr	r3, [r7, #16]
 80186a6:	607b      	str	r3, [r7, #4]
 80186a8:	e001      	b.n	80186ae <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80186aa:	2300      	movs	r3, #0
 80186ac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d199      	bne.n	80185e8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80186b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80186b6:	4618      	mov	r0, r3
 80186b8:	3720      	adds	r7, #32
 80186ba:	46bd      	mov	sp, r7
 80186bc:	bd80      	pop	{r7, pc}
 80186be:	bf00      	nop
 80186c0:	0802b78c 	.word	0x0802b78c
 80186c4:	0802b8f0 	.word	0x0802b8f0
 80186c8:	0802b7ec 	.word	0x0802b7ec
 80186cc:	0802b91c 	.word	0x0802b91c
 80186d0:	0802b934 	.word	0x0802b934
 80186d4:	0802b958 	.word	0x0802b958

080186d8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80186d8:	b480      	push	{r7}
 80186da:	b085      	sub	sp, #20
 80186dc:	af00      	add	r7, sp, #0
 80186de:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80186e0:	2300      	movs	r3, #0
 80186e2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80186e4:	e005      	b.n	80186f2 <pbuf_clen+0x1a>
    ++len;
 80186e6:	89fb      	ldrh	r3, [r7, #14]
 80186e8:	3301      	adds	r3, #1
 80186ea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	2b00      	cmp	r3, #0
 80186f6:	d1f6      	bne.n	80186e6 <pbuf_clen+0xe>
  }
  return len;
 80186f8:	89fb      	ldrh	r3, [r7, #14]
}
 80186fa:	4618      	mov	r0, r3
 80186fc:	3714      	adds	r7, #20
 80186fe:	46bd      	mov	sp, r7
 8018700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018704:	4770      	bx	lr
	...

08018708 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8018708:	b580      	push	{r7, lr}
 801870a:	b084      	sub	sp, #16
 801870c:	af00      	add	r7, sp, #0
 801870e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	2b00      	cmp	r3, #0
 8018714:	d016      	beq.n	8018744 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8018716:	f00a facf 	bl	8022cb8 <sys_arch_protect>
 801871a:	60f8      	str	r0, [r7, #12]
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	7b9b      	ldrb	r3, [r3, #14]
 8018720:	3301      	adds	r3, #1
 8018722:	b2da      	uxtb	r2, r3
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	739a      	strb	r2, [r3, #14]
 8018728:	68f8      	ldr	r0, [r7, #12]
 801872a:	f00a fad3 	bl	8022cd4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	7b9b      	ldrb	r3, [r3, #14]
 8018732:	2b00      	cmp	r3, #0
 8018734:	d106      	bne.n	8018744 <pbuf_ref+0x3c>
 8018736:	4b05      	ldr	r3, [pc, #20]	; (801874c <pbuf_ref+0x44>)
 8018738:	f240 3242 	movw	r2, #834	; 0x342
 801873c:	4904      	ldr	r1, [pc, #16]	; (8018750 <pbuf_ref+0x48>)
 801873e:	4805      	ldr	r0, [pc, #20]	; (8018754 <pbuf_ref+0x4c>)
 8018740:	f00c fb3e 	bl	8024dc0 <iprintf>
  }
}
 8018744:	bf00      	nop
 8018746:	3710      	adds	r7, #16
 8018748:	46bd      	mov	sp, r7
 801874a:	bd80      	pop	{r7, pc}
 801874c:	0802b78c 	.word	0x0802b78c
 8018750:	0802b96c 	.word	0x0802b96c
 8018754:	0802b7ec 	.word	0x0802b7ec

08018758 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018758:	b580      	push	{r7, lr}
 801875a:	b084      	sub	sp, #16
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
 8018760:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d002      	beq.n	801876e <pbuf_cat+0x16>
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	2b00      	cmp	r3, #0
 801876c:	d107      	bne.n	801877e <pbuf_cat+0x26>
 801876e:	4b20      	ldr	r3, [pc, #128]	; (80187f0 <pbuf_cat+0x98>)
 8018770:	f240 3259 	movw	r2, #857	; 0x359
 8018774:	491f      	ldr	r1, [pc, #124]	; (80187f4 <pbuf_cat+0x9c>)
 8018776:	4820      	ldr	r0, [pc, #128]	; (80187f8 <pbuf_cat+0xa0>)
 8018778:	f00c fb22 	bl	8024dc0 <iprintf>
 801877c:	e034      	b.n	80187e8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	60fb      	str	r3, [r7, #12]
 8018782:	e00a      	b.n	801879a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	891a      	ldrh	r2, [r3, #8]
 8018788:	683b      	ldr	r3, [r7, #0]
 801878a:	891b      	ldrh	r3, [r3, #8]
 801878c:	4413      	add	r3, r2
 801878e:	b29a      	uxth	r2, r3
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8018794:	68fb      	ldr	r3, [r7, #12]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	60fb      	str	r3, [r7, #12]
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	681b      	ldr	r3, [r3, #0]
 801879e:	2b00      	cmp	r3, #0
 80187a0:	d1f0      	bne.n	8018784 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80187a2:	68fb      	ldr	r3, [r7, #12]
 80187a4:	891a      	ldrh	r2, [r3, #8]
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	895b      	ldrh	r3, [r3, #10]
 80187aa:	429a      	cmp	r2, r3
 80187ac:	d006      	beq.n	80187bc <pbuf_cat+0x64>
 80187ae:	4b10      	ldr	r3, [pc, #64]	; (80187f0 <pbuf_cat+0x98>)
 80187b0:	f240 3262 	movw	r2, #866	; 0x362
 80187b4:	4911      	ldr	r1, [pc, #68]	; (80187fc <pbuf_cat+0xa4>)
 80187b6:	4810      	ldr	r0, [pc, #64]	; (80187f8 <pbuf_cat+0xa0>)
 80187b8:	f00c fb02 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80187bc:	68fb      	ldr	r3, [r7, #12]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d006      	beq.n	80187d2 <pbuf_cat+0x7a>
 80187c4:	4b0a      	ldr	r3, [pc, #40]	; (80187f0 <pbuf_cat+0x98>)
 80187c6:	f240 3263 	movw	r2, #867	; 0x363
 80187ca:	490d      	ldr	r1, [pc, #52]	; (8018800 <pbuf_cat+0xa8>)
 80187cc:	480a      	ldr	r0, [pc, #40]	; (80187f8 <pbuf_cat+0xa0>)
 80187ce:	f00c faf7 	bl	8024dc0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	891a      	ldrh	r2, [r3, #8]
 80187d6:	683b      	ldr	r3, [r7, #0]
 80187d8:	891b      	ldrh	r3, [r3, #8]
 80187da:	4413      	add	r3, r2
 80187dc:	b29a      	uxth	r2, r3
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	683a      	ldr	r2, [r7, #0]
 80187e6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80187e8:	3710      	adds	r7, #16
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop
 80187f0:	0802b78c 	.word	0x0802b78c
 80187f4:	0802b980 	.word	0x0802b980
 80187f8:	0802b7ec 	.word	0x0802b7ec
 80187fc:	0802b9b8 	.word	0x0802b9b8
 8018800:	0802b9e8 	.word	0x0802b9e8

08018804 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b082      	sub	sp, #8
 8018808:	af00      	add	r7, sp, #0
 801880a:	6078      	str	r0, [r7, #4]
 801880c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801880e:	6839      	ldr	r1, [r7, #0]
 8018810:	6878      	ldr	r0, [r7, #4]
 8018812:	f7ff ffa1 	bl	8018758 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8018816:	6838      	ldr	r0, [r7, #0]
 8018818:	f7ff ff76 	bl	8018708 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801881c:	bf00      	nop
 801881e:	3708      	adds	r7, #8
 8018820:	46bd      	mov	sp, r7
 8018822:	bd80      	pop	{r7, pc}

08018824 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8018824:	b580      	push	{r7, lr}
 8018826:	b086      	sub	sp, #24
 8018828:	af00      	add	r7, sp, #0
 801882a:	6078      	str	r0, [r7, #4]
 801882c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801882e:	2300      	movs	r3, #0
 8018830:	617b      	str	r3, [r7, #20]
 8018832:	2300      	movs	r3, #0
 8018834:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8018836:	687b      	ldr	r3, [r7, #4]
 8018838:	2b00      	cmp	r3, #0
 801883a:	d008      	beq.n	801884e <pbuf_copy+0x2a>
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	2b00      	cmp	r3, #0
 8018840:	d005      	beq.n	801884e <pbuf_copy+0x2a>
 8018842:	687b      	ldr	r3, [r7, #4]
 8018844:	891a      	ldrh	r2, [r3, #8]
 8018846:	683b      	ldr	r3, [r7, #0]
 8018848:	891b      	ldrh	r3, [r3, #8]
 801884a:	429a      	cmp	r2, r3
 801884c:	d209      	bcs.n	8018862 <pbuf_copy+0x3e>
 801884e:	4b57      	ldr	r3, [pc, #348]	; (80189ac <pbuf_copy+0x188>)
 8018850:	f240 32c9 	movw	r2, #969	; 0x3c9
 8018854:	4956      	ldr	r1, [pc, #344]	; (80189b0 <pbuf_copy+0x18c>)
 8018856:	4857      	ldr	r0, [pc, #348]	; (80189b4 <pbuf_copy+0x190>)
 8018858:	f00c fab2 	bl	8024dc0 <iprintf>
 801885c:	f06f 030f 	mvn.w	r3, #15
 8018860:	e09f      	b.n	80189a2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	895b      	ldrh	r3, [r3, #10]
 8018866:	461a      	mov	r2, r3
 8018868:	697b      	ldr	r3, [r7, #20]
 801886a:	1ad2      	subs	r2, r2, r3
 801886c:	683b      	ldr	r3, [r7, #0]
 801886e:	895b      	ldrh	r3, [r3, #10]
 8018870:	4619      	mov	r1, r3
 8018872:	693b      	ldr	r3, [r7, #16]
 8018874:	1acb      	subs	r3, r1, r3
 8018876:	429a      	cmp	r2, r3
 8018878:	d306      	bcc.n	8018888 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801887a:	683b      	ldr	r3, [r7, #0]
 801887c:	895b      	ldrh	r3, [r3, #10]
 801887e:	461a      	mov	r2, r3
 8018880:	693b      	ldr	r3, [r7, #16]
 8018882:	1ad3      	subs	r3, r2, r3
 8018884:	60fb      	str	r3, [r7, #12]
 8018886:	e005      	b.n	8018894 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8018888:	687b      	ldr	r3, [r7, #4]
 801888a:	895b      	ldrh	r3, [r3, #10]
 801888c:	461a      	mov	r2, r3
 801888e:	697b      	ldr	r3, [r7, #20]
 8018890:	1ad3      	subs	r3, r2, r3
 8018892:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	685a      	ldr	r2, [r3, #4]
 8018898:	697b      	ldr	r3, [r7, #20]
 801889a:	18d0      	adds	r0, r2, r3
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	685a      	ldr	r2, [r3, #4]
 80188a0:	693b      	ldr	r3, [r7, #16]
 80188a2:	4413      	add	r3, r2
 80188a4:	68fa      	ldr	r2, [r7, #12]
 80188a6:	4619      	mov	r1, r3
 80188a8:	f00d ff49 	bl	802673e <memcpy>
    offset_to += len;
 80188ac:	697a      	ldr	r2, [r7, #20]
 80188ae:	68fb      	ldr	r3, [r7, #12]
 80188b0:	4413      	add	r3, r2
 80188b2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80188b4:	693a      	ldr	r2, [r7, #16]
 80188b6:	68fb      	ldr	r3, [r7, #12]
 80188b8:	4413      	add	r3, r2
 80188ba:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	895b      	ldrh	r3, [r3, #10]
 80188c0:	461a      	mov	r2, r3
 80188c2:	697b      	ldr	r3, [r7, #20]
 80188c4:	4293      	cmp	r3, r2
 80188c6:	d906      	bls.n	80188d6 <pbuf_copy+0xb2>
 80188c8:	4b38      	ldr	r3, [pc, #224]	; (80189ac <pbuf_copy+0x188>)
 80188ca:	f240 32d9 	movw	r2, #985	; 0x3d9
 80188ce:	493a      	ldr	r1, [pc, #232]	; (80189b8 <pbuf_copy+0x194>)
 80188d0:	4838      	ldr	r0, [pc, #224]	; (80189b4 <pbuf_copy+0x190>)
 80188d2:	f00c fa75 	bl	8024dc0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80188d6:	683b      	ldr	r3, [r7, #0]
 80188d8:	895b      	ldrh	r3, [r3, #10]
 80188da:	461a      	mov	r2, r3
 80188dc:	693b      	ldr	r3, [r7, #16]
 80188de:	4293      	cmp	r3, r2
 80188e0:	d906      	bls.n	80188f0 <pbuf_copy+0xcc>
 80188e2:	4b32      	ldr	r3, [pc, #200]	; (80189ac <pbuf_copy+0x188>)
 80188e4:	f240 32da 	movw	r2, #986	; 0x3da
 80188e8:	4934      	ldr	r1, [pc, #208]	; (80189bc <pbuf_copy+0x198>)
 80188ea:	4832      	ldr	r0, [pc, #200]	; (80189b4 <pbuf_copy+0x190>)
 80188ec:	f00c fa68 	bl	8024dc0 <iprintf>
    if (offset_from >= p_from->len) {
 80188f0:	683b      	ldr	r3, [r7, #0]
 80188f2:	895b      	ldrh	r3, [r3, #10]
 80188f4:	461a      	mov	r2, r3
 80188f6:	693b      	ldr	r3, [r7, #16]
 80188f8:	4293      	cmp	r3, r2
 80188fa:	d304      	bcc.n	8018906 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80188fc:	2300      	movs	r3, #0
 80188fe:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8018900:	683b      	ldr	r3, [r7, #0]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	895b      	ldrh	r3, [r3, #10]
 801890a:	461a      	mov	r2, r3
 801890c:	697b      	ldr	r3, [r7, #20]
 801890e:	4293      	cmp	r3, r2
 8018910:	d114      	bne.n	801893c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8018912:	2300      	movs	r3, #0
 8018914:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801891c:	687b      	ldr	r3, [r7, #4]
 801891e:	2b00      	cmp	r3, #0
 8018920:	d10c      	bne.n	801893c <pbuf_copy+0x118>
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d009      	beq.n	801893c <pbuf_copy+0x118>
 8018928:	4b20      	ldr	r3, [pc, #128]	; (80189ac <pbuf_copy+0x188>)
 801892a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801892e:	4924      	ldr	r1, [pc, #144]	; (80189c0 <pbuf_copy+0x19c>)
 8018930:	4820      	ldr	r0, [pc, #128]	; (80189b4 <pbuf_copy+0x190>)
 8018932:	f00c fa45 	bl	8024dc0 <iprintf>
 8018936:	f06f 030f 	mvn.w	r3, #15
 801893a:	e032      	b.n	80189a2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801893c:	683b      	ldr	r3, [r7, #0]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d013      	beq.n	801896a <pbuf_copy+0x146>
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	895a      	ldrh	r2, [r3, #10]
 8018946:	683b      	ldr	r3, [r7, #0]
 8018948:	891b      	ldrh	r3, [r3, #8]
 801894a:	429a      	cmp	r2, r3
 801894c:	d10d      	bne.n	801896a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801894e:	683b      	ldr	r3, [r7, #0]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	2b00      	cmp	r3, #0
 8018954:	d009      	beq.n	801896a <pbuf_copy+0x146>
 8018956:	4b15      	ldr	r3, [pc, #84]	; (80189ac <pbuf_copy+0x188>)
 8018958:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801895c:	4919      	ldr	r1, [pc, #100]	; (80189c4 <pbuf_copy+0x1a0>)
 801895e:	4815      	ldr	r0, [pc, #84]	; (80189b4 <pbuf_copy+0x190>)
 8018960:	f00c fa2e 	bl	8024dc0 <iprintf>
 8018964:	f06f 0305 	mvn.w	r3, #5
 8018968:	e01b      	b.n	80189a2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	2b00      	cmp	r3, #0
 801896e:	d013      	beq.n	8018998 <pbuf_copy+0x174>
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	895a      	ldrh	r2, [r3, #10]
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	891b      	ldrh	r3, [r3, #8]
 8018978:	429a      	cmp	r2, r3
 801897a:	d10d      	bne.n	8018998 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801897c:	687b      	ldr	r3, [r7, #4]
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	2b00      	cmp	r3, #0
 8018982:	d009      	beq.n	8018998 <pbuf_copy+0x174>
 8018984:	4b09      	ldr	r3, [pc, #36]	; (80189ac <pbuf_copy+0x188>)
 8018986:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801898a:	490e      	ldr	r1, [pc, #56]	; (80189c4 <pbuf_copy+0x1a0>)
 801898c:	4809      	ldr	r0, [pc, #36]	; (80189b4 <pbuf_copy+0x190>)
 801898e:	f00c fa17 	bl	8024dc0 <iprintf>
 8018992:	f06f 0305 	mvn.w	r3, #5
 8018996:	e004      	b.n	80189a2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8018998:	683b      	ldr	r3, [r7, #0]
 801899a:	2b00      	cmp	r3, #0
 801899c:	f47f af61 	bne.w	8018862 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80189a0:	2300      	movs	r3, #0
}
 80189a2:	4618      	mov	r0, r3
 80189a4:	3718      	adds	r7, #24
 80189a6:	46bd      	mov	sp, r7
 80189a8:	bd80      	pop	{r7, pc}
 80189aa:	bf00      	nop
 80189ac:	0802b78c 	.word	0x0802b78c
 80189b0:	0802ba34 	.word	0x0802ba34
 80189b4:	0802b7ec 	.word	0x0802b7ec
 80189b8:	0802ba64 	.word	0x0802ba64
 80189bc:	0802ba7c 	.word	0x0802ba7c
 80189c0:	0802ba98 	.word	0x0802ba98
 80189c4:	0802baa8 	.word	0x0802baa8

080189c8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b088      	sub	sp, #32
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	60f8      	str	r0, [r7, #12]
 80189d0:	60b9      	str	r1, [r7, #8]
 80189d2:	4611      	mov	r1, r2
 80189d4:	461a      	mov	r2, r3
 80189d6:	460b      	mov	r3, r1
 80189d8:	80fb      	strh	r3, [r7, #6]
 80189da:	4613      	mov	r3, r2
 80189dc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80189de:	2300      	movs	r3, #0
 80189e0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80189e2:	2300      	movs	r3, #0
 80189e4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80189e6:	68fb      	ldr	r3, [r7, #12]
 80189e8:	2b00      	cmp	r3, #0
 80189ea:	d108      	bne.n	80189fe <pbuf_copy_partial+0x36>
 80189ec:	4b2b      	ldr	r3, [pc, #172]	; (8018a9c <pbuf_copy_partial+0xd4>)
 80189ee:	f240 420a 	movw	r2, #1034	; 0x40a
 80189f2:	492b      	ldr	r1, [pc, #172]	; (8018aa0 <pbuf_copy_partial+0xd8>)
 80189f4:	482b      	ldr	r0, [pc, #172]	; (8018aa4 <pbuf_copy_partial+0xdc>)
 80189f6:	f00c f9e3 	bl	8024dc0 <iprintf>
 80189fa:	2300      	movs	r3, #0
 80189fc:	e04a      	b.n	8018a94 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80189fe:	68bb      	ldr	r3, [r7, #8]
 8018a00:	2b00      	cmp	r3, #0
 8018a02:	d108      	bne.n	8018a16 <pbuf_copy_partial+0x4e>
 8018a04:	4b25      	ldr	r3, [pc, #148]	; (8018a9c <pbuf_copy_partial+0xd4>)
 8018a06:	f240 420b 	movw	r2, #1035	; 0x40b
 8018a0a:	4927      	ldr	r1, [pc, #156]	; (8018aa8 <pbuf_copy_partial+0xe0>)
 8018a0c:	4825      	ldr	r0, [pc, #148]	; (8018aa4 <pbuf_copy_partial+0xdc>)
 8018a0e:	f00c f9d7 	bl	8024dc0 <iprintf>
 8018a12:	2300      	movs	r3, #0
 8018a14:	e03e      	b.n	8018a94 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	61fb      	str	r3, [r7, #28]
 8018a1a:	e034      	b.n	8018a86 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8018a1c:	88bb      	ldrh	r3, [r7, #4]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d00a      	beq.n	8018a38 <pbuf_copy_partial+0x70>
 8018a22:	69fb      	ldr	r3, [r7, #28]
 8018a24:	895b      	ldrh	r3, [r3, #10]
 8018a26:	88ba      	ldrh	r2, [r7, #4]
 8018a28:	429a      	cmp	r2, r3
 8018a2a:	d305      	bcc.n	8018a38 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8018a2c:	69fb      	ldr	r3, [r7, #28]
 8018a2e:	895b      	ldrh	r3, [r3, #10]
 8018a30:	88ba      	ldrh	r2, [r7, #4]
 8018a32:	1ad3      	subs	r3, r2, r3
 8018a34:	80bb      	strh	r3, [r7, #4]
 8018a36:	e023      	b.n	8018a80 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8018a38:	69fb      	ldr	r3, [r7, #28]
 8018a3a:	895a      	ldrh	r2, [r3, #10]
 8018a3c:	88bb      	ldrh	r3, [r7, #4]
 8018a3e:	1ad3      	subs	r3, r2, r3
 8018a40:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8018a42:	8b3a      	ldrh	r2, [r7, #24]
 8018a44:	88fb      	ldrh	r3, [r7, #6]
 8018a46:	429a      	cmp	r2, r3
 8018a48:	d901      	bls.n	8018a4e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8018a4a:	88fb      	ldrh	r3, [r7, #6]
 8018a4c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8018a4e:	8b7b      	ldrh	r3, [r7, #26]
 8018a50:	68ba      	ldr	r2, [r7, #8]
 8018a52:	18d0      	adds	r0, r2, r3
 8018a54:	69fb      	ldr	r3, [r7, #28]
 8018a56:	685a      	ldr	r2, [r3, #4]
 8018a58:	88bb      	ldrh	r3, [r7, #4]
 8018a5a:	4413      	add	r3, r2
 8018a5c:	8b3a      	ldrh	r2, [r7, #24]
 8018a5e:	4619      	mov	r1, r3
 8018a60:	f00d fe6d 	bl	802673e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8018a64:	8afa      	ldrh	r2, [r7, #22]
 8018a66:	8b3b      	ldrh	r3, [r7, #24]
 8018a68:	4413      	add	r3, r2
 8018a6a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8018a6c:	8b7a      	ldrh	r2, [r7, #26]
 8018a6e:	8b3b      	ldrh	r3, [r7, #24]
 8018a70:	4413      	add	r3, r2
 8018a72:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8018a74:	88fa      	ldrh	r2, [r7, #6]
 8018a76:	8b3b      	ldrh	r3, [r7, #24]
 8018a78:	1ad3      	subs	r3, r2, r3
 8018a7a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8018a80:	69fb      	ldr	r3, [r7, #28]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	61fb      	str	r3, [r7, #28]
 8018a86:	88fb      	ldrh	r3, [r7, #6]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d002      	beq.n	8018a92 <pbuf_copy_partial+0xca>
 8018a8c:	69fb      	ldr	r3, [r7, #28]
 8018a8e:	2b00      	cmp	r3, #0
 8018a90:	d1c4      	bne.n	8018a1c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8018a92:	8afb      	ldrh	r3, [r7, #22]
}
 8018a94:	4618      	mov	r0, r3
 8018a96:	3720      	adds	r7, #32
 8018a98:	46bd      	mov	sp, r7
 8018a9a:	bd80      	pop	{r7, pc}
 8018a9c:	0802b78c 	.word	0x0802b78c
 8018aa0:	0802bad4 	.word	0x0802bad4
 8018aa4:	0802b7ec 	.word	0x0802b7ec
 8018aa8:	0802baf4 	.word	0x0802baf4

08018aac <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8018aac:	b480      	push	{r7}
 8018aae:	b087      	sub	sp, #28
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	60f8      	str	r0, [r7, #12]
 8018ab4:	460b      	mov	r3, r1
 8018ab6:	607a      	str	r2, [r7, #4]
 8018ab8:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8018aba:	897b      	ldrh	r3, [r7, #10]
 8018abc:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8018ac2:	e007      	b.n	8018ad4 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8018ac4:	693b      	ldr	r3, [r7, #16]
 8018ac6:	895b      	ldrh	r3, [r3, #10]
 8018ac8:	8afa      	ldrh	r2, [r7, #22]
 8018aca:	1ad3      	subs	r3, r2, r3
 8018acc:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8018ace:	693b      	ldr	r3, [r7, #16]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8018ad4:	693b      	ldr	r3, [r7, #16]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d004      	beq.n	8018ae4 <pbuf_skip_const+0x38>
 8018ada:	693b      	ldr	r3, [r7, #16]
 8018adc:	895b      	ldrh	r3, [r3, #10]
 8018ade:	8afa      	ldrh	r2, [r7, #22]
 8018ae0:	429a      	cmp	r2, r3
 8018ae2:	d2ef      	bcs.n	8018ac4 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	2b00      	cmp	r3, #0
 8018ae8:	d002      	beq.n	8018af0 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	8afa      	ldrh	r2, [r7, #22]
 8018aee:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8018af0:	693b      	ldr	r3, [r7, #16]
}
 8018af2:	4618      	mov	r0, r3
 8018af4:	371c      	adds	r7, #28
 8018af6:	46bd      	mov	sp, r7
 8018af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018afc:	4770      	bx	lr

08018afe <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8018afe:	b580      	push	{r7, lr}
 8018b00:	b086      	sub	sp, #24
 8018b02:	af00      	add	r7, sp, #0
 8018b04:	60f8      	str	r0, [r7, #12]
 8018b06:	460b      	mov	r3, r1
 8018b08:	607a      	str	r2, [r7, #4]
 8018b0a:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8018b0c:	897b      	ldrh	r3, [r7, #10]
 8018b0e:	687a      	ldr	r2, [r7, #4]
 8018b10:	4619      	mov	r1, r3
 8018b12:	68f8      	ldr	r0, [r7, #12]
 8018b14:	f7ff ffca 	bl	8018aac <pbuf_skip_const>
 8018b18:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8018b1a:	697b      	ldr	r3, [r7, #20]
}
 8018b1c:	4618      	mov	r0, r3
 8018b1e:	3718      	adds	r7, #24
 8018b20:	46bd      	mov	sp, r7
 8018b22:	bd80      	pop	{r7, pc}

08018b24 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8018b24:	b580      	push	{r7, lr}
 8018b26:	b088      	sub	sp, #32
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	60f8      	str	r0, [r7, #12]
 8018b2c:	60b9      	str	r1, [r7, #8]
 8018b2e:	4613      	mov	r3, r2
 8018b30:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8018b32:	88fb      	ldrh	r3, [r7, #6]
 8018b34:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8018b36:	2300      	movs	r3, #0
 8018b38:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8018b3a:	68fb      	ldr	r3, [r7, #12]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	d109      	bne.n	8018b54 <pbuf_take+0x30>
 8018b40:	4b3a      	ldr	r3, [pc, #232]	; (8018c2c <pbuf_take+0x108>)
 8018b42:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8018b46:	493a      	ldr	r1, [pc, #232]	; (8018c30 <pbuf_take+0x10c>)
 8018b48:	483a      	ldr	r0, [pc, #232]	; (8018c34 <pbuf_take+0x110>)
 8018b4a:	f00c f939 	bl	8024dc0 <iprintf>
 8018b4e:	f06f 030f 	mvn.w	r3, #15
 8018b52:	e067      	b.n	8018c24 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8018b54:	68bb      	ldr	r3, [r7, #8]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d109      	bne.n	8018b6e <pbuf_take+0x4a>
 8018b5a:	4b34      	ldr	r3, [pc, #208]	; (8018c2c <pbuf_take+0x108>)
 8018b5c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8018b60:	4935      	ldr	r1, [pc, #212]	; (8018c38 <pbuf_take+0x114>)
 8018b62:	4834      	ldr	r0, [pc, #208]	; (8018c34 <pbuf_take+0x110>)
 8018b64:	f00c f92c 	bl	8024dc0 <iprintf>
 8018b68:	f06f 030f 	mvn.w	r3, #15
 8018b6c:	e05a      	b.n	8018c24 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8018b6e:	68fb      	ldr	r3, [r7, #12]
 8018b70:	891b      	ldrh	r3, [r3, #8]
 8018b72:	88fa      	ldrh	r2, [r7, #6]
 8018b74:	429a      	cmp	r2, r3
 8018b76:	d909      	bls.n	8018b8c <pbuf_take+0x68>
 8018b78:	4b2c      	ldr	r3, [pc, #176]	; (8018c2c <pbuf_take+0x108>)
 8018b7a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8018b7e:	492f      	ldr	r1, [pc, #188]	; (8018c3c <pbuf_take+0x118>)
 8018b80:	482c      	ldr	r0, [pc, #176]	; (8018c34 <pbuf_take+0x110>)
 8018b82:	f00c f91d 	bl	8024dc0 <iprintf>
 8018b86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018b8a:	e04b      	b.n	8018c24 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d007      	beq.n	8018ba2 <pbuf_take+0x7e>
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d004      	beq.n	8018ba2 <pbuf_take+0x7e>
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	891b      	ldrh	r3, [r3, #8]
 8018b9c:	88fa      	ldrh	r2, [r7, #6]
 8018b9e:	429a      	cmp	r2, r3
 8018ba0:	d902      	bls.n	8018ba8 <pbuf_take+0x84>
    return ERR_ARG;
 8018ba2:	f06f 030f 	mvn.w	r3, #15
 8018ba6:	e03d      	b.n	8018c24 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	61fb      	str	r3, [r7, #28]
 8018bac:	e028      	b.n	8018c00 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8018bae:	69fb      	ldr	r3, [r7, #28]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d106      	bne.n	8018bc2 <pbuf_take+0x9e>
 8018bb4:	4b1d      	ldr	r3, [pc, #116]	; (8018c2c <pbuf_take+0x108>)
 8018bb6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8018bba:	4921      	ldr	r1, [pc, #132]	; (8018c40 <pbuf_take+0x11c>)
 8018bbc:	481d      	ldr	r0, [pc, #116]	; (8018c34 <pbuf_take+0x110>)
 8018bbe:	f00c f8ff 	bl	8024dc0 <iprintf>
    buf_copy_len = total_copy_len;
 8018bc2:	697b      	ldr	r3, [r7, #20]
 8018bc4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8018bc6:	69fb      	ldr	r3, [r7, #28]
 8018bc8:	895b      	ldrh	r3, [r3, #10]
 8018bca:	461a      	mov	r2, r3
 8018bcc:	69bb      	ldr	r3, [r7, #24]
 8018bce:	4293      	cmp	r3, r2
 8018bd0:	d902      	bls.n	8018bd8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8018bd2:	69fb      	ldr	r3, [r7, #28]
 8018bd4:	895b      	ldrh	r3, [r3, #10]
 8018bd6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8018bd8:	69fb      	ldr	r3, [r7, #28]
 8018bda:	6858      	ldr	r0, [r3, #4]
 8018bdc:	68ba      	ldr	r2, [r7, #8]
 8018bde:	693b      	ldr	r3, [r7, #16]
 8018be0:	4413      	add	r3, r2
 8018be2:	69ba      	ldr	r2, [r7, #24]
 8018be4:	4619      	mov	r1, r3
 8018be6:	f00d fdaa 	bl	802673e <memcpy>
    total_copy_len -= buf_copy_len;
 8018bea:	697a      	ldr	r2, [r7, #20]
 8018bec:	69bb      	ldr	r3, [r7, #24]
 8018bee:	1ad3      	subs	r3, r2, r3
 8018bf0:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8018bf2:	693a      	ldr	r2, [r7, #16]
 8018bf4:	69bb      	ldr	r3, [r7, #24]
 8018bf6:	4413      	add	r3, r2
 8018bf8:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8018bfa:	69fb      	ldr	r3, [r7, #28]
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	61fb      	str	r3, [r7, #28]
 8018c00:	697b      	ldr	r3, [r7, #20]
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d1d3      	bne.n	8018bae <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8018c06:	697b      	ldr	r3, [r7, #20]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d103      	bne.n	8018c14 <pbuf_take+0xf0>
 8018c0c:	88fb      	ldrh	r3, [r7, #6]
 8018c0e:	693a      	ldr	r2, [r7, #16]
 8018c10:	429a      	cmp	r2, r3
 8018c12:	d006      	beq.n	8018c22 <pbuf_take+0xfe>
 8018c14:	4b05      	ldr	r3, [pc, #20]	; (8018c2c <pbuf_take+0x108>)
 8018c16:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8018c1a:	490a      	ldr	r1, [pc, #40]	; (8018c44 <pbuf_take+0x120>)
 8018c1c:	4805      	ldr	r0, [pc, #20]	; (8018c34 <pbuf_take+0x110>)
 8018c1e:	f00c f8cf 	bl	8024dc0 <iprintf>
  return ERR_OK;
 8018c22:	2300      	movs	r3, #0
}
 8018c24:	4618      	mov	r0, r3
 8018c26:	3720      	adds	r7, #32
 8018c28:	46bd      	mov	sp, r7
 8018c2a:	bd80      	pop	{r7, pc}
 8018c2c:	0802b78c 	.word	0x0802b78c
 8018c30:	0802bb64 	.word	0x0802bb64
 8018c34:	0802b7ec 	.word	0x0802b7ec
 8018c38:	0802bb7c 	.word	0x0802bb7c
 8018c3c:	0802bb98 	.word	0x0802bb98
 8018c40:	0802bbb8 	.word	0x0802bbb8
 8018c44:	0802bbd0 	.word	0x0802bbd0

08018c48 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b088      	sub	sp, #32
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	60f8      	str	r0, [r7, #12]
 8018c50:	60b9      	str	r1, [r7, #8]
 8018c52:	4611      	mov	r1, r2
 8018c54:	461a      	mov	r2, r3
 8018c56:	460b      	mov	r3, r1
 8018c58:	80fb      	strh	r3, [r7, #6]
 8018c5a:	4613      	mov	r3, r2
 8018c5c:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8018c5e:	f107 0210 	add.w	r2, r7, #16
 8018c62:	88bb      	ldrh	r3, [r7, #4]
 8018c64:	4619      	mov	r1, r3
 8018c66:	68f8      	ldr	r0, [r7, #12]
 8018c68:	f7ff ff49 	bl	8018afe <pbuf_skip>
 8018c6c:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8018c6e:	69fb      	ldr	r3, [r7, #28]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d047      	beq.n	8018d04 <pbuf_take_at+0xbc>
 8018c74:	69fb      	ldr	r3, [r7, #28]
 8018c76:	891b      	ldrh	r3, [r3, #8]
 8018c78:	461a      	mov	r2, r3
 8018c7a:	8a3b      	ldrh	r3, [r7, #16]
 8018c7c:	4619      	mov	r1, r3
 8018c7e:	88fb      	ldrh	r3, [r7, #6]
 8018c80:	440b      	add	r3, r1
 8018c82:	429a      	cmp	r2, r3
 8018c84:	db3e      	blt.n	8018d04 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8018c86:	88fb      	ldrh	r3, [r7, #6]
 8018c88:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8018c8a:	68bb      	ldr	r3, [r7, #8]
 8018c8c:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8018c8e:	69fb      	ldr	r3, [r7, #28]
 8018c90:	895a      	ldrh	r2, [r3, #10]
 8018c92:	8a3b      	ldrh	r3, [r7, #16]
 8018c94:	429a      	cmp	r2, r3
 8018c96:	d806      	bhi.n	8018ca6 <pbuf_take_at+0x5e>
 8018c98:	4b1d      	ldr	r3, [pc, #116]	; (8018d10 <pbuf_take_at+0xc8>)
 8018c9a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8018c9e:	491d      	ldr	r1, [pc, #116]	; (8018d14 <pbuf_take_at+0xcc>)
 8018ca0:	481d      	ldr	r0, [pc, #116]	; (8018d18 <pbuf_take_at+0xd0>)
 8018ca2:	f00c f88d 	bl	8024dc0 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8018ca6:	69fb      	ldr	r3, [r7, #28]
 8018ca8:	895b      	ldrh	r3, [r3, #10]
 8018caa:	461a      	mov	r2, r3
 8018cac:	8a3b      	ldrh	r3, [r7, #16]
 8018cae:	1ad2      	subs	r2, r2, r3
 8018cb0:	88fb      	ldrh	r3, [r7, #6]
 8018cb2:	429a      	cmp	r2, r3
 8018cb4:	da05      	bge.n	8018cc2 <pbuf_take_at+0x7a>
 8018cb6:	69fb      	ldr	r3, [r7, #28]
 8018cb8:	895a      	ldrh	r2, [r3, #10]
 8018cba:	8a3b      	ldrh	r3, [r7, #16]
 8018cbc:	1ad3      	subs	r3, r2, r3
 8018cbe:	b29b      	uxth	r3, r3
 8018cc0:	e000      	b.n	8018cc4 <pbuf_take_at+0x7c>
 8018cc2:	88fb      	ldrh	r3, [r7, #6]
 8018cc4:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8018cc6:	69fb      	ldr	r3, [r7, #28]
 8018cc8:	685b      	ldr	r3, [r3, #4]
 8018cca:	8a3a      	ldrh	r2, [r7, #16]
 8018ccc:	4413      	add	r3, r2
 8018cce:	8a7a      	ldrh	r2, [r7, #18]
 8018cd0:	68b9      	ldr	r1, [r7, #8]
 8018cd2:	4618      	mov	r0, r3
 8018cd4:	f00d fd33 	bl	802673e <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8018cd8:	8b7a      	ldrh	r2, [r7, #26]
 8018cda:	8a7b      	ldrh	r3, [r7, #18]
 8018cdc:	1ad3      	subs	r3, r2, r3
 8018cde:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8018ce0:	8a7b      	ldrh	r3, [r7, #18]
 8018ce2:	697a      	ldr	r2, [r7, #20]
 8018ce4:	4413      	add	r3, r2
 8018ce6:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8018ce8:	8b7b      	ldrh	r3, [r7, #26]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d008      	beq.n	8018d00 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8018cee:	69fb      	ldr	r3, [r7, #28]
 8018cf0:	681b      	ldr	r3, [r3, #0]
 8018cf2:	8b7a      	ldrh	r2, [r7, #26]
 8018cf4:	6979      	ldr	r1, [r7, #20]
 8018cf6:	4618      	mov	r0, r3
 8018cf8:	f7ff ff14 	bl	8018b24 <pbuf_take>
 8018cfc:	4603      	mov	r3, r0
 8018cfe:	e003      	b.n	8018d08 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8018d00:	2300      	movs	r3, #0
 8018d02:	e001      	b.n	8018d08 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8018d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8018d08:	4618      	mov	r0, r3
 8018d0a:	3720      	adds	r7, #32
 8018d0c:	46bd      	mov	sp, r7
 8018d0e:	bd80      	pop	{r7, pc}
 8018d10:	0802b78c 	.word	0x0802b78c
 8018d14:	0802bbe8 	.word	0x0802bbe8
 8018d18:	0802b7ec 	.word	0x0802b7ec

08018d1c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b084      	sub	sp, #16
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	4603      	mov	r3, r0
 8018d24:	603a      	str	r2, [r7, #0]
 8018d26:	71fb      	strb	r3, [r7, #7]
 8018d28:	460b      	mov	r3, r1
 8018d2a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8018d2c:	683b      	ldr	r3, [r7, #0]
 8018d2e:	8919      	ldrh	r1, [r3, #8]
 8018d30:	88ba      	ldrh	r2, [r7, #4]
 8018d32:	79fb      	ldrb	r3, [r7, #7]
 8018d34:	4618      	mov	r0, r3
 8018d36:	f7ff f95d 	bl	8017ff4 <pbuf_alloc>
 8018d3a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8018d3c:	68fb      	ldr	r3, [r7, #12]
 8018d3e:	2b00      	cmp	r3, #0
 8018d40:	d101      	bne.n	8018d46 <pbuf_clone+0x2a>
    return NULL;
 8018d42:	2300      	movs	r3, #0
 8018d44:	e011      	b.n	8018d6a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8018d46:	6839      	ldr	r1, [r7, #0]
 8018d48:	68f8      	ldr	r0, [r7, #12]
 8018d4a:	f7ff fd6b 	bl	8018824 <pbuf_copy>
 8018d4e:	4603      	mov	r3, r0
 8018d50:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8018d52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8018d56:	2b00      	cmp	r3, #0
 8018d58:	d006      	beq.n	8018d68 <pbuf_clone+0x4c>
 8018d5a:	4b06      	ldr	r3, [pc, #24]	; (8018d74 <pbuf_clone+0x58>)
 8018d5c:	f240 5224 	movw	r2, #1316	; 0x524
 8018d60:	4905      	ldr	r1, [pc, #20]	; (8018d78 <pbuf_clone+0x5c>)
 8018d62:	4806      	ldr	r0, [pc, #24]	; (8018d7c <pbuf_clone+0x60>)
 8018d64:	f00c f82c 	bl	8024dc0 <iprintf>
  return q;
 8018d68:	68fb      	ldr	r3, [r7, #12]
}
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	3710      	adds	r7, #16
 8018d6e:	46bd      	mov	sp, r7
 8018d70:	bd80      	pop	{r7, pc}
 8018d72:	bf00      	nop
 8018d74:	0802b78c 	.word	0x0802b78c
 8018d78:	0802bc00 	.word	0x0802bc00
 8018d7c:	0802b7ec 	.word	0x0802b7ec

08018d80 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8018d80:	b580      	push	{r7, lr}
 8018d82:	b084      	sub	sp, #16
 8018d84:	af00      	add	r7, sp, #0
 8018d86:	6078      	str	r0, [r7, #4]
 8018d88:	460b      	mov	r3, r1
 8018d8a:	807b      	strh	r3, [r7, #2]
 8018d8c:	4613      	mov	r3, r2
 8018d8e:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8018d90:	f107 020a 	add.w	r2, r7, #10
 8018d94:	887b      	ldrh	r3, [r7, #2]
 8018d96:	4619      	mov	r1, r3
 8018d98:	6878      	ldr	r0, [r7, #4]
 8018d9a:	f7ff feb0 	bl	8018afe <pbuf_skip>
 8018d9e:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	2b00      	cmp	r3, #0
 8018da4:	d00a      	beq.n	8018dbc <pbuf_put_at+0x3c>
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	895a      	ldrh	r2, [r3, #10]
 8018daa:	897b      	ldrh	r3, [r7, #10]
 8018dac:	429a      	cmp	r2, r3
 8018dae:	d905      	bls.n	8018dbc <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8018db0:	68fb      	ldr	r3, [r7, #12]
 8018db2:	685b      	ldr	r3, [r3, #4]
 8018db4:	897a      	ldrh	r2, [r7, #10]
 8018db6:	4413      	add	r3, r2
 8018db8:	787a      	ldrb	r2, [r7, #1]
 8018dba:	701a      	strb	r2, [r3, #0]
  }
}
 8018dbc:	bf00      	nop
 8018dbe:	3710      	adds	r7, #16
 8018dc0:	46bd      	mov	sp, r7
 8018dc2:	bd80      	pop	{r7, pc}

08018dc4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8018dc4:	b580      	push	{r7, lr}
 8018dc6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018dc8:	f00b f9fe 	bl	80241c8 <rand>
 8018dcc:	4603      	mov	r3, r0
 8018dce:	b29b      	uxth	r3, r3
 8018dd0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018dd4:	b29b      	uxth	r3, r3
 8018dd6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018dda:	b29a      	uxth	r2, r3
 8018ddc:	4b01      	ldr	r3, [pc, #4]	; (8018de4 <tcp_init+0x20>)
 8018dde:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018de0:	bf00      	nop
 8018de2:	bd80      	pop	{r7, pc}
 8018de4:	2000002c 	.word	0x2000002c

08018de8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8018de8:	b580      	push	{r7, lr}
 8018dea:	b082      	sub	sp, #8
 8018dec:	af00      	add	r7, sp, #0
 8018dee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	7d1b      	ldrb	r3, [r3, #20]
 8018df4:	2b01      	cmp	r3, #1
 8018df6:	d105      	bne.n	8018e04 <tcp_free+0x1c>
 8018df8:	4b06      	ldr	r3, [pc, #24]	; (8018e14 <tcp_free+0x2c>)
 8018dfa:	22d4      	movs	r2, #212	; 0xd4
 8018dfc:	4906      	ldr	r1, [pc, #24]	; (8018e18 <tcp_free+0x30>)
 8018dfe:	4807      	ldr	r0, [pc, #28]	; (8018e1c <tcp_free+0x34>)
 8018e00:	f00b ffde 	bl	8024dc0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8018e04:	6879      	ldr	r1, [r7, #4]
 8018e06:	2001      	movs	r0, #1
 8018e08:	f7fe fd34 	bl	8017874 <memp_free>
}
 8018e0c:	bf00      	nop
 8018e0e:	3708      	adds	r7, #8
 8018e10:	46bd      	mov	sp, r7
 8018e12:	bd80      	pop	{r7, pc}
 8018e14:	0802bc8c 	.word	0x0802bc8c
 8018e18:	0802bcbc 	.word	0x0802bcbc
 8018e1c:	0802bcd0 	.word	0x0802bcd0

08018e20 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b082      	sub	sp, #8
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	7d1b      	ldrb	r3, [r3, #20]
 8018e2c:	2b01      	cmp	r3, #1
 8018e2e:	d105      	bne.n	8018e3c <tcp_free_listen+0x1c>
 8018e30:	4b06      	ldr	r3, [pc, #24]	; (8018e4c <tcp_free_listen+0x2c>)
 8018e32:	22df      	movs	r2, #223	; 0xdf
 8018e34:	4906      	ldr	r1, [pc, #24]	; (8018e50 <tcp_free_listen+0x30>)
 8018e36:	4807      	ldr	r0, [pc, #28]	; (8018e54 <tcp_free_listen+0x34>)
 8018e38:	f00b ffc2 	bl	8024dc0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8018e3c:	6879      	ldr	r1, [r7, #4]
 8018e3e:	2002      	movs	r0, #2
 8018e40:	f7fe fd18 	bl	8017874 <memp_free>
}
 8018e44:	bf00      	nop
 8018e46:	3708      	adds	r7, #8
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd80      	pop	{r7, pc}
 8018e4c:	0802bc8c 	.word	0x0802bc8c
 8018e50:	0802bcf8 	.word	0x0802bcf8
 8018e54:	0802bcd0 	.word	0x0802bcd0

08018e58 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8018e58:	b580      	push	{r7, lr}
 8018e5a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8018e5c:	f001 fa2c 	bl	801a2b8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8018e60:	4b07      	ldr	r3, [pc, #28]	; (8018e80 <tcp_tmr+0x28>)
 8018e62:	781b      	ldrb	r3, [r3, #0]
 8018e64:	3301      	adds	r3, #1
 8018e66:	b2da      	uxtb	r2, r3
 8018e68:	4b05      	ldr	r3, [pc, #20]	; (8018e80 <tcp_tmr+0x28>)
 8018e6a:	701a      	strb	r2, [r3, #0]
 8018e6c:	4b04      	ldr	r3, [pc, #16]	; (8018e80 <tcp_tmr+0x28>)
 8018e6e:	781b      	ldrb	r3, [r3, #0]
 8018e70:	f003 0301 	and.w	r3, r3, #1
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d001      	beq.n	8018e7c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8018e78:	f000 fedc 	bl	8019c34 <tcp_slowtmr>
  }
}
 8018e7c:	bf00      	nop
 8018e7e:	bd80      	pop	{r7, pc}
 8018e80:	20015fe9 	.word	0x20015fe9

08018e84 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8018e84:	b580      	push	{r7, lr}
 8018e86:	b084      	sub	sp, #16
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
 8018e8c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8018e8e:	683b      	ldr	r3, [r7, #0]
 8018e90:	2b00      	cmp	r3, #0
 8018e92:	d105      	bne.n	8018ea0 <tcp_remove_listener+0x1c>
 8018e94:	4b0d      	ldr	r3, [pc, #52]	; (8018ecc <tcp_remove_listener+0x48>)
 8018e96:	22ff      	movs	r2, #255	; 0xff
 8018e98:	490d      	ldr	r1, [pc, #52]	; (8018ed0 <tcp_remove_listener+0x4c>)
 8018e9a:	480e      	ldr	r0, [pc, #56]	; (8018ed4 <tcp_remove_listener+0x50>)
 8018e9c:	f00b ff90 	bl	8024dc0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	60fb      	str	r3, [r7, #12]
 8018ea4:	e00a      	b.n	8018ebc <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8018ea6:	68fb      	ldr	r3, [r7, #12]
 8018ea8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8018eaa:	683a      	ldr	r2, [r7, #0]
 8018eac:	429a      	cmp	r2, r3
 8018eae:	d102      	bne.n	8018eb6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	2200      	movs	r2, #0
 8018eb4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	68db      	ldr	r3, [r3, #12]
 8018eba:	60fb      	str	r3, [r7, #12]
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d1f1      	bne.n	8018ea6 <tcp_remove_listener+0x22>
    }
  }
}
 8018ec2:	bf00      	nop
 8018ec4:	bf00      	nop
 8018ec6:	3710      	adds	r7, #16
 8018ec8:	46bd      	mov	sp, r7
 8018eca:	bd80      	pop	{r7, pc}
 8018ecc:	0802bc8c 	.word	0x0802bc8c
 8018ed0:	0802bd14 	.word	0x0802bd14
 8018ed4:	0802bcd0 	.word	0x0802bcd0

08018ed8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8018ed8:	b580      	push	{r7, lr}
 8018eda:	b084      	sub	sp, #16
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	d106      	bne.n	8018ef4 <tcp_listen_closed+0x1c>
 8018ee6:	4b14      	ldr	r3, [pc, #80]	; (8018f38 <tcp_listen_closed+0x60>)
 8018ee8:	f240 1211 	movw	r2, #273	; 0x111
 8018eec:	4913      	ldr	r1, [pc, #76]	; (8018f3c <tcp_listen_closed+0x64>)
 8018eee:	4814      	ldr	r0, [pc, #80]	; (8018f40 <tcp_listen_closed+0x68>)
 8018ef0:	f00b ff66 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	7d1b      	ldrb	r3, [r3, #20]
 8018ef8:	2b01      	cmp	r3, #1
 8018efa:	d006      	beq.n	8018f0a <tcp_listen_closed+0x32>
 8018efc:	4b0e      	ldr	r3, [pc, #56]	; (8018f38 <tcp_listen_closed+0x60>)
 8018efe:	f44f 7289 	mov.w	r2, #274	; 0x112
 8018f02:	4910      	ldr	r1, [pc, #64]	; (8018f44 <tcp_listen_closed+0x6c>)
 8018f04:	480e      	ldr	r0, [pc, #56]	; (8018f40 <tcp_listen_closed+0x68>)
 8018f06:	f00b ff5b 	bl	8024dc0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018f0a:	2301      	movs	r3, #1
 8018f0c:	60fb      	str	r3, [r7, #12]
 8018f0e:	e00b      	b.n	8018f28 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8018f10:	4a0d      	ldr	r2, [pc, #52]	; (8018f48 <tcp_listen_closed+0x70>)
 8018f12:	68fb      	ldr	r3, [r7, #12]
 8018f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	6879      	ldr	r1, [r7, #4]
 8018f1c:	4618      	mov	r0, r3
 8018f1e:	f7ff ffb1 	bl	8018e84 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8018f22:	68fb      	ldr	r3, [r7, #12]
 8018f24:	3301      	adds	r3, #1
 8018f26:	60fb      	str	r3, [r7, #12]
 8018f28:	68fb      	ldr	r3, [r7, #12]
 8018f2a:	2b03      	cmp	r3, #3
 8018f2c:	d9f0      	bls.n	8018f10 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8018f2e:	bf00      	nop
 8018f30:	bf00      	nop
 8018f32:	3710      	adds	r7, #16
 8018f34:	46bd      	mov	sp, r7
 8018f36:	bd80      	pop	{r7, pc}
 8018f38:	0802bc8c 	.word	0x0802bc8c
 8018f3c:	0802bd3c 	.word	0x0802bd3c
 8018f40:	0802bcd0 	.word	0x0802bcd0
 8018f44:	0802bd48 	.word	0x0802bd48
 8018f48:	0802df04 	.word	0x0802df04

08018f4c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8018f4c:	b5b0      	push	{r4, r5, r7, lr}
 8018f4e:	b088      	sub	sp, #32
 8018f50:	af04      	add	r7, sp, #16
 8018f52:	6078      	str	r0, [r7, #4]
 8018f54:	460b      	mov	r3, r1
 8018f56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	2b00      	cmp	r3, #0
 8018f5c:	d106      	bne.n	8018f6c <tcp_close_shutdown+0x20>
 8018f5e:	4b63      	ldr	r3, [pc, #396]	; (80190ec <tcp_close_shutdown+0x1a0>)
 8018f60:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8018f64:	4962      	ldr	r1, [pc, #392]	; (80190f0 <tcp_close_shutdown+0x1a4>)
 8018f66:	4863      	ldr	r0, [pc, #396]	; (80190f4 <tcp_close_shutdown+0x1a8>)
 8018f68:	f00b ff2a 	bl	8024dc0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8018f6c:	78fb      	ldrb	r3, [r7, #3]
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d066      	beq.n	8019040 <tcp_close_shutdown+0xf4>
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	7d1b      	ldrb	r3, [r3, #20]
 8018f76:	2b04      	cmp	r3, #4
 8018f78:	d003      	beq.n	8018f82 <tcp_close_shutdown+0x36>
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	7d1b      	ldrb	r3, [r3, #20]
 8018f7e:	2b07      	cmp	r3, #7
 8018f80:	d15e      	bne.n	8019040 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d104      	bne.n	8018f94 <tcp_close_shutdown+0x48>
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018f8e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8018f92:	d055      	beq.n	8019040 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8018f94:	687b      	ldr	r3, [r7, #4]
 8018f96:	8b5b      	ldrh	r3, [r3, #26]
 8018f98:	f003 0310 	and.w	r3, r3, #16
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d106      	bne.n	8018fae <tcp_close_shutdown+0x62>
 8018fa0:	4b52      	ldr	r3, [pc, #328]	; (80190ec <tcp_close_shutdown+0x1a0>)
 8018fa2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8018fa6:	4954      	ldr	r1, [pc, #336]	; (80190f8 <tcp_close_shutdown+0x1ac>)
 8018fa8:	4852      	ldr	r0, [pc, #328]	; (80190f4 <tcp_close_shutdown+0x1a8>)
 8018faa:	f00b ff09 	bl	8024dc0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8018fae:	687b      	ldr	r3, [r7, #4]
 8018fb0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8018fb6:	687d      	ldr	r5, [r7, #4]
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	3304      	adds	r3, #4
 8018fbc:	687a      	ldr	r2, [r7, #4]
 8018fbe:	8ad2      	ldrh	r2, [r2, #22]
 8018fc0:	6879      	ldr	r1, [r7, #4]
 8018fc2:	8b09      	ldrh	r1, [r1, #24]
 8018fc4:	9102      	str	r1, [sp, #8]
 8018fc6:	9201      	str	r2, [sp, #4]
 8018fc8:	9300      	str	r3, [sp, #0]
 8018fca:	462b      	mov	r3, r5
 8018fcc:	4622      	mov	r2, r4
 8018fce:	4601      	mov	r1, r0
 8018fd0:	6878      	ldr	r0, [r7, #4]
 8018fd2:	f005 ff59 	bl	801ee88 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8018fd6:	6878      	ldr	r0, [r7, #4]
 8018fd8:	f001 fd28 	bl	801aa2c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8018fdc:	4b47      	ldr	r3, [pc, #284]	; (80190fc <tcp_close_shutdown+0x1b0>)
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	687a      	ldr	r2, [r7, #4]
 8018fe2:	429a      	cmp	r2, r3
 8018fe4:	d105      	bne.n	8018ff2 <tcp_close_shutdown+0xa6>
 8018fe6:	4b45      	ldr	r3, [pc, #276]	; (80190fc <tcp_close_shutdown+0x1b0>)
 8018fe8:	681b      	ldr	r3, [r3, #0]
 8018fea:	68db      	ldr	r3, [r3, #12]
 8018fec:	4a43      	ldr	r2, [pc, #268]	; (80190fc <tcp_close_shutdown+0x1b0>)
 8018fee:	6013      	str	r3, [r2, #0]
 8018ff0:	e013      	b.n	801901a <tcp_close_shutdown+0xce>
 8018ff2:	4b42      	ldr	r3, [pc, #264]	; (80190fc <tcp_close_shutdown+0x1b0>)
 8018ff4:	681b      	ldr	r3, [r3, #0]
 8018ff6:	60fb      	str	r3, [r7, #12]
 8018ff8:	e00c      	b.n	8019014 <tcp_close_shutdown+0xc8>
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	68db      	ldr	r3, [r3, #12]
 8018ffe:	687a      	ldr	r2, [r7, #4]
 8019000:	429a      	cmp	r2, r3
 8019002:	d104      	bne.n	801900e <tcp_close_shutdown+0xc2>
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	68da      	ldr	r2, [r3, #12]
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	60da      	str	r2, [r3, #12]
 801900c:	e005      	b.n	801901a <tcp_close_shutdown+0xce>
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	68db      	ldr	r3, [r3, #12]
 8019012:	60fb      	str	r3, [r7, #12]
 8019014:	68fb      	ldr	r3, [r7, #12]
 8019016:	2b00      	cmp	r3, #0
 8019018:	d1ef      	bne.n	8018ffa <tcp_close_shutdown+0xae>
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	2200      	movs	r2, #0
 801901e:	60da      	str	r2, [r3, #12]
 8019020:	4b37      	ldr	r3, [pc, #220]	; (8019100 <tcp_close_shutdown+0x1b4>)
 8019022:	2201      	movs	r2, #1
 8019024:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8019026:	4b37      	ldr	r3, [pc, #220]	; (8019104 <tcp_close_shutdown+0x1b8>)
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	687a      	ldr	r2, [r7, #4]
 801902c:	429a      	cmp	r2, r3
 801902e:	d102      	bne.n	8019036 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8019030:	f004 f9ce 	bl	801d3d0 <tcp_trigger_input_pcb_close>
 8019034:	e002      	b.n	801903c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8019036:	6878      	ldr	r0, [r7, #4]
 8019038:	f7ff fed6 	bl	8018de8 <tcp_free>
      }
      return ERR_OK;
 801903c:	2300      	movs	r3, #0
 801903e:	e050      	b.n	80190e2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	7d1b      	ldrb	r3, [r3, #20]
 8019044:	2b02      	cmp	r3, #2
 8019046:	d03b      	beq.n	80190c0 <tcp_close_shutdown+0x174>
 8019048:	2b02      	cmp	r3, #2
 801904a:	dc44      	bgt.n	80190d6 <tcp_close_shutdown+0x18a>
 801904c:	2b00      	cmp	r3, #0
 801904e:	d002      	beq.n	8019056 <tcp_close_shutdown+0x10a>
 8019050:	2b01      	cmp	r3, #1
 8019052:	d02a      	beq.n	80190aa <tcp_close_shutdown+0x15e>
 8019054:	e03f      	b.n	80190d6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	8adb      	ldrh	r3, [r3, #22]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d021      	beq.n	80190a2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801905e:	4b2a      	ldr	r3, [pc, #168]	; (8019108 <tcp_close_shutdown+0x1bc>)
 8019060:	681b      	ldr	r3, [r3, #0]
 8019062:	687a      	ldr	r2, [r7, #4]
 8019064:	429a      	cmp	r2, r3
 8019066:	d105      	bne.n	8019074 <tcp_close_shutdown+0x128>
 8019068:	4b27      	ldr	r3, [pc, #156]	; (8019108 <tcp_close_shutdown+0x1bc>)
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	68db      	ldr	r3, [r3, #12]
 801906e:	4a26      	ldr	r2, [pc, #152]	; (8019108 <tcp_close_shutdown+0x1bc>)
 8019070:	6013      	str	r3, [r2, #0]
 8019072:	e013      	b.n	801909c <tcp_close_shutdown+0x150>
 8019074:	4b24      	ldr	r3, [pc, #144]	; (8019108 <tcp_close_shutdown+0x1bc>)
 8019076:	681b      	ldr	r3, [r3, #0]
 8019078:	60bb      	str	r3, [r7, #8]
 801907a:	e00c      	b.n	8019096 <tcp_close_shutdown+0x14a>
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	68db      	ldr	r3, [r3, #12]
 8019080:	687a      	ldr	r2, [r7, #4]
 8019082:	429a      	cmp	r2, r3
 8019084:	d104      	bne.n	8019090 <tcp_close_shutdown+0x144>
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	68da      	ldr	r2, [r3, #12]
 801908a:	68bb      	ldr	r3, [r7, #8]
 801908c:	60da      	str	r2, [r3, #12]
 801908e:	e005      	b.n	801909c <tcp_close_shutdown+0x150>
 8019090:	68bb      	ldr	r3, [r7, #8]
 8019092:	68db      	ldr	r3, [r3, #12]
 8019094:	60bb      	str	r3, [r7, #8]
 8019096:	68bb      	ldr	r3, [r7, #8]
 8019098:	2b00      	cmp	r3, #0
 801909a:	d1ef      	bne.n	801907c <tcp_close_shutdown+0x130>
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	2200      	movs	r2, #0
 80190a0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80190a2:	6878      	ldr	r0, [r7, #4]
 80190a4:	f7ff fea0 	bl	8018de8 <tcp_free>
      break;
 80190a8:	e01a      	b.n	80190e0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80190aa:	6878      	ldr	r0, [r7, #4]
 80190ac:	f7ff ff14 	bl	8018ed8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80190b0:	6879      	ldr	r1, [r7, #4]
 80190b2:	4816      	ldr	r0, [pc, #88]	; (801910c <tcp_close_shutdown+0x1c0>)
 80190b4:	f001 fd0a 	bl	801aacc <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80190b8:	6878      	ldr	r0, [r7, #4]
 80190ba:	f7ff feb1 	bl	8018e20 <tcp_free_listen>
      break;
 80190be:	e00f      	b.n	80190e0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80190c0:	6879      	ldr	r1, [r7, #4]
 80190c2:	480e      	ldr	r0, [pc, #56]	; (80190fc <tcp_close_shutdown+0x1b0>)
 80190c4:	f001 fd02 	bl	801aacc <tcp_pcb_remove>
 80190c8:	4b0d      	ldr	r3, [pc, #52]	; (8019100 <tcp_close_shutdown+0x1b4>)
 80190ca:	2201      	movs	r2, #1
 80190cc:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80190ce:	6878      	ldr	r0, [r7, #4]
 80190d0:	f7ff fe8a 	bl	8018de8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80190d4:	e004      	b.n	80190e0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80190d6:	6878      	ldr	r0, [r7, #4]
 80190d8:	f000 f81a 	bl	8019110 <tcp_close_shutdown_fin>
 80190dc:	4603      	mov	r3, r0
 80190de:	e000      	b.n	80190e2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80190e0:	2300      	movs	r3, #0
}
 80190e2:	4618      	mov	r0, r3
 80190e4:	3710      	adds	r7, #16
 80190e6:	46bd      	mov	sp, r7
 80190e8:	bdb0      	pop	{r4, r5, r7, pc}
 80190ea:	bf00      	nop
 80190ec:	0802bc8c 	.word	0x0802bc8c
 80190f0:	0802bd60 	.word	0x0802bd60
 80190f4:	0802bcd0 	.word	0x0802bcd0
 80190f8:	0802bd80 	.word	0x0802bd80
 80190fc:	20015fe0 	.word	0x20015fe0
 8019100:	20015fe8 	.word	0x20015fe8
 8019104:	20016020 	.word	0x20016020
 8019108:	20015fd8 	.word	0x20015fd8
 801910c:	20015fdc 	.word	0x20015fdc

08019110 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8019110:	b580      	push	{r7, lr}
 8019112:	b084      	sub	sp, #16
 8019114:	af00      	add	r7, sp, #0
 8019116:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019118:	687b      	ldr	r3, [r7, #4]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d106      	bne.n	801912c <tcp_close_shutdown_fin+0x1c>
 801911e:	4b2e      	ldr	r3, [pc, #184]	; (80191d8 <tcp_close_shutdown_fin+0xc8>)
 8019120:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8019124:	492d      	ldr	r1, [pc, #180]	; (80191dc <tcp_close_shutdown_fin+0xcc>)
 8019126:	482e      	ldr	r0, [pc, #184]	; (80191e0 <tcp_close_shutdown_fin+0xd0>)
 8019128:	f00b fe4a 	bl	8024dc0 <iprintf>

  switch (pcb->state) {
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	7d1b      	ldrb	r3, [r3, #20]
 8019130:	2b07      	cmp	r3, #7
 8019132:	d020      	beq.n	8019176 <tcp_close_shutdown_fin+0x66>
 8019134:	2b07      	cmp	r3, #7
 8019136:	dc2b      	bgt.n	8019190 <tcp_close_shutdown_fin+0x80>
 8019138:	2b03      	cmp	r3, #3
 801913a:	d002      	beq.n	8019142 <tcp_close_shutdown_fin+0x32>
 801913c:	2b04      	cmp	r3, #4
 801913e:	d00d      	beq.n	801915c <tcp_close_shutdown_fin+0x4c>
 8019140:	e026      	b.n	8019190 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8019142:	6878      	ldr	r0, [r7, #4]
 8019144:	f004 ffae 	bl	801e0a4 <tcp_send_fin>
 8019148:	4603      	mov	r3, r0
 801914a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801914c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d11f      	bne.n	8019194 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	2205      	movs	r2, #5
 8019158:	751a      	strb	r2, [r3, #20]
      }
      break;
 801915a:	e01b      	b.n	8019194 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801915c:	6878      	ldr	r0, [r7, #4]
 801915e:	f004 ffa1 	bl	801e0a4 <tcp_send_fin>
 8019162:	4603      	mov	r3, r0
 8019164:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801916a:	2b00      	cmp	r3, #0
 801916c:	d114      	bne.n	8019198 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	2205      	movs	r2, #5
 8019172:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019174:	e010      	b.n	8019198 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8019176:	6878      	ldr	r0, [r7, #4]
 8019178:	f004 ff94 	bl	801e0a4 <tcp_send_fin>
 801917c:	4603      	mov	r3, r0
 801917e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019180:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d109      	bne.n	801919c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	2209      	movs	r2, #9
 801918c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801918e:	e005      	b.n	801919c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8019190:	2300      	movs	r3, #0
 8019192:	e01c      	b.n	80191ce <tcp_close_shutdown_fin+0xbe>
      break;
 8019194:	bf00      	nop
 8019196:	e002      	b.n	801919e <tcp_close_shutdown_fin+0x8e>
      break;
 8019198:	bf00      	nop
 801919a:	e000      	b.n	801919e <tcp_close_shutdown_fin+0x8e>
      break;
 801919c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801919e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d103      	bne.n	80191ae <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80191a6:	6878      	ldr	r0, [r7, #4]
 80191a8:	f005 f8ba 	bl	801e320 <tcp_output>
 80191ac:	e00d      	b.n	80191ca <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80191ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80191b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80191b6:	d108      	bne.n	80191ca <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	8b5b      	ldrh	r3, [r3, #26]
 80191bc:	f043 0308 	orr.w	r3, r3, #8
 80191c0:	b29a      	uxth	r2, r3
 80191c2:	687b      	ldr	r3, [r7, #4]
 80191c4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80191c6:	2300      	movs	r3, #0
 80191c8:	e001      	b.n	80191ce <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80191ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80191ce:	4618      	mov	r0, r3
 80191d0:	3710      	adds	r7, #16
 80191d2:	46bd      	mov	sp, r7
 80191d4:	bd80      	pop	{r7, pc}
 80191d6:	bf00      	nop
 80191d8:	0802bc8c 	.word	0x0802bc8c
 80191dc:	0802bd3c 	.word	0x0802bd3c
 80191e0:	0802bcd0 	.word	0x0802bcd0

080191e4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80191e4:	b580      	push	{r7, lr}
 80191e6:	b082      	sub	sp, #8
 80191e8:	af00      	add	r7, sp, #0
 80191ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	2b00      	cmp	r3, #0
 80191f0:	d109      	bne.n	8019206 <tcp_close+0x22>
 80191f2:	4b0f      	ldr	r3, [pc, #60]	; (8019230 <tcp_close+0x4c>)
 80191f4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80191f8:	490e      	ldr	r1, [pc, #56]	; (8019234 <tcp_close+0x50>)
 80191fa:	480f      	ldr	r0, [pc, #60]	; (8019238 <tcp_close+0x54>)
 80191fc:	f00b fde0 	bl	8024dc0 <iprintf>
 8019200:	f06f 030f 	mvn.w	r3, #15
 8019204:	e00f      	b.n	8019226 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	7d1b      	ldrb	r3, [r3, #20]
 801920a:	2b01      	cmp	r3, #1
 801920c:	d006      	beq.n	801921c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	8b5b      	ldrh	r3, [r3, #26]
 8019212:	f043 0310 	orr.w	r3, r3, #16
 8019216:	b29a      	uxth	r2, r3
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801921c:	2101      	movs	r1, #1
 801921e:	6878      	ldr	r0, [r7, #4]
 8019220:	f7ff fe94 	bl	8018f4c <tcp_close_shutdown>
 8019224:	4603      	mov	r3, r0
}
 8019226:	4618      	mov	r0, r3
 8019228:	3708      	adds	r7, #8
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}
 801922e:	bf00      	nop
 8019230:	0802bc8c 	.word	0x0802bc8c
 8019234:	0802bd9c 	.word	0x0802bd9c
 8019238:	0802bcd0 	.word	0x0802bcd0

0801923c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b084      	sub	sp, #16
 8019240:	af00      	add	r7, sp, #0
 8019242:	60f8      	str	r0, [r7, #12]
 8019244:	60b9      	str	r1, [r7, #8]
 8019246:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	2b00      	cmp	r3, #0
 801924c:	d109      	bne.n	8019262 <tcp_shutdown+0x26>
 801924e:	4b26      	ldr	r3, [pc, #152]	; (80192e8 <tcp_shutdown+0xac>)
 8019250:	f240 2207 	movw	r2, #519	; 0x207
 8019254:	4925      	ldr	r1, [pc, #148]	; (80192ec <tcp_shutdown+0xb0>)
 8019256:	4826      	ldr	r0, [pc, #152]	; (80192f0 <tcp_shutdown+0xb4>)
 8019258:	f00b fdb2 	bl	8024dc0 <iprintf>
 801925c:	f06f 030f 	mvn.w	r3, #15
 8019260:	e03d      	b.n	80192de <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	7d1b      	ldrb	r3, [r3, #20]
 8019266:	2b01      	cmp	r3, #1
 8019268:	d102      	bne.n	8019270 <tcp_shutdown+0x34>
    return ERR_CONN;
 801926a:	f06f 030a 	mvn.w	r3, #10
 801926e:	e036      	b.n	80192de <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8019270:	68bb      	ldr	r3, [r7, #8]
 8019272:	2b00      	cmp	r3, #0
 8019274:	d01b      	beq.n	80192ae <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	8b5b      	ldrh	r3, [r3, #26]
 801927a:	f043 0310 	orr.w	r3, r3, #16
 801927e:	b29a      	uxth	r2, r3
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8019284:	687b      	ldr	r3, [r7, #4]
 8019286:	2b00      	cmp	r3, #0
 8019288:	d005      	beq.n	8019296 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801928a:	2101      	movs	r1, #1
 801928c:	68f8      	ldr	r0, [r7, #12]
 801928e:	f7ff fe5d 	bl	8018f4c <tcp_close_shutdown>
 8019292:	4603      	mov	r3, r0
 8019294:	e023      	b.n	80192de <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8019296:	68fb      	ldr	r3, [r7, #12]
 8019298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801929a:	2b00      	cmp	r3, #0
 801929c:	d007      	beq.n	80192ae <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80192a2:	4618      	mov	r0, r3
 80192a4:	f7ff f98a 	bl	80185bc <pbuf_free>
      pcb->refused_data = NULL;
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	2200      	movs	r2, #0
 80192ac:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80192ae:	687b      	ldr	r3, [r7, #4]
 80192b0:	2b00      	cmp	r3, #0
 80192b2:	d013      	beq.n	80192dc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80192b4:	68fb      	ldr	r3, [r7, #12]
 80192b6:	7d1b      	ldrb	r3, [r3, #20]
 80192b8:	2b04      	cmp	r3, #4
 80192ba:	dc02      	bgt.n	80192c2 <tcp_shutdown+0x86>
 80192bc:	2b03      	cmp	r3, #3
 80192be:	da02      	bge.n	80192c6 <tcp_shutdown+0x8a>
 80192c0:	e009      	b.n	80192d6 <tcp_shutdown+0x9a>
 80192c2:	2b07      	cmp	r3, #7
 80192c4:	d107      	bne.n	80192d6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 80192c6:	68bb      	ldr	r3, [r7, #8]
 80192c8:	b2db      	uxtb	r3, r3
 80192ca:	4619      	mov	r1, r3
 80192cc:	68f8      	ldr	r0, [r7, #12]
 80192ce:	f7ff fe3d 	bl	8018f4c <tcp_close_shutdown>
 80192d2:	4603      	mov	r3, r0
 80192d4:	e003      	b.n	80192de <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 80192d6:	f06f 030a 	mvn.w	r3, #10
 80192da:	e000      	b.n	80192de <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 80192dc:	2300      	movs	r3, #0
}
 80192de:	4618      	mov	r0, r3
 80192e0:	3710      	adds	r7, #16
 80192e2:	46bd      	mov	sp, r7
 80192e4:	bd80      	pop	{r7, pc}
 80192e6:	bf00      	nop
 80192e8:	0802bc8c 	.word	0x0802bc8c
 80192ec:	0802bdb4 	.word	0x0802bdb4
 80192f0:	0802bcd0 	.word	0x0802bcd0

080192f4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80192f4:	b580      	push	{r7, lr}
 80192f6:	b08e      	sub	sp, #56	; 0x38
 80192f8:	af04      	add	r7, sp, #16
 80192fa:	6078      	str	r0, [r7, #4]
 80192fc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80192fe:	687b      	ldr	r3, [r7, #4]
 8019300:	2b00      	cmp	r3, #0
 8019302:	d107      	bne.n	8019314 <tcp_abandon+0x20>
 8019304:	4b52      	ldr	r3, [pc, #328]	; (8019450 <tcp_abandon+0x15c>)
 8019306:	f240 223d 	movw	r2, #573	; 0x23d
 801930a:	4952      	ldr	r1, [pc, #328]	; (8019454 <tcp_abandon+0x160>)
 801930c:	4852      	ldr	r0, [pc, #328]	; (8019458 <tcp_abandon+0x164>)
 801930e:	f00b fd57 	bl	8024dc0 <iprintf>
 8019312:	e099      	b.n	8019448 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	7d1b      	ldrb	r3, [r3, #20]
 8019318:	2b01      	cmp	r3, #1
 801931a:	d106      	bne.n	801932a <tcp_abandon+0x36>
 801931c:	4b4c      	ldr	r3, [pc, #304]	; (8019450 <tcp_abandon+0x15c>)
 801931e:	f44f 7210 	mov.w	r2, #576	; 0x240
 8019322:	494e      	ldr	r1, [pc, #312]	; (801945c <tcp_abandon+0x168>)
 8019324:	484c      	ldr	r0, [pc, #304]	; (8019458 <tcp_abandon+0x164>)
 8019326:	f00b fd4b 	bl	8024dc0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	7d1b      	ldrb	r3, [r3, #20]
 801932e:	2b0a      	cmp	r3, #10
 8019330:	d107      	bne.n	8019342 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8019332:	6879      	ldr	r1, [r7, #4]
 8019334:	484a      	ldr	r0, [pc, #296]	; (8019460 <tcp_abandon+0x16c>)
 8019336:	f001 fbc9 	bl	801aacc <tcp_pcb_remove>
    tcp_free(pcb);
 801933a:	6878      	ldr	r0, [r7, #4]
 801933c:	f7ff fd54 	bl	8018de8 <tcp_free>
 8019340:	e082      	b.n	8019448 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8019342:	2300      	movs	r3, #0
 8019344:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8019346:	2300      	movs	r3, #0
 8019348:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801934e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019354:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801935c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	691b      	ldr	r3, [r3, #16]
 8019362:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	7d1b      	ldrb	r3, [r3, #20]
 8019368:	2b00      	cmp	r3, #0
 801936a:	d126      	bne.n	80193ba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	8adb      	ldrh	r3, [r3, #22]
 8019370:	2b00      	cmp	r3, #0
 8019372:	d02e      	beq.n	80193d2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019374:	4b3b      	ldr	r3, [pc, #236]	; (8019464 <tcp_abandon+0x170>)
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	687a      	ldr	r2, [r7, #4]
 801937a:	429a      	cmp	r2, r3
 801937c:	d105      	bne.n	801938a <tcp_abandon+0x96>
 801937e:	4b39      	ldr	r3, [pc, #228]	; (8019464 <tcp_abandon+0x170>)
 8019380:	681b      	ldr	r3, [r3, #0]
 8019382:	68db      	ldr	r3, [r3, #12]
 8019384:	4a37      	ldr	r2, [pc, #220]	; (8019464 <tcp_abandon+0x170>)
 8019386:	6013      	str	r3, [r2, #0]
 8019388:	e013      	b.n	80193b2 <tcp_abandon+0xbe>
 801938a:	4b36      	ldr	r3, [pc, #216]	; (8019464 <tcp_abandon+0x170>)
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	61fb      	str	r3, [r7, #28]
 8019390:	e00c      	b.n	80193ac <tcp_abandon+0xb8>
 8019392:	69fb      	ldr	r3, [r7, #28]
 8019394:	68db      	ldr	r3, [r3, #12]
 8019396:	687a      	ldr	r2, [r7, #4]
 8019398:	429a      	cmp	r2, r3
 801939a:	d104      	bne.n	80193a6 <tcp_abandon+0xb2>
 801939c:	687b      	ldr	r3, [r7, #4]
 801939e:	68da      	ldr	r2, [r3, #12]
 80193a0:	69fb      	ldr	r3, [r7, #28]
 80193a2:	60da      	str	r2, [r3, #12]
 80193a4:	e005      	b.n	80193b2 <tcp_abandon+0xbe>
 80193a6:	69fb      	ldr	r3, [r7, #28]
 80193a8:	68db      	ldr	r3, [r3, #12]
 80193aa:	61fb      	str	r3, [r7, #28]
 80193ac:	69fb      	ldr	r3, [r7, #28]
 80193ae:	2b00      	cmp	r3, #0
 80193b0:	d1ef      	bne.n	8019392 <tcp_abandon+0x9e>
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	2200      	movs	r2, #0
 80193b6:	60da      	str	r2, [r3, #12]
 80193b8:	e00b      	b.n	80193d2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80193ba:	683b      	ldr	r3, [r7, #0]
 80193bc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	8adb      	ldrh	r3, [r3, #22]
 80193c2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80193c4:	6879      	ldr	r1, [r7, #4]
 80193c6:	4828      	ldr	r0, [pc, #160]	; (8019468 <tcp_abandon+0x174>)
 80193c8:	f001 fb80 	bl	801aacc <tcp_pcb_remove>
 80193cc:	4b27      	ldr	r3, [pc, #156]	; (801946c <tcp_abandon+0x178>)
 80193ce:	2201      	movs	r2, #1
 80193d0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d004      	beq.n	80193e4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193de:	4618      	mov	r0, r3
 80193e0:	f001 f84a 	bl	801a478 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d004      	beq.n	80193f6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80193f0:	4618      	mov	r0, r3
 80193f2:	f001 f841 	bl	801a478 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80193f6:	687b      	ldr	r3, [r7, #4]
 80193f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d004      	beq.n	8019408 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019402:	4618      	mov	r0, r3
 8019404:	f001 f838 	bl	801a478 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8019408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801940a:	2b00      	cmp	r3, #0
 801940c:	d00e      	beq.n	801942c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801940e:	6879      	ldr	r1, [r7, #4]
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	3304      	adds	r3, #4
 8019414:	687a      	ldr	r2, [r7, #4]
 8019416:	8b12      	ldrh	r2, [r2, #24]
 8019418:	9202      	str	r2, [sp, #8]
 801941a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801941c:	9201      	str	r2, [sp, #4]
 801941e:	9300      	str	r3, [sp, #0]
 8019420:	460b      	mov	r3, r1
 8019422:	697a      	ldr	r2, [r7, #20]
 8019424:	69b9      	ldr	r1, [r7, #24]
 8019426:	6878      	ldr	r0, [r7, #4]
 8019428:	f005 fd2e 	bl	801ee88 <tcp_rst>
    }
    last_state = pcb->state;
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	7d1b      	ldrb	r3, [r3, #20]
 8019430:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8019432:	6878      	ldr	r0, [r7, #4]
 8019434:	f7ff fcd8 	bl	8018de8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8019438:	693b      	ldr	r3, [r7, #16]
 801943a:	2b00      	cmp	r3, #0
 801943c:	d004      	beq.n	8019448 <tcp_abandon+0x154>
 801943e:	693b      	ldr	r3, [r7, #16]
 8019440:	f06f 010c 	mvn.w	r1, #12
 8019444:	68f8      	ldr	r0, [r7, #12]
 8019446:	4798      	blx	r3
  }
}
 8019448:	3728      	adds	r7, #40	; 0x28
 801944a:	46bd      	mov	sp, r7
 801944c:	bd80      	pop	{r7, pc}
 801944e:	bf00      	nop
 8019450:	0802bc8c 	.word	0x0802bc8c
 8019454:	0802bdd0 	.word	0x0802bdd0
 8019458:	0802bcd0 	.word	0x0802bcd0
 801945c:	0802bdec 	.word	0x0802bdec
 8019460:	20015fe4 	.word	0x20015fe4
 8019464:	20015fd8 	.word	0x20015fd8
 8019468:	20015fe0 	.word	0x20015fe0
 801946c:	20015fe8 	.word	0x20015fe8

08019470 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b082      	sub	sp, #8
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8019478:	2101      	movs	r1, #1
 801947a:	6878      	ldr	r0, [r7, #4]
 801947c:	f7ff ff3a 	bl	80192f4 <tcp_abandon>
}
 8019480:	bf00      	nop
 8019482:	3708      	adds	r7, #8
 8019484:	46bd      	mov	sp, r7
 8019486:	bd80      	pop	{r7, pc}

08019488 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b088      	sub	sp, #32
 801948c:	af00      	add	r7, sp, #0
 801948e:	60f8      	str	r0, [r7, #12]
 8019490:	60b9      	str	r1, [r7, #8]
 8019492:	4613      	mov	r3, r2
 8019494:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8019496:	2304      	movs	r3, #4
 8019498:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801949a:	68bb      	ldr	r3, [r7, #8]
 801949c:	2b00      	cmp	r3, #0
 801949e:	d101      	bne.n	80194a4 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80194a0:	4b48      	ldr	r3, [pc, #288]	; (80195c4 <tcp_bind+0x13c>)
 80194a2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d109      	bne.n	80194be <tcp_bind+0x36>
 80194aa:	4b47      	ldr	r3, [pc, #284]	; (80195c8 <tcp_bind+0x140>)
 80194ac:	f240 22a9 	movw	r2, #681	; 0x2a9
 80194b0:	4946      	ldr	r1, [pc, #280]	; (80195cc <tcp_bind+0x144>)
 80194b2:	4847      	ldr	r0, [pc, #284]	; (80195d0 <tcp_bind+0x148>)
 80194b4:	f00b fc84 	bl	8024dc0 <iprintf>
 80194b8:	f06f 030f 	mvn.w	r3, #15
 80194bc:	e07e      	b.n	80195bc <tcp_bind+0x134>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	7d1b      	ldrb	r3, [r3, #20]
 80194c2:	2b00      	cmp	r3, #0
 80194c4:	d009      	beq.n	80194da <tcp_bind+0x52>
 80194c6:	4b40      	ldr	r3, [pc, #256]	; (80195c8 <tcp_bind+0x140>)
 80194c8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80194cc:	4941      	ldr	r1, [pc, #260]	; (80195d4 <tcp_bind+0x14c>)
 80194ce:	4840      	ldr	r0, [pc, #256]	; (80195d0 <tcp_bind+0x148>)
 80194d0:	f00b fc76 	bl	8024dc0 <iprintf>
 80194d4:	f06f 0305 	mvn.w	r3, #5
 80194d8:	e070      	b.n	80195bc <tcp_bind+0x134>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 80194da:	68fb      	ldr	r3, [r7, #12]
 80194dc:	7a5b      	ldrb	r3, [r3, #9]
 80194de:	f003 0304 	and.w	r3, r3, #4
 80194e2:	2b00      	cmp	r3, #0
 80194e4:	d001      	beq.n	80194ea <tcp_bind+0x62>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 80194e6:	2303      	movs	r3, #3
 80194e8:	61bb      	str	r3, [r7, #24]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80194ea:	88fb      	ldrh	r3, [r7, #6]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d109      	bne.n	8019504 <tcp_bind+0x7c>
    port = tcp_new_port();
 80194f0:	f000 fa0a 	bl	8019908 <tcp_new_port>
 80194f4:	4603      	mov	r3, r0
 80194f6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80194f8:	88fb      	ldrh	r3, [r7, #6]
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d141      	bne.n	8019582 <tcp_bind+0xfa>
      return ERR_BUF;
 80194fe:	f06f 0301 	mvn.w	r3, #1
 8019502:	e05b      	b.n	80195bc <tcp_bind+0x134>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8019504:	2300      	movs	r3, #0
 8019506:	61fb      	str	r3, [r7, #28]
 8019508:	e037      	b.n	801957a <tcp_bind+0xf2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801950a:	4a33      	ldr	r2, [pc, #204]	; (80195d8 <tcp_bind+0x150>)
 801950c:	69fb      	ldr	r3, [r7, #28]
 801950e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019512:	681b      	ldr	r3, [r3, #0]
 8019514:	617b      	str	r3, [r7, #20]
 8019516:	e02a      	b.n	801956e <tcp_bind+0xe6>
        if (cpcb->local_port == port) {
 8019518:	697b      	ldr	r3, [r7, #20]
 801951a:	8adb      	ldrh	r3, [r3, #22]
 801951c:	88fa      	ldrh	r2, [r7, #6]
 801951e:	429a      	cmp	r2, r3
 8019520:	d122      	bne.n	8019568 <tcp_bind+0xe0>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	7a5b      	ldrb	r3, [r3, #9]
 8019526:	f003 0304 	and.w	r3, r3, #4
 801952a:	2b00      	cmp	r3, #0
 801952c:	d005      	beq.n	801953a <tcp_bind+0xb2>
              !ip_get_option(cpcb, SOF_REUSEADDR))
 801952e:	697b      	ldr	r3, [r7, #20]
 8019530:	7a5b      	ldrb	r3, [r3, #9]
 8019532:	f003 0304 	and.w	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8019536:	2b00      	cmp	r3, #0
 8019538:	d116      	bne.n	8019568 <tcp_bind+0xe0>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801953a:	697b      	ldr	r3, [r7, #20]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801953c:	2b00      	cmp	r3, #0
 801953e:	d010      	beq.n	8019562 <tcp_bind+0xda>
                (ip_addr_isany(&cpcb->local_ip) ||
 8019540:	697b      	ldr	r3, [r7, #20]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	2b00      	cmp	r3, #0
 8019546:	d00c      	beq.n	8019562 <tcp_bind+0xda>
 8019548:	68bb      	ldr	r3, [r7, #8]
 801954a:	2b00      	cmp	r3, #0
 801954c:	d009      	beq.n	8019562 <tcp_bind+0xda>
                 ip_addr_isany(ipaddr) ||
 801954e:	68bb      	ldr	r3, [r7, #8]
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	2b00      	cmp	r3, #0
 8019554:	d005      	beq.n	8019562 <tcp_bind+0xda>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8019556:	697b      	ldr	r3, [r7, #20]
 8019558:	681a      	ldr	r2, [r3, #0]
 801955a:	68bb      	ldr	r3, [r7, #8]
 801955c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801955e:	429a      	cmp	r2, r3
 8019560:	d102      	bne.n	8019568 <tcp_bind+0xe0>
              return ERR_USE;
 8019562:	f06f 0307 	mvn.w	r3, #7
 8019566:	e029      	b.n	80195bc <tcp_bind+0x134>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019568:	697b      	ldr	r3, [r7, #20]
 801956a:	68db      	ldr	r3, [r3, #12]
 801956c:	617b      	str	r3, [r7, #20]
 801956e:	697b      	ldr	r3, [r7, #20]
 8019570:	2b00      	cmp	r3, #0
 8019572:	d1d1      	bne.n	8019518 <tcp_bind+0x90>
    for (i = 0; i < max_pcb_list; i++) {
 8019574:	69fb      	ldr	r3, [r7, #28]
 8019576:	3301      	adds	r3, #1
 8019578:	61fb      	str	r3, [r7, #28]
 801957a:	69fa      	ldr	r2, [r7, #28]
 801957c:	69bb      	ldr	r3, [r7, #24]
 801957e:	429a      	cmp	r2, r3
 8019580:	dbc3      	blt.n	801950a <tcp_bind+0x82>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8019582:	68bb      	ldr	r3, [r7, #8]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d00c      	beq.n	80195a2 <tcp_bind+0x11a>
 8019588:	68bb      	ldr	r3, [r7, #8]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	2b00      	cmp	r3, #0
 801958e:	d008      	beq.n	80195a2 <tcp_bind+0x11a>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8019590:	68bb      	ldr	r3, [r7, #8]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d002      	beq.n	801959c <tcp_bind+0x114>
 8019596:	68bb      	ldr	r3, [r7, #8]
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	e000      	b.n	801959e <tcp_bind+0x116>
 801959c:	2300      	movs	r3, #0
 801959e:	68fa      	ldr	r2, [r7, #12]
 80195a0:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80195a2:	68fb      	ldr	r3, [r7, #12]
 80195a4:	88fa      	ldrh	r2, [r7, #6]
 80195a6:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80195a8:	4b0c      	ldr	r3, [pc, #48]	; (80195dc <tcp_bind+0x154>)
 80195aa:	681a      	ldr	r2, [r3, #0]
 80195ac:	68fb      	ldr	r3, [r7, #12]
 80195ae:	60da      	str	r2, [r3, #12]
 80195b0:	4a0a      	ldr	r2, [pc, #40]	; (80195dc <tcp_bind+0x154>)
 80195b2:	68fb      	ldr	r3, [r7, #12]
 80195b4:	6013      	str	r3, [r2, #0]
 80195b6:	f005 fe29 	bl	801f20c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80195ba:	2300      	movs	r3, #0
}
 80195bc:	4618      	mov	r0, r3
 80195be:	3720      	adds	r7, #32
 80195c0:	46bd      	mov	sp, r7
 80195c2:	bd80      	pop	{r7, pc}
 80195c4:	0802df34 	.word	0x0802df34
 80195c8:	0802bc8c 	.word	0x0802bc8c
 80195cc:	0802be20 	.word	0x0802be20
 80195d0:	0802bcd0 	.word	0x0802bcd0
 80195d4:	0802be38 	.word	0x0802be38
 80195d8:	0802df04 	.word	0x0802df04
 80195dc:	20015fd8 	.word	0x20015fd8

080195e0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b084      	sub	sp, #16
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	60f8      	str	r0, [r7, #12]
 80195e8:	60b9      	str	r1, [r7, #8]
 80195ea:	4613      	mov	r3, r2
 80195ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80195ee:	68bb      	ldr	r3, [r7, #8]
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d106      	bne.n	8019602 <tcp_accept_null+0x22>
 80195f4:	4b07      	ldr	r3, [pc, #28]	; (8019614 <tcp_accept_null+0x34>)
 80195f6:	f240 320f 	movw	r2, #783	; 0x30f
 80195fa:	4907      	ldr	r1, [pc, #28]	; (8019618 <tcp_accept_null+0x38>)
 80195fc:	4807      	ldr	r0, [pc, #28]	; (801961c <tcp_accept_null+0x3c>)
 80195fe:	f00b fbdf 	bl	8024dc0 <iprintf>

  tcp_abort(pcb);
 8019602:	68b8      	ldr	r0, [r7, #8]
 8019604:	f7ff ff34 	bl	8019470 <tcp_abort>

  return ERR_ABRT;
 8019608:	f06f 030c 	mvn.w	r3, #12
}
 801960c:	4618      	mov	r0, r3
 801960e:	3710      	adds	r7, #16
 8019610:	46bd      	mov	sp, r7
 8019612:	bd80      	pop	{r7, pc}
 8019614:	0802bc8c 	.word	0x0802bc8c
 8019618:	0802be60 	.word	0x0802be60
 801961c:	0802bcd0 	.word	0x0802bcd0

08019620 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8019620:	b580      	push	{r7, lr}
 8019622:	b088      	sub	sp, #32
 8019624:	af00      	add	r7, sp, #0
 8019626:	60f8      	str	r0, [r7, #12]
 8019628:	460b      	mov	r3, r1
 801962a:	607a      	str	r2, [r7, #4]
 801962c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801962e:	2300      	movs	r3, #0
 8019630:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	2b00      	cmp	r3, #0
 8019636:	d109      	bne.n	801964c <tcp_listen_with_backlog_and_err+0x2c>
 8019638:	4b57      	ldr	r3, [pc, #348]	; (8019798 <tcp_listen_with_backlog_and_err+0x178>)
 801963a:	f240 3259 	movw	r2, #857	; 0x359
 801963e:	4957      	ldr	r1, [pc, #348]	; (801979c <tcp_listen_with_backlog_and_err+0x17c>)
 8019640:	4857      	ldr	r0, [pc, #348]	; (80197a0 <tcp_listen_with_backlog_and_err+0x180>)
 8019642:	f00b fbbd 	bl	8024dc0 <iprintf>
 8019646:	23f0      	movs	r3, #240	; 0xf0
 8019648:	76fb      	strb	r3, [r7, #27]
 801964a:	e09a      	b.n	8019782 <tcp_listen_with_backlog_and_err+0x162>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801964c:	68fb      	ldr	r3, [r7, #12]
 801964e:	7d1b      	ldrb	r3, [r3, #20]
 8019650:	2b00      	cmp	r3, #0
 8019652:	d009      	beq.n	8019668 <tcp_listen_with_backlog_and_err+0x48>
 8019654:	4b50      	ldr	r3, [pc, #320]	; (8019798 <tcp_listen_with_backlog_and_err+0x178>)
 8019656:	f240 325a 	movw	r2, #858	; 0x35a
 801965a:	4952      	ldr	r1, [pc, #328]	; (80197a4 <tcp_listen_with_backlog_and_err+0x184>)
 801965c:	4850      	ldr	r0, [pc, #320]	; (80197a0 <tcp_listen_with_backlog_and_err+0x180>)
 801965e:	f00b fbaf 	bl	8024dc0 <iprintf>
 8019662:	23f1      	movs	r3, #241	; 0xf1
 8019664:	76fb      	strb	r3, [r7, #27]
 8019666:	e08c      	b.n	8019782 <tcp_listen_with_backlog_and_err+0x162>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	7d1b      	ldrb	r3, [r3, #20]
 801966c:	2b01      	cmp	r3, #1
 801966e:	d104      	bne.n	801967a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8019674:	23f7      	movs	r3, #247	; 0xf7
 8019676:	76fb      	strb	r3, [r7, #27]
    goto done;
 8019678:	e083      	b.n	8019782 <tcp_listen_with_backlog_and_err+0x162>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	7a5b      	ldrb	r3, [r3, #9]
 801967e:	f003 0304 	and.w	r3, r3, #4
 8019682:	2b00      	cmp	r3, #0
 8019684:	d01a      	beq.n	80196bc <tcp_listen_with_backlog_and_err+0x9c>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8019686:	4b48      	ldr	r3, [pc, #288]	; (80197a8 <tcp_listen_with_backlog_and_err+0x188>)
 8019688:	681b      	ldr	r3, [r3, #0]
 801968a:	61fb      	str	r3, [r7, #28]
 801968c:	e013      	b.n	80196b6 <tcp_listen_with_backlog_and_err+0x96>
      if ((lpcb->local_port == pcb->local_port) &&
 801968e:	69fb      	ldr	r3, [r7, #28]
 8019690:	8ada      	ldrh	r2, [r3, #22]
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	8adb      	ldrh	r3, [r3, #22]
 8019696:	429a      	cmp	r2, r3
 8019698:	d10a      	bne.n	80196b0 <tcp_listen_with_backlog_and_err+0x90>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
 801969a:	69fb      	ldr	r3, [r7, #28]
 801969c:	681a      	ldr	r2, [r3, #0]
 801969e:	68fb      	ldr	r3, [r7, #12]
 80196a0:	681b      	ldr	r3, [r3, #0]
      if ((lpcb->local_port == pcb->local_port) &&
 80196a2:	429a      	cmp	r2, r3
 80196a4:	d104      	bne.n	80196b0 <tcp_listen_with_backlog_and_err+0x90>
        /* this address/port is already used */
        lpcb = NULL;
 80196a6:	2300      	movs	r3, #0
 80196a8:	61fb      	str	r3, [r7, #28]
        res = ERR_USE;
 80196aa:	23f8      	movs	r3, #248	; 0xf8
 80196ac:	76fb      	strb	r3, [r7, #27]
        goto done;
 80196ae:	e068      	b.n	8019782 <tcp_listen_with_backlog_and_err+0x162>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80196b0:	69fb      	ldr	r3, [r7, #28]
 80196b2:	68db      	ldr	r3, [r3, #12]
 80196b4:	61fb      	str	r3, [r7, #28]
 80196b6:	69fb      	ldr	r3, [r7, #28]
 80196b8:	2b00      	cmp	r3, #0
 80196ba:	d1e8      	bne.n	801968e <tcp_listen_with_backlog_and_err+0x6e>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 80196bc:	2002      	movs	r0, #2
 80196be:	f7fe f863 	bl	8017788 <memp_malloc>
 80196c2:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 80196c4:	69fb      	ldr	r3, [r7, #28]
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d102      	bne.n	80196d0 <tcp_listen_with_backlog_and_err+0xb0>
    res = ERR_MEM;
 80196ca:	23ff      	movs	r3, #255	; 0xff
 80196cc:	76fb      	strb	r3, [r7, #27]
    goto done;
 80196ce:	e058      	b.n	8019782 <tcp_listen_with_backlog_and_err+0x162>
  }
  lpcb->callback_arg = pcb->callback_arg;
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	691a      	ldr	r2, [r3, #16]
 80196d4:	69fb      	ldr	r3, [r7, #28]
 80196d6:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 80196d8:	68fb      	ldr	r3, [r7, #12]
 80196da:	8ada      	ldrh	r2, [r3, #22]
 80196dc:	69fb      	ldr	r3, [r7, #28]
 80196de:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 80196e0:	69fb      	ldr	r3, [r7, #28]
 80196e2:	2201      	movs	r2, #1
 80196e4:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 80196e6:	68fb      	ldr	r3, [r7, #12]
 80196e8:	7d5a      	ldrb	r2, [r3, #21]
 80196ea:	69fb      	ldr	r3, [r7, #28]
 80196ec:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	7a5a      	ldrb	r2, [r3, #9]
 80196f2:	69fb      	ldr	r3, [r7, #28]
 80196f4:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 80196f6:	69fb      	ldr	r3, [r7, #28]
 80196f8:	2200      	movs	r2, #0
 80196fa:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	7ada      	ldrb	r2, [r3, #11]
 8019700:	69fb      	ldr	r3, [r7, #28]
 8019702:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	7a9a      	ldrb	r2, [r3, #10]
 8019708:	69fb      	ldr	r3, [r7, #28]
 801970a:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	681a      	ldr	r2, [r3, #0]
 8019710:	69fb      	ldr	r3, [r7, #28]
 8019712:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8019714:	68fb      	ldr	r3, [r7, #12]
 8019716:	8adb      	ldrh	r3, [r3, #22]
 8019718:	2b00      	cmp	r3, #0
 801971a:	d021      	beq.n	8019760 <tcp_listen_with_backlog_and_err+0x140>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801971c:	4b23      	ldr	r3, [pc, #140]	; (80197ac <tcp_listen_with_backlog_and_err+0x18c>)
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	68fa      	ldr	r2, [r7, #12]
 8019722:	429a      	cmp	r2, r3
 8019724:	d105      	bne.n	8019732 <tcp_listen_with_backlog_and_err+0x112>
 8019726:	4b21      	ldr	r3, [pc, #132]	; (80197ac <tcp_listen_with_backlog_and_err+0x18c>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	68db      	ldr	r3, [r3, #12]
 801972c:	4a1f      	ldr	r2, [pc, #124]	; (80197ac <tcp_listen_with_backlog_and_err+0x18c>)
 801972e:	6013      	str	r3, [r2, #0]
 8019730:	e013      	b.n	801975a <tcp_listen_with_backlog_and_err+0x13a>
 8019732:	4b1e      	ldr	r3, [pc, #120]	; (80197ac <tcp_listen_with_backlog_and_err+0x18c>)
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	617b      	str	r3, [r7, #20]
 8019738:	e00c      	b.n	8019754 <tcp_listen_with_backlog_and_err+0x134>
 801973a:	697b      	ldr	r3, [r7, #20]
 801973c:	68db      	ldr	r3, [r3, #12]
 801973e:	68fa      	ldr	r2, [r7, #12]
 8019740:	429a      	cmp	r2, r3
 8019742:	d104      	bne.n	801974e <tcp_listen_with_backlog_and_err+0x12e>
 8019744:	68fb      	ldr	r3, [r7, #12]
 8019746:	68da      	ldr	r2, [r3, #12]
 8019748:	697b      	ldr	r3, [r7, #20]
 801974a:	60da      	str	r2, [r3, #12]
 801974c:	e005      	b.n	801975a <tcp_listen_with_backlog_and_err+0x13a>
 801974e:	697b      	ldr	r3, [r7, #20]
 8019750:	68db      	ldr	r3, [r3, #12]
 8019752:	617b      	str	r3, [r7, #20]
 8019754:	697b      	ldr	r3, [r7, #20]
 8019756:	2b00      	cmp	r3, #0
 8019758:	d1ef      	bne.n	801973a <tcp_listen_with_backlog_and_err+0x11a>
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	2200      	movs	r2, #0
 801975e:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8019760:	68f8      	ldr	r0, [r7, #12]
 8019762:	f7ff fb41 	bl	8018de8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8019766:	69fb      	ldr	r3, [r7, #28]
 8019768:	4a11      	ldr	r2, [pc, #68]	; (80197b0 <tcp_listen_with_backlog_and_err+0x190>)
 801976a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801976c:	4b0e      	ldr	r3, [pc, #56]	; (80197a8 <tcp_listen_with_backlog_and_err+0x188>)
 801976e:	681a      	ldr	r2, [r3, #0]
 8019770:	69fb      	ldr	r3, [r7, #28]
 8019772:	60da      	str	r2, [r3, #12]
 8019774:	4a0c      	ldr	r2, [pc, #48]	; (80197a8 <tcp_listen_with_backlog_and_err+0x188>)
 8019776:	69fb      	ldr	r3, [r7, #28]
 8019778:	6013      	str	r3, [r2, #0]
 801977a:	f005 fd47 	bl	801f20c <tcp_timer_needed>
  res = ERR_OK;
 801977e:	2300      	movs	r3, #0
 8019780:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	2b00      	cmp	r3, #0
 8019786:	d002      	beq.n	801978e <tcp_listen_with_backlog_and_err+0x16e>
    *err = res;
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	7efa      	ldrb	r2, [r7, #27]
 801978c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801978e:	69fb      	ldr	r3, [r7, #28]
}
 8019790:	4618      	mov	r0, r3
 8019792:	3720      	adds	r7, #32
 8019794:	46bd      	mov	sp, r7
 8019796:	bd80      	pop	{r7, pc}
 8019798:	0802bc8c 	.word	0x0802bc8c
 801979c:	0802be80 	.word	0x0802be80
 80197a0:	0802bcd0 	.word	0x0802bcd0
 80197a4:	0802beb0 	.word	0x0802beb0
 80197a8:	20015fdc 	.word	0x20015fdc
 80197ac:	20015fd8 	.word	0x20015fd8
 80197b0:	080195e1 	.word	0x080195e1

080197b4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80197b4:	b580      	push	{r7, lr}
 80197b6:	b084      	sub	sp, #16
 80197b8:	af00      	add	r7, sp, #0
 80197ba:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d106      	bne.n	80197d0 <tcp_update_rcv_ann_wnd+0x1c>
 80197c2:	4b25      	ldr	r3, [pc, #148]	; (8019858 <tcp_update_rcv_ann_wnd+0xa4>)
 80197c4:	f240 32a6 	movw	r2, #934	; 0x3a6
 80197c8:	4924      	ldr	r1, [pc, #144]	; (801985c <tcp_update_rcv_ann_wnd+0xa8>)
 80197ca:	4825      	ldr	r0, [pc, #148]	; (8019860 <tcp_update_rcv_ann_wnd+0xac>)
 80197cc:	f00b faf8 	bl	8024dc0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197d4:	687a      	ldr	r2, [r7, #4]
 80197d6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80197d8:	4413      	add	r3, r2
 80197da:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80197e0:	687a      	ldr	r2, [r7, #4]
 80197e2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80197e4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80197e8:	bf28      	it	cs
 80197ea:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80197ee:	b292      	uxth	r2, r2
 80197f0:	4413      	add	r3, r2
 80197f2:	68fa      	ldr	r2, [r7, #12]
 80197f4:	1ad3      	subs	r3, r2, r3
 80197f6:	2b00      	cmp	r3, #0
 80197f8:	db08      	blt.n	801980c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019806:	68fa      	ldr	r2, [r7, #12]
 8019808:	1ad3      	subs	r3, r2, r3
 801980a:	e020      	b.n	801984e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019814:	1ad3      	subs	r3, r2, r3
 8019816:	2b00      	cmp	r3, #0
 8019818:	dd03      	ble.n	8019822 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	2200      	movs	r2, #0
 801981e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019820:	e014      	b.n	801984c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801982a:	1ad3      	subs	r3, r2, r3
 801982c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801982e:	68bb      	ldr	r3, [r7, #8]
 8019830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019834:	d306      	bcc.n	8019844 <tcp_update_rcv_ann_wnd+0x90>
 8019836:	4b08      	ldr	r3, [pc, #32]	; (8019858 <tcp_update_rcv_ann_wnd+0xa4>)
 8019838:	f240 32b6 	movw	r2, #950	; 0x3b6
 801983c:	4909      	ldr	r1, [pc, #36]	; (8019864 <tcp_update_rcv_ann_wnd+0xb0>)
 801983e:	4808      	ldr	r0, [pc, #32]	; (8019860 <tcp_update_rcv_ann_wnd+0xac>)
 8019840:	f00b fabe 	bl	8024dc0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8019844:	68bb      	ldr	r3, [r7, #8]
 8019846:	b29a      	uxth	r2, r3
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801984c:	2300      	movs	r3, #0
  }
}
 801984e:	4618      	mov	r0, r3
 8019850:	3710      	adds	r7, #16
 8019852:	46bd      	mov	sp, r7
 8019854:	bd80      	pop	{r7, pc}
 8019856:	bf00      	nop
 8019858:	0802bc8c 	.word	0x0802bc8c
 801985c:	0802bee8 	.word	0x0802bee8
 8019860:	0802bcd0 	.word	0x0802bcd0
 8019864:	0802bf0c 	.word	0x0802bf0c

08019868 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b084      	sub	sp, #16
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
 8019870:	460b      	mov	r3, r1
 8019872:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	2b00      	cmp	r3, #0
 8019878:	d107      	bne.n	801988a <tcp_recved+0x22>
 801987a:	4b1f      	ldr	r3, [pc, #124]	; (80198f8 <tcp_recved+0x90>)
 801987c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8019880:	491e      	ldr	r1, [pc, #120]	; (80198fc <tcp_recved+0x94>)
 8019882:	481f      	ldr	r0, [pc, #124]	; (8019900 <tcp_recved+0x98>)
 8019884:	f00b fa9c 	bl	8024dc0 <iprintf>
 8019888:	e032      	b.n	80198f0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	7d1b      	ldrb	r3, [r3, #20]
 801988e:	2b01      	cmp	r3, #1
 8019890:	d106      	bne.n	80198a0 <tcp_recved+0x38>
 8019892:	4b19      	ldr	r3, [pc, #100]	; (80198f8 <tcp_recved+0x90>)
 8019894:	f240 32d2 	movw	r2, #978	; 0x3d2
 8019898:	491a      	ldr	r1, [pc, #104]	; (8019904 <tcp_recved+0x9c>)
 801989a:	4819      	ldr	r0, [pc, #100]	; (8019900 <tcp_recved+0x98>)
 801989c:	f00b fa90 	bl	8024dc0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80198a4:	887b      	ldrh	r3, [r7, #2]
 80198a6:	4413      	add	r3, r2
 80198a8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80198aa:	89fb      	ldrh	r3, [r7, #14]
 80198ac:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80198b0:	d804      	bhi.n	80198bc <tcp_recved+0x54>
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80198b6:	89fa      	ldrh	r2, [r7, #14]
 80198b8:	429a      	cmp	r2, r3
 80198ba:	d204      	bcs.n	80198c6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80198c2:	851a      	strh	r2, [r3, #40]	; 0x28
 80198c4:	e002      	b.n	80198cc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	89fa      	ldrh	r2, [r7, #14]
 80198ca:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80198cc:	6878      	ldr	r0, [r7, #4]
 80198ce:	f7ff ff71 	bl	80197b4 <tcp_update_rcv_ann_wnd>
 80198d2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80198d4:	68bb      	ldr	r3, [r7, #8]
 80198d6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80198da:	d309      	bcc.n	80198f0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	8b5b      	ldrh	r3, [r3, #26]
 80198e0:	f043 0302 	orr.w	r3, r3, #2
 80198e4:	b29a      	uxth	r2, r3
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80198ea:	6878      	ldr	r0, [r7, #4]
 80198ec:	f004 fd18 	bl	801e320 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80198f0:	3710      	adds	r7, #16
 80198f2:	46bd      	mov	sp, r7
 80198f4:	bd80      	pop	{r7, pc}
 80198f6:	bf00      	nop
 80198f8:	0802bc8c 	.word	0x0802bc8c
 80198fc:	0802bf28 	.word	0x0802bf28
 8019900:	0802bcd0 	.word	0x0802bcd0
 8019904:	0802bf40 	.word	0x0802bf40

08019908 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8019908:	b480      	push	{r7}
 801990a:	b083      	sub	sp, #12
 801990c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801990e:	2300      	movs	r3, #0
 8019910:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8019912:	4b1e      	ldr	r3, [pc, #120]	; (801998c <tcp_new_port+0x84>)
 8019914:	881b      	ldrh	r3, [r3, #0]
 8019916:	3301      	adds	r3, #1
 8019918:	b29a      	uxth	r2, r3
 801991a:	4b1c      	ldr	r3, [pc, #112]	; (801998c <tcp_new_port+0x84>)
 801991c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801991e:	4b1b      	ldr	r3, [pc, #108]	; (801998c <tcp_new_port+0x84>)
 8019920:	881b      	ldrh	r3, [r3, #0]
 8019922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019926:	4293      	cmp	r3, r2
 8019928:	d103      	bne.n	8019932 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801992a:	4b18      	ldr	r3, [pc, #96]	; (801998c <tcp_new_port+0x84>)
 801992c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019930:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019932:	2300      	movs	r3, #0
 8019934:	71fb      	strb	r3, [r7, #7]
 8019936:	e01e      	b.n	8019976 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019938:	79fb      	ldrb	r3, [r7, #7]
 801993a:	4a15      	ldr	r2, [pc, #84]	; (8019990 <tcp_new_port+0x88>)
 801993c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	603b      	str	r3, [r7, #0]
 8019944:	e011      	b.n	801996a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8019946:	683b      	ldr	r3, [r7, #0]
 8019948:	8ada      	ldrh	r2, [r3, #22]
 801994a:	4b10      	ldr	r3, [pc, #64]	; (801998c <tcp_new_port+0x84>)
 801994c:	881b      	ldrh	r3, [r3, #0]
 801994e:	429a      	cmp	r2, r3
 8019950:	d108      	bne.n	8019964 <tcp_new_port+0x5c>
        n++;
 8019952:	88bb      	ldrh	r3, [r7, #4]
 8019954:	3301      	adds	r3, #1
 8019956:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8019958:	88bb      	ldrh	r3, [r7, #4]
 801995a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801995e:	d3d8      	bcc.n	8019912 <tcp_new_port+0xa>
          return 0;
 8019960:	2300      	movs	r3, #0
 8019962:	e00d      	b.n	8019980 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019964:	683b      	ldr	r3, [r7, #0]
 8019966:	68db      	ldr	r3, [r3, #12]
 8019968:	603b      	str	r3, [r7, #0]
 801996a:	683b      	ldr	r3, [r7, #0]
 801996c:	2b00      	cmp	r3, #0
 801996e:	d1ea      	bne.n	8019946 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019970:	79fb      	ldrb	r3, [r7, #7]
 8019972:	3301      	adds	r3, #1
 8019974:	71fb      	strb	r3, [r7, #7]
 8019976:	79fb      	ldrb	r3, [r7, #7]
 8019978:	2b03      	cmp	r3, #3
 801997a:	d9dd      	bls.n	8019938 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801997c:	4b03      	ldr	r3, [pc, #12]	; (801998c <tcp_new_port+0x84>)
 801997e:	881b      	ldrh	r3, [r3, #0]
}
 8019980:	4618      	mov	r0, r3
 8019982:	370c      	adds	r7, #12
 8019984:	46bd      	mov	sp, r7
 8019986:	f85d 7b04 	ldr.w	r7, [sp], #4
 801998a:	4770      	bx	lr
 801998c:	2000002c 	.word	0x2000002c
 8019990:	0802df04 	.word	0x0802df04

08019994 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8019994:	b580      	push	{r7, lr}
 8019996:	b08c      	sub	sp, #48	; 0x30
 8019998:	af00      	add	r7, sp, #0
 801999a:	60f8      	str	r0, [r7, #12]
 801999c:	60b9      	str	r1, [r7, #8]
 801999e:	603b      	str	r3, [r7, #0]
 80199a0:	4613      	mov	r3, r2
 80199a2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80199a4:	2300      	movs	r3, #0
 80199a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80199a8:	68fb      	ldr	r3, [r7, #12]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d109      	bne.n	80199c2 <tcp_connect+0x2e>
 80199ae:	4b89      	ldr	r3, [pc, #548]	; (8019bd4 <tcp_connect+0x240>)
 80199b0:	f240 4235 	movw	r2, #1077	; 0x435
 80199b4:	4988      	ldr	r1, [pc, #544]	; (8019bd8 <tcp_connect+0x244>)
 80199b6:	4889      	ldr	r0, [pc, #548]	; (8019bdc <tcp_connect+0x248>)
 80199b8:	f00b fa02 	bl	8024dc0 <iprintf>
 80199bc:	f06f 030f 	mvn.w	r3, #15
 80199c0:	e130      	b.n	8019c24 <tcp_connect+0x290>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80199c2:	68bb      	ldr	r3, [r7, #8]
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d109      	bne.n	80199dc <tcp_connect+0x48>
 80199c8:	4b82      	ldr	r3, [pc, #520]	; (8019bd4 <tcp_connect+0x240>)
 80199ca:	f240 4236 	movw	r2, #1078	; 0x436
 80199ce:	4984      	ldr	r1, [pc, #528]	; (8019be0 <tcp_connect+0x24c>)
 80199d0:	4882      	ldr	r0, [pc, #520]	; (8019bdc <tcp_connect+0x248>)
 80199d2:	f00b f9f5 	bl	8024dc0 <iprintf>
 80199d6:	f06f 030f 	mvn.w	r3, #15
 80199da:	e123      	b.n	8019c24 <tcp_connect+0x290>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80199dc:	68fb      	ldr	r3, [r7, #12]
 80199de:	7d1b      	ldrb	r3, [r3, #20]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d009      	beq.n	80199f8 <tcp_connect+0x64>
 80199e4:	4b7b      	ldr	r3, [pc, #492]	; (8019bd4 <tcp_connect+0x240>)
 80199e6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80199ea:	497e      	ldr	r1, [pc, #504]	; (8019be4 <tcp_connect+0x250>)
 80199ec:	487b      	ldr	r0, [pc, #492]	; (8019bdc <tcp_connect+0x248>)
 80199ee:	f00b f9e7 	bl	8024dc0 <iprintf>
 80199f2:	f06f 0309 	mvn.w	r3, #9
 80199f6:	e115      	b.n	8019c24 <tcp_connect+0x290>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80199f8:	68bb      	ldr	r3, [r7, #8]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d002      	beq.n	8019a04 <tcp_connect+0x70>
 80199fe:	68bb      	ldr	r3, [r7, #8]
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	e000      	b.n	8019a06 <tcp_connect+0x72>
 8019a04:	2300      	movs	r3, #0
 8019a06:	68fa      	ldr	r2, [r7, #12]
 8019a08:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8019a0a:	68fb      	ldr	r3, [r7, #12]
 8019a0c:	88fa      	ldrh	r2, [r7, #6]
 8019a0e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	7a1b      	ldrb	r3, [r3, #8]
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d006      	beq.n	8019a26 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	7a1b      	ldrb	r3, [r3, #8]
 8019a1c:	4618      	mov	r0, r3
 8019a1e:	f7fe fa3f 	bl	8017ea0 <netif_get_by_index>
 8019a22:	62f8      	str	r0, [r7, #44]	; 0x2c
 8019a24:	e005      	b.n	8019a32 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8019a26:	68fb      	ldr	r3, [r7, #12]
 8019a28:	3304      	adds	r3, #4
 8019a2a:	4618      	mov	r0, r3
 8019a2c:	f007 fbda 	bl	80211e4 <ip4_route>
 8019a30:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  if (netif == NULL) {
 8019a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d102      	bne.n	8019a3e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8019a38:	f06f 0303 	mvn.w	r3, #3
 8019a3c:	e0f2      	b.n	8019c24 <tcp_connect+0x290>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d003      	beq.n	8019a4c <tcp_connect+0xb8>
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d111      	bne.n	8019a70 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8019a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d002      	beq.n	8019a58 <tcp_connect+0xc4>
 8019a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a54:	3304      	adds	r3, #4
 8019a56:	e000      	b.n	8019a5a <tcp_connect+0xc6>
 8019a58:	2300      	movs	r3, #0
 8019a5a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8019a5c:	69fb      	ldr	r3, [r7, #28]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d102      	bne.n	8019a68 <tcp_connect+0xd4>
      return ERR_RTE;
 8019a62:	f06f 0303 	mvn.w	r3, #3
 8019a66:	e0dd      	b.n	8019c24 <tcp_connect+0x290>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019a68:	69fb      	ldr	r3, [r7, #28]
 8019a6a:	681a      	ldr	r2, [r3, #0]
 8019a6c:	68fb      	ldr	r3, [r7, #12]
 8019a6e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8019a70:	68fb      	ldr	r3, [r7, #12]
 8019a72:	8adb      	ldrh	r3, [r3, #22]
 8019a74:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	8adb      	ldrh	r3, [r3, #22]
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d10c      	bne.n	8019a98 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8019a7e:	f7ff ff43 	bl	8019908 <tcp_new_port>
 8019a82:	4603      	mov	r3, r0
 8019a84:	461a      	mov	r2, r3
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8019a8a:	68fb      	ldr	r3, [r7, #12]
 8019a8c:	8adb      	ldrh	r3, [r3, #22]
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d138      	bne.n	8019b04 <tcp_connect+0x170>
      return ERR_BUF;
 8019a92:	f06f 0301 	mvn.w	r3, #1
 8019a96:	e0c5      	b.n	8019c24 <tcp_connect+0x290>
    }
  } else {
#if SO_REUSE
    if (ip_get_option(pcb, SOF_REUSEADDR)) {
 8019a98:	68fb      	ldr	r3, [r7, #12]
 8019a9a:	7a5b      	ldrb	r3, [r3, #9]
 8019a9c:	f003 0304 	and.w	r3, r3, #4
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d02f      	beq.n	8019b04 <tcp_connect+0x170>
      /* Since SOF_REUSEADDR allows reusing a local address, we have to make sure
         now that the 5-tuple is unique. */
      struct tcp_pcb *cpcb;
      int i;
      /* Don't check listen- and bound-PCBs, check active- and TIME-WAIT PCBs. */
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
 8019aa4:	2302      	movs	r3, #2
 8019aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8019aa8:	e029      	b.n	8019afe <tcp_connect+0x16a>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019aaa:	4a4f      	ldr	r2, [pc, #316]	; (8019be8 <tcp_connect+0x254>)
 8019aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	62bb      	str	r3, [r7, #40]	; 0x28
 8019ab6:	e01c      	b.n	8019af2 <tcp_connect+0x15e>
          if ((cpcb->local_port == pcb->local_port) &&
 8019ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aba:	8ada      	ldrh	r2, [r3, #22]
 8019abc:	68fb      	ldr	r3, [r7, #12]
 8019abe:	8adb      	ldrh	r3, [r3, #22]
 8019ac0:	429a      	cmp	r2, r3
 8019ac2:	d113      	bne.n	8019aec <tcp_connect+0x158>
              (cpcb->remote_port == port) &&
 8019ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ac6:	8b1b      	ldrh	r3, [r3, #24]
          if ((cpcb->local_port == pcb->local_port) &&
 8019ac8:	88fa      	ldrh	r2, [r7, #6]
 8019aca:	429a      	cmp	r2, r3
 8019acc:	d10e      	bne.n	8019aec <tcp_connect+0x158>
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
 8019ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ad0:	681a      	ldr	r2, [r3, #0]
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	681b      	ldr	r3, [r3, #0]
              (cpcb->remote_port == port) &&
 8019ad6:	429a      	cmp	r2, r3
 8019ad8:	d108      	bne.n	8019aec <tcp_connect+0x158>
              ip_addr_cmp(&cpcb->remote_ip, ipaddr)) {
 8019ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019adc:	685a      	ldr	r2, [r3, #4]
 8019ade:	68bb      	ldr	r3, [r7, #8]
 8019ae0:	681b      	ldr	r3, [r3, #0]
              ip_addr_cmp(&cpcb->local_ip, &pcb->local_ip) &&
 8019ae2:	429a      	cmp	r2, r3
 8019ae4:	d102      	bne.n	8019aec <tcp_connect+0x158>
            /* linux returns EISCONN here, but ERR_USE should be OK for us */
            return ERR_USE;
 8019ae6:	f06f 0307 	mvn.w	r3, #7
 8019aea:	e09b      	b.n	8019c24 <tcp_connect+0x290>
        for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aee:	68db      	ldr	r3, [r3, #12]
 8019af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8019af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d1df      	bne.n	8019ab8 <tcp_connect+0x124>
      for (i = 2; i < NUM_TCP_PCB_LISTS; i++) {
 8019af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019afa:	3301      	adds	r3, #1
 8019afc:	627b      	str	r3, [r7, #36]	; 0x24
 8019afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b00:	2b03      	cmp	r3, #3
 8019b02:	ddd2      	ble.n	8019aaa <tcp_connect+0x116>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8019b04:	68f8      	ldr	r0, [r7, #12]
 8019b06:	f001 f875 	bl	801abf4 <tcp_next_iss>
 8019b0a:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8019b0c:	68fb      	ldr	r3, [r7, #12]
 8019b0e:	2200      	movs	r2, #0
 8019b10:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	697a      	ldr	r2, [r7, #20]
 8019b16:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8019b18:	697b      	ldr	r3, [r7, #20]
 8019b1a:	1e5a      	subs	r2, r3, #1
 8019b1c:	68fb      	ldr	r3, [r7, #12]
 8019b1e:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8019b20:	697b      	ldr	r3, [r7, #20]
 8019b22:	1e5a      	subs	r2, r3, #1
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	1e5a      	subs	r2, r3, #1
 8019b2c:	68fb      	ldr	r3, [r7, #12]
 8019b2e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019b36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019b38:	68fb      	ldr	r3, [r7, #12]
 8019b3a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8019b40:	68fb      	ldr	r3, [r7, #12]
 8019b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019b44:	68fb      	ldr	r3, [r7, #12]
 8019b46:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 8019b48:	68fb      	ldr	r3, [r7, #12]
 8019b4a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019b4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8019b52:	68fb      	ldr	r3, [r7, #12]
 8019b54:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019b58:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 8019b5a:	68fb      	ldr	r3, [r7, #12]
 8019b5c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	3304      	adds	r3, #4
 8019b62:	461a      	mov	r2, r3
 8019b64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019b66:	f001 f86b 	bl	801ac40 <tcp_eff_send_mss_netif>
 8019b6a:	4603      	mov	r3, r0
 8019b6c:	461a      	mov	r2, r3
 8019b6e:	68fb      	ldr	r3, [r7, #12]
 8019b70:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	2201      	movs	r2, #1
 8019b76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8019b7a:	68fb      	ldr	r3, [r7, #12]
 8019b7c:	683a      	ldr	r2, [r7, #0]
 8019b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8019b82:	2102      	movs	r1, #2
 8019b84:	68f8      	ldr	r0, [r7, #12]
 8019b86:	f004 fadd 	bl	801e144 <tcp_enqueue_flags>
 8019b8a:	4603      	mov	r3, r0
 8019b8c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8019b8e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8019b92:	2b00      	cmp	r3, #0
 8019b94:	d144      	bne.n	8019c20 <tcp_connect+0x28c>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	2202      	movs	r2, #2
 8019b9a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8019b9c:	8b7b      	ldrh	r3, [r7, #26]
 8019b9e:	2b00      	cmp	r3, #0
 8019ba0:	d02f      	beq.n	8019c02 <tcp_connect+0x26e>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8019ba2:	4b12      	ldr	r3, [pc, #72]	; (8019bec <tcp_connect+0x258>)
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	68fa      	ldr	r2, [r7, #12]
 8019ba8:	429a      	cmp	r2, r3
 8019baa:	d105      	bne.n	8019bb8 <tcp_connect+0x224>
 8019bac:	4b0f      	ldr	r3, [pc, #60]	; (8019bec <tcp_connect+0x258>)
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	68db      	ldr	r3, [r3, #12]
 8019bb2:	4a0e      	ldr	r2, [pc, #56]	; (8019bec <tcp_connect+0x258>)
 8019bb4:	6013      	str	r3, [r2, #0]
 8019bb6:	e021      	b.n	8019bfc <tcp_connect+0x268>
 8019bb8:	4b0c      	ldr	r3, [pc, #48]	; (8019bec <tcp_connect+0x258>)
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	623b      	str	r3, [r7, #32]
 8019bbe:	e01a      	b.n	8019bf6 <tcp_connect+0x262>
 8019bc0:	6a3b      	ldr	r3, [r7, #32]
 8019bc2:	68db      	ldr	r3, [r3, #12]
 8019bc4:	68fa      	ldr	r2, [r7, #12]
 8019bc6:	429a      	cmp	r2, r3
 8019bc8:	d112      	bne.n	8019bf0 <tcp_connect+0x25c>
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	68da      	ldr	r2, [r3, #12]
 8019bce:	6a3b      	ldr	r3, [r7, #32]
 8019bd0:	60da      	str	r2, [r3, #12]
 8019bd2:	e013      	b.n	8019bfc <tcp_connect+0x268>
 8019bd4:	0802bc8c 	.word	0x0802bc8c
 8019bd8:	0802bf68 	.word	0x0802bf68
 8019bdc:	0802bcd0 	.word	0x0802bcd0
 8019be0:	0802bf84 	.word	0x0802bf84
 8019be4:	0802bfa0 	.word	0x0802bfa0
 8019be8:	0802df04 	.word	0x0802df04
 8019bec:	20015fd8 	.word	0x20015fd8
 8019bf0:	6a3b      	ldr	r3, [r7, #32]
 8019bf2:	68db      	ldr	r3, [r3, #12]
 8019bf4:	623b      	str	r3, [r7, #32]
 8019bf6:	6a3b      	ldr	r3, [r7, #32]
 8019bf8:	2b00      	cmp	r3, #0
 8019bfa:	d1e1      	bne.n	8019bc0 <tcp_connect+0x22c>
 8019bfc:	68fb      	ldr	r3, [r7, #12]
 8019bfe:	2200      	movs	r2, #0
 8019c00:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8019c02:	4b0a      	ldr	r3, [pc, #40]	; (8019c2c <tcp_connect+0x298>)
 8019c04:	681a      	ldr	r2, [r3, #0]
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	60da      	str	r2, [r3, #12]
 8019c0a:	4a08      	ldr	r2, [pc, #32]	; (8019c2c <tcp_connect+0x298>)
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	6013      	str	r3, [r2, #0]
 8019c10:	f005 fafc 	bl	801f20c <tcp_timer_needed>
 8019c14:	4b06      	ldr	r3, [pc, #24]	; (8019c30 <tcp_connect+0x29c>)
 8019c16:	2201      	movs	r2, #1
 8019c18:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8019c1a:	68f8      	ldr	r0, [r7, #12]
 8019c1c:	f004 fb80 	bl	801e320 <tcp_output>
  }
  return ret;
 8019c20:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 8019c24:	4618      	mov	r0, r3
 8019c26:	3730      	adds	r7, #48	; 0x30
 8019c28:	46bd      	mov	sp, r7
 8019c2a:	bd80      	pop	{r7, pc}
 8019c2c:	20015fe0 	.word	0x20015fe0
 8019c30:	20015fe8 	.word	0x20015fe8

08019c34 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8019c34:	b5b0      	push	{r4, r5, r7, lr}
 8019c36:	b090      	sub	sp, #64	; 0x40
 8019c38:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8019c3a:	2300      	movs	r3, #0
 8019c3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8019c40:	4b94      	ldr	r3, [pc, #592]	; (8019e94 <tcp_slowtmr+0x260>)
 8019c42:	681b      	ldr	r3, [r3, #0]
 8019c44:	3301      	adds	r3, #1
 8019c46:	4a93      	ldr	r2, [pc, #588]	; (8019e94 <tcp_slowtmr+0x260>)
 8019c48:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8019c4a:	4b93      	ldr	r3, [pc, #588]	; (8019e98 <tcp_slowtmr+0x264>)
 8019c4c:	781b      	ldrb	r3, [r3, #0]
 8019c4e:	3301      	adds	r3, #1
 8019c50:	b2da      	uxtb	r2, r3
 8019c52:	4b91      	ldr	r3, [pc, #580]	; (8019e98 <tcp_slowtmr+0x264>)
 8019c54:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8019c56:	2300      	movs	r3, #0
 8019c58:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8019c5a:	4b90      	ldr	r3, [pc, #576]	; (8019e9c <tcp_slowtmr+0x268>)
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8019c60:	e2b7      	b.n	801a1d2 <tcp_slowtmr+0x59e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c64:	7d1b      	ldrb	r3, [r3, #20]
 8019c66:	2b00      	cmp	r3, #0
 8019c68:	d106      	bne.n	8019c78 <tcp_slowtmr+0x44>
 8019c6a:	4b8d      	ldr	r3, [pc, #564]	; (8019ea0 <tcp_slowtmr+0x26c>)
 8019c6c:	f240 42be 	movw	r2, #1214	; 0x4be
 8019c70:	498c      	ldr	r1, [pc, #560]	; (8019ea4 <tcp_slowtmr+0x270>)
 8019c72:	488d      	ldr	r0, [pc, #564]	; (8019ea8 <tcp_slowtmr+0x274>)
 8019c74:	f00b f8a4 	bl	8024dc0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8019c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c7a:	7d1b      	ldrb	r3, [r3, #20]
 8019c7c:	2b01      	cmp	r3, #1
 8019c7e:	d106      	bne.n	8019c8e <tcp_slowtmr+0x5a>
 8019c80:	4b87      	ldr	r3, [pc, #540]	; (8019ea0 <tcp_slowtmr+0x26c>)
 8019c82:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8019c86:	4989      	ldr	r1, [pc, #548]	; (8019eac <tcp_slowtmr+0x278>)
 8019c88:	4887      	ldr	r0, [pc, #540]	; (8019ea8 <tcp_slowtmr+0x274>)
 8019c8a:	f00b f899 	bl	8024dc0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8019c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019c90:	7d1b      	ldrb	r3, [r3, #20]
 8019c92:	2b0a      	cmp	r3, #10
 8019c94:	d106      	bne.n	8019ca4 <tcp_slowtmr+0x70>
 8019c96:	4b82      	ldr	r3, [pc, #520]	; (8019ea0 <tcp_slowtmr+0x26c>)
 8019c98:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8019c9c:	4984      	ldr	r1, [pc, #528]	; (8019eb0 <tcp_slowtmr+0x27c>)
 8019c9e:	4882      	ldr	r0, [pc, #520]	; (8019ea8 <tcp_slowtmr+0x274>)
 8019ca0:	f00b f88e 	bl	8024dc0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8019ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ca6:	7f9a      	ldrb	r2, [r3, #30]
 8019ca8:	4b7b      	ldr	r3, [pc, #492]	; (8019e98 <tcp_slowtmr+0x264>)
 8019caa:	781b      	ldrb	r3, [r3, #0]
 8019cac:	429a      	cmp	r2, r3
 8019cae:	d105      	bne.n	8019cbc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8019cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cb2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8019cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cb6:	68db      	ldr	r3, [r3, #12]
 8019cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8019cba:	e28a      	b.n	801a1d2 <tcp_slowtmr+0x59e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8019cbc:	4b76      	ldr	r3, [pc, #472]	; (8019e98 <tcp_slowtmr+0x264>)
 8019cbe:	781a      	ldrb	r2, [r3, #0]
 8019cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cc2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8019cca:	2300      	movs	r3, #0
 8019ccc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cd2:	7d1b      	ldrb	r3, [r3, #20]
 8019cd4:	2b02      	cmp	r3, #2
 8019cd6:	d10a      	bne.n	8019cee <tcp_slowtmr+0xba>
 8019cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019cde:	2b05      	cmp	r3, #5
 8019ce0:	d905      	bls.n	8019cee <tcp_slowtmr+0xba>
      ++pcb_remove;
 8019ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019ce6:	3301      	adds	r3, #1
 8019ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019cec:	e11e      	b.n	8019f2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8019cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019cf4:	2b0b      	cmp	r3, #11
 8019cf6:	d905      	bls.n	8019d04 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8019cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019cfc:	3301      	adds	r3, #1
 8019cfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019d02:	e113      	b.n	8019f2c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8019d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d06:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d075      	beq.n	8019dfa <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8019d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d006      	beq.n	8019d24 <tcp_slowtmr+0xf0>
 8019d16:	4b62      	ldr	r3, [pc, #392]	; (8019ea0 <tcp_slowtmr+0x26c>)
 8019d18:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8019d1c:	4965      	ldr	r1, [pc, #404]	; (8019eb4 <tcp_slowtmr+0x280>)
 8019d1e:	4862      	ldr	r0, [pc, #392]	; (8019ea8 <tcp_slowtmr+0x274>)
 8019d20:	f00b f84e 	bl	8024dc0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8019d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d28:	2b00      	cmp	r3, #0
 8019d2a:	d106      	bne.n	8019d3a <tcp_slowtmr+0x106>
 8019d2c:	4b5c      	ldr	r3, [pc, #368]	; (8019ea0 <tcp_slowtmr+0x26c>)
 8019d2e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8019d32:	4961      	ldr	r1, [pc, #388]	; (8019eb8 <tcp_slowtmr+0x284>)
 8019d34:	485c      	ldr	r0, [pc, #368]	; (8019ea8 <tcp_slowtmr+0x274>)
 8019d36:	f00b f843 	bl	8024dc0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8019d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d3c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8019d40:	2b0b      	cmp	r3, #11
 8019d42:	d905      	bls.n	8019d50 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8019d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019d48:	3301      	adds	r3, #1
 8019d4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019d4e:	e0ed      	b.n	8019f2c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8019d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d52:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8019d56:	3b01      	subs	r3, #1
 8019d58:	4a58      	ldr	r2, [pc, #352]	; (8019ebc <tcp_slowtmr+0x288>)
 8019d5a:	5cd3      	ldrb	r3, [r2, r3]
 8019d5c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8019d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d60:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8019d64:	7c7a      	ldrb	r2, [r7, #17]
 8019d66:	429a      	cmp	r2, r3
 8019d68:	d907      	bls.n	8019d7a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8019d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d6c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8019d70:	3301      	adds	r3, #1
 8019d72:	b2da      	uxtb	r2, r3
 8019d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8019d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d7c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8019d80:	7c7a      	ldrb	r2, [r7, #17]
 8019d82:	429a      	cmp	r2, r3
 8019d84:	f200 80d2 	bhi.w	8019f2c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8019d88:	2301      	movs	r3, #1
 8019d8a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8019d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019d92:	2b00      	cmp	r3, #0
 8019d94:	d108      	bne.n	8019da8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8019d96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019d98:	f005 f96a 	bl	801f070 <tcp_zero_window_probe>
 8019d9c:	4603      	mov	r3, r0
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d014      	beq.n	8019dcc <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8019da2:	2300      	movs	r3, #0
 8019da4:	623b      	str	r3, [r7, #32]
 8019da6:	e011      	b.n	8019dcc <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8019da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019daa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019dae:	4619      	mov	r1, r3
 8019db0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019db2:	f004 f82f 	bl	801de14 <tcp_split_unsent_seg>
 8019db6:	4603      	mov	r3, r0
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d107      	bne.n	8019dcc <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8019dbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019dbe:	f004 faaf 	bl	801e320 <tcp_output>
 8019dc2:	4603      	mov	r3, r0
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d101      	bne.n	8019dcc <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8019dc8:	2300      	movs	r3, #0
 8019dca:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8019dcc:	6a3b      	ldr	r3, [r7, #32]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	f000 80ac 	beq.w	8019f2c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8019dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd6:	2200      	movs	r2, #0
 8019dd8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8019ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dde:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8019de2:	2b06      	cmp	r3, #6
 8019de4:	f200 80a2 	bhi.w	8019f2c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8019de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dea:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8019dee:	3301      	adds	r3, #1
 8019df0:	b2da      	uxtb	r2, r3
 8019df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019df4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8019df8:	e098      	b.n	8019f2c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8019dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019e00:	2b00      	cmp	r3, #0
 8019e02:	db0f      	blt.n	8019e24 <tcp_slowtmr+0x1f0>
 8019e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e06:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019e0a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019e0e:	4293      	cmp	r3, r2
 8019e10:	d008      	beq.n	8019e24 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8019e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e14:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019e18:	b29b      	uxth	r3, r3
 8019e1a:	3301      	adds	r3, #1
 8019e1c:	b29b      	uxth	r3, r3
 8019e1e:	b21a      	sxth	r2, r3
 8019e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e22:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8019e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e26:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8019e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e2c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8019e30:	429a      	cmp	r2, r3
 8019e32:	db7b      	blt.n	8019f2c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8019e34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019e36:	f004 fd67 	bl	801e908 <tcp_rexmit_rto_prepare>
 8019e3a:	4603      	mov	r3, r0
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d007      	beq.n	8019e50 <tcp_slowtmr+0x21c>
 8019e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d171      	bne.n	8019f2c <tcp_slowtmr+0x2f8>
 8019e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d06d      	beq.n	8019f2c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8019e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e52:	7d1b      	ldrb	r3, [r3, #20]
 8019e54:	2b02      	cmp	r3, #2
 8019e56:	d03a      	beq.n	8019ece <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8019e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8019e5e:	2b0c      	cmp	r3, #12
 8019e60:	bf28      	it	cs
 8019e62:	230c      	movcs	r3, #12
 8019e64:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8019e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8019e6c:	10db      	asrs	r3, r3, #3
 8019e6e:	b21b      	sxth	r3, r3
 8019e70:	461a      	mov	r2, r3
 8019e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e74:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8019e78:	4413      	add	r3, r2
 8019e7a:	7efa      	ldrb	r2, [r7, #27]
 8019e7c:	4910      	ldr	r1, [pc, #64]	; (8019ec0 <tcp_slowtmr+0x28c>)
 8019e7e:	5c8a      	ldrb	r2, [r1, r2]
 8019e80:	4093      	lsls	r3, r2
 8019e82:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8019e84:	697b      	ldr	r3, [r7, #20]
 8019e86:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8019e8a:	4293      	cmp	r3, r2
 8019e8c:	dc1a      	bgt.n	8019ec4 <tcp_slowtmr+0x290>
 8019e8e:	697b      	ldr	r3, [r7, #20]
 8019e90:	b21a      	sxth	r2, r3
 8019e92:	e019      	b.n	8019ec8 <tcp_slowtmr+0x294>
 8019e94:	20015fd4 	.word	0x20015fd4
 8019e98:	20015fea 	.word	0x20015fea
 8019e9c:	20015fe0 	.word	0x20015fe0
 8019ea0:	0802bc8c 	.word	0x0802bc8c
 8019ea4:	0802bfd0 	.word	0x0802bfd0
 8019ea8:	0802bcd0 	.word	0x0802bcd0
 8019eac:	0802bffc 	.word	0x0802bffc
 8019eb0:	0802c028 	.word	0x0802c028
 8019eb4:	0802c058 	.word	0x0802c058
 8019eb8:	0802c08c 	.word	0x0802c08c
 8019ebc:	0802defc 	.word	0x0802defc
 8019ec0:	0802deec 	.word	0x0802deec
 8019ec4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8019ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8019ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8019ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ed6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8019eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019edc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8019ee0:	4293      	cmp	r3, r2
 8019ee2:	bf28      	it	cs
 8019ee4:	4613      	movcs	r3, r2
 8019ee6:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8019ee8:	8a7b      	ldrh	r3, [r7, #18]
 8019eea:	085b      	lsrs	r3, r3, #1
 8019eec:	b29a      	uxth	r2, r3
 8019eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8019ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8019efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019efe:	005b      	lsls	r3, r3, #1
 8019f00:	b29b      	uxth	r3, r3
 8019f02:	429a      	cmp	r2, r3
 8019f04:	d206      	bcs.n	8019f14 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8019f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019f0a:	005b      	lsls	r3, r3, #1
 8019f0c:	b29a      	uxth	r2, r3
 8019f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f10:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8019f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f16:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8019f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8019f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f20:	2200      	movs	r2, #0
 8019f22:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8019f26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019f28:	f004 fd5e 	bl	801e9e8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8019f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f2e:	7d1b      	ldrb	r3, [r3, #20]
 8019f30:	2b06      	cmp	r3, #6
 8019f32:	d111      	bne.n	8019f58 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8019f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f36:	8b5b      	ldrh	r3, [r3, #26]
 8019f38:	f003 0310 	and.w	r3, r3, #16
 8019f3c:	2b00      	cmp	r3, #0
 8019f3e:	d00b      	beq.n	8019f58 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f40:	4b98      	ldr	r3, [pc, #608]	; (801a1a4 <tcp_slowtmr+0x570>)
 8019f42:	681a      	ldr	r2, [r3, #0]
 8019f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f46:	6a1b      	ldr	r3, [r3, #32]
 8019f48:	1ad3      	subs	r3, r2, r3
 8019f4a:	2b28      	cmp	r3, #40	; 0x28
 8019f4c:	d904      	bls.n	8019f58 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8019f4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019f52:	3301      	adds	r3, #1
 8019f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f5a:	7a5b      	ldrb	r3, [r3, #9]
 8019f5c:	f003 0308 	and.w	r3, r3, #8
 8019f60:	2b00      	cmp	r3, #0
 8019f62:	d053      	beq.n	801a00c <tcp_slowtmr+0x3d8>
        ((pcb->state == ESTABLISHED) ||
 8019f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f66:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019f68:	2b04      	cmp	r3, #4
 8019f6a:	d003      	beq.n	8019f74 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8019f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8019f70:	2b07      	cmp	r3, #7
 8019f72:	d14b      	bne.n	801a00c <tcp_slowtmr+0x3d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f74:	4b8b      	ldr	r3, [pc, #556]	; (801a1a4 <tcp_slowtmr+0x570>)
 8019f76:	681a      	ldr	r2, [r3, #0]
 8019f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f7a:	6a1b      	ldr	r3, [r3, #32]
 8019f7c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f80:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8019f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019f8c:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 8019f90:	fb00 f303 	mul.w	r3, r0, r3
 8019f94:	440b      	add	r3, r1
 8019f96:	4984      	ldr	r1, [pc, #528]	; (801a1a8 <tcp_slowtmr+0x574>)
 8019f98:	fba1 1303 	umull	r1, r3, r1, r3
 8019f9c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f9e:	429a      	cmp	r2, r3
 8019fa0:	d90a      	bls.n	8019fb8 <tcp_slowtmr+0x384>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8019fa2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019fa6:	3301      	adds	r3, #1
 8019fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8019fac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019fb0:	3301      	adds	r3, #1
 8019fb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8019fb6:	e029      	b.n	801a00c <tcp_slowtmr+0x3d8>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019fb8:	4b7a      	ldr	r3, [pc, #488]	; (801a1a4 <tcp_slowtmr+0x570>)
 8019fba:	681a      	ldr	r2, [r3, #0]
 8019fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fbe:	6a1b      	ldr	r3, [r3, #32]
 8019fc0:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8019fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fc4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8019fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fca:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8019fce:	4618      	mov	r0, r3
 8019fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8019fd6:	fb00 f303 	mul.w	r3, r0, r3
 8019fda:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8019fdc:	4972      	ldr	r1, [pc, #456]	; (801a1a8 <tcp_slowtmr+0x574>)
 8019fde:	fba1 1303 	umull	r1, r3, r1, r3
 8019fe2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019fe4:	429a      	cmp	r2, r3
 8019fe6:	d911      	bls.n	801a00c <tcp_slowtmr+0x3d8>
        err = tcp_keepalive(pcb);
 8019fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8019fea:	f005 f801 	bl	801eff0 <tcp_keepalive>
 8019fee:	4603      	mov	r3, r0
 8019ff0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8019ff4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	d107      	bne.n	801a00c <tcp_slowtmr+0x3d8>
          pcb->keep_cnt_sent++;
 8019ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ffe:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 801a002:	3301      	adds	r3, #1
 801a004:	b2da      	uxtb	r2, r3
 801a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a008:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801a00c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a00e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a010:	2b00      	cmp	r3, #0
 801a012:	d011      	beq.n	801a038 <tcp_slowtmr+0x404>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801a014:	4b63      	ldr	r3, [pc, #396]	; (801a1a4 <tcp_slowtmr+0x570>)
 801a016:	681a      	ldr	r2, [r3, #0]
 801a018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a01a:	6a1b      	ldr	r3, [r3, #32]
 801a01c:	1ad2      	subs	r2, r2, r3
 801a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a020:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a024:	4619      	mov	r1, r3
 801a026:	460b      	mov	r3, r1
 801a028:	005b      	lsls	r3, r3, #1
 801a02a:	440b      	add	r3, r1
 801a02c:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801a02e:	429a      	cmp	r2, r3
 801a030:	d302      	bcc.n	801a038 <tcp_slowtmr+0x404>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801a032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a034:	f000 feae 	bl	801ad94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801a038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a03a:	7d1b      	ldrb	r3, [r3, #20]
 801a03c:	2b03      	cmp	r3, #3
 801a03e:	d10b      	bne.n	801a058 <tcp_slowtmr+0x424>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a040:	4b58      	ldr	r3, [pc, #352]	; (801a1a4 <tcp_slowtmr+0x570>)
 801a042:	681a      	ldr	r2, [r3, #0]
 801a044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a046:	6a1b      	ldr	r3, [r3, #32]
 801a048:	1ad3      	subs	r3, r2, r3
 801a04a:	2b28      	cmp	r3, #40	; 0x28
 801a04c:	d904      	bls.n	801a058 <tcp_slowtmr+0x424>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801a04e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a052:	3301      	adds	r3, #1
 801a054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801a058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a05a:	7d1b      	ldrb	r3, [r3, #20]
 801a05c:	2b09      	cmp	r3, #9
 801a05e:	d10b      	bne.n	801a078 <tcp_slowtmr+0x444>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a060:	4b50      	ldr	r3, [pc, #320]	; (801a1a4 <tcp_slowtmr+0x570>)
 801a062:	681a      	ldr	r2, [r3, #0]
 801a064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a066:	6a1b      	ldr	r3, [r3, #32]
 801a068:	1ad3      	subs	r3, r2, r3
 801a06a:	2bf0      	cmp	r3, #240	; 0xf0
 801a06c:	d904      	bls.n	801a078 <tcp_slowtmr+0x444>
        ++pcb_remove;
 801a06e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a072:	3301      	adds	r3, #1
 801a074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d060      	beq.n	801a142 <tcp_slowtmr+0x50e>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801a080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a086:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801a088:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a08a:	f000 fccf 	bl	801aa2c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801a08e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a090:	2b00      	cmp	r3, #0
 801a092:	d010      	beq.n	801a0b6 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a094:	4b45      	ldr	r3, [pc, #276]	; (801a1ac <tcp_slowtmr+0x578>)
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a09a:	429a      	cmp	r2, r3
 801a09c:	d106      	bne.n	801a0ac <tcp_slowtmr+0x478>
 801a09e:	4b44      	ldr	r3, [pc, #272]	; (801a1b0 <tcp_slowtmr+0x57c>)
 801a0a0:	f240 526d 	movw	r2, #1389	; 0x56d
 801a0a4:	4943      	ldr	r1, [pc, #268]	; (801a1b4 <tcp_slowtmr+0x580>)
 801a0a6:	4844      	ldr	r0, [pc, #272]	; (801a1b8 <tcp_slowtmr+0x584>)
 801a0a8:	f00a fe8a 	bl	8024dc0 <iprintf>
        prev->next = pcb->next;
 801a0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ae:	68da      	ldr	r2, [r3, #12]
 801a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0b2:	60da      	str	r2, [r3, #12]
 801a0b4:	e00f      	b.n	801a0d6 <tcp_slowtmr+0x4a2>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a0b6:	4b3d      	ldr	r3, [pc, #244]	; (801a1ac <tcp_slowtmr+0x578>)
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a0bc:	429a      	cmp	r2, r3
 801a0be:	d006      	beq.n	801a0ce <tcp_slowtmr+0x49a>
 801a0c0:	4b3b      	ldr	r3, [pc, #236]	; (801a1b0 <tcp_slowtmr+0x57c>)
 801a0c2:	f240 5271 	movw	r2, #1393	; 0x571
 801a0c6:	493d      	ldr	r1, [pc, #244]	; (801a1bc <tcp_slowtmr+0x588>)
 801a0c8:	483b      	ldr	r0, [pc, #236]	; (801a1b8 <tcp_slowtmr+0x584>)
 801a0ca:	f00a fe79 	bl	8024dc0 <iprintf>
        tcp_active_pcbs = pcb->next;
 801a0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0d0:	68db      	ldr	r3, [r3, #12]
 801a0d2:	4a36      	ldr	r2, [pc, #216]	; (801a1ac <tcp_slowtmr+0x578>)
 801a0d4:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801a0d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a0da:	2b00      	cmp	r3, #0
 801a0dc:	d013      	beq.n	801a106 <tcp_slowtmr+0x4d2>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0e4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a0e6:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a0ea:	3304      	adds	r3, #4
 801a0ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a0ee:	8ad2      	ldrh	r2, [r2, #22]
 801a0f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a0f2:	8b09      	ldrh	r1, [r1, #24]
 801a0f4:	9102      	str	r1, [sp, #8]
 801a0f6:	9201      	str	r2, [sp, #4]
 801a0f8:	9300      	str	r3, [sp, #0]
 801a0fa:	462b      	mov	r3, r5
 801a0fc:	4622      	mov	r2, r4
 801a0fe:	4601      	mov	r1, r0
 801a100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a102:	f004 fec1 	bl	801ee88 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801a106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a108:	691b      	ldr	r3, [r3, #16]
 801a10a:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a10e:	7d1b      	ldrb	r3, [r3, #20]
 801a110:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801a112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a114:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801a116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a118:	68db      	ldr	r3, [r3, #12]
 801a11a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a11c:	6838      	ldr	r0, [r7, #0]
 801a11e:	f7fe fe63 	bl	8018de8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801a122:	4b27      	ldr	r3, [pc, #156]	; (801a1c0 <tcp_slowtmr+0x58c>)
 801a124:	2200      	movs	r2, #0
 801a126:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d004      	beq.n	801a138 <tcp_slowtmr+0x504>
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	f06f 010c 	mvn.w	r1, #12
 801a134:	68b8      	ldr	r0, [r7, #8]
 801a136:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801a138:	4b21      	ldr	r3, [pc, #132]	; (801a1c0 <tcp_slowtmr+0x58c>)
 801a13a:	781b      	ldrb	r3, [r3, #0]
 801a13c:	2b00      	cmp	r3, #0
 801a13e:	d048      	beq.n	801a1d2 <tcp_slowtmr+0x59e>
        goto tcp_slowtmr_start;
 801a140:	e589      	b.n	8019c56 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801a142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a144:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a148:	68db      	ldr	r3, [r3, #12]
 801a14a:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801a14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a14e:	7f1b      	ldrb	r3, [r3, #28]
 801a150:	3301      	adds	r3, #1
 801a152:	b2da      	uxtb	r2, r3
 801a154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a156:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801a158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a15a:	7f1a      	ldrb	r2, [r3, #28]
 801a15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a15e:	7f5b      	ldrb	r3, [r3, #29]
 801a160:	429a      	cmp	r2, r3
 801a162:	d336      	bcc.n	801a1d2 <tcp_slowtmr+0x59e>
        prev->polltmr = 0;
 801a164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a166:	2200      	movs	r2, #0
 801a168:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801a16a:	4b15      	ldr	r3, [pc, #84]	; (801a1c0 <tcp_slowtmr+0x58c>)
 801a16c:	2200      	movs	r2, #0
 801a16e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a176:	2b00      	cmp	r3, #0
 801a178:	d00b      	beq.n	801a192 <tcp_slowtmr+0x55e>
 801a17a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a17c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a182:	6912      	ldr	r2, [r2, #16]
 801a184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a186:	4610      	mov	r0, r2
 801a188:	4798      	blx	r3
 801a18a:	4603      	mov	r3, r0
 801a18c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a190:	e002      	b.n	801a198 <tcp_slowtmr+0x564>
 801a192:	2300      	movs	r3, #0
 801a194:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801a198:	4b09      	ldr	r3, [pc, #36]	; (801a1c0 <tcp_slowtmr+0x58c>)
 801a19a:	781b      	ldrb	r3, [r3, #0]
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d011      	beq.n	801a1c4 <tcp_slowtmr+0x590>
          goto tcp_slowtmr_start;
 801a1a0:	e559      	b.n	8019c56 <tcp_slowtmr+0x22>
 801a1a2:	bf00      	nop
 801a1a4:	20015fd4 	.word	0x20015fd4
 801a1a8:	10624dd3 	.word	0x10624dd3
 801a1ac:	20015fe0 	.word	0x20015fe0
 801a1b0:	0802bc8c 	.word	0x0802bc8c
 801a1b4:	0802c0c4 	.word	0x0802c0c4
 801a1b8:	0802bcd0 	.word	0x0802bcd0
 801a1bc:	0802c0f0 	.word	0x0802c0f0
 801a1c0:	20015fe8 	.word	0x20015fe8
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801a1c4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d102      	bne.n	801a1d2 <tcp_slowtmr+0x59e>
          tcp_output(prev);
 801a1cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a1ce:	f004 f8a7 	bl	801e320 <tcp_output>
  while (pcb != NULL) {
 801a1d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1d4:	2b00      	cmp	r3, #0
 801a1d6:	f47f ad44 	bne.w	8019c62 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801a1da:	2300      	movs	r3, #0
 801a1dc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801a1de:	4b2f      	ldr	r3, [pc, #188]	; (801a29c <tcp_slowtmr+0x668>)
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a1e4:	e052      	b.n	801a28c <tcp_slowtmr+0x658>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1e8:	7d1b      	ldrb	r3, [r3, #20]
 801a1ea:	2b0a      	cmp	r3, #10
 801a1ec:	d006      	beq.n	801a1fc <tcp_slowtmr+0x5c8>
 801a1ee:	4b2c      	ldr	r3, [pc, #176]	; (801a2a0 <tcp_slowtmr+0x66c>)
 801a1f0:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801a1f4:	492b      	ldr	r1, [pc, #172]	; (801a2a4 <tcp_slowtmr+0x670>)
 801a1f6:	482c      	ldr	r0, [pc, #176]	; (801a2a8 <tcp_slowtmr+0x674>)
 801a1f8:	f00a fde2 	bl	8024dc0 <iprintf>
    pcb_remove = 0;
 801a1fc:	2300      	movs	r3, #0
 801a1fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a202:	4b2a      	ldr	r3, [pc, #168]	; (801a2ac <tcp_slowtmr+0x678>)
 801a204:	681a      	ldr	r2, [r3, #0]
 801a206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a208:	6a1b      	ldr	r3, [r3, #32]
 801a20a:	1ad3      	subs	r3, r2, r3
 801a20c:	2bf0      	cmp	r3, #240	; 0xf0
 801a20e:	d904      	bls.n	801a21a <tcp_slowtmr+0x5e6>
      ++pcb_remove;
 801a210:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a214:	3301      	adds	r3, #1
 801a216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a21a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d02f      	beq.n	801a282 <tcp_slowtmr+0x64e>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801a222:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a224:	f000 fc02 	bl	801aa2c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801a228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d010      	beq.n	801a250 <tcp_slowtmr+0x61c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801a22e:	4b1b      	ldr	r3, [pc, #108]	; (801a29c <tcp_slowtmr+0x668>)
 801a230:	681b      	ldr	r3, [r3, #0]
 801a232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a234:	429a      	cmp	r2, r3
 801a236:	d106      	bne.n	801a246 <tcp_slowtmr+0x612>
 801a238:	4b19      	ldr	r3, [pc, #100]	; (801a2a0 <tcp_slowtmr+0x66c>)
 801a23a:	f240 52af 	movw	r2, #1455	; 0x5af
 801a23e:	491c      	ldr	r1, [pc, #112]	; (801a2b0 <tcp_slowtmr+0x67c>)
 801a240:	4819      	ldr	r0, [pc, #100]	; (801a2a8 <tcp_slowtmr+0x674>)
 801a242:	f00a fdbd 	bl	8024dc0 <iprintf>
        prev->next = pcb->next;
 801a246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a248:	68da      	ldr	r2, [r3, #12]
 801a24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a24c:	60da      	str	r2, [r3, #12]
 801a24e:	e00f      	b.n	801a270 <tcp_slowtmr+0x63c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801a250:	4b12      	ldr	r3, [pc, #72]	; (801a29c <tcp_slowtmr+0x668>)
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a256:	429a      	cmp	r2, r3
 801a258:	d006      	beq.n	801a268 <tcp_slowtmr+0x634>
 801a25a:	4b11      	ldr	r3, [pc, #68]	; (801a2a0 <tcp_slowtmr+0x66c>)
 801a25c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801a260:	4914      	ldr	r1, [pc, #80]	; (801a2b4 <tcp_slowtmr+0x680>)
 801a262:	4811      	ldr	r0, [pc, #68]	; (801a2a8 <tcp_slowtmr+0x674>)
 801a264:	f00a fdac 	bl	8024dc0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801a268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a26a:	68db      	ldr	r3, [r3, #12]
 801a26c:	4a0b      	ldr	r2, [pc, #44]	; (801a29c <tcp_slowtmr+0x668>)
 801a26e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801a270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a272:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801a274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a276:	68db      	ldr	r3, [r3, #12]
 801a278:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a27a:	69f8      	ldr	r0, [r7, #28]
 801a27c:	f7fe fdb4 	bl	8018de8 <tcp_free>
 801a280:	e004      	b.n	801a28c <tcp_slowtmr+0x658>
    } else {
      prev = pcb;
 801a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a284:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a288:	68db      	ldr	r3, [r3, #12]
 801a28a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a28e:	2b00      	cmp	r3, #0
 801a290:	d1a9      	bne.n	801a1e6 <tcp_slowtmr+0x5b2>
    }
  }
}
 801a292:	bf00      	nop
 801a294:	bf00      	nop
 801a296:	3730      	adds	r7, #48	; 0x30
 801a298:	46bd      	mov	sp, r7
 801a29a:	bdb0      	pop	{r4, r5, r7, pc}
 801a29c:	20015fe4 	.word	0x20015fe4
 801a2a0:	0802bc8c 	.word	0x0802bc8c
 801a2a4:	0802c11c 	.word	0x0802c11c
 801a2a8:	0802bcd0 	.word	0x0802bcd0
 801a2ac:	20015fd4 	.word	0x20015fd4
 801a2b0:	0802c14c 	.word	0x0802c14c
 801a2b4:	0802c174 	.word	0x0802c174

0801a2b8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	b082      	sub	sp, #8
 801a2bc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801a2be:	4b2d      	ldr	r3, [pc, #180]	; (801a374 <tcp_fasttmr+0xbc>)
 801a2c0:	781b      	ldrb	r3, [r3, #0]
 801a2c2:	3301      	adds	r3, #1
 801a2c4:	b2da      	uxtb	r2, r3
 801a2c6:	4b2b      	ldr	r3, [pc, #172]	; (801a374 <tcp_fasttmr+0xbc>)
 801a2c8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801a2ca:	4b2b      	ldr	r3, [pc, #172]	; (801a378 <tcp_fasttmr+0xc0>)
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a2d0:	e048      	b.n	801a364 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	7f9a      	ldrb	r2, [r3, #30]
 801a2d6:	4b27      	ldr	r3, [pc, #156]	; (801a374 <tcp_fasttmr+0xbc>)
 801a2d8:	781b      	ldrb	r3, [r3, #0]
 801a2da:	429a      	cmp	r2, r3
 801a2dc:	d03f      	beq.n	801a35e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801a2de:	4b25      	ldr	r3, [pc, #148]	; (801a374 <tcp_fasttmr+0xbc>)
 801a2e0:	781a      	ldrb	r2, [r3, #0]
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	8b5b      	ldrh	r3, [r3, #26]
 801a2ea:	f003 0301 	and.w	r3, r3, #1
 801a2ee:	2b00      	cmp	r3, #0
 801a2f0:	d010      	beq.n	801a314 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801a2f2:	687b      	ldr	r3, [r7, #4]
 801a2f4:	8b5b      	ldrh	r3, [r3, #26]
 801a2f6:	f043 0302 	orr.w	r3, r3, #2
 801a2fa:	b29a      	uxth	r2, r3
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801a300:	6878      	ldr	r0, [r7, #4]
 801a302:	f004 f80d 	bl	801e320 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	8b5b      	ldrh	r3, [r3, #26]
 801a30a:	f023 0303 	bic.w	r3, r3, #3
 801a30e:	b29a      	uxth	r2, r3
 801a310:	687b      	ldr	r3, [r7, #4]
 801a312:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	8b5b      	ldrh	r3, [r3, #26]
 801a318:	f003 0308 	and.w	r3, r3, #8
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d009      	beq.n	801a334 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	8b5b      	ldrh	r3, [r3, #26]
 801a324:	f023 0308 	bic.w	r3, r3, #8
 801a328:	b29a      	uxth	r2, r3
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801a32e:	6878      	ldr	r0, [r7, #4]
 801a330:	f7fe feee 	bl	8019110 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	68db      	ldr	r3, [r3, #12]
 801a338:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d00a      	beq.n	801a358 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801a342:	4b0e      	ldr	r3, [pc, #56]	; (801a37c <tcp_fasttmr+0xc4>)
 801a344:	2200      	movs	r2, #0
 801a346:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801a348:	6878      	ldr	r0, [r7, #4]
 801a34a:	f000 f819 	bl	801a380 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a34e:	4b0b      	ldr	r3, [pc, #44]	; (801a37c <tcp_fasttmr+0xc4>)
 801a350:	781b      	ldrb	r3, [r3, #0]
 801a352:	2b00      	cmp	r3, #0
 801a354:	d000      	beq.n	801a358 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801a356:	e7b8      	b.n	801a2ca <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801a358:	683b      	ldr	r3, [r7, #0]
 801a35a:	607b      	str	r3, [r7, #4]
 801a35c:	e002      	b.n	801a364 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	68db      	ldr	r3, [r3, #12]
 801a362:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	2b00      	cmp	r3, #0
 801a368:	d1b3      	bne.n	801a2d2 <tcp_fasttmr+0x1a>
    }
  }
}
 801a36a:	bf00      	nop
 801a36c:	bf00      	nop
 801a36e:	3708      	adds	r7, #8
 801a370:	46bd      	mov	sp, r7
 801a372:	bd80      	pop	{r7, pc}
 801a374:	20015fea 	.word	0x20015fea
 801a378:	20015fe0 	.word	0x20015fe0
 801a37c:	20015fe8 	.word	0x20015fe8

0801a380 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801a380:	b590      	push	{r4, r7, lr}
 801a382:	b085      	sub	sp, #20
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	2b00      	cmp	r3, #0
 801a38c:	d109      	bne.n	801a3a2 <tcp_process_refused_data+0x22>
 801a38e:	4b37      	ldr	r3, [pc, #220]	; (801a46c <tcp_process_refused_data+0xec>)
 801a390:	f240 6209 	movw	r2, #1545	; 0x609
 801a394:	4936      	ldr	r1, [pc, #216]	; (801a470 <tcp_process_refused_data+0xf0>)
 801a396:	4837      	ldr	r0, [pc, #220]	; (801a474 <tcp_process_refused_data+0xf4>)
 801a398:	f00a fd12 	bl	8024dc0 <iprintf>
 801a39c:	f06f 030f 	mvn.w	r3, #15
 801a3a0:	e060      	b.n	801a464 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a3a6:	7b5b      	ldrb	r3, [r3, #13]
 801a3a8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a3ae:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	2200      	movs	r2, #0
 801a3b4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a3bc:	2b00      	cmp	r3, #0
 801a3be:	d00b      	beq.n	801a3d8 <tcp_process_refused_data+0x58>
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a3c6:	687b      	ldr	r3, [r7, #4]
 801a3c8:	6918      	ldr	r0, [r3, #16]
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	68ba      	ldr	r2, [r7, #8]
 801a3ce:	6879      	ldr	r1, [r7, #4]
 801a3d0:	47a0      	blx	r4
 801a3d2:	4603      	mov	r3, r0
 801a3d4:	73fb      	strb	r3, [r7, #15]
 801a3d6:	e007      	b.n	801a3e8 <tcp_process_refused_data+0x68>
 801a3d8:	2300      	movs	r3, #0
 801a3da:	68ba      	ldr	r2, [r7, #8]
 801a3dc:	6879      	ldr	r1, [r7, #4]
 801a3de:	2000      	movs	r0, #0
 801a3e0:	f000 f8a4 	bl	801a52c <tcp_recv_null>
 801a3e4:	4603      	mov	r3, r0
 801a3e6:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801a3e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d12a      	bne.n	801a446 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801a3f0:	7bbb      	ldrb	r3, [r7, #14]
 801a3f2:	f003 0320 	and.w	r3, r3, #32
 801a3f6:	2b00      	cmp	r3, #0
 801a3f8:	d033      	beq.n	801a462 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a3fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a402:	d005      	beq.n	801a410 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801a404:	687b      	ldr	r3, [r7, #4]
 801a406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a408:	3301      	adds	r3, #1
 801a40a:	b29a      	uxth	r2, r3
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801a410:	687b      	ldr	r3, [r7, #4]
 801a412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a416:	2b00      	cmp	r3, #0
 801a418:	d00b      	beq.n	801a432 <tcp_process_refused_data+0xb2>
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	6918      	ldr	r0, [r3, #16]
 801a424:	2300      	movs	r3, #0
 801a426:	2200      	movs	r2, #0
 801a428:	6879      	ldr	r1, [r7, #4]
 801a42a:	47a0      	blx	r4
 801a42c:	4603      	mov	r3, r0
 801a42e:	73fb      	strb	r3, [r7, #15]
 801a430:	e001      	b.n	801a436 <tcp_process_refused_data+0xb6>
 801a432:	2300      	movs	r3, #0
 801a434:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801a436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a43a:	f113 0f0d 	cmn.w	r3, #13
 801a43e:	d110      	bne.n	801a462 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801a440:	f06f 030c 	mvn.w	r3, #12
 801a444:	e00e      	b.n	801a464 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801a446:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a44a:	f113 0f0d 	cmn.w	r3, #13
 801a44e:	d102      	bne.n	801a456 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801a450:	f06f 030c 	mvn.w	r3, #12
 801a454:	e006      	b.n	801a464 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	68ba      	ldr	r2, [r7, #8]
 801a45a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801a45c:	f06f 0304 	mvn.w	r3, #4
 801a460:	e000      	b.n	801a464 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801a462:	2300      	movs	r3, #0
}
 801a464:	4618      	mov	r0, r3
 801a466:	3714      	adds	r7, #20
 801a468:	46bd      	mov	sp, r7
 801a46a:	bd90      	pop	{r4, r7, pc}
 801a46c:	0802bc8c 	.word	0x0802bc8c
 801a470:	0802c19c 	.word	0x0802c19c
 801a474:	0802bcd0 	.word	0x0802bcd0

0801a478 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801a478:	b580      	push	{r7, lr}
 801a47a:	b084      	sub	sp, #16
 801a47c:	af00      	add	r7, sp, #0
 801a47e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801a480:	e007      	b.n	801a492 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801a488:	6878      	ldr	r0, [r7, #4]
 801a48a:	f000 f80a 	bl	801a4a2 <tcp_seg_free>
    seg = next;
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d1f4      	bne.n	801a482 <tcp_segs_free+0xa>
  }
}
 801a498:	bf00      	nop
 801a49a:	bf00      	nop
 801a49c:	3710      	adds	r7, #16
 801a49e:	46bd      	mov	sp, r7
 801a4a0:	bd80      	pop	{r7, pc}

0801a4a2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801a4a2:	b580      	push	{r7, lr}
 801a4a4:	b082      	sub	sp, #8
 801a4a6:	af00      	add	r7, sp, #0
 801a4a8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	2b00      	cmp	r3, #0
 801a4ae:	d00c      	beq.n	801a4ca <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801a4b0:	687b      	ldr	r3, [r7, #4]
 801a4b2:	685b      	ldr	r3, [r3, #4]
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d004      	beq.n	801a4c2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	685b      	ldr	r3, [r3, #4]
 801a4bc:	4618      	mov	r0, r3
 801a4be:	f7fe f87d 	bl	80185bc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801a4c2:	6879      	ldr	r1, [r7, #4]
 801a4c4:	2003      	movs	r0, #3
 801a4c6:	f7fd f9d5 	bl	8017874 <memp_free>
  }
}
 801a4ca:	bf00      	nop
 801a4cc:	3708      	adds	r7, #8
 801a4ce:	46bd      	mov	sp, r7
 801a4d0:	bd80      	pop	{r7, pc}
	...

0801a4d4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801a4d4:	b580      	push	{r7, lr}
 801a4d6:	b084      	sub	sp, #16
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d106      	bne.n	801a4f0 <tcp_seg_copy+0x1c>
 801a4e2:	4b0f      	ldr	r3, [pc, #60]	; (801a520 <tcp_seg_copy+0x4c>)
 801a4e4:	f240 6282 	movw	r2, #1666	; 0x682
 801a4e8:	490e      	ldr	r1, [pc, #56]	; (801a524 <tcp_seg_copy+0x50>)
 801a4ea:	480f      	ldr	r0, [pc, #60]	; (801a528 <tcp_seg_copy+0x54>)
 801a4ec:	f00a fc68 	bl	8024dc0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801a4f0:	2003      	movs	r0, #3
 801a4f2:	f7fd f949 	bl	8017788 <memp_malloc>
 801a4f6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801a4f8:	68fb      	ldr	r3, [r7, #12]
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d101      	bne.n	801a502 <tcp_seg_copy+0x2e>
    return NULL;
 801a4fe:	2300      	movs	r3, #0
 801a500:	e00a      	b.n	801a518 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801a502:	2210      	movs	r2, #16
 801a504:	6879      	ldr	r1, [r7, #4]
 801a506:	68f8      	ldr	r0, [r7, #12]
 801a508:	f00c f919 	bl	802673e <memcpy>
  pbuf_ref(cseg->p);
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	685b      	ldr	r3, [r3, #4]
 801a510:	4618      	mov	r0, r3
 801a512:	f7fe f8f9 	bl	8018708 <pbuf_ref>
  return cseg;
 801a516:	68fb      	ldr	r3, [r7, #12]
}
 801a518:	4618      	mov	r0, r3
 801a51a:	3710      	adds	r7, #16
 801a51c:	46bd      	mov	sp, r7
 801a51e:	bd80      	pop	{r7, pc}
 801a520:	0802bc8c 	.word	0x0802bc8c
 801a524:	0802c1e0 	.word	0x0802c1e0
 801a528:	0802bcd0 	.word	0x0802bcd0

0801a52c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b084      	sub	sp, #16
 801a530:	af00      	add	r7, sp, #0
 801a532:	60f8      	str	r0, [r7, #12]
 801a534:	60b9      	str	r1, [r7, #8]
 801a536:	607a      	str	r2, [r7, #4]
 801a538:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801a53a:	68bb      	ldr	r3, [r7, #8]
 801a53c:	2b00      	cmp	r3, #0
 801a53e:	d109      	bne.n	801a554 <tcp_recv_null+0x28>
 801a540:	4b12      	ldr	r3, [pc, #72]	; (801a58c <tcp_recv_null+0x60>)
 801a542:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a546:	4912      	ldr	r1, [pc, #72]	; (801a590 <tcp_recv_null+0x64>)
 801a548:	4812      	ldr	r0, [pc, #72]	; (801a594 <tcp_recv_null+0x68>)
 801a54a:	f00a fc39 	bl	8024dc0 <iprintf>
 801a54e:	f06f 030f 	mvn.w	r3, #15
 801a552:	e016      	b.n	801a582 <tcp_recv_null+0x56>

  if (p != NULL) {
 801a554:	687b      	ldr	r3, [r7, #4]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d009      	beq.n	801a56e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	891b      	ldrh	r3, [r3, #8]
 801a55e:	4619      	mov	r1, r3
 801a560:	68b8      	ldr	r0, [r7, #8]
 801a562:	f7ff f981 	bl	8019868 <tcp_recved>
    pbuf_free(p);
 801a566:	6878      	ldr	r0, [r7, #4]
 801a568:	f7fe f828 	bl	80185bc <pbuf_free>
 801a56c:	e008      	b.n	801a580 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801a56e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d104      	bne.n	801a580 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801a576:	68b8      	ldr	r0, [r7, #8]
 801a578:	f7fe fe34 	bl	80191e4 <tcp_close>
 801a57c:	4603      	mov	r3, r0
 801a57e:	e000      	b.n	801a582 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801a580:	2300      	movs	r3, #0
}
 801a582:	4618      	mov	r0, r3
 801a584:	3710      	adds	r7, #16
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	0802bc8c 	.word	0x0802bc8c
 801a590:	0802c1fc 	.word	0x0802c1fc
 801a594:	0802bcd0 	.word	0x0802bcd0

0801a598 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801a598:	b580      	push	{r7, lr}
 801a59a:	b086      	sub	sp, #24
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	4603      	mov	r3, r0
 801a5a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801a5a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801a5a6:	2b00      	cmp	r3, #0
 801a5a8:	db01      	blt.n	801a5ae <tcp_kill_prio+0x16>
 801a5aa:	79fb      	ldrb	r3, [r7, #7]
 801a5ac:	e000      	b.n	801a5b0 <tcp_kill_prio+0x18>
 801a5ae:	237f      	movs	r3, #127	; 0x7f
 801a5b0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801a5b2:	7afb      	ldrb	r3, [r7, #11]
 801a5b4:	2b00      	cmp	r3, #0
 801a5b6:	d034      	beq.n	801a622 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801a5b8:	7afb      	ldrb	r3, [r7, #11]
 801a5ba:	3b01      	subs	r3, #1
 801a5bc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801a5be:	2300      	movs	r3, #0
 801a5c0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a5c2:	2300      	movs	r3, #0
 801a5c4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a5c6:	4b19      	ldr	r3, [pc, #100]	; (801a62c <tcp_kill_prio+0x94>)
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	617b      	str	r3, [r7, #20]
 801a5cc:	e01f      	b.n	801a60e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801a5ce:	697b      	ldr	r3, [r7, #20]
 801a5d0:	7d5b      	ldrb	r3, [r3, #21]
 801a5d2:	7afa      	ldrb	r2, [r7, #11]
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	d80c      	bhi.n	801a5f2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a5d8:	697b      	ldr	r3, [r7, #20]
 801a5da:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801a5dc:	7afa      	ldrb	r2, [r7, #11]
 801a5de:	429a      	cmp	r2, r3
 801a5e0:	d112      	bne.n	801a608 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a5e2:	4b13      	ldr	r3, [pc, #76]	; (801a630 <tcp_kill_prio+0x98>)
 801a5e4:	681a      	ldr	r2, [r3, #0]
 801a5e6:	697b      	ldr	r3, [r7, #20]
 801a5e8:	6a1b      	ldr	r3, [r3, #32]
 801a5ea:	1ad3      	subs	r3, r2, r3
 801a5ec:	68fa      	ldr	r2, [r7, #12]
 801a5ee:	429a      	cmp	r2, r3
 801a5f0:	d80a      	bhi.n	801a608 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801a5f2:	4b0f      	ldr	r3, [pc, #60]	; (801a630 <tcp_kill_prio+0x98>)
 801a5f4:	681a      	ldr	r2, [r3, #0]
 801a5f6:	697b      	ldr	r3, [r7, #20]
 801a5f8:	6a1b      	ldr	r3, [r3, #32]
 801a5fa:	1ad3      	subs	r3, r2, r3
 801a5fc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801a5fe:	697b      	ldr	r3, [r7, #20]
 801a600:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801a602:	697b      	ldr	r3, [r7, #20]
 801a604:	7d5b      	ldrb	r3, [r3, #21]
 801a606:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a608:	697b      	ldr	r3, [r7, #20]
 801a60a:	68db      	ldr	r3, [r3, #12]
 801a60c:	617b      	str	r3, [r7, #20]
 801a60e:	697b      	ldr	r3, [r7, #20]
 801a610:	2b00      	cmp	r3, #0
 801a612:	d1dc      	bne.n	801a5ce <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801a614:	693b      	ldr	r3, [r7, #16]
 801a616:	2b00      	cmp	r3, #0
 801a618:	d004      	beq.n	801a624 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a61a:	6938      	ldr	r0, [r7, #16]
 801a61c:	f7fe ff28 	bl	8019470 <tcp_abort>
 801a620:	e000      	b.n	801a624 <tcp_kill_prio+0x8c>
    return;
 801a622:	bf00      	nop
  }
}
 801a624:	3718      	adds	r7, #24
 801a626:	46bd      	mov	sp, r7
 801a628:	bd80      	pop	{r7, pc}
 801a62a:	bf00      	nop
 801a62c:	20015fe0 	.word	0x20015fe0
 801a630:	20015fd4 	.word	0x20015fd4

0801a634 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801a634:	b580      	push	{r7, lr}
 801a636:	b086      	sub	sp, #24
 801a638:	af00      	add	r7, sp, #0
 801a63a:	4603      	mov	r3, r0
 801a63c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801a63e:	79fb      	ldrb	r3, [r7, #7]
 801a640:	2b08      	cmp	r3, #8
 801a642:	d009      	beq.n	801a658 <tcp_kill_state+0x24>
 801a644:	79fb      	ldrb	r3, [r7, #7]
 801a646:	2b09      	cmp	r3, #9
 801a648:	d006      	beq.n	801a658 <tcp_kill_state+0x24>
 801a64a:	4b1a      	ldr	r3, [pc, #104]	; (801a6b4 <tcp_kill_state+0x80>)
 801a64c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801a650:	4919      	ldr	r1, [pc, #100]	; (801a6b8 <tcp_kill_state+0x84>)
 801a652:	481a      	ldr	r0, [pc, #104]	; (801a6bc <tcp_kill_state+0x88>)
 801a654:	f00a fbb4 	bl	8024dc0 <iprintf>

  inactivity = 0;
 801a658:	2300      	movs	r3, #0
 801a65a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801a65c:	2300      	movs	r3, #0
 801a65e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a660:	4b17      	ldr	r3, [pc, #92]	; (801a6c0 <tcp_kill_state+0x8c>)
 801a662:	681b      	ldr	r3, [r3, #0]
 801a664:	617b      	str	r3, [r7, #20]
 801a666:	e017      	b.n	801a698 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801a668:	697b      	ldr	r3, [r7, #20]
 801a66a:	7d1b      	ldrb	r3, [r3, #20]
 801a66c:	79fa      	ldrb	r2, [r7, #7]
 801a66e:	429a      	cmp	r2, r3
 801a670:	d10f      	bne.n	801a692 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a672:	4b14      	ldr	r3, [pc, #80]	; (801a6c4 <tcp_kill_state+0x90>)
 801a674:	681a      	ldr	r2, [r3, #0]
 801a676:	697b      	ldr	r3, [r7, #20]
 801a678:	6a1b      	ldr	r3, [r3, #32]
 801a67a:	1ad3      	subs	r3, r2, r3
 801a67c:	68fa      	ldr	r2, [r7, #12]
 801a67e:	429a      	cmp	r2, r3
 801a680:	d807      	bhi.n	801a692 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801a682:	4b10      	ldr	r3, [pc, #64]	; (801a6c4 <tcp_kill_state+0x90>)
 801a684:	681a      	ldr	r2, [r3, #0]
 801a686:	697b      	ldr	r3, [r7, #20]
 801a688:	6a1b      	ldr	r3, [r3, #32]
 801a68a:	1ad3      	subs	r3, r2, r3
 801a68c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801a68e:	697b      	ldr	r3, [r7, #20]
 801a690:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a692:	697b      	ldr	r3, [r7, #20]
 801a694:	68db      	ldr	r3, [r3, #12]
 801a696:	617b      	str	r3, [r7, #20]
 801a698:	697b      	ldr	r3, [r7, #20]
 801a69a:	2b00      	cmp	r3, #0
 801a69c:	d1e4      	bne.n	801a668 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801a69e:	693b      	ldr	r3, [r7, #16]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d003      	beq.n	801a6ac <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801a6a4:	2100      	movs	r1, #0
 801a6a6:	6938      	ldr	r0, [r7, #16]
 801a6a8:	f7fe fe24 	bl	80192f4 <tcp_abandon>
  }
}
 801a6ac:	bf00      	nop
 801a6ae:	3718      	adds	r7, #24
 801a6b0:	46bd      	mov	sp, r7
 801a6b2:	bd80      	pop	{r7, pc}
 801a6b4:	0802bc8c 	.word	0x0802bc8c
 801a6b8:	0802c218 	.word	0x0802c218
 801a6bc:	0802bcd0 	.word	0x0802bcd0
 801a6c0:	20015fe0 	.word	0x20015fe0
 801a6c4:	20015fd4 	.word	0x20015fd4

0801a6c8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801a6c8:	b580      	push	{r7, lr}
 801a6ca:	b084      	sub	sp, #16
 801a6cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801a6ce:	2300      	movs	r3, #0
 801a6d0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a6d6:	4b12      	ldr	r3, [pc, #72]	; (801a720 <tcp_kill_timewait+0x58>)
 801a6d8:	681b      	ldr	r3, [r3, #0]
 801a6da:	60fb      	str	r3, [r7, #12]
 801a6dc:	e012      	b.n	801a704 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a6de:	4b11      	ldr	r3, [pc, #68]	; (801a724 <tcp_kill_timewait+0x5c>)
 801a6e0:	681a      	ldr	r2, [r3, #0]
 801a6e2:	68fb      	ldr	r3, [r7, #12]
 801a6e4:	6a1b      	ldr	r3, [r3, #32]
 801a6e6:	1ad3      	subs	r3, r2, r3
 801a6e8:	687a      	ldr	r2, [r7, #4]
 801a6ea:	429a      	cmp	r2, r3
 801a6ec:	d807      	bhi.n	801a6fe <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801a6ee:	4b0d      	ldr	r3, [pc, #52]	; (801a724 <tcp_kill_timewait+0x5c>)
 801a6f0:	681a      	ldr	r2, [r3, #0]
 801a6f2:	68fb      	ldr	r3, [r7, #12]
 801a6f4:	6a1b      	ldr	r3, [r3, #32]
 801a6f6:	1ad3      	subs	r3, r2, r3
 801a6f8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801a6fa:	68fb      	ldr	r3, [r7, #12]
 801a6fc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a6fe:	68fb      	ldr	r3, [r7, #12]
 801a700:	68db      	ldr	r3, [r3, #12]
 801a702:	60fb      	str	r3, [r7, #12]
 801a704:	68fb      	ldr	r3, [r7, #12]
 801a706:	2b00      	cmp	r3, #0
 801a708:	d1e9      	bne.n	801a6de <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801a70a:	68bb      	ldr	r3, [r7, #8]
 801a70c:	2b00      	cmp	r3, #0
 801a70e:	d002      	beq.n	801a716 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801a710:	68b8      	ldr	r0, [r7, #8]
 801a712:	f7fe fead 	bl	8019470 <tcp_abort>
  }
}
 801a716:	bf00      	nop
 801a718:	3710      	adds	r7, #16
 801a71a:	46bd      	mov	sp, r7
 801a71c:	bd80      	pop	{r7, pc}
 801a71e:	bf00      	nop
 801a720:	20015fe4 	.word	0x20015fe4
 801a724:	20015fd4 	.word	0x20015fd4

0801a728 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801a728:	b580      	push	{r7, lr}
 801a72a:	b082      	sub	sp, #8
 801a72c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801a72e:	4b10      	ldr	r3, [pc, #64]	; (801a770 <tcp_handle_closepend+0x48>)
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a734:	e014      	b.n	801a760 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801a736:	687b      	ldr	r3, [r7, #4]
 801a738:	68db      	ldr	r3, [r3, #12]
 801a73a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	8b5b      	ldrh	r3, [r3, #26]
 801a740:	f003 0308 	and.w	r3, r3, #8
 801a744:	2b00      	cmp	r3, #0
 801a746:	d009      	beq.n	801a75c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	8b5b      	ldrh	r3, [r3, #26]
 801a74c:	f023 0308 	bic.w	r3, r3, #8
 801a750:	b29a      	uxth	r2, r3
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801a756:	6878      	ldr	r0, [r7, #4]
 801a758:	f7fe fcda 	bl	8019110 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801a75c:	683b      	ldr	r3, [r7, #0]
 801a75e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	2b00      	cmp	r3, #0
 801a764:	d1e7      	bne.n	801a736 <tcp_handle_closepend+0xe>
  }
}
 801a766:	bf00      	nop
 801a768:	bf00      	nop
 801a76a:	3708      	adds	r7, #8
 801a76c:	46bd      	mov	sp, r7
 801a76e:	bd80      	pop	{r7, pc}
 801a770:	20015fe0 	.word	0x20015fe0

0801a774 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801a774:	b580      	push	{r7, lr}
 801a776:	b084      	sub	sp, #16
 801a778:	af00      	add	r7, sp, #0
 801a77a:	4603      	mov	r3, r0
 801a77c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a77e:	2001      	movs	r0, #1
 801a780:	f7fd f802 	bl	8017788 <memp_malloc>
 801a784:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801a786:	68fb      	ldr	r3, [r7, #12]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d126      	bne.n	801a7da <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801a78c:	f7ff ffcc 	bl	801a728 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801a790:	f7ff ff9a 	bl	801a6c8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a794:	2001      	movs	r0, #1
 801a796:	f7fc fff7 	bl	8017788 <memp_malloc>
 801a79a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801a79c:	68fb      	ldr	r3, [r7, #12]
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	d11b      	bne.n	801a7da <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801a7a2:	2009      	movs	r0, #9
 801a7a4:	f7ff ff46 	bl	801a634 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a7a8:	2001      	movs	r0, #1
 801a7aa:	f7fc ffed 	bl	8017788 <memp_malloc>
 801a7ae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801a7b0:	68fb      	ldr	r3, [r7, #12]
 801a7b2:	2b00      	cmp	r3, #0
 801a7b4:	d111      	bne.n	801a7da <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801a7b6:	2008      	movs	r0, #8
 801a7b8:	f7ff ff3c 	bl	801a634 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a7bc:	2001      	movs	r0, #1
 801a7be:	f7fc ffe3 	bl	8017788 <memp_malloc>
 801a7c2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801a7c4:	68fb      	ldr	r3, [r7, #12]
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d107      	bne.n	801a7da <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801a7ca:	79fb      	ldrb	r3, [r7, #7]
 801a7cc:	4618      	mov	r0, r3
 801a7ce:	f7ff fee3 	bl	801a598 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a7d2:	2001      	movs	r0, #1
 801a7d4:	f7fc ffd8 	bl	8017788 <memp_malloc>
 801a7d8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	2b00      	cmp	r3, #0
 801a7de:	d047      	beq.n	801a870 <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801a7e0:	22a4      	movs	r2, #164	; 0xa4
 801a7e2:	2100      	movs	r1, #0
 801a7e4:	68f8      	ldr	r0, [r7, #12]
 801a7e6:	f00a fcb1 	bl	802514c <memset>
    pcb->prio = prio;
 801a7ea:	68fb      	ldr	r3, [r7, #12]
 801a7ec:	79fa      	ldrb	r2, [r7, #7]
 801a7ee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a7f6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a7fa:	68fb      	ldr	r3, [r7, #12]
 801a7fc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a800:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a802:	68fb      	ldr	r3, [r7, #12]
 801a804:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a806:	68fb      	ldr	r3, [r7, #12]
 801a808:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801a80a:	68fb      	ldr	r3, [r7, #12]
 801a80c:	22ff      	movs	r2, #255	; 0xff
 801a80e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801a810:	68fb      	ldr	r3, [r7, #12]
 801a812:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a816:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	2206      	movs	r2, #6
 801a81c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801a820:	68fb      	ldr	r3, [r7, #12]
 801a822:	2206      	movs	r2, #6
 801a824:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801a826:	68fb      	ldr	r3, [r7, #12]
 801a828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801a82c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801a82e:	68fb      	ldr	r3, [r7, #12]
 801a830:	2201      	movs	r2, #1
 801a832:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801a836:	4b11      	ldr	r3, [pc, #68]	; (801a87c <tcp_alloc+0x108>)
 801a838:	681a      	ldr	r2, [r3, #0]
 801a83a:	68fb      	ldr	r3, [r7, #12]
 801a83c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801a83e:	4b10      	ldr	r3, [pc, #64]	; (801a880 <tcp_alloc+0x10c>)
 801a840:	781a      	ldrb	r2, [r3, #0]
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801a84c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801a850:	68fb      	ldr	r3, [r7, #12]
 801a852:	4a0c      	ldr	r2, [pc, #48]	; (801a884 <tcp_alloc+0x110>)
 801a854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801a858:	68fb      	ldr	r3, [r7, #12]
 801a85a:	4a0b      	ldr	r2, [pc, #44]	; (801a888 <tcp_alloc+0x114>)
 801a85c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 801a860:	68fb      	ldr	r3, [r7, #12]
 801a862:	4a0a      	ldr	r2, [pc, #40]	; (801a88c <tcp_alloc+0x118>)
 801a864:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	2209      	movs	r2, #9
 801a86c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801a870:	68fb      	ldr	r3, [r7, #12]
}
 801a872:	4618      	mov	r0, r3
 801a874:	3710      	adds	r7, #16
 801a876:	46bd      	mov	sp, r7
 801a878:	bd80      	pop	{r7, pc}
 801a87a:	bf00      	nop
 801a87c:	20015fd4 	.word	0x20015fd4
 801a880:	20015fea 	.word	0x20015fea
 801a884:	0801a52d 	.word	0x0801a52d
 801a888:	006ddd00 	.word	0x006ddd00
 801a88c:	000124f8 	.word	0x000124f8

0801a890 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801a890:	b580      	push	{r7, lr}
 801a892:	b084      	sub	sp, #16
 801a894:	af00      	add	r7, sp, #0
 801a896:	4603      	mov	r3, r0
 801a898:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801a89a:	2040      	movs	r0, #64	; 0x40
 801a89c:	f7ff ff6a 	bl	801a774 <tcp_alloc>
 801a8a0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a8a2:	68fb      	ldr	r3, [r7, #12]
}
 801a8a4:	4618      	mov	r0, r3
 801a8a6:	3710      	adds	r7, #16
 801a8a8:	46bd      	mov	sp, r7
 801a8aa:	bd80      	pop	{r7, pc}

0801a8ac <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801a8ac:	b480      	push	{r7}
 801a8ae:	b083      	sub	sp, #12
 801a8b0:	af00      	add	r7, sp, #0
 801a8b2:	6078      	str	r0, [r7, #4]
 801a8b4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d002      	beq.n	801a8c2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	683a      	ldr	r2, [r7, #0]
 801a8c0:	611a      	str	r2, [r3, #16]
  }
}
 801a8c2:	bf00      	nop
 801a8c4:	370c      	adds	r7, #12
 801a8c6:	46bd      	mov	sp, r7
 801a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8cc:	4770      	bx	lr
	...

0801a8d0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b082      	sub	sp, #8
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	6078      	str	r0, [r7, #4]
 801a8d8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d00e      	beq.n	801a8fe <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	7d1b      	ldrb	r3, [r3, #20]
 801a8e4:	2b01      	cmp	r3, #1
 801a8e6:	d106      	bne.n	801a8f6 <tcp_recv+0x26>
 801a8e8:	4b07      	ldr	r3, [pc, #28]	; (801a908 <tcp_recv+0x38>)
 801a8ea:	f240 72df 	movw	r2, #2015	; 0x7df
 801a8ee:	4907      	ldr	r1, [pc, #28]	; (801a90c <tcp_recv+0x3c>)
 801a8f0:	4807      	ldr	r0, [pc, #28]	; (801a910 <tcp_recv+0x40>)
 801a8f2:	f00a fa65 	bl	8024dc0 <iprintf>
    pcb->recv = recv;
 801a8f6:	687b      	ldr	r3, [r7, #4]
 801a8f8:	683a      	ldr	r2, [r7, #0]
 801a8fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801a8fe:	bf00      	nop
 801a900:	3708      	adds	r7, #8
 801a902:	46bd      	mov	sp, r7
 801a904:	bd80      	pop	{r7, pc}
 801a906:	bf00      	nop
 801a908:	0802bc8c 	.word	0x0802bc8c
 801a90c:	0802c228 	.word	0x0802c228
 801a910:	0802bcd0 	.word	0x0802bcd0

0801a914 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801a914:	b580      	push	{r7, lr}
 801a916:	b082      	sub	sp, #8
 801a918:	af00      	add	r7, sp, #0
 801a91a:	6078      	str	r0, [r7, #4]
 801a91c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d00e      	beq.n	801a942 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	7d1b      	ldrb	r3, [r3, #20]
 801a928:	2b01      	cmp	r3, #1
 801a92a:	d106      	bne.n	801a93a <tcp_sent+0x26>
 801a92c:	4b07      	ldr	r3, [pc, #28]	; (801a94c <tcp_sent+0x38>)
 801a92e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801a932:	4907      	ldr	r1, [pc, #28]	; (801a950 <tcp_sent+0x3c>)
 801a934:	4807      	ldr	r0, [pc, #28]	; (801a954 <tcp_sent+0x40>)
 801a936:	f00a fa43 	bl	8024dc0 <iprintf>
    pcb->sent = sent;
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	683a      	ldr	r2, [r7, #0]
 801a93e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801a942:	bf00      	nop
 801a944:	3708      	adds	r7, #8
 801a946:	46bd      	mov	sp, r7
 801a948:	bd80      	pop	{r7, pc}
 801a94a:	bf00      	nop
 801a94c:	0802bc8c 	.word	0x0802bc8c
 801a950:	0802c250 	.word	0x0802c250
 801a954:	0802bcd0 	.word	0x0802bcd0

0801a958 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801a958:	b580      	push	{r7, lr}
 801a95a:	b082      	sub	sp, #8
 801a95c:	af00      	add	r7, sp, #0
 801a95e:	6078      	str	r0, [r7, #4]
 801a960:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	2b00      	cmp	r3, #0
 801a966:	d00e      	beq.n	801a986 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	7d1b      	ldrb	r3, [r3, #20]
 801a96c:	2b01      	cmp	r3, #1
 801a96e:	d106      	bne.n	801a97e <tcp_err+0x26>
 801a970:	4b07      	ldr	r3, [pc, #28]	; (801a990 <tcp_err+0x38>)
 801a972:	f640 020d 	movw	r2, #2061	; 0x80d
 801a976:	4907      	ldr	r1, [pc, #28]	; (801a994 <tcp_err+0x3c>)
 801a978:	4807      	ldr	r0, [pc, #28]	; (801a998 <tcp_err+0x40>)
 801a97a:	f00a fa21 	bl	8024dc0 <iprintf>
    pcb->errf = err;
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	683a      	ldr	r2, [r7, #0]
 801a982:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801a986:	bf00      	nop
 801a988:	3708      	adds	r7, #8
 801a98a:	46bd      	mov	sp, r7
 801a98c:	bd80      	pop	{r7, pc}
 801a98e:	bf00      	nop
 801a990:	0802bc8c 	.word	0x0802bc8c
 801a994:	0802c278 	.word	0x0802c278
 801a998:	0802bcd0 	.word	0x0802bcd0

0801a99c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801a99c:	b480      	push	{r7}
 801a99e:	b085      	sub	sp, #20
 801a9a0:	af00      	add	r7, sp, #0
 801a9a2:	6078      	str	r0, [r7, #4]
 801a9a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	2b00      	cmp	r3, #0
 801a9aa:	d008      	beq.n	801a9be <tcp_accept+0x22>
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	7d1b      	ldrb	r3, [r3, #20]
 801a9b0:	2b01      	cmp	r3, #1
 801a9b2:	d104      	bne.n	801a9be <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801a9b8:	68fb      	ldr	r3, [r7, #12]
 801a9ba:	683a      	ldr	r2, [r7, #0]
 801a9bc:	619a      	str	r2, [r3, #24]
  }
}
 801a9be:	bf00      	nop
 801a9c0:	3714      	adds	r7, #20
 801a9c2:	46bd      	mov	sp, r7
 801a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9c8:	4770      	bx	lr
	...

0801a9cc <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801a9cc:	b580      	push	{r7, lr}
 801a9ce:	b084      	sub	sp, #16
 801a9d0:	af00      	add	r7, sp, #0
 801a9d2:	60f8      	str	r0, [r7, #12]
 801a9d4:	60b9      	str	r1, [r7, #8]
 801a9d6:	4613      	mov	r3, r2
 801a9d8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	2b00      	cmp	r3, #0
 801a9de:	d107      	bne.n	801a9f0 <tcp_poll+0x24>
 801a9e0:	4b0e      	ldr	r3, [pc, #56]	; (801aa1c <tcp_poll+0x50>)
 801a9e2:	f640 023d 	movw	r2, #2109	; 0x83d
 801a9e6:	490e      	ldr	r1, [pc, #56]	; (801aa20 <tcp_poll+0x54>)
 801a9e8:	480e      	ldr	r0, [pc, #56]	; (801aa24 <tcp_poll+0x58>)
 801a9ea:	f00a f9e9 	bl	8024dc0 <iprintf>
 801a9ee:	e011      	b.n	801aa14 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	7d1b      	ldrb	r3, [r3, #20]
 801a9f4:	2b01      	cmp	r3, #1
 801a9f6:	d106      	bne.n	801aa06 <tcp_poll+0x3a>
 801a9f8:	4b08      	ldr	r3, [pc, #32]	; (801aa1c <tcp_poll+0x50>)
 801a9fa:	f640 023e 	movw	r2, #2110	; 0x83e
 801a9fe:	490a      	ldr	r1, [pc, #40]	; (801aa28 <tcp_poll+0x5c>)
 801aa00:	4808      	ldr	r0, [pc, #32]	; (801aa24 <tcp_poll+0x58>)
 801aa02:	f00a f9dd 	bl	8024dc0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801aa06:	68fb      	ldr	r3, [r7, #12]
 801aa08:	68ba      	ldr	r2, [r7, #8]
 801aa0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	79fa      	ldrb	r2, [r7, #7]
 801aa12:	775a      	strb	r2, [r3, #29]
}
 801aa14:	3710      	adds	r7, #16
 801aa16:	46bd      	mov	sp, r7
 801aa18:	bd80      	pop	{r7, pc}
 801aa1a:	bf00      	nop
 801aa1c:	0802bc8c 	.word	0x0802bc8c
 801aa20:	0802c2a0 	.word	0x0802c2a0
 801aa24:	0802bcd0 	.word	0x0802bcd0
 801aa28:	0802c2b8 	.word	0x0802c2b8

0801aa2c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801aa2c:	b580      	push	{r7, lr}
 801aa2e:	b082      	sub	sp, #8
 801aa30:	af00      	add	r7, sp, #0
 801aa32:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	2b00      	cmp	r3, #0
 801aa38:	d107      	bne.n	801aa4a <tcp_pcb_purge+0x1e>
 801aa3a:	4b21      	ldr	r3, [pc, #132]	; (801aac0 <tcp_pcb_purge+0x94>)
 801aa3c:	f640 0251 	movw	r2, #2129	; 0x851
 801aa40:	4920      	ldr	r1, [pc, #128]	; (801aac4 <tcp_pcb_purge+0x98>)
 801aa42:	4821      	ldr	r0, [pc, #132]	; (801aac8 <tcp_pcb_purge+0x9c>)
 801aa44:	f00a f9bc 	bl	8024dc0 <iprintf>
 801aa48:	e037      	b.n	801aaba <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801aa4a:	687b      	ldr	r3, [r7, #4]
 801aa4c:	7d1b      	ldrb	r3, [r3, #20]
 801aa4e:	2b00      	cmp	r3, #0
 801aa50:	d033      	beq.n	801aaba <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801aa52:	687b      	ldr	r3, [r7, #4]
 801aa54:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801aa56:	2b0a      	cmp	r3, #10
 801aa58:	d02f      	beq.n	801aaba <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801aa5e:	2b01      	cmp	r3, #1
 801aa60:	d02b      	beq.n	801aaba <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801aa62:	687b      	ldr	r3, [r7, #4]
 801aa64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa66:	2b00      	cmp	r3, #0
 801aa68:	d007      	beq.n	801aa7a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801aa6e:	4618      	mov	r0, r3
 801aa70:	f7fd fda4 	bl	80185bc <pbuf_free>
      pcb->refused_data = NULL;
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	2200      	movs	r2, #0
 801aa78:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801aa7a:	687b      	ldr	r3, [r7, #4]
 801aa7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d002      	beq.n	801aa88 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801aa82:	6878      	ldr	r0, [r7, #4]
 801aa84:	f000 f986 	bl	801ad94 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801aa8e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801aa94:	4618      	mov	r0, r3
 801aa96:	f7ff fcef 	bl	801a478 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	f7ff fcea 	bl	801a478 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	2200      	movs	r2, #0
 801aaa8:	66da      	str	r2, [r3, #108]	; 0x6c
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801aab2:	687b      	ldr	r3, [r7, #4]
 801aab4:	2200      	movs	r2, #0
 801aab6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801aaba:	3708      	adds	r7, #8
 801aabc:	46bd      	mov	sp, r7
 801aabe:	bd80      	pop	{r7, pc}
 801aac0:	0802bc8c 	.word	0x0802bc8c
 801aac4:	0802c2d8 	.word	0x0802c2d8
 801aac8:	0802bcd0 	.word	0x0802bcd0

0801aacc <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b084      	sub	sp, #16
 801aad0:	af00      	add	r7, sp, #0
 801aad2:	6078      	str	r0, [r7, #4]
 801aad4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801aad6:	683b      	ldr	r3, [r7, #0]
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d106      	bne.n	801aaea <tcp_pcb_remove+0x1e>
 801aadc:	4b3e      	ldr	r3, [pc, #248]	; (801abd8 <tcp_pcb_remove+0x10c>)
 801aade:	f640 0283 	movw	r2, #2179	; 0x883
 801aae2:	493e      	ldr	r1, [pc, #248]	; (801abdc <tcp_pcb_remove+0x110>)
 801aae4:	483e      	ldr	r0, [pc, #248]	; (801abe0 <tcp_pcb_remove+0x114>)
 801aae6:	f00a f96b 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d106      	bne.n	801aafe <tcp_pcb_remove+0x32>
 801aaf0:	4b39      	ldr	r3, [pc, #228]	; (801abd8 <tcp_pcb_remove+0x10c>)
 801aaf2:	f640 0284 	movw	r2, #2180	; 0x884
 801aaf6:	493b      	ldr	r1, [pc, #236]	; (801abe4 <tcp_pcb_remove+0x118>)
 801aaf8:	4839      	ldr	r0, [pc, #228]	; (801abe0 <tcp_pcb_remove+0x114>)
 801aafa:	f00a f961 	bl	8024dc0 <iprintf>

  TCP_RMV(pcblist, pcb);
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	683a      	ldr	r2, [r7, #0]
 801ab04:	429a      	cmp	r2, r3
 801ab06:	d105      	bne.n	801ab14 <tcp_pcb_remove+0x48>
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	68da      	ldr	r2, [r3, #12]
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	601a      	str	r2, [r3, #0]
 801ab12:	e013      	b.n	801ab3c <tcp_pcb_remove+0x70>
 801ab14:	687b      	ldr	r3, [r7, #4]
 801ab16:	681b      	ldr	r3, [r3, #0]
 801ab18:	60fb      	str	r3, [r7, #12]
 801ab1a:	e00c      	b.n	801ab36 <tcp_pcb_remove+0x6a>
 801ab1c:	68fb      	ldr	r3, [r7, #12]
 801ab1e:	68db      	ldr	r3, [r3, #12]
 801ab20:	683a      	ldr	r2, [r7, #0]
 801ab22:	429a      	cmp	r2, r3
 801ab24:	d104      	bne.n	801ab30 <tcp_pcb_remove+0x64>
 801ab26:	683b      	ldr	r3, [r7, #0]
 801ab28:	68da      	ldr	r2, [r3, #12]
 801ab2a:	68fb      	ldr	r3, [r7, #12]
 801ab2c:	60da      	str	r2, [r3, #12]
 801ab2e:	e005      	b.n	801ab3c <tcp_pcb_remove+0x70>
 801ab30:	68fb      	ldr	r3, [r7, #12]
 801ab32:	68db      	ldr	r3, [r3, #12]
 801ab34:	60fb      	str	r3, [r7, #12]
 801ab36:	68fb      	ldr	r3, [r7, #12]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d1ef      	bne.n	801ab1c <tcp_pcb_remove+0x50>
 801ab3c:	683b      	ldr	r3, [r7, #0]
 801ab3e:	2200      	movs	r2, #0
 801ab40:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801ab42:	6838      	ldr	r0, [r7, #0]
 801ab44:	f7ff ff72 	bl	801aa2c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801ab48:	683b      	ldr	r3, [r7, #0]
 801ab4a:	7d1b      	ldrb	r3, [r3, #20]
 801ab4c:	2b0a      	cmp	r3, #10
 801ab4e:	d013      	beq.n	801ab78 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801ab50:	683b      	ldr	r3, [r7, #0]
 801ab52:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801ab54:	2b01      	cmp	r3, #1
 801ab56:	d00f      	beq.n	801ab78 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801ab58:	683b      	ldr	r3, [r7, #0]
 801ab5a:	8b5b      	ldrh	r3, [r3, #26]
 801ab5c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801ab60:	2b00      	cmp	r3, #0
 801ab62:	d009      	beq.n	801ab78 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801ab64:	683b      	ldr	r3, [r7, #0]
 801ab66:	8b5b      	ldrh	r3, [r3, #26]
 801ab68:	f043 0302 	orr.w	r3, r3, #2
 801ab6c:	b29a      	uxth	r2, r3
 801ab6e:	683b      	ldr	r3, [r7, #0]
 801ab70:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801ab72:	6838      	ldr	r0, [r7, #0]
 801ab74:	f003 fbd4 	bl	801e320 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801ab78:	683b      	ldr	r3, [r7, #0]
 801ab7a:	7d1b      	ldrb	r3, [r3, #20]
 801ab7c:	2b01      	cmp	r3, #1
 801ab7e:	d020      	beq.n	801abc2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801ab80:	683b      	ldr	r3, [r7, #0]
 801ab82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d006      	beq.n	801ab96 <tcp_pcb_remove+0xca>
 801ab88:	4b13      	ldr	r3, [pc, #76]	; (801abd8 <tcp_pcb_remove+0x10c>)
 801ab8a:	f640 0293 	movw	r2, #2195	; 0x893
 801ab8e:	4916      	ldr	r1, [pc, #88]	; (801abe8 <tcp_pcb_remove+0x11c>)
 801ab90:	4813      	ldr	r0, [pc, #76]	; (801abe0 <tcp_pcb_remove+0x114>)
 801ab92:	f00a f915 	bl	8024dc0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801ab96:	683b      	ldr	r3, [r7, #0]
 801ab98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d006      	beq.n	801abac <tcp_pcb_remove+0xe0>
 801ab9e:	4b0e      	ldr	r3, [pc, #56]	; (801abd8 <tcp_pcb_remove+0x10c>)
 801aba0:	f640 0294 	movw	r2, #2196	; 0x894
 801aba4:	4911      	ldr	r1, [pc, #68]	; (801abec <tcp_pcb_remove+0x120>)
 801aba6:	480e      	ldr	r0, [pc, #56]	; (801abe0 <tcp_pcb_remove+0x114>)
 801aba8:	f00a f90a 	bl	8024dc0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801abac:	683b      	ldr	r3, [r7, #0]
 801abae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d006      	beq.n	801abc2 <tcp_pcb_remove+0xf6>
 801abb4:	4b08      	ldr	r3, [pc, #32]	; (801abd8 <tcp_pcb_remove+0x10c>)
 801abb6:	f640 0296 	movw	r2, #2198	; 0x896
 801abba:	490d      	ldr	r1, [pc, #52]	; (801abf0 <tcp_pcb_remove+0x124>)
 801abbc:	4808      	ldr	r0, [pc, #32]	; (801abe0 <tcp_pcb_remove+0x114>)
 801abbe:	f00a f8ff 	bl	8024dc0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801abc2:	683b      	ldr	r3, [r7, #0]
 801abc4:	2200      	movs	r2, #0
 801abc6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801abc8:	683b      	ldr	r3, [r7, #0]
 801abca:	2200      	movs	r2, #0
 801abcc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801abce:	bf00      	nop
 801abd0:	3710      	adds	r7, #16
 801abd2:	46bd      	mov	sp, r7
 801abd4:	bd80      	pop	{r7, pc}
 801abd6:	bf00      	nop
 801abd8:	0802bc8c 	.word	0x0802bc8c
 801abdc:	0802c2f4 	.word	0x0802c2f4
 801abe0:	0802bcd0 	.word	0x0802bcd0
 801abe4:	0802c310 	.word	0x0802c310
 801abe8:	0802c330 	.word	0x0802c330
 801abec:	0802c348 	.word	0x0802c348
 801abf0:	0802c364 	.word	0x0802c364

0801abf4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801abf4:	b580      	push	{r7, lr}
 801abf6:	b082      	sub	sp, #8
 801abf8:	af00      	add	r7, sp, #0
 801abfa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	2b00      	cmp	r3, #0
 801ac00:	d106      	bne.n	801ac10 <tcp_next_iss+0x1c>
 801ac02:	4b0a      	ldr	r3, [pc, #40]	; (801ac2c <tcp_next_iss+0x38>)
 801ac04:	f640 02af 	movw	r2, #2223	; 0x8af
 801ac08:	4909      	ldr	r1, [pc, #36]	; (801ac30 <tcp_next_iss+0x3c>)
 801ac0a:	480a      	ldr	r0, [pc, #40]	; (801ac34 <tcp_next_iss+0x40>)
 801ac0c:	f00a f8d8 	bl	8024dc0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801ac10:	4b09      	ldr	r3, [pc, #36]	; (801ac38 <tcp_next_iss+0x44>)
 801ac12:	681a      	ldr	r2, [r3, #0]
 801ac14:	4b09      	ldr	r3, [pc, #36]	; (801ac3c <tcp_next_iss+0x48>)
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	4413      	add	r3, r2
 801ac1a:	4a07      	ldr	r2, [pc, #28]	; (801ac38 <tcp_next_iss+0x44>)
 801ac1c:	6013      	str	r3, [r2, #0]
  return iss;
 801ac1e:	4b06      	ldr	r3, [pc, #24]	; (801ac38 <tcp_next_iss+0x44>)
 801ac20:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801ac22:	4618      	mov	r0, r3
 801ac24:	3708      	adds	r7, #8
 801ac26:	46bd      	mov	sp, r7
 801ac28:	bd80      	pop	{r7, pc}
 801ac2a:	bf00      	nop
 801ac2c:	0802bc8c 	.word	0x0802bc8c
 801ac30:	0802c37c 	.word	0x0802c37c
 801ac34:	0802bcd0 	.word	0x0802bcd0
 801ac38:	20000030 	.word	0x20000030
 801ac3c:	20015fd4 	.word	0x20015fd4

0801ac40 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801ac40:	b580      	push	{r7, lr}
 801ac42:	b086      	sub	sp, #24
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	4603      	mov	r3, r0
 801ac48:	60b9      	str	r1, [r7, #8]
 801ac4a:	607a      	str	r2, [r7, #4]
 801ac4c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d106      	bne.n	801ac62 <tcp_eff_send_mss_netif+0x22>
 801ac54:	4b14      	ldr	r3, [pc, #80]	; (801aca8 <tcp_eff_send_mss_netif+0x68>)
 801ac56:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801ac5a:	4914      	ldr	r1, [pc, #80]	; (801acac <tcp_eff_send_mss_netif+0x6c>)
 801ac5c:	4814      	ldr	r0, [pc, #80]	; (801acb0 <tcp_eff_send_mss_netif+0x70>)
 801ac5e:	f00a f8af 	bl	8024dc0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801ac62:	68bb      	ldr	r3, [r7, #8]
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d101      	bne.n	801ac6c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801ac68:	89fb      	ldrh	r3, [r7, #14]
 801ac6a:	e019      	b.n	801aca0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801ac6c:	68bb      	ldr	r3, [r7, #8]
 801ac6e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ac70:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801ac72:	8afb      	ldrh	r3, [r7, #22]
 801ac74:	2b00      	cmp	r3, #0
 801ac76:	d012      	beq.n	801ac9e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801ac78:	2328      	movs	r3, #40	; 0x28
 801ac7a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801ac7c:	8afa      	ldrh	r2, [r7, #22]
 801ac7e:	8abb      	ldrh	r3, [r7, #20]
 801ac80:	429a      	cmp	r2, r3
 801ac82:	d904      	bls.n	801ac8e <tcp_eff_send_mss_netif+0x4e>
 801ac84:	8afa      	ldrh	r2, [r7, #22]
 801ac86:	8abb      	ldrh	r3, [r7, #20]
 801ac88:	1ad3      	subs	r3, r2, r3
 801ac8a:	b29b      	uxth	r3, r3
 801ac8c:	e000      	b.n	801ac90 <tcp_eff_send_mss_netif+0x50>
 801ac8e:	2300      	movs	r3, #0
 801ac90:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801ac92:	8a7a      	ldrh	r2, [r7, #18]
 801ac94:	89fb      	ldrh	r3, [r7, #14]
 801ac96:	4293      	cmp	r3, r2
 801ac98:	bf28      	it	cs
 801ac9a:	4613      	movcs	r3, r2
 801ac9c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801ac9e:	89fb      	ldrh	r3, [r7, #14]
}
 801aca0:	4618      	mov	r0, r3
 801aca2:	3718      	adds	r7, #24
 801aca4:	46bd      	mov	sp, r7
 801aca6:	bd80      	pop	{r7, pc}
 801aca8:	0802bc8c 	.word	0x0802bc8c
 801acac:	0802c398 	.word	0x0802c398
 801acb0:	0802bcd0 	.word	0x0802bcd0

0801acb4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801acb4:	b580      	push	{r7, lr}
 801acb6:	b084      	sub	sp, #16
 801acb8:	af00      	add	r7, sp, #0
 801acba:	6078      	str	r0, [r7, #4]
 801acbc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801acbe:	683b      	ldr	r3, [r7, #0]
 801acc0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	2b00      	cmp	r3, #0
 801acc6:	d119      	bne.n	801acfc <tcp_netif_ip_addr_changed_pcblist+0x48>
 801acc8:	4b10      	ldr	r3, [pc, #64]	; (801ad0c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801acca:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801acce:	4910      	ldr	r1, [pc, #64]	; (801ad10 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801acd0:	4810      	ldr	r0, [pc, #64]	; (801ad14 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801acd2:	f00a f875 	bl	8024dc0 <iprintf>

  while (pcb != NULL) {
 801acd6:	e011      	b.n	801acfc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801acd8:	68fb      	ldr	r3, [r7, #12]
 801acda:	681a      	ldr	r2, [r3, #0]
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	681b      	ldr	r3, [r3, #0]
 801ace0:	429a      	cmp	r2, r3
 801ace2:	d108      	bne.n	801acf6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	68db      	ldr	r3, [r3, #12]
 801ace8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801acea:	68f8      	ldr	r0, [r7, #12]
 801acec:	f7fe fbc0 	bl	8019470 <tcp_abort>
      pcb = next;
 801acf0:	68bb      	ldr	r3, [r7, #8]
 801acf2:	60fb      	str	r3, [r7, #12]
 801acf4:	e002      	b.n	801acfc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	68db      	ldr	r3, [r3, #12]
 801acfa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801acfc:	68fb      	ldr	r3, [r7, #12]
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	d1ea      	bne.n	801acd8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801ad02:	bf00      	nop
 801ad04:	bf00      	nop
 801ad06:	3710      	adds	r7, #16
 801ad08:	46bd      	mov	sp, r7
 801ad0a:	bd80      	pop	{r7, pc}
 801ad0c:	0802bc8c 	.word	0x0802bc8c
 801ad10:	0802c3c0 	.word	0x0802c3c0
 801ad14:	0802bcd0 	.word	0x0802bcd0

0801ad18 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ad18:	b580      	push	{r7, lr}
 801ad1a:	b084      	sub	sp, #16
 801ad1c:	af00      	add	r7, sp, #0
 801ad1e:	6078      	str	r0, [r7, #4]
 801ad20:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d02a      	beq.n	801ad7e <tcp_netif_ip_addr_changed+0x66>
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	d026      	beq.n	801ad7e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801ad30:	4b15      	ldr	r3, [pc, #84]	; (801ad88 <tcp_netif_ip_addr_changed+0x70>)
 801ad32:	681b      	ldr	r3, [r3, #0]
 801ad34:	4619      	mov	r1, r3
 801ad36:	6878      	ldr	r0, [r7, #4]
 801ad38:	f7ff ffbc 	bl	801acb4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801ad3c:	4b13      	ldr	r3, [pc, #76]	; (801ad8c <tcp_netif_ip_addr_changed+0x74>)
 801ad3e:	681b      	ldr	r3, [r3, #0]
 801ad40:	4619      	mov	r1, r3
 801ad42:	6878      	ldr	r0, [r7, #4]
 801ad44:	f7ff ffb6 	bl	801acb4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801ad48:	683b      	ldr	r3, [r7, #0]
 801ad4a:	2b00      	cmp	r3, #0
 801ad4c:	d017      	beq.n	801ad7e <tcp_netif_ip_addr_changed+0x66>
 801ad4e:	683b      	ldr	r3, [r7, #0]
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	2b00      	cmp	r3, #0
 801ad54:	d013      	beq.n	801ad7e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ad56:	4b0e      	ldr	r3, [pc, #56]	; (801ad90 <tcp_netif_ip_addr_changed+0x78>)
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	60fb      	str	r3, [r7, #12]
 801ad5c:	e00c      	b.n	801ad78 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801ad5e:	68fb      	ldr	r3, [r7, #12]
 801ad60:	681a      	ldr	r2, [r3, #0]
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	681b      	ldr	r3, [r3, #0]
 801ad66:	429a      	cmp	r2, r3
 801ad68:	d103      	bne.n	801ad72 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801ad6a:	683b      	ldr	r3, [r7, #0]
 801ad6c:	681a      	ldr	r2, [r3, #0]
 801ad6e:	68fb      	ldr	r3, [r7, #12]
 801ad70:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ad72:	68fb      	ldr	r3, [r7, #12]
 801ad74:	68db      	ldr	r3, [r3, #12]
 801ad76:	60fb      	str	r3, [r7, #12]
 801ad78:	68fb      	ldr	r3, [r7, #12]
 801ad7a:	2b00      	cmp	r3, #0
 801ad7c:	d1ef      	bne.n	801ad5e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801ad7e:	bf00      	nop
 801ad80:	3710      	adds	r7, #16
 801ad82:	46bd      	mov	sp, r7
 801ad84:	bd80      	pop	{r7, pc}
 801ad86:	bf00      	nop
 801ad88:	20015fe0 	.word	0x20015fe0
 801ad8c:	20015fd8 	.word	0x20015fd8
 801ad90:	20015fdc 	.word	0x20015fdc

0801ad94 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801ad94:	b580      	push	{r7, lr}
 801ad96:	b082      	sub	sp, #8
 801ad98:	af00      	add	r7, sp, #0
 801ad9a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	d007      	beq.n	801adb4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801ada4:	687b      	ldr	r3, [r7, #4]
 801ada6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ada8:	4618      	mov	r0, r3
 801adaa:	f7ff fb65 	bl	801a478 <tcp_segs_free>
    pcb->ooseq = NULL;
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	2200      	movs	r2, #0
 801adb2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801adb4:	bf00      	nop
 801adb6:	3708      	adds	r7, #8
 801adb8:	46bd      	mov	sp, r7
 801adba:	bd80      	pop	{r7, pc}

0801adbc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801adbc:	b590      	push	{r4, r7, lr}
 801adbe:	b08f      	sub	sp, #60	; 0x3c
 801adc0:	af04      	add	r7, sp, #16
 801adc2:	6078      	str	r0, [r7, #4]
 801adc4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
 801adc6:	2300      	movs	r3, #0
 801adc8:	61bb      	str	r3, [r7, #24]
  struct tcp_pcb_listen *lpcb_any = NULL;
 801adca:	2300      	movs	r3, #0
 801adcc:	617b      	str	r3, [r7, #20]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d105      	bne.n	801ade0 <tcp_input+0x24>
 801add4:	4b9b      	ldr	r3, [pc, #620]	; (801b044 <tcp_input+0x288>)
 801add6:	2283      	movs	r2, #131	; 0x83
 801add8:	499b      	ldr	r1, [pc, #620]	; (801b048 <tcp_input+0x28c>)
 801adda:	489c      	ldr	r0, [pc, #624]	; (801b04c <tcp_input+0x290>)
 801addc:	f009 fff0 	bl	8024dc0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	685b      	ldr	r3, [r3, #4]
 801ade4:	4a9a      	ldr	r2, [pc, #616]	; (801b050 <tcp_input+0x294>)
 801ade6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	895b      	ldrh	r3, [r3, #10]
 801adec:	2b13      	cmp	r3, #19
 801adee:	f240 83db 	bls.w	801b5a8 <tcp_input+0x7ec>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801adf2:	4b98      	ldr	r3, [pc, #608]	; (801b054 <tcp_input+0x298>)
 801adf4:	695b      	ldr	r3, [r3, #20]
 801adf6:	4a97      	ldr	r2, [pc, #604]	; (801b054 <tcp_input+0x298>)
 801adf8:	6812      	ldr	r2, [r2, #0]
 801adfa:	4611      	mov	r1, r2
 801adfc:	4618      	mov	r0, r3
 801adfe:	f006 fc87 	bl	8021710 <ip4_addr_isbroadcast_u32>
 801ae02:	4603      	mov	r3, r0
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	f040 83d1 	bne.w	801b5ac <tcp_input+0x7f0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801ae0a:	4b92      	ldr	r3, [pc, #584]	; (801b054 <tcp_input+0x298>)
 801ae0c:	695b      	ldr	r3, [r3, #20]
 801ae0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801ae12:	2be0      	cmp	r3, #224	; 0xe0
 801ae14:	f000 83ca 	beq.w	801b5ac <tcp_input+0x7f0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801ae18:	4b8d      	ldr	r3, [pc, #564]	; (801b050 <tcp_input+0x294>)
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	899b      	ldrh	r3, [r3, #12]
 801ae1e:	b29b      	uxth	r3, r3
 801ae20:	4618      	mov	r0, r3
 801ae22:	f7fb fd0f 	bl	8016844 <lwip_htons>
 801ae26:	4603      	mov	r3, r0
 801ae28:	0b1b      	lsrs	r3, r3, #12
 801ae2a:	b29b      	uxth	r3, r3
 801ae2c:	b2db      	uxtb	r3, r3
 801ae2e:	009b      	lsls	r3, r3, #2
 801ae30:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801ae32:	7cbb      	ldrb	r3, [r7, #18]
 801ae34:	2b13      	cmp	r3, #19
 801ae36:	f240 83bb 	bls.w	801b5b0 <tcp_input+0x7f4>
 801ae3a:	7cbb      	ldrb	r3, [r7, #18]
 801ae3c:	b29a      	uxth	r2, r3
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	891b      	ldrh	r3, [r3, #8]
 801ae42:	429a      	cmp	r2, r3
 801ae44:	f200 83b4 	bhi.w	801b5b0 <tcp_input+0x7f4>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801ae48:	7cbb      	ldrb	r3, [r7, #18]
 801ae4a:	b29b      	uxth	r3, r3
 801ae4c:	3b14      	subs	r3, #20
 801ae4e:	b29a      	uxth	r2, r3
 801ae50:	4b81      	ldr	r3, [pc, #516]	; (801b058 <tcp_input+0x29c>)
 801ae52:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801ae54:	4b81      	ldr	r3, [pc, #516]	; (801b05c <tcp_input+0x2a0>)
 801ae56:	2200      	movs	r2, #0
 801ae58:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	895a      	ldrh	r2, [r3, #10]
 801ae5e:	7cbb      	ldrb	r3, [r7, #18]
 801ae60:	b29b      	uxth	r3, r3
 801ae62:	429a      	cmp	r2, r3
 801ae64:	d309      	bcc.n	801ae7a <tcp_input+0xbe>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801ae66:	4b7c      	ldr	r3, [pc, #496]	; (801b058 <tcp_input+0x29c>)
 801ae68:	881a      	ldrh	r2, [r3, #0]
 801ae6a:	4b7d      	ldr	r3, [pc, #500]	; (801b060 <tcp_input+0x2a4>)
 801ae6c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801ae6e:	7cbb      	ldrb	r3, [r7, #18]
 801ae70:	4619      	mov	r1, r3
 801ae72:	6878      	ldr	r0, [r7, #4]
 801ae74:	f7fd fb1c 	bl	80184b0 <pbuf_remove_header>
 801ae78:	e04e      	b.n	801af18 <tcp_input+0x15c>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801ae7a:	687b      	ldr	r3, [r7, #4]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d105      	bne.n	801ae8e <tcp_input+0xd2>
 801ae82:	4b70      	ldr	r3, [pc, #448]	; (801b044 <tcp_input+0x288>)
 801ae84:	22c2      	movs	r2, #194	; 0xc2
 801ae86:	4977      	ldr	r1, [pc, #476]	; (801b064 <tcp_input+0x2a8>)
 801ae88:	4870      	ldr	r0, [pc, #448]	; (801b04c <tcp_input+0x290>)
 801ae8a:	f009 ff99 	bl	8024dc0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801ae8e:	2114      	movs	r1, #20
 801ae90:	6878      	ldr	r0, [r7, #4]
 801ae92:	f7fd fb0d 	bl	80184b0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	895a      	ldrh	r2, [r3, #10]
 801ae9a:	4b71      	ldr	r3, [pc, #452]	; (801b060 <tcp_input+0x2a4>)
 801ae9c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801ae9e:	4b6e      	ldr	r3, [pc, #440]	; (801b058 <tcp_input+0x29c>)
 801aea0:	881a      	ldrh	r2, [r3, #0]
 801aea2:	4b6f      	ldr	r3, [pc, #444]	; (801b060 <tcp_input+0x2a4>)
 801aea4:	881b      	ldrh	r3, [r3, #0]
 801aea6:	1ad3      	subs	r3, r2, r3
 801aea8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801aeaa:	4b6d      	ldr	r3, [pc, #436]	; (801b060 <tcp_input+0x2a4>)
 801aeac:	881b      	ldrh	r3, [r3, #0]
 801aeae:	4619      	mov	r1, r3
 801aeb0:	6878      	ldr	r0, [r7, #4]
 801aeb2:	f7fd fafd 	bl	80184b0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	681b      	ldr	r3, [r3, #0]
 801aeba:	895b      	ldrh	r3, [r3, #10]
 801aebc:	8a3a      	ldrh	r2, [r7, #16]
 801aebe:	429a      	cmp	r2, r3
 801aec0:	f200 8378 	bhi.w	801b5b4 <tcp_input+0x7f8>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	681b      	ldr	r3, [r3, #0]
 801aec8:	685b      	ldr	r3, [r3, #4]
 801aeca:	4a64      	ldr	r2, [pc, #400]	; (801b05c <tcp_input+0x2a0>)
 801aecc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	681b      	ldr	r3, [r3, #0]
 801aed2:	8a3a      	ldrh	r2, [r7, #16]
 801aed4:	4611      	mov	r1, r2
 801aed6:	4618      	mov	r0, r3
 801aed8:	f7fd faea 	bl	80184b0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801aedc:	687b      	ldr	r3, [r7, #4]
 801aede:	891a      	ldrh	r2, [r3, #8]
 801aee0:	8a3b      	ldrh	r3, [r7, #16]
 801aee2:	1ad3      	subs	r3, r2, r3
 801aee4:	b29a      	uxth	r2, r3
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	895b      	ldrh	r3, [r3, #10]
 801aeee:	2b00      	cmp	r3, #0
 801aef0:	d005      	beq.n	801aefe <tcp_input+0x142>
 801aef2:	4b54      	ldr	r3, [pc, #336]	; (801b044 <tcp_input+0x288>)
 801aef4:	22df      	movs	r2, #223	; 0xdf
 801aef6:	495c      	ldr	r1, [pc, #368]	; (801b068 <tcp_input+0x2ac>)
 801aef8:	4854      	ldr	r0, [pc, #336]	; (801b04c <tcp_input+0x290>)
 801aefa:	f009 ff61 	bl	8024dc0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	891a      	ldrh	r2, [r3, #8]
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	681b      	ldr	r3, [r3, #0]
 801af06:	891b      	ldrh	r3, [r3, #8]
 801af08:	429a      	cmp	r2, r3
 801af0a:	d005      	beq.n	801af18 <tcp_input+0x15c>
 801af0c:	4b4d      	ldr	r3, [pc, #308]	; (801b044 <tcp_input+0x288>)
 801af0e:	22e0      	movs	r2, #224	; 0xe0
 801af10:	4956      	ldr	r1, [pc, #344]	; (801b06c <tcp_input+0x2b0>)
 801af12:	484e      	ldr	r0, [pc, #312]	; (801b04c <tcp_input+0x290>)
 801af14:	f009 ff54 	bl	8024dc0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801af18:	4b4d      	ldr	r3, [pc, #308]	; (801b050 <tcp_input+0x294>)
 801af1a:	681b      	ldr	r3, [r3, #0]
 801af1c:	881b      	ldrh	r3, [r3, #0]
 801af1e:	b29b      	uxth	r3, r3
 801af20:	4a4b      	ldr	r2, [pc, #300]	; (801b050 <tcp_input+0x294>)
 801af22:	6814      	ldr	r4, [r2, #0]
 801af24:	4618      	mov	r0, r3
 801af26:	f7fb fc8d 	bl	8016844 <lwip_htons>
 801af2a:	4603      	mov	r3, r0
 801af2c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801af2e:	4b48      	ldr	r3, [pc, #288]	; (801b050 <tcp_input+0x294>)
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	885b      	ldrh	r3, [r3, #2]
 801af34:	b29b      	uxth	r3, r3
 801af36:	4a46      	ldr	r2, [pc, #280]	; (801b050 <tcp_input+0x294>)
 801af38:	6814      	ldr	r4, [r2, #0]
 801af3a:	4618      	mov	r0, r3
 801af3c:	f7fb fc82 	bl	8016844 <lwip_htons>
 801af40:	4603      	mov	r3, r0
 801af42:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801af44:	4b42      	ldr	r3, [pc, #264]	; (801b050 <tcp_input+0x294>)
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	685b      	ldr	r3, [r3, #4]
 801af4a:	4a41      	ldr	r2, [pc, #260]	; (801b050 <tcp_input+0x294>)
 801af4c:	6814      	ldr	r4, [r2, #0]
 801af4e:	4618      	mov	r0, r3
 801af50:	f7fb fc8d 	bl	801686e <lwip_htonl>
 801af54:	4603      	mov	r3, r0
 801af56:	6063      	str	r3, [r4, #4]
 801af58:	6863      	ldr	r3, [r4, #4]
 801af5a:	4a45      	ldr	r2, [pc, #276]	; (801b070 <tcp_input+0x2b4>)
 801af5c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801af5e:	4b3c      	ldr	r3, [pc, #240]	; (801b050 <tcp_input+0x294>)
 801af60:	681b      	ldr	r3, [r3, #0]
 801af62:	689b      	ldr	r3, [r3, #8]
 801af64:	4a3a      	ldr	r2, [pc, #232]	; (801b050 <tcp_input+0x294>)
 801af66:	6814      	ldr	r4, [r2, #0]
 801af68:	4618      	mov	r0, r3
 801af6a:	f7fb fc80 	bl	801686e <lwip_htonl>
 801af6e:	4603      	mov	r3, r0
 801af70:	60a3      	str	r3, [r4, #8]
 801af72:	68a3      	ldr	r3, [r4, #8]
 801af74:	4a3f      	ldr	r2, [pc, #252]	; (801b074 <tcp_input+0x2b8>)
 801af76:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801af78:	4b35      	ldr	r3, [pc, #212]	; (801b050 <tcp_input+0x294>)
 801af7a:	681b      	ldr	r3, [r3, #0]
 801af7c:	89db      	ldrh	r3, [r3, #14]
 801af7e:	b29b      	uxth	r3, r3
 801af80:	4a33      	ldr	r2, [pc, #204]	; (801b050 <tcp_input+0x294>)
 801af82:	6814      	ldr	r4, [r2, #0]
 801af84:	4618      	mov	r0, r3
 801af86:	f7fb fc5d 	bl	8016844 <lwip_htons>
 801af8a:	4603      	mov	r3, r0
 801af8c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801af8e:	4b30      	ldr	r3, [pc, #192]	; (801b050 <tcp_input+0x294>)
 801af90:	681b      	ldr	r3, [r3, #0]
 801af92:	899b      	ldrh	r3, [r3, #12]
 801af94:	b29b      	uxth	r3, r3
 801af96:	4618      	mov	r0, r3
 801af98:	f7fb fc54 	bl	8016844 <lwip_htons>
 801af9c:	4603      	mov	r3, r0
 801af9e:	b2db      	uxtb	r3, r3
 801afa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801afa4:	b2da      	uxtb	r2, r3
 801afa6:	4b34      	ldr	r3, [pc, #208]	; (801b078 <tcp_input+0x2bc>)
 801afa8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	891a      	ldrh	r2, [r3, #8]
 801afae:	4b33      	ldr	r3, [pc, #204]	; (801b07c <tcp_input+0x2c0>)
 801afb0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801afb2:	4b31      	ldr	r3, [pc, #196]	; (801b078 <tcp_input+0x2bc>)
 801afb4:	781b      	ldrb	r3, [r3, #0]
 801afb6:	f003 0303 	and.w	r3, r3, #3
 801afba:	2b00      	cmp	r3, #0
 801afbc:	d00c      	beq.n	801afd8 <tcp_input+0x21c>
    tcplen++;
 801afbe:	4b2f      	ldr	r3, [pc, #188]	; (801b07c <tcp_input+0x2c0>)
 801afc0:	881b      	ldrh	r3, [r3, #0]
 801afc2:	3301      	adds	r3, #1
 801afc4:	b29a      	uxth	r2, r3
 801afc6:	4b2d      	ldr	r3, [pc, #180]	; (801b07c <tcp_input+0x2c0>)
 801afc8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	891a      	ldrh	r2, [r3, #8]
 801afce:	4b2b      	ldr	r3, [pc, #172]	; (801b07c <tcp_input+0x2c0>)
 801afd0:	881b      	ldrh	r3, [r3, #0]
 801afd2:	429a      	cmp	r2, r3
 801afd4:	f200 82f0 	bhi.w	801b5b8 <tcp_input+0x7fc>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801afd8:	2300      	movs	r3, #0
 801afda:	623b      	str	r3, [r7, #32]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801afdc:	4b28      	ldr	r3, [pc, #160]	; (801b080 <tcp_input+0x2c4>)
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	627b      	str	r3, [r7, #36]	; 0x24
 801afe2:	e09d      	b.n	801b120 <tcp_input+0x364>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afe6:	7d1b      	ldrb	r3, [r3, #20]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d105      	bne.n	801aff8 <tcp_input+0x23c>
 801afec:	4b15      	ldr	r3, [pc, #84]	; (801b044 <tcp_input+0x288>)
 801afee:	22fb      	movs	r2, #251	; 0xfb
 801aff0:	4924      	ldr	r1, [pc, #144]	; (801b084 <tcp_input+0x2c8>)
 801aff2:	4816      	ldr	r0, [pc, #88]	; (801b04c <tcp_input+0x290>)
 801aff4:	f009 fee4 	bl	8024dc0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801aff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801affa:	7d1b      	ldrb	r3, [r3, #20]
 801affc:	2b0a      	cmp	r3, #10
 801affe:	d105      	bne.n	801b00c <tcp_input+0x250>
 801b000:	4b10      	ldr	r3, [pc, #64]	; (801b044 <tcp_input+0x288>)
 801b002:	22fc      	movs	r2, #252	; 0xfc
 801b004:	4920      	ldr	r1, [pc, #128]	; (801b088 <tcp_input+0x2cc>)
 801b006:	4811      	ldr	r0, [pc, #68]	; (801b04c <tcp_input+0x290>)
 801b008:	f009 feda 	bl	8024dc0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b00e:	7d1b      	ldrb	r3, [r3, #20]
 801b010:	2b01      	cmp	r3, #1
 801b012:	d105      	bne.n	801b020 <tcp_input+0x264>
 801b014:	4b0b      	ldr	r3, [pc, #44]	; (801b044 <tcp_input+0x288>)
 801b016:	22fd      	movs	r2, #253	; 0xfd
 801b018:	491c      	ldr	r1, [pc, #112]	; (801b08c <tcp_input+0x2d0>)
 801b01a:	480c      	ldr	r0, [pc, #48]	; (801b04c <tcp_input+0x290>)
 801b01c:	f009 fed0 	bl	8024dc0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b022:	7a1b      	ldrb	r3, [r3, #8]
 801b024:	2b00      	cmp	r3, #0
 801b026:	d033      	beq.n	801b090 <tcp_input+0x2d4>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b02a:	7a1a      	ldrb	r2, [r3, #8]
 801b02c:	4b09      	ldr	r3, [pc, #36]	; (801b054 <tcp_input+0x298>)
 801b02e:	685b      	ldr	r3, [r3, #4]
 801b030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b034:	3301      	adds	r3, #1
 801b036:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b038:	429a      	cmp	r2, r3
 801b03a:	d029      	beq.n	801b090 <tcp_input+0x2d4>
      prev = pcb;
 801b03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b03e:	623b      	str	r3, [r7, #32]
      continue;
 801b040:	e06b      	b.n	801b11a <tcp_input+0x35e>
 801b042:	bf00      	nop
 801b044:	0802c3f4 	.word	0x0802c3f4
 801b048:	0802c428 	.word	0x0802c428
 801b04c:	0802c440 	.word	0x0802c440
 801b050:	20015ffc 	.word	0x20015ffc
 801b054:	20012458 	.word	0x20012458
 801b058:	20016000 	.word	0x20016000
 801b05c:	20016004 	.word	0x20016004
 801b060:	20016002 	.word	0x20016002
 801b064:	0802c468 	.word	0x0802c468
 801b068:	0802c478 	.word	0x0802c478
 801b06c:	0802c484 	.word	0x0802c484
 801b070:	2001600c 	.word	0x2001600c
 801b074:	20016010 	.word	0x20016010
 801b078:	20016018 	.word	0x20016018
 801b07c:	20016016 	.word	0x20016016
 801b080:	20015fe0 	.word	0x20015fe0
 801b084:	0802c4a4 	.word	0x0802c4a4
 801b088:	0802c4cc 	.word	0x0802c4cc
 801b08c:	0802c4f8 	.word	0x0802c4f8
    }

    if (pcb->remote_port == tcphdr->src &&
 801b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b092:	8b1a      	ldrh	r2, [r3, #24]
 801b094:	4b77      	ldr	r3, [pc, #476]	; (801b274 <tcp_input+0x4b8>)
 801b096:	681b      	ldr	r3, [r3, #0]
 801b098:	881b      	ldrh	r3, [r3, #0]
 801b09a:	b29b      	uxth	r3, r3
 801b09c:	429a      	cmp	r2, r3
 801b09e:	d13a      	bne.n	801b116 <tcp_input+0x35a>
        pcb->local_port == tcphdr->dest &&
 801b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0a2:	8ada      	ldrh	r2, [r3, #22]
 801b0a4:	4b73      	ldr	r3, [pc, #460]	; (801b274 <tcp_input+0x4b8>)
 801b0a6:	681b      	ldr	r3, [r3, #0]
 801b0a8:	885b      	ldrh	r3, [r3, #2]
 801b0aa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801b0ac:	429a      	cmp	r2, r3
 801b0ae:	d132      	bne.n	801b116 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0b2:	685a      	ldr	r2, [r3, #4]
 801b0b4:	4b70      	ldr	r3, [pc, #448]	; (801b278 <tcp_input+0x4bc>)
 801b0b6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801b0b8:	429a      	cmp	r2, r3
 801b0ba:	d12c      	bne.n	801b116 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0be:	681a      	ldr	r2, [r3, #0]
 801b0c0:	4b6d      	ldr	r3, [pc, #436]	; (801b278 <tcp_input+0x4bc>)
 801b0c2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b0c4:	429a      	cmp	r2, r3
 801b0c6:	d126      	bne.n	801b116 <tcp_input+0x35a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0ca:	68db      	ldr	r3, [r3, #12]
 801b0cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b0ce:	429a      	cmp	r2, r3
 801b0d0:	d106      	bne.n	801b0e0 <tcp_input+0x324>
 801b0d2:	4b6a      	ldr	r3, [pc, #424]	; (801b27c <tcp_input+0x4c0>)
 801b0d4:	f240 120d 	movw	r2, #269	; 0x10d
 801b0d8:	4969      	ldr	r1, [pc, #420]	; (801b280 <tcp_input+0x4c4>)
 801b0da:	486a      	ldr	r0, [pc, #424]	; (801b284 <tcp_input+0x4c8>)
 801b0dc:	f009 fe70 	bl	8024dc0 <iprintf>
      if (prev != NULL) {
 801b0e0:	6a3b      	ldr	r3, [r7, #32]
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d00a      	beq.n	801b0fc <tcp_input+0x340>
        prev->next = pcb->next;
 801b0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0e8:	68da      	ldr	r2, [r3, #12]
 801b0ea:	6a3b      	ldr	r3, [r7, #32]
 801b0ec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801b0ee:	4b66      	ldr	r3, [pc, #408]	; (801b288 <tcp_input+0x4cc>)
 801b0f0:	681a      	ldr	r2, [r3, #0]
 801b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801b0f6:	4a64      	ldr	r2, [pc, #400]	; (801b288 <tcp_input+0x4cc>)
 801b0f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0fa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0fe:	68db      	ldr	r3, [r3, #12]
 801b100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b102:	429a      	cmp	r2, r3
 801b104:	d111      	bne.n	801b12a <tcp_input+0x36e>
 801b106:	4b5d      	ldr	r3, [pc, #372]	; (801b27c <tcp_input+0x4c0>)
 801b108:	f240 1215 	movw	r2, #277	; 0x115
 801b10c:	495f      	ldr	r1, [pc, #380]	; (801b28c <tcp_input+0x4d0>)
 801b10e:	485d      	ldr	r0, [pc, #372]	; (801b284 <tcp_input+0x4c8>)
 801b110:	f009 fe56 	bl	8024dc0 <iprintf>
      break;
 801b114:	e009      	b.n	801b12a <tcp_input+0x36e>
    }
    prev = pcb;
 801b116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b118:	623b      	str	r3, [r7, #32]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b11c:	68db      	ldr	r3, [r3, #12]
 801b11e:	627b      	str	r3, [r7, #36]	; 0x24
 801b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b122:	2b00      	cmp	r3, #0
 801b124:	f47f af5e 	bne.w	801afe4 <tcp_input+0x228>
 801b128:	e000      	b.n	801b12c <tcp_input+0x370>
      break;
 801b12a:	bf00      	nop
  }

  if (pcb == NULL) {
 801b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b12e:	2b00      	cmp	r3, #0
 801b130:	f040 80b4 	bne.w	801b29c <tcp_input+0x4e0>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b134:	4b56      	ldr	r3, [pc, #344]	; (801b290 <tcp_input+0x4d4>)
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	627b      	str	r3, [r7, #36]	; 0x24
 801b13a:	e03f      	b.n	801b1bc <tcp_input+0x400>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b13e:	7d1b      	ldrb	r3, [r3, #20]
 801b140:	2b0a      	cmp	r3, #10
 801b142:	d006      	beq.n	801b152 <tcp_input+0x396>
 801b144:	4b4d      	ldr	r3, [pc, #308]	; (801b27c <tcp_input+0x4c0>)
 801b146:	f240 121f 	movw	r2, #287	; 0x11f
 801b14a:	4952      	ldr	r1, [pc, #328]	; (801b294 <tcp_input+0x4d8>)
 801b14c:	484d      	ldr	r0, [pc, #308]	; (801b284 <tcp_input+0x4c8>)
 801b14e:	f009 fe37 	bl	8024dc0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b154:	7a1b      	ldrb	r3, [r3, #8]
 801b156:	2b00      	cmp	r3, #0
 801b158:	d009      	beq.n	801b16e <tcp_input+0x3b2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b15c:	7a1a      	ldrb	r2, [r3, #8]
 801b15e:	4b46      	ldr	r3, [pc, #280]	; (801b278 <tcp_input+0x4bc>)
 801b160:	685b      	ldr	r3, [r3, #4]
 801b162:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b166:	3301      	adds	r3, #1
 801b168:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b16a:	429a      	cmp	r2, r3
 801b16c:	d122      	bne.n	801b1b4 <tcp_input+0x3f8>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801b16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b170:	8b1a      	ldrh	r2, [r3, #24]
 801b172:	4b40      	ldr	r3, [pc, #256]	; (801b274 <tcp_input+0x4b8>)
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	881b      	ldrh	r3, [r3, #0]
 801b178:	b29b      	uxth	r3, r3
 801b17a:	429a      	cmp	r2, r3
 801b17c:	d11b      	bne.n	801b1b6 <tcp_input+0x3fa>
          pcb->local_port == tcphdr->dest &&
 801b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b180:	8ada      	ldrh	r2, [r3, #22]
 801b182:	4b3c      	ldr	r3, [pc, #240]	; (801b274 <tcp_input+0x4b8>)
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	885b      	ldrh	r3, [r3, #2]
 801b188:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801b18a:	429a      	cmp	r2, r3
 801b18c:	d113      	bne.n	801b1b6 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b18e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b190:	685a      	ldr	r2, [r3, #4]
 801b192:	4b39      	ldr	r3, [pc, #228]	; (801b278 <tcp_input+0x4bc>)
 801b194:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801b196:	429a      	cmp	r2, r3
 801b198:	d10d      	bne.n	801b1b6 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b19c:	681a      	ldr	r2, [r3, #0]
 801b19e:	4b36      	ldr	r3, [pc, #216]	; (801b278 <tcp_input+0x4bc>)
 801b1a0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b1a2:	429a      	cmp	r2, r3
 801b1a4:	d107      	bne.n	801b1b6 <tcp_input+0x3fa>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801b1a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b1a8:	f000 fb60 	bl	801b86c <tcp_timewait_input>
        }
        pbuf_free(p);
 801b1ac:	6878      	ldr	r0, [r7, #4]
 801b1ae:	f7fd fa05 	bl	80185bc <pbuf_free>
        return;
 801b1b2:	e207      	b.n	801b5c4 <tcp_input+0x808>
        continue;
 801b1b4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1b8:	68db      	ldr	r3, [r3, #12]
 801b1ba:	627b      	str	r3, [r7, #36]	; 0x24
 801b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d1bc      	bne.n	801b13c <tcp_input+0x380>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801b1c2:	2300      	movs	r3, #0
 801b1c4:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b1c6:	4b34      	ldr	r3, [pc, #208]	; (801b298 <tcp_input+0x4dc>)
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	61fb      	str	r3, [r7, #28]
 801b1cc:	e02e      	b.n	801b22c <tcp_input+0x470>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b1ce:	69fb      	ldr	r3, [r7, #28]
 801b1d0:	7a1b      	ldrb	r3, [r3, #8]
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d00c      	beq.n	801b1f0 <tcp_input+0x434>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b1d6:	69fb      	ldr	r3, [r7, #28]
 801b1d8:	7a1a      	ldrb	r2, [r3, #8]
 801b1da:	4b27      	ldr	r3, [pc, #156]	; (801b278 <tcp_input+0x4bc>)
 801b1dc:	685b      	ldr	r3, [r3, #4]
 801b1de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b1e2:	3301      	adds	r3, #1
 801b1e4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b1e6:	429a      	cmp	r2, r3
 801b1e8:	d002      	beq.n	801b1f0 <tcp_input+0x434>
        prev = (struct tcp_pcb *)lpcb;
 801b1ea:	69fb      	ldr	r3, [r7, #28]
 801b1ec:	623b      	str	r3, [r7, #32]
        continue;
 801b1ee:	e01a      	b.n	801b226 <tcp_input+0x46a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801b1f0:	69fb      	ldr	r3, [r7, #28]
 801b1f2:	8ada      	ldrh	r2, [r3, #22]
 801b1f4:	4b1f      	ldr	r3, [pc, #124]	; (801b274 <tcp_input+0x4b8>)
 801b1f6:	681b      	ldr	r3, [r3, #0]
 801b1f8:	885b      	ldrh	r3, [r3, #2]
 801b1fa:	b29b      	uxth	r3, r3
 801b1fc:	429a      	cmp	r2, r3
 801b1fe:	d110      	bne.n	801b222 <tcp_input+0x466>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b200:	69fb      	ldr	r3, [r7, #28]
 801b202:	681a      	ldr	r2, [r3, #0]
 801b204:	4b1c      	ldr	r3, [pc, #112]	; (801b278 <tcp_input+0x4bc>)
 801b206:	695b      	ldr	r3, [r3, #20]
 801b208:	429a      	cmp	r2, r3
 801b20a:	d013      	beq.n	801b234 <tcp_input+0x478>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b20c:	69fb      	ldr	r3, [r7, #28]
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d003      	beq.n	801b21a <tcp_input+0x45e>
 801b212:	69fb      	ldr	r3, [r7, #28]
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	2b00      	cmp	r3, #0
 801b218:	d103      	bne.n	801b222 <tcp_input+0x466>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
 801b21a:	69fb      	ldr	r3, [r7, #28]
 801b21c:	617b      	str	r3, [r7, #20]
            lpcb_prev = prev;
 801b21e:	6a3b      	ldr	r3, [r7, #32]
 801b220:	61bb      	str	r3, [r7, #24]
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801b222:	69fb      	ldr	r3, [r7, #28]
 801b224:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b226:	69fb      	ldr	r3, [r7, #28]
 801b228:	68db      	ldr	r3, [r3, #12]
 801b22a:	61fb      	str	r3, [r7, #28]
 801b22c:	69fb      	ldr	r3, [r7, #28]
 801b22e:	2b00      	cmp	r3, #0
 801b230:	d1cd      	bne.n	801b1ce <tcp_input+0x412>
 801b232:	e000      	b.n	801b236 <tcp_input+0x47a>
            break;
 801b234:	bf00      	nop
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
 801b236:	69fb      	ldr	r3, [r7, #28]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d103      	bne.n	801b244 <tcp_input+0x488>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
 801b23c:	697b      	ldr	r3, [r7, #20]
 801b23e:	61fb      	str	r3, [r7, #28]
      prev = lpcb_prev;
 801b240:	69bb      	ldr	r3, [r7, #24]
 801b242:	623b      	str	r3, [r7, #32]
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801b244:	69fb      	ldr	r3, [r7, #28]
 801b246:	2b00      	cmp	r3, #0
 801b248:	d028      	beq.n	801b29c <tcp_input+0x4e0>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801b24a:	6a3b      	ldr	r3, [r7, #32]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d00a      	beq.n	801b266 <tcp_input+0x4aa>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b250:	69fb      	ldr	r3, [r7, #28]
 801b252:	68da      	ldr	r2, [r3, #12]
 801b254:	6a3b      	ldr	r3, [r7, #32]
 801b256:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b258:	4b0f      	ldr	r3, [pc, #60]	; (801b298 <tcp_input+0x4dc>)
 801b25a:	681a      	ldr	r2, [r3, #0]
 801b25c:	69fb      	ldr	r3, [r7, #28]
 801b25e:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b260:	4a0d      	ldr	r2, [pc, #52]	; (801b298 <tcp_input+0x4dc>)
 801b262:	69fb      	ldr	r3, [r7, #28]
 801b264:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801b266:	69f8      	ldr	r0, [r7, #28]
 801b268:	f000 fa02 	bl	801b670 <tcp_listen_input>
      }
      pbuf_free(p);
 801b26c:	6878      	ldr	r0, [r7, #4]
 801b26e:	f7fd f9a5 	bl	80185bc <pbuf_free>
      return;
 801b272:	e1a7      	b.n	801b5c4 <tcp_input+0x808>
 801b274:	20015ffc 	.word	0x20015ffc
 801b278:	20012458 	.word	0x20012458
 801b27c:	0802c3f4 	.word	0x0802c3f4
 801b280:	0802c520 	.word	0x0802c520
 801b284:	0802c440 	.word	0x0802c440
 801b288:	20015fe0 	.word	0x20015fe0
 801b28c:	0802c54c 	.word	0x0802c54c
 801b290:	20015fe4 	.word	0x20015fe4
 801b294:	0802c578 	.word	0x0802c578
 801b298:	20015fdc 	.word	0x20015fdc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	f000 8158 	beq.w	801b554 <tcp_input+0x798>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801b2a4:	4b95      	ldr	r3, [pc, #596]	; (801b4fc <tcp_input+0x740>)
 801b2a6:	2200      	movs	r2, #0
 801b2a8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	891a      	ldrh	r2, [r3, #8]
 801b2ae:	4b93      	ldr	r3, [pc, #588]	; (801b4fc <tcp_input+0x740>)
 801b2b0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801b2b2:	4a92      	ldr	r2, [pc, #584]	; (801b4fc <tcp_input+0x740>)
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b2b8:	4b91      	ldr	r3, [pc, #580]	; (801b500 <tcp_input+0x744>)
 801b2ba:	681b      	ldr	r3, [r3, #0]
 801b2bc:	4a8f      	ldr	r2, [pc, #572]	; (801b4fc <tcp_input+0x740>)
 801b2be:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801b2c0:	4b90      	ldr	r3, [pc, #576]	; (801b504 <tcp_input+0x748>)
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801b2c6:	4b90      	ldr	r3, [pc, #576]	; (801b508 <tcp_input+0x74c>)
 801b2c8:	2200      	movs	r2, #0
 801b2ca:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801b2cc:	4b8f      	ldr	r3, [pc, #572]	; (801b50c <tcp_input+0x750>)
 801b2ce:	2200      	movs	r2, #0
 801b2d0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801b2d2:	4b8f      	ldr	r3, [pc, #572]	; (801b510 <tcp_input+0x754>)
 801b2d4:	781b      	ldrb	r3, [r3, #0]
 801b2d6:	f003 0308 	and.w	r3, r3, #8
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d006      	beq.n	801b2ec <tcp_input+0x530>
      p->flags |= PBUF_FLAG_PUSH;
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	7b5b      	ldrb	r3, [r3, #13]
 801b2e2:	f043 0301 	orr.w	r3, r3, #1
 801b2e6:	b2da      	uxtb	r2, r3
 801b2e8:	687b      	ldr	r3, [r7, #4]
 801b2ea:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b2f0:	2b00      	cmp	r3, #0
 801b2f2:	d017      	beq.n	801b324 <tcp_input+0x568>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b2f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b2f6:	f7ff f843 	bl	801a380 <tcp_process_refused_data>
 801b2fa:	4603      	mov	r3, r0
 801b2fc:	f113 0f0d 	cmn.w	r3, #13
 801b300:	d007      	beq.n	801b312 <tcp_input+0x556>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b306:	2b00      	cmp	r3, #0
 801b308:	d00c      	beq.n	801b324 <tcp_input+0x568>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b30a:	4b82      	ldr	r3, [pc, #520]	; (801b514 <tcp_input+0x758>)
 801b30c:	881b      	ldrh	r3, [r3, #0]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d008      	beq.n	801b324 <tcp_input+0x568>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801b312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b316:	2b00      	cmp	r3, #0
 801b318:	f040 80e3 	bne.w	801b4e2 <tcp_input+0x726>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801b31c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b31e:	f003 fe05 	bl	801ef2c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801b322:	e0de      	b.n	801b4e2 <tcp_input+0x726>
      }
    }
    tcp_input_pcb = pcb;
 801b324:	4a7c      	ldr	r2, [pc, #496]	; (801b518 <tcp_input+0x75c>)
 801b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b328:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801b32a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b32c:	f000 fb18 	bl	801b960 <tcp_process>
 801b330:	4603      	mov	r3, r0
 801b332:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801b334:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b338:	f113 0f0d 	cmn.w	r3, #13
 801b33c:	f000 80d3 	beq.w	801b4e6 <tcp_input+0x72a>
      if (recv_flags & TF_RESET) {
 801b340:	4b71      	ldr	r3, [pc, #452]	; (801b508 <tcp_input+0x74c>)
 801b342:	781b      	ldrb	r3, [r3, #0]
 801b344:	f003 0308 	and.w	r3, r3, #8
 801b348:	2b00      	cmp	r3, #0
 801b34a:	d015      	beq.n	801b378 <tcp_input+0x5bc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b34e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b352:	2b00      	cmp	r3, #0
 801b354:	d008      	beq.n	801b368 <tcp_input+0x5ac>
 801b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b35e:	6912      	ldr	r2, [r2, #16]
 801b360:	f06f 010d 	mvn.w	r1, #13
 801b364:	4610      	mov	r0, r2
 801b366:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b368:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b36a:	486c      	ldr	r0, [pc, #432]	; (801b51c <tcp_input+0x760>)
 801b36c:	f7ff fbae 	bl	801aacc <tcp_pcb_remove>
        tcp_free(pcb);
 801b370:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b372:	f7fd fd39 	bl	8018de8 <tcp_free>
 801b376:	e0da      	b.n	801b52e <tcp_input+0x772>
      } else {
        err = ERR_OK;
 801b378:	2300      	movs	r3, #0
 801b37a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801b37c:	4b63      	ldr	r3, [pc, #396]	; (801b50c <tcp_input+0x750>)
 801b37e:	881b      	ldrh	r3, [r3, #0]
 801b380:	2b00      	cmp	r3, #0
 801b382:	d01d      	beq.n	801b3c0 <tcp_input+0x604>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801b384:	4b61      	ldr	r3, [pc, #388]	; (801b50c <tcp_input+0x750>)
 801b386:	881b      	ldrh	r3, [r3, #0]
 801b388:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b38c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b390:	2b00      	cmp	r3, #0
 801b392:	d00a      	beq.n	801b3aa <tcp_input+0x5ee>
 801b394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b396:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b39c:	6910      	ldr	r0, [r2, #16]
 801b39e:	89fa      	ldrh	r2, [r7, #14]
 801b3a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b3a2:	4798      	blx	r3
 801b3a4:	4603      	mov	r3, r0
 801b3a6:	74fb      	strb	r3, [r7, #19]
 801b3a8:	e001      	b.n	801b3ae <tcp_input+0x5f2>
 801b3aa:	2300      	movs	r3, #0
 801b3ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b3ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b3b2:	f113 0f0d 	cmn.w	r3, #13
 801b3b6:	f000 8098 	beq.w	801b4ea <tcp_input+0x72e>
              goto aborted;
            }
          }
          recv_acked = 0;
 801b3ba:	4b54      	ldr	r3, [pc, #336]	; (801b50c <tcp_input+0x750>)
 801b3bc:	2200      	movs	r2, #0
 801b3be:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801b3c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b3c2:	f000 f915 	bl	801b5f0 <tcp_input_delayed_close>
 801b3c6:	4603      	mov	r3, r0
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	f040 8090 	bne.w	801b4ee <tcp_input+0x732>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801b3ce:	4b4d      	ldr	r3, [pc, #308]	; (801b504 <tcp_input+0x748>)
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	d041      	beq.n	801b45a <tcp_input+0x69e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b3da:	2b00      	cmp	r3, #0
 801b3dc:	d006      	beq.n	801b3ec <tcp_input+0x630>
 801b3de:	4b50      	ldr	r3, [pc, #320]	; (801b520 <tcp_input+0x764>)
 801b3e0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b3e4:	494f      	ldr	r1, [pc, #316]	; (801b524 <tcp_input+0x768>)
 801b3e6:	4850      	ldr	r0, [pc, #320]	; (801b528 <tcp_input+0x76c>)
 801b3e8:	f009 fcea 	bl	8024dc0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b3ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3ee:	8b5b      	ldrh	r3, [r3, #26]
 801b3f0:	f003 0310 	and.w	r3, r3, #16
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d008      	beq.n	801b40a <tcp_input+0x64e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801b3f8:	4b42      	ldr	r3, [pc, #264]	; (801b504 <tcp_input+0x748>)
 801b3fa:	681b      	ldr	r3, [r3, #0]
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	f7fd f8dd 	bl	80185bc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801b402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b404:	f7fe f834 	bl	8019470 <tcp_abort>
            goto aborted;
 801b408:	e091      	b.n	801b52e <tcp_input+0x772>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b40c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b410:	2b00      	cmp	r3, #0
 801b412:	d00c      	beq.n	801b42e <tcp_input+0x672>
 801b414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b416:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b41c:	6918      	ldr	r0, [r3, #16]
 801b41e:	4b39      	ldr	r3, [pc, #228]	; (801b504 <tcp_input+0x748>)
 801b420:	681a      	ldr	r2, [r3, #0]
 801b422:	2300      	movs	r3, #0
 801b424:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b426:	47a0      	blx	r4
 801b428:	4603      	mov	r3, r0
 801b42a:	74fb      	strb	r3, [r7, #19]
 801b42c:	e008      	b.n	801b440 <tcp_input+0x684>
 801b42e:	4b35      	ldr	r3, [pc, #212]	; (801b504 <tcp_input+0x748>)
 801b430:	681a      	ldr	r2, [r3, #0]
 801b432:	2300      	movs	r3, #0
 801b434:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b436:	2000      	movs	r0, #0
 801b438:	f7ff f878 	bl	801a52c <tcp_recv_null>
 801b43c:	4603      	mov	r3, r0
 801b43e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801b440:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b444:	f113 0f0d 	cmn.w	r3, #13
 801b448:	d053      	beq.n	801b4f2 <tcp_input+0x736>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801b44a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d003      	beq.n	801b45a <tcp_input+0x69e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801b452:	4b2c      	ldr	r3, [pc, #176]	; (801b504 <tcp_input+0x748>)
 801b454:	681a      	ldr	r2, [r3, #0]
 801b456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b458:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801b45a:	4b2b      	ldr	r3, [pc, #172]	; (801b508 <tcp_input+0x74c>)
 801b45c:	781b      	ldrb	r3, [r3, #0]
 801b45e:	f003 0320 	and.w	r3, r3, #32
 801b462:	2b00      	cmp	r3, #0
 801b464:	d030      	beq.n	801b4c8 <tcp_input+0x70c>
          if (pcb->refused_data != NULL) {
 801b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d009      	beq.n	801b482 <tcp_input+0x6c6>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b470:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b472:	7b5a      	ldrb	r2, [r3, #13]
 801b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b478:	f042 0220 	orr.w	r2, r2, #32
 801b47c:	b2d2      	uxtb	r2, r2
 801b47e:	735a      	strb	r2, [r3, #13]
 801b480:	e022      	b.n	801b4c8 <tcp_input+0x70c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b486:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b48a:	d005      	beq.n	801b498 <tcp_input+0x6dc>
              pcb->rcv_wnd++;
 801b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b48e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b490:	3301      	adds	r3, #1
 801b492:	b29a      	uxth	r2, r3
 801b494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b496:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801b498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b49a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d00b      	beq.n	801b4ba <tcp_input+0x6fe>
 801b4a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4a4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4aa:	6918      	ldr	r0, [r3, #16]
 801b4ac:	2300      	movs	r3, #0
 801b4ae:	2200      	movs	r2, #0
 801b4b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b4b2:	47a0      	blx	r4
 801b4b4:	4603      	mov	r3, r0
 801b4b6:	74fb      	strb	r3, [r7, #19]
 801b4b8:	e001      	b.n	801b4be <tcp_input+0x702>
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b4be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b4c2:	f113 0f0d 	cmn.w	r3, #13
 801b4c6:	d016      	beq.n	801b4f6 <tcp_input+0x73a>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801b4c8:	4b13      	ldr	r3, [pc, #76]	; (801b518 <tcp_input+0x75c>)
 801b4ca:	2200      	movs	r2, #0
 801b4cc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b4ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b4d0:	f000 f88e 	bl	801b5f0 <tcp_input_delayed_close>
 801b4d4:	4603      	mov	r3, r0
 801b4d6:	2b00      	cmp	r3, #0
 801b4d8:	d128      	bne.n	801b52c <tcp_input+0x770>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801b4da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801b4dc:	f002 ff20 	bl	801e320 <tcp_output>
 801b4e0:	e025      	b.n	801b52e <tcp_input+0x772>
        goto aborted;
 801b4e2:	bf00      	nop
 801b4e4:	e023      	b.n	801b52e <tcp_input+0x772>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801b4e6:	bf00      	nop
 801b4e8:	e021      	b.n	801b52e <tcp_input+0x772>
              goto aborted;
 801b4ea:	bf00      	nop
 801b4ec:	e01f      	b.n	801b52e <tcp_input+0x772>
          goto aborted;
 801b4ee:	bf00      	nop
 801b4f0:	e01d      	b.n	801b52e <tcp_input+0x772>
            goto aborted;
 801b4f2:	bf00      	nop
 801b4f4:	e01b      	b.n	801b52e <tcp_input+0x772>
              goto aborted;
 801b4f6:	bf00      	nop
 801b4f8:	e019      	b.n	801b52e <tcp_input+0x772>
 801b4fa:	bf00      	nop
 801b4fc:	20015fec 	.word	0x20015fec
 801b500:	20015ffc 	.word	0x20015ffc
 801b504:	2001601c 	.word	0x2001601c
 801b508:	20016019 	.word	0x20016019
 801b50c:	20016014 	.word	0x20016014
 801b510:	20016018 	.word	0x20016018
 801b514:	20016016 	.word	0x20016016
 801b518:	20016020 	.word	0x20016020
 801b51c:	20015fe0 	.word	0x20015fe0
 801b520:	0802c3f4 	.word	0x0802c3f4
 801b524:	0802c5a8 	.word	0x0802c5a8
 801b528:	0802c440 	.word	0x0802c440
          goto aborted;
 801b52c:	bf00      	nop
    tcp_input_pcb = NULL;
 801b52e:	4b27      	ldr	r3, [pc, #156]	; (801b5cc <tcp_input+0x810>)
 801b530:	2200      	movs	r2, #0
 801b532:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801b534:	4b26      	ldr	r3, [pc, #152]	; (801b5d0 <tcp_input+0x814>)
 801b536:	2200      	movs	r2, #0
 801b538:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801b53a:	4b26      	ldr	r3, [pc, #152]	; (801b5d4 <tcp_input+0x818>)
 801b53c:	685b      	ldr	r3, [r3, #4]
 801b53e:	2b00      	cmp	r3, #0
 801b540:	d03f      	beq.n	801b5c2 <tcp_input+0x806>
      pbuf_free(inseg.p);
 801b542:	4b24      	ldr	r3, [pc, #144]	; (801b5d4 <tcp_input+0x818>)
 801b544:	685b      	ldr	r3, [r3, #4]
 801b546:	4618      	mov	r0, r3
 801b548:	f7fd f838 	bl	80185bc <pbuf_free>
      inseg.p = NULL;
 801b54c:	4b21      	ldr	r3, [pc, #132]	; (801b5d4 <tcp_input+0x818>)
 801b54e:	2200      	movs	r2, #0
 801b550:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801b552:	e036      	b.n	801b5c2 <tcp_input+0x806>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b554:	4b20      	ldr	r3, [pc, #128]	; (801b5d8 <tcp_input+0x81c>)
 801b556:	681b      	ldr	r3, [r3, #0]
 801b558:	899b      	ldrh	r3, [r3, #12]
 801b55a:	b29b      	uxth	r3, r3
 801b55c:	4618      	mov	r0, r3
 801b55e:	f7fb f971 	bl	8016844 <lwip_htons>
 801b562:	4603      	mov	r3, r0
 801b564:	b2db      	uxtb	r3, r3
 801b566:	f003 0304 	and.w	r3, r3, #4
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d118      	bne.n	801b5a0 <tcp_input+0x7e4>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b56e:	4b1b      	ldr	r3, [pc, #108]	; (801b5dc <tcp_input+0x820>)
 801b570:	6819      	ldr	r1, [r3, #0]
 801b572:	4b1b      	ldr	r3, [pc, #108]	; (801b5e0 <tcp_input+0x824>)
 801b574:	881b      	ldrh	r3, [r3, #0]
 801b576:	461a      	mov	r2, r3
 801b578:	4b1a      	ldr	r3, [pc, #104]	; (801b5e4 <tcp_input+0x828>)
 801b57a:	681b      	ldr	r3, [r3, #0]
 801b57c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b57e:	4b16      	ldr	r3, [pc, #88]	; (801b5d8 <tcp_input+0x81c>)
 801b580:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b582:	885b      	ldrh	r3, [r3, #2]
 801b584:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b586:	4a14      	ldr	r2, [pc, #80]	; (801b5d8 <tcp_input+0x81c>)
 801b588:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b58a:	8812      	ldrh	r2, [r2, #0]
 801b58c:	b292      	uxth	r2, r2
 801b58e:	9202      	str	r2, [sp, #8]
 801b590:	9301      	str	r3, [sp, #4]
 801b592:	4b15      	ldr	r3, [pc, #84]	; (801b5e8 <tcp_input+0x82c>)
 801b594:	9300      	str	r3, [sp, #0]
 801b596:	4b15      	ldr	r3, [pc, #84]	; (801b5ec <tcp_input+0x830>)
 801b598:	4602      	mov	r2, r0
 801b59a:	2000      	movs	r0, #0
 801b59c:	f003 fc74 	bl	801ee88 <tcp_rst>
    pbuf_free(p);
 801b5a0:	6878      	ldr	r0, [r7, #4]
 801b5a2:	f7fd f80b 	bl	80185bc <pbuf_free>
  return;
 801b5a6:	e00c      	b.n	801b5c2 <tcp_input+0x806>
    goto dropped;
 801b5a8:	bf00      	nop
 801b5aa:	e006      	b.n	801b5ba <tcp_input+0x7fe>
    goto dropped;
 801b5ac:	bf00      	nop
 801b5ae:	e004      	b.n	801b5ba <tcp_input+0x7fe>
    goto dropped;
 801b5b0:	bf00      	nop
 801b5b2:	e002      	b.n	801b5ba <tcp_input+0x7fe>
      goto dropped;
 801b5b4:	bf00      	nop
 801b5b6:	e000      	b.n	801b5ba <tcp_input+0x7fe>
      goto dropped;
 801b5b8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801b5ba:	6878      	ldr	r0, [r7, #4]
 801b5bc:	f7fc fffe 	bl	80185bc <pbuf_free>
 801b5c0:	e000      	b.n	801b5c4 <tcp_input+0x808>
  return;
 801b5c2:	bf00      	nop
}
 801b5c4:	372c      	adds	r7, #44	; 0x2c
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	bd90      	pop	{r4, r7, pc}
 801b5ca:	bf00      	nop
 801b5cc:	20016020 	.word	0x20016020
 801b5d0:	2001601c 	.word	0x2001601c
 801b5d4:	20015fec 	.word	0x20015fec
 801b5d8:	20015ffc 	.word	0x20015ffc
 801b5dc:	20016010 	.word	0x20016010
 801b5e0:	20016016 	.word	0x20016016
 801b5e4:	2001600c 	.word	0x2001600c
 801b5e8:	20012468 	.word	0x20012468
 801b5ec:	2001246c 	.word	0x2001246c

0801b5f0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801b5f0:	b580      	push	{r7, lr}
 801b5f2:	b082      	sub	sp, #8
 801b5f4:	af00      	add	r7, sp, #0
 801b5f6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d106      	bne.n	801b60c <tcp_input_delayed_close+0x1c>
 801b5fe:	4b17      	ldr	r3, [pc, #92]	; (801b65c <tcp_input_delayed_close+0x6c>)
 801b600:	f240 225a 	movw	r2, #602	; 0x25a
 801b604:	4916      	ldr	r1, [pc, #88]	; (801b660 <tcp_input_delayed_close+0x70>)
 801b606:	4817      	ldr	r0, [pc, #92]	; (801b664 <tcp_input_delayed_close+0x74>)
 801b608:	f009 fbda 	bl	8024dc0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801b60c:	4b16      	ldr	r3, [pc, #88]	; (801b668 <tcp_input_delayed_close+0x78>)
 801b60e:	781b      	ldrb	r3, [r3, #0]
 801b610:	f003 0310 	and.w	r3, r3, #16
 801b614:	2b00      	cmp	r3, #0
 801b616:	d01c      	beq.n	801b652 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801b618:	687b      	ldr	r3, [r7, #4]
 801b61a:	8b5b      	ldrh	r3, [r3, #26]
 801b61c:	f003 0310 	and.w	r3, r3, #16
 801b620:	2b00      	cmp	r3, #0
 801b622:	d10d      	bne.n	801b640 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801b624:	687b      	ldr	r3, [r7, #4]
 801b626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b62a:	2b00      	cmp	r3, #0
 801b62c:	d008      	beq.n	801b640 <tcp_input_delayed_close+0x50>
 801b62e:	687b      	ldr	r3, [r7, #4]
 801b630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b634:	687a      	ldr	r2, [r7, #4]
 801b636:	6912      	ldr	r2, [r2, #16]
 801b638:	f06f 010e 	mvn.w	r1, #14
 801b63c:	4610      	mov	r0, r2
 801b63e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b640:	6879      	ldr	r1, [r7, #4]
 801b642:	480a      	ldr	r0, [pc, #40]	; (801b66c <tcp_input_delayed_close+0x7c>)
 801b644:	f7ff fa42 	bl	801aacc <tcp_pcb_remove>
    tcp_free(pcb);
 801b648:	6878      	ldr	r0, [r7, #4]
 801b64a:	f7fd fbcd 	bl	8018de8 <tcp_free>
    return 1;
 801b64e:	2301      	movs	r3, #1
 801b650:	e000      	b.n	801b654 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801b652:	2300      	movs	r3, #0
}
 801b654:	4618      	mov	r0, r3
 801b656:	3708      	adds	r7, #8
 801b658:	46bd      	mov	sp, r7
 801b65a:	bd80      	pop	{r7, pc}
 801b65c:	0802c3f4 	.word	0x0802c3f4
 801b660:	0802c5c4 	.word	0x0802c5c4
 801b664:	0802c440 	.word	0x0802c440
 801b668:	20016019 	.word	0x20016019
 801b66c:	20015fe0 	.word	0x20015fe0

0801b670 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801b670:	b590      	push	{r4, r7, lr}
 801b672:	b08b      	sub	sp, #44	; 0x2c
 801b674:	af04      	add	r7, sp, #16
 801b676:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801b678:	4b6f      	ldr	r3, [pc, #444]	; (801b838 <tcp_listen_input+0x1c8>)
 801b67a:	781b      	ldrb	r3, [r3, #0]
 801b67c:	f003 0304 	and.w	r3, r3, #4
 801b680:	2b00      	cmp	r3, #0
 801b682:	f040 80d2 	bne.w	801b82a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801b686:	687b      	ldr	r3, [r7, #4]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d106      	bne.n	801b69a <tcp_listen_input+0x2a>
 801b68c:	4b6b      	ldr	r3, [pc, #428]	; (801b83c <tcp_listen_input+0x1cc>)
 801b68e:	f240 2281 	movw	r2, #641	; 0x281
 801b692:	496b      	ldr	r1, [pc, #428]	; (801b840 <tcp_listen_input+0x1d0>)
 801b694:	486b      	ldr	r0, [pc, #428]	; (801b844 <tcp_listen_input+0x1d4>)
 801b696:	f009 fb93 	bl	8024dc0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801b69a:	4b67      	ldr	r3, [pc, #412]	; (801b838 <tcp_listen_input+0x1c8>)
 801b69c:	781b      	ldrb	r3, [r3, #0]
 801b69e:	f003 0310 	and.w	r3, r3, #16
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	d019      	beq.n	801b6da <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b6a6:	4b68      	ldr	r3, [pc, #416]	; (801b848 <tcp_listen_input+0x1d8>)
 801b6a8:	6819      	ldr	r1, [r3, #0]
 801b6aa:	4b68      	ldr	r3, [pc, #416]	; (801b84c <tcp_listen_input+0x1dc>)
 801b6ac:	881b      	ldrh	r3, [r3, #0]
 801b6ae:	461a      	mov	r2, r3
 801b6b0:	4b67      	ldr	r3, [pc, #412]	; (801b850 <tcp_listen_input+0x1e0>)
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b6b6:	4b67      	ldr	r3, [pc, #412]	; (801b854 <tcp_listen_input+0x1e4>)
 801b6b8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b6ba:	885b      	ldrh	r3, [r3, #2]
 801b6bc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b6be:	4a65      	ldr	r2, [pc, #404]	; (801b854 <tcp_listen_input+0x1e4>)
 801b6c0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b6c2:	8812      	ldrh	r2, [r2, #0]
 801b6c4:	b292      	uxth	r2, r2
 801b6c6:	9202      	str	r2, [sp, #8]
 801b6c8:	9301      	str	r3, [sp, #4]
 801b6ca:	4b63      	ldr	r3, [pc, #396]	; (801b858 <tcp_listen_input+0x1e8>)
 801b6cc:	9300      	str	r3, [sp, #0]
 801b6ce:	4b63      	ldr	r3, [pc, #396]	; (801b85c <tcp_listen_input+0x1ec>)
 801b6d0:	4602      	mov	r2, r0
 801b6d2:	6878      	ldr	r0, [r7, #4]
 801b6d4:	f003 fbd8 	bl	801ee88 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801b6d8:	e0a9      	b.n	801b82e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801b6da:	4b57      	ldr	r3, [pc, #348]	; (801b838 <tcp_listen_input+0x1c8>)
 801b6dc:	781b      	ldrb	r3, [r3, #0]
 801b6de:	f003 0302 	and.w	r3, r3, #2
 801b6e2:	2b00      	cmp	r3, #0
 801b6e4:	f000 80a3 	beq.w	801b82e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801b6e8:	687b      	ldr	r3, [r7, #4]
 801b6ea:	7d5b      	ldrb	r3, [r3, #21]
 801b6ec:	4618      	mov	r0, r3
 801b6ee:	f7ff f841 	bl	801a774 <tcp_alloc>
 801b6f2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801b6f4:	697b      	ldr	r3, [r7, #20]
 801b6f6:	2b00      	cmp	r3, #0
 801b6f8:	d111      	bne.n	801b71e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b6fa:	687b      	ldr	r3, [r7, #4]
 801b6fc:	699b      	ldr	r3, [r3, #24]
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d00a      	beq.n	801b718 <tcp_listen_input+0xa8>
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	699b      	ldr	r3, [r3, #24]
 801b706:	687a      	ldr	r2, [r7, #4]
 801b708:	6910      	ldr	r0, [r2, #16]
 801b70a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b70e:	2100      	movs	r1, #0
 801b710:	4798      	blx	r3
 801b712:	4603      	mov	r3, r0
 801b714:	73bb      	strb	r3, [r7, #14]
      return;
 801b716:	e08b      	b.n	801b830 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801b718:	23f0      	movs	r3, #240	; 0xf0
 801b71a:	73bb      	strb	r3, [r7, #14]
      return;
 801b71c:	e088      	b.n	801b830 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801b71e:	4b50      	ldr	r3, [pc, #320]	; (801b860 <tcp_listen_input+0x1f0>)
 801b720:	695a      	ldr	r2, [r3, #20]
 801b722:	697b      	ldr	r3, [r7, #20]
 801b724:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801b726:	4b4e      	ldr	r3, [pc, #312]	; (801b860 <tcp_listen_input+0x1f0>)
 801b728:	691a      	ldr	r2, [r3, #16]
 801b72a:	697b      	ldr	r3, [r7, #20]
 801b72c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	8ada      	ldrh	r2, [r3, #22]
 801b732:	697b      	ldr	r3, [r7, #20]
 801b734:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801b736:	4b47      	ldr	r3, [pc, #284]	; (801b854 <tcp_listen_input+0x1e4>)
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	881b      	ldrh	r3, [r3, #0]
 801b73c:	b29a      	uxth	r2, r3
 801b73e:	697b      	ldr	r3, [r7, #20]
 801b740:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801b742:	697b      	ldr	r3, [r7, #20]
 801b744:	2203      	movs	r2, #3
 801b746:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801b748:	4b41      	ldr	r3, [pc, #260]	; (801b850 <tcp_listen_input+0x1e0>)
 801b74a:	681b      	ldr	r3, [r3, #0]
 801b74c:	1c5a      	adds	r2, r3, #1
 801b74e:	697b      	ldr	r3, [r7, #20]
 801b750:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801b752:	697b      	ldr	r3, [r7, #20]
 801b754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b756:	697b      	ldr	r3, [r7, #20]
 801b758:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801b75a:	6978      	ldr	r0, [r7, #20]
 801b75c:	f7ff fa4a 	bl	801abf4 <tcp_next_iss>
 801b760:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801b762:	697b      	ldr	r3, [r7, #20]
 801b764:	693a      	ldr	r2, [r7, #16]
 801b766:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801b768:	697b      	ldr	r3, [r7, #20]
 801b76a:	693a      	ldr	r2, [r7, #16]
 801b76c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801b76e:	697b      	ldr	r3, [r7, #20]
 801b770:	693a      	ldr	r2, [r7, #16]
 801b772:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801b774:	697b      	ldr	r3, [r7, #20]
 801b776:	693a      	ldr	r2, [r7, #16]
 801b778:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801b77a:	4b35      	ldr	r3, [pc, #212]	; (801b850 <tcp_listen_input+0x1e0>)
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	1e5a      	subs	r2, r3, #1
 801b780:	697b      	ldr	r3, [r7, #20]
 801b782:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801b784:	687b      	ldr	r3, [r7, #4]
 801b786:	691a      	ldr	r2, [r3, #16]
 801b788:	697b      	ldr	r3, [r7, #20]
 801b78a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801b78c:	697b      	ldr	r3, [r7, #20]
 801b78e:	687a      	ldr	r2, [r7, #4]
 801b790:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	7a5b      	ldrb	r3, [r3, #9]
 801b796:	f003 030c 	and.w	r3, r3, #12
 801b79a:	b2da      	uxtb	r2, r3
 801b79c:	697b      	ldr	r3, [r7, #20]
 801b79e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801b7a0:	687b      	ldr	r3, [r7, #4]
 801b7a2:	7a1a      	ldrb	r2, [r3, #8]
 801b7a4:	697b      	ldr	r3, [r7, #20]
 801b7a6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801b7a8:	4b2e      	ldr	r3, [pc, #184]	; (801b864 <tcp_listen_input+0x1f4>)
 801b7aa:	681a      	ldr	r2, [r3, #0]
 801b7ac:	697b      	ldr	r3, [r7, #20]
 801b7ae:	60da      	str	r2, [r3, #12]
 801b7b0:	4a2c      	ldr	r2, [pc, #176]	; (801b864 <tcp_listen_input+0x1f4>)
 801b7b2:	697b      	ldr	r3, [r7, #20]
 801b7b4:	6013      	str	r3, [r2, #0]
 801b7b6:	f003 fd29 	bl	801f20c <tcp_timer_needed>
 801b7ba:	4b2b      	ldr	r3, [pc, #172]	; (801b868 <tcp_listen_input+0x1f8>)
 801b7bc:	2201      	movs	r2, #1
 801b7be:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801b7c0:	6978      	ldr	r0, [r7, #20]
 801b7c2:	f001 fd8f 	bl	801d2e4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801b7c6:	4b23      	ldr	r3, [pc, #140]	; (801b854 <tcp_listen_input+0x1e4>)
 801b7c8:	681b      	ldr	r3, [r3, #0]
 801b7ca:	89db      	ldrh	r3, [r3, #14]
 801b7cc:	b29a      	uxth	r2, r3
 801b7ce:	697b      	ldr	r3, [r7, #20]
 801b7d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801b7d4:	697b      	ldr	r3, [r7, #20]
 801b7d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801b7da:	697b      	ldr	r3, [r7, #20]
 801b7dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801b7e0:	697b      	ldr	r3, [r7, #20]
 801b7e2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801b7e4:	697b      	ldr	r3, [r7, #20]
 801b7e6:	3304      	adds	r3, #4
 801b7e8:	4618      	mov	r0, r3
 801b7ea:	f005 fcfb 	bl	80211e4 <ip4_route>
 801b7ee:	4601      	mov	r1, r0
 801b7f0:	697b      	ldr	r3, [r7, #20]
 801b7f2:	3304      	adds	r3, #4
 801b7f4:	461a      	mov	r2, r3
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	f7ff fa22 	bl	801ac40 <tcp_eff_send_mss_netif>
 801b7fc:	4603      	mov	r3, r0
 801b7fe:	461a      	mov	r2, r3
 801b800:	697b      	ldr	r3, [r7, #20]
 801b802:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801b804:	2112      	movs	r1, #18
 801b806:	6978      	ldr	r0, [r7, #20]
 801b808:	f002 fc9c 	bl	801e144 <tcp_enqueue_flags>
 801b80c:	4603      	mov	r3, r0
 801b80e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801b810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b814:	2b00      	cmp	r3, #0
 801b816:	d004      	beq.n	801b822 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801b818:	2100      	movs	r1, #0
 801b81a:	6978      	ldr	r0, [r7, #20]
 801b81c:	f7fd fd6a 	bl	80192f4 <tcp_abandon>
      return;
 801b820:	e006      	b.n	801b830 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801b822:	6978      	ldr	r0, [r7, #20]
 801b824:	f002 fd7c 	bl	801e320 <tcp_output>
  return;
 801b828:	e001      	b.n	801b82e <tcp_listen_input+0x1be>
    return;
 801b82a:	bf00      	nop
 801b82c:	e000      	b.n	801b830 <tcp_listen_input+0x1c0>
  return;
 801b82e:	bf00      	nop
}
 801b830:	371c      	adds	r7, #28
 801b832:	46bd      	mov	sp, r7
 801b834:	bd90      	pop	{r4, r7, pc}
 801b836:	bf00      	nop
 801b838:	20016018 	.word	0x20016018
 801b83c:	0802c3f4 	.word	0x0802c3f4
 801b840:	0802c5ec 	.word	0x0802c5ec
 801b844:	0802c440 	.word	0x0802c440
 801b848:	20016010 	.word	0x20016010
 801b84c:	20016016 	.word	0x20016016
 801b850:	2001600c 	.word	0x2001600c
 801b854:	20015ffc 	.word	0x20015ffc
 801b858:	20012468 	.word	0x20012468
 801b85c:	2001246c 	.word	0x2001246c
 801b860:	20012458 	.word	0x20012458
 801b864:	20015fe0 	.word	0x20015fe0
 801b868:	20015fe8 	.word	0x20015fe8

0801b86c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801b86c:	b580      	push	{r7, lr}
 801b86e:	b086      	sub	sp, #24
 801b870:	af04      	add	r7, sp, #16
 801b872:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801b874:	4b2f      	ldr	r3, [pc, #188]	; (801b934 <tcp_timewait_input+0xc8>)
 801b876:	781b      	ldrb	r3, [r3, #0]
 801b878:	f003 0304 	and.w	r3, r3, #4
 801b87c:	2b00      	cmp	r3, #0
 801b87e:	d153      	bne.n	801b928 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	2b00      	cmp	r3, #0
 801b884:	d106      	bne.n	801b894 <tcp_timewait_input+0x28>
 801b886:	4b2c      	ldr	r3, [pc, #176]	; (801b938 <tcp_timewait_input+0xcc>)
 801b888:	f240 22ee 	movw	r2, #750	; 0x2ee
 801b88c:	492b      	ldr	r1, [pc, #172]	; (801b93c <tcp_timewait_input+0xd0>)
 801b88e:	482c      	ldr	r0, [pc, #176]	; (801b940 <tcp_timewait_input+0xd4>)
 801b890:	f009 fa96 	bl	8024dc0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801b894:	4b27      	ldr	r3, [pc, #156]	; (801b934 <tcp_timewait_input+0xc8>)
 801b896:	781b      	ldrb	r3, [r3, #0]
 801b898:	f003 0302 	and.w	r3, r3, #2
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d02a      	beq.n	801b8f6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801b8a0:	4b28      	ldr	r3, [pc, #160]	; (801b944 <tcp_timewait_input+0xd8>)
 801b8a2:	681a      	ldr	r2, [r3, #0]
 801b8a4:	687b      	ldr	r3, [r7, #4]
 801b8a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8a8:	1ad3      	subs	r3, r2, r3
 801b8aa:	2b00      	cmp	r3, #0
 801b8ac:	db2d      	blt.n	801b90a <tcp_timewait_input+0x9e>
 801b8ae:	4b25      	ldr	r3, [pc, #148]	; (801b944 <tcp_timewait_input+0xd8>)
 801b8b0:	681a      	ldr	r2, [r3, #0]
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8b6:	6879      	ldr	r1, [r7, #4]
 801b8b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b8ba:	440b      	add	r3, r1
 801b8bc:	1ad3      	subs	r3, r2, r3
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	dc23      	bgt.n	801b90a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b8c2:	4b21      	ldr	r3, [pc, #132]	; (801b948 <tcp_timewait_input+0xdc>)
 801b8c4:	6819      	ldr	r1, [r3, #0]
 801b8c6:	4b21      	ldr	r3, [pc, #132]	; (801b94c <tcp_timewait_input+0xe0>)
 801b8c8:	881b      	ldrh	r3, [r3, #0]
 801b8ca:	461a      	mov	r2, r3
 801b8cc:	4b1d      	ldr	r3, [pc, #116]	; (801b944 <tcp_timewait_input+0xd8>)
 801b8ce:	681b      	ldr	r3, [r3, #0]
 801b8d0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b8d2:	4b1f      	ldr	r3, [pc, #124]	; (801b950 <tcp_timewait_input+0xe4>)
 801b8d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b8d6:	885b      	ldrh	r3, [r3, #2]
 801b8d8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801b8da:	4a1d      	ldr	r2, [pc, #116]	; (801b950 <tcp_timewait_input+0xe4>)
 801b8dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801b8de:	8812      	ldrh	r2, [r2, #0]
 801b8e0:	b292      	uxth	r2, r2
 801b8e2:	9202      	str	r2, [sp, #8]
 801b8e4:	9301      	str	r3, [sp, #4]
 801b8e6:	4b1b      	ldr	r3, [pc, #108]	; (801b954 <tcp_timewait_input+0xe8>)
 801b8e8:	9300      	str	r3, [sp, #0]
 801b8ea:	4b1b      	ldr	r3, [pc, #108]	; (801b958 <tcp_timewait_input+0xec>)
 801b8ec:	4602      	mov	r2, r0
 801b8ee:	6878      	ldr	r0, [r7, #4]
 801b8f0:	f003 faca 	bl	801ee88 <tcp_rst>
      return;
 801b8f4:	e01b      	b.n	801b92e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801b8f6:	4b0f      	ldr	r3, [pc, #60]	; (801b934 <tcp_timewait_input+0xc8>)
 801b8f8:	781b      	ldrb	r3, [r3, #0]
 801b8fa:	f003 0301 	and.w	r3, r3, #1
 801b8fe:	2b00      	cmp	r3, #0
 801b900:	d003      	beq.n	801b90a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801b902:	4b16      	ldr	r3, [pc, #88]	; (801b95c <tcp_timewait_input+0xf0>)
 801b904:	681a      	ldr	r2, [r3, #0]
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801b90a:	4b10      	ldr	r3, [pc, #64]	; (801b94c <tcp_timewait_input+0xe0>)
 801b90c:	881b      	ldrh	r3, [r3, #0]
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d00c      	beq.n	801b92c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	8b5b      	ldrh	r3, [r3, #26]
 801b916:	f043 0302 	orr.w	r3, r3, #2
 801b91a:	b29a      	uxth	r2, r3
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b920:	6878      	ldr	r0, [r7, #4]
 801b922:	f002 fcfd 	bl	801e320 <tcp_output>
  }
  return;
 801b926:	e001      	b.n	801b92c <tcp_timewait_input+0xc0>
    return;
 801b928:	bf00      	nop
 801b92a:	e000      	b.n	801b92e <tcp_timewait_input+0xc2>
  return;
 801b92c:	bf00      	nop
}
 801b92e:	3708      	adds	r7, #8
 801b930:	46bd      	mov	sp, r7
 801b932:	bd80      	pop	{r7, pc}
 801b934:	20016018 	.word	0x20016018
 801b938:	0802c3f4 	.word	0x0802c3f4
 801b93c:	0802c60c 	.word	0x0802c60c
 801b940:	0802c440 	.word	0x0802c440
 801b944:	2001600c 	.word	0x2001600c
 801b948:	20016010 	.word	0x20016010
 801b94c:	20016016 	.word	0x20016016
 801b950:	20015ffc 	.word	0x20015ffc
 801b954:	20012468 	.word	0x20012468
 801b958:	2001246c 	.word	0x2001246c
 801b95c:	20015fd4 	.word	0x20015fd4

0801b960 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801b960:	b590      	push	{r4, r7, lr}
 801b962:	b08d      	sub	sp, #52	; 0x34
 801b964:	af04      	add	r7, sp, #16
 801b966:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801b968:	2300      	movs	r3, #0
 801b96a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801b96c:	2300      	movs	r3, #0
 801b96e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801b970:	687b      	ldr	r3, [r7, #4]
 801b972:	2b00      	cmp	r3, #0
 801b974:	d106      	bne.n	801b984 <tcp_process+0x24>
 801b976:	4b9d      	ldr	r3, [pc, #628]	; (801bbec <tcp_process+0x28c>)
 801b978:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801b97c:	499c      	ldr	r1, [pc, #624]	; (801bbf0 <tcp_process+0x290>)
 801b97e:	489d      	ldr	r0, [pc, #628]	; (801bbf4 <tcp_process+0x294>)
 801b980:	f009 fa1e 	bl	8024dc0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801b984:	4b9c      	ldr	r3, [pc, #624]	; (801bbf8 <tcp_process+0x298>)
 801b986:	781b      	ldrb	r3, [r3, #0]
 801b988:	f003 0304 	and.w	r3, r3, #4
 801b98c:	2b00      	cmp	r3, #0
 801b98e:	d04e      	beq.n	801ba2e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801b990:	687b      	ldr	r3, [r7, #4]
 801b992:	7d1b      	ldrb	r3, [r3, #20]
 801b994:	2b02      	cmp	r3, #2
 801b996:	d108      	bne.n	801b9aa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801b998:	687b      	ldr	r3, [r7, #4]
 801b99a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801b99c:	4b97      	ldr	r3, [pc, #604]	; (801bbfc <tcp_process+0x29c>)
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	429a      	cmp	r2, r3
 801b9a2:	d123      	bne.n	801b9ec <tcp_process+0x8c>
        acceptable = 1;
 801b9a4:	2301      	movs	r3, #1
 801b9a6:	76fb      	strb	r3, [r7, #27]
 801b9a8:	e020      	b.n	801b9ec <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b9ae:	4b94      	ldr	r3, [pc, #592]	; (801bc00 <tcp_process+0x2a0>)
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	429a      	cmp	r2, r3
 801b9b4:	d102      	bne.n	801b9bc <tcp_process+0x5c>
        acceptable = 1;
 801b9b6:	2301      	movs	r3, #1
 801b9b8:	76fb      	strb	r3, [r7, #27]
 801b9ba:	e017      	b.n	801b9ec <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b9bc:	4b90      	ldr	r3, [pc, #576]	; (801bc00 <tcp_process+0x2a0>)
 801b9be:	681a      	ldr	r2, [r3, #0]
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9c4:	1ad3      	subs	r3, r2, r3
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	db10      	blt.n	801b9ec <tcp_process+0x8c>
 801b9ca:	4b8d      	ldr	r3, [pc, #564]	; (801bc00 <tcp_process+0x2a0>)
 801b9cc:	681a      	ldr	r2, [r3, #0]
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9d2:	6879      	ldr	r1, [r7, #4]
 801b9d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801b9d6:	440b      	add	r3, r1
 801b9d8:	1ad3      	subs	r3, r2, r3
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	dc06      	bgt.n	801b9ec <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801b9de:	687b      	ldr	r3, [r7, #4]
 801b9e0:	8b5b      	ldrh	r3, [r3, #26]
 801b9e2:	f043 0302 	orr.w	r3, r3, #2
 801b9e6:	b29a      	uxth	r2, r3
 801b9e8:	687b      	ldr	r3, [r7, #4]
 801b9ea:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801b9ec:	7efb      	ldrb	r3, [r7, #27]
 801b9ee:	2b00      	cmp	r3, #0
 801b9f0:	d01b      	beq.n	801ba2a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	7d1b      	ldrb	r3, [r3, #20]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d106      	bne.n	801ba08 <tcp_process+0xa8>
 801b9fa:	4b7c      	ldr	r3, [pc, #496]	; (801bbec <tcp_process+0x28c>)
 801b9fc:	f44f 724e 	mov.w	r2, #824	; 0x338
 801ba00:	4980      	ldr	r1, [pc, #512]	; (801bc04 <tcp_process+0x2a4>)
 801ba02:	487c      	ldr	r0, [pc, #496]	; (801bbf4 <tcp_process+0x294>)
 801ba04:	f009 f9dc 	bl	8024dc0 <iprintf>
      recv_flags |= TF_RESET;
 801ba08:	4b7f      	ldr	r3, [pc, #508]	; (801bc08 <tcp_process+0x2a8>)
 801ba0a:	781b      	ldrb	r3, [r3, #0]
 801ba0c:	f043 0308 	orr.w	r3, r3, #8
 801ba10:	b2da      	uxtb	r2, r3
 801ba12:	4b7d      	ldr	r3, [pc, #500]	; (801bc08 <tcp_process+0x2a8>)
 801ba14:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	8b5b      	ldrh	r3, [r3, #26]
 801ba1a:	f023 0301 	bic.w	r3, r3, #1
 801ba1e:	b29a      	uxth	r2, r3
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801ba24:	f06f 030d 	mvn.w	r3, #13
 801ba28:	e37a      	b.n	801c120 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801ba2a:	2300      	movs	r3, #0
 801ba2c:	e378      	b.n	801c120 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801ba2e:	4b72      	ldr	r3, [pc, #456]	; (801bbf8 <tcp_process+0x298>)
 801ba30:	781b      	ldrb	r3, [r3, #0]
 801ba32:	f003 0302 	and.w	r3, r3, #2
 801ba36:	2b00      	cmp	r3, #0
 801ba38:	d010      	beq.n	801ba5c <tcp_process+0xfc>
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	7d1b      	ldrb	r3, [r3, #20]
 801ba3e:	2b02      	cmp	r3, #2
 801ba40:	d00c      	beq.n	801ba5c <tcp_process+0xfc>
 801ba42:	687b      	ldr	r3, [r7, #4]
 801ba44:	7d1b      	ldrb	r3, [r3, #20]
 801ba46:	2b03      	cmp	r3, #3
 801ba48:	d008      	beq.n	801ba5c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801ba4a:	687b      	ldr	r3, [r7, #4]
 801ba4c:	8b5b      	ldrh	r3, [r3, #26]
 801ba4e:	f043 0302 	orr.w	r3, r3, #2
 801ba52:	b29a      	uxth	r2, r3
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801ba58:	2300      	movs	r3, #0
 801ba5a:	e361      	b.n	801c120 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801ba5c:	687b      	ldr	r3, [r7, #4]
 801ba5e:	8b5b      	ldrh	r3, [r3, #26]
 801ba60:	f003 0310 	and.w	r3, r3, #16
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d103      	bne.n	801ba70 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801ba68:	4b68      	ldr	r3, [pc, #416]	; (801bc0c <tcp_process+0x2ac>)
 801ba6a:	681a      	ldr	r2, [r3, #0]
 801ba6c:	687b      	ldr	r3, [r7, #4]
 801ba6e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801ba70:	687b      	ldr	r3, [r7, #4]
 801ba72:	2200      	movs	r2, #0
 801ba74:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
  pcb->persist_probe = 0;
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	2200      	movs	r2, #0
 801ba7c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
 801ba80:	6878      	ldr	r0, [r7, #4]
 801ba82:	f001 fc2f 	bl	801d2e4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	7d1b      	ldrb	r3, [r3, #20]
 801ba8a:	3b02      	subs	r3, #2
 801ba8c:	2b07      	cmp	r3, #7
 801ba8e:	f200 8337 	bhi.w	801c100 <tcp_process+0x7a0>
 801ba92:	a201      	add	r2, pc, #4	; (adr r2, 801ba98 <tcp_process+0x138>)
 801ba94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba98:	0801bab9 	.word	0x0801bab9
 801ba9c:	0801bce9 	.word	0x0801bce9
 801baa0:	0801be61 	.word	0x0801be61
 801baa4:	0801be8b 	.word	0x0801be8b
 801baa8:	0801bfaf 	.word	0x0801bfaf
 801baac:	0801be61 	.word	0x0801be61
 801bab0:	0801c03b 	.word	0x0801c03b
 801bab4:	0801c0cb 	.word	0x0801c0cb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801bab8:	4b4f      	ldr	r3, [pc, #316]	; (801bbf8 <tcp_process+0x298>)
 801baba:	781b      	ldrb	r3, [r3, #0]
 801babc:	f003 0310 	and.w	r3, r3, #16
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	f000 80e4 	beq.w	801bc8e <tcp_process+0x32e>
 801bac6:	4b4c      	ldr	r3, [pc, #304]	; (801bbf8 <tcp_process+0x298>)
 801bac8:	781b      	ldrb	r3, [r3, #0]
 801baca:	f003 0302 	and.w	r3, r3, #2
 801bace:	2b00      	cmp	r3, #0
 801bad0:	f000 80dd 	beq.w	801bc8e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bad8:	1c5a      	adds	r2, r3, #1
 801bada:	4b48      	ldr	r3, [pc, #288]	; (801bbfc <tcp_process+0x29c>)
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	429a      	cmp	r2, r3
 801bae0:	f040 80d5 	bne.w	801bc8e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801bae4:	4b46      	ldr	r3, [pc, #280]	; (801bc00 <tcp_process+0x2a0>)
 801bae6:	681b      	ldr	r3, [r3, #0]
 801bae8:	1c5a      	adds	r2, r3, #1
 801baea:	687b      	ldr	r3, [r7, #4]
 801baec:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801baf2:	687b      	ldr	r3, [r7, #4]
 801baf4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801baf6:	4b41      	ldr	r3, [pc, #260]	; (801bbfc <tcp_process+0x29c>)
 801baf8:	681a      	ldr	r2, [r3, #0]
 801bafa:	687b      	ldr	r3, [r7, #4]
 801bafc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801bafe:	4b44      	ldr	r3, [pc, #272]	; (801bc10 <tcp_process+0x2b0>)
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	89db      	ldrh	r3, [r3, #14]
 801bb04:	b29a      	uxth	r2, r3
 801bb06:	687b      	ldr	r3, [r7, #4]
 801bb08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801bb18:	4b39      	ldr	r3, [pc, #228]	; (801bc00 <tcp_process+0x2a0>)
 801bb1a:	681b      	ldr	r3, [r3, #0]
 801bb1c:	1e5a      	subs	r2, r3, #1
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	2204      	movs	r2, #4
 801bb26:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	3304      	adds	r3, #4
 801bb30:	4618      	mov	r0, r3
 801bb32:	f005 fb57 	bl	80211e4 <ip4_route>
 801bb36:	4601      	mov	r1, r0
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	3304      	adds	r3, #4
 801bb3c:	461a      	mov	r2, r3
 801bb3e:	4620      	mov	r0, r4
 801bb40:	f7ff f87e 	bl	801ac40 <tcp_eff_send_mss_netif>
 801bb44:	4603      	mov	r3, r0
 801bb46:	461a      	mov	r2, r3
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bb50:	009a      	lsls	r2, r3, #2
 801bb52:	687b      	ldr	r3, [r7, #4]
 801bb54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bb56:	005b      	lsls	r3, r3, #1
 801bb58:	f241 111c 	movw	r1, #4380	; 0x111c
 801bb5c:	428b      	cmp	r3, r1
 801bb5e:	bf38      	it	cc
 801bb60:	460b      	movcc	r3, r1
 801bb62:	429a      	cmp	r2, r3
 801bb64:	d204      	bcs.n	801bb70 <tcp_process+0x210>
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bb6a:	009b      	lsls	r3, r3, #2
 801bb6c:	b29b      	uxth	r3, r3
 801bb6e:	e00d      	b.n	801bb8c <tcp_process+0x22c>
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bb74:	005b      	lsls	r3, r3, #1
 801bb76:	f241 121c 	movw	r2, #4380	; 0x111c
 801bb7a:	4293      	cmp	r3, r2
 801bb7c:	d904      	bls.n	801bb88 <tcp_process+0x228>
 801bb7e:	687b      	ldr	r3, [r7, #4]
 801bb80:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bb82:	005b      	lsls	r3, r3, #1
 801bb84:	b29b      	uxth	r3, r3
 801bb86:	e001      	b.n	801bb8c <tcp_process+0x22c>
 801bb88:	f241 131c 	movw	r3, #4380	; 0x111c
 801bb8c:	687a      	ldr	r2, [r7, #4]
 801bb8e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d106      	bne.n	801bbaa <tcp_process+0x24a>
 801bb9c:	4b13      	ldr	r3, [pc, #76]	; (801bbec <tcp_process+0x28c>)
 801bb9e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801bba2:	491c      	ldr	r1, [pc, #112]	; (801bc14 <tcp_process+0x2b4>)
 801bba4:	4813      	ldr	r0, [pc, #76]	; (801bbf4 <tcp_process+0x294>)
 801bba6:	f009 f90b 	bl	8024dc0 <iprintf>
        --pcb->snd_queuelen;
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801bbb0:	3b01      	subs	r3, #1
 801bbb2:	b29a      	uxth	r2, r3
 801bbb4:	687b      	ldr	r3, [r7, #4]
 801bbb6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801bbba:	687b      	ldr	r3, [r7, #4]
 801bbbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bbbe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801bbc0:	69fb      	ldr	r3, [r7, #28]
 801bbc2:	2b00      	cmp	r3, #0
 801bbc4:	d12a      	bne.n	801bc1c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801bbca:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801bbcc:	69fb      	ldr	r3, [r7, #28]
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d106      	bne.n	801bbe0 <tcp_process+0x280>
 801bbd2:	4b06      	ldr	r3, [pc, #24]	; (801bbec <tcp_process+0x28c>)
 801bbd4:	f44f 725d 	mov.w	r2, #884	; 0x374
 801bbd8:	490f      	ldr	r1, [pc, #60]	; (801bc18 <tcp_process+0x2b8>)
 801bbda:	4806      	ldr	r0, [pc, #24]	; (801bbf4 <tcp_process+0x294>)
 801bbdc:	f009 f8f0 	bl	8024dc0 <iprintf>
          pcb->unsent = rseg->next;
 801bbe0:	69fb      	ldr	r3, [r7, #28]
 801bbe2:	681a      	ldr	r2, [r3, #0]
 801bbe4:	687b      	ldr	r3, [r7, #4]
 801bbe6:	66da      	str	r2, [r3, #108]	; 0x6c
 801bbe8:	e01c      	b.n	801bc24 <tcp_process+0x2c4>
 801bbea:	bf00      	nop
 801bbec:	0802c3f4 	.word	0x0802c3f4
 801bbf0:	0802c62c 	.word	0x0802c62c
 801bbf4:	0802c440 	.word	0x0802c440
 801bbf8:	20016018 	.word	0x20016018
 801bbfc:	20016010 	.word	0x20016010
 801bc00:	2001600c 	.word	0x2001600c
 801bc04:	0802c648 	.word	0x0802c648
 801bc08:	20016019 	.word	0x20016019
 801bc0c:	20015fd4 	.word	0x20015fd4
 801bc10:	20015ffc 	.word	0x20015ffc
 801bc14:	0802c668 	.word	0x0802c668
 801bc18:	0802c680 	.word	0x0802c680
        } else {
          pcb->unacked = rseg->next;
 801bc1c:	69fb      	ldr	r3, [r7, #28]
 801bc1e:	681a      	ldr	r2, [r3, #0]
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801bc24:	69f8      	ldr	r0, [r7, #28]
 801bc26:	f7fe fc3c 	bl	801a4a2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801bc2e:	2b00      	cmp	r3, #0
 801bc30:	d104      	bne.n	801bc3c <tcp_process+0x2dc>
          pcb->rtime = -1;
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801bc38:	861a      	strh	r2, [r3, #48]	; 0x30
 801bc3a:	e006      	b.n	801bc4a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	2200      	movs	r2, #0
 801bc40:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	2200      	movs	r2, #0
 801bc46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801bc4a:	687b      	ldr	r3, [r7, #4]
 801bc4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc50:	2b00      	cmp	r3, #0
 801bc52:	d00a      	beq.n	801bc6a <tcp_process+0x30a>
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801bc5a:	687a      	ldr	r2, [r7, #4]
 801bc5c:	6910      	ldr	r0, [r2, #16]
 801bc5e:	2200      	movs	r2, #0
 801bc60:	6879      	ldr	r1, [r7, #4]
 801bc62:	4798      	blx	r3
 801bc64:	4603      	mov	r3, r0
 801bc66:	76bb      	strb	r3, [r7, #26]
 801bc68:	e001      	b.n	801bc6e <tcp_process+0x30e>
 801bc6a:	2300      	movs	r3, #0
 801bc6c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801bc6e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bc72:	f113 0f0d 	cmn.w	r3, #13
 801bc76:	d102      	bne.n	801bc7e <tcp_process+0x31e>
          return ERR_ABRT;
 801bc78:	f06f 030c 	mvn.w	r3, #12
 801bc7c:	e250      	b.n	801c120 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	8b5b      	ldrh	r3, [r3, #26]
 801bc82:	f043 0302 	orr.w	r3, r3, #2
 801bc86:	b29a      	uxth	r2, r3
 801bc88:	687b      	ldr	r3, [r7, #4]
 801bc8a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801bc8c:	e23a      	b.n	801c104 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801bc8e:	4b98      	ldr	r3, [pc, #608]	; (801bef0 <tcp_process+0x590>)
 801bc90:	781b      	ldrb	r3, [r3, #0]
 801bc92:	f003 0310 	and.w	r3, r3, #16
 801bc96:	2b00      	cmp	r3, #0
 801bc98:	f000 8234 	beq.w	801c104 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bc9c:	4b95      	ldr	r3, [pc, #596]	; (801bef4 <tcp_process+0x594>)
 801bc9e:	6819      	ldr	r1, [r3, #0]
 801bca0:	4b95      	ldr	r3, [pc, #596]	; (801bef8 <tcp_process+0x598>)
 801bca2:	881b      	ldrh	r3, [r3, #0]
 801bca4:	461a      	mov	r2, r3
 801bca6:	4b95      	ldr	r3, [pc, #596]	; (801befc <tcp_process+0x59c>)
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bcac:	4b94      	ldr	r3, [pc, #592]	; (801bf00 <tcp_process+0x5a0>)
 801bcae:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bcb0:	885b      	ldrh	r3, [r3, #2]
 801bcb2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bcb4:	4a92      	ldr	r2, [pc, #584]	; (801bf00 <tcp_process+0x5a0>)
 801bcb6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bcb8:	8812      	ldrh	r2, [r2, #0]
 801bcba:	b292      	uxth	r2, r2
 801bcbc:	9202      	str	r2, [sp, #8]
 801bcbe:	9301      	str	r3, [sp, #4]
 801bcc0:	4b90      	ldr	r3, [pc, #576]	; (801bf04 <tcp_process+0x5a4>)
 801bcc2:	9300      	str	r3, [sp, #0]
 801bcc4:	4b90      	ldr	r3, [pc, #576]	; (801bf08 <tcp_process+0x5a8>)
 801bcc6:	4602      	mov	r2, r0
 801bcc8:	6878      	ldr	r0, [r7, #4]
 801bcca:	f003 f8dd 	bl	801ee88 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801bcce:	687b      	ldr	r3, [r7, #4]
 801bcd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bcd4:	2b05      	cmp	r3, #5
 801bcd6:	f200 8215 	bhi.w	801c104 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	2200      	movs	r2, #0
 801bcde:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801bce0:	6878      	ldr	r0, [r7, #4]
 801bce2:	f002 fea9 	bl	801ea38 <tcp_rexmit_rto>
      break;
 801bce6:	e20d      	b.n	801c104 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801bce8:	4b81      	ldr	r3, [pc, #516]	; (801bef0 <tcp_process+0x590>)
 801bcea:	781b      	ldrb	r3, [r3, #0]
 801bcec:	f003 0310 	and.w	r3, r3, #16
 801bcf0:	2b00      	cmp	r3, #0
 801bcf2:	f000 80a1 	beq.w	801be38 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bcf6:	4b7f      	ldr	r3, [pc, #508]	; (801bef4 <tcp_process+0x594>)
 801bcf8:	681a      	ldr	r2, [r3, #0]
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bcfe:	1ad3      	subs	r3, r2, r3
 801bd00:	3b01      	subs	r3, #1
 801bd02:	2b00      	cmp	r3, #0
 801bd04:	db7e      	blt.n	801be04 <tcp_process+0x4a4>
 801bd06:	4b7b      	ldr	r3, [pc, #492]	; (801bef4 <tcp_process+0x594>)
 801bd08:	681a      	ldr	r2, [r3, #0]
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd0e:	1ad3      	subs	r3, r2, r3
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	dc77      	bgt.n	801be04 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	2204      	movs	r2, #4
 801bd18:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d102      	bne.n	801bd28 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801bd22:	23fa      	movs	r3, #250	; 0xfa
 801bd24:	76bb      	strb	r3, [r7, #26]
 801bd26:	e01d      	b.n	801bd64 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bd2c:	699b      	ldr	r3, [r3, #24]
 801bd2e:	2b00      	cmp	r3, #0
 801bd30:	d106      	bne.n	801bd40 <tcp_process+0x3e0>
 801bd32:	4b76      	ldr	r3, [pc, #472]	; (801bf0c <tcp_process+0x5ac>)
 801bd34:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801bd38:	4975      	ldr	r1, [pc, #468]	; (801bf10 <tcp_process+0x5b0>)
 801bd3a:	4876      	ldr	r0, [pc, #472]	; (801bf14 <tcp_process+0x5b4>)
 801bd3c:	f009 f840 	bl	8024dc0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801bd40:	687b      	ldr	r3, [r7, #4]
 801bd42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bd44:	699b      	ldr	r3, [r3, #24]
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d00a      	beq.n	801bd60 <tcp_process+0x400>
 801bd4a:	687b      	ldr	r3, [r7, #4]
 801bd4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801bd4e:	699b      	ldr	r3, [r3, #24]
 801bd50:	687a      	ldr	r2, [r7, #4]
 801bd52:	6910      	ldr	r0, [r2, #16]
 801bd54:	2200      	movs	r2, #0
 801bd56:	6879      	ldr	r1, [r7, #4]
 801bd58:	4798      	blx	r3
 801bd5a:	4603      	mov	r3, r0
 801bd5c:	76bb      	strb	r3, [r7, #26]
 801bd5e:	e001      	b.n	801bd64 <tcp_process+0x404>
 801bd60:	23f0      	movs	r3, #240	; 0xf0
 801bd62:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801bd64:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d00a      	beq.n	801bd82 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801bd6c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801bd70:	f113 0f0d 	cmn.w	r3, #13
 801bd74:	d002      	beq.n	801bd7c <tcp_process+0x41c>
              tcp_abort(pcb);
 801bd76:	6878      	ldr	r0, [r7, #4]
 801bd78:	f7fd fb7a 	bl	8019470 <tcp_abort>
            }
            return ERR_ABRT;
 801bd7c:	f06f 030c 	mvn.w	r3, #12
 801bd80:	e1ce      	b.n	801c120 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801bd82:	6878      	ldr	r0, [r7, #4]
 801bd84:	f000 fae0 	bl	801c348 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801bd88:	4b63      	ldr	r3, [pc, #396]	; (801bf18 <tcp_process+0x5b8>)
 801bd8a:	881b      	ldrh	r3, [r3, #0]
 801bd8c:	2b00      	cmp	r3, #0
 801bd8e:	d005      	beq.n	801bd9c <tcp_process+0x43c>
            recv_acked--;
 801bd90:	4b61      	ldr	r3, [pc, #388]	; (801bf18 <tcp_process+0x5b8>)
 801bd92:	881b      	ldrh	r3, [r3, #0]
 801bd94:	3b01      	subs	r3, #1
 801bd96:	b29a      	uxth	r2, r3
 801bd98:	4b5f      	ldr	r3, [pc, #380]	; (801bf18 <tcp_process+0x5b8>)
 801bd9a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bd9c:	687b      	ldr	r3, [r7, #4]
 801bd9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bda0:	009a      	lsls	r2, r3, #2
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bda6:	005b      	lsls	r3, r3, #1
 801bda8:	f241 111c 	movw	r1, #4380	; 0x111c
 801bdac:	428b      	cmp	r3, r1
 801bdae:	bf38      	it	cc
 801bdb0:	460b      	movcc	r3, r1
 801bdb2:	429a      	cmp	r2, r3
 801bdb4:	d204      	bcs.n	801bdc0 <tcp_process+0x460>
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bdba:	009b      	lsls	r3, r3, #2
 801bdbc:	b29b      	uxth	r3, r3
 801bdbe:	e00d      	b.n	801bddc <tcp_process+0x47c>
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bdc4:	005b      	lsls	r3, r3, #1
 801bdc6:	f241 121c 	movw	r2, #4380	; 0x111c
 801bdca:	4293      	cmp	r3, r2
 801bdcc:	d904      	bls.n	801bdd8 <tcp_process+0x478>
 801bdce:	687b      	ldr	r3, [r7, #4]
 801bdd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bdd2:	005b      	lsls	r3, r3, #1
 801bdd4:	b29b      	uxth	r3, r3
 801bdd6:	e001      	b.n	801bddc <tcp_process+0x47c>
 801bdd8:	f241 131c 	movw	r3, #4380	; 0x111c
 801bddc:	687a      	ldr	r2, [r7, #4]
 801bdde:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801bde2:	4b4e      	ldr	r3, [pc, #312]	; (801bf1c <tcp_process+0x5bc>)
 801bde4:	781b      	ldrb	r3, [r3, #0]
 801bde6:	f003 0320 	and.w	r3, r3, #32
 801bdea:	2b00      	cmp	r3, #0
 801bdec:	d037      	beq.n	801be5e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801bdee:	687b      	ldr	r3, [r7, #4]
 801bdf0:	8b5b      	ldrh	r3, [r3, #26]
 801bdf2:	f043 0302 	orr.w	r3, r3, #2
 801bdf6:	b29a      	uxth	r2, r3
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801bdfc:	687b      	ldr	r3, [r7, #4]
 801bdfe:	2207      	movs	r2, #7
 801be00:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801be02:	e02c      	b.n	801be5e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801be04:	4b3b      	ldr	r3, [pc, #236]	; (801bef4 <tcp_process+0x594>)
 801be06:	6819      	ldr	r1, [r3, #0]
 801be08:	4b3b      	ldr	r3, [pc, #236]	; (801bef8 <tcp_process+0x598>)
 801be0a:	881b      	ldrh	r3, [r3, #0]
 801be0c:	461a      	mov	r2, r3
 801be0e:	4b3b      	ldr	r3, [pc, #236]	; (801befc <tcp_process+0x59c>)
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801be14:	4b3a      	ldr	r3, [pc, #232]	; (801bf00 <tcp_process+0x5a0>)
 801be16:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801be18:	885b      	ldrh	r3, [r3, #2]
 801be1a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801be1c:	4a38      	ldr	r2, [pc, #224]	; (801bf00 <tcp_process+0x5a0>)
 801be1e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801be20:	8812      	ldrh	r2, [r2, #0]
 801be22:	b292      	uxth	r2, r2
 801be24:	9202      	str	r2, [sp, #8]
 801be26:	9301      	str	r3, [sp, #4]
 801be28:	4b36      	ldr	r3, [pc, #216]	; (801bf04 <tcp_process+0x5a4>)
 801be2a:	9300      	str	r3, [sp, #0]
 801be2c:	4b36      	ldr	r3, [pc, #216]	; (801bf08 <tcp_process+0x5a8>)
 801be2e:	4602      	mov	r2, r0
 801be30:	6878      	ldr	r0, [r7, #4]
 801be32:	f003 f829 	bl	801ee88 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801be36:	e167      	b.n	801c108 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801be38:	4b2d      	ldr	r3, [pc, #180]	; (801bef0 <tcp_process+0x590>)
 801be3a:	781b      	ldrb	r3, [r3, #0]
 801be3c:	f003 0302 	and.w	r3, r3, #2
 801be40:	2b00      	cmp	r3, #0
 801be42:	f000 8161 	beq.w	801c108 <tcp_process+0x7a8>
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be4a:	1e5a      	subs	r2, r3, #1
 801be4c:	4b2b      	ldr	r3, [pc, #172]	; (801befc <tcp_process+0x59c>)
 801be4e:	681b      	ldr	r3, [r3, #0]
 801be50:	429a      	cmp	r2, r3
 801be52:	f040 8159 	bne.w	801c108 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801be56:	6878      	ldr	r0, [r7, #4]
 801be58:	f002 fe10 	bl	801ea7c <tcp_rexmit>
      break;
 801be5c:	e154      	b.n	801c108 <tcp_process+0x7a8>
 801be5e:	e153      	b.n	801c108 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801be60:	6878      	ldr	r0, [r7, #4]
 801be62:	f000 fa71 	bl	801c348 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801be66:	4b2d      	ldr	r3, [pc, #180]	; (801bf1c <tcp_process+0x5bc>)
 801be68:	781b      	ldrb	r3, [r3, #0]
 801be6a:	f003 0320 	and.w	r3, r3, #32
 801be6e:	2b00      	cmp	r3, #0
 801be70:	f000 814c 	beq.w	801c10c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801be74:	687b      	ldr	r3, [r7, #4]
 801be76:	8b5b      	ldrh	r3, [r3, #26]
 801be78:	f043 0302 	orr.w	r3, r3, #2
 801be7c:	b29a      	uxth	r2, r3
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	2207      	movs	r2, #7
 801be86:	751a      	strb	r2, [r3, #20]
      }
      break;
 801be88:	e140      	b.n	801c10c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801be8a:	6878      	ldr	r0, [r7, #4]
 801be8c:	f000 fa5c 	bl	801c348 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801be90:	4b22      	ldr	r3, [pc, #136]	; (801bf1c <tcp_process+0x5bc>)
 801be92:	781b      	ldrb	r3, [r3, #0]
 801be94:	f003 0320 	and.w	r3, r3, #32
 801be98:	2b00      	cmp	r3, #0
 801be9a:	d071      	beq.n	801bf80 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801be9c:	4b14      	ldr	r3, [pc, #80]	; (801bef0 <tcp_process+0x590>)
 801be9e:	781b      	ldrb	r3, [r3, #0]
 801bea0:	f003 0310 	and.w	r3, r3, #16
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d060      	beq.n	801bf6a <tcp_process+0x60a>
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801beac:	4b11      	ldr	r3, [pc, #68]	; (801bef4 <tcp_process+0x594>)
 801beae:	681b      	ldr	r3, [r3, #0]
 801beb0:	429a      	cmp	r2, r3
 801beb2:	d15a      	bne.n	801bf6a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801beb4:	687b      	ldr	r3, [r7, #4]
 801beb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d156      	bne.n	801bf6a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	8b5b      	ldrh	r3, [r3, #26]
 801bec0:	f043 0302 	orr.w	r3, r3, #2
 801bec4:	b29a      	uxth	r2, r3
 801bec6:	687b      	ldr	r3, [r7, #4]
 801bec8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801beca:	6878      	ldr	r0, [r7, #4]
 801becc:	f7fe fdae 	bl	801aa2c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801bed0:	4b13      	ldr	r3, [pc, #76]	; (801bf20 <tcp_process+0x5c0>)
 801bed2:	681b      	ldr	r3, [r3, #0]
 801bed4:	687a      	ldr	r2, [r7, #4]
 801bed6:	429a      	cmp	r2, r3
 801bed8:	d105      	bne.n	801bee6 <tcp_process+0x586>
 801beda:	4b11      	ldr	r3, [pc, #68]	; (801bf20 <tcp_process+0x5c0>)
 801bedc:	681b      	ldr	r3, [r3, #0]
 801bede:	68db      	ldr	r3, [r3, #12]
 801bee0:	4a0f      	ldr	r2, [pc, #60]	; (801bf20 <tcp_process+0x5c0>)
 801bee2:	6013      	str	r3, [r2, #0]
 801bee4:	e02e      	b.n	801bf44 <tcp_process+0x5e4>
 801bee6:	4b0e      	ldr	r3, [pc, #56]	; (801bf20 <tcp_process+0x5c0>)
 801bee8:	681b      	ldr	r3, [r3, #0]
 801beea:	617b      	str	r3, [r7, #20]
 801beec:	e027      	b.n	801bf3e <tcp_process+0x5de>
 801beee:	bf00      	nop
 801bef0:	20016018 	.word	0x20016018
 801bef4:	20016010 	.word	0x20016010
 801bef8:	20016016 	.word	0x20016016
 801befc:	2001600c 	.word	0x2001600c
 801bf00:	20015ffc 	.word	0x20015ffc
 801bf04:	20012468 	.word	0x20012468
 801bf08:	2001246c 	.word	0x2001246c
 801bf0c:	0802c3f4 	.word	0x0802c3f4
 801bf10:	0802c694 	.word	0x0802c694
 801bf14:	0802c440 	.word	0x0802c440
 801bf18:	20016014 	.word	0x20016014
 801bf1c:	20016019 	.word	0x20016019
 801bf20:	20015fe0 	.word	0x20015fe0
 801bf24:	697b      	ldr	r3, [r7, #20]
 801bf26:	68db      	ldr	r3, [r3, #12]
 801bf28:	687a      	ldr	r2, [r7, #4]
 801bf2a:	429a      	cmp	r2, r3
 801bf2c:	d104      	bne.n	801bf38 <tcp_process+0x5d8>
 801bf2e:	687b      	ldr	r3, [r7, #4]
 801bf30:	68da      	ldr	r2, [r3, #12]
 801bf32:	697b      	ldr	r3, [r7, #20]
 801bf34:	60da      	str	r2, [r3, #12]
 801bf36:	e005      	b.n	801bf44 <tcp_process+0x5e4>
 801bf38:	697b      	ldr	r3, [r7, #20]
 801bf3a:	68db      	ldr	r3, [r3, #12]
 801bf3c:	617b      	str	r3, [r7, #20]
 801bf3e:	697b      	ldr	r3, [r7, #20]
 801bf40:	2b00      	cmp	r3, #0
 801bf42:	d1ef      	bne.n	801bf24 <tcp_process+0x5c4>
 801bf44:	687b      	ldr	r3, [r7, #4]
 801bf46:	2200      	movs	r2, #0
 801bf48:	60da      	str	r2, [r3, #12]
 801bf4a:	4b77      	ldr	r3, [pc, #476]	; (801c128 <tcp_process+0x7c8>)
 801bf4c:	2201      	movs	r2, #1
 801bf4e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	220a      	movs	r2, #10
 801bf54:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801bf56:	4b75      	ldr	r3, [pc, #468]	; (801c12c <tcp_process+0x7cc>)
 801bf58:	681a      	ldr	r2, [r3, #0]
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	60da      	str	r2, [r3, #12]
 801bf5e:	4a73      	ldr	r2, [pc, #460]	; (801c12c <tcp_process+0x7cc>)
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	6013      	str	r3, [r2, #0]
 801bf64:	f003 f952 	bl	801f20c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801bf68:	e0d2      	b.n	801c110 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801bf6a:	687b      	ldr	r3, [r7, #4]
 801bf6c:	8b5b      	ldrh	r3, [r3, #26]
 801bf6e:	f043 0302 	orr.w	r3, r3, #2
 801bf72:	b29a      	uxth	r2, r3
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	2208      	movs	r2, #8
 801bf7c:	751a      	strb	r2, [r3, #20]
      break;
 801bf7e:	e0c7      	b.n	801c110 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bf80:	4b6b      	ldr	r3, [pc, #428]	; (801c130 <tcp_process+0x7d0>)
 801bf82:	781b      	ldrb	r3, [r3, #0]
 801bf84:	f003 0310 	and.w	r3, r3, #16
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	f000 80c1 	beq.w	801c110 <tcp_process+0x7b0>
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801bf92:	4b68      	ldr	r3, [pc, #416]	; (801c134 <tcp_process+0x7d4>)
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	429a      	cmp	r2, r3
 801bf98:	f040 80ba 	bne.w	801c110 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bfa0:	2b00      	cmp	r3, #0
 801bfa2:	f040 80b5 	bne.w	801c110 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	2206      	movs	r2, #6
 801bfaa:	751a      	strb	r2, [r3, #20]
      break;
 801bfac:	e0b0      	b.n	801c110 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801bfae:	6878      	ldr	r0, [r7, #4]
 801bfb0:	f000 f9ca 	bl	801c348 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801bfb4:	4b60      	ldr	r3, [pc, #384]	; (801c138 <tcp_process+0x7d8>)
 801bfb6:	781b      	ldrb	r3, [r3, #0]
 801bfb8:	f003 0320 	and.w	r3, r3, #32
 801bfbc:	2b00      	cmp	r3, #0
 801bfbe:	f000 80a9 	beq.w	801c114 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	8b5b      	ldrh	r3, [r3, #26]
 801bfc6:	f043 0302 	orr.w	r3, r3, #2
 801bfca:	b29a      	uxth	r2, r3
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801bfd0:	6878      	ldr	r0, [r7, #4]
 801bfd2:	f7fe fd2b 	bl	801aa2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801bfd6:	4b59      	ldr	r3, [pc, #356]	; (801c13c <tcp_process+0x7dc>)
 801bfd8:	681b      	ldr	r3, [r3, #0]
 801bfda:	687a      	ldr	r2, [r7, #4]
 801bfdc:	429a      	cmp	r2, r3
 801bfde:	d105      	bne.n	801bfec <tcp_process+0x68c>
 801bfe0:	4b56      	ldr	r3, [pc, #344]	; (801c13c <tcp_process+0x7dc>)
 801bfe2:	681b      	ldr	r3, [r3, #0]
 801bfe4:	68db      	ldr	r3, [r3, #12]
 801bfe6:	4a55      	ldr	r2, [pc, #340]	; (801c13c <tcp_process+0x7dc>)
 801bfe8:	6013      	str	r3, [r2, #0]
 801bfea:	e013      	b.n	801c014 <tcp_process+0x6b4>
 801bfec:	4b53      	ldr	r3, [pc, #332]	; (801c13c <tcp_process+0x7dc>)
 801bfee:	681b      	ldr	r3, [r3, #0]
 801bff0:	613b      	str	r3, [r7, #16]
 801bff2:	e00c      	b.n	801c00e <tcp_process+0x6ae>
 801bff4:	693b      	ldr	r3, [r7, #16]
 801bff6:	68db      	ldr	r3, [r3, #12]
 801bff8:	687a      	ldr	r2, [r7, #4]
 801bffa:	429a      	cmp	r2, r3
 801bffc:	d104      	bne.n	801c008 <tcp_process+0x6a8>
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	68da      	ldr	r2, [r3, #12]
 801c002:	693b      	ldr	r3, [r7, #16]
 801c004:	60da      	str	r2, [r3, #12]
 801c006:	e005      	b.n	801c014 <tcp_process+0x6b4>
 801c008:	693b      	ldr	r3, [r7, #16]
 801c00a:	68db      	ldr	r3, [r3, #12]
 801c00c:	613b      	str	r3, [r7, #16]
 801c00e:	693b      	ldr	r3, [r7, #16]
 801c010:	2b00      	cmp	r3, #0
 801c012:	d1ef      	bne.n	801bff4 <tcp_process+0x694>
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	2200      	movs	r2, #0
 801c018:	60da      	str	r2, [r3, #12]
 801c01a:	4b43      	ldr	r3, [pc, #268]	; (801c128 <tcp_process+0x7c8>)
 801c01c:	2201      	movs	r2, #1
 801c01e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	220a      	movs	r2, #10
 801c024:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c026:	4b41      	ldr	r3, [pc, #260]	; (801c12c <tcp_process+0x7cc>)
 801c028:	681a      	ldr	r2, [r3, #0]
 801c02a:	687b      	ldr	r3, [r7, #4]
 801c02c:	60da      	str	r2, [r3, #12]
 801c02e:	4a3f      	ldr	r2, [pc, #252]	; (801c12c <tcp_process+0x7cc>)
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	6013      	str	r3, [r2, #0]
 801c034:	f003 f8ea 	bl	801f20c <tcp_timer_needed>
      }
      break;
 801c038:	e06c      	b.n	801c114 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801c03a:	6878      	ldr	r0, [r7, #4]
 801c03c:	f000 f984 	bl	801c348 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c040:	4b3b      	ldr	r3, [pc, #236]	; (801c130 <tcp_process+0x7d0>)
 801c042:	781b      	ldrb	r3, [r3, #0]
 801c044:	f003 0310 	and.w	r3, r3, #16
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d065      	beq.n	801c118 <tcp_process+0x7b8>
 801c04c:	687b      	ldr	r3, [r7, #4]
 801c04e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c050:	4b38      	ldr	r3, [pc, #224]	; (801c134 <tcp_process+0x7d4>)
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	429a      	cmp	r2, r3
 801c056:	d15f      	bne.n	801c118 <tcp_process+0x7b8>
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c05c:	2b00      	cmp	r3, #0
 801c05e:	d15b      	bne.n	801c118 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801c060:	6878      	ldr	r0, [r7, #4]
 801c062:	f7fe fce3 	bl	801aa2c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c066:	4b35      	ldr	r3, [pc, #212]	; (801c13c <tcp_process+0x7dc>)
 801c068:	681b      	ldr	r3, [r3, #0]
 801c06a:	687a      	ldr	r2, [r7, #4]
 801c06c:	429a      	cmp	r2, r3
 801c06e:	d105      	bne.n	801c07c <tcp_process+0x71c>
 801c070:	4b32      	ldr	r3, [pc, #200]	; (801c13c <tcp_process+0x7dc>)
 801c072:	681b      	ldr	r3, [r3, #0]
 801c074:	68db      	ldr	r3, [r3, #12]
 801c076:	4a31      	ldr	r2, [pc, #196]	; (801c13c <tcp_process+0x7dc>)
 801c078:	6013      	str	r3, [r2, #0]
 801c07a:	e013      	b.n	801c0a4 <tcp_process+0x744>
 801c07c:	4b2f      	ldr	r3, [pc, #188]	; (801c13c <tcp_process+0x7dc>)
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	60fb      	str	r3, [r7, #12]
 801c082:	e00c      	b.n	801c09e <tcp_process+0x73e>
 801c084:	68fb      	ldr	r3, [r7, #12]
 801c086:	68db      	ldr	r3, [r3, #12]
 801c088:	687a      	ldr	r2, [r7, #4]
 801c08a:	429a      	cmp	r2, r3
 801c08c:	d104      	bne.n	801c098 <tcp_process+0x738>
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	68da      	ldr	r2, [r3, #12]
 801c092:	68fb      	ldr	r3, [r7, #12]
 801c094:	60da      	str	r2, [r3, #12]
 801c096:	e005      	b.n	801c0a4 <tcp_process+0x744>
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	68db      	ldr	r3, [r3, #12]
 801c09c:	60fb      	str	r3, [r7, #12]
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d1ef      	bne.n	801c084 <tcp_process+0x724>
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	2200      	movs	r2, #0
 801c0a8:	60da      	str	r2, [r3, #12]
 801c0aa:	4b1f      	ldr	r3, [pc, #124]	; (801c128 <tcp_process+0x7c8>)
 801c0ac:	2201      	movs	r2, #1
 801c0ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	220a      	movs	r2, #10
 801c0b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c0b6:	4b1d      	ldr	r3, [pc, #116]	; (801c12c <tcp_process+0x7cc>)
 801c0b8:	681a      	ldr	r2, [r3, #0]
 801c0ba:	687b      	ldr	r3, [r7, #4]
 801c0bc:	60da      	str	r2, [r3, #12]
 801c0be:	4a1b      	ldr	r2, [pc, #108]	; (801c12c <tcp_process+0x7cc>)
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	6013      	str	r3, [r2, #0]
 801c0c4:	f003 f8a2 	bl	801f20c <tcp_timer_needed>
      }
      break;
 801c0c8:	e026      	b.n	801c118 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801c0ca:	6878      	ldr	r0, [r7, #4]
 801c0cc:	f000 f93c 	bl	801c348 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c0d0:	4b17      	ldr	r3, [pc, #92]	; (801c130 <tcp_process+0x7d0>)
 801c0d2:	781b      	ldrb	r3, [r3, #0]
 801c0d4:	f003 0310 	and.w	r3, r3, #16
 801c0d8:	2b00      	cmp	r3, #0
 801c0da:	d01f      	beq.n	801c11c <tcp_process+0x7bc>
 801c0dc:	687b      	ldr	r3, [r7, #4]
 801c0de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c0e0:	4b14      	ldr	r3, [pc, #80]	; (801c134 <tcp_process+0x7d4>)
 801c0e2:	681b      	ldr	r3, [r3, #0]
 801c0e4:	429a      	cmp	r2, r3
 801c0e6:	d119      	bne.n	801c11c <tcp_process+0x7bc>
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d115      	bne.n	801c11c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801c0f0:	4b11      	ldr	r3, [pc, #68]	; (801c138 <tcp_process+0x7d8>)
 801c0f2:	781b      	ldrb	r3, [r3, #0]
 801c0f4:	f043 0310 	orr.w	r3, r3, #16
 801c0f8:	b2da      	uxtb	r2, r3
 801c0fa:	4b0f      	ldr	r3, [pc, #60]	; (801c138 <tcp_process+0x7d8>)
 801c0fc:	701a      	strb	r2, [r3, #0]
      }
      break;
 801c0fe:	e00d      	b.n	801c11c <tcp_process+0x7bc>
    default:
      break;
 801c100:	bf00      	nop
 801c102:	e00c      	b.n	801c11e <tcp_process+0x7be>
      break;
 801c104:	bf00      	nop
 801c106:	e00a      	b.n	801c11e <tcp_process+0x7be>
      break;
 801c108:	bf00      	nop
 801c10a:	e008      	b.n	801c11e <tcp_process+0x7be>
      break;
 801c10c:	bf00      	nop
 801c10e:	e006      	b.n	801c11e <tcp_process+0x7be>
      break;
 801c110:	bf00      	nop
 801c112:	e004      	b.n	801c11e <tcp_process+0x7be>
      break;
 801c114:	bf00      	nop
 801c116:	e002      	b.n	801c11e <tcp_process+0x7be>
      break;
 801c118:	bf00      	nop
 801c11a:	e000      	b.n	801c11e <tcp_process+0x7be>
      break;
 801c11c:	bf00      	nop
  }
  return ERR_OK;
 801c11e:	2300      	movs	r3, #0
}
 801c120:	4618      	mov	r0, r3
 801c122:	3724      	adds	r7, #36	; 0x24
 801c124:	46bd      	mov	sp, r7
 801c126:	bd90      	pop	{r4, r7, pc}
 801c128:	20015fe8 	.word	0x20015fe8
 801c12c:	20015fe4 	.word	0x20015fe4
 801c130:	20016018 	.word	0x20016018
 801c134:	20016010 	.word	0x20016010
 801c138:	20016019 	.word	0x20016019
 801c13c:	20015fe0 	.word	0x20015fe0

0801c140 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c140:	b590      	push	{r4, r7, lr}
 801c142:	b085      	sub	sp, #20
 801c144:	af00      	add	r7, sp, #0
 801c146:	6078      	str	r0, [r7, #4]
 801c148:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d106      	bne.n	801c15e <tcp_oos_insert_segment+0x1e>
 801c150:	4b3b      	ldr	r3, [pc, #236]	; (801c240 <tcp_oos_insert_segment+0x100>)
 801c152:	f240 421f 	movw	r2, #1055	; 0x41f
 801c156:	493b      	ldr	r1, [pc, #236]	; (801c244 <tcp_oos_insert_segment+0x104>)
 801c158:	483b      	ldr	r0, [pc, #236]	; (801c248 <tcp_oos_insert_segment+0x108>)
 801c15a:	f008 fe31 	bl	8024dc0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	68db      	ldr	r3, [r3, #12]
 801c162:	899b      	ldrh	r3, [r3, #12]
 801c164:	b29b      	uxth	r3, r3
 801c166:	4618      	mov	r0, r3
 801c168:	f7fa fb6c 	bl	8016844 <lwip_htons>
 801c16c:	4603      	mov	r3, r0
 801c16e:	b2db      	uxtb	r3, r3
 801c170:	f003 0301 	and.w	r3, r3, #1
 801c174:	2b00      	cmp	r3, #0
 801c176:	d028      	beq.n	801c1ca <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801c178:	6838      	ldr	r0, [r7, #0]
 801c17a:	f7fe f97d 	bl	801a478 <tcp_segs_free>
    next = NULL;
 801c17e:	2300      	movs	r3, #0
 801c180:	603b      	str	r3, [r7, #0]
 801c182:	e056      	b.n	801c232 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c184:	683b      	ldr	r3, [r7, #0]
 801c186:	68db      	ldr	r3, [r3, #12]
 801c188:	899b      	ldrh	r3, [r3, #12]
 801c18a:	b29b      	uxth	r3, r3
 801c18c:	4618      	mov	r0, r3
 801c18e:	f7fa fb59 	bl	8016844 <lwip_htons>
 801c192:	4603      	mov	r3, r0
 801c194:	b2db      	uxtb	r3, r3
 801c196:	f003 0301 	and.w	r3, r3, #1
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d00d      	beq.n	801c1ba <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	68db      	ldr	r3, [r3, #12]
 801c1a2:	899b      	ldrh	r3, [r3, #12]
 801c1a4:	b29c      	uxth	r4, r3
 801c1a6:	2001      	movs	r0, #1
 801c1a8:	f7fa fb4c 	bl	8016844 <lwip_htons>
 801c1ac:	4603      	mov	r3, r0
 801c1ae:	461a      	mov	r2, r3
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	68db      	ldr	r3, [r3, #12]
 801c1b4:	4322      	orrs	r2, r4
 801c1b6:	b292      	uxth	r2, r2
 801c1b8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801c1ba:	683b      	ldr	r3, [r7, #0]
 801c1bc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801c1be:	683b      	ldr	r3, [r7, #0]
 801c1c0:	681b      	ldr	r3, [r3, #0]
 801c1c2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801c1c4:	68f8      	ldr	r0, [r7, #12]
 801c1c6:	f7fe f96c 	bl	801a4a2 <tcp_seg_free>
    while (next &&
 801c1ca:	683b      	ldr	r3, [r7, #0]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d00e      	beq.n	801c1ee <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	891b      	ldrh	r3, [r3, #8]
 801c1d4:	461a      	mov	r2, r3
 801c1d6:	4b1d      	ldr	r3, [pc, #116]	; (801c24c <tcp_oos_insert_segment+0x10c>)
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	441a      	add	r2, r3
 801c1dc:	683b      	ldr	r3, [r7, #0]
 801c1de:	68db      	ldr	r3, [r3, #12]
 801c1e0:	685b      	ldr	r3, [r3, #4]
 801c1e2:	6839      	ldr	r1, [r7, #0]
 801c1e4:	8909      	ldrh	r1, [r1, #8]
 801c1e6:	440b      	add	r3, r1
 801c1e8:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	daca      	bge.n	801c184 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801c1ee:	683b      	ldr	r3, [r7, #0]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d01e      	beq.n	801c232 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	891b      	ldrh	r3, [r3, #8]
 801c1f8:	461a      	mov	r2, r3
 801c1fa:	4b14      	ldr	r3, [pc, #80]	; (801c24c <tcp_oos_insert_segment+0x10c>)
 801c1fc:	681b      	ldr	r3, [r3, #0]
 801c1fe:	441a      	add	r2, r3
 801c200:	683b      	ldr	r3, [r7, #0]
 801c202:	68db      	ldr	r3, [r3, #12]
 801c204:	685b      	ldr	r3, [r3, #4]
 801c206:	1ad3      	subs	r3, r2, r3
    if (next &&
 801c208:	2b00      	cmp	r3, #0
 801c20a:	dd12      	ble.n	801c232 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c20c:	683b      	ldr	r3, [r7, #0]
 801c20e:	68db      	ldr	r3, [r3, #12]
 801c210:	685b      	ldr	r3, [r3, #4]
 801c212:	b29a      	uxth	r2, r3
 801c214:	4b0d      	ldr	r3, [pc, #52]	; (801c24c <tcp_oos_insert_segment+0x10c>)
 801c216:	681b      	ldr	r3, [r3, #0]
 801c218:	b29b      	uxth	r3, r3
 801c21a:	1ad3      	subs	r3, r2, r3
 801c21c:	b29a      	uxth	r2, r3
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c222:	687b      	ldr	r3, [r7, #4]
 801c224:	685a      	ldr	r2, [r3, #4]
 801c226:	687b      	ldr	r3, [r7, #4]
 801c228:	891b      	ldrh	r3, [r3, #8]
 801c22a:	4619      	mov	r1, r3
 801c22c:	4610      	mov	r0, r2
 801c22e:	f7fc f83f 	bl	80182b0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	683a      	ldr	r2, [r7, #0]
 801c236:	601a      	str	r2, [r3, #0]
}
 801c238:	bf00      	nop
 801c23a:	3714      	adds	r7, #20
 801c23c:	46bd      	mov	sp, r7
 801c23e:	bd90      	pop	{r4, r7, pc}
 801c240:	0802c3f4 	.word	0x0802c3f4
 801c244:	0802c6b4 	.word	0x0802c6b4
 801c248:	0802c440 	.word	0x0802c440
 801c24c:	2001600c 	.word	0x2001600c

0801c250 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801c250:	b5b0      	push	{r4, r5, r7, lr}
 801c252:	b086      	sub	sp, #24
 801c254:	af00      	add	r7, sp, #0
 801c256:	60f8      	str	r0, [r7, #12]
 801c258:	60b9      	str	r1, [r7, #8]
 801c25a:	607a      	str	r2, [r7, #4]
 801c25c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c25e:	e03e      	b.n	801c2de <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801c260:	68bb      	ldr	r3, [r7, #8]
 801c262:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801c264:	68bb      	ldr	r3, [r7, #8]
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801c26a:	697b      	ldr	r3, [r7, #20]
 801c26c:	685b      	ldr	r3, [r3, #4]
 801c26e:	4618      	mov	r0, r3
 801c270:	f7fc fa32 	bl	80186d8 <pbuf_clen>
 801c274:	4603      	mov	r3, r0
 801c276:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c278:	68fb      	ldr	r3, [r7, #12]
 801c27a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c27e:	8a7a      	ldrh	r2, [r7, #18]
 801c280:	429a      	cmp	r2, r3
 801c282:	d906      	bls.n	801c292 <tcp_free_acked_segments+0x42>
 801c284:	4b2a      	ldr	r3, [pc, #168]	; (801c330 <tcp_free_acked_segments+0xe0>)
 801c286:	f240 4257 	movw	r2, #1111	; 0x457
 801c28a:	492a      	ldr	r1, [pc, #168]	; (801c334 <tcp_free_acked_segments+0xe4>)
 801c28c:	482a      	ldr	r0, [pc, #168]	; (801c338 <tcp_free_acked_segments+0xe8>)
 801c28e:	f008 fd97 	bl	8024dc0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801c298:	8a7b      	ldrh	r3, [r7, #18]
 801c29a:	1ad3      	subs	r3, r2, r3
 801c29c:	b29a      	uxth	r2, r3
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c2a4:	697b      	ldr	r3, [r7, #20]
 801c2a6:	891a      	ldrh	r2, [r3, #8]
 801c2a8:	4b24      	ldr	r3, [pc, #144]	; (801c33c <tcp_free_acked_segments+0xec>)
 801c2aa:	881b      	ldrh	r3, [r3, #0]
 801c2ac:	4413      	add	r3, r2
 801c2ae:	b29a      	uxth	r2, r3
 801c2b0:	4b22      	ldr	r3, [pc, #136]	; (801c33c <tcp_free_acked_segments+0xec>)
 801c2b2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801c2b4:	6978      	ldr	r0, [r7, #20]
 801c2b6:	f7fe f8f4 	bl	801a4a2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c2ba:	68fb      	ldr	r3, [r7, #12]
 801c2bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c2c0:	2b00      	cmp	r3, #0
 801c2c2:	d00c      	beq.n	801c2de <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c2c4:	68bb      	ldr	r3, [r7, #8]
 801c2c6:	2b00      	cmp	r3, #0
 801c2c8:	d109      	bne.n	801c2de <tcp_free_acked_segments+0x8e>
 801c2ca:	683b      	ldr	r3, [r7, #0]
 801c2cc:	2b00      	cmp	r3, #0
 801c2ce:	d106      	bne.n	801c2de <tcp_free_acked_segments+0x8e>
 801c2d0:	4b17      	ldr	r3, [pc, #92]	; (801c330 <tcp_free_acked_segments+0xe0>)
 801c2d2:	f240 4261 	movw	r2, #1121	; 0x461
 801c2d6:	491a      	ldr	r1, [pc, #104]	; (801c340 <tcp_free_acked_segments+0xf0>)
 801c2d8:	4817      	ldr	r0, [pc, #92]	; (801c338 <tcp_free_acked_segments+0xe8>)
 801c2da:	f008 fd71 	bl	8024dc0 <iprintf>
  while (seg_list != NULL &&
 801c2de:	68bb      	ldr	r3, [r7, #8]
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d020      	beq.n	801c326 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c2e4:	68bb      	ldr	r3, [r7, #8]
 801c2e6:	68db      	ldr	r3, [r3, #12]
 801c2e8:	685b      	ldr	r3, [r3, #4]
 801c2ea:	4618      	mov	r0, r3
 801c2ec:	f7fa fabf 	bl	801686e <lwip_htonl>
 801c2f0:	4604      	mov	r4, r0
 801c2f2:	68bb      	ldr	r3, [r7, #8]
 801c2f4:	891b      	ldrh	r3, [r3, #8]
 801c2f6:	461d      	mov	r5, r3
 801c2f8:	68bb      	ldr	r3, [r7, #8]
 801c2fa:	68db      	ldr	r3, [r3, #12]
 801c2fc:	899b      	ldrh	r3, [r3, #12]
 801c2fe:	b29b      	uxth	r3, r3
 801c300:	4618      	mov	r0, r3
 801c302:	f7fa fa9f 	bl	8016844 <lwip_htons>
 801c306:	4603      	mov	r3, r0
 801c308:	b2db      	uxtb	r3, r3
 801c30a:	f003 0303 	and.w	r3, r3, #3
 801c30e:	2b00      	cmp	r3, #0
 801c310:	d001      	beq.n	801c316 <tcp_free_acked_segments+0xc6>
 801c312:	2301      	movs	r3, #1
 801c314:	e000      	b.n	801c318 <tcp_free_acked_segments+0xc8>
 801c316:	2300      	movs	r3, #0
 801c318:	442b      	add	r3, r5
 801c31a:	18e2      	adds	r2, r4, r3
 801c31c:	4b09      	ldr	r3, [pc, #36]	; (801c344 <tcp_free_acked_segments+0xf4>)
 801c31e:	681b      	ldr	r3, [r3, #0]
 801c320:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801c322:	2b00      	cmp	r3, #0
 801c324:	dd9c      	ble.n	801c260 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801c326:	68bb      	ldr	r3, [r7, #8]
}
 801c328:	4618      	mov	r0, r3
 801c32a:	3718      	adds	r7, #24
 801c32c:	46bd      	mov	sp, r7
 801c32e:	bdb0      	pop	{r4, r5, r7, pc}
 801c330:	0802c3f4 	.word	0x0802c3f4
 801c334:	0802c6dc 	.word	0x0802c6dc
 801c338:	0802c440 	.word	0x0802c440
 801c33c:	20016014 	.word	0x20016014
 801c340:	0802c704 	.word	0x0802c704
 801c344:	20016010 	.word	0x20016010

0801c348 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c348:	b5b0      	push	{r4, r5, r7, lr}
 801c34a:	b094      	sub	sp, #80	; 0x50
 801c34c:	af00      	add	r7, sp, #0
 801c34e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801c350:	2300      	movs	r3, #0
 801c352:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c354:	687b      	ldr	r3, [r7, #4]
 801c356:	2b00      	cmp	r3, #0
 801c358:	d106      	bne.n	801c368 <tcp_receive+0x20>
 801c35a:	4b91      	ldr	r3, [pc, #580]	; (801c5a0 <tcp_receive+0x258>)
 801c35c:	f240 427b 	movw	r2, #1147	; 0x47b
 801c360:	4990      	ldr	r1, [pc, #576]	; (801c5a4 <tcp_receive+0x25c>)
 801c362:	4891      	ldr	r0, [pc, #580]	; (801c5a8 <tcp_receive+0x260>)
 801c364:	f008 fd2c 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	7d1b      	ldrb	r3, [r3, #20]
 801c36c:	2b03      	cmp	r3, #3
 801c36e:	d806      	bhi.n	801c37e <tcp_receive+0x36>
 801c370:	4b8b      	ldr	r3, [pc, #556]	; (801c5a0 <tcp_receive+0x258>)
 801c372:	f240 427c 	movw	r2, #1148	; 0x47c
 801c376:	498d      	ldr	r1, [pc, #564]	; (801c5ac <tcp_receive+0x264>)
 801c378:	488b      	ldr	r0, [pc, #556]	; (801c5a8 <tcp_receive+0x260>)
 801c37a:	f008 fd21 	bl	8024dc0 <iprintf>

  if (flags & TCP_ACK) {
 801c37e:	4b8c      	ldr	r3, [pc, #560]	; (801c5b0 <tcp_receive+0x268>)
 801c380:	781b      	ldrb	r3, [r3, #0]
 801c382:	f003 0310 	and.w	r3, r3, #16
 801c386:	2b00      	cmp	r3, #0
 801c388:	f000 8264 	beq.w	801c854 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c392:	461a      	mov	r2, r3
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c398:	4413      	add	r3, r2
 801c39a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c3a0:	4b84      	ldr	r3, [pc, #528]	; (801c5b4 <tcp_receive+0x26c>)
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	1ad3      	subs	r3, r2, r3
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	db1b      	blt.n	801c3e2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c3ae:	4b81      	ldr	r3, [pc, #516]	; (801c5b4 <tcp_receive+0x26c>)
 801c3b0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c3b2:	429a      	cmp	r2, r3
 801c3b4:	d106      	bne.n	801c3c4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c3ba:	4b7f      	ldr	r3, [pc, #508]	; (801c5b8 <tcp_receive+0x270>)
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	1ad3      	subs	r3, r2, r3
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	db0e      	blt.n	801c3e2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c3c8:	4b7b      	ldr	r3, [pc, #492]	; (801c5b8 <tcp_receive+0x270>)
 801c3ca:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c3cc:	429a      	cmp	r2, r3
 801c3ce:	d125      	bne.n	801c41c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c3d0:	4b7a      	ldr	r3, [pc, #488]	; (801c5bc <tcp_receive+0x274>)
 801c3d2:	681b      	ldr	r3, [r3, #0]
 801c3d4:	89db      	ldrh	r3, [r3, #14]
 801c3d6:	b29a      	uxth	r2, r3
 801c3d8:	687b      	ldr	r3, [r7, #4]
 801c3da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c3de:	429a      	cmp	r2, r3
 801c3e0:	d91c      	bls.n	801c41c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c3e2:	4b76      	ldr	r3, [pc, #472]	; (801c5bc <tcp_receive+0x274>)
 801c3e4:	681b      	ldr	r3, [r3, #0]
 801c3e6:	89db      	ldrh	r3, [r3, #14]
 801c3e8:	b29a      	uxth	r2, r3
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c3fc:	429a      	cmp	r2, r3
 801c3fe:	d205      	bcs.n	801c40c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c406:	687b      	ldr	r3, [r7, #4]
 801c408:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801c40c:	4b69      	ldr	r3, [pc, #420]	; (801c5b4 <tcp_receive+0x26c>)
 801c40e:	681a      	ldr	r2, [r3, #0]
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801c414:	4b68      	ldr	r3, [pc, #416]	; (801c5b8 <tcp_receive+0x270>)
 801c416:	681a      	ldr	r2, [r3, #0]
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c41c:	4b66      	ldr	r3, [pc, #408]	; (801c5b8 <tcp_receive+0x270>)
 801c41e:	681a      	ldr	r2, [r3, #0]
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c424:	1ad3      	subs	r3, r2, r3
 801c426:	2b00      	cmp	r3, #0
 801c428:	dc58      	bgt.n	801c4dc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801c42a:	4b65      	ldr	r3, [pc, #404]	; (801c5c0 <tcp_receive+0x278>)
 801c42c:	881b      	ldrh	r3, [r3, #0]
 801c42e:	2b00      	cmp	r3, #0
 801c430:	d14b      	bne.n	801c4ca <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c436:	687a      	ldr	r2, [r7, #4]
 801c438:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801c43c:	4413      	add	r3, r2
 801c43e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c440:	429a      	cmp	r2, r3
 801c442:	d142      	bne.n	801c4ca <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c44a:	2b00      	cmp	r3, #0
 801c44c:	db3d      	blt.n	801c4ca <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c452:	4b59      	ldr	r3, [pc, #356]	; (801c5b8 <tcp_receive+0x270>)
 801c454:	681b      	ldr	r3, [r3, #0]
 801c456:	429a      	cmp	r2, r3
 801c458:	d137      	bne.n	801c4ca <tcp_receive+0x182>
              found_dupack = 1;
 801c45a:	2301      	movs	r3, #1
 801c45c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c45e:	687b      	ldr	r3, [r7, #4]
 801c460:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c464:	2bff      	cmp	r3, #255	; 0xff
 801c466:	d007      	beq.n	801c478 <tcp_receive+0x130>
                ++pcb->dupacks;
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c46e:	3301      	adds	r3, #1
 801c470:	b2da      	uxtb	r2, r3
 801c472:	687b      	ldr	r3, [r7, #4]
 801c474:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c47e:	2b03      	cmp	r3, #3
 801c480:	d91b      	bls.n	801c4ba <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c482:	687b      	ldr	r3, [r7, #4]
 801c484:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c488:	687b      	ldr	r3, [r7, #4]
 801c48a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c48c:	4413      	add	r3, r2
 801c48e:	b29a      	uxth	r2, r3
 801c490:	687b      	ldr	r3, [r7, #4]
 801c492:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c496:	429a      	cmp	r2, r3
 801c498:	d30a      	bcc.n	801c4b0 <tcp_receive+0x168>
 801c49a:	687b      	ldr	r3, [r7, #4]
 801c49c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c4a0:	687b      	ldr	r3, [r7, #4]
 801c4a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c4a4:	4413      	add	r3, r2
 801c4a6:	b29a      	uxth	r2, r3
 801c4a8:	687b      	ldr	r3, [r7, #4]
 801c4aa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c4ae:	e004      	b.n	801c4ba <tcp_receive+0x172>
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c4b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801c4ba:	687b      	ldr	r3, [r7, #4]
 801c4bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c4c0:	2b02      	cmp	r3, #2
 801c4c2:	d902      	bls.n	801c4ca <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801c4c4:	6878      	ldr	r0, [r7, #4]
 801c4c6:	f002 fb45 	bl	801eb54 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801c4ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	f040 8161 	bne.w	801c794 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801c4d2:	687b      	ldr	r3, [r7, #4]
 801c4d4:	2200      	movs	r2, #0
 801c4d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801c4da:	e15b      	b.n	801c794 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c4dc:	4b36      	ldr	r3, [pc, #216]	; (801c5b8 <tcp_receive+0x270>)
 801c4de:	681a      	ldr	r2, [r3, #0]
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c4e4:	1ad3      	subs	r3, r2, r3
 801c4e6:	3b01      	subs	r3, #1
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	f2c0 814e 	blt.w	801c78a <tcp_receive+0x442>
 801c4ee:	4b32      	ldr	r3, [pc, #200]	; (801c5b8 <tcp_receive+0x270>)
 801c4f0:	681a      	ldr	r2, [r3, #0]
 801c4f2:	687b      	ldr	r3, [r7, #4]
 801c4f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c4f6:	1ad3      	subs	r3, r2, r3
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	f300 8146 	bgt.w	801c78a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801c4fe:	687b      	ldr	r3, [r7, #4]
 801c500:	8b5b      	ldrh	r3, [r3, #26]
 801c502:	f003 0304 	and.w	r3, r3, #4
 801c506:	2b00      	cmp	r3, #0
 801c508:	d010      	beq.n	801c52c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801c50a:	687b      	ldr	r3, [r7, #4]
 801c50c:	8b5b      	ldrh	r3, [r3, #26]
 801c50e:	f023 0304 	bic.w	r3, r3, #4
 801c512:	b29a      	uxth	r2, r3
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801c524:	687b      	ldr	r3, [r7, #4]
 801c526:	2200      	movs	r2, #0
 801c528:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801c52c:	687b      	ldr	r3, [r7, #4]
 801c52e:	2200      	movs	r2, #0
 801c530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c53a:	10db      	asrs	r3, r3, #3
 801c53c:	b21b      	sxth	r3, r3
 801c53e:	b29a      	uxth	r2, r3
 801c540:	687b      	ldr	r3, [r7, #4]
 801c542:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c546:	b29b      	uxth	r3, r3
 801c548:	4413      	add	r3, r2
 801c54a:	b29b      	uxth	r3, r3
 801c54c:	b21a      	sxth	r2, r3
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801c554:	4b18      	ldr	r3, [pc, #96]	; (801c5b8 <tcp_receive+0x270>)
 801c556:	681b      	ldr	r3, [r3, #0]
 801c558:	b29a      	uxth	r2, r3
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c55e:	b29b      	uxth	r3, r3
 801c560:	1ad3      	subs	r3, r2, r3
 801c562:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	2200      	movs	r2, #0
 801c568:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801c56c:	4b12      	ldr	r3, [pc, #72]	; (801c5b8 <tcp_receive+0x270>)
 801c56e:	681a      	ldr	r2, [r3, #0]
 801c570:	687b      	ldr	r3, [r7, #4]
 801c572:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	7d1b      	ldrb	r3, [r3, #20]
 801c578:	2b03      	cmp	r3, #3
 801c57a:	f240 8097 	bls.w	801c6ac <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801c57e:	687b      	ldr	r3, [r7, #4]
 801c580:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c584:	687b      	ldr	r3, [r7, #4]
 801c586:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801c58a:	429a      	cmp	r2, r3
 801c58c:	d245      	bcs.n	801c61a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801c58e:	687b      	ldr	r3, [r7, #4]
 801c590:	8b5b      	ldrh	r3, [r3, #26]
 801c592:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c596:	2b00      	cmp	r3, #0
 801c598:	d014      	beq.n	801c5c4 <tcp_receive+0x27c>
 801c59a:	2301      	movs	r3, #1
 801c59c:	e013      	b.n	801c5c6 <tcp_receive+0x27e>
 801c59e:	bf00      	nop
 801c5a0:	0802c3f4 	.word	0x0802c3f4
 801c5a4:	0802c724 	.word	0x0802c724
 801c5a8:	0802c440 	.word	0x0802c440
 801c5ac:	0802c740 	.word	0x0802c740
 801c5b0:	20016018 	.word	0x20016018
 801c5b4:	2001600c 	.word	0x2001600c
 801c5b8:	20016010 	.word	0x20016010
 801c5bc:	20015ffc 	.word	0x20015ffc
 801c5c0:	20016016 	.word	0x20016016
 801c5c4:	2302      	movs	r3, #2
 801c5c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801c5ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801c5ce:	b29a      	uxth	r2, r3
 801c5d0:	687b      	ldr	r3, [r7, #4]
 801c5d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c5d4:	fb12 f303 	smulbb	r3, r2, r3
 801c5d8:	b29b      	uxth	r3, r3
 801c5da:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801c5dc:	4293      	cmp	r3, r2
 801c5de:	bf28      	it	cs
 801c5e0:	4613      	movcs	r3, r2
 801c5e2:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801c5e4:	687b      	ldr	r3, [r7, #4]
 801c5e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c5ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c5ec:	4413      	add	r3, r2
 801c5ee:	b29a      	uxth	r2, r3
 801c5f0:	687b      	ldr	r3, [r7, #4]
 801c5f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c5f6:	429a      	cmp	r2, r3
 801c5f8:	d309      	bcc.n	801c60e <tcp_receive+0x2c6>
 801c5fa:	687b      	ldr	r3, [r7, #4]
 801c5fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c600:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c602:	4413      	add	r3, r2
 801c604:	b29a      	uxth	r2, r3
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c60c:	e04e      	b.n	801c6ac <tcp_receive+0x364>
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c614:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c618:	e048      	b.n	801c6ac <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c620:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c622:	4413      	add	r3, r2
 801c624:	b29a      	uxth	r2, r3
 801c626:	687b      	ldr	r3, [r7, #4]
 801c628:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801c62c:	429a      	cmp	r2, r3
 801c62e:	d309      	bcc.n	801c644 <tcp_receive+0x2fc>
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c636:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801c638:	4413      	add	r3, r2
 801c63a:	b29a      	uxth	r2, r3
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801c642:	e004      	b.n	801c64e <tcp_receive+0x306>
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c64a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c65a:	429a      	cmp	r2, r3
 801c65c:	d326      	bcc.n	801c6ac <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801c65e:	687b      	ldr	r3, [r7, #4]
 801c660:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c66a:	1ad3      	subs	r3, r2, r3
 801c66c:	b29a      	uxth	r2, r3
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c67a:	687b      	ldr	r3, [r7, #4]
 801c67c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c67e:	4413      	add	r3, r2
 801c680:	b29a      	uxth	r2, r3
 801c682:	687b      	ldr	r3, [r7, #4]
 801c684:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c688:	429a      	cmp	r2, r3
 801c68a:	d30a      	bcc.n	801c6a2 <tcp_receive+0x35a>
 801c68c:	687b      	ldr	r3, [r7, #4]
 801c68e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c692:	687b      	ldr	r3, [r7, #4]
 801c694:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c696:	4413      	add	r3, r2
 801c698:	b29a      	uxth	r2, r3
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c6a0:	e004      	b.n	801c6ac <tcp_receive+0x364>
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c6a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c6b0:	687b      	ldr	r3, [r7, #4]
 801c6b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c6b4:	4a98      	ldr	r2, [pc, #608]	; (801c918 <tcp_receive+0x5d0>)
 801c6b6:	6878      	ldr	r0, [r7, #4]
 801c6b8:	f7ff fdca 	bl	801c250 <tcp_free_acked_segments>
 801c6bc:	4602      	mov	r2, r0
 801c6be:	687b      	ldr	r3, [r7, #4]
 801c6c0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c6ca:	4a94      	ldr	r2, [pc, #592]	; (801c91c <tcp_receive+0x5d4>)
 801c6cc:	6878      	ldr	r0, [r7, #4]
 801c6ce:	f7ff fdbf 	bl	801c250 <tcp_free_acked_segments>
 801c6d2:	4602      	mov	r2, r0
 801c6d4:	687b      	ldr	r3, [r7, #4]
 801c6d6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c6dc:	2b00      	cmp	r3, #0
 801c6de:	d104      	bne.n	801c6ea <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c6e6:	861a      	strh	r2, [r3, #48]	; 0x30
 801c6e8:	e002      	b.n	801c6f0 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801c6ea:	687b      	ldr	r3, [r7, #4]
 801c6ec:	2200      	movs	r2, #0
 801c6ee:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801c6f0:	687b      	ldr	r3, [r7, #4]
 801c6f2:	2200      	movs	r2, #0
 801c6f4:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d103      	bne.n	801c706 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801c6fe:	687b      	ldr	r3, [r7, #4]
 801c700:	2200      	movs	r2, #0
 801c702:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801c70c:	4b84      	ldr	r3, [pc, #528]	; (801c920 <tcp_receive+0x5d8>)
 801c70e:	881b      	ldrh	r3, [r3, #0]
 801c710:	4413      	add	r3, r2
 801c712:	b29a      	uxth	r2, r3
 801c714:	687b      	ldr	r3, [r7, #4]
 801c716:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	8b5b      	ldrh	r3, [r3, #26]
 801c71e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c722:	2b00      	cmp	r3, #0
 801c724:	d035      	beq.n	801c792 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c72a:	2b00      	cmp	r3, #0
 801c72c:	d118      	bne.n	801c760 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801c72e:	687b      	ldr	r3, [r7, #4]
 801c730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c732:	2b00      	cmp	r3, #0
 801c734:	d00c      	beq.n	801c750 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c73a:	687b      	ldr	r3, [r7, #4]
 801c73c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c73e:	68db      	ldr	r3, [r3, #12]
 801c740:	685b      	ldr	r3, [r3, #4]
 801c742:	4618      	mov	r0, r3
 801c744:	f7fa f893 	bl	801686e <lwip_htonl>
 801c748:	4603      	mov	r3, r0
 801c74a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	dc20      	bgt.n	801c792 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	8b5b      	ldrh	r3, [r3, #26]
 801c754:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c758:	b29a      	uxth	r2, r3
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c75e:	e018      	b.n	801c792 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801c764:	687b      	ldr	r3, [r7, #4]
 801c766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c768:	68db      	ldr	r3, [r3, #12]
 801c76a:	685b      	ldr	r3, [r3, #4]
 801c76c:	4618      	mov	r0, r3
 801c76e:	f7fa f87e 	bl	801686e <lwip_htonl>
 801c772:	4603      	mov	r3, r0
 801c774:	1ae3      	subs	r3, r4, r3
 801c776:	2b00      	cmp	r3, #0
 801c778:	dc0b      	bgt.n	801c792 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	8b5b      	ldrh	r3, [r3, #26]
 801c77e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801c782:	b29a      	uxth	r2, r3
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c788:	e003      	b.n	801c792 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801c78a:	6878      	ldr	r0, [r7, #4]
 801c78c:	f002 fbce 	bl	801ef2c <tcp_send_empty_ack>
 801c790:	e000      	b.n	801c794 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c792:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801c794:	687b      	ldr	r3, [r7, #4]
 801c796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d05b      	beq.n	801c854 <tcp_receive+0x50c>
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c7a0:	4b60      	ldr	r3, [pc, #384]	; (801c924 <tcp_receive+0x5dc>)
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	1ad3      	subs	r3, r2, r3
 801c7a6:	2b00      	cmp	r3, #0
 801c7a8:	da54      	bge.n	801c854 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801c7aa:	4b5f      	ldr	r3, [pc, #380]	; (801c928 <tcp_receive+0x5e0>)
 801c7ac:	681b      	ldr	r3, [r3, #0]
 801c7ae:	b29a      	uxth	r2, r3
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c7b4:	b29b      	uxth	r3, r3
 801c7b6:	1ad3      	subs	r3, r2, r3
 801c7b8:	b29b      	uxth	r3, r3
 801c7ba:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801c7be:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c7c2:	687b      	ldr	r3, [r7, #4]
 801c7c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c7c8:	10db      	asrs	r3, r3, #3
 801c7ca:	b21b      	sxth	r3, r3
 801c7cc:	b29b      	uxth	r3, r3
 801c7ce:	1ad3      	subs	r3, r2, r3
 801c7d0:	b29b      	uxth	r3, r3
 801c7d2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c7dc:	b29a      	uxth	r2, r3
 801c7de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c7e2:	4413      	add	r3, r2
 801c7e4:	b29b      	uxth	r3, r3
 801c7e6:	b21a      	sxth	r2, r3
 801c7e8:	687b      	ldr	r3, [r7, #4]
 801c7ea:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801c7ec:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	da05      	bge.n	801c800 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801c7f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c7f8:	425b      	negs	r3, r3
 801c7fa:	b29b      	uxth	r3, r3
 801c7fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801c800:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c80a:	109b      	asrs	r3, r3, #2
 801c80c:	b21b      	sxth	r3, r3
 801c80e:	b29b      	uxth	r3, r3
 801c810:	1ad3      	subs	r3, r2, r3
 801c812:	b29b      	uxth	r3, r3
 801c814:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c81e:	b29a      	uxth	r2, r3
 801c820:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801c824:	4413      	add	r3, r2
 801c826:	b29b      	uxth	r3, r3
 801c828:	b21a      	sxth	r2, r3
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c82e:	687b      	ldr	r3, [r7, #4]
 801c830:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c834:	10db      	asrs	r3, r3, #3
 801c836:	b21b      	sxth	r3, r3
 801c838:	b29a      	uxth	r2, r3
 801c83a:	687b      	ldr	r3, [r7, #4]
 801c83c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c840:	b29b      	uxth	r3, r3
 801c842:	4413      	add	r3, r2
 801c844:	b29b      	uxth	r3, r3
 801c846:	b21a      	sxth	r2, r3
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	2200      	movs	r2, #0
 801c852:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801c854:	4b35      	ldr	r3, [pc, #212]	; (801c92c <tcp_receive+0x5e4>)
 801c856:	881b      	ldrh	r3, [r3, #0]
 801c858:	2b00      	cmp	r3, #0
 801c85a:	f000 84e2 	beq.w	801d222 <tcp_receive+0xeda>
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	7d1b      	ldrb	r3, [r3, #20]
 801c862:	2b06      	cmp	r3, #6
 801c864:	f200 84dd 	bhi.w	801d222 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c86c:	4b30      	ldr	r3, [pc, #192]	; (801c930 <tcp_receive+0x5e8>)
 801c86e:	681b      	ldr	r3, [r3, #0]
 801c870:	1ad3      	subs	r3, r2, r3
 801c872:	3b01      	subs	r3, #1
 801c874:	2b00      	cmp	r3, #0
 801c876:	f2c0 808f 	blt.w	801c998 <tcp_receive+0x650>
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c87e:	4b2b      	ldr	r3, [pc, #172]	; (801c92c <tcp_receive+0x5e4>)
 801c880:	881b      	ldrh	r3, [r3, #0]
 801c882:	4619      	mov	r1, r3
 801c884:	4b2a      	ldr	r3, [pc, #168]	; (801c930 <tcp_receive+0x5e8>)
 801c886:	681b      	ldr	r3, [r3, #0]
 801c888:	440b      	add	r3, r1
 801c88a:	1ad3      	subs	r3, r2, r3
 801c88c:	3301      	adds	r3, #1
 801c88e:	2b00      	cmp	r3, #0
 801c890:	f300 8082 	bgt.w	801c998 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801c894:	4b27      	ldr	r3, [pc, #156]	; (801c934 <tcp_receive+0x5ec>)
 801c896:	685b      	ldr	r3, [r3, #4]
 801c898:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c89e:	4b24      	ldr	r3, [pc, #144]	; (801c930 <tcp_receive+0x5e8>)
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	1ad3      	subs	r3, r2, r3
 801c8a4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801c8a6:	4b23      	ldr	r3, [pc, #140]	; (801c934 <tcp_receive+0x5ec>)
 801c8a8:	685b      	ldr	r3, [r3, #4]
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	d106      	bne.n	801c8bc <tcp_receive+0x574>
 801c8ae:	4b22      	ldr	r3, [pc, #136]	; (801c938 <tcp_receive+0x5f0>)
 801c8b0:	f240 5294 	movw	r2, #1428	; 0x594
 801c8b4:	4921      	ldr	r1, [pc, #132]	; (801c93c <tcp_receive+0x5f4>)
 801c8b6:	4822      	ldr	r0, [pc, #136]	; (801c940 <tcp_receive+0x5f8>)
 801c8b8:	f008 fa82 	bl	8024dc0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801c8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8be:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801c8c2:	4293      	cmp	r3, r2
 801c8c4:	d906      	bls.n	801c8d4 <tcp_receive+0x58c>
 801c8c6:	4b1c      	ldr	r3, [pc, #112]	; (801c938 <tcp_receive+0x5f0>)
 801c8c8:	f240 5295 	movw	r2, #1429	; 0x595
 801c8cc:	491d      	ldr	r1, [pc, #116]	; (801c944 <tcp_receive+0x5fc>)
 801c8ce:	481c      	ldr	r0, [pc, #112]	; (801c940 <tcp_receive+0x5f8>)
 801c8d0:	f008 fa76 	bl	8024dc0 <iprintf>
      off = (u16_t)off32;
 801c8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c8d6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801c8da:	4b16      	ldr	r3, [pc, #88]	; (801c934 <tcp_receive+0x5ec>)
 801c8dc:	685b      	ldr	r3, [r3, #4]
 801c8de:	891b      	ldrh	r3, [r3, #8]
 801c8e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c8e4:	429a      	cmp	r2, r3
 801c8e6:	d906      	bls.n	801c8f6 <tcp_receive+0x5ae>
 801c8e8:	4b13      	ldr	r3, [pc, #76]	; (801c938 <tcp_receive+0x5f0>)
 801c8ea:	f240 5297 	movw	r2, #1431	; 0x597
 801c8ee:	4916      	ldr	r1, [pc, #88]	; (801c948 <tcp_receive+0x600>)
 801c8f0:	4813      	ldr	r0, [pc, #76]	; (801c940 <tcp_receive+0x5f8>)
 801c8f2:	f008 fa65 	bl	8024dc0 <iprintf>
      inseg.len -= off;
 801c8f6:	4b0f      	ldr	r3, [pc, #60]	; (801c934 <tcp_receive+0x5ec>)
 801c8f8:	891a      	ldrh	r2, [r3, #8]
 801c8fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c8fe:	1ad3      	subs	r3, r2, r3
 801c900:	b29a      	uxth	r2, r3
 801c902:	4b0c      	ldr	r3, [pc, #48]	; (801c934 <tcp_receive+0x5ec>)
 801c904:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801c906:	4b0b      	ldr	r3, [pc, #44]	; (801c934 <tcp_receive+0x5ec>)
 801c908:	685b      	ldr	r3, [r3, #4]
 801c90a:	891a      	ldrh	r2, [r3, #8]
 801c90c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c910:	1ad3      	subs	r3, r2, r3
 801c912:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801c914:	e02a      	b.n	801c96c <tcp_receive+0x624>
 801c916:	bf00      	nop
 801c918:	0802c75c 	.word	0x0802c75c
 801c91c:	0802c764 	.word	0x0802c764
 801c920:	20016014 	.word	0x20016014
 801c924:	20016010 	.word	0x20016010
 801c928:	20015fd4 	.word	0x20015fd4
 801c92c:	20016016 	.word	0x20016016
 801c930:	2001600c 	.word	0x2001600c
 801c934:	20015fec 	.word	0x20015fec
 801c938:	0802c3f4 	.word	0x0802c3f4
 801c93c:	0802c76c 	.word	0x0802c76c
 801c940:	0802c440 	.word	0x0802c440
 801c944:	0802c77c 	.word	0x0802c77c
 801c948:	0802c78c 	.word	0x0802c78c
        off -= p->len;
 801c94c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c94e:	895b      	ldrh	r3, [r3, #10]
 801c950:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c954:	1ad3      	subs	r3, r2, r3
 801c956:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801c95a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c95c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c95e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801c960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c962:	2200      	movs	r2, #0
 801c964:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801c966:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801c96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c96e:	895b      	ldrh	r3, [r3, #10]
 801c970:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c974:	429a      	cmp	r2, r3
 801c976:	d8e9      	bhi.n	801c94c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801c978:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c97c:	4619      	mov	r1, r3
 801c97e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801c980:	f7fb fd96 	bl	80184b0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c988:	4a91      	ldr	r2, [pc, #580]	; (801cbd0 <tcp_receive+0x888>)
 801c98a:	6013      	str	r3, [r2, #0]
 801c98c:	4b91      	ldr	r3, [pc, #580]	; (801cbd4 <tcp_receive+0x88c>)
 801c98e:	68db      	ldr	r3, [r3, #12]
 801c990:	4a8f      	ldr	r2, [pc, #572]	; (801cbd0 <tcp_receive+0x888>)
 801c992:	6812      	ldr	r2, [r2, #0]
 801c994:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801c996:	e00d      	b.n	801c9b4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801c998:	4b8d      	ldr	r3, [pc, #564]	; (801cbd0 <tcp_receive+0x888>)
 801c99a:	681a      	ldr	r2, [r3, #0]
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9a0:	1ad3      	subs	r3, r2, r3
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	da06      	bge.n	801c9b4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	8b5b      	ldrh	r3, [r3, #26]
 801c9aa:	f043 0302 	orr.w	r3, r3, #2
 801c9ae:	b29a      	uxth	r2, r3
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801c9b4:	4b86      	ldr	r3, [pc, #536]	; (801cbd0 <tcp_receive+0x888>)
 801c9b6:	681a      	ldr	r2, [r3, #0]
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9bc:	1ad3      	subs	r3, r2, r3
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	f2c0 842a 	blt.w	801d218 <tcp_receive+0xed0>
 801c9c4:	4b82      	ldr	r3, [pc, #520]	; (801cbd0 <tcp_receive+0x888>)
 801c9c6:	681a      	ldr	r2, [r3, #0]
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c9cc:	6879      	ldr	r1, [r7, #4]
 801c9ce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801c9d0:	440b      	add	r3, r1
 801c9d2:	1ad3      	subs	r3, r2, r3
 801c9d4:	3301      	adds	r3, #1
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	f300 841e 	bgt.w	801d218 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801c9dc:	687b      	ldr	r3, [r7, #4]
 801c9de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801c9e0:	4b7b      	ldr	r3, [pc, #492]	; (801cbd0 <tcp_receive+0x888>)
 801c9e2:	681b      	ldr	r3, [r3, #0]
 801c9e4:	429a      	cmp	r2, r3
 801c9e6:	f040 829a 	bne.w	801cf1e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801c9ea:	4b7a      	ldr	r3, [pc, #488]	; (801cbd4 <tcp_receive+0x88c>)
 801c9ec:	891c      	ldrh	r4, [r3, #8]
 801c9ee:	4b79      	ldr	r3, [pc, #484]	; (801cbd4 <tcp_receive+0x88c>)
 801c9f0:	68db      	ldr	r3, [r3, #12]
 801c9f2:	899b      	ldrh	r3, [r3, #12]
 801c9f4:	b29b      	uxth	r3, r3
 801c9f6:	4618      	mov	r0, r3
 801c9f8:	f7f9 ff24 	bl	8016844 <lwip_htons>
 801c9fc:	4603      	mov	r3, r0
 801c9fe:	b2db      	uxtb	r3, r3
 801ca00:	f003 0303 	and.w	r3, r3, #3
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d001      	beq.n	801ca0c <tcp_receive+0x6c4>
 801ca08:	2301      	movs	r3, #1
 801ca0a:	e000      	b.n	801ca0e <tcp_receive+0x6c6>
 801ca0c:	2300      	movs	r3, #0
 801ca0e:	4423      	add	r3, r4
 801ca10:	b29a      	uxth	r2, r3
 801ca12:	4b71      	ldr	r3, [pc, #452]	; (801cbd8 <tcp_receive+0x890>)
 801ca14:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801ca16:	687b      	ldr	r3, [r7, #4]
 801ca18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ca1a:	4b6f      	ldr	r3, [pc, #444]	; (801cbd8 <tcp_receive+0x890>)
 801ca1c:	881b      	ldrh	r3, [r3, #0]
 801ca1e:	429a      	cmp	r2, r3
 801ca20:	d275      	bcs.n	801cb0e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801ca22:	4b6c      	ldr	r3, [pc, #432]	; (801cbd4 <tcp_receive+0x88c>)
 801ca24:	68db      	ldr	r3, [r3, #12]
 801ca26:	899b      	ldrh	r3, [r3, #12]
 801ca28:	b29b      	uxth	r3, r3
 801ca2a:	4618      	mov	r0, r3
 801ca2c:	f7f9 ff0a 	bl	8016844 <lwip_htons>
 801ca30:	4603      	mov	r3, r0
 801ca32:	b2db      	uxtb	r3, r3
 801ca34:	f003 0301 	and.w	r3, r3, #1
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	d01f      	beq.n	801ca7c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801ca3c:	4b65      	ldr	r3, [pc, #404]	; (801cbd4 <tcp_receive+0x88c>)
 801ca3e:	68db      	ldr	r3, [r3, #12]
 801ca40:	899b      	ldrh	r3, [r3, #12]
 801ca42:	b29b      	uxth	r3, r3
 801ca44:	b21b      	sxth	r3, r3
 801ca46:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ca4a:	b21c      	sxth	r4, r3
 801ca4c:	4b61      	ldr	r3, [pc, #388]	; (801cbd4 <tcp_receive+0x88c>)
 801ca4e:	68db      	ldr	r3, [r3, #12]
 801ca50:	899b      	ldrh	r3, [r3, #12]
 801ca52:	b29b      	uxth	r3, r3
 801ca54:	4618      	mov	r0, r3
 801ca56:	f7f9 fef5 	bl	8016844 <lwip_htons>
 801ca5a:	4603      	mov	r3, r0
 801ca5c:	b2db      	uxtb	r3, r3
 801ca5e:	b29b      	uxth	r3, r3
 801ca60:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801ca64:	b29b      	uxth	r3, r3
 801ca66:	4618      	mov	r0, r3
 801ca68:	f7f9 feec 	bl	8016844 <lwip_htons>
 801ca6c:	4603      	mov	r3, r0
 801ca6e:	b21b      	sxth	r3, r3
 801ca70:	4323      	orrs	r3, r4
 801ca72:	b21a      	sxth	r2, r3
 801ca74:	4b57      	ldr	r3, [pc, #348]	; (801cbd4 <tcp_receive+0x88c>)
 801ca76:	68db      	ldr	r3, [r3, #12]
 801ca78:	b292      	uxth	r2, r2
 801ca7a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801ca7c:	687b      	ldr	r3, [r7, #4]
 801ca7e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ca80:	4b54      	ldr	r3, [pc, #336]	; (801cbd4 <tcp_receive+0x88c>)
 801ca82:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801ca84:	4b53      	ldr	r3, [pc, #332]	; (801cbd4 <tcp_receive+0x88c>)
 801ca86:	68db      	ldr	r3, [r3, #12]
 801ca88:	899b      	ldrh	r3, [r3, #12]
 801ca8a:	b29b      	uxth	r3, r3
 801ca8c:	4618      	mov	r0, r3
 801ca8e:	f7f9 fed9 	bl	8016844 <lwip_htons>
 801ca92:	4603      	mov	r3, r0
 801ca94:	b2db      	uxtb	r3, r3
 801ca96:	f003 0302 	and.w	r3, r3, #2
 801ca9a:	2b00      	cmp	r3, #0
 801ca9c:	d005      	beq.n	801caaa <tcp_receive+0x762>
            inseg.len -= 1;
 801ca9e:	4b4d      	ldr	r3, [pc, #308]	; (801cbd4 <tcp_receive+0x88c>)
 801caa0:	891b      	ldrh	r3, [r3, #8]
 801caa2:	3b01      	subs	r3, #1
 801caa4:	b29a      	uxth	r2, r3
 801caa6:	4b4b      	ldr	r3, [pc, #300]	; (801cbd4 <tcp_receive+0x88c>)
 801caa8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801caaa:	4b4a      	ldr	r3, [pc, #296]	; (801cbd4 <tcp_receive+0x88c>)
 801caac:	685b      	ldr	r3, [r3, #4]
 801caae:	4a49      	ldr	r2, [pc, #292]	; (801cbd4 <tcp_receive+0x88c>)
 801cab0:	8912      	ldrh	r2, [r2, #8]
 801cab2:	4611      	mov	r1, r2
 801cab4:	4618      	mov	r0, r3
 801cab6:	f7fb fbfb 	bl	80182b0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801caba:	4b46      	ldr	r3, [pc, #280]	; (801cbd4 <tcp_receive+0x88c>)
 801cabc:	891c      	ldrh	r4, [r3, #8]
 801cabe:	4b45      	ldr	r3, [pc, #276]	; (801cbd4 <tcp_receive+0x88c>)
 801cac0:	68db      	ldr	r3, [r3, #12]
 801cac2:	899b      	ldrh	r3, [r3, #12]
 801cac4:	b29b      	uxth	r3, r3
 801cac6:	4618      	mov	r0, r3
 801cac8:	f7f9 febc 	bl	8016844 <lwip_htons>
 801cacc:	4603      	mov	r3, r0
 801cace:	b2db      	uxtb	r3, r3
 801cad0:	f003 0303 	and.w	r3, r3, #3
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d001      	beq.n	801cadc <tcp_receive+0x794>
 801cad8:	2301      	movs	r3, #1
 801cada:	e000      	b.n	801cade <tcp_receive+0x796>
 801cadc:	2300      	movs	r3, #0
 801cade:	4423      	add	r3, r4
 801cae0:	b29a      	uxth	r2, r3
 801cae2:	4b3d      	ldr	r3, [pc, #244]	; (801cbd8 <tcp_receive+0x890>)
 801cae4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cae6:	4b3c      	ldr	r3, [pc, #240]	; (801cbd8 <tcp_receive+0x890>)
 801cae8:	881b      	ldrh	r3, [r3, #0]
 801caea:	461a      	mov	r2, r3
 801caec:	4b38      	ldr	r3, [pc, #224]	; (801cbd0 <tcp_receive+0x888>)
 801caee:	681b      	ldr	r3, [r3, #0]
 801caf0:	441a      	add	r2, r3
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801caf6:	6879      	ldr	r1, [r7, #4]
 801caf8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cafa:	440b      	add	r3, r1
 801cafc:	429a      	cmp	r2, r3
 801cafe:	d006      	beq.n	801cb0e <tcp_receive+0x7c6>
 801cb00:	4b36      	ldr	r3, [pc, #216]	; (801cbdc <tcp_receive+0x894>)
 801cb02:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801cb06:	4936      	ldr	r1, [pc, #216]	; (801cbe0 <tcp_receive+0x898>)
 801cb08:	4836      	ldr	r0, [pc, #216]	; (801cbe4 <tcp_receive+0x89c>)
 801cb0a:	f008 f959 	bl	8024dc0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	f000 80e7 	beq.w	801cce6 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cb18:	4b2e      	ldr	r3, [pc, #184]	; (801cbd4 <tcp_receive+0x88c>)
 801cb1a:	68db      	ldr	r3, [r3, #12]
 801cb1c:	899b      	ldrh	r3, [r3, #12]
 801cb1e:	b29b      	uxth	r3, r3
 801cb20:	4618      	mov	r0, r3
 801cb22:	f7f9 fe8f 	bl	8016844 <lwip_htons>
 801cb26:	4603      	mov	r3, r0
 801cb28:	b2db      	uxtb	r3, r3
 801cb2a:	f003 0301 	and.w	r3, r3, #1
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d010      	beq.n	801cb54 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801cb32:	e00a      	b.n	801cb4a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801cb34:	687b      	ldr	r3, [r7, #4]
 801cb36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cb38:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cb3e:	681a      	ldr	r2, [r3, #0]
 801cb40:	687b      	ldr	r3, [r7, #4]
 801cb42:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801cb44:	68f8      	ldr	r0, [r7, #12]
 801cb46:	f7fd fcac 	bl	801a4a2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cb4e:	2b00      	cmp	r3, #0
 801cb50:	d1f0      	bne.n	801cb34 <tcp_receive+0x7ec>
 801cb52:	e0c8      	b.n	801cce6 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cb58:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801cb5a:	e052      	b.n	801cc02 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cb5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cb5e:	68db      	ldr	r3, [r3, #12]
 801cb60:	899b      	ldrh	r3, [r3, #12]
 801cb62:	b29b      	uxth	r3, r3
 801cb64:	4618      	mov	r0, r3
 801cb66:	f7f9 fe6d 	bl	8016844 <lwip_htons>
 801cb6a:	4603      	mov	r3, r0
 801cb6c:	b2db      	uxtb	r3, r3
 801cb6e:	f003 0301 	and.w	r3, r3, #1
 801cb72:	2b00      	cmp	r3, #0
 801cb74:	d03d      	beq.n	801cbf2 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801cb76:	4b17      	ldr	r3, [pc, #92]	; (801cbd4 <tcp_receive+0x88c>)
 801cb78:	68db      	ldr	r3, [r3, #12]
 801cb7a:	899b      	ldrh	r3, [r3, #12]
 801cb7c:	b29b      	uxth	r3, r3
 801cb7e:	4618      	mov	r0, r3
 801cb80:	f7f9 fe60 	bl	8016844 <lwip_htons>
 801cb84:	4603      	mov	r3, r0
 801cb86:	b2db      	uxtb	r3, r3
 801cb88:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d130      	bne.n	801cbf2 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801cb90:	4b10      	ldr	r3, [pc, #64]	; (801cbd4 <tcp_receive+0x88c>)
 801cb92:	68db      	ldr	r3, [r3, #12]
 801cb94:	899b      	ldrh	r3, [r3, #12]
 801cb96:	b29c      	uxth	r4, r3
 801cb98:	2001      	movs	r0, #1
 801cb9a:	f7f9 fe53 	bl	8016844 <lwip_htons>
 801cb9e:	4603      	mov	r3, r0
 801cba0:	461a      	mov	r2, r3
 801cba2:	4b0c      	ldr	r3, [pc, #48]	; (801cbd4 <tcp_receive+0x88c>)
 801cba4:	68db      	ldr	r3, [r3, #12]
 801cba6:	4322      	orrs	r2, r4
 801cba8:	b292      	uxth	r2, r2
 801cbaa:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801cbac:	4b09      	ldr	r3, [pc, #36]	; (801cbd4 <tcp_receive+0x88c>)
 801cbae:	891c      	ldrh	r4, [r3, #8]
 801cbb0:	4b08      	ldr	r3, [pc, #32]	; (801cbd4 <tcp_receive+0x88c>)
 801cbb2:	68db      	ldr	r3, [r3, #12]
 801cbb4:	899b      	ldrh	r3, [r3, #12]
 801cbb6:	b29b      	uxth	r3, r3
 801cbb8:	4618      	mov	r0, r3
 801cbba:	f7f9 fe43 	bl	8016844 <lwip_htons>
 801cbbe:	4603      	mov	r3, r0
 801cbc0:	b2db      	uxtb	r3, r3
 801cbc2:	f003 0303 	and.w	r3, r3, #3
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d00e      	beq.n	801cbe8 <tcp_receive+0x8a0>
 801cbca:	2301      	movs	r3, #1
 801cbcc:	e00d      	b.n	801cbea <tcp_receive+0x8a2>
 801cbce:	bf00      	nop
 801cbd0:	2001600c 	.word	0x2001600c
 801cbd4:	20015fec 	.word	0x20015fec
 801cbd8:	20016016 	.word	0x20016016
 801cbdc:	0802c3f4 	.word	0x0802c3f4
 801cbe0:	0802c79c 	.word	0x0802c79c
 801cbe4:	0802c440 	.word	0x0802c440
 801cbe8:	2300      	movs	r3, #0
 801cbea:	4423      	add	r3, r4
 801cbec:	b29a      	uxth	r2, r3
 801cbee:	4b98      	ldr	r3, [pc, #608]	; (801ce50 <tcp_receive+0xb08>)
 801cbf0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801cbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbf4:	613b      	str	r3, [r7, #16]
              next = next->next;
 801cbf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cbf8:	681b      	ldr	r3, [r3, #0]
 801cbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801cbfc:	6938      	ldr	r0, [r7, #16]
 801cbfe:	f7fd fc50 	bl	801a4a2 <tcp_seg_free>
            while (next &&
 801cc02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d00e      	beq.n	801cc26 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801cc08:	4b91      	ldr	r3, [pc, #580]	; (801ce50 <tcp_receive+0xb08>)
 801cc0a:	881b      	ldrh	r3, [r3, #0]
 801cc0c:	461a      	mov	r2, r3
 801cc0e:	4b91      	ldr	r3, [pc, #580]	; (801ce54 <tcp_receive+0xb0c>)
 801cc10:	681b      	ldr	r3, [r3, #0]
 801cc12:	441a      	add	r2, r3
 801cc14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc16:	68db      	ldr	r3, [r3, #12]
 801cc18:	685b      	ldr	r3, [r3, #4]
 801cc1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801cc1c:	8909      	ldrh	r1, [r1, #8]
 801cc1e:	440b      	add	r3, r1
 801cc20:	1ad3      	subs	r3, r2, r3
            while (next &&
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	da9a      	bge.n	801cb5c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801cc26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc28:	2b00      	cmp	r3, #0
 801cc2a:	d059      	beq.n	801cce0 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801cc2c:	4b88      	ldr	r3, [pc, #544]	; (801ce50 <tcp_receive+0xb08>)
 801cc2e:	881b      	ldrh	r3, [r3, #0]
 801cc30:	461a      	mov	r2, r3
 801cc32:	4b88      	ldr	r3, [pc, #544]	; (801ce54 <tcp_receive+0xb0c>)
 801cc34:	681b      	ldr	r3, [r3, #0]
 801cc36:	441a      	add	r2, r3
 801cc38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc3a:	68db      	ldr	r3, [r3, #12]
 801cc3c:	685b      	ldr	r3, [r3, #4]
 801cc3e:	1ad3      	subs	r3, r2, r3
            if (next &&
 801cc40:	2b00      	cmp	r3, #0
 801cc42:	dd4d      	ble.n	801cce0 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801cc44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cc46:	68db      	ldr	r3, [r3, #12]
 801cc48:	685b      	ldr	r3, [r3, #4]
 801cc4a:	b29a      	uxth	r2, r3
 801cc4c:	4b81      	ldr	r3, [pc, #516]	; (801ce54 <tcp_receive+0xb0c>)
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	b29b      	uxth	r3, r3
 801cc52:	1ad3      	subs	r3, r2, r3
 801cc54:	b29a      	uxth	r2, r3
 801cc56:	4b80      	ldr	r3, [pc, #512]	; (801ce58 <tcp_receive+0xb10>)
 801cc58:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cc5a:	4b7f      	ldr	r3, [pc, #508]	; (801ce58 <tcp_receive+0xb10>)
 801cc5c:	68db      	ldr	r3, [r3, #12]
 801cc5e:	899b      	ldrh	r3, [r3, #12]
 801cc60:	b29b      	uxth	r3, r3
 801cc62:	4618      	mov	r0, r3
 801cc64:	f7f9 fdee 	bl	8016844 <lwip_htons>
 801cc68:	4603      	mov	r3, r0
 801cc6a:	b2db      	uxtb	r3, r3
 801cc6c:	f003 0302 	and.w	r3, r3, #2
 801cc70:	2b00      	cmp	r3, #0
 801cc72:	d005      	beq.n	801cc80 <tcp_receive+0x938>
                inseg.len -= 1;
 801cc74:	4b78      	ldr	r3, [pc, #480]	; (801ce58 <tcp_receive+0xb10>)
 801cc76:	891b      	ldrh	r3, [r3, #8]
 801cc78:	3b01      	subs	r3, #1
 801cc7a:	b29a      	uxth	r2, r3
 801cc7c:	4b76      	ldr	r3, [pc, #472]	; (801ce58 <tcp_receive+0xb10>)
 801cc7e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801cc80:	4b75      	ldr	r3, [pc, #468]	; (801ce58 <tcp_receive+0xb10>)
 801cc82:	685b      	ldr	r3, [r3, #4]
 801cc84:	4a74      	ldr	r2, [pc, #464]	; (801ce58 <tcp_receive+0xb10>)
 801cc86:	8912      	ldrh	r2, [r2, #8]
 801cc88:	4611      	mov	r1, r2
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	f7fb fb10 	bl	80182b0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801cc90:	4b71      	ldr	r3, [pc, #452]	; (801ce58 <tcp_receive+0xb10>)
 801cc92:	891c      	ldrh	r4, [r3, #8]
 801cc94:	4b70      	ldr	r3, [pc, #448]	; (801ce58 <tcp_receive+0xb10>)
 801cc96:	68db      	ldr	r3, [r3, #12]
 801cc98:	899b      	ldrh	r3, [r3, #12]
 801cc9a:	b29b      	uxth	r3, r3
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	f7f9 fdd1 	bl	8016844 <lwip_htons>
 801cca2:	4603      	mov	r3, r0
 801cca4:	b2db      	uxtb	r3, r3
 801cca6:	f003 0303 	and.w	r3, r3, #3
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d001      	beq.n	801ccb2 <tcp_receive+0x96a>
 801ccae:	2301      	movs	r3, #1
 801ccb0:	e000      	b.n	801ccb4 <tcp_receive+0x96c>
 801ccb2:	2300      	movs	r3, #0
 801ccb4:	4423      	add	r3, r4
 801ccb6:	b29a      	uxth	r2, r3
 801ccb8:	4b65      	ldr	r3, [pc, #404]	; (801ce50 <tcp_receive+0xb08>)
 801ccba:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801ccbc:	4b64      	ldr	r3, [pc, #400]	; (801ce50 <tcp_receive+0xb08>)
 801ccbe:	881b      	ldrh	r3, [r3, #0]
 801ccc0:	461a      	mov	r2, r3
 801ccc2:	4b64      	ldr	r3, [pc, #400]	; (801ce54 <tcp_receive+0xb0c>)
 801ccc4:	681b      	ldr	r3, [r3, #0]
 801ccc6:	441a      	add	r2, r3
 801ccc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ccca:	68db      	ldr	r3, [r3, #12]
 801cccc:	685b      	ldr	r3, [r3, #4]
 801ccce:	429a      	cmp	r2, r3
 801ccd0:	d006      	beq.n	801cce0 <tcp_receive+0x998>
 801ccd2:	4b62      	ldr	r3, [pc, #392]	; (801ce5c <tcp_receive+0xb14>)
 801ccd4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801ccd8:	4961      	ldr	r1, [pc, #388]	; (801ce60 <tcp_receive+0xb18>)
 801ccda:	4862      	ldr	r0, [pc, #392]	; (801ce64 <tcp_receive+0xb1c>)
 801ccdc:	f008 f870 	bl	8024dc0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cce4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801cce6:	4b5a      	ldr	r3, [pc, #360]	; (801ce50 <tcp_receive+0xb08>)
 801cce8:	881b      	ldrh	r3, [r3, #0]
 801ccea:	461a      	mov	r2, r3
 801ccec:	4b59      	ldr	r3, [pc, #356]	; (801ce54 <tcp_receive+0xb0c>)
 801ccee:	681b      	ldr	r3, [r3, #0]
 801ccf0:	441a      	add	r2, r3
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801ccf6:	687b      	ldr	r3, [r7, #4]
 801ccf8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ccfa:	4b55      	ldr	r3, [pc, #340]	; (801ce50 <tcp_receive+0xb08>)
 801ccfc:	881b      	ldrh	r3, [r3, #0]
 801ccfe:	429a      	cmp	r2, r3
 801cd00:	d206      	bcs.n	801cd10 <tcp_receive+0x9c8>
 801cd02:	4b56      	ldr	r3, [pc, #344]	; (801ce5c <tcp_receive+0xb14>)
 801cd04:	f240 6207 	movw	r2, #1543	; 0x607
 801cd08:	4957      	ldr	r1, [pc, #348]	; (801ce68 <tcp_receive+0xb20>)
 801cd0a:	4856      	ldr	r0, [pc, #344]	; (801ce64 <tcp_receive+0xb1c>)
 801cd0c:	f008 f858 	bl	8024dc0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cd14:	4b4e      	ldr	r3, [pc, #312]	; (801ce50 <tcp_receive+0xb08>)
 801cd16:	881b      	ldrh	r3, [r3, #0]
 801cd18:	1ad3      	subs	r3, r2, r3
 801cd1a:	b29a      	uxth	r2, r3
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801cd20:	6878      	ldr	r0, [r7, #4]
 801cd22:	f7fc fd47 	bl	80197b4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801cd26:	4b4c      	ldr	r3, [pc, #304]	; (801ce58 <tcp_receive+0xb10>)
 801cd28:	685b      	ldr	r3, [r3, #4]
 801cd2a:	891b      	ldrh	r3, [r3, #8]
 801cd2c:	2b00      	cmp	r3, #0
 801cd2e:	d006      	beq.n	801cd3e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801cd30:	4b49      	ldr	r3, [pc, #292]	; (801ce58 <tcp_receive+0xb10>)
 801cd32:	685b      	ldr	r3, [r3, #4]
 801cd34:	4a4d      	ldr	r2, [pc, #308]	; (801ce6c <tcp_receive+0xb24>)
 801cd36:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801cd38:	4b47      	ldr	r3, [pc, #284]	; (801ce58 <tcp_receive+0xb10>)
 801cd3a:	2200      	movs	r2, #0
 801cd3c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cd3e:	4b46      	ldr	r3, [pc, #280]	; (801ce58 <tcp_receive+0xb10>)
 801cd40:	68db      	ldr	r3, [r3, #12]
 801cd42:	899b      	ldrh	r3, [r3, #12]
 801cd44:	b29b      	uxth	r3, r3
 801cd46:	4618      	mov	r0, r3
 801cd48:	f7f9 fd7c 	bl	8016844 <lwip_htons>
 801cd4c:	4603      	mov	r3, r0
 801cd4e:	b2db      	uxtb	r3, r3
 801cd50:	f003 0301 	and.w	r3, r3, #1
 801cd54:	2b00      	cmp	r3, #0
 801cd56:	f000 80b8 	beq.w	801ceca <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801cd5a:	4b45      	ldr	r3, [pc, #276]	; (801ce70 <tcp_receive+0xb28>)
 801cd5c:	781b      	ldrb	r3, [r3, #0]
 801cd5e:	f043 0320 	orr.w	r3, r3, #32
 801cd62:	b2da      	uxtb	r2, r3
 801cd64:	4b42      	ldr	r3, [pc, #264]	; (801ce70 <tcp_receive+0xb28>)
 801cd66:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801cd68:	e0af      	b.n	801ceca <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd6e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801cd70:	687b      	ldr	r3, [r7, #4]
 801cd72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cd74:	68db      	ldr	r3, [r3, #12]
 801cd76:	685b      	ldr	r3, [r3, #4]
 801cd78:	4a36      	ldr	r2, [pc, #216]	; (801ce54 <tcp_receive+0xb0c>)
 801cd7a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801cd7c:	68bb      	ldr	r3, [r7, #8]
 801cd7e:	891b      	ldrh	r3, [r3, #8]
 801cd80:	461c      	mov	r4, r3
 801cd82:	68bb      	ldr	r3, [r7, #8]
 801cd84:	68db      	ldr	r3, [r3, #12]
 801cd86:	899b      	ldrh	r3, [r3, #12]
 801cd88:	b29b      	uxth	r3, r3
 801cd8a:	4618      	mov	r0, r3
 801cd8c:	f7f9 fd5a 	bl	8016844 <lwip_htons>
 801cd90:	4603      	mov	r3, r0
 801cd92:	b2db      	uxtb	r3, r3
 801cd94:	f003 0303 	and.w	r3, r3, #3
 801cd98:	2b00      	cmp	r3, #0
 801cd9a:	d001      	beq.n	801cda0 <tcp_receive+0xa58>
 801cd9c:	2301      	movs	r3, #1
 801cd9e:	e000      	b.n	801cda2 <tcp_receive+0xa5a>
 801cda0:	2300      	movs	r3, #0
 801cda2:	191a      	adds	r2, r3, r4
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cda8:	441a      	add	r2, r3
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801cdae:	687b      	ldr	r3, [r7, #4]
 801cdb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801cdb2:	461c      	mov	r4, r3
 801cdb4:	68bb      	ldr	r3, [r7, #8]
 801cdb6:	891b      	ldrh	r3, [r3, #8]
 801cdb8:	461d      	mov	r5, r3
 801cdba:	68bb      	ldr	r3, [r7, #8]
 801cdbc:	68db      	ldr	r3, [r3, #12]
 801cdbe:	899b      	ldrh	r3, [r3, #12]
 801cdc0:	b29b      	uxth	r3, r3
 801cdc2:	4618      	mov	r0, r3
 801cdc4:	f7f9 fd3e 	bl	8016844 <lwip_htons>
 801cdc8:	4603      	mov	r3, r0
 801cdca:	b2db      	uxtb	r3, r3
 801cdcc:	f003 0303 	and.w	r3, r3, #3
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d001      	beq.n	801cdd8 <tcp_receive+0xa90>
 801cdd4:	2301      	movs	r3, #1
 801cdd6:	e000      	b.n	801cdda <tcp_receive+0xa92>
 801cdd8:	2300      	movs	r3, #0
 801cdda:	442b      	add	r3, r5
 801cddc:	429c      	cmp	r4, r3
 801cdde:	d206      	bcs.n	801cdee <tcp_receive+0xaa6>
 801cde0:	4b1e      	ldr	r3, [pc, #120]	; (801ce5c <tcp_receive+0xb14>)
 801cde2:	f240 622b 	movw	r2, #1579	; 0x62b
 801cde6:	4923      	ldr	r1, [pc, #140]	; (801ce74 <tcp_receive+0xb2c>)
 801cde8:	481e      	ldr	r0, [pc, #120]	; (801ce64 <tcp_receive+0xb1c>)
 801cdea:	f007 ffe9 	bl	8024dc0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801cdee:	68bb      	ldr	r3, [r7, #8]
 801cdf0:	891b      	ldrh	r3, [r3, #8]
 801cdf2:	461c      	mov	r4, r3
 801cdf4:	68bb      	ldr	r3, [r7, #8]
 801cdf6:	68db      	ldr	r3, [r3, #12]
 801cdf8:	899b      	ldrh	r3, [r3, #12]
 801cdfa:	b29b      	uxth	r3, r3
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	f7f9 fd21 	bl	8016844 <lwip_htons>
 801ce02:	4603      	mov	r3, r0
 801ce04:	b2db      	uxtb	r3, r3
 801ce06:	f003 0303 	and.w	r3, r3, #3
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	d001      	beq.n	801ce12 <tcp_receive+0xaca>
 801ce0e:	2301      	movs	r3, #1
 801ce10:	e000      	b.n	801ce14 <tcp_receive+0xacc>
 801ce12:	2300      	movs	r3, #0
 801ce14:	1919      	adds	r1, r3, r4
 801ce16:	687b      	ldr	r3, [r7, #4]
 801ce18:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801ce1a:	b28b      	uxth	r3, r1
 801ce1c:	1ad3      	subs	r3, r2, r3
 801ce1e:	b29a      	uxth	r2, r3
 801ce20:	687b      	ldr	r3, [r7, #4]
 801ce22:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801ce24:	6878      	ldr	r0, [r7, #4]
 801ce26:	f7fc fcc5 	bl	80197b4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801ce2a:	68bb      	ldr	r3, [r7, #8]
 801ce2c:	685b      	ldr	r3, [r3, #4]
 801ce2e:	891b      	ldrh	r3, [r3, #8]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d028      	beq.n	801ce86 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801ce34:	4b0d      	ldr	r3, [pc, #52]	; (801ce6c <tcp_receive+0xb24>)
 801ce36:	681b      	ldr	r3, [r3, #0]
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d01d      	beq.n	801ce78 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801ce3c:	4b0b      	ldr	r3, [pc, #44]	; (801ce6c <tcp_receive+0xb24>)
 801ce3e:	681a      	ldr	r2, [r3, #0]
 801ce40:	68bb      	ldr	r3, [r7, #8]
 801ce42:	685b      	ldr	r3, [r3, #4]
 801ce44:	4619      	mov	r1, r3
 801ce46:	4610      	mov	r0, r2
 801ce48:	f7fb fc86 	bl	8018758 <pbuf_cat>
 801ce4c:	e018      	b.n	801ce80 <tcp_receive+0xb38>
 801ce4e:	bf00      	nop
 801ce50:	20016016 	.word	0x20016016
 801ce54:	2001600c 	.word	0x2001600c
 801ce58:	20015fec 	.word	0x20015fec
 801ce5c:	0802c3f4 	.word	0x0802c3f4
 801ce60:	0802c7d4 	.word	0x0802c7d4
 801ce64:	0802c440 	.word	0x0802c440
 801ce68:	0802c810 	.word	0x0802c810
 801ce6c:	2001601c 	.word	0x2001601c
 801ce70:	20016019 	.word	0x20016019
 801ce74:	0802c830 	.word	0x0802c830
            } else {
              recv_data = cseg->p;
 801ce78:	68bb      	ldr	r3, [r7, #8]
 801ce7a:	685b      	ldr	r3, [r3, #4]
 801ce7c:	4a70      	ldr	r2, [pc, #448]	; (801d040 <tcp_receive+0xcf8>)
 801ce7e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801ce80:	68bb      	ldr	r3, [r7, #8]
 801ce82:	2200      	movs	r2, #0
 801ce84:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801ce86:	68bb      	ldr	r3, [r7, #8]
 801ce88:	68db      	ldr	r3, [r3, #12]
 801ce8a:	899b      	ldrh	r3, [r3, #12]
 801ce8c:	b29b      	uxth	r3, r3
 801ce8e:	4618      	mov	r0, r3
 801ce90:	f7f9 fcd8 	bl	8016844 <lwip_htons>
 801ce94:	4603      	mov	r3, r0
 801ce96:	b2db      	uxtb	r3, r3
 801ce98:	f003 0301 	and.w	r3, r3, #1
 801ce9c:	2b00      	cmp	r3, #0
 801ce9e:	d00d      	beq.n	801cebc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801cea0:	4b68      	ldr	r3, [pc, #416]	; (801d044 <tcp_receive+0xcfc>)
 801cea2:	781b      	ldrb	r3, [r3, #0]
 801cea4:	f043 0320 	orr.w	r3, r3, #32
 801cea8:	b2da      	uxtb	r2, r3
 801ceaa:	4b66      	ldr	r3, [pc, #408]	; (801d044 <tcp_receive+0xcfc>)
 801ceac:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801ceae:	687b      	ldr	r3, [r7, #4]
 801ceb0:	7d1b      	ldrb	r3, [r3, #20]
 801ceb2:	2b04      	cmp	r3, #4
 801ceb4:	d102      	bne.n	801cebc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	2207      	movs	r2, #7
 801ceba:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801cebc:	68bb      	ldr	r3, [r7, #8]
 801cebe:	681a      	ldr	r2, [r3, #0]
 801cec0:	687b      	ldr	r3, [r7, #4]
 801cec2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801cec4:	68b8      	ldr	r0, [r7, #8]
 801cec6:	f7fd faec 	bl	801a4a2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801ceca:	687b      	ldr	r3, [r7, #4]
 801cecc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d008      	beq.n	801cee4 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801ced2:	687b      	ldr	r3, [r7, #4]
 801ced4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ced6:	68db      	ldr	r3, [r3, #12]
 801ced8:	685a      	ldr	r2, [r3, #4]
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801cede:	429a      	cmp	r2, r3
 801cee0:	f43f af43 	beq.w	801cd6a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801cee4:	687b      	ldr	r3, [r7, #4]
 801cee6:	8b5b      	ldrh	r3, [r3, #26]
 801cee8:	f003 0301 	and.w	r3, r3, #1
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d00e      	beq.n	801cf0e <tcp_receive+0xbc6>
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	8b5b      	ldrh	r3, [r3, #26]
 801cef4:	f023 0301 	bic.w	r3, r3, #1
 801cef8:	b29a      	uxth	r2, r3
 801cefa:	687b      	ldr	r3, [r7, #4]
 801cefc:	835a      	strh	r2, [r3, #26]
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	8b5b      	ldrh	r3, [r3, #26]
 801cf02:	f043 0302 	orr.w	r3, r3, #2
 801cf06:	b29a      	uxth	r2, r3
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801cf0c:	e188      	b.n	801d220 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	8b5b      	ldrh	r3, [r3, #26]
 801cf12:	f043 0301 	orr.w	r3, r3, #1
 801cf16:	b29a      	uxth	r2, r3
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801cf1c:	e180      	b.n	801d220 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801cf1e:	687b      	ldr	r3, [r7, #4]
 801cf20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cf22:	2b00      	cmp	r3, #0
 801cf24:	d106      	bne.n	801cf34 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801cf26:	4848      	ldr	r0, [pc, #288]	; (801d048 <tcp_receive+0xd00>)
 801cf28:	f7fd fad4 	bl	801a4d4 <tcp_seg_copy>
 801cf2c:	4602      	mov	r2, r0
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	675a      	str	r2, [r3, #116]	; 0x74
 801cf32:	e16d      	b.n	801d210 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801cf34:	2300      	movs	r3, #0
 801cf36:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cf3c:	63bb      	str	r3, [r7, #56]	; 0x38
 801cf3e:	e157      	b.n	801d1f0 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801cf40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf42:	68db      	ldr	r3, [r3, #12]
 801cf44:	685a      	ldr	r2, [r3, #4]
 801cf46:	4b41      	ldr	r3, [pc, #260]	; (801d04c <tcp_receive+0xd04>)
 801cf48:	681b      	ldr	r3, [r3, #0]
 801cf4a:	429a      	cmp	r2, r3
 801cf4c:	d11d      	bne.n	801cf8a <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801cf4e:	4b3e      	ldr	r3, [pc, #248]	; (801d048 <tcp_receive+0xd00>)
 801cf50:	891a      	ldrh	r2, [r3, #8]
 801cf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf54:	891b      	ldrh	r3, [r3, #8]
 801cf56:	429a      	cmp	r2, r3
 801cf58:	f240 814f 	bls.w	801d1fa <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cf5c:	483a      	ldr	r0, [pc, #232]	; (801d048 <tcp_receive+0xd00>)
 801cf5e:	f7fd fab9 	bl	801a4d4 <tcp_seg_copy>
 801cf62:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801cf64:	697b      	ldr	r3, [r7, #20]
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	f000 8149 	beq.w	801d1fe <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801cf6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	d003      	beq.n	801cf7a <tcp_receive+0xc32>
                    prev->next = cseg;
 801cf72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf74:	697a      	ldr	r2, [r7, #20]
 801cf76:	601a      	str	r2, [r3, #0]
 801cf78:	e002      	b.n	801cf80 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	697a      	ldr	r2, [r7, #20]
 801cf7e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801cf80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cf82:	6978      	ldr	r0, [r7, #20]
 801cf84:	f7ff f8dc 	bl	801c140 <tcp_oos_insert_segment>
                }
                break;
 801cf88:	e139      	b.n	801d1fe <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801cf8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d117      	bne.n	801cfc0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801cf90:	4b2e      	ldr	r3, [pc, #184]	; (801d04c <tcp_receive+0xd04>)
 801cf92:	681a      	ldr	r2, [r3, #0]
 801cf94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cf96:	68db      	ldr	r3, [r3, #12]
 801cf98:	685b      	ldr	r3, [r3, #4]
 801cf9a:	1ad3      	subs	r3, r2, r3
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	da57      	bge.n	801d050 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cfa0:	4829      	ldr	r0, [pc, #164]	; (801d048 <tcp_receive+0xd00>)
 801cfa2:	f7fd fa97 	bl	801a4d4 <tcp_seg_copy>
 801cfa6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801cfa8:	69bb      	ldr	r3, [r7, #24]
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	f000 8129 	beq.w	801d202 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	69ba      	ldr	r2, [r7, #24]
 801cfb4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801cfb6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cfb8:	69b8      	ldr	r0, [r7, #24]
 801cfba:	f7ff f8c1 	bl	801c140 <tcp_oos_insert_segment>
                  }
                  break;
 801cfbe:	e120      	b.n	801d202 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801cfc0:	4b22      	ldr	r3, [pc, #136]	; (801d04c <tcp_receive+0xd04>)
 801cfc2:	681a      	ldr	r2, [r3, #0]
 801cfc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cfc6:	68db      	ldr	r3, [r3, #12]
 801cfc8:	685b      	ldr	r3, [r3, #4]
 801cfca:	1ad3      	subs	r3, r2, r3
 801cfcc:	3b01      	subs	r3, #1
 801cfce:	2b00      	cmp	r3, #0
 801cfd0:	db3e      	blt.n	801d050 <tcp_receive+0xd08>
 801cfd2:	4b1e      	ldr	r3, [pc, #120]	; (801d04c <tcp_receive+0xd04>)
 801cfd4:	681a      	ldr	r2, [r3, #0]
 801cfd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cfd8:	68db      	ldr	r3, [r3, #12]
 801cfda:	685b      	ldr	r3, [r3, #4]
 801cfdc:	1ad3      	subs	r3, r2, r3
 801cfde:	3301      	adds	r3, #1
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	dc35      	bgt.n	801d050 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cfe4:	4818      	ldr	r0, [pc, #96]	; (801d048 <tcp_receive+0xd00>)
 801cfe6:	f7fd fa75 	bl	801a4d4 <tcp_seg_copy>
 801cfea:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801cfec:	69fb      	ldr	r3, [r7, #28]
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	f000 8109 	beq.w	801d206 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801cff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cff6:	68db      	ldr	r3, [r3, #12]
 801cff8:	685b      	ldr	r3, [r3, #4]
 801cffa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801cffc:	8912      	ldrh	r2, [r2, #8]
 801cffe:	441a      	add	r2, r3
 801d000:	4b12      	ldr	r3, [pc, #72]	; (801d04c <tcp_receive+0xd04>)
 801d002:	681b      	ldr	r3, [r3, #0]
 801d004:	1ad3      	subs	r3, r2, r3
 801d006:	2b00      	cmp	r3, #0
 801d008:	dd12      	ble.n	801d030 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d00a:	4b10      	ldr	r3, [pc, #64]	; (801d04c <tcp_receive+0xd04>)
 801d00c:	681b      	ldr	r3, [r3, #0]
 801d00e:	b29a      	uxth	r2, r3
 801d010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d012:	68db      	ldr	r3, [r3, #12]
 801d014:	685b      	ldr	r3, [r3, #4]
 801d016:	b29b      	uxth	r3, r3
 801d018:	1ad3      	subs	r3, r2, r3
 801d01a:	b29a      	uxth	r2, r3
 801d01c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d01e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d022:	685a      	ldr	r2, [r3, #4]
 801d024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d026:	891b      	ldrh	r3, [r3, #8]
 801d028:	4619      	mov	r1, r3
 801d02a:	4610      	mov	r0, r2
 801d02c:	f7fb f940 	bl	80182b0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801d030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d032:	69fa      	ldr	r2, [r7, #28]
 801d034:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801d036:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d038:	69f8      	ldr	r0, [r7, #28]
 801d03a:	f7ff f881 	bl	801c140 <tcp_oos_insert_segment>
                  }
                  break;
 801d03e:	e0e2      	b.n	801d206 <tcp_receive+0xebe>
 801d040:	2001601c 	.word	0x2001601c
 801d044:	20016019 	.word	0x20016019
 801d048:	20015fec 	.word	0x20015fec
 801d04c:	2001600c 	.word	0x2001600c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801d050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d052:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801d054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d056:	681b      	ldr	r3, [r3, #0]
 801d058:	2b00      	cmp	r3, #0
 801d05a:	f040 80c6 	bne.w	801d1ea <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801d05e:	4b80      	ldr	r3, [pc, #512]	; (801d260 <tcp_receive+0xf18>)
 801d060:	681a      	ldr	r2, [r3, #0]
 801d062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d064:	68db      	ldr	r3, [r3, #12]
 801d066:	685b      	ldr	r3, [r3, #4]
 801d068:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	f340 80bd 	ble.w	801d1ea <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d072:	68db      	ldr	r3, [r3, #12]
 801d074:	899b      	ldrh	r3, [r3, #12]
 801d076:	b29b      	uxth	r3, r3
 801d078:	4618      	mov	r0, r3
 801d07a:	f7f9 fbe3 	bl	8016844 <lwip_htons>
 801d07e:	4603      	mov	r3, r0
 801d080:	b2db      	uxtb	r3, r3
 801d082:	f003 0301 	and.w	r3, r3, #1
 801d086:	2b00      	cmp	r3, #0
 801d088:	f040 80bf 	bne.w	801d20a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801d08c:	4875      	ldr	r0, [pc, #468]	; (801d264 <tcp_receive+0xf1c>)
 801d08e:	f7fd fa21 	bl	801a4d4 <tcp_seg_copy>
 801d092:	4602      	mov	r2, r0
 801d094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d096:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801d098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	2b00      	cmp	r3, #0
 801d09e:	f000 80b6 	beq.w	801d20e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801d0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0a4:	68db      	ldr	r3, [r3, #12]
 801d0a6:	685b      	ldr	r3, [r3, #4]
 801d0a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d0aa:	8912      	ldrh	r2, [r2, #8]
 801d0ac:	441a      	add	r2, r3
 801d0ae:	4b6c      	ldr	r3, [pc, #432]	; (801d260 <tcp_receive+0xf18>)
 801d0b0:	681b      	ldr	r3, [r3, #0]
 801d0b2:	1ad3      	subs	r3, r2, r3
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	dd12      	ble.n	801d0de <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d0b8:	4b69      	ldr	r3, [pc, #420]	; (801d260 <tcp_receive+0xf18>)
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	b29a      	uxth	r2, r3
 801d0be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0c0:	68db      	ldr	r3, [r3, #12]
 801d0c2:	685b      	ldr	r3, [r3, #4]
 801d0c4:	b29b      	uxth	r3, r3
 801d0c6:	1ad3      	subs	r3, r2, r3
 801d0c8:	b29a      	uxth	r2, r3
 801d0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0cc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801d0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0d0:	685a      	ldr	r2, [r3, #4]
 801d0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0d4:	891b      	ldrh	r3, [r3, #8]
 801d0d6:	4619      	mov	r1, r3
 801d0d8:	4610      	mov	r0, r2
 801d0da:	f7fb f8e9 	bl	80182b0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801d0de:	4b62      	ldr	r3, [pc, #392]	; (801d268 <tcp_receive+0xf20>)
 801d0e0:	881b      	ldrh	r3, [r3, #0]
 801d0e2:	461a      	mov	r2, r3
 801d0e4:	4b5e      	ldr	r3, [pc, #376]	; (801d260 <tcp_receive+0xf18>)
 801d0e6:	681b      	ldr	r3, [r3, #0]
 801d0e8:	441a      	add	r2, r3
 801d0ea:	687b      	ldr	r3, [r7, #4]
 801d0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0ee:	6879      	ldr	r1, [r7, #4]
 801d0f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d0f2:	440b      	add	r3, r1
 801d0f4:	1ad3      	subs	r3, r2, r3
 801d0f6:	2b00      	cmp	r3, #0
 801d0f8:	f340 8089 	ble.w	801d20e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d0fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d0fe:	681b      	ldr	r3, [r3, #0]
 801d100:	68db      	ldr	r3, [r3, #12]
 801d102:	899b      	ldrh	r3, [r3, #12]
 801d104:	b29b      	uxth	r3, r3
 801d106:	4618      	mov	r0, r3
 801d108:	f7f9 fb9c 	bl	8016844 <lwip_htons>
 801d10c:	4603      	mov	r3, r0
 801d10e:	b2db      	uxtb	r3, r3
 801d110:	f003 0301 	and.w	r3, r3, #1
 801d114:	2b00      	cmp	r3, #0
 801d116:	d022      	beq.n	801d15e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d11a:	681b      	ldr	r3, [r3, #0]
 801d11c:	68db      	ldr	r3, [r3, #12]
 801d11e:	899b      	ldrh	r3, [r3, #12]
 801d120:	b29b      	uxth	r3, r3
 801d122:	b21b      	sxth	r3, r3
 801d124:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d128:	b21c      	sxth	r4, r3
 801d12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d12c:	681b      	ldr	r3, [r3, #0]
 801d12e:	68db      	ldr	r3, [r3, #12]
 801d130:	899b      	ldrh	r3, [r3, #12]
 801d132:	b29b      	uxth	r3, r3
 801d134:	4618      	mov	r0, r3
 801d136:	f7f9 fb85 	bl	8016844 <lwip_htons>
 801d13a:	4603      	mov	r3, r0
 801d13c:	b2db      	uxtb	r3, r3
 801d13e:	b29b      	uxth	r3, r3
 801d140:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801d144:	b29b      	uxth	r3, r3
 801d146:	4618      	mov	r0, r3
 801d148:	f7f9 fb7c 	bl	8016844 <lwip_htons>
 801d14c:	4603      	mov	r3, r0
 801d14e:	b21b      	sxth	r3, r3
 801d150:	4323      	orrs	r3, r4
 801d152:	b21a      	sxth	r2, r3
 801d154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d156:	681b      	ldr	r3, [r3, #0]
 801d158:	68db      	ldr	r3, [r3, #12]
 801d15a:	b292      	uxth	r2, r2
 801d15c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d15e:	687b      	ldr	r3, [r7, #4]
 801d160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d162:	b29a      	uxth	r2, r3
 801d164:	687b      	ldr	r3, [r7, #4]
 801d166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d168:	4413      	add	r3, r2
 801d16a:	b299      	uxth	r1, r3
 801d16c:	4b3c      	ldr	r3, [pc, #240]	; (801d260 <tcp_receive+0xf18>)
 801d16e:	681b      	ldr	r3, [r3, #0]
 801d170:	b29a      	uxth	r2, r3
 801d172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d174:	681b      	ldr	r3, [r3, #0]
 801d176:	1a8a      	subs	r2, r1, r2
 801d178:	b292      	uxth	r2, r2
 801d17a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801d17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	685a      	ldr	r2, [r3, #4]
 801d182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	891b      	ldrh	r3, [r3, #8]
 801d188:	4619      	mov	r1, r3
 801d18a:	4610      	mov	r0, r2
 801d18c:	f7fb f890 	bl	80182b0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801d190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	891c      	ldrh	r4, [r3, #8]
 801d196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d198:	681b      	ldr	r3, [r3, #0]
 801d19a:	68db      	ldr	r3, [r3, #12]
 801d19c:	899b      	ldrh	r3, [r3, #12]
 801d19e:	b29b      	uxth	r3, r3
 801d1a0:	4618      	mov	r0, r3
 801d1a2:	f7f9 fb4f 	bl	8016844 <lwip_htons>
 801d1a6:	4603      	mov	r3, r0
 801d1a8:	b2db      	uxtb	r3, r3
 801d1aa:	f003 0303 	and.w	r3, r3, #3
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d001      	beq.n	801d1b6 <tcp_receive+0xe6e>
 801d1b2:	2301      	movs	r3, #1
 801d1b4:	e000      	b.n	801d1b8 <tcp_receive+0xe70>
 801d1b6:	2300      	movs	r3, #0
 801d1b8:	4423      	add	r3, r4
 801d1ba:	b29a      	uxth	r2, r3
 801d1bc:	4b2a      	ldr	r3, [pc, #168]	; (801d268 <tcp_receive+0xf20>)
 801d1be:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d1c0:	4b29      	ldr	r3, [pc, #164]	; (801d268 <tcp_receive+0xf20>)
 801d1c2:	881b      	ldrh	r3, [r3, #0]
 801d1c4:	461a      	mov	r2, r3
 801d1c6:	4b26      	ldr	r3, [pc, #152]	; (801d260 <tcp_receive+0xf18>)
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	441a      	add	r2, r3
 801d1cc:	687b      	ldr	r3, [r7, #4]
 801d1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1d0:	6879      	ldr	r1, [r7, #4]
 801d1d2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d1d4:	440b      	add	r3, r1
 801d1d6:	429a      	cmp	r2, r3
 801d1d8:	d019      	beq.n	801d20e <tcp_receive+0xec6>
 801d1da:	4b24      	ldr	r3, [pc, #144]	; (801d26c <tcp_receive+0xf24>)
 801d1dc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801d1e0:	4923      	ldr	r1, [pc, #140]	; (801d270 <tcp_receive+0xf28>)
 801d1e2:	4824      	ldr	r0, [pc, #144]	; (801d274 <tcp_receive+0xf2c>)
 801d1e4:	f007 fdec 	bl	8024dc0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801d1e8:	e011      	b.n	801d20e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d1ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1ec:	681b      	ldr	r3, [r3, #0]
 801d1ee:	63bb      	str	r3, [r7, #56]	; 0x38
 801d1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	f47f aea4 	bne.w	801cf40 <tcp_receive+0xbf8>
 801d1f8:	e00a      	b.n	801d210 <tcp_receive+0xec8>
                break;
 801d1fa:	bf00      	nop
 801d1fc:	e008      	b.n	801d210 <tcp_receive+0xec8>
                break;
 801d1fe:	bf00      	nop
 801d200:	e006      	b.n	801d210 <tcp_receive+0xec8>
                  break;
 801d202:	bf00      	nop
 801d204:	e004      	b.n	801d210 <tcp_receive+0xec8>
                  break;
 801d206:	bf00      	nop
 801d208:	e002      	b.n	801d210 <tcp_receive+0xec8>
                  break;
 801d20a:	bf00      	nop
 801d20c:	e000      	b.n	801d210 <tcp_receive+0xec8>
                break;
 801d20e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d210:	6878      	ldr	r0, [r7, #4]
 801d212:	f001 fe8b 	bl	801ef2c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801d216:	e003      	b.n	801d220 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801d218:	6878      	ldr	r0, [r7, #4]
 801d21a:	f001 fe87 	bl	801ef2c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d21e:	e01a      	b.n	801d256 <tcp_receive+0xf0e>
 801d220:	e019      	b.n	801d256 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d222:	4b0f      	ldr	r3, [pc, #60]	; (801d260 <tcp_receive+0xf18>)
 801d224:	681a      	ldr	r2, [r3, #0]
 801d226:	687b      	ldr	r3, [r7, #4]
 801d228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d22a:	1ad3      	subs	r3, r2, r3
 801d22c:	2b00      	cmp	r3, #0
 801d22e:	db0a      	blt.n	801d246 <tcp_receive+0xefe>
 801d230:	4b0b      	ldr	r3, [pc, #44]	; (801d260 <tcp_receive+0xf18>)
 801d232:	681a      	ldr	r2, [r3, #0]
 801d234:	687b      	ldr	r3, [r7, #4]
 801d236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d238:	6879      	ldr	r1, [r7, #4]
 801d23a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d23c:	440b      	add	r3, r1
 801d23e:	1ad3      	subs	r3, r2, r3
 801d240:	3301      	adds	r3, #1
 801d242:	2b00      	cmp	r3, #0
 801d244:	dd07      	ble.n	801d256 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801d246:	687b      	ldr	r3, [r7, #4]
 801d248:	8b5b      	ldrh	r3, [r3, #26]
 801d24a:	f043 0302 	orr.w	r3, r3, #2
 801d24e:	b29a      	uxth	r2, r3
 801d250:	687b      	ldr	r3, [r7, #4]
 801d252:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801d254:	e7ff      	b.n	801d256 <tcp_receive+0xf0e>
 801d256:	bf00      	nop
 801d258:	3750      	adds	r7, #80	; 0x50
 801d25a:	46bd      	mov	sp, r7
 801d25c:	bdb0      	pop	{r4, r5, r7, pc}
 801d25e:	bf00      	nop
 801d260:	2001600c 	.word	0x2001600c
 801d264:	20015fec 	.word	0x20015fec
 801d268:	20016016 	.word	0x20016016
 801d26c:	0802c3f4 	.word	0x0802c3f4
 801d270:	0802c79c 	.word	0x0802c79c
 801d274:	0802c440 	.word	0x0802c440

0801d278 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801d278:	b480      	push	{r7}
 801d27a:	b083      	sub	sp, #12
 801d27c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801d27e:	4b15      	ldr	r3, [pc, #84]	; (801d2d4 <tcp_get_next_optbyte+0x5c>)
 801d280:	881b      	ldrh	r3, [r3, #0]
 801d282:	1c5a      	adds	r2, r3, #1
 801d284:	b291      	uxth	r1, r2
 801d286:	4a13      	ldr	r2, [pc, #76]	; (801d2d4 <tcp_get_next_optbyte+0x5c>)
 801d288:	8011      	strh	r1, [r2, #0]
 801d28a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d28c:	4b12      	ldr	r3, [pc, #72]	; (801d2d8 <tcp_get_next_optbyte+0x60>)
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	2b00      	cmp	r3, #0
 801d292:	d004      	beq.n	801d29e <tcp_get_next_optbyte+0x26>
 801d294:	4b11      	ldr	r3, [pc, #68]	; (801d2dc <tcp_get_next_optbyte+0x64>)
 801d296:	881b      	ldrh	r3, [r3, #0]
 801d298:	88fa      	ldrh	r2, [r7, #6]
 801d29a:	429a      	cmp	r2, r3
 801d29c:	d208      	bcs.n	801d2b0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d29e:	4b10      	ldr	r3, [pc, #64]	; (801d2e0 <tcp_get_next_optbyte+0x68>)
 801d2a0:	681b      	ldr	r3, [r3, #0]
 801d2a2:	3314      	adds	r3, #20
 801d2a4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801d2a6:	88fb      	ldrh	r3, [r7, #6]
 801d2a8:	683a      	ldr	r2, [r7, #0]
 801d2aa:	4413      	add	r3, r2
 801d2ac:	781b      	ldrb	r3, [r3, #0]
 801d2ae:	e00b      	b.n	801d2c8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d2b0:	88fb      	ldrh	r3, [r7, #6]
 801d2b2:	b2da      	uxtb	r2, r3
 801d2b4:	4b09      	ldr	r3, [pc, #36]	; (801d2dc <tcp_get_next_optbyte+0x64>)
 801d2b6:	881b      	ldrh	r3, [r3, #0]
 801d2b8:	b2db      	uxtb	r3, r3
 801d2ba:	1ad3      	subs	r3, r2, r3
 801d2bc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801d2be:	4b06      	ldr	r3, [pc, #24]	; (801d2d8 <tcp_get_next_optbyte+0x60>)
 801d2c0:	681a      	ldr	r2, [r3, #0]
 801d2c2:	797b      	ldrb	r3, [r7, #5]
 801d2c4:	4413      	add	r3, r2
 801d2c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d2c8:	4618      	mov	r0, r3
 801d2ca:	370c      	adds	r7, #12
 801d2cc:	46bd      	mov	sp, r7
 801d2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2d2:	4770      	bx	lr
 801d2d4:	20016008 	.word	0x20016008
 801d2d8:	20016004 	.word	0x20016004
 801d2dc:	20016002 	.word	0x20016002
 801d2e0:	20015ffc 	.word	0x20015ffc

0801d2e4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801d2e4:	b580      	push	{r7, lr}
 801d2e6:	b084      	sub	sp, #16
 801d2e8:	af00      	add	r7, sp, #0
 801d2ea:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	2b00      	cmp	r3, #0
 801d2f0:	d106      	bne.n	801d300 <tcp_parseopt+0x1c>
 801d2f2:	4b32      	ldr	r3, [pc, #200]	; (801d3bc <tcp_parseopt+0xd8>)
 801d2f4:	f240 727d 	movw	r2, #1917	; 0x77d
 801d2f8:	4931      	ldr	r1, [pc, #196]	; (801d3c0 <tcp_parseopt+0xdc>)
 801d2fa:	4832      	ldr	r0, [pc, #200]	; (801d3c4 <tcp_parseopt+0xe0>)
 801d2fc:	f007 fd60 	bl	8024dc0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801d300:	4b31      	ldr	r3, [pc, #196]	; (801d3c8 <tcp_parseopt+0xe4>)
 801d302:	881b      	ldrh	r3, [r3, #0]
 801d304:	2b00      	cmp	r3, #0
 801d306:	d055      	beq.n	801d3b4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d308:	4b30      	ldr	r3, [pc, #192]	; (801d3cc <tcp_parseopt+0xe8>)
 801d30a:	2200      	movs	r2, #0
 801d30c:	801a      	strh	r2, [r3, #0]
 801d30e:	e045      	b.n	801d39c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801d310:	f7ff ffb2 	bl	801d278 <tcp_get_next_optbyte>
 801d314:	4603      	mov	r3, r0
 801d316:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801d318:	7bfb      	ldrb	r3, [r7, #15]
 801d31a:	2b02      	cmp	r3, #2
 801d31c:	d006      	beq.n	801d32c <tcp_parseopt+0x48>
 801d31e:	2b02      	cmp	r3, #2
 801d320:	dc2b      	bgt.n	801d37a <tcp_parseopt+0x96>
 801d322:	2b00      	cmp	r3, #0
 801d324:	d041      	beq.n	801d3aa <tcp_parseopt+0xc6>
 801d326:	2b01      	cmp	r3, #1
 801d328:	d127      	bne.n	801d37a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801d32a:	e037      	b.n	801d39c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d32c:	f7ff ffa4 	bl	801d278 <tcp_get_next_optbyte>
 801d330:	4603      	mov	r3, r0
 801d332:	2b04      	cmp	r3, #4
 801d334:	d13b      	bne.n	801d3ae <tcp_parseopt+0xca>
 801d336:	4b25      	ldr	r3, [pc, #148]	; (801d3cc <tcp_parseopt+0xe8>)
 801d338:	881b      	ldrh	r3, [r3, #0]
 801d33a:	3301      	adds	r3, #1
 801d33c:	4a22      	ldr	r2, [pc, #136]	; (801d3c8 <tcp_parseopt+0xe4>)
 801d33e:	8812      	ldrh	r2, [r2, #0]
 801d340:	4293      	cmp	r3, r2
 801d342:	da34      	bge.n	801d3ae <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d344:	f7ff ff98 	bl	801d278 <tcp_get_next_optbyte>
 801d348:	4603      	mov	r3, r0
 801d34a:	b29b      	uxth	r3, r3
 801d34c:	021b      	lsls	r3, r3, #8
 801d34e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801d350:	f7ff ff92 	bl	801d278 <tcp_get_next_optbyte>
 801d354:	4603      	mov	r3, r0
 801d356:	b29a      	uxth	r2, r3
 801d358:	89bb      	ldrh	r3, [r7, #12]
 801d35a:	4313      	orrs	r3, r2
 801d35c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d35e:	89bb      	ldrh	r3, [r7, #12]
 801d360:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801d364:	d804      	bhi.n	801d370 <tcp_parseopt+0x8c>
 801d366:	89bb      	ldrh	r3, [r7, #12]
 801d368:	2b00      	cmp	r3, #0
 801d36a:	d001      	beq.n	801d370 <tcp_parseopt+0x8c>
 801d36c:	89ba      	ldrh	r2, [r7, #12]
 801d36e:	e001      	b.n	801d374 <tcp_parseopt+0x90>
 801d370:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801d378:	e010      	b.n	801d39c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801d37a:	f7ff ff7d 	bl	801d278 <tcp_get_next_optbyte>
 801d37e:	4603      	mov	r3, r0
 801d380:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801d382:	7afb      	ldrb	r3, [r7, #11]
 801d384:	2b01      	cmp	r3, #1
 801d386:	d914      	bls.n	801d3b2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d388:	7afb      	ldrb	r3, [r7, #11]
 801d38a:	b29a      	uxth	r2, r3
 801d38c:	4b0f      	ldr	r3, [pc, #60]	; (801d3cc <tcp_parseopt+0xe8>)
 801d38e:	881b      	ldrh	r3, [r3, #0]
 801d390:	4413      	add	r3, r2
 801d392:	b29b      	uxth	r3, r3
 801d394:	3b02      	subs	r3, #2
 801d396:	b29a      	uxth	r2, r3
 801d398:	4b0c      	ldr	r3, [pc, #48]	; (801d3cc <tcp_parseopt+0xe8>)
 801d39a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d39c:	4b0b      	ldr	r3, [pc, #44]	; (801d3cc <tcp_parseopt+0xe8>)
 801d39e:	881a      	ldrh	r2, [r3, #0]
 801d3a0:	4b09      	ldr	r3, [pc, #36]	; (801d3c8 <tcp_parseopt+0xe4>)
 801d3a2:	881b      	ldrh	r3, [r3, #0]
 801d3a4:	429a      	cmp	r2, r3
 801d3a6:	d3b3      	bcc.n	801d310 <tcp_parseopt+0x2c>
 801d3a8:	e004      	b.n	801d3b4 <tcp_parseopt+0xd0>
          return;
 801d3aa:	bf00      	nop
 801d3ac:	e002      	b.n	801d3b4 <tcp_parseopt+0xd0>
            return;
 801d3ae:	bf00      	nop
 801d3b0:	e000      	b.n	801d3b4 <tcp_parseopt+0xd0>
            return;
 801d3b2:	bf00      	nop
      }
    }
  }
}
 801d3b4:	3710      	adds	r7, #16
 801d3b6:	46bd      	mov	sp, r7
 801d3b8:	bd80      	pop	{r7, pc}
 801d3ba:	bf00      	nop
 801d3bc:	0802c3f4 	.word	0x0802c3f4
 801d3c0:	0802c858 	.word	0x0802c858
 801d3c4:	0802c440 	.word	0x0802c440
 801d3c8:	20016000 	.word	0x20016000
 801d3cc:	20016008 	.word	0x20016008

0801d3d0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801d3d0:	b480      	push	{r7}
 801d3d2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801d3d4:	4b05      	ldr	r3, [pc, #20]	; (801d3ec <tcp_trigger_input_pcb_close+0x1c>)
 801d3d6:	781b      	ldrb	r3, [r3, #0]
 801d3d8:	f043 0310 	orr.w	r3, r3, #16
 801d3dc:	b2da      	uxtb	r2, r3
 801d3de:	4b03      	ldr	r3, [pc, #12]	; (801d3ec <tcp_trigger_input_pcb_close+0x1c>)
 801d3e0:	701a      	strb	r2, [r3, #0]
}
 801d3e2:	bf00      	nop
 801d3e4:	46bd      	mov	sp, r7
 801d3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d3ea:	4770      	bx	lr
 801d3ec:	20016019 	.word	0x20016019

0801d3f0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801d3f0:	b580      	push	{r7, lr}
 801d3f2:	b084      	sub	sp, #16
 801d3f4:	af00      	add	r7, sp, #0
 801d3f6:	60f8      	str	r0, [r7, #12]
 801d3f8:	60b9      	str	r1, [r7, #8]
 801d3fa:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d3fc:	68fb      	ldr	r3, [r7, #12]
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	d00a      	beq.n	801d418 <tcp_route+0x28>
 801d402:	68fb      	ldr	r3, [r7, #12]
 801d404:	7a1b      	ldrb	r3, [r3, #8]
 801d406:	2b00      	cmp	r3, #0
 801d408:	d006      	beq.n	801d418 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801d40a:	68fb      	ldr	r3, [r7, #12]
 801d40c:	7a1b      	ldrb	r3, [r3, #8]
 801d40e:	4618      	mov	r0, r3
 801d410:	f7fa fd46 	bl	8017ea0 <netif_get_by_index>
 801d414:	4603      	mov	r3, r0
 801d416:	e003      	b.n	801d420 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801d418:	6878      	ldr	r0, [r7, #4]
 801d41a:	f003 fee3 	bl	80211e4 <ip4_route>
 801d41e:	4603      	mov	r3, r0
  }
}
 801d420:	4618      	mov	r0, r3
 801d422:	3710      	adds	r7, #16
 801d424:	46bd      	mov	sp, r7
 801d426:	bd80      	pop	{r7, pc}

0801d428 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801d428:	b590      	push	{r4, r7, lr}
 801d42a:	b087      	sub	sp, #28
 801d42c:	af00      	add	r7, sp, #0
 801d42e:	60f8      	str	r0, [r7, #12]
 801d430:	60b9      	str	r1, [r7, #8]
 801d432:	603b      	str	r3, [r7, #0]
 801d434:	4613      	mov	r3, r2
 801d436:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d105      	bne.n	801d44a <tcp_create_segment+0x22>
 801d43e:	4b44      	ldr	r3, [pc, #272]	; (801d550 <tcp_create_segment+0x128>)
 801d440:	22a3      	movs	r2, #163	; 0xa3
 801d442:	4944      	ldr	r1, [pc, #272]	; (801d554 <tcp_create_segment+0x12c>)
 801d444:	4844      	ldr	r0, [pc, #272]	; (801d558 <tcp_create_segment+0x130>)
 801d446:	f007 fcbb 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d44a:	68bb      	ldr	r3, [r7, #8]
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d105      	bne.n	801d45c <tcp_create_segment+0x34>
 801d450:	4b3f      	ldr	r3, [pc, #252]	; (801d550 <tcp_create_segment+0x128>)
 801d452:	22a4      	movs	r2, #164	; 0xa4
 801d454:	4941      	ldr	r1, [pc, #260]	; (801d55c <tcp_create_segment+0x134>)
 801d456:	4840      	ldr	r0, [pc, #256]	; (801d558 <tcp_create_segment+0x130>)
 801d458:	f007 fcb2 	bl	8024dc0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d45c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d460:	009b      	lsls	r3, r3, #2
 801d462:	b2db      	uxtb	r3, r3
 801d464:	f003 0304 	and.w	r3, r3, #4
 801d468:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d46a:	2003      	movs	r0, #3
 801d46c:	f7fa f98c 	bl	8017788 <memp_malloc>
 801d470:	6138      	str	r0, [r7, #16]
 801d472:	693b      	ldr	r3, [r7, #16]
 801d474:	2b00      	cmp	r3, #0
 801d476:	d104      	bne.n	801d482 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801d478:	68b8      	ldr	r0, [r7, #8]
 801d47a:	f7fb f89f 	bl	80185bc <pbuf_free>
    return NULL;
 801d47e:	2300      	movs	r3, #0
 801d480:	e061      	b.n	801d546 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801d482:	693b      	ldr	r3, [r7, #16]
 801d484:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d488:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801d48a:	693b      	ldr	r3, [r7, #16]
 801d48c:	2200      	movs	r2, #0
 801d48e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801d490:	693b      	ldr	r3, [r7, #16]
 801d492:	68ba      	ldr	r2, [r7, #8]
 801d494:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d496:	68bb      	ldr	r3, [r7, #8]
 801d498:	891a      	ldrh	r2, [r3, #8]
 801d49a:	7dfb      	ldrb	r3, [r7, #23]
 801d49c:	b29b      	uxth	r3, r3
 801d49e:	429a      	cmp	r2, r3
 801d4a0:	d205      	bcs.n	801d4ae <tcp_create_segment+0x86>
 801d4a2:	4b2b      	ldr	r3, [pc, #172]	; (801d550 <tcp_create_segment+0x128>)
 801d4a4:	22b0      	movs	r2, #176	; 0xb0
 801d4a6:	492e      	ldr	r1, [pc, #184]	; (801d560 <tcp_create_segment+0x138>)
 801d4a8:	482b      	ldr	r0, [pc, #172]	; (801d558 <tcp_create_segment+0x130>)
 801d4aa:	f007 fc89 	bl	8024dc0 <iprintf>
  seg->len = p->tot_len - optlen;
 801d4ae:	68bb      	ldr	r3, [r7, #8]
 801d4b0:	891a      	ldrh	r2, [r3, #8]
 801d4b2:	7dfb      	ldrb	r3, [r7, #23]
 801d4b4:	b29b      	uxth	r3, r3
 801d4b6:	1ad3      	subs	r3, r2, r3
 801d4b8:	b29a      	uxth	r2, r3
 801d4ba:	693b      	ldr	r3, [r7, #16]
 801d4bc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d4be:	2114      	movs	r1, #20
 801d4c0:	68b8      	ldr	r0, [r7, #8]
 801d4c2:	f7fa ffe5 	bl	8018490 <pbuf_add_header>
 801d4c6:	4603      	mov	r3, r0
 801d4c8:	2b00      	cmp	r3, #0
 801d4ca:	d004      	beq.n	801d4d6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801d4cc:	6938      	ldr	r0, [r7, #16]
 801d4ce:	f7fc ffe8 	bl	801a4a2 <tcp_seg_free>
    return NULL;
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	e037      	b.n	801d546 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d4d6:	693b      	ldr	r3, [r7, #16]
 801d4d8:	685b      	ldr	r3, [r3, #4]
 801d4da:	685a      	ldr	r2, [r3, #4]
 801d4dc:	693b      	ldr	r3, [r7, #16]
 801d4de:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d4e0:	68fb      	ldr	r3, [r7, #12]
 801d4e2:	8ada      	ldrh	r2, [r3, #22]
 801d4e4:	693b      	ldr	r3, [r7, #16]
 801d4e6:	68dc      	ldr	r4, [r3, #12]
 801d4e8:	4610      	mov	r0, r2
 801d4ea:	f7f9 f9ab 	bl	8016844 <lwip_htons>
 801d4ee:	4603      	mov	r3, r0
 801d4f0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801d4f2:	68fb      	ldr	r3, [r7, #12]
 801d4f4:	8b1a      	ldrh	r2, [r3, #24]
 801d4f6:	693b      	ldr	r3, [r7, #16]
 801d4f8:	68dc      	ldr	r4, [r3, #12]
 801d4fa:	4610      	mov	r0, r2
 801d4fc:	f7f9 f9a2 	bl	8016844 <lwip_htons>
 801d500:	4603      	mov	r3, r0
 801d502:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801d504:	693b      	ldr	r3, [r7, #16]
 801d506:	68dc      	ldr	r4, [r3, #12]
 801d508:	6838      	ldr	r0, [r7, #0]
 801d50a:	f7f9 f9b0 	bl	801686e <lwip_htonl>
 801d50e:	4603      	mov	r3, r0
 801d510:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d512:	7dfb      	ldrb	r3, [r7, #23]
 801d514:	089b      	lsrs	r3, r3, #2
 801d516:	b2db      	uxtb	r3, r3
 801d518:	b29b      	uxth	r3, r3
 801d51a:	3305      	adds	r3, #5
 801d51c:	b29b      	uxth	r3, r3
 801d51e:	031b      	lsls	r3, r3, #12
 801d520:	b29a      	uxth	r2, r3
 801d522:	79fb      	ldrb	r3, [r7, #7]
 801d524:	b29b      	uxth	r3, r3
 801d526:	4313      	orrs	r3, r2
 801d528:	b29a      	uxth	r2, r3
 801d52a:	693b      	ldr	r3, [r7, #16]
 801d52c:	68dc      	ldr	r4, [r3, #12]
 801d52e:	4610      	mov	r0, r2
 801d530:	f7f9 f988 	bl	8016844 <lwip_htons>
 801d534:	4603      	mov	r3, r0
 801d536:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801d538:	693b      	ldr	r3, [r7, #16]
 801d53a:	68db      	ldr	r3, [r3, #12]
 801d53c:	2200      	movs	r2, #0
 801d53e:	749a      	strb	r2, [r3, #18]
 801d540:	2200      	movs	r2, #0
 801d542:	74da      	strb	r2, [r3, #19]
  return seg;
 801d544:	693b      	ldr	r3, [r7, #16]
}
 801d546:	4618      	mov	r0, r3
 801d548:	371c      	adds	r7, #28
 801d54a:	46bd      	mov	sp, r7
 801d54c:	bd90      	pop	{r4, r7, pc}
 801d54e:	bf00      	nop
 801d550:	0802c874 	.word	0x0802c874
 801d554:	0802c8a8 	.word	0x0802c8a8
 801d558:	0802c8c8 	.word	0x0802c8c8
 801d55c:	0802c8f0 	.word	0x0802c8f0
 801d560:	0802c914 	.word	0x0802c914

0801d564 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801d564:	b580      	push	{r7, lr}
 801d566:	b086      	sub	sp, #24
 801d568:	af00      	add	r7, sp, #0
 801d56a:	607b      	str	r3, [r7, #4]
 801d56c:	4603      	mov	r3, r0
 801d56e:	73fb      	strb	r3, [r7, #15]
 801d570:	460b      	mov	r3, r1
 801d572:	81bb      	strh	r3, [r7, #12]
 801d574:	4613      	mov	r3, r2
 801d576:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801d578:	89bb      	ldrh	r3, [r7, #12]
 801d57a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d105      	bne.n	801d58e <tcp_pbuf_prealloc+0x2a>
 801d582:	4b30      	ldr	r3, [pc, #192]	; (801d644 <tcp_pbuf_prealloc+0xe0>)
 801d584:	22e8      	movs	r2, #232	; 0xe8
 801d586:	4930      	ldr	r1, [pc, #192]	; (801d648 <tcp_pbuf_prealloc+0xe4>)
 801d588:	4830      	ldr	r0, [pc, #192]	; (801d64c <tcp_pbuf_prealloc+0xe8>)
 801d58a:	f007 fc19 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801d58e:	6a3b      	ldr	r3, [r7, #32]
 801d590:	2b00      	cmp	r3, #0
 801d592:	d105      	bne.n	801d5a0 <tcp_pbuf_prealloc+0x3c>
 801d594:	4b2b      	ldr	r3, [pc, #172]	; (801d644 <tcp_pbuf_prealloc+0xe0>)
 801d596:	22e9      	movs	r2, #233	; 0xe9
 801d598:	492d      	ldr	r1, [pc, #180]	; (801d650 <tcp_pbuf_prealloc+0xec>)
 801d59a:	482c      	ldr	r0, [pc, #176]	; (801d64c <tcp_pbuf_prealloc+0xe8>)
 801d59c:	f007 fc10 	bl	8024dc0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801d5a0:	89ba      	ldrh	r2, [r7, #12]
 801d5a2:	897b      	ldrh	r3, [r7, #10]
 801d5a4:	429a      	cmp	r2, r3
 801d5a6:	d221      	bcs.n	801d5ec <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d5a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801d5ac:	f003 0302 	and.w	r3, r3, #2
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d111      	bne.n	801d5d8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801d5b4:	6a3b      	ldr	r3, [r7, #32]
 801d5b6:	8b5b      	ldrh	r3, [r3, #26]
 801d5b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801d5bc:	2b00      	cmp	r3, #0
 801d5be:	d115      	bne.n	801d5ec <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801d5c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d007      	beq.n	801d5d8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801d5c8:	6a3b      	ldr	r3, [r7, #32]
 801d5ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d103      	bne.n	801d5d8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801d5d0:	6a3b      	ldr	r3, [r7, #32]
 801d5d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801d5d4:	2b00      	cmp	r3, #0
 801d5d6:	d009      	beq.n	801d5ec <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801d5d8:	89bb      	ldrh	r3, [r7, #12]
 801d5da:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801d5de:	f023 0203 	bic.w	r2, r3, #3
 801d5e2:	897b      	ldrh	r3, [r7, #10]
 801d5e4:	4293      	cmp	r3, r2
 801d5e6:	bf28      	it	cs
 801d5e8:	4613      	movcs	r3, r2
 801d5ea:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801d5ec:	8af9      	ldrh	r1, [r7, #22]
 801d5ee:	7bfb      	ldrb	r3, [r7, #15]
 801d5f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	f7fa fcfd 	bl	8017ff4 <pbuf_alloc>
 801d5fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801d5fc:	693b      	ldr	r3, [r7, #16]
 801d5fe:	2b00      	cmp	r3, #0
 801d600:	d101      	bne.n	801d606 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801d602:	2300      	movs	r3, #0
 801d604:	e019      	b.n	801d63a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801d606:	693b      	ldr	r3, [r7, #16]
 801d608:	681b      	ldr	r3, [r3, #0]
 801d60a:	2b00      	cmp	r3, #0
 801d60c:	d006      	beq.n	801d61c <tcp_pbuf_prealloc+0xb8>
 801d60e:	4b0d      	ldr	r3, [pc, #52]	; (801d644 <tcp_pbuf_prealloc+0xe0>)
 801d610:	f240 120b 	movw	r2, #267	; 0x10b
 801d614:	490f      	ldr	r1, [pc, #60]	; (801d654 <tcp_pbuf_prealloc+0xf0>)
 801d616:	480d      	ldr	r0, [pc, #52]	; (801d64c <tcp_pbuf_prealloc+0xe8>)
 801d618:	f007 fbd2 	bl	8024dc0 <iprintf>
  *oversize = p->len - length;
 801d61c:	693b      	ldr	r3, [r7, #16]
 801d61e:	895a      	ldrh	r2, [r3, #10]
 801d620:	89bb      	ldrh	r3, [r7, #12]
 801d622:	1ad3      	subs	r3, r2, r3
 801d624:	b29a      	uxth	r2, r3
 801d626:	687b      	ldr	r3, [r7, #4]
 801d628:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801d62a:	693b      	ldr	r3, [r7, #16]
 801d62c:	89ba      	ldrh	r2, [r7, #12]
 801d62e:	811a      	strh	r2, [r3, #8]
 801d630:	693b      	ldr	r3, [r7, #16]
 801d632:	891a      	ldrh	r2, [r3, #8]
 801d634:	693b      	ldr	r3, [r7, #16]
 801d636:	815a      	strh	r2, [r3, #10]
  return p;
 801d638:	693b      	ldr	r3, [r7, #16]
}
 801d63a:	4618      	mov	r0, r3
 801d63c:	3718      	adds	r7, #24
 801d63e:	46bd      	mov	sp, r7
 801d640:	bd80      	pop	{r7, pc}
 801d642:	bf00      	nop
 801d644:	0802c874 	.word	0x0802c874
 801d648:	0802c92c 	.word	0x0802c92c
 801d64c:	0802c8c8 	.word	0x0802c8c8
 801d650:	0802c950 	.word	0x0802c950
 801d654:	0802c970 	.word	0x0802c970

0801d658 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801d658:	b580      	push	{r7, lr}
 801d65a:	b082      	sub	sp, #8
 801d65c:	af00      	add	r7, sp, #0
 801d65e:	6078      	str	r0, [r7, #4]
 801d660:	460b      	mov	r3, r1
 801d662:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	2b00      	cmp	r3, #0
 801d668:	d106      	bne.n	801d678 <tcp_write_checks+0x20>
 801d66a:	4b33      	ldr	r3, [pc, #204]	; (801d738 <tcp_write_checks+0xe0>)
 801d66c:	f240 1233 	movw	r2, #307	; 0x133
 801d670:	4932      	ldr	r1, [pc, #200]	; (801d73c <tcp_write_checks+0xe4>)
 801d672:	4833      	ldr	r0, [pc, #204]	; (801d740 <tcp_write_checks+0xe8>)
 801d674:	f007 fba4 	bl	8024dc0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801d678:	687b      	ldr	r3, [r7, #4]
 801d67a:	7d1b      	ldrb	r3, [r3, #20]
 801d67c:	2b04      	cmp	r3, #4
 801d67e:	d00e      	beq.n	801d69e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801d680:	687b      	ldr	r3, [r7, #4]
 801d682:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801d684:	2b07      	cmp	r3, #7
 801d686:	d00a      	beq.n	801d69e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801d688:	687b      	ldr	r3, [r7, #4]
 801d68a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801d68c:	2b02      	cmp	r3, #2
 801d68e:	d006      	beq.n	801d69e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801d690:	687b      	ldr	r3, [r7, #4]
 801d692:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801d694:	2b03      	cmp	r3, #3
 801d696:	d002      	beq.n	801d69e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801d698:	f06f 030a 	mvn.w	r3, #10
 801d69c:	e048      	b.n	801d730 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801d69e:	887b      	ldrh	r3, [r7, #2]
 801d6a0:	2b00      	cmp	r3, #0
 801d6a2:	d101      	bne.n	801d6a8 <tcp_write_checks+0x50>
    return ERR_OK;
 801d6a4:	2300      	movs	r3, #0
 801d6a6:	e043      	b.n	801d730 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801d6a8:	687b      	ldr	r3, [r7, #4]
 801d6aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801d6ae:	887a      	ldrh	r2, [r7, #2]
 801d6b0:	429a      	cmp	r2, r3
 801d6b2:	d909      	bls.n	801d6c8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d6b4:	687b      	ldr	r3, [r7, #4]
 801d6b6:	8b5b      	ldrh	r3, [r3, #26]
 801d6b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d6bc:	b29a      	uxth	r2, r3
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d6c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d6c6:	e033      	b.n	801d730 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801d6c8:	687b      	ldr	r3, [r7, #4]
 801d6ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d6ce:	2b08      	cmp	r3, #8
 801d6d0:	d909      	bls.n	801d6e6 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d6d2:	687b      	ldr	r3, [r7, #4]
 801d6d4:	8b5b      	ldrh	r3, [r3, #26]
 801d6d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d6da:	b29a      	uxth	r2, r3
 801d6dc:	687b      	ldr	r3, [r7, #4]
 801d6de:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801d6e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d6e4:	e024      	b.n	801d730 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801d6e6:	687b      	ldr	r3, [r7, #4]
 801d6e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d6ec:	2b00      	cmp	r3, #0
 801d6ee:	d00f      	beq.n	801d710 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801d6f0:	687b      	ldr	r3, [r7, #4]
 801d6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d6f4:	2b00      	cmp	r3, #0
 801d6f6:	d11a      	bne.n	801d72e <tcp_write_checks+0xd6>
 801d6f8:	687b      	ldr	r3, [r7, #4]
 801d6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d6fc:	2b00      	cmp	r3, #0
 801d6fe:	d116      	bne.n	801d72e <tcp_write_checks+0xd6>
 801d700:	4b0d      	ldr	r3, [pc, #52]	; (801d738 <tcp_write_checks+0xe0>)
 801d702:	f240 1255 	movw	r2, #341	; 0x155
 801d706:	490f      	ldr	r1, [pc, #60]	; (801d744 <tcp_write_checks+0xec>)
 801d708:	480d      	ldr	r0, [pc, #52]	; (801d740 <tcp_write_checks+0xe8>)
 801d70a:	f007 fb59 	bl	8024dc0 <iprintf>
 801d70e:	e00e      	b.n	801d72e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801d710:	687b      	ldr	r3, [r7, #4]
 801d712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d714:	2b00      	cmp	r3, #0
 801d716:	d103      	bne.n	801d720 <tcp_write_checks+0xc8>
 801d718:	687b      	ldr	r3, [r7, #4]
 801d71a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d71c:	2b00      	cmp	r3, #0
 801d71e:	d006      	beq.n	801d72e <tcp_write_checks+0xd6>
 801d720:	4b05      	ldr	r3, [pc, #20]	; (801d738 <tcp_write_checks+0xe0>)
 801d722:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801d726:	4908      	ldr	r1, [pc, #32]	; (801d748 <tcp_write_checks+0xf0>)
 801d728:	4805      	ldr	r0, [pc, #20]	; (801d740 <tcp_write_checks+0xe8>)
 801d72a:	f007 fb49 	bl	8024dc0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801d72e:	2300      	movs	r3, #0
}
 801d730:	4618      	mov	r0, r3
 801d732:	3708      	adds	r7, #8
 801d734:	46bd      	mov	sp, r7
 801d736:	bd80      	pop	{r7, pc}
 801d738:	0802c874 	.word	0x0802c874
 801d73c:	0802c984 	.word	0x0802c984
 801d740:	0802c8c8 	.word	0x0802c8c8
 801d744:	0802c9a4 	.word	0x0802c9a4
 801d748:	0802c9e0 	.word	0x0802c9e0

0801d74c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801d74c:	b590      	push	{r4, r7, lr}
 801d74e:	b09b      	sub	sp, #108	; 0x6c
 801d750:	af04      	add	r7, sp, #16
 801d752:	60f8      	str	r0, [r7, #12]
 801d754:	60b9      	str	r1, [r7, #8]
 801d756:	4611      	mov	r1, r2
 801d758:	461a      	mov	r2, r3
 801d75a:	460b      	mov	r3, r1
 801d75c:	80fb      	strh	r3, [r7, #6]
 801d75e:	4613      	mov	r3, r2
 801d760:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801d762:	2300      	movs	r3, #0
 801d764:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801d766:	2300      	movs	r3, #0
 801d768:	653b      	str	r3, [r7, #80]	; 0x50
 801d76a:	2300      	movs	r3, #0
 801d76c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801d76e:	2300      	movs	r3, #0
 801d770:	64bb      	str	r3, [r7, #72]	; 0x48
 801d772:	2300      	movs	r3, #0
 801d774:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801d776:	2300      	movs	r3, #0
 801d778:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801d77c:	2300      	movs	r3, #0
 801d77e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801d782:	2300      	movs	r3, #0
 801d784:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801d786:	2300      	movs	r3, #0
 801d788:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801d78a:	2300      	movs	r3, #0
 801d78c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801d78e:	68fb      	ldr	r3, [r7, #12]
 801d790:	2b00      	cmp	r3, #0
 801d792:	d109      	bne.n	801d7a8 <tcp_write+0x5c>
 801d794:	4ba4      	ldr	r3, [pc, #656]	; (801da28 <tcp_write+0x2dc>)
 801d796:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801d79a:	49a4      	ldr	r1, [pc, #656]	; (801da2c <tcp_write+0x2e0>)
 801d79c:	48a4      	ldr	r0, [pc, #656]	; (801da30 <tcp_write+0x2e4>)
 801d79e:	f007 fb0f 	bl	8024dc0 <iprintf>
 801d7a2:	f06f 030f 	mvn.w	r3, #15
 801d7a6:	e32a      	b.n	801ddfe <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801d7a8:	68fb      	ldr	r3, [r7, #12]
 801d7aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801d7ae:	085b      	lsrs	r3, r3, #1
 801d7b0:	b29a      	uxth	r2, r3
 801d7b2:	68fb      	ldr	r3, [r7, #12]
 801d7b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d7b6:	4293      	cmp	r3, r2
 801d7b8:	bf28      	it	cs
 801d7ba:	4613      	movcs	r3, r2
 801d7bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801d7be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	d102      	bne.n	801d7ca <tcp_write+0x7e>
 801d7c4:	68fb      	ldr	r3, [r7, #12]
 801d7c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801d7c8:	e000      	b.n	801d7cc <tcp_write+0x80>
 801d7ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d7cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801d7ce:	68bb      	ldr	r3, [r7, #8]
 801d7d0:	2b00      	cmp	r3, #0
 801d7d2:	d109      	bne.n	801d7e8 <tcp_write+0x9c>
 801d7d4:	4b94      	ldr	r3, [pc, #592]	; (801da28 <tcp_write+0x2dc>)
 801d7d6:	f240 12ad 	movw	r2, #429	; 0x1ad
 801d7da:	4996      	ldr	r1, [pc, #600]	; (801da34 <tcp_write+0x2e8>)
 801d7dc:	4894      	ldr	r0, [pc, #592]	; (801da30 <tcp_write+0x2e4>)
 801d7de:	f007 faef 	bl	8024dc0 <iprintf>
 801d7e2:	f06f 030f 	mvn.w	r3, #15
 801d7e6:	e30a      	b.n	801ddfe <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801d7e8:	88fb      	ldrh	r3, [r7, #6]
 801d7ea:	4619      	mov	r1, r3
 801d7ec:	68f8      	ldr	r0, [r7, #12]
 801d7ee:	f7ff ff33 	bl	801d658 <tcp_write_checks>
 801d7f2:	4603      	mov	r3, r0
 801d7f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801d7f8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d7fc:	2b00      	cmp	r3, #0
 801d7fe:	d002      	beq.n	801d806 <tcp_write+0xba>
    return err;
 801d800:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801d804:	e2fb      	b.n	801ddfe <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801d806:	68fb      	ldr	r3, [r7, #12]
 801d808:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801d80c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801d810:	2300      	movs	r3, #0
 801d812:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801d816:	68fb      	ldr	r3, [r7, #12]
 801d818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	f000 80f6 	beq.w	801da0c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d820:	68fb      	ldr	r3, [r7, #12]
 801d822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d824:	653b      	str	r3, [r7, #80]	; 0x50
 801d826:	e002      	b.n	801d82e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801d828:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d82a:	681b      	ldr	r3, [r3, #0]
 801d82c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d82e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d830:	681b      	ldr	r3, [r3, #0]
 801d832:	2b00      	cmp	r3, #0
 801d834:	d1f8      	bne.n	801d828 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801d836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d838:	7a9b      	ldrb	r3, [r3, #10]
 801d83a:	009b      	lsls	r3, r3, #2
 801d83c:	b29b      	uxth	r3, r3
 801d83e:	f003 0304 	and.w	r3, r3, #4
 801d842:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801d844:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d848:	891b      	ldrh	r3, [r3, #8]
 801d84a:	4619      	mov	r1, r3
 801d84c:	8c3b      	ldrh	r3, [r7, #32]
 801d84e:	440b      	add	r3, r1
 801d850:	429a      	cmp	r2, r3
 801d852:	da06      	bge.n	801d862 <tcp_write+0x116>
 801d854:	4b74      	ldr	r3, [pc, #464]	; (801da28 <tcp_write+0x2dc>)
 801d856:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801d85a:	4977      	ldr	r1, [pc, #476]	; (801da38 <tcp_write+0x2ec>)
 801d85c:	4874      	ldr	r0, [pc, #464]	; (801da30 <tcp_write+0x2e4>)
 801d85e:	f007 faaf 	bl	8024dc0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801d862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d864:	891a      	ldrh	r2, [r3, #8]
 801d866:	8c3b      	ldrh	r3, [r7, #32]
 801d868:	4413      	add	r3, r2
 801d86a:	b29b      	uxth	r3, r3
 801d86c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d86e:	1ad3      	subs	r3, r2, r3
 801d870:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801d872:	68fb      	ldr	r3, [r7, #12]
 801d874:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801d878:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801d87a:	8a7b      	ldrh	r3, [r7, #18]
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d026      	beq.n	801d8ce <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801d880:	8a7b      	ldrh	r3, [r7, #18]
 801d882:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d884:	429a      	cmp	r2, r3
 801d886:	d206      	bcs.n	801d896 <tcp_write+0x14a>
 801d888:	4b67      	ldr	r3, [pc, #412]	; (801da28 <tcp_write+0x2dc>)
 801d88a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801d88e:	496b      	ldr	r1, [pc, #428]	; (801da3c <tcp_write+0x2f0>)
 801d890:	4867      	ldr	r0, [pc, #412]	; (801da30 <tcp_write+0x2e4>)
 801d892:	f007 fa95 	bl	8024dc0 <iprintf>
      seg = last_unsent;
 801d896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d898:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801d89a:	8a7b      	ldrh	r3, [r7, #18]
 801d89c:	88fa      	ldrh	r2, [r7, #6]
 801d89e:	4293      	cmp	r3, r2
 801d8a0:	bf28      	it	cs
 801d8a2:	4613      	movcs	r3, r2
 801d8a4:	b29b      	uxth	r3, r3
 801d8a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d8a8:	4293      	cmp	r3, r2
 801d8aa:	bf28      	it	cs
 801d8ac:	4613      	movcs	r3, r2
 801d8ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801d8b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d8b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d8b6:	4413      	add	r3, r2
 801d8b8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801d8bc:	8a7a      	ldrh	r2, [r7, #18]
 801d8be:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d8c0:	1ad3      	subs	r3, r2, r3
 801d8c2:	b29b      	uxth	r3, r3
 801d8c4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801d8c6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d8c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d8ca:	1ad3      	subs	r3, r2, r3
 801d8cc:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801d8ce:	8a7b      	ldrh	r3, [r7, #18]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d00b      	beq.n	801d8ec <tcp_write+0x1a0>
 801d8d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d8d8:	88fb      	ldrh	r3, [r7, #6]
 801d8da:	429a      	cmp	r2, r3
 801d8dc:	d006      	beq.n	801d8ec <tcp_write+0x1a0>
 801d8de:	4b52      	ldr	r3, [pc, #328]	; (801da28 <tcp_write+0x2dc>)
 801d8e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801d8e4:	4956      	ldr	r1, [pc, #344]	; (801da40 <tcp_write+0x2f4>)
 801d8e6:	4852      	ldr	r0, [pc, #328]	; (801da30 <tcp_write+0x2e4>)
 801d8e8:	f007 fa6a 	bl	8024dc0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801d8ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d8f0:	88fb      	ldrh	r3, [r7, #6]
 801d8f2:	429a      	cmp	r2, r3
 801d8f4:	f080 8167 	bcs.w	801dbc6 <tcp_write+0x47a>
 801d8f8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d8fa:	2b00      	cmp	r3, #0
 801d8fc:	f000 8163 	beq.w	801dbc6 <tcp_write+0x47a>
 801d900:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d902:	891b      	ldrh	r3, [r3, #8]
 801d904:	2b00      	cmp	r3, #0
 801d906:	f000 815e 	beq.w	801dbc6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801d90a:	88fa      	ldrh	r2, [r7, #6]
 801d90c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d910:	1ad2      	subs	r2, r2, r3
 801d912:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d914:	4293      	cmp	r3, r2
 801d916:	bfa8      	it	ge
 801d918:	4613      	movge	r3, r2
 801d91a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801d91c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d91e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801d920:	797b      	ldrb	r3, [r7, #5]
 801d922:	f003 0301 	and.w	r3, r3, #1
 801d926:	2b00      	cmp	r3, #0
 801d928:	d027      	beq.n	801d97a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801d92a:	f107 0012 	add.w	r0, r7, #18
 801d92e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801d930:	8bf9      	ldrh	r1, [r7, #30]
 801d932:	2301      	movs	r3, #1
 801d934:	9302      	str	r3, [sp, #8]
 801d936:	797b      	ldrb	r3, [r7, #5]
 801d938:	9301      	str	r3, [sp, #4]
 801d93a:	68fb      	ldr	r3, [r7, #12]
 801d93c:	9300      	str	r3, [sp, #0]
 801d93e:	4603      	mov	r3, r0
 801d940:	2000      	movs	r0, #0
 801d942:	f7ff fe0f 	bl	801d564 <tcp_pbuf_prealloc>
 801d946:	6578      	str	r0, [r7, #84]	; 0x54
 801d948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	f000 8225 	beq.w	801dd9a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801d950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d952:	6858      	ldr	r0, [r3, #4]
 801d954:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d958:	68ba      	ldr	r2, [r7, #8]
 801d95a:	4413      	add	r3, r2
 801d95c:	8bfa      	ldrh	r2, [r7, #30]
 801d95e:	4619      	mov	r1, r3
 801d960:	f008 feed 	bl	802673e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801d964:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d966:	f7fa feb7 	bl	80186d8 <pbuf_clen>
 801d96a:	4603      	mov	r3, r0
 801d96c:	461a      	mov	r2, r3
 801d96e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d972:	4413      	add	r3, r2
 801d974:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801d978:	e041      	b.n	801d9fe <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801d97a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801d97c:	685b      	ldr	r3, [r3, #4]
 801d97e:	637b      	str	r3, [r7, #52]	; 0x34
 801d980:	e002      	b.n	801d988 <tcp_write+0x23c>
 801d982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d984:	681b      	ldr	r3, [r3, #0]
 801d986:	637b      	str	r3, [r7, #52]	; 0x34
 801d988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d98a:	681b      	ldr	r3, [r3, #0]
 801d98c:	2b00      	cmp	r3, #0
 801d98e:	d1f8      	bne.n	801d982 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d992:	7b1b      	ldrb	r3, [r3, #12]
 801d994:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d115      	bne.n	801d9c8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801d99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d99e:	685b      	ldr	r3, [r3, #4]
 801d9a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d9a2:	8952      	ldrh	r2, [r2, #10]
 801d9a4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801d9a6:	68ba      	ldr	r2, [r7, #8]
 801d9a8:	429a      	cmp	r2, r3
 801d9aa:	d10d      	bne.n	801d9c8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801d9ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d006      	beq.n	801d9c2 <tcp_write+0x276>
 801d9b4:	4b1c      	ldr	r3, [pc, #112]	; (801da28 <tcp_write+0x2dc>)
 801d9b6:	f240 2231 	movw	r2, #561	; 0x231
 801d9ba:	4922      	ldr	r1, [pc, #136]	; (801da44 <tcp_write+0x2f8>)
 801d9bc:	481c      	ldr	r0, [pc, #112]	; (801da30 <tcp_write+0x2e4>)
 801d9be:	f007 f9ff 	bl	8024dc0 <iprintf>
          extendlen = seglen;
 801d9c2:	8bfb      	ldrh	r3, [r7, #30]
 801d9c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801d9c6:	e01a      	b.n	801d9fe <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801d9c8:	8bfb      	ldrh	r3, [r7, #30]
 801d9ca:	2201      	movs	r2, #1
 801d9cc:	4619      	mov	r1, r3
 801d9ce:	2000      	movs	r0, #0
 801d9d0:	f7fa fb10 	bl	8017ff4 <pbuf_alloc>
 801d9d4:	6578      	str	r0, [r7, #84]	; 0x54
 801d9d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	f000 81e0 	beq.w	801dd9e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801d9de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801d9e2:	68ba      	ldr	r2, [r7, #8]
 801d9e4:	441a      	add	r2, r3
 801d9e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801d9e8:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801d9ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801d9ec:	f7fa fe74 	bl	80186d8 <pbuf_clen>
 801d9f0:	4603      	mov	r3, r0
 801d9f2:	461a      	mov	r2, r3
 801d9f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801d9f8:	4413      	add	r3, r2
 801d9fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801d9fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801da02:	8bfb      	ldrh	r3, [r7, #30]
 801da04:	4413      	add	r3, r2
 801da06:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801da0a:	e0dc      	b.n	801dbc6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801da0c:	68fb      	ldr	r3, [r7, #12]
 801da0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801da12:	2b00      	cmp	r3, #0
 801da14:	f000 80d7 	beq.w	801dbc6 <tcp_write+0x47a>
 801da18:	4b03      	ldr	r3, [pc, #12]	; (801da28 <tcp_write+0x2dc>)
 801da1a:	f240 224a 	movw	r2, #586	; 0x24a
 801da1e:	490a      	ldr	r1, [pc, #40]	; (801da48 <tcp_write+0x2fc>)
 801da20:	4803      	ldr	r0, [pc, #12]	; (801da30 <tcp_write+0x2e4>)
 801da22:	f007 f9cd 	bl	8024dc0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801da26:	e0ce      	b.n	801dbc6 <tcp_write+0x47a>
 801da28:	0802c874 	.word	0x0802c874
 801da2c:	0802ca14 	.word	0x0802ca14
 801da30:	0802c8c8 	.word	0x0802c8c8
 801da34:	0802ca2c 	.word	0x0802ca2c
 801da38:	0802ca60 	.word	0x0802ca60
 801da3c:	0802ca78 	.word	0x0802ca78
 801da40:	0802ca98 	.word	0x0802ca98
 801da44:	0802cab8 	.word	0x0802cab8
 801da48:	0802cae4 	.word	0x0802cae4
    struct pbuf *p;
    u16_t left = len - pos;
 801da4c:	88fa      	ldrh	r2, [r7, #6]
 801da4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801da52:	1ad3      	subs	r3, r2, r3
 801da54:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801da56:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801da5a:	b29b      	uxth	r3, r3
 801da5c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801da5e:	1ad3      	subs	r3, r2, r3
 801da60:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801da62:	8b7a      	ldrh	r2, [r7, #26]
 801da64:	8bbb      	ldrh	r3, [r7, #28]
 801da66:	4293      	cmp	r3, r2
 801da68:	bf28      	it	cs
 801da6a:	4613      	movcs	r3, r2
 801da6c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801da6e:	797b      	ldrb	r3, [r7, #5]
 801da70:	f003 0301 	and.w	r3, r3, #1
 801da74:	2b00      	cmp	r3, #0
 801da76:	d036      	beq.n	801dae6 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801da78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801da7c:	b29a      	uxth	r2, r3
 801da7e:	8b3b      	ldrh	r3, [r7, #24]
 801da80:	4413      	add	r3, r2
 801da82:	b299      	uxth	r1, r3
 801da84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801da86:	2b00      	cmp	r3, #0
 801da88:	bf0c      	ite	eq
 801da8a:	2301      	moveq	r3, #1
 801da8c:	2300      	movne	r3, #0
 801da8e:	b2db      	uxtb	r3, r3
 801da90:	f107 0012 	add.w	r0, r7, #18
 801da94:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801da96:	9302      	str	r3, [sp, #8]
 801da98:	797b      	ldrb	r3, [r7, #5]
 801da9a:	9301      	str	r3, [sp, #4]
 801da9c:	68fb      	ldr	r3, [r7, #12]
 801da9e:	9300      	str	r3, [sp, #0]
 801daa0:	4603      	mov	r3, r0
 801daa2:	2036      	movs	r0, #54	; 0x36
 801daa4:	f7ff fd5e 	bl	801d564 <tcp_pbuf_prealloc>
 801daa8:	6338      	str	r0, [r7, #48]	; 0x30
 801daaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801daac:	2b00      	cmp	r3, #0
 801daae:	f000 8178 	beq.w	801dda2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dab4:	895b      	ldrh	r3, [r3, #10]
 801dab6:	8b3a      	ldrh	r2, [r7, #24]
 801dab8:	429a      	cmp	r2, r3
 801daba:	d906      	bls.n	801daca <tcp_write+0x37e>
 801dabc:	4b8c      	ldr	r3, [pc, #560]	; (801dcf0 <tcp_write+0x5a4>)
 801dabe:	f240 2266 	movw	r2, #614	; 0x266
 801dac2:	498c      	ldr	r1, [pc, #560]	; (801dcf4 <tcp_write+0x5a8>)
 801dac4:	488c      	ldr	r0, [pc, #560]	; (801dcf8 <tcp_write+0x5ac>)
 801dac6:	f007 f97b 	bl	8024dc0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801daca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dacc:	685a      	ldr	r2, [r3, #4]
 801dace:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dad2:	18d0      	adds	r0, r2, r3
 801dad4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dad8:	68ba      	ldr	r2, [r7, #8]
 801dada:	4413      	add	r3, r2
 801dadc:	8b3a      	ldrh	r2, [r7, #24]
 801dade:	4619      	mov	r1, r3
 801dae0:	f008 fe2d 	bl	802673e <memcpy>
 801dae4:	e02f      	b.n	801db46 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801dae6:	8a7b      	ldrh	r3, [r7, #18]
 801dae8:	2b00      	cmp	r3, #0
 801daea:	d006      	beq.n	801dafa <tcp_write+0x3ae>
 801daec:	4b80      	ldr	r3, [pc, #512]	; (801dcf0 <tcp_write+0x5a4>)
 801daee:	f240 2271 	movw	r2, #625	; 0x271
 801daf2:	4982      	ldr	r1, [pc, #520]	; (801dcfc <tcp_write+0x5b0>)
 801daf4:	4880      	ldr	r0, [pc, #512]	; (801dcf8 <tcp_write+0x5ac>)
 801daf6:	f007 f963 	bl	8024dc0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801dafa:	8b3b      	ldrh	r3, [r7, #24]
 801dafc:	2201      	movs	r2, #1
 801dafe:	4619      	mov	r1, r3
 801db00:	2036      	movs	r0, #54	; 0x36
 801db02:	f7fa fa77 	bl	8017ff4 <pbuf_alloc>
 801db06:	6178      	str	r0, [r7, #20]
 801db08:	697b      	ldr	r3, [r7, #20]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	f000 814b 	beq.w	801dda6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801db10:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801db14:	68ba      	ldr	r2, [r7, #8]
 801db16:	441a      	add	r2, r3
 801db18:	697b      	ldr	r3, [r7, #20]
 801db1a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801db1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801db20:	b29b      	uxth	r3, r3
 801db22:	f44f 7220 	mov.w	r2, #640	; 0x280
 801db26:	4619      	mov	r1, r3
 801db28:	2036      	movs	r0, #54	; 0x36
 801db2a:	f7fa fa63 	bl	8017ff4 <pbuf_alloc>
 801db2e:	6338      	str	r0, [r7, #48]	; 0x30
 801db30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801db32:	2b00      	cmp	r3, #0
 801db34:	d103      	bne.n	801db3e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801db36:	6978      	ldr	r0, [r7, #20]
 801db38:	f7fa fd40 	bl	80185bc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801db3c:	e136      	b.n	801ddac <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801db3e:	6979      	ldr	r1, [r7, #20]
 801db40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801db42:	f7fa fe09 	bl	8018758 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801db46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801db48:	f7fa fdc6 	bl	80186d8 <pbuf_clen>
 801db4c:	4603      	mov	r3, r0
 801db4e:	461a      	mov	r2, r3
 801db50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801db54:	4413      	add	r3, r2
 801db56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801db5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801db5e:	2b09      	cmp	r3, #9
 801db60:	d903      	bls.n	801db6a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801db62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801db64:	f7fa fd2a 	bl	80185bc <pbuf_free>
      goto memerr;
 801db68:	e120      	b.n	801ddac <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801db6a:	68fb      	ldr	r3, [r7, #12]
 801db6c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801db6e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801db72:	441a      	add	r2, r3
 801db74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801db78:	9300      	str	r3, [sp, #0]
 801db7a:	4613      	mov	r3, r2
 801db7c:	2200      	movs	r2, #0
 801db7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801db80:	68f8      	ldr	r0, [r7, #12]
 801db82:	f7ff fc51 	bl	801d428 <tcp_create_segment>
 801db86:	64f8      	str	r0, [r7, #76]	; 0x4c
 801db88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	f000 810d 	beq.w	801ddaa <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801db90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801db92:	2b00      	cmp	r3, #0
 801db94:	d102      	bne.n	801db9c <tcp_write+0x450>
      queue = seg;
 801db96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801db98:	647b      	str	r3, [r7, #68]	; 0x44
 801db9a:	e00c      	b.n	801dbb6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801db9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d106      	bne.n	801dbb0 <tcp_write+0x464>
 801dba2:	4b53      	ldr	r3, [pc, #332]	; (801dcf0 <tcp_write+0x5a4>)
 801dba4:	f240 22ab 	movw	r2, #683	; 0x2ab
 801dba8:	4955      	ldr	r1, [pc, #340]	; (801dd00 <tcp_write+0x5b4>)
 801dbaa:	4853      	ldr	r0, [pc, #332]	; (801dcf8 <tcp_write+0x5ac>)
 801dbac:	f007 f908 	bl	8024dc0 <iprintf>
      prev_seg->next = seg;
 801dbb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801dbb2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801dbb4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801dbb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dbb8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801dbba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dbbe:	8b3b      	ldrh	r3, [r7, #24]
 801dbc0:	4413      	add	r3, r2
 801dbc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801dbc6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dbca:	88fb      	ldrh	r3, [r7, #6]
 801dbcc:	429a      	cmp	r2, r3
 801dbce:	f4ff af3d 	bcc.w	801da4c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801dbd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dbd4:	2b00      	cmp	r3, #0
 801dbd6:	d02c      	beq.n	801dc32 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801dbd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dbda:	685b      	ldr	r3, [r3, #4]
 801dbdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dbde:	e01e      	b.n	801dc1e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801dbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbe2:	891a      	ldrh	r2, [r3, #8]
 801dbe4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dbe6:	4413      	add	r3, r2
 801dbe8:	b29a      	uxth	r2, r3
 801dbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbec:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801dbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbf0:	681b      	ldr	r3, [r3, #0]
 801dbf2:	2b00      	cmp	r3, #0
 801dbf4:	d110      	bne.n	801dc18 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801dbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dbf8:	685b      	ldr	r3, [r3, #4]
 801dbfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dbfc:	8952      	ldrh	r2, [r2, #10]
 801dbfe:	4413      	add	r3, r2
 801dc00:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801dc02:	68b9      	ldr	r1, [r7, #8]
 801dc04:	4618      	mov	r0, r3
 801dc06:	f008 fd9a 	bl	802673e <memcpy>
        p->len += oversize_used;
 801dc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc0c:	895a      	ldrh	r2, [r3, #10]
 801dc0e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dc10:	4413      	add	r3, r2
 801dc12:	b29a      	uxth	r2, r3
 801dc14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc16:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801dc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc1a:	681b      	ldr	r3, [r3, #0]
 801dc1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d1dd      	bne.n	801dbe0 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801dc24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc26:	891a      	ldrh	r2, [r3, #8]
 801dc28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dc2a:	4413      	add	r3, r2
 801dc2c:	b29a      	uxth	r2, r3
 801dc2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc30:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801dc32:	8a7a      	ldrh	r2, [r7, #18]
 801dc34:	68fb      	ldr	r3, [r7, #12]
 801dc36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801dc3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dc3c:	2b00      	cmp	r3, #0
 801dc3e:	d018      	beq.n	801dc72 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801dc40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc42:	2b00      	cmp	r3, #0
 801dc44:	d106      	bne.n	801dc54 <tcp_write+0x508>
 801dc46:	4b2a      	ldr	r3, [pc, #168]	; (801dcf0 <tcp_write+0x5a4>)
 801dc48:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801dc4c:	492d      	ldr	r1, [pc, #180]	; (801dd04 <tcp_write+0x5b8>)
 801dc4e:	482a      	ldr	r0, [pc, #168]	; (801dcf8 <tcp_write+0x5ac>)
 801dc50:	f007 f8b6 	bl	8024dc0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801dc54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc56:	685b      	ldr	r3, [r3, #4]
 801dc58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801dc5a:	4618      	mov	r0, r3
 801dc5c:	f7fa fd7c 	bl	8018758 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801dc60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc62:	891a      	ldrh	r2, [r3, #8]
 801dc64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801dc66:	891b      	ldrh	r3, [r3, #8]
 801dc68:	4413      	add	r3, r2
 801dc6a:	b29a      	uxth	r2, r3
 801dc6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc6e:	811a      	strh	r2, [r3, #8]
 801dc70:	e037      	b.n	801dce2 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801dc72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d034      	beq.n	801dce2 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801dc78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc7a:	2b00      	cmp	r3, #0
 801dc7c:	d003      	beq.n	801dc86 <tcp_write+0x53a>
 801dc7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc80:	685b      	ldr	r3, [r3, #4]
 801dc82:	2b00      	cmp	r3, #0
 801dc84:	d106      	bne.n	801dc94 <tcp_write+0x548>
 801dc86:	4b1a      	ldr	r3, [pc, #104]	; (801dcf0 <tcp_write+0x5a4>)
 801dc88:	f240 22e6 	movw	r2, #742	; 0x2e6
 801dc8c:	491e      	ldr	r1, [pc, #120]	; (801dd08 <tcp_write+0x5bc>)
 801dc8e:	481a      	ldr	r0, [pc, #104]	; (801dcf8 <tcp_write+0x5ac>)
 801dc90:	f007 f896 	bl	8024dc0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dc94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dc96:	685b      	ldr	r3, [r3, #4]
 801dc98:	62bb      	str	r3, [r7, #40]	; 0x28
 801dc9a:	e009      	b.n	801dcb0 <tcp_write+0x564>
      p->tot_len += extendlen;
 801dc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dc9e:	891a      	ldrh	r2, [r3, #8]
 801dca0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dca2:	4413      	add	r3, r2
 801dca4:	b29a      	uxth	r2, r3
 801dca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dca8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801dcaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcac:	681b      	ldr	r3, [r3, #0]
 801dcae:	62bb      	str	r3, [r7, #40]	; 0x28
 801dcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcb2:	681b      	ldr	r3, [r3, #0]
 801dcb4:	2b00      	cmp	r3, #0
 801dcb6:	d1f1      	bne.n	801dc9c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801dcb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcba:	891a      	ldrh	r2, [r3, #8]
 801dcbc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dcbe:	4413      	add	r3, r2
 801dcc0:	b29a      	uxth	r2, r3
 801dcc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcc4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801dcc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcc8:	895a      	ldrh	r2, [r3, #10]
 801dcca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dccc:	4413      	add	r3, r2
 801dcce:	b29a      	uxth	r2, r3
 801dcd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcd2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801dcd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dcd6:	891a      	ldrh	r2, [r3, #8]
 801dcd8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801dcda:	4413      	add	r3, r2
 801dcdc:	b29a      	uxth	r2, r3
 801dcde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dce0:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801dce2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d111      	bne.n	801dd0c <tcp_write+0x5c0>
    pcb->unsent = queue;
 801dce8:	68fb      	ldr	r3, [r7, #12]
 801dcea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801dcec:	66da      	str	r2, [r3, #108]	; 0x6c
 801dcee:	e010      	b.n	801dd12 <tcp_write+0x5c6>
 801dcf0:	0802c874 	.word	0x0802c874
 801dcf4:	0802cb14 	.word	0x0802cb14
 801dcf8:	0802c8c8 	.word	0x0802c8c8
 801dcfc:	0802cb54 	.word	0x0802cb54
 801dd00:	0802cb64 	.word	0x0802cb64
 801dd04:	0802cb78 	.word	0x0802cb78
 801dd08:	0802cbb0 	.word	0x0802cbb0
  } else {
    last_unsent->next = queue;
 801dd0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801dd10:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801dd12:	68fb      	ldr	r3, [r7, #12]
 801dd14:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801dd16:	88fb      	ldrh	r3, [r7, #6]
 801dd18:	441a      	add	r2, r3
 801dd1a:	68fb      	ldr	r3, [r7, #12]
 801dd1c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801dd1e:	68fb      	ldr	r3, [r7, #12]
 801dd20:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801dd24:	88fb      	ldrh	r3, [r7, #6]
 801dd26:	1ad3      	subs	r3, r2, r3
 801dd28:	b29a      	uxth	r2, r3
 801dd2a:	68fb      	ldr	r3, [r7, #12]
 801dd2c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801dd30:	68fb      	ldr	r3, [r7, #12]
 801dd32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801dd36:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801dd3a:	68fb      	ldr	r3, [r7, #12]
 801dd3c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dd40:	2b00      	cmp	r3, #0
 801dd42:	d00e      	beq.n	801dd62 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801dd44:	68fb      	ldr	r3, [r7, #12]
 801dd46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d10a      	bne.n	801dd62 <tcp_write+0x616>
 801dd4c:	68fb      	ldr	r3, [r7, #12]
 801dd4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d106      	bne.n	801dd62 <tcp_write+0x616>
 801dd54:	4b2c      	ldr	r3, [pc, #176]	; (801de08 <tcp_write+0x6bc>)
 801dd56:	f240 3212 	movw	r2, #786	; 0x312
 801dd5a:	492c      	ldr	r1, [pc, #176]	; (801de0c <tcp_write+0x6c0>)
 801dd5c:	482c      	ldr	r0, [pc, #176]	; (801de10 <tcp_write+0x6c4>)
 801dd5e:	f007 f82f 	bl	8024dc0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801dd62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd64:	2b00      	cmp	r3, #0
 801dd66:	d016      	beq.n	801dd96 <tcp_write+0x64a>
 801dd68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd6a:	68db      	ldr	r3, [r3, #12]
 801dd6c:	2b00      	cmp	r3, #0
 801dd6e:	d012      	beq.n	801dd96 <tcp_write+0x64a>
 801dd70:	797b      	ldrb	r3, [r7, #5]
 801dd72:	f003 0302 	and.w	r3, r3, #2
 801dd76:	2b00      	cmp	r3, #0
 801dd78:	d10d      	bne.n	801dd96 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801dd7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd7c:	68db      	ldr	r3, [r3, #12]
 801dd7e:	899b      	ldrh	r3, [r3, #12]
 801dd80:	b29c      	uxth	r4, r3
 801dd82:	2008      	movs	r0, #8
 801dd84:	f7f8 fd5e 	bl	8016844 <lwip_htons>
 801dd88:	4603      	mov	r3, r0
 801dd8a:	461a      	mov	r2, r3
 801dd8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801dd8e:	68db      	ldr	r3, [r3, #12]
 801dd90:	4322      	orrs	r2, r4
 801dd92:	b292      	uxth	r2, r2
 801dd94:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801dd96:	2300      	movs	r3, #0
 801dd98:	e031      	b.n	801ddfe <tcp_write+0x6b2>
          goto memerr;
 801dd9a:	bf00      	nop
 801dd9c:	e006      	b.n	801ddac <tcp_write+0x660>
            goto memerr;
 801dd9e:	bf00      	nop
 801dda0:	e004      	b.n	801ddac <tcp_write+0x660>
        goto memerr;
 801dda2:	bf00      	nop
 801dda4:	e002      	b.n	801ddac <tcp_write+0x660>
        goto memerr;
 801dda6:	bf00      	nop
 801dda8:	e000      	b.n	801ddac <tcp_write+0x660>
      goto memerr;
 801ddaa:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ddac:	68fb      	ldr	r3, [r7, #12]
 801ddae:	8b5b      	ldrh	r3, [r3, #26]
 801ddb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ddb4:	b29a      	uxth	r2, r3
 801ddb6:	68fb      	ldr	r3, [r7, #12]
 801ddb8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801ddba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ddbc:	2b00      	cmp	r3, #0
 801ddbe:	d002      	beq.n	801ddc6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801ddc0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801ddc2:	f7fa fbfb 	bl	80185bc <pbuf_free>
  }
  if (queue != NULL) {
 801ddc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ddc8:	2b00      	cmp	r3, #0
 801ddca:	d002      	beq.n	801ddd2 <tcp_write+0x686>
    tcp_segs_free(queue);
 801ddcc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ddce:	f7fc fb53 	bl	801a478 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801ddd2:	68fb      	ldr	r3, [r7, #12]
 801ddd4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801ddd8:	2b00      	cmp	r3, #0
 801ddda:	d00e      	beq.n	801ddfa <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801dddc:	68fb      	ldr	r3, [r7, #12]
 801ddde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d10a      	bne.n	801ddfa <tcp_write+0x6ae>
 801dde4:	68fb      	ldr	r3, [r7, #12]
 801dde6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dde8:	2b00      	cmp	r3, #0
 801ddea:	d106      	bne.n	801ddfa <tcp_write+0x6ae>
 801ddec:	4b06      	ldr	r3, [pc, #24]	; (801de08 <tcp_write+0x6bc>)
 801ddee:	f240 3227 	movw	r2, #807	; 0x327
 801ddf2:	4906      	ldr	r1, [pc, #24]	; (801de0c <tcp_write+0x6c0>)
 801ddf4:	4806      	ldr	r0, [pc, #24]	; (801de10 <tcp_write+0x6c4>)
 801ddf6:	f006 ffe3 	bl	8024dc0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801ddfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801ddfe:	4618      	mov	r0, r3
 801de00:	375c      	adds	r7, #92	; 0x5c
 801de02:	46bd      	mov	sp, r7
 801de04:	bd90      	pop	{r4, r7, pc}
 801de06:	bf00      	nop
 801de08:	0802c874 	.word	0x0802c874
 801de0c:	0802cbe8 	.word	0x0802cbe8
 801de10:	0802c8c8 	.word	0x0802c8c8

0801de14 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801de14:	b590      	push	{r4, r7, lr}
 801de16:	b08b      	sub	sp, #44	; 0x2c
 801de18:	af02      	add	r7, sp, #8
 801de1a:	6078      	str	r0, [r7, #4]
 801de1c:	460b      	mov	r3, r1
 801de1e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801de20:	2300      	movs	r3, #0
 801de22:	61fb      	str	r3, [r7, #28]
 801de24:	2300      	movs	r3, #0
 801de26:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801de28:	2300      	movs	r3, #0
 801de2a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801de2c:	687b      	ldr	r3, [r7, #4]
 801de2e:	2b00      	cmp	r3, #0
 801de30:	d106      	bne.n	801de40 <tcp_split_unsent_seg+0x2c>
 801de32:	4b95      	ldr	r3, [pc, #596]	; (801e088 <tcp_split_unsent_seg+0x274>)
 801de34:	f240 324b 	movw	r2, #843	; 0x34b
 801de38:	4994      	ldr	r1, [pc, #592]	; (801e08c <tcp_split_unsent_seg+0x278>)
 801de3a:	4895      	ldr	r0, [pc, #596]	; (801e090 <tcp_split_unsent_seg+0x27c>)
 801de3c:	f006 ffc0 	bl	8024dc0 <iprintf>

  useg = pcb->unsent;
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801de44:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801de46:	697b      	ldr	r3, [r7, #20]
 801de48:	2b00      	cmp	r3, #0
 801de4a:	d102      	bne.n	801de52 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801de4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801de50:	e116      	b.n	801e080 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801de52:	887b      	ldrh	r3, [r7, #2]
 801de54:	2b00      	cmp	r3, #0
 801de56:	d109      	bne.n	801de6c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801de58:	4b8b      	ldr	r3, [pc, #556]	; (801e088 <tcp_split_unsent_seg+0x274>)
 801de5a:	f240 3253 	movw	r2, #851	; 0x353
 801de5e:	498d      	ldr	r1, [pc, #564]	; (801e094 <tcp_split_unsent_seg+0x280>)
 801de60:	488b      	ldr	r0, [pc, #556]	; (801e090 <tcp_split_unsent_seg+0x27c>)
 801de62:	f006 ffad 	bl	8024dc0 <iprintf>
    return ERR_VAL;
 801de66:	f06f 0305 	mvn.w	r3, #5
 801de6a:	e109      	b.n	801e080 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801de6c:	697b      	ldr	r3, [r7, #20]
 801de6e:	891b      	ldrh	r3, [r3, #8]
 801de70:	887a      	ldrh	r2, [r7, #2]
 801de72:	429a      	cmp	r2, r3
 801de74:	d301      	bcc.n	801de7a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801de76:	2300      	movs	r3, #0
 801de78:	e102      	b.n	801e080 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801de7a:	687b      	ldr	r3, [r7, #4]
 801de7c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801de7e:	887a      	ldrh	r2, [r7, #2]
 801de80:	429a      	cmp	r2, r3
 801de82:	d906      	bls.n	801de92 <tcp_split_unsent_seg+0x7e>
 801de84:	4b80      	ldr	r3, [pc, #512]	; (801e088 <tcp_split_unsent_seg+0x274>)
 801de86:	f240 325b 	movw	r2, #859	; 0x35b
 801de8a:	4983      	ldr	r1, [pc, #524]	; (801e098 <tcp_split_unsent_seg+0x284>)
 801de8c:	4880      	ldr	r0, [pc, #512]	; (801e090 <tcp_split_unsent_seg+0x27c>)
 801de8e:	f006 ff97 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801de92:	697b      	ldr	r3, [r7, #20]
 801de94:	891b      	ldrh	r3, [r3, #8]
 801de96:	2b00      	cmp	r3, #0
 801de98:	d106      	bne.n	801dea8 <tcp_split_unsent_seg+0x94>
 801de9a:	4b7b      	ldr	r3, [pc, #492]	; (801e088 <tcp_split_unsent_seg+0x274>)
 801de9c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801dea0:	497e      	ldr	r1, [pc, #504]	; (801e09c <tcp_split_unsent_seg+0x288>)
 801dea2:	487b      	ldr	r0, [pc, #492]	; (801e090 <tcp_split_unsent_seg+0x27c>)
 801dea4:	f006 ff8c 	bl	8024dc0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801dea8:	697b      	ldr	r3, [r7, #20]
 801deaa:	7a9b      	ldrb	r3, [r3, #10]
 801deac:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801deae:	7bfb      	ldrb	r3, [r7, #15]
 801deb0:	009b      	lsls	r3, r3, #2
 801deb2:	b2db      	uxtb	r3, r3
 801deb4:	f003 0304 	and.w	r3, r3, #4
 801deb8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801deba:	697b      	ldr	r3, [r7, #20]
 801debc:	891a      	ldrh	r2, [r3, #8]
 801debe:	887b      	ldrh	r3, [r7, #2]
 801dec0:	1ad3      	subs	r3, r2, r3
 801dec2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801dec4:	7bbb      	ldrb	r3, [r7, #14]
 801dec6:	b29a      	uxth	r2, r3
 801dec8:	89bb      	ldrh	r3, [r7, #12]
 801deca:	4413      	add	r3, r2
 801decc:	b29b      	uxth	r3, r3
 801dece:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ded2:	4619      	mov	r1, r3
 801ded4:	2036      	movs	r0, #54	; 0x36
 801ded6:	f7fa f88d 	bl	8017ff4 <pbuf_alloc>
 801deda:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801dedc:	693b      	ldr	r3, [r7, #16]
 801dede:	2b00      	cmp	r3, #0
 801dee0:	f000 80b7 	beq.w	801e052 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801dee4:	697b      	ldr	r3, [r7, #20]
 801dee6:	685b      	ldr	r3, [r3, #4]
 801dee8:	891a      	ldrh	r2, [r3, #8]
 801deea:	697b      	ldr	r3, [r7, #20]
 801deec:	891b      	ldrh	r3, [r3, #8]
 801deee:	1ad3      	subs	r3, r2, r3
 801def0:	b29a      	uxth	r2, r3
 801def2:	887b      	ldrh	r3, [r7, #2]
 801def4:	4413      	add	r3, r2
 801def6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801def8:	697b      	ldr	r3, [r7, #20]
 801defa:	6858      	ldr	r0, [r3, #4]
 801defc:	693b      	ldr	r3, [r7, #16]
 801defe:	685a      	ldr	r2, [r3, #4]
 801df00:	7bbb      	ldrb	r3, [r7, #14]
 801df02:	18d1      	adds	r1, r2, r3
 801df04:	897b      	ldrh	r3, [r7, #10]
 801df06:	89ba      	ldrh	r2, [r7, #12]
 801df08:	f7fa fd5e 	bl	80189c8 <pbuf_copy_partial>
 801df0c:	4603      	mov	r3, r0
 801df0e:	461a      	mov	r2, r3
 801df10:	89bb      	ldrh	r3, [r7, #12]
 801df12:	4293      	cmp	r3, r2
 801df14:	f040 809f 	bne.w	801e056 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801df18:	697b      	ldr	r3, [r7, #20]
 801df1a:	68db      	ldr	r3, [r3, #12]
 801df1c:	899b      	ldrh	r3, [r3, #12]
 801df1e:	b29b      	uxth	r3, r3
 801df20:	4618      	mov	r0, r3
 801df22:	f7f8 fc8f 	bl	8016844 <lwip_htons>
 801df26:	4603      	mov	r3, r0
 801df28:	b2db      	uxtb	r3, r3
 801df2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801df2e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801df30:	2300      	movs	r3, #0
 801df32:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801df34:	7efb      	ldrb	r3, [r7, #27]
 801df36:	f003 0308 	and.w	r3, r3, #8
 801df3a:	2b00      	cmp	r3, #0
 801df3c:	d007      	beq.n	801df4e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801df3e:	7efb      	ldrb	r3, [r7, #27]
 801df40:	f023 0308 	bic.w	r3, r3, #8
 801df44:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801df46:	7ebb      	ldrb	r3, [r7, #26]
 801df48:	f043 0308 	orr.w	r3, r3, #8
 801df4c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801df4e:	7efb      	ldrb	r3, [r7, #27]
 801df50:	f003 0301 	and.w	r3, r3, #1
 801df54:	2b00      	cmp	r3, #0
 801df56:	d007      	beq.n	801df68 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801df58:	7efb      	ldrb	r3, [r7, #27]
 801df5a:	f023 0301 	bic.w	r3, r3, #1
 801df5e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801df60:	7ebb      	ldrb	r3, [r7, #26]
 801df62:	f043 0301 	orr.w	r3, r3, #1
 801df66:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801df68:	697b      	ldr	r3, [r7, #20]
 801df6a:	68db      	ldr	r3, [r3, #12]
 801df6c:	685b      	ldr	r3, [r3, #4]
 801df6e:	4618      	mov	r0, r3
 801df70:	f7f8 fc7d 	bl	801686e <lwip_htonl>
 801df74:	4602      	mov	r2, r0
 801df76:	887b      	ldrh	r3, [r7, #2]
 801df78:	18d1      	adds	r1, r2, r3
 801df7a:	7eba      	ldrb	r2, [r7, #26]
 801df7c:	7bfb      	ldrb	r3, [r7, #15]
 801df7e:	9300      	str	r3, [sp, #0]
 801df80:	460b      	mov	r3, r1
 801df82:	6939      	ldr	r1, [r7, #16]
 801df84:	6878      	ldr	r0, [r7, #4]
 801df86:	f7ff fa4f 	bl	801d428 <tcp_create_segment>
 801df8a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801df8c:	69fb      	ldr	r3, [r7, #28]
 801df8e:	2b00      	cmp	r3, #0
 801df90:	d063      	beq.n	801e05a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801df92:	697b      	ldr	r3, [r7, #20]
 801df94:	685b      	ldr	r3, [r3, #4]
 801df96:	4618      	mov	r0, r3
 801df98:	f7fa fb9e 	bl	80186d8 <pbuf_clen>
 801df9c:	4603      	mov	r3, r0
 801df9e:	461a      	mov	r2, r3
 801dfa0:	687b      	ldr	r3, [r7, #4]
 801dfa2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dfa6:	1a9b      	subs	r3, r3, r2
 801dfa8:	b29a      	uxth	r2, r3
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801dfb0:	697b      	ldr	r3, [r7, #20]
 801dfb2:	6858      	ldr	r0, [r3, #4]
 801dfb4:	697b      	ldr	r3, [r7, #20]
 801dfb6:	685b      	ldr	r3, [r3, #4]
 801dfb8:	891a      	ldrh	r2, [r3, #8]
 801dfba:	89bb      	ldrh	r3, [r7, #12]
 801dfbc:	1ad3      	subs	r3, r2, r3
 801dfbe:	b29b      	uxth	r3, r3
 801dfc0:	4619      	mov	r1, r3
 801dfc2:	f7fa f975 	bl	80182b0 <pbuf_realloc>
  useg->len -= remainder;
 801dfc6:	697b      	ldr	r3, [r7, #20]
 801dfc8:	891a      	ldrh	r2, [r3, #8]
 801dfca:	89bb      	ldrh	r3, [r7, #12]
 801dfcc:	1ad3      	subs	r3, r2, r3
 801dfce:	b29a      	uxth	r2, r3
 801dfd0:	697b      	ldr	r3, [r7, #20]
 801dfd2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801dfd4:	697b      	ldr	r3, [r7, #20]
 801dfd6:	68db      	ldr	r3, [r3, #12]
 801dfd8:	899b      	ldrh	r3, [r3, #12]
 801dfda:	b29c      	uxth	r4, r3
 801dfdc:	7efb      	ldrb	r3, [r7, #27]
 801dfde:	b29b      	uxth	r3, r3
 801dfe0:	4618      	mov	r0, r3
 801dfe2:	f7f8 fc2f 	bl	8016844 <lwip_htons>
 801dfe6:	4603      	mov	r3, r0
 801dfe8:	461a      	mov	r2, r3
 801dfea:	697b      	ldr	r3, [r7, #20]
 801dfec:	68db      	ldr	r3, [r3, #12]
 801dfee:	4322      	orrs	r2, r4
 801dff0:	b292      	uxth	r2, r2
 801dff2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801dff4:	697b      	ldr	r3, [r7, #20]
 801dff6:	685b      	ldr	r3, [r3, #4]
 801dff8:	4618      	mov	r0, r3
 801dffa:	f7fa fb6d 	bl	80186d8 <pbuf_clen>
 801dffe:	4603      	mov	r3, r0
 801e000:	461a      	mov	r2, r3
 801e002:	687b      	ldr	r3, [r7, #4]
 801e004:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e008:	4413      	add	r3, r2
 801e00a:	b29a      	uxth	r2, r3
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e012:	69fb      	ldr	r3, [r7, #28]
 801e014:	685b      	ldr	r3, [r3, #4]
 801e016:	4618      	mov	r0, r3
 801e018:	f7fa fb5e 	bl	80186d8 <pbuf_clen>
 801e01c:	4603      	mov	r3, r0
 801e01e:	461a      	mov	r2, r3
 801e020:	687b      	ldr	r3, [r7, #4]
 801e022:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e026:	4413      	add	r3, r2
 801e028:	b29a      	uxth	r2, r3
 801e02a:	687b      	ldr	r3, [r7, #4]
 801e02c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801e030:	697b      	ldr	r3, [r7, #20]
 801e032:	681a      	ldr	r2, [r3, #0]
 801e034:	69fb      	ldr	r3, [r7, #28]
 801e036:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801e038:	697b      	ldr	r3, [r7, #20]
 801e03a:	69fa      	ldr	r2, [r7, #28]
 801e03c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801e03e:	69fb      	ldr	r3, [r7, #28]
 801e040:	681b      	ldr	r3, [r3, #0]
 801e042:	2b00      	cmp	r3, #0
 801e044:	d103      	bne.n	801e04e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801e046:	687b      	ldr	r3, [r7, #4]
 801e048:	2200      	movs	r2, #0
 801e04a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801e04e:	2300      	movs	r3, #0
 801e050:	e016      	b.n	801e080 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801e052:	bf00      	nop
 801e054:	e002      	b.n	801e05c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e056:	bf00      	nop
 801e058:	e000      	b.n	801e05c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e05a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801e05c:	69fb      	ldr	r3, [r7, #28]
 801e05e:	2b00      	cmp	r3, #0
 801e060:	d006      	beq.n	801e070 <tcp_split_unsent_seg+0x25c>
 801e062:	4b09      	ldr	r3, [pc, #36]	; (801e088 <tcp_split_unsent_seg+0x274>)
 801e064:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801e068:	490d      	ldr	r1, [pc, #52]	; (801e0a0 <tcp_split_unsent_seg+0x28c>)
 801e06a:	4809      	ldr	r0, [pc, #36]	; (801e090 <tcp_split_unsent_seg+0x27c>)
 801e06c:	f006 fea8 	bl	8024dc0 <iprintf>
  if (p != NULL) {
 801e070:	693b      	ldr	r3, [r7, #16]
 801e072:	2b00      	cmp	r3, #0
 801e074:	d002      	beq.n	801e07c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801e076:	6938      	ldr	r0, [r7, #16]
 801e078:	f7fa faa0 	bl	80185bc <pbuf_free>
  }

  return ERR_MEM;
 801e07c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801e080:	4618      	mov	r0, r3
 801e082:	3724      	adds	r7, #36	; 0x24
 801e084:	46bd      	mov	sp, r7
 801e086:	bd90      	pop	{r4, r7, pc}
 801e088:	0802c874 	.word	0x0802c874
 801e08c:	0802cc08 	.word	0x0802cc08
 801e090:	0802c8c8 	.word	0x0802c8c8
 801e094:	0802cc2c 	.word	0x0802cc2c
 801e098:	0802cc50 	.word	0x0802cc50
 801e09c:	0802cc60 	.word	0x0802cc60
 801e0a0:	0802cc70 	.word	0x0802cc70

0801e0a4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801e0a4:	b590      	push	{r4, r7, lr}
 801e0a6:	b085      	sub	sp, #20
 801e0a8:	af00      	add	r7, sp, #0
 801e0aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	2b00      	cmp	r3, #0
 801e0b0:	d106      	bne.n	801e0c0 <tcp_send_fin+0x1c>
 801e0b2:	4b21      	ldr	r3, [pc, #132]	; (801e138 <tcp_send_fin+0x94>)
 801e0b4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801e0b8:	4920      	ldr	r1, [pc, #128]	; (801e13c <tcp_send_fin+0x98>)
 801e0ba:	4821      	ldr	r0, [pc, #132]	; (801e140 <tcp_send_fin+0x9c>)
 801e0bc:	f006 fe80 	bl	8024dc0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801e0c0:	687b      	ldr	r3, [r7, #4]
 801e0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d02e      	beq.n	801e126 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e0c8:	687b      	ldr	r3, [r7, #4]
 801e0ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e0cc:	60fb      	str	r3, [r7, #12]
 801e0ce:	e002      	b.n	801e0d6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801e0d0:	68fb      	ldr	r3, [r7, #12]
 801e0d2:	681b      	ldr	r3, [r3, #0]
 801e0d4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e0d6:	68fb      	ldr	r3, [r7, #12]
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	2b00      	cmp	r3, #0
 801e0dc:	d1f8      	bne.n	801e0d0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801e0de:	68fb      	ldr	r3, [r7, #12]
 801e0e0:	68db      	ldr	r3, [r3, #12]
 801e0e2:	899b      	ldrh	r3, [r3, #12]
 801e0e4:	b29b      	uxth	r3, r3
 801e0e6:	4618      	mov	r0, r3
 801e0e8:	f7f8 fbac 	bl	8016844 <lwip_htons>
 801e0ec:	4603      	mov	r3, r0
 801e0ee:	b2db      	uxtb	r3, r3
 801e0f0:	f003 0307 	and.w	r3, r3, #7
 801e0f4:	2b00      	cmp	r3, #0
 801e0f6:	d116      	bne.n	801e126 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e0f8:	68fb      	ldr	r3, [r7, #12]
 801e0fa:	68db      	ldr	r3, [r3, #12]
 801e0fc:	899b      	ldrh	r3, [r3, #12]
 801e0fe:	b29c      	uxth	r4, r3
 801e100:	2001      	movs	r0, #1
 801e102:	f7f8 fb9f 	bl	8016844 <lwip_htons>
 801e106:	4603      	mov	r3, r0
 801e108:	461a      	mov	r2, r3
 801e10a:	68fb      	ldr	r3, [r7, #12]
 801e10c:	68db      	ldr	r3, [r3, #12]
 801e10e:	4322      	orrs	r2, r4
 801e110:	b292      	uxth	r2, r2
 801e112:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801e114:	687b      	ldr	r3, [r7, #4]
 801e116:	8b5b      	ldrh	r3, [r3, #26]
 801e118:	f043 0320 	orr.w	r3, r3, #32
 801e11c:	b29a      	uxth	r2, r3
 801e11e:	687b      	ldr	r3, [r7, #4]
 801e120:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801e122:	2300      	movs	r3, #0
 801e124:	e004      	b.n	801e130 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e126:	2101      	movs	r1, #1
 801e128:	6878      	ldr	r0, [r7, #4]
 801e12a:	f000 f80b 	bl	801e144 <tcp_enqueue_flags>
 801e12e:	4603      	mov	r3, r0
}
 801e130:	4618      	mov	r0, r3
 801e132:	3714      	adds	r7, #20
 801e134:	46bd      	mov	sp, r7
 801e136:	bd90      	pop	{r4, r7, pc}
 801e138:	0802c874 	.word	0x0802c874
 801e13c:	0802cc7c 	.word	0x0802cc7c
 801e140:	0802c8c8 	.word	0x0802c8c8

0801e144 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801e144:	b580      	push	{r7, lr}
 801e146:	b08a      	sub	sp, #40	; 0x28
 801e148:	af02      	add	r7, sp, #8
 801e14a:	6078      	str	r0, [r7, #4]
 801e14c:	460b      	mov	r3, r1
 801e14e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801e150:	2300      	movs	r3, #0
 801e152:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801e154:	2300      	movs	r3, #0
 801e156:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e158:	78fb      	ldrb	r3, [r7, #3]
 801e15a:	f003 0303 	and.w	r3, r3, #3
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d106      	bne.n	801e170 <tcp_enqueue_flags+0x2c>
 801e162:	4b67      	ldr	r3, [pc, #412]	; (801e300 <tcp_enqueue_flags+0x1bc>)
 801e164:	f240 4211 	movw	r2, #1041	; 0x411
 801e168:	4966      	ldr	r1, [pc, #408]	; (801e304 <tcp_enqueue_flags+0x1c0>)
 801e16a:	4867      	ldr	r0, [pc, #412]	; (801e308 <tcp_enqueue_flags+0x1c4>)
 801e16c:	f006 fe28 	bl	8024dc0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e170:	687b      	ldr	r3, [r7, #4]
 801e172:	2b00      	cmp	r3, #0
 801e174:	d106      	bne.n	801e184 <tcp_enqueue_flags+0x40>
 801e176:	4b62      	ldr	r3, [pc, #392]	; (801e300 <tcp_enqueue_flags+0x1bc>)
 801e178:	f240 4213 	movw	r2, #1043	; 0x413
 801e17c:	4963      	ldr	r1, [pc, #396]	; (801e30c <tcp_enqueue_flags+0x1c8>)
 801e17e:	4862      	ldr	r0, [pc, #392]	; (801e308 <tcp_enqueue_flags+0x1c4>)
 801e180:	f006 fe1e 	bl	8024dc0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801e184:	78fb      	ldrb	r3, [r7, #3]
 801e186:	f003 0302 	and.w	r3, r3, #2
 801e18a:	2b00      	cmp	r3, #0
 801e18c:	d001      	beq.n	801e192 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801e18e:	2301      	movs	r3, #1
 801e190:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e192:	7ffb      	ldrb	r3, [r7, #31]
 801e194:	009b      	lsls	r3, r3, #2
 801e196:	b2db      	uxtb	r3, r3
 801e198:	f003 0304 	and.w	r3, r3, #4
 801e19c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e19e:	7dfb      	ldrb	r3, [r7, #23]
 801e1a0:	b29b      	uxth	r3, r3
 801e1a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e1a6:	4619      	mov	r1, r3
 801e1a8:	2036      	movs	r0, #54	; 0x36
 801e1aa:	f7f9 ff23 	bl	8017ff4 <pbuf_alloc>
 801e1ae:	6138      	str	r0, [r7, #16]
 801e1b0:	693b      	ldr	r3, [r7, #16]
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	d109      	bne.n	801e1ca <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e1b6:	687b      	ldr	r3, [r7, #4]
 801e1b8:	8b5b      	ldrh	r3, [r3, #26]
 801e1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e1be:	b29a      	uxth	r2, r3
 801e1c0:	687b      	ldr	r3, [r7, #4]
 801e1c2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e1c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e1c8:	e095      	b.n	801e2f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e1ca:	693b      	ldr	r3, [r7, #16]
 801e1cc:	895a      	ldrh	r2, [r3, #10]
 801e1ce:	7dfb      	ldrb	r3, [r7, #23]
 801e1d0:	b29b      	uxth	r3, r3
 801e1d2:	429a      	cmp	r2, r3
 801e1d4:	d206      	bcs.n	801e1e4 <tcp_enqueue_flags+0xa0>
 801e1d6:	4b4a      	ldr	r3, [pc, #296]	; (801e300 <tcp_enqueue_flags+0x1bc>)
 801e1d8:	f240 4239 	movw	r2, #1081	; 0x439
 801e1dc:	494c      	ldr	r1, [pc, #304]	; (801e310 <tcp_enqueue_flags+0x1cc>)
 801e1de:	484a      	ldr	r0, [pc, #296]	; (801e308 <tcp_enqueue_flags+0x1c4>)
 801e1e0:	f006 fdee 	bl	8024dc0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e1e4:	687b      	ldr	r3, [r7, #4]
 801e1e6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801e1e8:	78fa      	ldrb	r2, [r7, #3]
 801e1ea:	7ffb      	ldrb	r3, [r7, #31]
 801e1ec:	9300      	str	r3, [sp, #0]
 801e1ee:	460b      	mov	r3, r1
 801e1f0:	6939      	ldr	r1, [r7, #16]
 801e1f2:	6878      	ldr	r0, [r7, #4]
 801e1f4:	f7ff f918 	bl	801d428 <tcp_create_segment>
 801e1f8:	60f8      	str	r0, [r7, #12]
 801e1fa:	68fb      	ldr	r3, [r7, #12]
 801e1fc:	2b00      	cmp	r3, #0
 801e1fe:	d109      	bne.n	801e214 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e200:	687b      	ldr	r3, [r7, #4]
 801e202:	8b5b      	ldrh	r3, [r3, #26]
 801e204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e208:	b29a      	uxth	r2, r3
 801e20a:	687b      	ldr	r3, [r7, #4]
 801e20c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e20e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e212:	e070      	b.n	801e2f6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e214:	68fb      	ldr	r3, [r7, #12]
 801e216:	68db      	ldr	r3, [r3, #12]
 801e218:	f003 0303 	and.w	r3, r3, #3
 801e21c:	2b00      	cmp	r3, #0
 801e21e:	d006      	beq.n	801e22e <tcp_enqueue_flags+0xea>
 801e220:	4b37      	ldr	r3, [pc, #220]	; (801e300 <tcp_enqueue_flags+0x1bc>)
 801e222:	f240 4242 	movw	r2, #1090	; 0x442
 801e226:	493b      	ldr	r1, [pc, #236]	; (801e314 <tcp_enqueue_flags+0x1d0>)
 801e228:	4837      	ldr	r0, [pc, #220]	; (801e308 <tcp_enqueue_flags+0x1c4>)
 801e22a:	f006 fdc9 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e22e:	68fb      	ldr	r3, [r7, #12]
 801e230:	891b      	ldrh	r3, [r3, #8]
 801e232:	2b00      	cmp	r3, #0
 801e234:	d006      	beq.n	801e244 <tcp_enqueue_flags+0x100>
 801e236:	4b32      	ldr	r3, [pc, #200]	; (801e300 <tcp_enqueue_flags+0x1bc>)
 801e238:	f240 4243 	movw	r2, #1091	; 0x443
 801e23c:	4936      	ldr	r1, [pc, #216]	; (801e318 <tcp_enqueue_flags+0x1d4>)
 801e23e:	4832      	ldr	r0, [pc, #200]	; (801e308 <tcp_enqueue_flags+0x1c4>)
 801e240:	f006 fdbe 	bl	8024dc0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e248:	2b00      	cmp	r3, #0
 801e24a:	d103      	bne.n	801e254 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801e24c:	687b      	ldr	r3, [r7, #4]
 801e24e:	68fa      	ldr	r2, [r7, #12]
 801e250:	66da      	str	r2, [r3, #108]	; 0x6c
 801e252:	e00d      	b.n	801e270 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e254:	687b      	ldr	r3, [r7, #4]
 801e256:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e258:	61bb      	str	r3, [r7, #24]
 801e25a:	e002      	b.n	801e262 <tcp_enqueue_flags+0x11e>
 801e25c:	69bb      	ldr	r3, [r7, #24]
 801e25e:	681b      	ldr	r3, [r3, #0]
 801e260:	61bb      	str	r3, [r7, #24]
 801e262:	69bb      	ldr	r3, [r7, #24]
 801e264:	681b      	ldr	r3, [r3, #0]
 801e266:	2b00      	cmp	r3, #0
 801e268:	d1f8      	bne.n	801e25c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801e26a:	69bb      	ldr	r3, [r7, #24]
 801e26c:	68fa      	ldr	r2, [r7, #12]
 801e26e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801e270:	687b      	ldr	r3, [r7, #4]
 801e272:	2200      	movs	r2, #0
 801e274:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e278:	78fb      	ldrb	r3, [r7, #3]
 801e27a:	f003 0302 	and.w	r3, r3, #2
 801e27e:	2b00      	cmp	r3, #0
 801e280:	d104      	bne.n	801e28c <tcp_enqueue_flags+0x148>
 801e282:	78fb      	ldrb	r3, [r7, #3]
 801e284:	f003 0301 	and.w	r3, r3, #1
 801e288:	2b00      	cmp	r3, #0
 801e28a:	d004      	beq.n	801e296 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801e28c:	687b      	ldr	r3, [r7, #4]
 801e28e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e290:	1c5a      	adds	r2, r3, #1
 801e292:	687b      	ldr	r3, [r7, #4]
 801e294:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801e296:	78fb      	ldrb	r3, [r7, #3]
 801e298:	f003 0301 	and.w	r3, r3, #1
 801e29c:	2b00      	cmp	r3, #0
 801e29e:	d006      	beq.n	801e2ae <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	8b5b      	ldrh	r3, [r3, #26]
 801e2a4:	f043 0320 	orr.w	r3, r3, #32
 801e2a8:	b29a      	uxth	r2, r3
 801e2aa:	687b      	ldr	r3, [r7, #4]
 801e2ac:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e2ae:	68fb      	ldr	r3, [r7, #12]
 801e2b0:	685b      	ldr	r3, [r3, #4]
 801e2b2:	4618      	mov	r0, r3
 801e2b4:	f7fa fa10 	bl	80186d8 <pbuf_clen>
 801e2b8:	4603      	mov	r3, r0
 801e2ba:	461a      	mov	r2, r3
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e2c2:	4413      	add	r3, r2
 801e2c4:	b29a      	uxth	r2, r3
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d00e      	beq.n	801e2f4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e2d6:	687b      	ldr	r3, [r7, #4]
 801e2d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e2da:	2b00      	cmp	r3, #0
 801e2dc:	d10a      	bne.n	801e2f4 <tcp_enqueue_flags+0x1b0>
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	d106      	bne.n	801e2f4 <tcp_enqueue_flags+0x1b0>
 801e2e6:	4b06      	ldr	r3, [pc, #24]	; (801e300 <tcp_enqueue_flags+0x1bc>)
 801e2e8:	f240 4265 	movw	r2, #1125	; 0x465
 801e2ec:	490b      	ldr	r1, [pc, #44]	; (801e31c <tcp_enqueue_flags+0x1d8>)
 801e2ee:	4806      	ldr	r0, [pc, #24]	; (801e308 <tcp_enqueue_flags+0x1c4>)
 801e2f0:	f006 fd66 	bl	8024dc0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801e2f4:	2300      	movs	r3, #0
}
 801e2f6:	4618      	mov	r0, r3
 801e2f8:	3720      	adds	r7, #32
 801e2fa:	46bd      	mov	sp, r7
 801e2fc:	bd80      	pop	{r7, pc}
 801e2fe:	bf00      	nop
 801e300:	0802c874 	.word	0x0802c874
 801e304:	0802cc98 	.word	0x0802cc98
 801e308:	0802c8c8 	.word	0x0802c8c8
 801e30c:	0802ccf0 	.word	0x0802ccf0
 801e310:	0802cd10 	.word	0x0802cd10
 801e314:	0802cd4c 	.word	0x0802cd4c
 801e318:	0802cd64 	.word	0x0802cd64
 801e31c:	0802cd90 	.word	0x0802cd90

0801e320 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801e320:	b5b0      	push	{r4, r5, r7, lr}
 801e322:	b08a      	sub	sp, #40	; 0x28
 801e324:	af00      	add	r7, sp, #0
 801e326:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	2b00      	cmp	r3, #0
 801e32c:	d106      	bne.n	801e33c <tcp_output+0x1c>
 801e32e:	4b8a      	ldr	r3, [pc, #552]	; (801e558 <tcp_output+0x238>)
 801e330:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801e334:	4989      	ldr	r1, [pc, #548]	; (801e55c <tcp_output+0x23c>)
 801e336:	488a      	ldr	r0, [pc, #552]	; (801e560 <tcp_output+0x240>)
 801e338:	f006 fd42 	bl	8024dc0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	7d1b      	ldrb	r3, [r3, #20]
 801e340:	2b01      	cmp	r3, #1
 801e342:	d106      	bne.n	801e352 <tcp_output+0x32>
 801e344:	4b84      	ldr	r3, [pc, #528]	; (801e558 <tcp_output+0x238>)
 801e346:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801e34a:	4986      	ldr	r1, [pc, #536]	; (801e564 <tcp_output+0x244>)
 801e34c:	4884      	ldr	r0, [pc, #528]	; (801e560 <tcp_output+0x240>)
 801e34e:	f006 fd37 	bl	8024dc0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801e352:	4b85      	ldr	r3, [pc, #532]	; (801e568 <tcp_output+0x248>)
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	687a      	ldr	r2, [r7, #4]
 801e358:	429a      	cmp	r2, r3
 801e35a:	d101      	bne.n	801e360 <tcp_output+0x40>
    return ERR_OK;
 801e35c:	2300      	movs	r3, #0
 801e35e:	e1ce      	b.n	801e6fe <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e36c:	4293      	cmp	r3, r2
 801e36e:	bf28      	it	cs
 801e370:	4613      	movcs	r3, r2
 801e372:	b29b      	uxth	r3, r3
 801e374:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e37a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801e37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e37e:	2b00      	cmp	r3, #0
 801e380:	d10b      	bne.n	801e39a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	8b5b      	ldrh	r3, [r3, #26]
 801e386:	f003 0302 	and.w	r3, r3, #2
 801e38a:	2b00      	cmp	r3, #0
 801e38c:	f000 81aa 	beq.w	801e6e4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801e390:	6878      	ldr	r0, [r7, #4]
 801e392:	f000 fdcb 	bl	801ef2c <tcp_send_empty_ack>
 801e396:	4603      	mov	r3, r0
 801e398:	e1b1      	b.n	801e6fe <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801e39a:	6879      	ldr	r1, [r7, #4]
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	3304      	adds	r3, #4
 801e3a0:	461a      	mov	r2, r3
 801e3a2:	6878      	ldr	r0, [r7, #4]
 801e3a4:	f7ff f824 	bl	801d3f0 <tcp_route>
 801e3a8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801e3aa:	697b      	ldr	r3, [r7, #20]
 801e3ac:	2b00      	cmp	r3, #0
 801e3ae:	d102      	bne.n	801e3b6 <tcp_output+0x96>
    return ERR_RTE;
 801e3b0:	f06f 0303 	mvn.w	r3, #3
 801e3b4:	e1a3      	b.n	801e6fe <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801e3b6:	687b      	ldr	r3, [r7, #4]
 801e3b8:	2b00      	cmp	r3, #0
 801e3ba:	d003      	beq.n	801e3c4 <tcp_output+0xa4>
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	681b      	ldr	r3, [r3, #0]
 801e3c0:	2b00      	cmp	r3, #0
 801e3c2:	d111      	bne.n	801e3e8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801e3c4:	697b      	ldr	r3, [r7, #20]
 801e3c6:	2b00      	cmp	r3, #0
 801e3c8:	d002      	beq.n	801e3d0 <tcp_output+0xb0>
 801e3ca:	697b      	ldr	r3, [r7, #20]
 801e3cc:	3304      	adds	r3, #4
 801e3ce:	e000      	b.n	801e3d2 <tcp_output+0xb2>
 801e3d0:	2300      	movs	r3, #0
 801e3d2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801e3d4:	693b      	ldr	r3, [r7, #16]
 801e3d6:	2b00      	cmp	r3, #0
 801e3d8:	d102      	bne.n	801e3e0 <tcp_output+0xc0>
      return ERR_RTE;
 801e3da:	f06f 0303 	mvn.w	r3, #3
 801e3de:	e18e      	b.n	801e6fe <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801e3e0:	693b      	ldr	r3, [r7, #16]
 801e3e2:	681a      	ldr	r2, [r3, #0]
 801e3e4:	687b      	ldr	r3, [r7, #4]
 801e3e6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3ea:	68db      	ldr	r3, [r3, #12]
 801e3ec:	685b      	ldr	r3, [r3, #4]
 801e3ee:	4618      	mov	r0, r3
 801e3f0:	f7f8 fa3d 	bl	801686e <lwip_htonl>
 801e3f4:	4602      	mov	r2, r0
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e3fa:	1ad3      	subs	r3, r2, r3
 801e3fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e3fe:	8912      	ldrh	r2, [r2, #8]
 801e400:	4413      	add	r3, r2
 801e402:	69ba      	ldr	r2, [r7, #24]
 801e404:	429a      	cmp	r2, r3
 801e406:	d227      	bcs.n	801e458 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e408:	687b      	ldr	r3, [r7, #4]
 801e40a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e40e:	461a      	mov	r2, r3
 801e410:	69bb      	ldr	r3, [r7, #24]
 801e412:	4293      	cmp	r3, r2
 801e414:	d114      	bne.n	801e440 <tcp_output+0x120>
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d110      	bne.n	801e440 <tcp_output+0x120>
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801e424:	2b00      	cmp	r3, #0
 801e426:	d10b      	bne.n	801e440 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	2200      	movs	r2, #0
 801e42c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
 801e430:	687b      	ldr	r3, [r7, #4]
 801e432:	2201      	movs	r2, #1
 801e434:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      pcb->persist_probe = 0;
 801e438:	687b      	ldr	r3, [r7, #4]
 801e43a:	2200      	movs	r2, #0
 801e43c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	8b5b      	ldrh	r3, [r3, #26]
 801e444:	f003 0302 	and.w	r3, r3, #2
 801e448:	2b00      	cmp	r3, #0
 801e44a:	f000 814d 	beq.w	801e6e8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801e44e:	6878      	ldr	r0, [r7, #4]
 801e450:	f000 fd6c 	bl	801ef2c <tcp_send_empty_ack>
 801e454:	4603      	mov	r3, r0
 801e456:	e152      	b.n	801e6fe <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801e458:	687b      	ldr	r3, [r7, #4]
 801e45a:	2200      	movs	r2, #0
 801e45c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801e460:	687b      	ldr	r3, [r7, #4]
 801e462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e464:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801e466:	6a3b      	ldr	r3, [r7, #32]
 801e468:	2b00      	cmp	r3, #0
 801e46a:	f000 811c 	beq.w	801e6a6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801e46e:	e002      	b.n	801e476 <tcp_output+0x156>
 801e470:	6a3b      	ldr	r3, [r7, #32]
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	623b      	str	r3, [r7, #32]
 801e476:	6a3b      	ldr	r3, [r7, #32]
 801e478:	681b      	ldr	r3, [r3, #0]
 801e47a:	2b00      	cmp	r3, #0
 801e47c:	d1f8      	bne.n	801e470 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801e47e:	e112      	b.n	801e6a6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801e480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e482:	68db      	ldr	r3, [r3, #12]
 801e484:	899b      	ldrh	r3, [r3, #12]
 801e486:	b29b      	uxth	r3, r3
 801e488:	4618      	mov	r0, r3
 801e48a:	f7f8 f9db 	bl	8016844 <lwip_htons>
 801e48e:	4603      	mov	r3, r0
 801e490:	b2db      	uxtb	r3, r3
 801e492:	f003 0304 	and.w	r3, r3, #4
 801e496:	2b00      	cmp	r3, #0
 801e498:	d006      	beq.n	801e4a8 <tcp_output+0x188>
 801e49a:	4b2f      	ldr	r3, [pc, #188]	; (801e558 <tcp_output+0x238>)
 801e49c:	f240 5236 	movw	r2, #1334	; 0x536
 801e4a0:	4932      	ldr	r1, [pc, #200]	; (801e56c <tcp_output+0x24c>)
 801e4a2:	482f      	ldr	r0, [pc, #188]	; (801e560 <tcp_output+0x240>)
 801e4a4:	f006 fc8c 	bl	8024dc0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e4ac:	2b00      	cmp	r3, #0
 801e4ae:	d01f      	beq.n	801e4f0 <tcp_output+0x1d0>
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	8b5b      	ldrh	r3, [r3, #26]
 801e4b4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801e4b8:	2b00      	cmp	r3, #0
 801e4ba:	d119      	bne.n	801e4f0 <tcp_output+0x1d0>
 801e4bc:	687b      	ldr	r3, [r7, #4]
 801e4be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	d00b      	beq.n	801e4dc <tcp_output+0x1bc>
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e4c8:	681b      	ldr	r3, [r3, #0]
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	d110      	bne.n	801e4f0 <tcp_output+0x1d0>
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e4d2:	891a      	ldrh	r2, [r3, #8]
 801e4d4:	687b      	ldr	r3, [r7, #4]
 801e4d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e4d8:	429a      	cmp	r2, r3
 801e4da:	d209      	bcs.n	801e4f0 <tcp_output+0x1d0>
 801e4dc:	687b      	ldr	r3, [r7, #4]
 801e4de:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d004      	beq.n	801e4f0 <tcp_output+0x1d0>
 801e4e6:	687b      	ldr	r3, [r7, #4]
 801e4e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e4ec:	2b08      	cmp	r3, #8
 801e4ee:	d901      	bls.n	801e4f4 <tcp_output+0x1d4>
 801e4f0:	2301      	movs	r3, #1
 801e4f2:	e000      	b.n	801e4f6 <tcp_output+0x1d6>
 801e4f4:	2300      	movs	r3, #0
 801e4f6:	2b00      	cmp	r3, #0
 801e4f8:	d106      	bne.n	801e508 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801e4fa:	687b      	ldr	r3, [r7, #4]
 801e4fc:	8b5b      	ldrh	r3, [r3, #26]
 801e4fe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e502:	2b00      	cmp	r3, #0
 801e504:	f000 80e4 	beq.w	801e6d0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	7d1b      	ldrb	r3, [r3, #20]
 801e50c:	2b02      	cmp	r3, #2
 801e50e:	d00d      	beq.n	801e52c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801e510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e512:	68db      	ldr	r3, [r3, #12]
 801e514:	899b      	ldrh	r3, [r3, #12]
 801e516:	b29c      	uxth	r4, r3
 801e518:	2010      	movs	r0, #16
 801e51a:	f7f8 f993 	bl	8016844 <lwip_htons>
 801e51e:	4603      	mov	r3, r0
 801e520:	461a      	mov	r2, r3
 801e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e524:	68db      	ldr	r3, [r3, #12]
 801e526:	4322      	orrs	r2, r4
 801e528:	b292      	uxth	r2, r2
 801e52a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801e52c:	697a      	ldr	r2, [r7, #20]
 801e52e:	6879      	ldr	r1, [r7, #4]
 801e530:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e532:	f000 f909 	bl	801e748 <tcp_output_segment>
 801e536:	4603      	mov	r3, r0
 801e538:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801e53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e53e:	2b00      	cmp	r3, #0
 801e540:	d016      	beq.n	801e570 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	8b5b      	ldrh	r3, [r3, #26]
 801e546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e54a:	b29a      	uxth	r2, r3
 801e54c:	687b      	ldr	r3, [r7, #4]
 801e54e:	835a      	strh	r2, [r3, #26]
      return err;
 801e550:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e554:	e0d3      	b.n	801e6fe <tcp_output+0x3de>
 801e556:	bf00      	nop
 801e558:	0802c874 	.word	0x0802c874
 801e55c:	0802cdb8 	.word	0x0802cdb8
 801e560:	0802c8c8 	.word	0x0802c8c8
 801e564:	0802cdd0 	.word	0x0802cdd0
 801e568:	20016020 	.word	0x20016020
 801e56c:	0802cdf8 	.word	0x0802cdf8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801e570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e572:	681a      	ldr	r2, [r3, #0]
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	7d1b      	ldrb	r3, [r3, #20]
 801e57c:	2b02      	cmp	r3, #2
 801e57e:	d006      	beq.n	801e58e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	8b5b      	ldrh	r3, [r3, #26]
 801e584:	f023 0303 	bic.w	r3, r3, #3
 801e588:	b29a      	uxth	r2, r3
 801e58a:	687b      	ldr	r3, [r7, #4]
 801e58c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e590:	68db      	ldr	r3, [r3, #12]
 801e592:	685b      	ldr	r3, [r3, #4]
 801e594:	4618      	mov	r0, r3
 801e596:	f7f8 f96a 	bl	801686e <lwip_htonl>
 801e59a:	4604      	mov	r4, r0
 801e59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e59e:	891b      	ldrh	r3, [r3, #8]
 801e5a0:	461d      	mov	r5, r3
 801e5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5a4:	68db      	ldr	r3, [r3, #12]
 801e5a6:	899b      	ldrh	r3, [r3, #12]
 801e5a8:	b29b      	uxth	r3, r3
 801e5aa:	4618      	mov	r0, r3
 801e5ac:	f7f8 f94a 	bl	8016844 <lwip_htons>
 801e5b0:	4603      	mov	r3, r0
 801e5b2:	b2db      	uxtb	r3, r3
 801e5b4:	f003 0303 	and.w	r3, r3, #3
 801e5b8:	2b00      	cmp	r3, #0
 801e5ba:	d001      	beq.n	801e5c0 <tcp_output+0x2a0>
 801e5bc:	2301      	movs	r3, #1
 801e5be:	e000      	b.n	801e5c2 <tcp_output+0x2a2>
 801e5c0:	2300      	movs	r3, #0
 801e5c2:	442b      	add	r3, r5
 801e5c4:	4423      	add	r3, r4
 801e5c6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801e5cc:	68bb      	ldr	r3, [r7, #8]
 801e5ce:	1ad3      	subs	r3, r2, r3
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	da02      	bge.n	801e5da <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	68ba      	ldr	r2, [r7, #8]
 801e5d8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801e5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5dc:	891b      	ldrh	r3, [r3, #8]
 801e5de:	461c      	mov	r4, r3
 801e5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e5e2:	68db      	ldr	r3, [r3, #12]
 801e5e4:	899b      	ldrh	r3, [r3, #12]
 801e5e6:	b29b      	uxth	r3, r3
 801e5e8:	4618      	mov	r0, r3
 801e5ea:	f7f8 f92b 	bl	8016844 <lwip_htons>
 801e5ee:	4603      	mov	r3, r0
 801e5f0:	b2db      	uxtb	r3, r3
 801e5f2:	f003 0303 	and.w	r3, r3, #3
 801e5f6:	2b00      	cmp	r3, #0
 801e5f8:	d001      	beq.n	801e5fe <tcp_output+0x2de>
 801e5fa:	2301      	movs	r3, #1
 801e5fc:	e000      	b.n	801e600 <tcp_output+0x2e0>
 801e5fe:	2300      	movs	r3, #0
 801e600:	4423      	add	r3, r4
 801e602:	2b00      	cmp	r3, #0
 801e604:	d049      	beq.n	801e69a <tcp_output+0x37a>
      seg->next = NULL;
 801e606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e608:	2200      	movs	r2, #0
 801e60a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801e60c:	687b      	ldr	r3, [r7, #4]
 801e60e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e610:	2b00      	cmp	r3, #0
 801e612:	d105      	bne.n	801e620 <tcp_output+0x300>
        pcb->unacked = seg;
 801e614:	687b      	ldr	r3, [r7, #4]
 801e616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e618:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801e61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e61c:	623b      	str	r3, [r7, #32]
 801e61e:	e03f      	b.n	801e6a0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801e620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e622:	68db      	ldr	r3, [r3, #12]
 801e624:	685b      	ldr	r3, [r3, #4]
 801e626:	4618      	mov	r0, r3
 801e628:	f7f8 f921 	bl	801686e <lwip_htonl>
 801e62c:	4604      	mov	r4, r0
 801e62e:	6a3b      	ldr	r3, [r7, #32]
 801e630:	68db      	ldr	r3, [r3, #12]
 801e632:	685b      	ldr	r3, [r3, #4]
 801e634:	4618      	mov	r0, r3
 801e636:	f7f8 f91a 	bl	801686e <lwip_htonl>
 801e63a:	4603      	mov	r3, r0
 801e63c:	1ae3      	subs	r3, r4, r3
 801e63e:	2b00      	cmp	r3, #0
 801e640:	da24      	bge.n	801e68c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801e642:	687b      	ldr	r3, [r7, #4]
 801e644:	3370      	adds	r3, #112	; 0x70
 801e646:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e648:	e002      	b.n	801e650 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801e64a:	69fb      	ldr	r3, [r7, #28]
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801e650:	69fb      	ldr	r3, [r7, #28]
 801e652:	681b      	ldr	r3, [r3, #0]
 801e654:	2b00      	cmp	r3, #0
 801e656:	d011      	beq.n	801e67c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801e658:	69fb      	ldr	r3, [r7, #28]
 801e65a:	681b      	ldr	r3, [r3, #0]
 801e65c:	68db      	ldr	r3, [r3, #12]
 801e65e:	685b      	ldr	r3, [r3, #4]
 801e660:	4618      	mov	r0, r3
 801e662:	f7f8 f904 	bl	801686e <lwip_htonl>
 801e666:	4604      	mov	r4, r0
 801e668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e66a:	68db      	ldr	r3, [r3, #12]
 801e66c:	685b      	ldr	r3, [r3, #4]
 801e66e:	4618      	mov	r0, r3
 801e670:	f7f8 f8fd 	bl	801686e <lwip_htonl>
 801e674:	4603      	mov	r3, r0
 801e676:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801e678:	2b00      	cmp	r3, #0
 801e67a:	dbe6      	blt.n	801e64a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801e67c:	69fb      	ldr	r3, [r7, #28]
 801e67e:	681a      	ldr	r2, [r3, #0]
 801e680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e682:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801e684:	69fb      	ldr	r3, [r7, #28]
 801e686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e688:	601a      	str	r2, [r3, #0]
 801e68a:	e009      	b.n	801e6a0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801e68c:	6a3b      	ldr	r3, [r7, #32]
 801e68e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e690:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801e692:	6a3b      	ldr	r3, [r7, #32]
 801e694:	681b      	ldr	r3, [r3, #0]
 801e696:	623b      	str	r3, [r7, #32]
 801e698:	e002      	b.n	801e6a0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801e69a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e69c:	f7fb ff01 	bl	801a4a2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801e6a0:	687b      	ldr	r3, [r7, #4]
 801e6a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6a4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801e6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6a8:	2b00      	cmp	r3, #0
 801e6aa:	d012      	beq.n	801e6d2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801e6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e6ae:	68db      	ldr	r3, [r3, #12]
 801e6b0:	685b      	ldr	r3, [r3, #4]
 801e6b2:	4618      	mov	r0, r3
 801e6b4:	f7f8 f8db 	bl	801686e <lwip_htonl>
 801e6b8:	4602      	mov	r2, r0
 801e6ba:	687b      	ldr	r3, [r7, #4]
 801e6bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e6be:	1ad3      	subs	r3, r2, r3
 801e6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e6c2:	8912      	ldrh	r2, [r2, #8]
 801e6c4:	4413      	add	r3, r2
  while (seg != NULL &&
 801e6c6:	69ba      	ldr	r2, [r7, #24]
 801e6c8:	429a      	cmp	r2, r3
 801e6ca:	f4bf aed9 	bcs.w	801e480 <tcp_output+0x160>
 801e6ce:	e000      	b.n	801e6d2 <tcp_output+0x3b2>
      break;
 801e6d0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801e6d2:	687b      	ldr	r3, [r7, #4]
 801e6d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d108      	bne.n	801e6ec <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801e6da:	687b      	ldr	r3, [r7, #4]
 801e6dc:	2200      	movs	r2, #0
 801e6de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801e6e2:	e004      	b.n	801e6ee <tcp_output+0x3ce>
    goto output_done;
 801e6e4:	bf00      	nop
 801e6e6:	e002      	b.n	801e6ee <tcp_output+0x3ce>
    goto output_done;
 801e6e8:	bf00      	nop
 801e6ea:	e000      	b.n	801e6ee <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801e6ec:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	8b5b      	ldrh	r3, [r3, #26]
 801e6f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801e6f6:	b29a      	uxth	r2, r3
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801e6fc:	2300      	movs	r3, #0
}
 801e6fe:	4618      	mov	r0, r3
 801e700:	3728      	adds	r7, #40	; 0x28
 801e702:	46bd      	mov	sp, r7
 801e704:	bdb0      	pop	{r4, r5, r7, pc}
 801e706:	bf00      	nop

0801e708 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801e708:	b580      	push	{r7, lr}
 801e70a:	b082      	sub	sp, #8
 801e70c:	af00      	add	r7, sp, #0
 801e70e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801e710:	687b      	ldr	r3, [r7, #4]
 801e712:	2b00      	cmp	r3, #0
 801e714:	d106      	bne.n	801e724 <tcp_output_segment_busy+0x1c>
 801e716:	4b09      	ldr	r3, [pc, #36]	; (801e73c <tcp_output_segment_busy+0x34>)
 801e718:	f240 529a 	movw	r2, #1434	; 0x59a
 801e71c:	4908      	ldr	r1, [pc, #32]	; (801e740 <tcp_output_segment_busy+0x38>)
 801e71e:	4809      	ldr	r0, [pc, #36]	; (801e744 <tcp_output_segment_busy+0x3c>)
 801e720:	f006 fb4e 	bl	8024dc0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	685b      	ldr	r3, [r3, #4]
 801e728:	7b9b      	ldrb	r3, [r3, #14]
 801e72a:	2b01      	cmp	r3, #1
 801e72c:	d001      	beq.n	801e732 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801e72e:	2301      	movs	r3, #1
 801e730:	e000      	b.n	801e734 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801e732:	2300      	movs	r3, #0
}
 801e734:	4618      	mov	r0, r3
 801e736:	3708      	adds	r7, #8
 801e738:	46bd      	mov	sp, r7
 801e73a:	bd80      	pop	{r7, pc}
 801e73c:	0802c874 	.word	0x0802c874
 801e740:	0802ce10 	.word	0x0802ce10
 801e744:	0802c8c8 	.word	0x0802c8c8

0801e748 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801e748:	b5b0      	push	{r4, r5, r7, lr}
 801e74a:	b08c      	sub	sp, #48	; 0x30
 801e74c:	af04      	add	r7, sp, #16
 801e74e:	60f8      	str	r0, [r7, #12]
 801e750:	60b9      	str	r1, [r7, #8]
 801e752:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801e754:	68fb      	ldr	r3, [r7, #12]
 801e756:	2b00      	cmp	r3, #0
 801e758:	d106      	bne.n	801e768 <tcp_output_segment+0x20>
 801e75a:	4b64      	ldr	r3, [pc, #400]	; (801e8ec <tcp_output_segment+0x1a4>)
 801e75c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801e760:	4963      	ldr	r1, [pc, #396]	; (801e8f0 <tcp_output_segment+0x1a8>)
 801e762:	4864      	ldr	r0, [pc, #400]	; (801e8f4 <tcp_output_segment+0x1ac>)
 801e764:	f006 fb2c 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801e768:	68bb      	ldr	r3, [r7, #8]
 801e76a:	2b00      	cmp	r3, #0
 801e76c:	d106      	bne.n	801e77c <tcp_output_segment+0x34>
 801e76e:	4b5f      	ldr	r3, [pc, #380]	; (801e8ec <tcp_output_segment+0x1a4>)
 801e770:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801e774:	4960      	ldr	r1, [pc, #384]	; (801e8f8 <tcp_output_segment+0x1b0>)
 801e776:	485f      	ldr	r0, [pc, #380]	; (801e8f4 <tcp_output_segment+0x1ac>)
 801e778:	f006 fb22 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	2b00      	cmp	r3, #0
 801e780:	d106      	bne.n	801e790 <tcp_output_segment+0x48>
 801e782:	4b5a      	ldr	r3, [pc, #360]	; (801e8ec <tcp_output_segment+0x1a4>)
 801e784:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801e788:	495c      	ldr	r1, [pc, #368]	; (801e8fc <tcp_output_segment+0x1b4>)
 801e78a:	485a      	ldr	r0, [pc, #360]	; (801e8f4 <tcp_output_segment+0x1ac>)
 801e78c:	f006 fb18 	bl	8024dc0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801e790:	68f8      	ldr	r0, [r7, #12]
 801e792:	f7ff ffb9 	bl	801e708 <tcp_output_segment_busy>
 801e796:	4603      	mov	r3, r0
 801e798:	2b00      	cmp	r3, #0
 801e79a:	d001      	beq.n	801e7a0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801e79c:	2300      	movs	r3, #0
 801e79e:	e0a1      	b.n	801e8e4 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801e7a0:	68bb      	ldr	r3, [r7, #8]
 801e7a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801e7a4:	68fb      	ldr	r3, [r7, #12]
 801e7a6:	68dc      	ldr	r4, [r3, #12]
 801e7a8:	4610      	mov	r0, r2
 801e7aa:	f7f8 f860 	bl	801686e <lwip_htonl>
 801e7ae:	4603      	mov	r3, r0
 801e7b0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801e7b2:	68bb      	ldr	r3, [r7, #8]
 801e7b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801e7b6:	68fb      	ldr	r3, [r7, #12]
 801e7b8:	68dc      	ldr	r4, [r3, #12]
 801e7ba:	4610      	mov	r0, r2
 801e7bc:	f7f8 f842 	bl	8016844 <lwip_htons>
 801e7c0:	4603      	mov	r3, r0
 801e7c2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e7c4:	68bb      	ldr	r3, [r7, #8]
 801e7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e7c8:	68ba      	ldr	r2, [r7, #8]
 801e7ca:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801e7cc:	441a      	add	r2, r3
 801e7ce:	68bb      	ldr	r3, [r7, #8]
 801e7d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801e7d2:	68fb      	ldr	r3, [r7, #12]
 801e7d4:	68db      	ldr	r3, [r3, #12]
 801e7d6:	3314      	adds	r3, #20
 801e7d8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	7a9b      	ldrb	r3, [r3, #10]
 801e7de:	f003 0301 	and.w	r3, r3, #1
 801e7e2:	2b00      	cmp	r3, #0
 801e7e4:	d015      	beq.n	801e812 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801e7e6:	68bb      	ldr	r3, [r7, #8]
 801e7e8:	3304      	adds	r3, #4
 801e7ea:	461a      	mov	r2, r3
 801e7ec:	6879      	ldr	r1, [r7, #4]
 801e7ee:	f44f 7006 	mov.w	r0, #536	; 0x218
 801e7f2:	f7fc fa25 	bl	801ac40 <tcp_eff_send_mss_netif>
 801e7f6:	4603      	mov	r3, r0
 801e7f8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801e7fa:	8b7b      	ldrh	r3, [r7, #26]
 801e7fc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801e800:	4618      	mov	r0, r3
 801e802:	f7f8 f834 	bl	801686e <lwip_htonl>
 801e806:	4602      	mov	r2, r0
 801e808:	69fb      	ldr	r3, [r7, #28]
 801e80a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801e80c:	69fb      	ldr	r3, [r7, #28]
 801e80e:	3304      	adds	r3, #4
 801e810:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801e812:	68bb      	ldr	r3, [r7, #8]
 801e814:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801e818:	2b00      	cmp	r3, #0
 801e81a:	da02      	bge.n	801e822 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801e81c:	68bb      	ldr	r3, [r7, #8]
 801e81e:	2200      	movs	r2, #0
 801e820:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801e822:	68bb      	ldr	r3, [r7, #8]
 801e824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e826:	2b00      	cmp	r3, #0
 801e828:	d10c      	bne.n	801e844 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801e82a:	4b35      	ldr	r3, [pc, #212]	; (801e900 <tcp_output_segment+0x1b8>)
 801e82c:	681a      	ldr	r2, [r3, #0]
 801e82e:	68bb      	ldr	r3, [r7, #8]
 801e830:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801e832:	68fb      	ldr	r3, [r7, #12]
 801e834:	68db      	ldr	r3, [r3, #12]
 801e836:	685b      	ldr	r3, [r3, #4]
 801e838:	4618      	mov	r0, r3
 801e83a:	f7f8 f818 	bl	801686e <lwip_htonl>
 801e83e:	4602      	mov	r2, r0
 801e840:	68bb      	ldr	r3, [r7, #8]
 801e842:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801e844:	68fb      	ldr	r3, [r7, #12]
 801e846:	68da      	ldr	r2, [r3, #12]
 801e848:	68fb      	ldr	r3, [r7, #12]
 801e84a:	685b      	ldr	r3, [r3, #4]
 801e84c:	685b      	ldr	r3, [r3, #4]
 801e84e:	1ad3      	subs	r3, r2, r3
 801e850:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801e852:	68fb      	ldr	r3, [r7, #12]
 801e854:	685b      	ldr	r3, [r3, #4]
 801e856:	8959      	ldrh	r1, [r3, #10]
 801e858:	68fb      	ldr	r3, [r7, #12]
 801e85a:	685b      	ldr	r3, [r3, #4]
 801e85c:	8b3a      	ldrh	r2, [r7, #24]
 801e85e:	1a8a      	subs	r2, r1, r2
 801e860:	b292      	uxth	r2, r2
 801e862:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801e864:	68fb      	ldr	r3, [r7, #12]
 801e866:	685b      	ldr	r3, [r3, #4]
 801e868:	8919      	ldrh	r1, [r3, #8]
 801e86a:	68fb      	ldr	r3, [r7, #12]
 801e86c:	685b      	ldr	r3, [r3, #4]
 801e86e:	8b3a      	ldrh	r2, [r7, #24]
 801e870:	1a8a      	subs	r2, r1, r2
 801e872:	b292      	uxth	r2, r2
 801e874:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801e876:	68fb      	ldr	r3, [r7, #12]
 801e878:	685b      	ldr	r3, [r3, #4]
 801e87a:	68fa      	ldr	r2, [r7, #12]
 801e87c:	68d2      	ldr	r2, [r2, #12]
 801e87e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801e880:	68fb      	ldr	r3, [r7, #12]
 801e882:	68db      	ldr	r3, [r3, #12]
 801e884:	2200      	movs	r2, #0
 801e886:	741a      	strb	r2, [r3, #16]
 801e888:	2200      	movs	r2, #0
 801e88a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801e88c:	68fb      	ldr	r3, [r7, #12]
 801e88e:	68da      	ldr	r2, [r3, #12]
 801e890:	68fb      	ldr	r3, [r7, #12]
 801e892:	7a9b      	ldrb	r3, [r3, #10]
 801e894:	f003 0301 	and.w	r3, r3, #1
 801e898:	2b00      	cmp	r3, #0
 801e89a:	d001      	beq.n	801e8a0 <tcp_output_segment+0x158>
 801e89c:	2318      	movs	r3, #24
 801e89e:	e000      	b.n	801e8a2 <tcp_output_segment+0x15a>
 801e8a0:	2314      	movs	r3, #20
 801e8a2:	4413      	add	r3, r2
 801e8a4:	69fa      	ldr	r2, [r7, #28]
 801e8a6:	429a      	cmp	r2, r3
 801e8a8:	d006      	beq.n	801e8b8 <tcp_output_segment+0x170>
 801e8aa:	4b10      	ldr	r3, [pc, #64]	; (801e8ec <tcp_output_segment+0x1a4>)
 801e8ac:	f240 621c 	movw	r2, #1564	; 0x61c
 801e8b0:	4914      	ldr	r1, [pc, #80]	; (801e904 <tcp_output_segment+0x1bc>)
 801e8b2:	4810      	ldr	r0, [pc, #64]	; (801e8f4 <tcp_output_segment+0x1ac>)
 801e8b4:	f006 fa84 	bl	8024dc0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801e8b8:	68fb      	ldr	r3, [r7, #12]
 801e8ba:	6858      	ldr	r0, [r3, #4]
 801e8bc:	68b9      	ldr	r1, [r7, #8]
 801e8be:	68bb      	ldr	r3, [r7, #8]
 801e8c0:	1d1c      	adds	r4, r3, #4
 801e8c2:	68bb      	ldr	r3, [r7, #8]
 801e8c4:	7add      	ldrb	r5, [r3, #11]
 801e8c6:	68bb      	ldr	r3, [r7, #8]
 801e8c8:	7a9b      	ldrb	r3, [r3, #10]
 801e8ca:	687a      	ldr	r2, [r7, #4]
 801e8cc:	9202      	str	r2, [sp, #8]
 801e8ce:	2206      	movs	r2, #6
 801e8d0:	9201      	str	r2, [sp, #4]
 801e8d2:	9300      	str	r3, [sp, #0]
 801e8d4:	462b      	mov	r3, r5
 801e8d6:	4622      	mov	r2, r4
 801e8d8:	f002 fe42 	bl	8021560 <ip4_output_if>
 801e8dc:	4603      	mov	r3, r0
 801e8de:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801e8e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801e8e4:	4618      	mov	r0, r3
 801e8e6:	3720      	adds	r7, #32
 801e8e8:	46bd      	mov	sp, r7
 801e8ea:	bdb0      	pop	{r4, r5, r7, pc}
 801e8ec:	0802c874 	.word	0x0802c874
 801e8f0:	0802ce38 	.word	0x0802ce38
 801e8f4:	0802c8c8 	.word	0x0802c8c8
 801e8f8:	0802ce58 	.word	0x0802ce58
 801e8fc:	0802ce78 	.word	0x0802ce78
 801e900:	20015fd4 	.word	0x20015fd4
 801e904:	0802ce9c 	.word	0x0802ce9c

0801e908 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801e908:	b5b0      	push	{r4, r5, r7, lr}
 801e90a:	b084      	sub	sp, #16
 801e90c:	af00      	add	r7, sp, #0
 801e90e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	2b00      	cmp	r3, #0
 801e914:	d106      	bne.n	801e924 <tcp_rexmit_rto_prepare+0x1c>
 801e916:	4b31      	ldr	r3, [pc, #196]	; (801e9dc <tcp_rexmit_rto_prepare+0xd4>)
 801e918:	f240 6263 	movw	r2, #1635	; 0x663
 801e91c:	4930      	ldr	r1, [pc, #192]	; (801e9e0 <tcp_rexmit_rto_prepare+0xd8>)
 801e91e:	4831      	ldr	r0, [pc, #196]	; (801e9e4 <tcp_rexmit_rto_prepare+0xdc>)
 801e920:	f006 fa4e 	bl	8024dc0 <iprintf>

  if (pcb->unacked == NULL) {
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e928:	2b00      	cmp	r3, #0
 801e92a:	d102      	bne.n	801e932 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801e92c:	f06f 0305 	mvn.w	r3, #5
 801e930:	e050      	b.n	801e9d4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e936:	60fb      	str	r3, [r7, #12]
 801e938:	e00b      	b.n	801e952 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801e93a:	68f8      	ldr	r0, [r7, #12]
 801e93c:	f7ff fee4 	bl	801e708 <tcp_output_segment_busy>
 801e940:	4603      	mov	r3, r0
 801e942:	2b00      	cmp	r3, #0
 801e944:	d002      	beq.n	801e94c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801e946:	f06f 0305 	mvn.w	r3, #5
 801e94a:	e043      	b.n	801e9d4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801e94c:	68fb      	ldr	r3, [r7, #12]
 801e94e:	681b      	ldr	r3, [r3, #0]
 801e950:	60fb      	str	r3, [r7, #12]
 801e952:	68fb      	ldr	r3, [r7, #12]
 801e954:	681b      	ldr	r3, [r3, #0]
 801e956:	2b00      	cmp	r3, #0
 801e958:	d1ef      	bne.n	801e93a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801e95a:	68f8      	ldr	r0, [r7, #12]
 801e95c:	f7ff fed4 	bl	801e708 <tcp_output_segment_busy>
 801e960:	4603      	mov	r3, r0
 801e962:	2b00      	cmp	r3, #0
 801e964:	d002      	beq.n	801e96c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801e966:	f06f 0305 	mvn.w	r3, #5
 801e96a:	e033      	b.n	801e9d4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801e96c:	687b      	ldr	r3, [r7, #4]
 801e96e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801e970:	68fb      	ldr	r3, [r7, #12]
 801e972:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801e97c:	687b      	ldr	r3, [r7, #4]
 801e97e:	2200      	movs	r2, #0
 801e980:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	8b5b      	ldrh	r3, [r3, #26]
 801e986:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801e98a:	b29a      	uxth	r2, r3
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801e990:	68fb      	ldr	r3, [r7, #12]
 801e992:	68db      	ldr	r3, [r3, #12]
 801e994:	685b      	ldr	r3, [r3, #4]
 801e996:	4618      	mov	r0, r3
 801e998:	f7f7 ff69 	bl	801686e <lwip_htonl>
 801e99c:	4604      	mov	r4, r0
 801e99e:	68fb      	ldr	r3, [r7, #12]
 801e9a0:	891b      	ldrh	r3, [r3, #8]
 801e9a2:	461d      	mov	r5, r3
 801e9a4:	68fb      	ldr	r3, [r7, #12]
 801e9a6:	68db      	ldr	r3, [r3, #12]
 801e9a8:	899b      	ldrh	r3, [r3, #12]
 801e9aa:	b29b      	uxth	r3, r3
 801e9ac:	4618      	mov	r0, r3
 801e9ae:	f7f7 ff49 	bl	8016844 <lwip_htons>
 801e9b2:	4603      	mov	r3, r0
 801e9b4:	b2db      	uxtb	r3, r3
 801e9b6:	f003 0303 	and.w	r3, r3, #3
 801e9ba:	2b00      	cmp	r3, #0
 801e9bc:	d001      	beq.n	801e9c2 <tcp_rexmit_rto_prepare+0xba>
 801e9be:	2301      	movs	r3, #1
 801e9c0:	e000      	b.n	801e9c4 <tcp_rexmit_rto_prepare+0xbc>
 801e9c2:	2300      	movs	r3, #0
 801e9c4:	442b      	add	r3, r5
 801e9c6:	18e2      	adds	r2, r4, r3
 801e9c8:	687b      	ldr	r3, [r7, #4]
 801e9ca:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	2200      	movs	r2, #0
 801e9d0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801e9d2:	2300      	movs	r3, #0
}
 801e9d4:	4618      	mov	r0, r3
 801e9d6:	3710      	adds	r7, #16
 801e9d8:	46bd      	mov	sp, r7
 801e9da:	bdb0      	pop	{r4, r5, r7, pc}
 801e9dc:	0802c874 	.word	0x0802c874
 801e9e0:	0802ceb0 	.word	0x0802ceb0
 801e9e4:	0802c8c8 	.word	0x0802c8c8

0801e9e8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801e9e8:	b580      	push	{r7, lr}
 801e9ea:	b082      	sub	sp, #8
 801e9ec:	af00      	add	r7, sp, #0
 801e9ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	d106      	bne.n	801ea04 <tcp_rexmit_rto_commit+0x1c>
 801e9f6:	4b0d      	ldr	r3, [pc, #52]	; (801ea2c <tcp_rexmit_rto_commit+0x44>)
 801e9f8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801e9fc:	490c      	ldr	r1, [pc, #48]	; (801ea30 <tcp_rexmit_rto_commit+0x48>)
 801e9fe:	480d      	ldr	r0, [pc, #52]	; (801ea34 <tcp_rexmit_rto_commit+0x4c>)
 801ea00:	f006 f9de 	bl	8024dc0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801ea04:	687b      	ldr	r3, [r7, #4]
 801ea06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ea0a:	2bff      	cmp	r3, #255	; 0xff
 801ea0c:	d007      	beq.n	801ea1e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801ea0e:	687b      	ldr	r3, [r7, #4]
 801ea10:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ea14:	3301      	adds	r3, #1
 801ea16:	b2da      	uxtb	r2, r3
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801ea1e:	6878      	ldr	r0, [r7, #4]
 801ea20:	f7ff fc7e 	bl	801e320 <tcp_output>
}
 801ea24:	bf00      	nop
 801ea26:	3708      	adds	r7, #8
 801ea28:	46bd      	mov	sp, r7
 801ea2a:	bd80      	pop	{r7, pc}
 801ea2c:	0802c874 	.word	0x0802c874
 801ea30:	0802ced4 	.word	0x0802ced4
 801ea34:	0802c8c8 	.word	0x0802c8c8

0801ea38 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801ea38:	b580      	push	{r7, lr}
 801ea3a:	b082      	sub	sp, #8
 801ea3c:	af00      	add	r7, sp, #0
 801ea3e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801ea40:	687b      	ldr	r3, [r7, #4]
 801ea42:	2b00      	cmp	r3, #0
 801ea44:	d106      	bne.n	801ea54 <tcp_rexmit_rto+0x1c>
 801ea46:	4b0a      	ldr	r3, [pc, #40]	; (801ea70 <tcp_rexmit_rto+0x38>)
 801ea48:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801ea4c:	4909      	ldr	r1, [pc, #36]	; (801ea74 <tcp_rexmit_rto+0x3c>)
 801ea4e:	480a      	ldr	r0, [pc, #40]	; (801ea78 <tcp_rexmit_rto+0x40>)
 801ea50:	f006 f9b6 	bl	8024dc0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801ea54:	6878      	ldr	r0, [r7, #4]
 801ea56:	f7ff ff57 	bl	801e908 <tcp_rexmit_rto_prepare>
 801ea5a:	4603      	mov	r3, r0
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d102      	bne.n	801ea66 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801ea60:	6878      	ldr	r0, [r7, #4]
 801ea62:	f7ff ffc1 	bl	801e9e8 <tcp_rexmit_rto_commit>
  }
}
 801ea66:	bf00      	nop
 801ea68:	3708      	adds	r7, #8
 801ea6a:	46bd      	mov	sp, r7
 801ea6c:	bd80      	pop	{r7, pc}
 801ea6e:	bf00      	nop
 801ea70:	0802c874 	.word	0x0802c874
 801ea74:	0802cef8 	.word	0x0802cef8
 801ea78:	0802c8c8 	.word	0x0802c8c8

0801ea7c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801ea7c:	b590      	push	{r4, r7, lr}
 801ea7e:	b085      	sub	sp, #20
 801ea80:	af00      	add	r7, sp, #0
 801ea82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	2b00      	cmp	r3, #0
 801ea88:	d106      	bne.n	801ea98 <tcp_rexmit+0x1c>
 801ea8a:	4b2f      	ldr	r3, [pc, #188]	; (801eb48 <tcp_rexmit+0xcc>)
 801ea8c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801ea90:	492e      	ldr	r1, [pc, #184]	; (801eb4c <tcp_rexmit+0xd0>)
 801ea92:	482f      	ldr	r0, [pc, #188]	; (801eb50 <tcp_rexmit+0xd4>)
 801ea94:	f006 f994 	bl	8024dc0 <iprintf>

  if (pcb->unacked == NULL) {
 801ea98:	687b      	ldr	r3, [r7, #4]
 801ea9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ea9c:	2b00      	cmp	r3, #0
 801ea9e:	d102      	bne.n	801eaa6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801eaa0:	f06f 0305 	mvn.w	r3, #5
 801eaa4:	e04c      	b.n	801eb40 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801eaa6:	687b      	ldr	r3, [r7, #4]
 801eaa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eaaa:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801eaac:	68b8      	ldr	r0, [r7, #8]
 801eaae:	f7ff fe2b 	bl	801e708 <tcp_output_segment_busy>
 801eab2:	4603      	mov	r3, r0
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	d002      	beq.n	801eabe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801eab8:	f06f 0305 	mvn.w	r3, #5
 801eabc:	e040      	b.n	801eb40 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801eabe:	68bb      	ldr	r3, [r7, #8]
 801eac0:	681a      	ldr	r2, [r3, #0]
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	336c      	adds	r3, #108	; 0x6c
 801eaca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801eacc:	e002      	b.n	801ead4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801eace:	68fb      	ldr	r3, [r7, #12]
 801ead0:	681b      	ldr	r3, [r3, #0]
 801ead2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ead4:	68fb      	ldr	r3, [r7, #12]
 801ead6:	681b      	ldr	r3, [r3, #0]
 801ead8:	2b00      	cmp	r3, #0
 801eada:	d011      	beq.n	801eb00 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801eadc:	68fb      	ldr	r3, [r7, #12]
 801eade:	681b      	ldr	r3, [r3, #0]
 801eae0:	68db      	ldr	r3, [r3, #12]
 801eae2:	685b      	ldr	r3, [r3, #4]
 801eae4:	4618      	mov	r0, r3
 801eae6:	f7f7 fec2 	bl	801686e <lwip_htonl>
 801eaea:	4604      	mov	r4, r0
 801eaec:	68bb      	ldr	r3, [r7, #8]
 801eaee:	68db      	ldr	r3, [r3, #12]
 801eaf0:	685b      	ldr	r3, [r3, #4]
 801eaf2:	4618      	mov	r0, r3
 801eaf4:	f7f7 febb 	bl	801686e <lwip_htonl>
 801eaf8:	4603      	mov	r3, r0
 801eafa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	dbe6      	blt.n	801eace <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801eb00:	68fb      	ldr	r3, [r7, #12]
 801eb02:	681a      	ldr	r2, [r3, #0]
 801eb04:	68bb      	ldr	r3, [r7, #8]
 801eb06:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801eb08:	68fb      	ldr	r3, [r7, #12]
 801eb0a:	68ba      	ldr	r2, [r7, #8]
 801eb0c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801eb0e:	68bb      	ldr	r3, [r7, #8]
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d103      	bne.n	801eb1e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801eb16:	687b      	ldr	r3, [r7, #4]
 801eb18:	2200      	movs	r2, #0
 801eb1a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eb24:	2bff      	cmp	r3, #255	; 0xff
 801eb26:	d007      	beq.n	801eb38 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eb2e:	3301      	adds	r3, #1
 801eb30:	b2da      	uxtb	r2, r3
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801eb38:	687b      	ldr	r3, [r7, #4]
 801eb3a:	2200      	movs	r2, #0
 801eb3c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801eb3e:	2300      	movs	r3, #0
}
 801eb40:	4618      	mov	r0, r3
 801eb42:	3714      	adds	r7, #20
 801eb44:	46bd      	mov	sp, r7
 801eb46:	bd90      	pop	{r4, r7, pc}
 801eb48:	0802c874 	.word	0x0802c874
 801eb4c:	0802cf14 	.word	0x0802cf14
 801eb50:	0802c8c8 	.word	0x0802c8c8

0801eb54 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801eb54:	b580      	push	{r7, lr}
 801eb56:	b082      	sub	sp, #8
 801eb58:	af00      	add	r7, sp, #0
 801eb5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801eb5c:	687b      	ldr	r3, [r7, #4]
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	d106      	bne.n	801eb70 <tcp_rexmit_fast+0x1c>
 801eb62:	4b2a      	ldr	r3, [pc, #168]	; (801ec0c <tcp_rexmit_fast+0xb8>)
 801eb64:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801eb68:	4929      	ldr	r1, [pc, #164]	; (801ec10 <tcp_rexmit_fast+0xbc>)
 801eb6a:	482a      	ldr	r0, [pc, #168]	; (801ec14 <tcp_rexmit_fast+0xc0>)
 801eb6c:	f006 f928 	bl	8024dc0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d044      	beq.n	801ec02 <tcp_rexmit_fast+0xae>
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	8b5b      	ldrh	r3, [r3, #26]
 801eb7c:	f003 0304 	and.w	r3, r3, #4
 801eb80:	2b00      	cmp	r3, #0
 801eb82:	d13e      	bne.n	801ec02 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801eb84:	6878      	ldr	r0, [r7, #4]
 801eb86:	f7ff ff79 	bl	801ea7c <tcp_rexmit>
 801eb8a:	4603      	mov	r3, r0
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d138      	bne.n	801ec02 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801eb96:	687b      	ldr	r3, [r7, #4]
 801eb98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801eb9c:	4293      	cmp	r3, r2
 801eb9e:	bf28      	it	cs
 801eba0:	4613      	movcs	r3, r2
 801eba2:	b29b      	uxth	r3, r3
 801eba4:	0fda      	lsrs	r2, r3, #31
 801eba6:	4413      	add	r3, r2
 801eba8:	105b      	asrs	r3, r3, #1
 801ebaa:	b29a      	uxth	r2, r3
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ebb2:	687b      	ldr	r3, [r7, #4]
 801ebb4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801ebb8:	461a      	mov	r2, r3
 801ebba:	687b      	ldr	r3, [r7, #4]
 801ebbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ebbe:	005b      	lsls	r3, r3, #1
 801ebc0:	429a      	cmp	r2, r3
 801ebc2:	d206      	bcs.n	801ebd2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ebc8:	005b      	lsls	r3, r3, #1
 801ebca:	b29a      	uxth	r2, r3
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ebdc:	4619      	mov	r1, r3
 801ebde:	0049      	lsls	r1, r1, #1
 801ebe0:	440b      	add	r3, r1
 801ebe2:	b29b      	uxth	r3, r3
 801ebe4:	4413      	add	r3, r2
 801ebe6:	b29a      	uxth	r2, r3
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	8b5b      	ldrh	r3, [r3, #26]
 801ebf2:	f043 0304 	orr.w	r3, r3, #4
 801ebf6:	b29a      	uxth	r2, r3
 801ebf8:	687b      	ldr	r3, [r7, #4]
 801ebfa:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	2200      	movs	r2, #0
 801ec00:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801ec02:	bf00      	nop
 801ec04:	3708      	adds	r7, #8
 801ec06:	46bd      	mov	sp, r7
 801ec08:	bd80      	pop	{r7, pc}
 801ec0a:	bf00      	nop
 801ec0c:	0802c874 	.word	0x0802c874
 801ec10:	0802cf2c 	.word	0x0802cf2c
 801ec14:	0802c8c8 	.word	0x0802c8c8

0801ec18 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801ec18:	b580      	push	{r7, lr}
 801ec1a:	b086      	sub	sp, #24
 801ec1c:	af00      	add	r7, sp, #0
 801ec1e:	60f8      	str	r0, [r7, #12]
 801ec20:	607b      	str	r3, [r7, #4]
 801ec22:	460b      	mov	r3, r1
 801ec24:	817b      	strh	r3, [r7, #10]
 801ec26:	4613      	mov	r3, r2
 801ec28:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801ec2a:	897a      	ldrh	r2, [r7, #10]
 801ec2c:	893b      	ldrh	r3, [r7, #8]
 801ec2e:	4413      	add	r3, r2
 801ec30:	b29b      	uxth	r3, r3
 801ec32:	3314      	adds	r3, #20
 801ec34:	b29b      	uxth	r3, r3
 801ec36:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ec3a:	4619      	mov	r1, r3
 801ec3c:	2022      	movs	r0, #34	; 0x22
 801ec3e:	f7f9 f9d9 	bl	8017ff4 <pbuf_alloc>
 801ec42:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801ec44:	697b      	ldr	r3, [r7, #20]
 801ec46:	2b00      	cmp	r3, #0
 801ec48:	d04d      	beq.n	801ece6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801ec4a:	897b      	ldrh	r3, [r7, #10]
 801ec4c:	3313      	adds	r3, #19
 801ec4e:	697a      	ldr	r2, [r7, #20]
 801ec50:	8952      	ldrh	r2, [r2, #10]
 801ec52:	4293      	cmp	r3, r2
 801ec54:	db06      	blt.n	801ec64 <tcp_output_alloc_header_common+0x4c>
 801ec56:	4b26      	ldr	r3, [pc, #152]	; (801ecf0 <tcp_output_alloc_header_common+0xd8>)
 801ec58:	f240 7223 	movw	r2, #1827	; 0x723
 801ec5c:	4925      	ldr	r1, [pc, #148]	; (801ecf4 <tcp_output_alloc_header_common+0xdc>)
 801ec5e:	4826      	ldr	r0, [pc, #152]	; (801ecf8 <tcp_output_alloc_header_common+0xe0>)
 801ec60:	f006 f8ae 	bl	8024dc0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801ec64:	697b      	ldr	r3, [r7, #20]
 801ec66:	685b      	ldr	r3, [r3, #4]
 801ec68:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801ec6a:	8c3b      	ldrh	r3, [r7, #32]
 801ec6c:	4618      	mov	r0, r3
 801ec6e:	f7f7 fde9 	bl	8016844 <lwip_htons>
 801ec72:	4603      	mov	r3, r0
 801ec74:	461a      	mov	r2, r3
 801ec76:	693b      	ldr	r3, [r7, #16]
 801ec78:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801ec7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ec7c:	4618      	mov	r0, r3
 801ec7e:	f7f7 fde1 	bl	8016844 <lwip_htons>
 801ec82:	4603      	mov	r3, r0
 801ec84:	461a      	mov	r2, r3
 801ec86:	693b      	ldr	r3, [r7, #16]
 801ec88:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801ec8a:	693b      	ldr	r3, [r7, #16]
 801ec8c:	687a      	ldr	r2, [r7, #4]
 801ec8e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801ec90:	68f8      	ldr	r0, [r7, #12]
 801ec92:	f7f7 fdec 	bl	801686e <lwip_htonl>
 801ec96:	4602      	mov	r2, r0
 801ec98:	693b      	ldr	r3, [r7, #16]
 801ec9a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801ec9c:	897b      	ldrh	r3, [r7, #10]
 801ec9e:	089b      	lsrs	r3, r3, #2
 801eca0:	b29b      	uxth	r3, r3
 801eca2:	3305      	adds	r3, #5
 801eca4:	b29b      	uxth	r3, r3
 801eca6:	031b      	lsls	r3, r3, #12
 801eca8:	b29a      	uxth	r2, r3
 801ecaa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801ecae:	b29b      	uxth	r3, r3
 801ecb0:	4313      	orrs	r3, r2
 801ecb2:	b29b      	uxth	r3, r3
 801ecb4:	4618      	mov	r0, r3
 801ecb6:	f7f7 fdc5 	bl	8016844 <lwip_htons>
 801ecba:	4603      	mov	r3, r0
 801ecbc:	461a      	mov	r2, r3
 801ecbe:	693b      	ldr	r3, [r7, #16]
 801ecc0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801ecc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801ecc4:	4618      	mov	r0, r3
 801ecc6:	f7f7 fdbd 	bl	8016844 <lwip_htons>
 801ecca:	4603      	mov	r3, r0
 801eccc:	461a      	mov	r2, r3
 801ecce:	693b      	ldr	r3, [r7, #16]
 801ecd0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801ecd2:	693b      	ldr	r3, [r7, #16]
 801ecd4:	2200      	movs	r2, #0
 801ecd6:	741a      	strb	r2, [r3, #16]
 801ecd8:	2200      	movs	r2, #0
 801ecda:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801ecdc:	693b      	ldr	r3, [r7, #16]
 801ecde:	2200      	movs	r2, #0
 801ece0:	749a      	strb	r2, [r3, #18]
 801ece2:	2200      	movs	r2, #0
 801ece4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801ece6:	697b      	ldr	r3, [r7, #20]
}
 801ece8:	4618      	mov	r0, r3
 801ecea:	3718      	adds	r7, #24
 801ecec:	46bd      	mov	sp, r7
 801ecee:	bd80      	pop	{r7, pc}
 801ecf0:	0802c874 	.word	0x0802c874
 801ecf4:	0802cf4c 	.word	0x0802cf4c
 801ecf8:	0802c8c8 	.word	0x0802c8c8

0801ecfc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801ecfc:	b5b0      	push	{r4, r5, r7, lr}
 801ecfe:	b08a      	sub	sp, #40	; 0x28
 801ed00:	af04      	add	r7, sp, #16
 801ed02:	60f8      	str	r0, [r7, #12]
 801ed04:	607b      	str	r3, [r7, #4]
 801ed06:	460b      	mov	r3, r1
 801ed08:	817b      	strh	r3, [r7, #10]
 801ed0a:	4613      	mov	r3, r2
 801ed0c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801ed0e:	68fb      	ldr	r3, [r7, #12]
 801ed10:	2b00      	cmp	r3, #0
 801ed12:	d106      	bne.n	801ed22 <tcp_output_alloc_header+0x26>
 801ed14:	4b15      	ldr	r3, [pc, #84]	; (801ed6c <tcp_output_alloc_header+0x70>)
 801ed16:	f240 7242 	movw	r2, #1858	; 0x742
 801ed1a:	4915      	ldr	r1, [pc, #84]	; (801ed70 <tcp_output_alloc_header+0x74>)
 801ed1c:	4815      	ldr	r0, [pc, #84]	; (801ed74 <tcp_output_alloc_header+0x78>)
 801ed1e:	f006 f84f 	bl	8024dc0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801ed22:	68fb      	ldr	r3, [r7, #12]
 801ed24:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801ed26:	68fb      	ldr	r3, [r7, #12]
 801ed28:	8adb      	ldrh	r3, [r3, #22]
 801ed2a:	68fa      	ldr	r2, [r7, #12]
 801ed2c:	8b12      	ldrh	r2, [r2, #24]
 801ed2e:	68f9      	ldr	r1, [r7, #12]
 801ed30:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801ed32:	893d      	ldrh	r5, [r7, #8]
 801ed34:	897c      	ldrh	r4, [r7, #10]
 801ed36:	9103      	str	r1, [sp, #12]
 801ed38:	2110      	movs	r1, #16
 801ed3a:	9102      	str	r1, [sp, #8]
 801ed3c:	9201      	str	r2, [sp, #4]
 801ed3e:	9300      	str	r3, [sp, #0]
 801ed40:	687b      	ldr	r3, [r7, #4]
 801ed42:	462a      	mov	r2, r5
 801ed44:	4621      	mov	r1, r4
 801ed46:	f7ff ff67 	bl	801ec18 <tcp_output_alloc_header_common>
 801ed4a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801ed4c:	697b      	ldr	r3, [r7, #20]
 801ed4e:	2b00      	cmp	r3, #0
 801ed50:	d006      	beq.n	801ed60 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ed52:	68fb      	ldr	r3, [r7, #12]
 801ed54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ed56:	68fa      	ldr	r2, [r7, #12]
 801ed58:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ed5a:	441a      	add	r2, r3
 801ed5c:	68fb      	ldr	r3, [r7, #12]
 801ed5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801ed60:	697b      	ldr	r3, [r7, #20]
}
 801ed62:	4618      	mov	r0, r3
 801ed64:	3718      	adds	r7, #24
 801ed66:	46bd      	mov	sp, r7
 801ed68:	bdb0      	pop	{r4, r5, r7, pc}
 801ed6a:	bf00      	nop
 801ed6c:	0802c874 	.word	0x0802c874
 801ed70:	0802cf7c 	.word	0x0802cf7c
 801ed74:	0802c8c8 	.word	0x0802c8c8

0801ed78 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801ed78:	b580      	push	{r7, lr}
 801ed7a:	b088      	sub	sp, #32
 801ed7c:	af00      	add	r7, sp, #0
 801ed7e:	60f8      	str	r0, [r7, #12]
 801ed80:	60b9      	str	r1, [r7, #8]
 801ed82:	4611      	mov	r1, r2
 801ed84:	461a      	mov	r2, r3
 801ed86:	460b      	mov	r3, r1
 801ed88:	71fb      	strb	r3, [r7, #7]
 801ed8a:	4613      	mov	r3, r2
 801ed8c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801ed8e:	2300      	movs	r3, #0
 801ed90:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801ed92:	68bb      	ldr	r3, [r7, #8]
 801ed94:	2b00      	cmp	r3, #0
 801ed96:	d106      	bne.n	801eda6 <tcp_output_fill_options+0x2e>
 801ed98:	4b12      	ldr	r3, [pc, #72]	; (801ede4 <tcp_output_fill_options+0x6c>)
 801ed9a:	f240 7256 	movw	r2, #1878	; 0x756
 801ed9e:	4912      	ldr	r1, [pc, #72]	; (801ede8 <tcp_output_fill_options+0x70>)
 801eda0:	4812      	ldr	r0, [pc, #72]	; (801edec <tcp_output_fill_options+0x74>)
 801eda2:	f006 f80d 	bl	8024dc0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801eda6:	68bb      	ldr	r3, [r7, #8]
 801eda8:	685b      	ldr	r3, [r3, #4]
 801edaa:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801edac:	69bb      	ldr	r3, [r7, #24]
 801edae:	3314      	adds	r3, #20
 801edb0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801edb2:	8bfb      	ldrh	r3, [r7, #30]
 801edb4:	009b      	lsls	r3, r3, #2
 801edb6:	461a      	mov	r2, r3
 801edb8:	79fb      	ldrb	r3, [r7, #7]
 801edba:	009b      	lsls	r3, r3, #2
 801edbc:	f003 0304 	and.w	r3, r3, #4
 801edc0:	4413      	add	r3, r2
 801edc2:	3314      	adds	r3, #20
 801edc4:	69ba      	ldr	r2, [r7, #24]
 801edc6:	4413      	add	r3, r2
 801edc8:	697a      	ldr	r2, [r7, #20]
 801edca:	429a      	cmp	r2, r3
 801edcc:	d006      	beq.n	801eddc <tcp_output_fill_options+0x64>
 801edce:	4b05      	ldr	r3, [pc, #20]	; (801ede4 <tcp_output_fill_options+0x6c>)
 801edd0:	f240 7275 	movw	r2, #1909	; 0x775
 801edd4:	4906      	ldr	r1, [pc, #24]	; (801edf0 <tcp_output_fill_options+0x78>)
 801edd6:	4805      	ldr	r0, [pc, #20]	; (801edec <tcp_output_fill_options+0x74>)
 801edd8:	f005 fff2 	bl	8024dc0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801eddc:	bf00      	nop
 801edde:	3720      	adds	r7, #32
 801ede0:	46bd      	mov	sp, r7
 801ede2:	bd80      	pop	{r7, pc}
 801ede4:	0802c874 	.word	0x0802c874
 801ede8:	0802cfa4 	.word	0x0802cfa4
 801edec:	0802c8c8 	.word	0x0802c8c8
 801edf0:	0802ce9c 	.word	0x0802ce9c

0801edf4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801edf4:	b580      	push	{r7, lr}
 801edf6:	b08a      	sub	sp, #40	; 0x28
 801edf8:	af04      	add	r7, sp, #16
 801edfa:	60f8      	str	r0, [r7, #12]
 801edfc:	60b9      	str	r1, [r7, #8]
 801edfe:	607a      	str	r2, [r7, #4]
 801ee00:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801ee02:	68bb      	ldr	r3, [r7, #8]
 801ee04:	2b00      	cmp	r3, #0
 801ee06:	d106      	bne.n	801ee16 <tcp_output_control_segment+0x22>
 801ee08:	4b1c      	ldr	r3, [pc, #112]	; (801ee7c <tcp_output_control_segment+0x88>)
 801ee0a:	f240 7287 	movw	r2, #1927	; 0x787
 801ee0e:	491c      	ldr	r1, [pc, #112]	; (801ee80 <tcp_output_control_segment+0x8c>)
 801ee10:	481c      	ldr	r0, [pc, #112]	; (801ee84 <tcp_output_control_segment+0x90>)
 801ee12:	f005 ffd5 	bl	8024dc0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801ee16:	683a      	ldr	r2, [r7, #0]
 801ee18:	6879      	ldr	r1, [r7, #4]
 801ee1a:	68f8      	ldr	r0, [r7, #12]
 801ee1c:	f7fe fae8 	bl	801d3f0 <tcp_route>
 801ee20:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801ee22:	693b      	ldr	r3, [r7, #16]
 801ee24:	2b00      	cmp	r3, #0
 801ee26:	d102      	bne.n	801ee2e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801ee28:	23fc      	movs	r3, #252	; 0xfc
 801ee2a:	75fb      	strb	r3, [r7, #23]
 801ee2c:	e01c      	b.n	801ee68 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801ee2e:	68fb      	ldr	r3, [r7, #12]
 801ee30:	2b00      	cmp	r3, #0
 801ee32:	d006      	beq.n	801ee42 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801ee34:	68fb      	ldr	r3, [r7, #12]
 801ee36:	7adb      	ldrb	r3, [r3, #11]
 801ee38:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801ee3a:	68fb      	ldr	r3, [r7, #12]
 801ee3c:	7a9b      	ldrb	r3, [r3, #10]
 801ee3e:	757b      	strb	r3, [r7, #21]
 801ee40:	e003      	b.n	801ee4a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801ee42:	23ff      	movs	r3, #255	; 0xff
 801ee44:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801ee46:	2300      	movs	r3, #0
 801ee48:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801ee4a:	7dba      	ldrb	r2, [r7, #22]
 801ee4c:	693b      	ldr	r3, [r7, #16]
 801ee4e:	9302      	str	r3, [sp, #8]
 801ee50:	2306      	movs	r3, #6
 801ee52:	9301      	str	r3, [sp, #4]
 801ee54:	7d7b      	ldrb	r3, [r7, #21]
 801ee56:	9300      	str	r3, [sp, #0]
 801ee58:	4613      	mov	r3, r2
 801ee5a:	683a      	ldr	r2, [r7, #0]
 801ee5c:	6879      	ldr	r1, [r7, #4]
 801ee5e:	68b8      	ldr	r0, [r7, #8]
 801ee60:	f002 fb7e 	bl	8021560 <ip4_output_if>
 801ee64:	4603      	mov	r3, r0
 801ee66:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801ee68:	68b8      	ldr	r0, [r7, #8]
 801ee6a:	f7f9 fba7 	bl	80185bc <pbuf_free>
  return err;
 801ee6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ee72:	4618      	mov	r0, r3
 801ee74:	3718      	adds	r7, #24
 801ee76:	46bd      	mov	sp, r7
 801ee78:	bd80      	pop	{r7, pc}
 801ee7a:	bf00      	nop
 801ee7c:	0802c874 	.word	0x0802c874
 801ee80:	0802cfcc 	.word	0x0802cfcc
 801ee84:	0802c8c8 	.word	0x0802c8c8

0801ee88 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ee88:	b590      	push	{r4, r7, lr}
 801ee8a:	b08b      	sub	sp, #44	; 0x2c
 801ee8c:	af04      	add	r7, sp, #16
 801ee8e:	60f8      	str	r0, [r7, #12]
 801ee90:	60b9      	str	r1, [r7, #8]
 801ee92:	607a      	str	r2, [r7, #4]
 801ee94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ee96:	683b      	ldr	r3, [r7, #0]
 801ee98:	2b00      	cmp	r3, #0
 801ee9a:	d106      	bne.n	801eeaa <tcp_rst+0x22>
 801ee9c:	4b1f      	ldr	r3, [pc, #124]	; (801ef1c <tcp_rst+0x94>)
 801ee9e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801eea2:	491f      	ldr	r1, [pc, #124]	; (801ef20 <tcp_rst+0x98>)
 801eea4:	481f      	ldr	r0, [pc, #124]	; (801ef24 <tcp_rst+0x9c>)
 801eea6:	f005 ff8b 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801eeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eeac:	2b00      	cmp	r3, #0
 801eeae:	d106      	bne.n	801eebe <tcp_rst+0x36>
 801eeb0:	4b1a      	ldr	r3, [pc, #104]	; (801ef1c <tcp_rst+0x94>)
 801eeb2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801eeb6:	491c      	ldr	r1, [pc, #112]	; (801ef28 <tcp_rst+0xa0>)
 801eeb8:	481a      	ldr	r0, [pc, #104]	; (801ef24 <tcp_rst+0x9c>)
 801eeba:	f005 ff81 	bl	8024dc0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801eebe:	2300      	movs	r3, #0
 801eec0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801eec2:	f246 0308 	movw	r3, #24584	; 0x6008
 801eec6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801eec8:	7dfb      	ldrb	r3, [r7, #23]
 801eeca:	b29c      	uxth	r4, r3
 801eecc:	68b8      	ldr	r0, [r7, #8]
 801eece:	f7f7 fcce 	bl	801686e <lwip_htonl>
 801eed2:	4602      	mov	r2, r0
 801eed4:	8abb      	ldrh	r3, [r7, #20]
 801eed6:	9303      	str	r3, [sp, #12]
 801eed8:	2314      	movs	r3, #20
 801eeda:	9302      	str	r3, [sp, #8]
 801eedc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801eede:	9301      	str	r3, [sp, #4]
 801eee0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801eee2:	9300      	str	r3, [sp, #0]
 801eee4:	4613      	mov	r3, r2
 801eee6:	2200      	movs	r2, #0
 801eee8:	4621      	mov	r1, r4
 801eeea:	6878      	ldr	r0, [r7, #4]
 801eeec:	f7ff fe94 	bl	801ec18 <tcp_output_alloc_header_common>
 801eef0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801eef2:	693b      	ldr	r3, [r7, #16]
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	d00c      	beq.n	801ef12 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801eef8:	7dfb      	ldrb	r3, [r7, #23]
 801eefa:	2200      	movs	r2, #0
 801eefc:	6939      	ldr	r1, [r7, #16]
 801eefe:	68f8      	ldr	r0, [r7, #12]
 801ef00:	f7ff ff3a 	bl	801ed78 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ef04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef06:	683a      	ldr	r2, [r7, #0]
 801ef08:	6939      	ldr	r1, [r7, #16]
 801ef0a:	68f8      	ldr	r0, [r7, #12]
 801ef0c:	f7ff ff72 	bl	801edf4 <tcp_output_control_segment>
 801ef10:	e000      	b.n	801ef14 <tcp_rst+0x8c>
    return;
 801ef12:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801ef14:	371c      	adds	r7, #28
 801ef16:	46bd      	mov	sp, r7
 801ef18:	bd90      	pop	{r4, r7, pc}
 801ef1a:	bf00      	nop
 801ef1c:	0802c874 	.word	0x0802c874
 801ef20:	0802cff8 	.word	0x0802cff8
 801ef24:	0802c8c8 	.word	0x0802c8c8
 801ef28:	0802d014 	.word	0x0802d014

0801ef2c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801ef2c:	b590      	push	{r4, r7, lr}
 801ef2e:	b087      	sub	sp, #28
 801ef30:	af00      	add	r7, sp, #0
 801ef32:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801ef34:	2300      	movs	r3, #0
 801ef36:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801ef38:	2300      	movs	r3, #0
 801ef3a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	2b00      	cmp	r3, #0
 801ef40:	d106      	bne.n	801ef50 <tcp_send_empty_ack+0x24>
 801ef42:	4b28      	ldr	r3, [pc, #160]	; (801efe4 <tcp_send_empty_ack+0xb8>)
 801ef44:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801ef48:	4927      	ldr	r1, [pc, #156]	; (801efe8 <tcp_send_empty_ack+0xbc>)
 801ef4a:	4828      	ldr	r0, [pc, #160]	; (801efec <tcp_send_empty_ack+0xc0>)
 801ef4c:	f005 ff38 	bl	8024dc0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801ef50:	7dfb      	ldrb	r3, [r7, #23]
 801ef52:	009b      	lsls	r3, r3, #2
 801ef54:	b2db      	uxtb	r3, r3
 801ef56:	f003 0304 	and.w	r3, r3, #4
 801ef5a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801ef5c:	7d7b      	ldrb	r3, [r7, #21]
 801ef5e:	b29c      	uxth	r4, r3
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ef64:	4618      	mov	r0, r3
 801ef66:	f7f7 fc82 	bl	801686e <lwip_htonl>
 801ef6a:	4603      	mov	r3, r0
 801ef6c:	2200      	movs	r2, #0
 801ef6e:	4621      	mov	r1, r4
 801ef70:	6878      	ldr	r0, [r7, #4]
 801ef72:	f7ff fec3 	bl	801ecfc <tcp_output_alloc_header>
 801ef76:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801ef78:	693b      	ldr	r3, [r7, #16]
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	d109      	bne.n	801ef92 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ef7e:	687b      	ldr	r3, [r7, #4]
 801ef80:	8b5b      	ldrh	r3, [r3, #26]
 801ef82:	f043 0303 	orr.w	r3, r3, #3
 801ef86:	b29a      	uxth	r2, r3
 801ef88:	687b      	ldr	r3, [r7, #4]
 801ef8a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801ef8c:	f06f 0301 	mvn.w	r3, #1
 801ef90:	e023      	b.n	801efda <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801ef92:	7dbb      	ldrb	r3, [r7, #22]
 801ef94:	7dfa      	ldrb	r2, [r7, #23]
 801ef96:	6939      	ldr	r1, [r7, #16]
 801ef98:	6878      	ldr	r0, [r7, #4]
 801ef9a:	f7ff feed 	bl	801ed78 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801ef9e:	687a      	ldr	r2, [r7, #4]
 801efa0:	687b      	ldr	r3, [r7, #4]
 801efa2:	3304      	adds	r3, #4
 801efa4:	6939      	ldr	r1, [r7, #16]
 801efa6:	6878      	ldr	r0, [r7, #4]
 801efa8:	f7ff ff24 	bl	801edf4 <tcp_output_control_segment>
 801efac:	4603      	mov	r3, r0
 801efae:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801efb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801efb4:	2b00      	cmp	r3, #0
 801efb6:	d007      	beq.n	801efc8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801efb8:	687b      	ldr	r3, [r7, #4]
 801efba:	8b5b      	ldrh	r3, [r3, #26]
 801efbc:	f043 0303 	orr.w	r3, r3, #3
 801efc0:	b29a      	uxth	r2, r3
 801efc2:	687b      	ldr	r3, [r7, #4]
 801efc4:	835a      	strh	r2, [r3, #26]
 801efc6:	e006      	b.n	801efd6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	8b5b      	ldrh	r3, [r3, #26]
 801efcc:	f023 0303 	bic.w	r3, r3, #3
 801efd0:	b29a      	uxth	r2, r3
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801efd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801efda:	4618      	mov	r0, r3
 801efdc:	371c      	adds	r7, #28
 801efde:	46bd      	mov	sp, r7
 801efe0:	bd90      	pop	{r4, r7, pc}
 801efe2:	bf00      	nop
 801efe4:	0802c874 	.word	0x0802c874
 801efe8:	0802d030 	.word	0x0802d030
 801efec:	0802c8c8 	.word	0x0802c8c8

0801eff0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801eff0:	b590      	push	{r4, r7, lr}
 801eff2:	b087      	sub	sp, #28
 801eff4:	af00      	add	r7, sp, #0
 801eff6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801eff8:	2300      	movs	r3, #0
 801effa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	2b00      	cmp	r3, #0
 801f000:	d106      	bne.n	801f010 <tcp_keepalive+0x20>
 801f002:	4b18      	ldr	r3, [pc, #96]	; (801f064 <tcp_keepalive+0x74>)
 801f004:	f640 0224 	movw	r2, #2084	; 0x824
 801f008:	4917      	ldr	r1, [pc, #92]	; (801f068 <tcp_keepalive+0x78>)
 801f00a:	4818      	ldr	r0, [pc, #96]	; (801f06c <tcp_keepalive+0x7c>)
 801f00c:	f005 fed8 	bl	8024dc0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801f010:	7dfb      	ldrb	r3, [r7, #23]
 801f012:	b29c      	uxth	r4, r3
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f018:	3b01      	subs	r3, #1
 801f01a:	4618      	mov	r0, r3
 801f01c:	f7f7 fc27 	bl	801686e <lwip_htonl>
 801f020:	4603      	mov	r3, r0
 801f022:	2200      	movs	r2, #0
 801f024:	4621      	mov	r1, r4
 801f026:	6878      	ldr	r0, [r7, #4]
 801f028:	f7ff fe68 	bl	801ecfc <tcp_output_alloc_header>
 801f02c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f02e:	693b      	ldr	r3, [r7, #16]
 801f030:	2b00      	cmp	r3, #0
 801f032:	d102      	bne.n	801f03a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801f034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f038:	e010      	b.n	801f05c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f03a:	7dfb      	ldrb	r3, [r7, #23]
 801f03c:	2200      	movs	r2, #0
 801f03e:	6939      	ldr	r1, [r7, #16]
 801f040:	6878      	ldr	r0, [r7, #4]
 801f042:	f7ff fe99 	bl	801ed78 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f046:	687a      	ldr	r2, [r7, #4]
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	3304      	adds	r3, #4
 801f04c:	6939      	ldr	r1, [r7, #16]
 801f04e:	6878      	ldr	r0, [r7, #4]
 801f050:	f7ff fed0 	bl	801edf4 <tcp_output_control_segment>
 801f054:	4603      	mov	r3, r0
 801f056:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f058:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f05c:	4618      	mov	r0, r3
 801f05e:	371c      	adds	r7, #28
 801f060:	46bd      	mov	sp, r7
 801f062:	bd90      	pop	{r4, r7, pc}
 801f064:	0802c874 	.word	0x0802c874
 801f068:	0802d050 	.word	0x0802d050
 801f06c:	0802c8c8 	.word	0x0802c8c8

0801f070 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801f070:	b590      	push	{r4, r7, lr}
 801f072:	b08b      	sub	sp, #44	; 0x2c
 801f074:	af00      	add	r7, sp, #0
 801f076:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f078:	2300      	movs	r3, #0
 801f07a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	2b00      	cmp	r3, #0
 801f082:	d106      	bne.n	801f092 <tcp_zero_window_probe+0x22>
 801f084:	4b4c      	ldr	r3, [pc, #304]	; (801f1b8 <tcp_zero_window_probe+0x148>)
 801f086:	f640 024f 	movw	r2, #2127	; 0x84f
 801f08a:	494c      	ldr	r1, [pc, #304]	; (801f1bc <tcp_zero_window_probe+0x14c>)
 801f08c:	484c      	ldr	r0, [pc, #304]	; (801f1c0 <tcp_zero_window_probe+0x150>)
 801f08e:	f005 fe97 	bl	8024dc0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801f092:	687b      	ldr	r3, [r7, #4]
 801f094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f096:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801f098:	6a3b      	ldr	r3, [r7, #32]
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d101      	bne.n	801f0a2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801f09e:	2300      	movs	r3, #0
 801f0a0:	e086      	b.n	801f1b0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801f0a8:	2bff      	cmp	r3, #255	; 0xff
 801f0aa:	d007      	beq.n	801f0bc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801f0ac:	687b      	ldr	r3, [r7, #4]
 801f0ae:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801f0b2:	3301      	adds	r3, #1
 801f0b4:	b2da      	uxtb	r2, r3
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801f0bc:	6a3b      	ldr	r3, [r7, #32]
 801f0be:	68db      	ldr	r3, [r3, #12]
 801f0c0:	899b      	ldrh	r3, [r3, #12]
 801f0c2:	b29b      	uxth	r3, r3
 801f0c4:	4618      	mov	r0, r3
 801f0c6:	f7f7 fbbd 	bl	8016844 <lwip_htons>
 801f0ca:	4603      	mov	r3, r0
 801f0cc:	b2db      	uxtb	r3, r3
 801f0ce:	f003 0301 	and.w	r3, r3, #1
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d005      	beq.n	801f0e2 <tcp_zero_window_probe+0x72>
 801f0d6:	6a3b      	ldr	r3, [r7, #32]
 801f0d8:	891b      	ldrh	r3, [r3, #8]
 801f0da:	2b00      	cmp	r3, #0
 801f0dc:	d101      	bne.n	801f0e2 <tcp_zero_window_probe+0x72>
 801f0de:	2301      	movs	r3, #1
 801f0e0:	e000      	b.n	801f0e4 <tcp_zero_window_probe+0x74>
 801f0e2:	2300      	movs	r3, #0
 801f0e4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801f0e6:	7ffb      	ldrb	r3, [r7, #31]
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	bf0c      	ite	eq
 801f0ec:	2301      	moveq	r3, #1
 801f0ee:	2300      	movne	r3, #0
 801f0f0:	b2db      	uxtb	r3, r3
 801f0f2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f0f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f0f8:	b299      	uxth	r1, r3
 801f0fa:	6a3b      	ldr	r3, [r7, #32]
 801f0fc:	68db      	ldr	r3, [r3, #12]
 801f0fe:	685b      	ldr	r3, [r3, #4]
 801f100:	8bba      	ldrh	r2, [r7, #28]
 801f102:	6878      	ldr	r0, [r7, #4]
 801f104:	f7ff fdfa 	bl	801ecfc <tcp_output_alloc_header>
 801f108:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801f10a:	69bb      	ldr	r3, [r7, #24]
 801f10c:	2b00      	cmp	r3, #0
 801f10e:	d102      	bne.n	801f116 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801f110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f114:	e04c      	b.n	801f1b0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801f116:	69bb      	ldr	r3, [r7, #24]
 801f118:	685b      	ldr	r3, [r3, #4]
 801f11a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801f11c:	7ffb      	ldrb	r3, [r7, #31]
 801f11e:	2b00      	cmp	r3, #0
 801f120:	d011      	beq.n	801f146 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801f122:	697b      	ldr	r3, [r7, #20]
 801f124:	899b      	ldrh	r3, [r3, #12]
 801f126:	b29b      	uxth	r3, r3
 801f128:	b21b      	sxth	r3, r3
 801f12a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801f12e:	b21c      	sxth	r4, r3
 801f130:	2011      	movs	r0, #17
 801f132:	f7f7 fb87 	bl	8016844 <lwip_htons>
 801f136:	4603      	mov	r3, r0
 801f138:	b21b      	sxth	r3, r3
 801f13a:	4323      	orrs	r3, r4
 801f13c:	b21b      	sxth	r3, r3
 801f13e:	b29a      	uxth	r2, r3
 801f140:	697b      	ldr	r3, [r7, #20]
 801f142:	819a      	strh	r2, [r3, #12]
 801f144:	e010      	b.n	801f168 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801f146:	69bb      	ldr	r3, [r7, #24]
 801f148:	685b      	ldr	r3, [r3, #4]
 801f14a:	3314      	adds	r3, #20
 801f14c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f14e:	6a3b      	ldr	r3, [r7, #32]
 801f150:	6858      	ldr	r0, [r3, #4]
 801f152:	6a3b      	ldr	r3, [r7, #32]
 801f154:	685b      	ldr	r3, [r3, #4]
 801f156:	891a      	ldrh	r2, [r3, #8]
 801f158:	6a3b      	ldr	r3, [r7, #32]
 801f15a:	891b      	ldrh	r3, [r3, #8]
 801f15c:	1ad3      	subs	r3, r2, r3
 801f15e:	b29b      	uxth	r3, r3
 801f160:	2201      	movs	r2, #1
 801f162:	6939      	ldr	r1, [r7, #16]
 801f164:	f7f9 fc30 	bl	80189c8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f168:	6a3b      	ldr	r3, [r7, #32]
 801f16a:	68db      	ldr	r3, [r3, #12]
 801f16c:	685b      	ldr	r3, [r3, #4]
 801f16e:	4618      	mov	r0, r3
 801f170:	f7f7 fb7d 	bl	801686e <lwip_htonl>
 801f174:	4603      	mov	r3, r0
 801f176:	3301      	adds	r3, #1
 801f178:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f17a:	687b      	ldr	r3, [r7, #4]
 801f17c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f17e:	68fb      	ldr	r3, [r7, #12]
 801f180:	1ad3      	subs	r3, r2, r3
 801f182:	2b00      	cmp	r3, #0
 801f184:	da02      	bge.n	801f18c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	68fa      	ldr	r2, [r7, #12]
 801f18a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f18c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f190:	2200      	movs	r2, #0
 801f192:	69b9      	ldr	r1, [r7, #24]
 801f194:	6878      	ldr	r0, [r7, #4]
 801f196:	f7ff fdef 	bl	801ed78 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f19a:	687a      	ldr	r2, [r7, #4]
 801f19c:	687b      	ldr	r3, [r7, #4]
 801f19e:	3304      	adds	r3, #4
 801f1a0:	69b9      	ldr	r1, [r7, #24]
 801f1a2:	6878      	ldr	r0, [r7, #4]
 801f1a4:	f7ff fe26 	bl	801edf4 <tcp_output_control_segment>
 801f1a8:	4603      	mov	r3, r0
 801f1aa:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f1ac:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801f1b0:	4618      	mov	r0, r3
 801f1b2:	372c      	adds	r7, #44	; 0x2c
 801f1b4:	46bd      	mov	sp, r7
 801f1b6:	bd90      	pop	{r4, r7, pc}
 801f1b8:	0802c874 	.word	0x0802c874
 801f1bc:	0802d06c 	.word	0x0802d06c
 801f1c0:	0802c8c8 	.word	0x0802c8c8

0801f1c4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801f1c4:	b580      	push	{r7, lr}
 801f1c6:	b082      	sub	sp, #8
 801f1c8:	af00      	add	r7, sp, #0
 801f1ca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801f1cc:	f7f9 fe44 	bl	8018e58 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f1d0:	4b0a      	ldr	r3, [pc, #40]	; (801f1fc <tcpip_tcp_timer+0x38>)
 801f1d2:	681b      	ldr	r3, [r3, #0]
 801f1d4:	2b00      	cmp	r3, #0
 801f1d6:	d103      	bne.n	801f1e0 <tcpip_tcp_timer+0x1c>
 801f1d8:	4b09      	ldr	r3, [pc, #36]	; (801f200 <tcpip_tcp_timer+0x3c>)
 801f1da:	681b      	ldr	r3, [r3, #0]
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d005      	beq.n	801f1ec <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f1e0:	2200      	movs	r2, #0
 801f1e2:	4908      	ldr	r1, [pc, #32]	; (801f204 <tcpip_tcp_timer+0x40>)
 801f1e4:	20fa      	movs	r0, #250	; 0xfa
 801f1e6:	f000 f8f3 	bl	801f3d0 <sys_timeout>
 801f1ea:	e003      	b.n	801f1f4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801f1ec:	4b06      	ldr	r3, [pc, #24]	; (801f208 <tcpip_tcp_timer+0x44>)
 801f1ee:	2200      	movs	r2, #0
 801f1f0:	601a      	str	r2, [r3, #0]
  }
}
 801f1f2:	bf00      	nop
 801f1f4:	bf00      	nop
 801f1f6:	3708      	adds	r7, #8
 801f1f8:	46bd      	mov	sp, r7
 801f1fa:	bd80      	pop	{r7, pc}
 801f1fc:	20015fe0 	.word	0x20015fe0
 801f200:	20015fe4 	.word	0x20015fe4
 801f204:	0801f1c5 	.word	0x0801f1c5
 801f208:	2001602c 	.word	0x2001602c

0801f20c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801f20c:	b580      	push	{r7, lr}
 801f20e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f210:	4b0a      	ldr	r3, [pc, #40]	; (801f23c <tcp_timer_needed+0x30>)
 801f212:	681b      	ldr	r3, [r3, #0]
 801f214:	2b00      	cmp	r3, #0
 801f216:	d10f      	bne.n	801f238 <tcp_timer_needed+0x2c>
 801f218:	4b09      	ldr	r3, [pc, #36]	; (801f240 <tcp_timer_needed+0x34>)
 801f21a:	681b      	ldr	r3, [r3, #0]
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	d103      	bne.n	801f228 <tcp_timer_needed+0x1c>
 801f220:	4b08      	ldr	r3, [pc, #32]	; (801f244 <tcp_timer_needed+0x38>)
 801f222:	681b      	ldr	r3, [r3, #0]
 801f224:	2b00      	cmp	r3, #0
 801f226:	d007      	beq.n	801f238 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801f228:	4b04      	ldr	r3, [pc, #16]	; (801f23c <tcp_timer_needed+0x30>)
 801f22a:	2201      	movs	r2, #1
 801f22c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f22e:	2200      	movs	r2, #0
 801f230:	4905      	ldr	r1, [pc, #20]	; (801f248 <tcp_timer_needed+0x3c>)
 801f232:	20fa      	movs	r0, #250	; 0xfa
 801f234:	f000 f8cc 	bl	801f3d0 <sys_timeout>
  }
}
 801f238:	bf00      	nop
 801f23a:	bd80      	pop	{r7, pc}
 801f23c:	2001602c 	.word	0x2001602c
 801f240:	20015fe0 	.word	0x20015fe0
 801f244:	20015fe4 	.word	0x20015fe4
 801f248:	0801f1c5 	.word	0x0801f1c5

0801f24c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f24c:	b580      	push	{r7, lr}
 801f24e:	b086      	sub	sp, #24
 801f250:	af00      	add	r7, sp, #0
 801f252:	60f8      	str	r0, [r7, #12]
 801f254:	60b9      	str	r1, [r7, #8]
 801f256:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f258:	200a      	movs	r0, #10
 801f25a:	f7f8 fa95 	bl	8017788 <memp_malloc>
 801f25e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f260:	693b      	ldr	r3, [r7, #16]
 801f262:	2b00      	cmp	r3, #0
 801f264:	d109      	bne.n	801f27a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f266:	693b      	ldr	r3, [r7, #16]
 801f268:	2b00      	cmp	r3, #0
 801f26a:	d151      	bne.n	801f310 <sys_timeout_abs+0xc4>
 801f26c:	4b2a      	ldr	r3, [pc, #168]	; (801f318 <sys_timeout_abs+0xcc>)
 801f26e:	22be      	movs	r2, #190	; 0xbe
 801f270:	492a      	ldr	r1, [pc, #168]	; (801f31c <sys_timeout_abs+0xd0>)
 801f272:	482b      	ldr	r0, [pc, #172]	; (801f320 <sys_timeout_abs+0xd4>)
 801f274:	f005 fda4 	bl	8024dc0 <iprintf>
    return;
 801f278:	e04a      	b.n	801f310 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f27a:	693b      	ldr	r3, [r7, #16]
 801f27c:	2200      	movs	r2, #0
 801f27e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f280:	693b      	ldr	r3, [r7, #16]
 801f282:	68ba      	ldr	r2, [r7, #8]
 801f284:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f286:	693b      	ldr	r3, [r7, #16]
 801f288:	687a      	ldr	r2, [r7, #4]
 801f28a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f28c:	693b      	ldr	r3, [r7, #16]
 801f28e:	68fa      	ldr	r2, [r7, #12]
 801f290:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f292:	4b24      	ldr	r3, [pc, #144]	; (801f324 <sys_timeout_abs+0xd8>)
 801f294:	681b      	ldr	r3, [r3, #0]
 801f296:	2b00      	cmp	r3, #0
 801f298:	d103      	bne.n	801f2a2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f29a:	4a22      	ldr	r2, [pc, #136]	; (801f324 <sys_timeout_abs+0xd8>)
 801f29c:	693b      	ldr	r3, [r7, #16]
 801f29e:	6013      	str	r3, [r2, #0]
    return;
 801f2a0:	e037      	b.n	801f312 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f2a2:	693b      	ldr	r3, [r7, #16]
 801f2a4:	685a      	ldr	r2, [r3, #4]
 801f2a6:	4b1f      	ldr	r3, [pc, #124]	; (801f324 <sys_timeout_abs+0xd8>)
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	685b      	ldr	r3, [r3, #4]
 801f2ac:	1ad3      	subs	r3, r2, r3
 801f2ae:	0fdb      	lsrs	r3, r3, #31
 801f2b0:	f003 0301 	and.w	r3, r3, #1
 801f2b4:	b2db      	uxtb	r3, r3
 801f2b6:	2b00      	cmp	r3, #0
 801f2b8:	d007      	beq.n	801f2ca <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f2ba:	4b1a      	ldr	r3, [pc, #104]	; (801f324 <sys_timeout_abs+0xd8>)
 801f2bc:	681a      	ldr	r2, [r3, #0]
 801f2be:	693b      	ldr	r3, [r7, #16]
 801f2c0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f2c2:	4a18      	ldr	r2, [pc, #96]	; (801f324 <sys_timeout_abs+0xd8>)
 801f2c4:	693b      	ldr	r3, [r7, #16]
 801f2c6:	6013      	str	r3, [r2, #0]
 801f2c8:	e023      	b.n	801f312 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f2ca:	4b16      	ldr	r3, [pc, #88]	; (801f324 <sys_timeout_abs+0xd8>)
 801f2cc:	681b      	ldr	r3, [r3, #0]
 801f2ce:	617b      	str	r3, [r7, #20]
 801f2d0:	e01a      	b.n	801f308 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f2d2:	697b      	ldr	r3, [r7, #20]
 801f2d4:	681b      	ldr	r3, [r3, #0]
 801f2d6:	2b00      	cmp	r3, #0
 801f2d8:	d00b      	beq.n	801f2f2 <sys_timeout_abs+0xa6>
 801f2da:	693b      	ldr	r3, [r7, #16]
 801f2dc:	685a      	ldr	r2, [r3, #4]
 801f2de:	697b      	ldr	r3, [r7, #20]
 801f2e0:	681b      	ldr	r3, [r3, #0]
 801f2e2:	685b      	ldr	r3, [r3, #4]
 801f2e4:	1ad3      	subs	r3, r2, r3
 801f2e6:	0fdb      	lsrs	r3, r3, #31
 801f2e8:	f003 0301 	and.w	r3, r3, #1
 801f2ec:	b2db      	uxtb	r3, r3
 801f2ee:	2b00      	cmp	r3, #0
 801f2f0:	d007      	beq.n	801f302 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f2f2:	697b      	ldr	r3, [r7, #20]
 801f2f4:	681a      	ldr	r2, [r3, #0]
 801f2f6:	693b      	ldr	r3, [r7, #16]
 801f2f8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f2fa:	697b      	ldr	r3, [r7, #20]
 801f2fc:	693a      	ldr	r2, [r7, #16]
 801f2fe:	601a      	str	r2, [r3, #0]
        break;
 801f300:	e007      	b.n	801f312 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f302:	697b      	ldr	r3, [r7, #20]
 801f304:	681b      	ldr	r3, [r3, #0]
 801f306:	617b      	str	r3, [r7, #20]
 801f308:	697b      	ldr	r3, [r7, #20]
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	d1e1      	bne.n	801f2d2 <sys_timeout_abs+0x86>
 801f30e:	e000      	b.n	801f312 <sys_timeout_abs+0xc6>
    return;
 801f310:	bf00      	nop
      }
    }
  }
}
 801f312:	3718      	adds	r7, #24
 801f314:	46bd      	mov	sp, r7
 801f316:	bd80      	pop	{r7, pc}
 801f318:	0802d090 	.word	0x0802d090
 801f31c:	0802d0c4 	.word	0x0802d0c4
 801f320:	0802d104 	.word	0x0802d104
 801f324:	20016024 	.word	0x20016024

0801f328 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f328:	b580      	push	{r7, lr}
 801f32a:	b086      	sub	sp, #24
 801f32c:	af00      	add	r7, sp, #0
 801f32e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f334:	697b      	ldr	r3, [r7, #20]
 801f336:	685b      	ldr	r3, [r3, #4]
 801f338:	4798      	blx	r3

  now = sys_now();
 801f33a:	f7ea fc79 	bl	8009c30 <sys_now>
 801f33e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f340:	697b      	ldr	r3, [r7, #20]
 801f342:	681a      	ldr	r2, [r3, #0]
 801f344:	4b0f      	ldr	r3, [pc, #60]	; (801f384 <lwip_cyclic_timer+0x5c>)
 801f346:	681b      	ldr	r3, [r3, #0]
 801f348:	4413      	add	r3, r2
 801f34a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f34c:	68fa      	ldr	r2, [r7, #12]
 801f34e:	693b      	ldr	r3, [r7, #16]
 801f350:	1ad3      	subs	r3, r2, r3
 801f352:	0fdb      	lsrs	r3, r3, #31
 801f354:	f003 0301 	and.w	r3, r3, #1
 801f358:	b2db      	uxtb	r3, r3
 801f35a:	2b00      	cmp	r3, #0
 801f35c:	d009      	beq.n	801f372 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f35e:	697b      	ldr	r3, [r7, #20]
 801f360:	681a      	ldr	r2, [r3, #0]
 801f362:	693b      	ldr	r3, [r7, #16]
 801f364:	4413      	add	r3, r2
 801f366:	687a      	ldr	r2, [r7, #4]
 801f368:	4907      	ldr	r1, [pc, #28]	; (801f388 <lwip_cyclic_timer+0x60>)
 801f36a:	4618      	mov	r0, r3
 801f36c:	f7ff ff6e 	bl	801f24c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f370:	e004      	b.n	801f37c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f372:	687a      	ldr	r2, [r7, #4]
 801f374:	4904      	ldr	r1, [pc, #16]	; (801f388 <lwip_cyclic_timer+0x60>)
 801f376:	68f8      	ldr	r0, [r7, #12]
 801f378:	f7ff ff68 	bl	801f24c <sys_timeout_abs>
}
 801f37c:	bf00      	nop
 801f37e:	3718      	adds	r7, #24
 801f380:	46bd      	mov	sp, r7
 801f382:	bd80      	pop	{r7, pc}
 801f384:	20016028 	.word	0x20016028
 801f388:	0801f329 	.word	0x0801f329

0801f38c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f38c:	b580      	push	{r7, lr}
 801f38e:	b082      	sub	sp, #8
 801f390:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f392:	2301      	movs	r3, #1
 801f394:	607b      	str	r3, [r7, #4]
 801f396:	e00e      	b.n	801f3b6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f398:	4a0b      	ldr	r2, [pc, #44]	; (801f3c8 <sys_timeouts_init+0x3c>)
 801f39a:	687b      	ldr	r3, [r7, #4]
 801f39c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f3a0:	687b      	ldr	r3, [r7, #4]
 801f3a2:	00db      	lsls	r3, r3, #3
 801f3a4:	4a08      	ldr	r2, [pc, #32]	; (801f3c8 <sys_timeouts_init+0x3c>)
 801f3a6:	4413      	add	r3, r2
 801f3a8:	461a      	mov	r2, r3
 801f3aa:	4908      	ldr	r1, [pc, #32]	; (801f3cc <sys_timeouts_init+0x40>)
 801f3ac:	f000 f810 	bl	801f3d0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	3301      	adds	r3, #1
 801f3b4:	607b      	str	r3, [r7, #4]
 801f3b6:	687b      	ldr	r3, [r7, #4]
 801f3b8:	2b03      	cmp	r3, #3
 801f3ba:	d9ed      	bls.n	801f398 <sys_timeouts_init+0xc>
  }
}
 801f3bc:	bf00      	nop
 801f3be:	bf00      	nop
 801f3c0:	3708      	adds	r7, #8
 801f3c2:	46bd      	mov	sp, r7
 801f3c4:	bd80      	pop	{r7, pc}
 801f3c6:	bf00      	nop
 801f3c8:	0802df14 	.word	0x0802df14
 801f3cc:	0801f329 	.word	0x0801f329

0801f3d0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f3d0:	b580      	push	{r7, lr}
 801f3d2:	b086      	sub	sp, #24
 801f3d4:	af00      	add	r7, sp, #0
 801f3d6:	60f8      	str	r0, [r7, #12]
 801f3d8:	60b9      	str	r1, [r7, #8]
 801f3da:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f3dc:	68fb      	ldr	r3, [r7, #12]
 801f3de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f3e2:	d306      	bcc.n	801f3f2 <sys_timeout+0x22>
 801f3e4:	4b0a      	ldr	r3, [pc, #40]	; (801f410 <sys_timeout+0x40>)
 801f3e6:	f240 1229 	movw	r2, #297	; 0x129
 801f3ea:	490a      	ldr	r1, [pc, #40]	; (801f414 <sys_timeout+0x44>)
 801f3ec:	480a      	ldr	r0, [pc, #40]	; (801f418 <sys_timeout+0x48>)
 801f3ee:	f005 fce7 	bl	8024dc0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f3f2:	f7ea fc1d 	bl	8009c30 <sys_now>
 801f3f6:	4602      	mov	r2, r0
 801f3f8:	68fb      	ldr	r3, [r7, #12]
 801f3fa:	4413      	add	r3, r2
 801f3fc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f3fe:	687a      	ldr	r2, [r7, #4]
 801f400:	68b9      	ldr	r1, [r7, #8]
 801f402:	6978      	ldr	r0, [r7, #20]
 801f404:	f7ff ff22 	bl	801f24c <sys_timeout_abs>
#endif
}
 801f408:	bf00      	nop
 801f40a:	3718      	adds	r7, #24
 801f40c:	46bd      	mov	sp, r7
 801f40e:	bd80      	pop	{r7, pc}
 801f410:	0802d090 	.word	0x0802d090
 801f414:	0802d12c 	.word	0x0802d12c
 801f418:	0802d104 	.word	0x0802d104

0801f41c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f41c:	b580      	push	{r7, lr}
 801f41e:	b084      	sub	sp, #16
 801f420:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f422:	f7ea fc05 	bl	8009c30 <sys_now>
 801f426:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f428:	4b17      	ldr	r3, [pc, #92]	; (801f488 <sys_check_timeouts+0x6c>)
 801f42a:	681b      	ldr	r3, [r3, #0]
 801f42c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f42e:	68bb      	ldr	r3, [r7, #8]
 801f430:	2b00      	cmp	r3, #0
 801f432:	d022      	beq.n	801f47a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f434:	68bb      	ldr	r3, [r7, #8]
 801f436:	685b      	ldr	r3, [r3, #4]
 801f438:	68fa      	ldr	r2, [r7, #12]
 801f43a:	1ad3      	subs	r3, r2, r3
 801f43c:	0fdb      	lsrs	r3, r3, #31
 801f43e:	f003 0301 	and.w	r3, r3, #1
 801f442:	b2db      	uxtb	r3, r3
 801f444:	2b00      	cmp	r3, #0
 801f446:	d11a      	bne.n	801f47e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f448:	68bb      	ldr	r3, [r7, #8]
 801f44a:	681b      	ldr	r3, [r3, #0]
 801f44c:	4a0e      	ldr	r2, [pc, #56]	; (801f488 <sys_check_timeouts+0x6c>)
 801f44e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f450:	68bb      	ldr	r3, [r7, #8]
 801f452:	689b      	ldr	r3, [r3, #8]
 801f454:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f456:	68bb      	ldr	r3, [r7, #8]
 801f458:	68db      	ldr	r3, [r3, #12]
 801f45a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f45c:	68bb      	ldr	r3, [r7, #8]
 801f45e:	685b      	ldr	r3, [r3, #4]
 801f460:	4a0a      	ldr	r2, [pc, #40]	; (801f48c <sys_check_timeouts+0x70>)
 801f462:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f464:	68b9      	ldr	r1, [r7, #8]
 801f466:	200a      	movs	r0, #10
 801f468:	f7f8 fa04 	bl	8017874 <memp_free>
    if (handler != NULL) {
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	2b00      	cmp	r3, #0
 801f470:	d0da      	beq.n	801f428 <sys_check_timeouts+0xc>
      handler(arg);
 801f472:	687b      	ldr	r3, [r7, #4]
 801f474:	6838      	ldr	r0, [r7, #0]
 801f476:	4798      	blx	r3
  do {
 801f478:	e7d6      	b.n	801f428 <sys_check_timeouts+0xc>
      return;
 801f47a:	bf00      	nop
 801f47c:	e000      	b.n	801f480 <sys_check_timeouts+0x64>
      return;
 801f47e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f480:	3710      	adds	r7, #16
 801f482:	46bd      	mov	sp, r7
 801f484:	bd80      	pop	{r7, pc}
 801f486:	bf00      	nop
 801f488:	20016024 	.word	0x20016024
 801f48c:	20016028 	.word	0x20016028

0801f490 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f490:	b580      	push	{r7, lr}
 801f492:	b082      	sub	sp, #8
 801f494:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f496:	4b16      	ldr	r3, [pc, #88]	; (801f4f0 <sys_timeouts_sleeptime+0x60>)
 801f498:	681b      	ldr	r3, [r3, #0]
 801f49a:	2b00      	cmp	r3, #0
 801f49c:	d102      	bne.n	801f4a4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f49e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f4a2:	e020      	b.n	801f4e6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801f4a4:	f7ea fbc4 	bl	8009c30 <sys_now>
 801f4a8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f4aa:	4b11      	ldr	r3, [pc, #68]	; (801f4f0 <sys_timeouts_sleeptime+0x60>)
 801f4ac:	681b      	ldr	r3, [r3, #0]
 801f4ae:	685a      	ldr	r2, [r3, #4]
 801f4b0:	687b      	ldr	r3, [r7, #4]
 801f4b2:	1ad3      	subs	r3, r2, r3
 801f4b4:	0fdb      	lsrs	r3, r3, #31
 801f4b6:	f003 0301 	and.w	r3, r3, #1
 801f4ba:	b2db      	uxtb	r3, r3
 801f4bc:	2b00      	cmp	r3, #0
 801f4be:	d001      	beq.n	801f4c4 <sys_timeouts_sleeptime+0x34>
    return 0;
 801f4c0:	2300      	movs	r3, #0
 801f4c2:	e010      	b.n	801f4e6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801f4c4:	4b0a      	ldr	r3, [pc, #40]	; (801f4f0 <sys_timeouts_sleeptime+0x60>)
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	685a      	ldr	r2, [r3, #4]
 801f4ca:	687b      	ldr	r3, [r7, #4]
 801f4cc:	1ad3      	subs	r3, r2, r3
 801f4ce:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801f4d0:	683b      	ldr	r3, [r7, #0]
 801f4d2:	2b00      	cmp	r3, #0
 801f4d4:	da06      	bge.n	801f4e4 <sys_timeouts_sleeptime+0x54>
 801f4d6:	4b07      	ldr	r3, [pc, #28]	; (801f4f4 <sys_timeouts_sleeptime+0x64>)
 801f4d8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801f4dc:	4906      	ldr	r1, [pc, #24]	; (801f4f8 <sys_timeouts_sleeptime+0x68>)
 801f4de:	4807      	ldr	r0, [pc, #28]	; (801f4fc <sys_timeouts_sleeptime+0x6c>)
 801f4e0:	f005 fc6e 	bl	8024dc0 <iprintf>
    return ret;
 801f4e4:	683b      	ldr	r3, [r7, #0]
  }
}
 801f4e6:	4618      	mov	r0, r3
 801f4e8:	3708      	adds	r7, #8
 801f4ea:	46bd      	mov	sp, r7
 801f4ec:	bd80      	pop	{r7, pc}
 801f4ee:	bf00      	nop
 801f4f0:	20016024 	.word	0x20016024
 801f4f4:	0802d090 	.word	0x0802d090
 801f4f8:	0802d164 	.word	0x0802d164
 801f4fc:	0802d104 	.word	0x0802d104

0801f500 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f500:	b580      	push	{r7, lr}
 801f502:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f504:	f004 fe60 	bl	80241c8 <rand>
 801f508:	4603      	mov	r3, r0
 801f50a:	b29b      	uxth	r3, r3
 801f50c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f510:	b29b      	uxth	r3, r3
 801f512:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f516:	b29a      	uxth	r2, r3
 801f518:	4b01      	ldr	r3, [pc, #4]	; (801f520 <udp_init+0x20>)
 801f51a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f51c:	bf00      	nop
 801f51e:	bd80      	pop	{r7, pc}
 801f520:	20000034 	.word	0x20000034

0801f524 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f524:	b480      	push	{r7}
 801f526:	b083      	sub	sp, #12
 801f528:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f52a:	2300      	movs	r3, #0
 801f52c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f52e:	4b17      	ldr	r3, [pc, #92]	; (801f58c <udp_new_port+0x68>)
 801f530:	881b      	ldrh	r3, [r3, #0]
 801f532:	1c5a      	adds	r2, r3, #1
 801f534:	b291      	uxth	r1, r2
 801f536:	4a15      	ldr	r2, [pc, #84]	; (801f58c <udp_new_port+0x68>)
 801f538:	8011      	strh	r1, [r2, #0]
 801f53a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f53e:	4293      	cmp	r3, r2
 801f540:	d103      	bne.n	801f54a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f542:	4b12      	ldr	r3, [pc, #72]	; (801f58c <udp_new_port+0x68>)
 801f544:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f548:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f54a:	4b11      	ldr	r3, [pc, #68]	; (801f590 <udp_new_port+0x6c>)
 801f54c:	681b      	ldr	r3, [r3, #0]
 801f54e:	603b      	str	r3, [r7, #0]
 801f550:	e011      	b.n	801f576 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f552:	683b      	ldr	r3, [r7, #0]
 801f554:	8a5a      	ldrh	r2, [r3, #18]
 801f556:	4b0d      	ldr	r3, [pc, #52]	; (801f58c <udp_new_port+0x68>)
 801f558:	881b      	ldrh	r3, [r3, #0]
 801f55a:	429a      	cmp	r2, r3
 801f55c:	d108      	bne.n	801f570 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f55e:	88fb      	ldrh	r3, [r7, #6]
 801f560:	3301      	adds	r3, #1
 801f562:	80fb      	strh	r3, [r7, #6]
 801f564:	88fb      	ldrh	r3, [r7, #6]
 801f566:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f56a:	d3e0      	bcc.n	801f52e <udp_new_port+0xa>
        return 0;
 801f56c:	2300      	movs	r3, #0
 801f56e:	e007      	b.n	801f580 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f570:	683b      	ldr	r3, [r7, #0]
 801f572:	68db      	ldr	r3, [r3, #12]
 801f574:	603b      	str	r3, [r7, #0]
 801f576:	683b      	ldr	r3, [r7, #0]
 801f578:	2b00      	cmp	r3, #0
 801f57a:	d1ea      	bne.n	801f552 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f57c:	4b03      	ldr	r3, [pc, #12]	; (801f58c <udp_new_port+0x68>)
 801f57e:	881b      	ldrh	r3, [r3, #0]
}
 801f580:	4618      	mov	r0, r3
 801f582:	370c      	adds	r7, #12
 801f584:	46bd      	mov	sp, r7
 801f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f58a:	4770      	bx	lr
 801f58c:	20000034 	.word	0x20000034
 801f590:	20016030 	.word	0x20016030

0801f594 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f594:	b580      	push	{r7, lr}
 801f596:	b084      	sub	sp, #16
 801f598:	af00      	add	r7, sp, #0
 801f59a:	60f8      	str	r0, [r7, #12]
 801f59c:	60b9      	str	r1, [r7, #8]
 801f59e:	4613      	mov	r3, r2
 801f5a0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f5a2:	68fb      	ldr	r3, [r7, #12]
 801f5a4:	2b00      	cmp	r3, #0
 801f5a6:	d105      	bne.n	801f5b4 <udp_input_local_match+0x20>
 801f5a8:	4b27      	ldr	r3, [pc, #156]	; (801f648 <udp_input_local_match+0xb4>)
 801f5aa:	2287      	movs	r2, #135	; 0x87
 801f5ac:	4927      	ldr	r1, [pc, #156]	; (801f64c <udp_input_local_match+0xb8>)
 801f5ae:	4828      	ldr	r0, [pc, #160]	; (801f650 <udp_input_local_match+0xbc>)
 801f5b0:	f005 fc06 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f5b4:	68bb      	ldr	r3, [r7, #8]
 801f5b6:	2b00      	cmp	r3, #0
 801f5b8:	d105      	bne.n	801f5c6 <udp_input_local_match+0x32>
 801f5ba:	4b23      	ldr	r3, [pc, #140]	; (801f648 <udp_input_local_match+0xb4>)
 801f5bc:	2288      	movs	r2, #136	; 0x88
 801f5be:	4925      	ldr	r1, [pc, #148]	; (801f654 <udp_input_local_match+0xc0>)
 801f5c0:	4823      	ldr	r0, [pc, #140]	; (801f650 <udp_input_local_match+0xbc>)
 801f5c2:	f005 fbfd 	bl	8024dc0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f5c6:	68fb      	ldr	r3, [r7, #12]
 801f5c8:	7a1b      	ldrb	r3, [r3, #8]
 801f5ca:	2b00      	cmp	r3, #0
 801f5cc:	d00b      	beq.n	801f5e6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f5ce:	68fb      	ldr	r3, [r7, #12]
 801f5d0:	7a1a      	ldrb	r2, [r3, #8]
 801f5d2:	4b21      	ldr	r3, [pc, #132]	; (801f658 <udp_input_local_match+0xc4>)
 801f5d4:	685b      	ldr	r3, [r3, #4]
 801f5d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f5da:	3301      	adds	r3, #1
 801f5dc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f5de:	429a      	cmp	r2, r3
 801f5e0:	d001      	beq.n	801f5e6 <udp_input_local_match+0x52>
    return 0;
 801f5e2:	2300      	movs	r3, #0
 801f5e4:	e02b      	b.n	801f63e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f5e6:	79fb      	ldrb	r3, [r7, #7]
 801f5e8:	2b00      	cmp	r3, #0
 801f5ea:	d018      	beq.n	801f61e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f5ec:	68fb      	ldr	r3, [r7, #12]
 801f5ee:	2b00      	cmp	r3, #0
 801f5f0:	d013      	beq.n	801f61a <udp_input_local_match+0x86>
 801f5f2:	68fb      	ldr	r3, [r7, #12]
 801f5f4:	681b      	ldr	r3, [r3, #0]
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d00f      	beq.n	801f61a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f5fa:	4b17      	ldr	r3, [pc, #92]	; (801f658 <udp_input_local_match+0xc4>)
 801f5fc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f5fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f602:	d00a      	beq.n	801f61a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	681a      	ldr	r2, [r3, #0]
 801f608:	4b13      	ldr	r3, [pc, #76]	; (801f658 <udp_input_local_match+0xc4>)
 801f60a:	695b      	ldr	r3, [r3, #20]
 801f60c:	405a      	eors	r2, r3
 801f60e:	68bb      	ldr	r3, [r7, #8]
 801f610:	3308      	adds	r3, #8
 801f612:	681b      	ldr	r3, [r3, #0]
 801f614:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f616:	2b00      	cmp	r3, #0
 801f618:	d110      	bne.n	801f63c <udp_input_local_match+0xa8>
          return 1;
 801f61a:	2301      	movs	r3, #1
 801f61c:	e00f      	b.n	801f63e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f61e:	68fb      	ldr	r3, [r7, #12]
 801f620:	2b00      	cmp	r3, #0
 801f622:	d009      	beq.n	801f638 <udp_input_local_match+0xa4>
 801f624:	68fb      	ldr	r3, [r7, #12]
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	2b00      	cmp	r3, #0
 801f62a:	d005      	beq.n	801f638 <udp_input_local_match+0xa4>
 801f62c:	68fb      	ldr	r3, [r7, #12]
 801f62e:	681a      	ldr	r2, [r3, #0]
 801f630:	4b09      	ldr	r3, [pc, #36]	; (801f658 <udp_input_local_match+0xc4>)
 801f632:	695b      	ldr	r3, [r3, #20]
 801f634:	429a      	cmp	r2, r3
 801f636:	d101      	bne.n	801f63c <udp_input_local_match+0xa8>
        return 1;
 801f638:	2301      	movs	r3, #1
 801f63a:	e000      	b.n	801f63e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f63c:	2300      	movs	r3, #0
}
 801f63e:	4618      	mov	r0, r3
 801f640:	3710      	adds	r7, #16
 801f642:	46bd      	mov	sp, r7
 801f644:	bd80      	pop	{r7, pc}
 801f646:	bf00      	nop
 801f648:	0802d178 	.word	0x0802d178
 801f64c:	0802d1a8 	.word	0x0802d1a8
 801f650:	0802d1cc 	.word	0x0802d1cc
 801f654:	0802d1f4 	.word	0x0802d1f4
 801f658:	20012458 	.word	0x20012458

0801f65c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f65c:	b590      	push	{r4, r7, lr}
 801f65e:	b08d      	sub	sp, #52	; 0x34
 801f660:	af02      	add	r7, sp, #8
 801f662:	6078      	str	r0, [r7, #4]
 801f664:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f666:	2300      	movs	r3, #0
 801f668:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f66a:	687b      	ldr	r3, [r7, #4]
 801f66c:	2b00      	cmp	r3, #0
 801f66e:	d105      	bne.n	801f67c <udp_input+0x20>
 801f670:	4b82      	ldr	r3, [pc, #520]	; (801f87c <udp_input+0x220>)
 801f672:	22cf      	movs	r2, #207	; 0xcf
 801f674:	4982      	ldr	r1, [pc, #520]	; (801f880 <udp_input+0x224>)
 801f676:	4883      	ldr	r0, [pc, #524]	; (801f884 <udp_input+0x228>)
 801f678:	f005 fba2 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f67c:	683b      	ldr	r3, [r7, #0]
 801f67e:	2b00      	cmp	r3, #0
 801f680:	d105      	bne.n	801f68e <udp_input+0x32>
 801f682:	4b7e      	ldr	r3, [pc, #504]	; (801f87c <udp_input+0x220>)
 801f684:	22d0      	movs	r2, #208	; 0xd0
 801f686:	4980      	ldr	r1, [pc, #512]	; (801f888 <udp_input+0x22c>)
 801f688:	487e      	ldr	r0, [pc, #504]	; (801f884 <udp_input+0x228>)
 801f68a:	f005 fb99 	bl	8024dc0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f68e:	687b      	ldr	r3, [r7, #4]
 801f690:	895b      	ldrh	r3, [r3, #10]
 801f692:	2b07      	cmp	r3, #7
 801f694:	d803      	bhi.n	801f69e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f696:	6878      	ldr	r0, [r7, #4]
 801f698:	f7f8 ff90 	bl	80185bc <pbuf_free>
    goto end;
 801f69c:	e0ea      	b.n	801f874 <udp_input+0x218>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f69e:	687b      	ldr	r3, [r7, #4]
 801f6a0:	685b      	ldr	r3, [r3, #4]
 801f6a2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f6a4:	4b79      	ldr	r3, [pc, #484]	; (801f88c <udp_input+0x230>)
 801f6a6:	695b      	ldr	r3, [r3, #20]
 801f6a8:	4a78      	ldr	r2, [pc, #480]	; (801f88c <udp_input+0x230>)
 801f6aa:	6812      	ldr	r2, [r2, #0]
 801f6ac:	4611      	mov	r1, r2
 801f6ae:	4618      	mov	r0, r3
 801f6b0:	f002 f82e 	bl	8021710 <ip4_addr_isbroadcast_u32>
 801f6b4:	4603      	mov	r3, r0
 801f6b6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f6b8:	697b      	ldr	r3, [r7, #20]
 801f6ba:	881b      	ldrh	r3, [r3, #0]
 801f6bc:	b29b      	uxth	r3, r3
 801f6be:	4618      	mov	r0, r3
 801f6c0:	f7f7 f8c0 	bl	8016844 <lwip_htons>
 801f6c4:	4603      	mov	r3, r0
 801f6c6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f6c8:	697b      	ldr	r3, [r7, #20]
 801f6ca:	885b      	ldrh	r3, [r3, #2]
 801f6cc:	b29b      	uxth	r3, r3
 801f6ce:	4618      	mov	r0, r3
 801f6d0:	f7f7 f8b8 	bl	8016844 <lwip_htons>
 801f6d4:	4603      	mov	r3, r0
 801f6d6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f6d8:	2300      	movs	r3, #0
 801f6da:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f6dc:	2300      	movs	r3, #0
 801f6de:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f6e0:	2300      	movs	r3, #0
 801f6e2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f6e4:	4b6a      	ldr	r3, [pc, #424]	; (801f890 <udp_input+0x234>)
 801f6e6:	681b      	ldr	r3, [r3, #0]
 801f6e8:	627b      	str	r3, [r7, #36]	; 0x24
 801f6ea:	e060      	b.n	801f7ae <udp_input+0x152>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f6ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f6ee:	8a5b      	ldrh	r3, [r3, #18]
 801f6f0:	89fa      	ldrh	r2, [r7, #14]
 801f6f2:	429a      	cmp	r2, r3
 801f6f4:	d156      	bne.n	801f7a4 <udp_input+0x148>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f6f6:	7cfb      	ldrb	r3, [r7, #19]
 801f6f8:	461a      	mov	r2, r3
 801f6fa:	6839      	ldr	r1, [r7, #0]
 801f6fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f6fe:	f7ff ff49 	bl	801f594 <udp_input_local_match>
 801f702:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f704:	2b00      	cmp	r3, #0
 801f706:	d04d      	beq.n	801f7a4 <udp_input+0x148>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f70a:	7c1b      	ldrb	r3, [r3, #16]
 801f70c:	f003 0304 	and.w	r3, r3, #4
 801f710:	2b00      	cmp	r3, #0
 801f712:	d129      	bne.n	801f768 <udp_input+0x10c>
        if (uncon_pcb == NULL) {
 801f714:	69fb      	ldr	r3, [r7, #28]
 801f716:	2b00      	cmp	r3, #0
 801f718:	d102      	bne.n	801f720 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f71c:	61fb      	str	r3, [r7, #28]
 801f71e:	e023      	b.n	801f768 <udp_input+0x10c>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f720:	7cfb      	ldrb	r3, [r7, #19]
 801f722:	2b00      	cmp	r3, #0
 801f724:	d015      	beq.n	801f752 <udp_input+0xf6>
 801f726:	4b59      	ldr	r3, [pc, #356]	; (801f88c <udp_input+0x230>)
 801f728:	695b      	ldr	r3, [r3, #20]
 801f72a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f72e:	d110      	bne.n	801f752 <udp_input+0xf6>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f730:	69fb      	ldr	r3, [r7, #28]
 801f732:	681a      	ldr	r2, [r3, #0]
 801f734:	683b      	ldr	r3, [r7, #0]
 801f736:	3304      	adds	r3, #4
 801f738:	681b      	ldr	r3, [r3, #0]
 801f73a:	429a      	cmp	r2, r3
 801f73c:	d013      	beq.n	801f766 <udp_input+0x10a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f740:	681a      	ldr	r2, [r3, #0]
 801f742:	683b      	ldr	r3, [r7, #0]
 801f744:	3304      	adds	r3, #4
 801f746:	681b      	ldr	r3, [r3, #0]
 801f748:	429a      	cmp	r2, r3
 801f74a:	d10c      	bne.n	801f766 <udp_input+0x10a>
              /* better match */
              uncon_pcb = pcb;
 801f74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f74e:	61fb      	str	r3, [r7, #28]
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f750:	e009      	b.n	801f766 <udp_input+0x10a>
            }
          }
#endif /* LWIP_IPV4 */
        }
#if SO_REUSE
        else if (!ip_addr_isany(&pcb->local_ip)) {
 801f752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f754:	2b00      	cmp	r3, #0
 801f756:	d007      	beq.n	801f768 <udp_input+0x10c>
 801f758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f75a:	681b      	ldr	r3, [r3, #0]
 801f75c:	2b00      	cmp	r3, #0
 801f75e:	d003      	beq.n	801f768 <udp_input+0x10c>
          /* prefer specific IPs over catch-all */
          uncon_pcb = pcb;
 801f760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f762:	61fb      	str	r3, [r7, #28]
 801f764:	e000      	b.n	801f768 <udp_input+0x10c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f766:	bf00      	nop
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f76a:	8a9b      	ldrh	r3, [r3, #20]
 801f76c:	8a3a      	ldrh	r2, [r7, #16]
 801f76e:	429a      	cmp	r2, r3
 801f770:	d118      	bne.n	801f7a4 <udp_input+0x148>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f774:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f776:	2b00      	cmp	r3, #0
 801f778:	d005      	beq.n	801f786 <udp_input+0x12a>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f77c:	685a      	ldr	r2, [r3, #4]
 801f77e:	4b43      	ldr	r3, [pc, #268]	; (801f88c <udp_input+0x230>)
 801f780:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f782:	429a      	cmp	r2, r3
 801f784:	d10e      	bne.n	801f7a4 <udp_input+0x148>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f786:	6a3b      	ldr	r3, [r7, #32]
 801f788:	2b00      	cmp	r3, #0
 801f78a:	d014      	beq.n	801f7b6 <udp_input+0x15a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f78e:	68da      	ldr	r2, [r3, #12]
 801f790:	6a3b      	ldr	r3, [r7, #32]
 801f792:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f794:	4b3e      	ldr	r3, [pc, #248]	; (801f890 <udp_input+0x234>)
 801f796:	681a      	ldr	r2, [r3, #0]
 801f798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f79a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f79c:	4a3c      	ldr	r2, [pc, #240]	; (801f890 <udp_input+0x234>)
 801f79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7a0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f7a2:	e008      	b.n	801f7b6 <udp_input+0x15a>
      }
    }

    prev = pcb;
 801f7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7a6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7aa:	68db      	ldr	r3, [r3, #12]
 801f7ac:	627b      	str	r3, [r7, #36]	; 0x24
 801f7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7b0:	2b00      	cmp	r3, #0
 801f7b2:	d19b      	bne.n	801f6ec <udp_input+0x90>
 801f7b4:	e000      	b.n	801f7b8 <udp_input+0x15c>
        break;
 801f7b6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f7b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7ba:	2b00      	cmp	r3, #0
 801f7bc:	d101      	bne.n	801f7c2 <udp_input+0x166>
    pcb = uncon_pcb;
 801f7be:	69fb      	ldr	r3, [r7, #28]
 801f7c0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	d002      	beq.n	801f7ce <udp_input+0x172>
    for_us = 1;
 801f7c8:	2301      	movs	r3, #1
 801f7ca:	76fb      	strb	r3, [r7, #27]
 801f7cc:	e00a      	b.n	801f7e4 <udp_input+0x188>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f7ce:	683b      	ldr	r3, [r7, #0]
 801f7d0:	3304      	adds	r3, #4
 801f7d2:	681a      	ldr	r2, [r3, #0]
 801f7d4:	4b2d      	ldr	r3, [pc, #180]	; (801f88c <udp_input+0x230>)
 801f7d6:	695b      	ldr	r3, [r3, #20]
 801f7d8:	429a      	cmp	r2, r3
 801f7da:	bf0c      	ite	eq
 801f7dc:	2301      	moveq	r3, #1
 801f7de:	2300      	movne	r3, #0
 801f7e0:	b2db      	uxtb	r3, r3
 801f7e2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f7e4:	7efb      	ldrb	r3, [r7, #27]
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d041      	beq.n	801f86e <udp_input+0x212>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f7ea:	2108      	movs	r1, #8
 801f7ec:	6878      	ldr	r0, [r7, #4]
 801f7ee:	f7f8 fe5f 	bl	80184b0 <pbuf_remove_header>
 801f7f2:	4603      	mov	r3, r0
 801f7f4:	2b00      	cmp	r3, #0
 801f7f6:	d00a      	beq.n	801f80e <udp_input+0x1b2>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f7f8:	4b20      	ldr	r3, [pc, #128]	; (801f87c <udp_input+0x220>)
 801f7fa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f7fe:	4925      	ldr	r1, [pc, #148]	; (801f894 <udp_input+0x238>)
 801f800:	4820      	ldr	r0, [pc, #128]	; (801f884 <udp_input+0x228>)
 801f802:	f005 fadd 	bl	8024dc0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f806:	6878      	ldr	r0, [r7, #4]
 801f808:	f7f8 fed8 	bl	80185bc <pbuf_free>
      goto end;
 801f80c:	e032      	b.n	801f874 <udp_input+0x218>
    }

    if (pcb != NULL) {
 801f80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f810:	2b00      	cmp	r3, #0
 801f812:	d012      	beq.n	801f83a <udp_input+0x1de>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f816:	699b      	ldr	r3, [r3, #24]
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d00a      	beq.n	801f832 <udp_input+0x1d6>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f81e:	699c      	ldr	r4, [r3, #24]
 801f820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f822:	69d8      	ldr	r0, [r3, #28]
 801f824:	8a3b      	ldrh	r3, [r7, #16]
 801f826:	9300      	str	r3, [sp, #0]
 801f828:	4b1b      	ldr	r3, [pc, #108]	; (801f898 <udp_input+0x23c>)
 801f82a:	687a      	ldr	r2, [r7, #4]
 801f82c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f82e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f830:	e021      	b.n	801f876 <udp_input+0x21a>
        pbuf_free(p);
 801f832:	6878      	ldr	r0, [r7, #4]
 801f834:	f7f8 fec2 	bl	80185bc <pbuf_free>
        goto end;
 801f838:	e01c      	b.n	801f874 <udp_input+0x218>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f83a:	7cfb      	ldrb	r3, [r7, #19]
 801f83c:	2b00      	cmp	r3, #0
 801f83e:	d112      	bne.n	801f866 <udp_input+0x20a>
 801f840:	4b12      	ldr	r3, [pc, #72]	; (801f88c <udp_input+0x230>)
 801f842:	695b      	ldr	r3, [r3, #20]
 801f844:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f848:	2be0      	cmp	r3, #224	; 0xe0
 801f84a:	d00c      	beq.n	801f866 <udp_input+0x20a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f84c:	4b0f      	ldr	r3, [pc, #60]	; (801f88c <udp_input+0x230>)
 801f84e:	899b      	ldrh	r3, [r3, #12]
 801f850:	3308      	adds	r3, #8
 801f852:	b29b      	uxth	r3, r3
 801f854:	b21b      	sxth	r3, r3
 801f856:	4619      	mov	r1, r3
 801f858:	6878      	ldr	r0, [r7, #4]
 801f85a:	f7f8 fe9c 	bl	8018596 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f85e:	2103      	movs	r1, #3
 801f860:	6878      	ldr	r0, [r7, #4]
 801f862:	f001 fc35 	bl	80210d0 <icmp_dest_unreach>
      pbuf_free(p);
 801f866:	6878      	ldr	r0, [r7, #4]
 801f868:	f7f8 fea8 	bl	80185bc <pbuf_free>
  return;
 801f86c:	e003      	b.n	801f876 <udp_input+0x21a>
    pbuf_free(p);
 801f86e:	6878      	ldr	r0, [r7, #4]
 801f870:	f7f8 fea4 	bl	80185bc <pbuf_free>
  return;
 801f874:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f876:	372c      	adds	r7, #44	; 0x2c
 801f878:	46bd      	mov	sp, r7
 801f87a:	bd90      	pop	{r4, r7, pc}
 801f87c:	0802d178 	.word	0x0802d178
 801f880:	0802d21c 	.word	0x0802d21c
 801f884:	0802d1cc 	.word	0x0802d1cc
 801f888:	0802d234 	.word	0x0802d234
 801f88c:	20012458 	.word	0x20012458
 801f890:	20016030 	.word	0x20016030
 801f894:	0802d250 	.word	0x0802d250
 801f898:	20012468 	.word	0x20012468

0801f89c <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801f89c:	b580      	push	{r7, lr}
 801f89e:	b082      	sub	sp, #8
 801f8a0:	af00      	add	r7, sp, #0
 801f8a2:	6078      	str	r0, [r7, #4]
 801f8a4:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801f8a6:	687b      	ldr	r3, [r7, #4]
 801f8a8:	2b00      	cmp	r3, #0
 801f8aa:	d109      	bne.n	801f8c0 <udp_send+0x24>
 801f8ac:	4b11      	ldr	r3, [pc, #68]	; (801f8f4 <udp_send+0x58>)
 801f8ae:	f240 12d5 	movw	r2, #469	; 0x1d5
 801f8b2:	4911      	ldr	r1, [pc, #68]	; (801f8f8 <udp_send+0x5c>)
 801f8b4:	4811      	ldr	r0, [pc, #68]	; (801f8fc <udp_send+0x60>)
 801f8b6:	f005 fa83 	bl	8024dc0 <iprintf>
 801f8ba:	f06f 030f 	mvn.w	r3, #15
 801f8be:	e015      	b.n	801f8ec <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801f8c0:	683b      	ldr	r3, [r7, #0]
 801f8c2:	2b00      	cmp	r3, #0
 801f8c4:	d109      	bne.n	801f8da <udp_send+0x3e>
 801f8c6:	4b0b      	ldr	r3, [pc, #44]	; (801f8f4 <udp_send+0x58>)
 801f8c8:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801f8cc:	490c      	ldr	r1, [pc, #48]	; (801f900 <udp_send+0x64>)
 801f8ce:	480b      	ldr	r0, [pc, #44]	; (801f8fc <udp_send+0x60>)
 801f8d0:	f005 fa76 	bl	8024dc0 <iprintf>
 801f8d4:	f06f 030f 	mvn.w	r3, #15
 801f8d8:	e008      	b.n	801f8ec <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	1d1a      	adds	r2, r3, #4
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	8a9b      	ldrh	r3, [r3, #20]
 801f8e2:	6839      	ldr	r1, [r7, #0]
 801f8e4:	6878      	ldr	r0, [r7, #4]
 801f8e6:	f000 f80d 	bl	801f904 <udp_sendto>
 801f8ea:	4603      	mov	r3, r0
}
 801f8ec:	4618      	mov	r0, r3
 801f8ee:	3708      	adds	r7, #8
 801f8f0:	46bd      	mov	sp, r7
 801f8f2:	bd80      	pop	{r7, pc}
 801f8f4:	0802d178 	.word	0x0802d178
 801f8f8:	0802d26c 	.word	0x0802d26c
 801f8fc:	0802d1cc 	.word	0x0802d1cc
 801f900:	0802d284 	.word	0x0802d284

0801f904 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801f904:	b580      	push	{r7, lr}
 801f906:	b088      	sub	sp, #32
 801f908:	af02      	add	r7, sp, #8
 801f90a:	60f8      	str	r0, [r7, #12]
 801f90c:	60b9      	str	r1, [r7, #8]
 801f90e:	607a      	str	r2, [r7, #4]
 801f910:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f912:	68fb      	ldr	r3, [r7, #12]
 801f914:	2b00      	cmp	r3, #0
 801f916:	d109      	bne.n	801f92c <udp_sendto+0x28>
 801f918:	4b23      	ldr	r3, [pc, #140]	; (801f9a8 <udp_sendto+0xa4>)
 801f91a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801f91e:	4923      	ldr	r1, [pc, #140]	; (801f9ac <udp_sendto+0xa8>)
 801f920:	4823      	ldr	r0, [pc, #140]	; (801f9b0 <udp_sendto+0xac>)
 801f922:	f005 fa4d 	bl	8024dc0 <iprintf>
 801f926:	f06f 030f 	mvn.w	r3, #15
 801f92a:	e038      	b.n	801f99e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f92c:	68bb      	ldr	r3, [r7, #8]
 801f92e:	2b00      	cmp	r3, #0
 801f930:	d109      	bne.n	801f946 <udp_sendto+0x42>
 801f932:	4b1d      	ldr	r3, [pc, #116]	; (801f9a8 <udp_sendto+0xa4>)
 801f934:	f240 2219 	movw	r2, #537	; 0x219
 801f938:	491e      	ldr	r1, [pc, #120]	; (801f9b4 <udp_sendto+0xb0>)
 801f93a:	481d      	ldr	r0, [pc, #116]	; (801f9b0 <udp_sendto+0xac>)
 801f93c:	f005 fa40 	bl	8024dc0 <iprintf>
 801f940:	f06f 030f 	mvn.w	r3, #15
 801f944:	e02b      	b.n	801f99e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f946:	687b      	ldr	r3, [r7, #4]
 801f948:	2b00      	cmp	r3, #0
 801f94a:	d109      	bne.n	801f960 <udp_sendto+0x5c>
 801f94c:	4b16      	ldr	r3, [pc, #88]	; (801f9a8 <udp_sendto+0xa4>)
 801f94e:	f240 221a 	movw	r2, #538	; 0x21a
 801f952:	4919      	ldr	r1, [pc, #100]	; (801f9b8 <udp_sendto+0xb4>)
 801f954:	4816      	ldr	r0, [pc, #88]	; (801f9b0 <udp_sendto+0xac>)
 801f956:	f005 fa33 	bl	8024dc0 <iprintf>
 801f95a:	f06f 030f 	mvn.w	r3, #15
 801f95e:	e01e      	b.n	801f99e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801f960:	68fb      	ldr	r3, [r7, #12]
 801f962:	7a1b      	ldrb	r3, [r3, #8]
 801f964:	2b00      	cmp	r3, #0
 801f966:	d006      	beq.n	801f976 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801f968:	68fb      	ldr	r3, [r7, #12]
 801f96a:	7a1b      	ldrb	r3, [r3, #8]
 801f96c:	4618      	mov	r0, r3
 801f96e:	f7f8 fa97 	bl	8017ea0 <netif_get_by_index>
 801f972:	6178      	str	r0, [r7, #20]
 801f974:	e003      	b.n	801f97e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801f976:	6878      	ldr	r0, [r7, #4]
 801f978:	f001 fc34 	bl	80211e4 <ip4_route>
 801f97c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801f97e:	697b      	ldr	r3, [r7, #20]
 801f980:	2b00      	cmp	r3, #0
 801f982:	d102      	bne.n	801f98a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801f984:	f06f 0303 	mvn.w	r3, #3
 801f988:	e009      	b.n	801f99e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801f98a:	887a      	ldrh	r2, [r7, #2]
 801f98c:	697b      	ldr	r3, [r7, #20]
 801f98e:	9300      	str	r3, [sp, #0]
 801f990:	4613      	mov	r3, r2
 801f992:	687a      	ldr	r2, [r7, #4]
 801f994:	68b9      	ldr	r1, [r7, #8]
 801f996:	68f8      	ldr	r0, [r7, #12]
 801f998:	f000 f810 	bl	801f9bc <udp_sendto_if>
 801f99c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f99e:	4618      	mov	r0, r3
 801f9a0:	3718      	adds	r7, #24
 801f9a2:	46bd      	mov	sp, r7
 801f9a4:	bd80      	pop	{r7, pc}
 801f9a6:	bf00      	nop
 801f9a8:	0802d178 	.word	0x0802d178
 801f9ac:	0802d29c 	.word	0x0802d29c
 801f9b0:	0802d1cc 	.word	0x0802d1cc
 801f9b4:	0802d2b4 	.word	0x0802d2b4
 801f9b8:	0802d2d0 	.word	0x0802d2d0

0801f9bc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801f9bc:	b580      	push	{r7, lr}
 801f9be:	b088      	sub	sp, #32
 801f9c0:	af02      	add	r7, sp, #8
 801f9c2:	60f8      	str	r0, [r7, #12]
 801f9c4:	60b9      	str	r1, [r7, #8]
 801f9c6:	607a      	str	r2, [r7, #4]
 801f9c8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f9ca:	68fb      	ldr	r3, [r7, #12]
 801f9cc:	2b00      	cmp	r3, #0
 801f9ce:	d109      	bne.n	801f9e4 <udp_sendto_if+0x28>
 801f9d0:	4b2e      	ldr	r3, [pc, #184]	; (801fa8c <udp_sendto_if+0xd0>)
 801f9d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f9d6:	492e      	ldr	r1, [pc, #184]	; (801fa90 <udp_sendto_if+0xd4>)
 801f9d8:	482e      	ldr	r0, [pc, #184]	; (801fa94 <udp_sendto_if+0xd8>)
 801f9da:	f005 f9f1 	bl	8024dc0 <iprintf>
 801f9de:	f06f 030f 	mvn.w	r3, #15
 801f9e2:	e04f      	b.n	801fa84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f9e4:	68bb      	ldr	r3, [r7, #8]
 801f9e6:	2b00      	cmp	r3, #0
 801f9e8:	d109      	bne.n	801f9fe <udp_sendto_if+0x42>
 801f9ea:	4b28      	ldr	r3, [pc, #160]	; (801fa8c <udp_sendto_if+0xd0>)
 801f9ec:	f240 2281 	movw	r2, #641	; 0x281
 801f9f0:	4929      	ldr	r1, [pc, #164]	; (801fa98 <udp_sendto_if+0xdc>)
 801f9f2:	4828      	ldr	r0, [pc, #160]	; (801fa94 <udp_sendto_if+0xd8>)
 801f9f4:	f005 f9e4 	bl	8024dc0 <iprintf>
 801f9f8:	f06f 030f 	mvn.w	r3, #15
 801f9fc:	e042      	b.n	801fa84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f9fe:	687b      	ldr	r3, [r7, #4]
 801fa00:	2b00      	cmp	r3, #0
 801fa02:	d109      	bne.n	801fa18 <udp_sendto_if+0x5c>
 801fa04:	4b21      	ldr	r3, [pc, #132]	; (801fa8c <udp_sendto_if+0xd0>)
 801fa06:	f240 2282 	movw	r2, #642	; 0x282
 801fa0a:	4924      	ldr	r1, [pc, #144]	; (801fa9c <udp_sendto_if+0xe0>)
 801fa0c:	4821      	ldr	r0, [pc, #132]	; (801fa94 <udp_sendto_if+0xd8>)
 801fa0e:	f005 f9d7 	bl	8024dc0 <iprintf>
 801fa12:	f06f 030f 	mvn.w	r3, #15
 801fa16:	e035      	b.n	801fa84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fa18:	6a3b      	ldr	r3, [r7, #32]
 801fa1a:	2b00      	cmp	r3, #0
 801fa1c:	d109      	bne.n	801fa32 <udp_sendto_if+0x76>
 801fa1e:	4b1b      	ldr	r3, [pc, #108]	; (801fa8c <udp_sendto_if+0xd0>)
 801fa20:	f240 2283 	movw	r2, #643	; 0x283
 801fa24:	491e      	ldr	r1, [pc, #120]	; (801faa0 <udp_sendto_if+0xe4>)
 801fa26:	481b      	ldr	r0, [pc, #108]	; (801fa94 <udp_sendto_if+0xd8>)
 801fa28:	f005 f9ca 	bl	8024dc0 <iprintf>
 801fa2c:	f06f 030f 	mvn.w	r3, #15
 801fa30:	e028      	b.n	801fa84 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fa32:	68fb      	ldr	r3, [r7, #12]
 801fa34:	2b00      	cmp	r3, #0
 801fa36:	d009      	beq.n	801fa4c <udp_sendto_if+0x90>
 801fa38:	68fb      	ldr	r3, [r7, #12]
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	d005      	beq.n	801fa4c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801fa40:	68fb      	ldr	r3, [r7, #12]
 801fa42:	681b      	ldr	r3, [r3, #0]
 801fa44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fa48:	2be0      	cmp	r3, #224	; 0xe0
 801fa4a:	d103      	bne.n	801fa54 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801fa4c:	6a3b      	ldr	r3, [r7, #32]
 801fa4e:	3304      	adds	r3, #4
 801fa50:	617b      	str	r3, [r7, #20]
 801fa52:	e00b      	b.n	801fa6c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801fa54:	68fb      	ldr	r3, [r7, #12]
 801fa56:	681a      	ldr	r2, [r3, #0]
 801fa58:	6a3b      	ldr	r3, [r7, #32]
 801fa5a:	3304      	adds	r3, #4
 801fa5c:	681b      	ldr	r3, [r3, #0]
 801fa5e:	429a      	cmp	r2, r3
 801fa60:	d002      	beq.n	801fa68 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801fa62:	f06f 0303 	mvn.w	r3, #3
 801fa66:	e00d      	b.n	801fa84 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801fa68:	68fb      	ldr	r3, [r7, #12]
 801fa6a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801fa6c:	887a      	ldrh	r2, [r7, #2]
 801fa6e:	697b      	ldr	r3, [r7, #20]
 801fa70:	9301      	str	r3, [sp, #4]
 801fa72:	6a3b      	ldr	r3, [r7, #32]
 801fa74:	9300      	str	r3, [sp, #0]
 801fa76:	4613      	mov	r3, r2
 801fa78:	687a      	ldr	r2, [r7, #4]
 801fa7a:	68b9      	ldr	r1, [r7, #8]
 801fa7c:	68f8      	ldr	r0, [r7, #12]
 801fa7e:	f000 f811 	bl	801faa4 <udp_sendto_if_src>
 801fa82:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fa84:	4618      	mov	r0, r3
 801fa86:	3718      	adds	r7, #24
 801fa88:	46bd      	mov	sp, r7
 801fa8a:	bd80      	pop	{r7, pc}
 801fa8c:	0802d178 	.word	0x0802d178
 801fa90:	0802d2ec 	.word	0x0802d2ec
 801fa94:	0802d1cc 	.word	0x0802d1cc
 801fa98:	0802d308 	.word	0x0802d308
 801fa9c:	0802d324 	.word	0x0802d324
 801faa0:	0802d344 	.word	0x0802d344

0801faa4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801faa4:	b580      	push	{r7, lr}
 801faa6:	b08c      	sub	sp, #48	; 0x30
 801faa8:	af04      	add	r7, sp, #16
 801faaa:	60f8      	str	r0, [r7, #12]
 801faac:	60b9      	str	r1, [r7, #8]
 801faae:	607a      	str	r2, [r7, #4]
 801fab0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801fab2:	68fb      	ldr	r3, [r7, #12]
 801fab4:	2b00      	cmp	r3, #0
 801fab6:	d109      	bne.n	801facc <udp_sendto_if_src+0x28>
 801fab8:	4b65      	ldr	r3, [pc, #404]	; (801fc50 <udp_sendto_if_src+0x1ac>)
 801faba:	f240 22d1 	movw	r2, #721	; 0x2d1
 801fabe:	4965      	ldr	r1, [pc, #404]	; (801fc54 <udp_sendto_if_src+0x1b0>)
 801fac0:	4865      	ldr	r0, [pc, #404]	; (801fc58 <udp_sendto_if_src+0x1b4>)
 801fac2:	f005 f97d 	bl	8024dc0 <iprintf>
 801fac6:	f06f 030f 	mvn.w	r3, #15
 801faca:	e0bc      	b.n	801fc46 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801facc:	68bb      	ldr	r3, [r7, #8]
 801face:	2b00      	cmp	r3, #0
 801fad0:	d109      	bne.n	801fae6 <udp_sendto_if_src+0x42>
 801fad2:	4b5f      	ldr	r3, [pc, #380]	; (801fc50 <udp_sendto_if_src+0x1ac>)
 801fad4:	f240 22d2 	movw	r2, #722	; 0x2d2
 801fad8:	4960      	ldr	r1, [pc, #384]	; (801fc5c <udp_sendto_if_src+0x1b8>)
 801fada:	485f      	ldr	r0, [pc, #380]	; (801fc58 <udp_sendto_if_src+0x1b4>)
 801fadc:	f005 f970 	bl	8024dc0 <iprintf>
 801fae0:	f06f 030f 	mvn.w	r3, #15
 801fae4:	e0af      	b.n	801fc46 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fae6:	687b      	ldr	r3, [r7, #4]
 801fae8:	2b00      	cmp	r3, #0
 801faea:	d109      	bne.n	801fb00 <udp_sendto_if_src+0x5c>
 801faec:	4b58      	ldr	r3, [pc, #352]	; (801fc50 <udp_sendto_if_src+0x1ac>)
 801faee:	f240 22d3 	movw	r2, #723	; 0x2d3
 801faf2:	495b      	ldr	r1, [pc, #364]	; (801fc60 <udp_sendto_if_src+0x1bc>)
 801faf4:	4858      	ldr	r0, [pc, #352]	; (801fc58 <udp_sendto_if_src+0x1b4>)
 801faf6:	f005 f963 	bl	8024dc0 <iprintf>
 801fafa:	f06f 030f 	mvn.w	r3, #15
 801fafe:	e0a2      	b.n	801fc46 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801fb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb02:	2b00      	cmp	r3, #0
 801fb04:	d109      	bne.n	801fb1a <udp_sendto_if_src+0x76>
 801fb06:	4b52      	ldr	r3, [pc, #328]	; (801fc50 <udp_sendto_if_src+0x1ac>)
 801fb08:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801fb0c:	4955      	ldr	r1, [pc, #340]	; (801fc64 <udp_sendto_if_src+0x1c0>)
 801fb0e:	4852      	ldr	r0, [pc, #328]	; (801fc58 <udp_sendto_if_src+0x1b4>)
 801fb10:	f005 f956 	bl	8024dc0 <iprintf>
 801fb14:	f06f 030f 	mvn.w	r3, #15
 801fb18:	e095      	b.n	801fc46 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801fb1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb1c:	2b00      	cmp	r3, #0
 801fb1e:	d109      	bne.n	801fb34 <udp_sendto_if_src+0x90>
 801fb20:	4b4b      	ldr	r3, [pc, #300]	; (801fc50 <udp_sendto_if_src+0x1ac>)
 801fb22:	f240 22d5 	movw	r2, #725	; 0x2d5
 801fb26:	4950      	ldr	r1, [pc, #320]	; (801fc68 <udp_sendto_if_src+0x1c4>)
 801fb28:	484b      	ldr	r0, [pc, #300]	; (801fc58 <udp_sendto_if_src+0x1b4>)
 801fb2a:	f005 f949 	bl	8024dc0 <iprintf>
 801fb2e:	f06f 030f 	mvn.w	r3, #15
 801fb32:	e088      	b.n	801fc46 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801fb34:	68fb      	ldr	r3, [r7, #12]
 801fb36:	8a5b      	ldrh	r3, [r3, #18]
 801fb38:	2b00      	cmp	r3, #0
 801fb3a:	d10f      	bne.n	801fb5c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fb3c:	68f9      	ldr	r1, [r7, #12]
 801fb3e:	68fb      	ldr	r3, [r7, #12]
 801fb40:	8a5b      	ldrh	r3, [r3, #18]
 801fb42:	461a      	mov	r2, r3
 801fb44:	68f8      	ldr	r0, [r7, #12]
 801fb46:	f000 f893 	bl	801fc70 <udp_bind>
 801fb4a:	4603      	mov	r3, r0
 801fb4c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801fb4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fb52:	2b00      	cmp	r3, #0
 801fb54:	d002      	beq.n	801fb5c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801fb56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fb5a:	e074      	b.n	801fc46 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801fb5c:	68bb      	ldr	r3, [r7, #8]
 801fb5e:	891b      	ldrh	r3, [r3, #8]
 801fb60:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801fb64:	4293      	cmp	r3, r2
 801fb66:	d902      	bls.n	801fb6e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801fb68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fb6c:	e06b      	b.n	801fc46 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801fb6e:	2108      	movs	r1, #8
 801fb70:	68b8      	ldr	r0, [r7, #8]
 801fb72:	f7f8 fc8d 	bl	8018490 <pbuf_add_header>
 801fb76:	4603      	mov	r3, r0
 801fb78:	2b00      	cmp	r3, #0
 801fb7a:	d015      	beq.n	801fba8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801fb7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fb80:	2108      	movs	r1, #8
 801fb82:	2022      	movs	r0, #34	; 0x22
 801fb84:	f7f8 fa36 	bl	8017ff4 <pbuf_alloc>
 801fb88:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801fb8a:	69fb      	ldr	r3, [r7, #28]
 801fb8c:	2b00      	cmp	r3, #0
 801fb8e:	d102      	bne.n	801fb96 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801fb90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fb94:	e057      	b.n	801fc46 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801fb96:	68bb      	ldr	r3, [r7, #8]
 801fb98:	891b      	ldrh	r3, [r3, #8]
 801fb9a:	2b00      	cmp	r3, #0
 801fb9c:	d006      	beq.n	801fbac <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801fb9e:	68b9      	ldr	r1, [r7, #8]
 801fba0:	69f8      	ldr	r0, [r7, #28]
 801fba2:	f7f8 fe2f 	bl	8018804 <pbuf_chain>
 801fba6:	e001      	b.n	801fbac <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801fba8:	68bb      	ldr	r3, [r7, #8]
 801fbaa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801fbac:	69fb      	ldr	r3, [r7, #28]
 801fbae:	895b      	ldrh	r3, [r3, #10]
 801fbb0:	2b07      	cmp	r3, #7
 801fbb2:	d806      	bhi.n	801fbc2 <udp_sendto_if_src+0x11e>
 801fbb4:	4b26      	ldr	r3, [pc, #152]	; (801fc50 <udp_sendto_if_src+0x1ac>)
 801fbb6:	f240 320d 	movw	r2, #781	; 0x30d
 801fbba:	492c      	ldr	r1, [pc, #176]	; (801fc6c <udp_sendto_if_src+0x1c8>)
 801fbbc:	4826      	ldr	r0, [pc, #152]	; (801fc58 <udp_sendto_if_src+0x1b4>)
 801fbbe:	f005 f8ff 	bl	8024dc0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801fbc2:	69fb      	ldr	r3, [r7, #28]
 801fbc4:	685b      	ldr	r3, [r3, #4]
 801fbc6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801fbc8:	68fb      	ldr	r3, [r7, #12]
 801fbca:	8a5b      	ldrh	r3, [r3, #18]
 801fbcc:	4618      	mov	r0, r3
 801fbce:	f7f6 fe39 	bl	8016844 <lwip_htons>
 801fbd2:	4603      	mov	r3, r0
 801fbd4:	461a      	mov	r2, r3
 801fbd6:	697b      	ldr	r3, [r7, #20]
 801fbd8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801fbda:	887b      	ldrh	r3, [r7, #2]
 801fbdc:	4618      	mov	r0, r3
 801fbde:	f7f6 fe31 	bl	8016844 <lwip_htons>
 801fbe2:	4603      	mov	r3, r0
 801fbe4:	461a      	mov	r2, r3
 801fbe6:	697b      	ldr	r3, [r7, #20]
 801fbe8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801fbea:	697b      	ldr	r3, [r7, #20]
 801fbec:	2200      	movs	r2, #0
 801fbee:	719a      	strb	r2, [r3, #6]
 801fbf0:	2200      	movs	r2, #0
 801fbf2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801fbf4:	69fb      	ldr	r3, [r7, #28]
 801fbf6:	891b      	ldrh	r3, [r3, #8]
 801fbf8:	4618      	mov	r0, r3
 801fbfa:	f7f6 fe23 	bl	8016844 <lwip_htons>
 801fbfe:	4603      	mov	r3, r0
 801fc00:	461a      	mov	r2, r3
 801fc02:	697b      	ldr	r3, [r7, #20]
 801fc04:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801fc06:	2311      	movs	r3, #17
 801fc08:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801fc0a:	68fb      	ldr	r3, [r7, #12]
 801fc0c:	7adb      	ldrb	r3, [r3, #11]
 801fc0e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fc10:	68fb      	ldr	r3, [r7, #12]
 801fc12:	7a9b      	ldrb	r3, [r3, #10]
 801fc14:	7cb9      	ldrb	r1, [r7, #18]
 801fc16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fc18:	9202      	str	r2, [sp, #8]
 801fc1a:	7cfa      	ldrb	r2, [r7, #19]
 801fc1c:	9201      	str	r2, [sp, #4]
 801fc1e:	9300      	str	r3, [sp, #0]
 801fc20:	460b      	mov	r3, r1
 801fc22:	687a      	ldr	r2, [r7, #4]
 801fc24:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fc26:	69f8      	ldr	r0, [r7, #28]
 801fc28:	f001 fcc4 	bl	80215b4 <ip4_output_if_src>
 801fc2c:	4603      	mov	r3, r0
 801fc2e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801fc30:	69fa      	ldr	r2, [r7, #28]
 801fc32:	68bb      	ldr	r3, [r7, #8]
 801fc34:	429a      	cmp	r2, r3
 801fc36:	d004      	beq.n	801fc42 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801fc38:	69f8      	ldr	r0, [r7, #28]
 801fc3a:	f7f8 fcbf 	bl	80185bc <pbuf_free>
    q = NULL;
 801fc3e:	2300      	movs	r3, #0
 801fc40:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801fc42:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801fc46:	4618      	mov	r0, r3
 801fc48:	3720      	adds	r7, #32
 801fc4a:	46bd      	mov	sp, r7
 801fc4c:	bd80      	pop	{r7, pc}
 801fc4e:	bf00      	nop
 801fc50:	0802d178 	.word	0x0802d178
 801fc54:	0802d364 	.word	0x0802d364
 801fc58:	0802d1cc 	.word	0x0802d1cc
 801fc5c:	0802d384 	.word	0x0802d384
 801fc60:	0802d3a4 	.word	0x0802d3a4
 801fc64:	0802d3c8 	.word	0x0802d3c8
 801fc68:	0802d3ec 	.word	0x0802d3ec
 801fc6c:	0802d410 	.word	0x0802d410

0801fc70 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fc70:	b580      	push	{r7, lr}
 801fc72:	b086      	sub	sp, #24
 801fc74:	af00      	add	r7, sp, #0
 801fc76:	60f8      	str	r0, [r7, #12]
 801fc78:	60b9      	str	r1, [r7, #8]
 801fc7a:	4613      	mov	r3, r2
 801fc7c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801fc7e:	68bb      	ldr	r3, [r7, #8]
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d101      	bne.n	801fc88 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801fc84:	4b3f      	ldr	r3, [pc, #252]	; (801fd84 <udp_bind+0x114>)
 801fc86:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fc88:	68fb      	ldr	r3, [r7, #12]
 801fc8a:	2b00      	cmp	r3, #0
 801fc8c:	d109      	bne.n	801fca2 <udp_bind+0x32>
 801fc8e:	4b3e      	ldr	r3, [pc, #248]	; (801fd88 <udp_bind+0x118>)
 801fc90:	f240 32b7 	movw	r2, #951	; 0x3b7
 801fc94:	493d      	ldr	r1, [pc, #244]	; (801fd8c <udp_bind+0x11c>)
 801fc96:	483e      	ldr	r0, [pc, #248]	; (801fd90 <udp_bind+0x120>)
 801fc98:	f005 f892 	bl	8024dc0 <iprintf>
 801fc9c:	f06f 030f 	mvn.w	r3, #15
 801fca0:	e06c      	b.n	801fd7c <udp_bind+0x10c>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801fca2:	2300      	movs	r3, #0
 801fca4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fca6:	4b3b      	ldr	r3, [pc, #236]	; (801fd94 <udp_bind+0x124>)
 801fca8:	681b      	ldr	r3, [r3, #0]
 801fcaa:	617b      	str	r3, [r7, #20]
 801fcac:	e009      	b.n	801fcc2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801fcae:	68fa      	ldr	r2, [r7, #12]
 801fcb0:	697b      	ldr	r3, [r7, #20]
 801fcb2:	429a      	cmp	r2, r3
 801fcb4:	d102      	bne.n	801fcbc <udp_bind+0x4c>
      rebind = 1;
 801fcb6:	2301      	movs	r3, #1
 801fcb8:	74fb      	strb	r3, [r7, #19]
      break;
 801fcba:	e005      	b.n	801fcc8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fcbc:	697b      	ldr	r3, [r7, #20]
 801fcbe:	68db      	ldr	r3, [r3, #12]
 801fcc0:	617b      	str	r3, [r7, #20]
 801fcc2:	697b      	ldr	r3, [r7, #20]
 801fcc4:	2b00      	cmp	r3, #0
 801fcc6:	d1f2      	bne.n	801fcae <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fcc8:	88fb      	ldrh	r3, [r7, #6]
 801fcca:	2b00      	cmp	r3, #0
 801fccc:	d109      	bne.n	801fce2 <udp_bind+0x72>
    port = udp_new_port();
 801fcce:	f7ff fc29 	bl	801f524 <udp_new_port>
 801fcd2:	4603      	mov	r3, r0
 801fcd4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801fcd6:	88fb      	ldrh	r3, [r7, #6]
 801fcd8:	2b00      	cmp	r3, #0
 801fcda:	d138      	bne.n	801fd4e <udp_bind+0xde>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801fcdc:	f06f 0307 	mvn.w	r3, #7
 801fce0:	e04c      	b.n	801fd7c <udp_bind+0x10c>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fce2:	4b2c      	ldr	r3, [pc, #176]	; (801fd94 <udp_bind+0x124>)
 801fce4:	681b      	ldr	r3, [r3, #0]
 801fce6:	617b      	str	r3, [r7, #20]
 801fce8:	e02e      	b.n	801fd48 <udp_bind+0xd8>
      if (pcb != ipcb) {
 801fcea:	68fa      	ldr	r2, [r7, #12]
 801fcec:	697b      	ldr	r3, [r7, #20]
 801fcee:	429a      	cmp	r2, r3
 801fcf0:	d027      	beq.n	801fd42 <udp_bind+0xd2>
        /* By default, we don't allow to bind to a port that any other udp
           PCB is already bound to, unless *all* PCBs with that port have tha
           REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801fcf2:	68fb      	ldr	r3, [r7, #12]
 801fcf4:	7a5b      	ldrb	r3, [r3, #9]
 801fcf6:	f003 0304 	and.w	r3, r3, #4
 801fcfa:	2b00      	cmp	r3, #0
 801fcfc:	d005      	beq.n	801fd0a <udp_bind+0x9a>
            !ip_get_option(ipcb, SOF_REUSEADDR))
 801fcfe:	697b      	ldr	r3, [r7, #20]
 801fd00:	7a5b      	ldrb	r3, [r3, #9]
 801fd02:	f003 0304 	and.w	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	d11b      	bne.n	801fd42 <udp_bind+0xd2>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801fd0a:	697b      	ldr	r3, [r7, #20]
 801fd0c:	8a5b      	ldrh	r3, [r3, #18]
 801fd0e:	88fa      	ldrh	r2, [r7, #6]
 801fd10:	429a      	cmp	r2, r3
 801fd12:	d116      	bne.n	801fd42 <udp_bind+0xd2>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fd14:	697b      	ldr	r3, [r7, #20]
 801fd16:	681a      	ldr	r2, [r3, #0]
 801fd18:	68bb      	ldr	r3, [r7, #8]
 801fd1a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801fd1c:	429a      	cmp	r2, r3
 801fd1e:	d00d      	beq.n	801fd3c <udp_bind+0xcc>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fd20:	68bb      	ldr	r3, [r7, #8]
 801fd22:	2b00      	cmp	r3, #0
 801fd24:	d00a      	beq.n	801fd3c <udp_bind+0xcc>
 801fd26:	68bb      	ldr	r3, [r7, #8]
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	2b00      	cmp	r3, #0
 801fd2c:	d006      	beq.n	801fd3c <udp_bind+0xcc>
              ip_addr_isany(&ipcb->local_ip))) {
 801fd2e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fd30:	2b00      	cmp	r3, #0
 801fd32:	d003      	beq.n	801fd3c <udp_bind+0xcc>
              ip_addr_isany(&ipcb->local_ip))) {
 801fd34:	697b      	ldr	r3, [r7, #20]
 801fd36:	681b      	ldr	r3, [r3, #0]
 801fd38:	2b00      	cmp	r3, #0
 801fd3a:	d102      	bne.n	801fd42 <udp_bind+0xd2>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fd3c:	f06f 0307 	mvn.w	r3, #7
 801fd40:	e01c      	b.n	801fd7c <udp_bind+0x10c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fd42:	697b      	ldr	r3, [r7, #20]
 801fd44:	68db      	ldr	r3, [r3, #12]
 801fd46:	617b      	str	r3, [r7, #20]
 801fd48:	697b      	ldr	r3, [r7, #20]
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	d1cd      	bne.n	801fcea <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fd4e:	68bb      	ldr	r3, [r7, #8]
 801fd50:	2b00      	cmp	r3, #0
 801fd52:	d002      	beq.n	801fd5a <udp_bind+0xea>
 801fd54:	68bb      	ldr	r3, [r7, #8]
 801fd56:	681b      	ldr	r3, [r3, #0]
 801fd58:	e000      	b.n	801fd5c <udp_bind+0xec>
 801fd5a:	2300      	movs	r3, #0
 801fd5c:	68fa      	ldr	r2, [r7, #12]
 801fd5e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	88fa      	ldrh	r2, [r7, #6]
 801fd64:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801fd66:	7cfb      	ldrb	r3, [r7, #19]
 801fd68:	2b00      	cmp	r3, #0
 801fd6a:	d106      	bne.n	801fd7a <udp_bind+0x10a>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801fd6c:	4b09      	ldr	r3, [pc, #36]	; (801fd94 <udp_bind+0x124>)
 801fd6e:	681a      	ldr	r2, [r3, #0]
 801fd70:	68fb      	ldr	r3, [r7, #12]
 801fd72:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fd74:	4a07      	ldr	r2, [pc, #28]	; (801fd94 <udp_bind+0x124>)
 801fd76:	68fb      	ldr	r3, [r7, #12]
 801fd78:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fd7a:	2300      	movs	r3, #0
}
 801fd7c:	4618      	mov	r0, r3
 801fd7e:	3718      	adds	r7, #24
 801fd80:	46bd      	mov	sp, r7
 801fd82:	bd80      	pop	{r7, pc}
 801fd84:	0802df34 	.word	0x0802df34
 801fd88:	0802d178 	.word	0x0802d178
 801fd8c:	0802d440 	.word	0x0802d440
 801fd90:	0802d1cc 	.word	0x0802d1cc
 801fd94:	20016030 	.word	0x20016030

0801fd98 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fd98:	b580      	push	{r7, lr}
 801fd9a:	b086      	sub	sp, #24
 801fd9c:	af00      	add	r7, sp, #0
 801fd9e:	60f8      	str	r0, [r7, #12]
 801fda0:	60b9      	str	r1, [r7, #8]
 801fda2:	4613      	mov	r3, r2
 801fda4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801fda6:	68fb      	ldr	r3, [r7, #12]
 801fda8:	2b00      	cmp	r3, #0
 801fdaa:	d109      	bne.n	801fdc0 <udp_connect+0x28>
 801fdac:	4b2c      	ldr	r3, [pc, #176]	; (801fe60 <udp_connect+0xc8>)
 801fdae:	f240 4235 	movw	r2, #1077	; 0x435
 801fdb2:	492c      	ldr	r1, [pc, #176]	; (801fe64 <udp_connect+0xcc>)
 801fdb4:	482c      	ldr	r0, [pc, #176]	; (801fe68 <udp_connect+0xd0>)
 801fdb6:	f005 f803 	bl	8024dc0 <iprintf>
 801fdba:	f06f 030f 	mvn.w	r3, #15
 801fdbe:	e04b      	b.n	801fe58 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801fdc0:	68bb      	ldr	r3, [r7, #8]
 801fdc2:	2b00      	cmp	r3, #0
 801fdc4:	d109      	bne.n	801fdda <udp_connect+0x42>
 801fdc6:	4b26      	ldr	r3, [pc, #152]	; (801fe60 <udp_connect+0xc8>)
 801fdc8:	f240 4236 	movw	r2, #1078	; 0x436
 801fdcc:	4927      	ldr	r1, [pc, #156]	; (801fe6c <udp_connect+0xd4>)
 801fdce:	4826      	ldr	r0, [pc, #152]	; (801fe68 <udp_connect+0xd0>)
 801fdd0:	f004 fff6 	bl	8024dc0 <iprintf>
 801fdd4:	f06f 030f 	mvn.w	r3, #15
 801fdd8:	e03e      	b.n	801fe58 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801fdda:	68fb      	ldr	r3, [r7, #12]
 801fddc:	8a5b      	ldrh	r3, [r3, #18]
 801fdde:	2b00      	cmp	r3, #0
 801fde0:	d10f      	bne.n	801fe02 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fde2:	68f9      	ldr	r1, [r7, #12]
 801fde4:	68fb      	ldr	r3, [r7, #12]
 801fde6:	8a5b      	ldrh	r3, [r3, #18]
 801fde8:	461a      	mov	r2, r3
 801fdea:	68f8      	ldr	r0, [r7, #12]
 801fdec:	f7ff ff40 	bl	801fc70 <udp_bind>
 801fdf0:	4603      	mov	r3, r0
 801fdf2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801fdf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fdf8:	2b00      	cmp	r3, #0
 801fdfa:	d002      	beq.n	801fe02 <udp_connect+0x6a>
      return err;
 801fdfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801fe00:	e02a      	b.n	801fe58 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801fe02:	68bb      	ldr	r3, [r7, #8]
 801fe04:	2b00      	cmp	r3, #0
 801fe06:	d002      	beq.n	801fe0e <udp_connect+0x76>
 801fe08:	68bb      	ldr	r3, [r7, #8]
 801fe0a:	681b      	ldr	r3, [r3, #0]
 801fe0c:	e000      	b.n	801fe10 <udp_connect+0x78>
 801fe0e:	2300      	movs	r3, #0
 801fe10:	68fa      	ldr	r2, [r7, #12]
 801fe12:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801fe14:	68fb      	ldr	r3, [r7, #12]
 801fe16:	88fa      	ldrh	r2, [r7, #6]
 801fe18:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fe1a:	68fb      	ldr	r3, [r7, #12]
 801fe1c:	7c1b      	ldrb	r3, [r3, #16]
 801fe1e:	f043 0304 	orr.w	r3, r3, #4
 801fe22:	b2da      	uxtb	r2, r3
 801fe24:	68fb      	ldr	r3, [r7, #12]
 801fe26:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fe28:	4b11      	ldr	r3, [pc, #68]	; (801fe70 <udp_connect+0xd8>)
 801fe2a:	681b      	ldr	r3, [r3, #0]
 801fe2c:	617b      	str	r3, [r7, #20]
 801fe2e:	e008      	b.n	801fe42 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801fe30:	68fa      	ldr	r2, [r7, #12]
 801fe32:	697b      	ldr	r3, [r7, #20]
 801fe34:	429a      	cmp	r2, r3
 801fe36:	d101      	bne.n	801fe3c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801fe38:	2300      	movs	r3, #0
 801fe3a:	e00d      	b.n	801fe58 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fe3c:	697b      	ldr	r3, [r7, #20]
 801fe3e:	68db      	ldr	r3, [r3, #12]
 801fe40:	617b      	str	r3, [r7, #20]
 801fe42:	697b      	ldr	r3, [r7, #20]
 801fe44:	2b00      	cmp	r3, #0
 801fe46:	d1f3      	bne.n	801fe30 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801fe48:	4b09      	ldr	r3, [pc, #36]	; (801fe70 <udp_connect+0xd8>)
 801fe4a:	681a      	ldr	r2, [r3, #0]
 801fe4c:	68fb      	ldr	r3, [r7, #12]
 801fe4e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801fe50:	4a07      	ldr	r2, [pc, #28]	; (801fe70 <udp_connect+0xd8>)
 801fe52:	68fb      	ldr	r3, [r7, #12]
 801fe54:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801fe56:	2300      	movs	r3, #0
}
 801fe58:	4618      	mov	r0, r3
 801fe5a:	3718      	adds	r7, #24
 801fe5c:	46bd      	mov	sp, r7
 801fe5e:	bd80      	pop	{r7, pc}
 801fe60:	0802d178 	.word	0x0802d178
 801fe64:	0802d458 	.word	0x0802d458
 801fe68:	0802d1cc 	.word	0x0802d1cc
 801fe6c:	0802d474 	.word	0x0802d474
 801fe70:	20016030 	.word	0x20016030

0801fe74 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 801fe74:	b580      	push	{r7, lr}
 801fe76:	b082      	sub	sp, #8
 801fe78:	af00      	add	r7, sp, #0
 801fe7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801fe7c:	687b      	ldr	r3, [r7, #4]
 801fe7e:	2b00      	cmp	r3, #0
 801fe80:	d107      	bne.n	801fe92 <udp_disconnect+0x1e>
 801fe82:	4b0d      	ldr	r3, [pc, #52]	; (801feb8 <udp_disconnect+0x44>)
 801fe84:	f240 426a 	movw	r2, #1130	; 0x46a
 801fe88:	490c      	ldr	r1, [pc, #48]	; (801febc <udp_disconnect+0x48>)
 801fe8a:	480d      	ldr	r0, [pc, #52]	; (801fec0 <udp_disconnect+0x4c>)
 801fe8c:	f004 ff98 	bl	8024dc0 <iprintf>
 801fe90:	e00f      	b.n	801feb2 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 801fe92:	687b      	ldr	r3, [r7, #4]
 801fe94:	2200      	movs	r2, #0
 801fe96:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 801fe98:	687b      	ldr	r3, [r7, #4]
 801fe9a:	2200      	movs	r2, #0
 801fe9c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801fe9e:	687b      	ldr	r3, [r7, #4]
 801fea0:	2200      	movs	r2, #0
 801fea2:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 801fea4:	687b      	ldr	r3, [r7, #4]
 801fea6:	7c1b      	ldrb	r3, [r3, #16]
 801fea8:	f023 0304 	bic.w	r3, r3, #4
 801feac:	b2da      	uxtb	r2, r3
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	741a      	strb	r2, [r3, #16]
}
 801feb2:	3708      	adds	r7, #8
 801feb4:	46bd      	mov	sp, r7
 801feb6:	bd80      	pop	{r7, pc}
 801feb8:	0802d178 	.word	0x0802d178
 801febc:	0802d490 	.word	0x0802d490
 801fec0:	0802d1cc 	.word	0x0802d1cc

0801fec4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801fec4:	b580      	push	{r7, lr}
 801fec6:	b084      	sub	sp, #16
 801fec8:	af00      	add	r7, sp, #0
 801feca:	60f8      	str	r0, [r7, #12]
 801fecc:	60b9      	str	r1, [r7, #8]
 801fece:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fed0:	68fb      	ldr	r3, [r7, #12]
 801fed2:	2b00      	cmp	r3, #0
 801fed4:	d107      	bne.n	801fee6 <udp_recv+0x22>
 801fed6:	4b08      	ldr	r3, [pc, #32]	; (801fef8 <udp_recv+0x34>)
 801fed8:	f240 428a 	movw	r2, #1162	; 0x48a
 801fedc:	4907      	ldr	r1, [pc, #28]	; (801fefc <udp_recv+0x38>)
 801fede:	4808      	ldr	r0, [pc, #32]	; (801ff00 <udp_recv+0x3c>)
 801fee0:	f004 ff6e 	bl	8024dc0 <iprintf>
 801fee4:	e005      	b.n	801fef2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801fee6:	68fb      	ldr	r3, [r7, #12]
 801fee8:	68ba      	ldr	r2, [r7, #8]
 801feea:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801feec:	68fb      	ldr	r3, [r7, #12]
 801feee:	687a      	ldr	r2, [r7, #4]
 801fef0:	61da      	str	r2, [r3, #28]
}
 801fef2:	3710      	adds	r7, #16
 801fef4:	46bd      	mov	sp, r7
 801fef6:	bd80      	pop	{r7, pc}
 801fef8:	0802d178 	.word	0x0802d178
 801fefc:	0802d4ac 	.word	0x0802d4ac
 801ff00:	0802d1cc 	.word	0x0802d1cc

0801ff04 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801ff04:	b580      	push	{r7, lr}
 801ff06:	b084      	sub	sp, #16
 801ff08:	af00      	add	r7, sp, #0
 801ff0a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	2b00      	cmp	r3, #0
 801ff10:	d107      	bne.n	801ff22 <udp_remove+0x1e>
 801ff12:	4b19      	ldr	r3, [pc, #100]	; (801ff78 <udp_remove+0x74>)
 801ff14:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801ff18:	4918      	ldr	r1, [pc, #96]	; (801ff7c <udp_remove+0x78>)
 801ff1a:	4819      	ldr	r0, [pc, #100]	; (801ff80 <udp_remove+0x7c>)
 801ff1c:	f004 ff50 	bl	8024dc0 <iprintf>
 801ff20:	e026      	b.n	801ff70 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801ff22:	4b18      	ldr	r3, [pc, #96]	; (801ff84 <udp_remove+0x80>)
 801ff24:	681b      	ldr	r3, [r3, #0]
 801ff26:	687a      	ldr	r2, [r7, #4]
 801ff28:	429a      	cmp	r2, r3
 801ff2a:	d105      	bne.n	801ff38 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801ff2c:	4b15      	ldr	r3, [pc, #84]	; (801ff84 <udp_remove+0x80>)
 801ff2e:	681b      	ldr	r3, [r3, #0]
 801ff30:	68db      	ldr	r3, [r3, #12]
 801ff32:	4a14      	ldr	r2, [pc, #80]	; (801ff84 <udp_remove+0x80>)
 801ff34:	6013      	str	r3, [r2, #0]
 801ff36:	e017      	b.n	801ff68 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ff38:	4b12      	ldr	r3, [pc, #72]	; (801ff84 <udp_remove+0x80>)
 801ff3a:	681b      	ldr	r3, [r3, #0]
 801ff3c:	60fb      	str	r3, [r7, #12]
 801ff3e:	e010      	b.n	801ff62 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801ff40:	68fb      	ldr	r3, [r7, #12]
 801ff42:	68db      	ldr	r3, [r3, #12]
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	d009      	beq.n	801ff5c <udp_remove+0x58>
 801ff48:	68fb      	ldr	r3, [r7, #12]
 801ff4a:	68db      	ldr	r3, [r3, #12]
 801ff4c:	687a      	ldr	r2, [r7, #4]
 801ff4e:	429a      	cmp	r2, r3
 801ff50:	d104      	bne.n	801ff5c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801ff52:	687b      	ldr	r3, [r7, #4]
 801ff54:	68da      	ldr	r2, [r3, #12]
 801ff56:	68fb      	ldr	r3, [r7, #12]
 801ff58:	60da      	str	r2, [r3, #12]
        break;
 801ff5a:	e005      	b.n	801ff68 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801ff5c:	68fb      	ldr	r3, [r7, #12]
 801ff5e:	68db      	ldr	r3, [r3, #12]
 801ff60:	60fb      	str	r3, [r7, #12]
 801ff62:	68fb      	ldr	r3, [r7, #12]
 801ff64:	2b00      	cmp	r3, #0
 801ff66:	d1eb      	bne.n	801ff40 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801ff68:	6879      	ldr	r1, [r7, #4]
 801ff6a:	2000      	movs	r0, #0
 801ff6c:	f7f7 fc82 	bl	8017874 <memp_free>
}
 801ff70:	3710      	adds	r7, #16
 801ff72:	46bd      	mov	sp, r7
 801ff74:	bd80      	pop	{r7, pc}
 801ff76:	bf00      	nop
 801ff78:	0802d178 	.word	0x0802d178
 801ff7c:	0802d4c4 	.word	0x0802d4c4
 801ff80:	0802d1cc 	.word	0x0802d1cc
 801ff84:	20016030 	.word	0x20016030

0801ff88 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801ff88:	b580      	push	{r7, lr}
 801ff8a:	b082      	sub	sp, #8
 801ff8c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801ff8e:	2000      	movs	r0, #0
 801ff90:	f7f7 fbfa 	bl	8017788 <memp_malloc>
 801ff94:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801ff96:	687b      	ldr	r3, [r7, #4]
 801ff98:	2b00      	cmp	r3, #0
 801ff9a:	d007      	beq.n	801ffac <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801ff9c:	2220      	movs	r2, #32
 801ff9e:	2100      	movs	r1, #0
 801ffa0:	6878      	ldr	r0, [r7, #4]
 801ffa2:	f005 f8d3 	bl	802514c <memset>
    pcb->ttl = UDP_TTL;
 801ffa6:	687b      	ldr	r3, [r7, #4]
 801ffa8:	22ff      	movs	r2, #255	; 0xff
 801ffaa:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801ffac:	687b      	ldr	r3, [r7, #4]
}
 801ffae:	4618      	mov	r0, r3
 801ffb0:	3708      	adds	r7, #8
 801ffb2:	46bd      	mov	sp, r7
 801ffb4:	bd80      	pop	{r7, pc}

0801ffb6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801ffb6:	b580      	push	{r7, lr}
 801ffb8:	b084      	sub	sp, #16
 801ffba:	af00      	add	r7, sp, #0
 801ffbc:	4603      	mov	r3, r0
 801ffbe:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801ffc0:	f7ff ffe2 	bl	801ff88 <udp_new>
 801ffc4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801ffc6:	68fb      	ldr	r3, [r7, #12]
}
 801ffc8:	4618      	mov	r0, r3
 801ffca:	3710      	adds	r7, #16
 801ffcc:	46bd      	mov	sp, r7
 801ffce:	bd80      	pop	{r7, pc}

0801ffd0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801ffd0:	b480      	push	{r7}
 801ffd2:	b085      	sub	sp, #20
 801ffd4:	af00      	add	r7, sp, #0
 801ffd6:	6078      	str	r0, [r7, #4]
 801ffd8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ffda:	687b      	ldr	r3, [r7, #4]
 801ffdc:	2b00      	cmp	r3, #0
 801ffde:	d01e      	beq.n	802001e <udp_netif_ip_addr_changed+0x4e>
 801ffe0:	687b      	ldr	r3, [r7, #4]
 801ffe2:	681b      	ldr	r3, [r3, #0]
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d01a      	beq.n	802001e <udp_netif_ip_addr_changed+0x4e>
 801ffe8:	683b      	ldr	r3, [r7, #0]
 801ffea:	2b00      	cmp	r3, #0
 801ffec:	d017      	beq.n	802001e <udp_netif_ip_addr_changed+0x4e>
 801ffee:	683b      	ldr	r3, [r7, #0]
 801fff0:	681b      	ldr	r3, [r3, #0]
 801fff2:	2b00      	cmp	r3, #0
 801fff4:	d013      	beq.n	802001e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fff6:	4b0d      	ldr	r3, [pc, #52]	; (802002c <udp_netif_ip_addr_changed+0x5c>)
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	60fb      	str	r3, [r7, #12]
 801fffc:	e00c      	b.n	8020018 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801fffe:	68fb      	ldr	r3, [r7, #12]
 8020000:	681a      	ldr	r2, [r3, #0]
 8020002:	687b      	ldr	r3, [r7, #4]
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	429a      	cmp	r2, r3
 8020008:	d103      	bne.n	8020012 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802000a:	683b      	ldr	r3, [r7, #0]
 802000c:	681a      	ldr	r2, [r3, #0]
 802000e:	68fb      	ldr	r3, [r7, #12]
 8020010:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8020012:	68fb      	ldr	r3, [r7, #12]
 8020014:	68db      	ldr	r3, [r3, #12]
 8020016:	60fb      	str	r3, [r7, #12]
 8020018:	68fb      	ldr	r3, [r7, #12]
 802001a:	2b00      	cmp	r3, #0
 802001c:	d1ef      	bne.n	801fffe <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 802001e:	bf00      	nop
 8020020:	3714      	adds	r7, #20
 8020022:	46bd      	mov	sp, r7
 8020024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020028:	4770      	bx	lr
 802002a:	bf00      	nop
 802002c:	20016030 	.word	0x20016030

08020030 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8020030:	b580      	push	{r7, lr}
 8020032:	b082      	sub	sp, #8
 8020034:	af00      	add	r7, sp, #0
 8020036:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8020038:	4915      	ldr	r1, [pc, #84]	; (8020090 <etharp_free_entry+0x60>)
 802003a:	687a      	ldr	r2, [r7, #4]
 802003c:	4613      	mov	r3, r2
 802003e:	005b      	lsls	r3, r3, #1
 8020040:	4413      	add	r3, r2
 8020042:	00db      	lsls	r3, r3, #3
 8020044:	440b      	add	r3, r1
 8020046:	681b      	ldr	r3, [r3, #0]
 8020048:	2b00      	cmp	r3, #0
 802004a:	d013      	beq.n	8020074 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 802004c:	4910      	ldr	r1, [pc, #64]	; (8020090 <etharp_free_entry+0x60>)
 802004e:	687a      	ldr	r2, [r7, #4]
 8020050:	4613      	mov	r3, r2
 8020052:	005b      	lsls	r3, r3, #1
 8020054:	4413      	add	r3, r2
 8020056:	00db      	lsls	r3, r3, #3
 8020058:	440b      	add	r3, r1
 802005a:	681b      	ldr	r3, [r3, #0]
 802005c:	4618      	mov	r0, r3
 802005e:	f7f8 faad 	bl	80185bc <pbuf_free>
    arp_table[i].q = NULL;
 8020062:	490b      	ldr	r1, [pc, #44]	; (8020090 <etharp_free_entry+0x60>)
 8020064:	687a      	ldr	r2, [r7, #4]
 8020066:	4613      	mov	r3, r2
 8020068:	005b      	lsls	r3, r3, #1
 802006a:	4413      	add	r3, r2
 802006c:	00db      	lsls	r3, r3, #3
 802006e:	440b      	add	r3, r1
 8020070:	2200      	movs	r2, #0
 8020072:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8020074:	4906      	ldr	r1, [pc, #24]	; (8020090 <etharp_free_entry+0x60>)
 8020076:	687a      	ldr	r2, [r7, #4]
 8020078:	4613      	mov	r3, r2
 802007a:	005b      	lsls	r3, r3, #1
 802007c:	4413      	add	r3, r2
 802007e:	00db      	lsls	r3, r3, #3
 8020080:	440b      	add	r3, r1
 8020082:	3314      	adds	r3, #20
 8020084:	2200      	movs	r2, #0
 8020086:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8020088:	bf00      	nop
 802008a:	3708      	adds	r7, #8
 802008c:	46bd      	mov	sp, r7
 802008e:	bd80      	pop	{r7, pc}
 8020090:	20016034 	.word	0x20016034

08020094 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8020094:	b580      	push	{r7, lr}
 8020096:	b082      	sub	sp, #8
 8020098:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802009a:	2300      	movs	r3, #0
 802009c:	607b      	str	r3, [r7, #4]
 802009e:	e096      	b.n	80201ce <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80200a0:	494f      	ldr	r1, [pc, #316]	; (80201e0 <etharp_tmr+0x14c>)
 80200a2:	687a      	ldr	r2, [r7, #4]
 80200a4:	4613      	mov	r3, r2
 80200a6:	005b      	lsls	r3, r3, #1
 80200a8:	4413      	add	r3, r2
 80200aa:	00db      	lsls	r3, r3, #3
 80200ac:	440b      	add	r3, r1
 80200ae:	3314      	adds	r3, #20
 80200b0:	781b      	ldrb	r3, [r3, #0]
 80200b2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80200b4:	78fb      	ldrb	r3, [r7, #3]
 80200b6:	2b00      	cmp	r3, #0
 80200b8:	f000 8086 	beq.w	80201c8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80200bc:	4948      	ldr	r1, [pc, #288]	; (80201e0 <etharp_tmr+0x14c>)
 80200be:	687a      	ldr	r2, [r7, #4]
 80200c0:	4613      	mov	r3, r2
 80200c2:	005b      	lsls	r3, r3, #1
 80200c4:	4413      	add	r3, r2
 80200c6:	00db      	lsls	r3, r3, #3
 80200c8:	440b      	add	r3, r1
 80200ca:	3312      	adds	r3, #18
 80200cc:	881b      	ldrh	r3, [r3, #0]
 80200ce:	3301      	adds	r3, #1
 80200d0:	b298      	uxth	r0, r3
 80200d2:	4943      	ldr	r1, [pc, #268]	; (80201e0 <etharp_tmr+0x14c>)
 80200d4:	687a      	ldr	r2, [r7, #4]
 80200d6:	4613      	mov	r3, r2
 80200d8:	005b      	lsls	r3, r3, #1
 80200da:	4413      	add	r3, r2
 80200dc:	00db      	lsls	r3, r3, #3
 80200de:	440b      	add	r3, r1
 80200e0:	3312      	adds	r3, #18
 80200e2:	4602      	mov	r2, r0
 80200e4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80200e6:	493e      	ldr	r1, [pc, #248]	; (80201e0 <etharp_tmr+0x14c>)
 80200e8:	687a      	ldr	r2, [r7, #4]
 80200ea:	4613      	mov	r3, r2
 80200ec:	005b      	lsls	r3, r3, #1
 80200ee:	4413      	add	r3, r2
 80200f0:	00db      	lsls	r3, r3, #3
 80200f2:	440b      	add	r3, r1
 80200f4:	3312      	adds	r3, #18
 80200f6:	881b      	ldrh	r3, [r3, #0]
 80200f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80200fc:	d215      	bcs.n	802012a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80200fe:	4938      	ldr	r1, [pc, #224]	; (80201e0 <etharp_tmr+0x14c>)
 8020100:	687a      	ldr	r2, [r7, #4]
 8020102:	4613      	mov	r3, r2
 8020104:	005b      	lsls	r3, r3, #1
 8020106:	4413      	add	r3, r2
 8020108:	00db      	lsls	r3, r3, #3
 802010a:	440b      	add	r3, r1
 802010c:	3314      	adds	r3, #20
 802010e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8020110:	2b01      	cmp	r3, #1
 8020112:	d10e      	bne.n	8020132 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8020114:	4932      	ldr	r1, [pc, #200]	; (80201e0 <etharp_tmr+0x14c>)
 8020116:	687a      	ldr	r2, [r7, #4]
 8020118:	4613      	mov	r3, r2
 802011a:	005b      	lsls	r3, r3, #1
 802011c:	4413      	add	r3, r2
 802011e:	00db      	lsls	r3, r3, #3
 8020120:	440b      	add	r3, r1
 8020122:	3312      	adds	r3, #18
 8020124:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8020126:	2b04      	cmp	r3, #4
 8020128:	d903      	bls.n	8020132 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802012a:	6878      	ldr	r0, [r7, #4]
 802012c:	f7ff ff80 	bl	8020030 <etharp_free_entry>
 8020130:	e04a      	b.n	80201c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8020132:	492b      	ldr	r1, [pc, #172]	; (80201e0 <etharp_tmr+0x14c>)
 8020134:	687a      	ldr	r2, [r7, #4]
 8020136:	4613      	mov	r3, r2
 8020138:	005b      	lsls	r3, r3, #1
 802013a:	4413      	add	r3, r2
 802013c:	00db      	lsls	r3, r3, #3
 802013e:	440b      	add	r3, r1
 8020140:	3314      	adds	r3, #20
 8020142:	781b      	ldrb	r3, [r3, #0]
 8020144:	2b03      	cmp	r3, #3
 8020146:	d10a      	bne.n	802015e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8020148:	4925      	ldr	r1, [pc, #148]	; (80201e0 <etharp_tmr+0x14c>)
 802014a:	687a      	ldr	r2, [r7, #4]
 802014c:	4613      	mov	r3, r2
 802014e:	005b      	lsls	r3, r3, #1
 8020150:	4413      	add	r3, r2
 8020152:	00db      	lsls	r3, r3, #3
 8020154:	440b      	add	r3, r1
 8020156:	3314      	adds	r3, #20
 8020158:	2204      	movs	r2, #4
 802015a:	701a      	strb	r2, [r3, #0]
 802015c:	e034      	b.n	80201c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802015e:	4920      	ldr	r1, [pc, #128]	; (80201e0 <etharp_tmr+0x14c>)
 8020160:	687a      	ldr	r2, [r7, #4]
 8020162:	4613      	mov	r3, r2
 8020164:	005b      	lsls	r3, r3, #1
 8020166:	4413      	add	r3, r2
 8020168:	00db      	lsls	r3, r3, #3
 802016a:	440b      	add	r3, r1
 802016c:	3314      	adds	r3, #20
 802016e:	781b      	ldrb	r3, [r3, #0]
 8020170:	2b04      	cmp	r3, #4
 8020172:	d10a      	bne.n	802018a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8020174:	491a      	ldr	r1, [pc, #104]	; (80201e0 <etharp_tmr+0x14c>)
 8020176:	687a      	ldr	r2, [r7, #4]
 8020178:	4613      	mov	r3, r2
 802017a:	005b      	lsls	r3, r3, #1
 802017c:	4413      	add	r3, r2
 802017e:	00db      	lsls	r3, r3, #3
 8020180:	440b      	add	r3, r1
 8020182:	3314      	adds	r3, #20
 8020184:	2202      	movs	r2, #2
 8020186:	701a      	strb	r2, [r3, #0]
 8020188:	e01e      	b.n	80201c8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802018a:	4915      	ldr	r1, [pc, #84]	; (80201e0 <etharp_tmr+0x14c>)
 802018c:	687a      	ldr	r2, [r7, #4]
 802018e:	4613      	mov	r3, r2
 8020190:	005b      	lsls	r3, r3, #1
 8020192:	4413      	add	r3, r2
 8020194:	00db      	lsls	r3, r3, #3
 8020196:	440b      	add	r3, r1
 8020198:	3314      	adds	r3, #20
 802019a:	781b      	ldrb	r3, [r3, #0]
 802019c:	2b01      	cmp	r3, #1
 802019e:	d113      	bne.n	80201c8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80201a0:	490f      	ldr	r1, [pc, #60]	; (80201e0 <etharp_tmr+0x14c>)
 80201a2:	687a      	ldr	r2, [r7, #4]
 80201a4:	4613      	mov	r3, r2
 80201a6:	005b      	lsls	r3, r3, #1
 80201a8:	4413      	add	r3, r2
 80201aa:	00db      	lsls	r3, r3, #3
 80201ac:	440b      	add	r3, r1
 80201ae:	3308      	adds	r3, #8
 80201b0:	6818      	ldr	r0, [r3, #0]
 80201b2:	687a      	ldr	r2, [r7, #4]
 80201b4:	4613      	mov	r3, r2
 80201b6:	005b      	lsls	r3, r3, #1
 80201b8:	4413      	add	r3, r2
 80201ba:	00db      	lsls	r3, r3, #3
 80201bc:	4a08      	ldr	r2, [pc, #32]	; (80201e0 <etharp_tmr+0x14c>)
 80201be:	4413      	add	r3, r2
 80201c0:	3304      	adds	r3, #4
 80201c2:	4619      	mov	r1, r3
 80201c4:	f000 fe6e 	bl	8020ea4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80201c8:	687b      	ldr	r3, [r7, #4]
 80201ca:	3301      	adds	r3, #1
 80201cc:	607b      	str	r3, [r7, #4]
 80201ce:	687b      	ldr	r3, [r7, #4]
 80201d0:	2b09      	cmp	r3, #9
 80201d2:	f77f af65 	ble.w	80200a0 <etharp_tmr+0xc>
      }
    }
  }
}
 80201d6:	bf00      	nop
 80201d8:	bf00      	nop
 80201da:	3708      	adds	r7, #8
 80201dc:	46bd      	mov	sp, r7
 80201de:	bd80      	pop	{r7, pc}
 80201e0:	20016034 	.word	0x20016034

080201e4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80201e4:	b580      	push	{r7, lr}
 80201e6:	b08a      	sub	sp, #40	; 0x28
 80201e8:	af00      	add	r7, sp, #0
 80201ea:	60f8      	str	r0, [r7, #12]
 80201ec:	460b      	mov	r3, r1
 80201ee:	607a      	str	r2, [r7, #4]
 80201f0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80201f2:	230a      	movs	r3, #10
 80201f4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80201f6:	230a      	movs	r3, #10
 80201f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80201fa:	230a      	movs	r3, #10
 80201fc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80201fe:	2300      	movs	r3, #0
 8020200:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8020202:	230a      	movs	r3, #10
 8020204:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8020206:	2300      	movs	r3, #0
 8020208:	83bb      	strh	r3, [r7, #28]
 802020a:	2300      	movs	r3, #0
 802020c:	837b      	strh	r3, [r7, #26]
 802020e:	2300      	movs	r3, #0
 8020210:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020212:	2300      	movs	r3, #0
 8020214:	843b      	strh	r3, [r7, #32]
 8020216:	e0ae      	b.n	8020376 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8020218:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802021c:	49a6      	ldr	r1, [pc, #664]	; (80204b8 <etharp_find_entry+0x2d4>)
 802021e:	4613      	mov	r3, r2
 8020220:	005b      	lsls	r3, r3, #1
 8020222:	4413      	add	r3, r2
 8020224:	00db      	lsls	r3, r3, #3
 8020226:	440b      	add	r3, r1
 8020228:	3314      	adds	r3, #20
 802022a:	781b      	ldrb	r3, [r3, #0]
 802022c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 802022e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020232:	2b0a      	cmp	r3, #10
 8020234:	d105      	bne.n	8020242 <etharp_find_entry+0x5e>
 8020236:	7dfb      	ldrb	r3, [r7, #23]
 8020238:	2b00      	cmp	r3, #0
 802023a:	d102      	bne.n	8020242 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 802023c:	8c3b      	ldrh	r3, [r7, #32]
 802023e:	847b      	strh	r3, [r7, #34]	; 0x22
 8020240:	e095      	b.n	802036e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8020242:	7dfb      	ldrb	r3, [r7, #23]
 8020244:	2b00      	cmp	r3, #0
 8020246:	f000 8092 	beq.w	802036e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 802024a:	7dfb      	ldrb	r3, [r7, #23]
 802024c:	2b01      	cmp	r3, #1
 802024e:	d009      	beq.n	8020264 <etharp_find_entry+0x80>
 8020250:	7dfb      	ldrb	r3, [r7, #23]
 8020252:	2b01      	cmp	r3, #1
 8020254:	d806      	bhi.n	8020264 <etharp_find_entry+0x80>
 8020256:	4b99      	ldr	r3, [pc, #612]	; (80204bc <etharp_find_entry+0x2d8>)
 8020258:	f240 1223 	movw	r2, #291	; 0x123
 802025c:	4998      	ldr	r1, [pc, #608]	; (80204c0 <etharp_find_entry+0x2dc>)
 802025e:	4899      	ldr	r0, [pc, #612]	; (80204c4 <etharp_find_entry+0x2e0>)
 8020260:	f004 fdae 	bl	8024dc0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8020264:	68fb      	ldr	r3, [r7, #12]
 8020266:	2b00      	cmp	r3, #0
 8020268:	d020      	beq.n	80202ac <etharp_find_entry+0xc8>
 802026a:	68fb      	ldr	r3, [r7, #12]
 802026c:	6819      	ldr	r1, [r3, #0]
 802026e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020272:	4891      	ldr	r0, [pc, #580]	; (80204b8 <etharp_find_entry+0x2d4>)
 8020274:	4613      	mov	r3, r2
 8020276:	005b      	lsls	r3, r3, #1
 8020278:	4413      	add	r3, r2
 802027a:	00db      	lsls	r3, r3, #3
 802027c:	4403      	add	r3, r0
 802027e:	3304      	adds	r3, #4
 8020280:	681b      	ldr	r3, [r3, #0]
 8020282:	4299      	cmp	r1, r3
 8020284:	d112      	bne.n	80202ac <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8020286:	687b      	ldr	r3, [r7, #4]
 8020288:	2b00      	cmp	r3, #0
 802028a:	d00c      	beq.n	80202a6 <etharp_find_entry+0xc2>
 802028c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020290:	4989      	ldr	r1, [pc, #548]	; (80204b8 <etharp_find_entry+0x2d4>)
 8020292:	4613      	mov	r3, r2
 8020294:	005b      	lsls	r3, r3, #1
 8020296:	4413      	add	r3, r2
 8020298:	00db      	lsls	r3, r3, #3
 802029a:	440b      	add	r3, r1
 802029c:	3308      	adds	r3, #8
 802029e:	681b      	ldr	r3, [r3, #0]
 80202a0:	687a      	ldr	r2, [r7, #4]
 80202a2:	429a      	cmp	r2, r3
 80202a4:	d102      	bne.n	80202ac <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80202a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80202aa:	e100      	b.n	80204ae <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80202ac:	7dfb      	ldrb	r3, [r7, #23]
 80202ae:	2b01      	cmp	r3, #1
 80202b0:	d140      	bne.n	8020334 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80202b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80202b6:	4980      	ldr	r1, [pc, #512]	; (80204b8 <etharp_find_entry+0x2d4>)
 80202b8:	4613      	mov	r3, r2
 80202ba:	005b      	lsls	r3, r3, #1
 80202bc:	4413      	add	r3, r2
 80202be:	00db      	lsls	r3, r3, #3
 80202c0:	440b      	add	r3, r1
 80202c2:	681b      	ldr	r3, [r3, #0]
 80202c4:	2b00      	cmp	r3, #0
 80202c6:	d01a      	beq.n	80202fe <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80202c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80202cc:	497a      	ldr	r1, [pc, #488]	; (80204b8 <etharp_find_entry+0x2d4>)
 80202ce:	4613      	mov	r3, r2
 80202d0:	005b      	lsls	r3, r3, #1
 80202d2:	4413      	add	r3, r2
 80202d4:	00db      	lsls	r3, r3, #3
 80202d6:	440b      	add	r3, r1
 80202d8:	3312      	adds	r3, #18
 80202da:	881b      	ldrh	r3, [r3, #0]
 80202dc:	8bba      	ldrh	r2, [r7, #28]
 80202de:	429a      	cmp	r2, r3
 80202e0:	d845      	bhi.n	802036e <etharp_find_entry+0x18a>
            old_queue = i;
 80202e2:	8c3b      	ldrh	r3, [r7, #32]
 80202e4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80202e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80202ea:	4973      	ldr	r1, [pc, #460]	; (80204b8 <etharp_find_entry+0x2d4>)
 80202ec:	4613      	mov	r3, r2
 80202ee:	005b      	lsls	r3, r3, #1
 80202f0:	4413      	add	r3, r2
 80202f2:	00db      	lsls	r3, r3, #3
 80202f4:	440b      	add	r3, r1
 80202f6:	3312      	adds	r3, #18
 80202f8:	881b      	ldrh	r3, [r3, #0]
 80202fa:	83bb      	strh	r3, [r7, #28]
 80202fc:	e037      	b.n	802036e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80202fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020302:	496d      	ldr	r1, [pc, #436]	; (80204b8 <etharp_find_entry+0x2d4>)
 8020304:	4613      	mov	r3, r2
 8020306:	005b      	lsls	r3, r3, #1
 8020308:	4413      	add	r3, r2
 802030a:	00db      	lsls	r3, r3, #3
 802030c:	440b      	add	r3, r1
 802030e:	3312      	adds	r3, #18
 8020310:	881b      	ldrh	r3, [r3, #0]
 8020312:	8b7a      	ldrh	r2, [r7, #26]
 8020314:	429a      	cmp	r2, r3
 8020316:	d82a      	bhi.n	802036e <etharp_find_entry+0x18a>
            old_pending = i;
 8020318:	8c3b      	ldrh	r3, [r7, #32]
 802031a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 802031c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020320:	4965      	ldr	r1, [pc, #404]	; (80204b8 <etharp_find_entry+0x2d4>)
 8020322:	4613      	mov	r3, r2
 8020324:	005b      	lsls	r3, r3, #1
 8020326:	4413      	add	r3, r2
 8020328:	00db      	lsls	r3, r3, #3
 802032a:	440b      	add	r3, r1
 802032c:	3312      	adds	r3, #18
 802032e:	881b      	ldrh	r3, [r3, #0]
 8020330:	837b      	strh	r3, [r7, #26]
 8020332:	e01c      	b.n	802036e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8020334:	7dfb      	ldrb	r3, [r7, #23]
 8020336:	2b01      	cmp	r3, #1
 8020338:	d919      	bls.n	802036e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802033a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802033e:	495e      	ldr	r1, [pc, #376]	; (80204b8 <etharp_find_entry+0x2d4>)
 8020340:	4613      	mov	r3, r2
 8020342:	005b      	lsls	r3, r3, #1
 8020344:	4413      	add	r3, r2
 8020346:	00db      	lsls	r3, r3, #3
 8020348:	440b      	add	r3, r1
 802034a:	3312      	adds	r3, #18
 802034c:	881b      	ldrh	r3, [r3, #0]
 802034e:	8b3a      	ldrh	r2, [r7, #24]
 8020350:	429a      	cmp	r2, r3
 8020352:	d80c      	bhi.n	802036e <etharp_find_entry+0x18a>
            old_stable = i;
 8020354:	8c3b      	ldrh	r3, [r7, #32]
 8020356:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8020358:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802035c:	4956      	ldr	r1, [pc, #344]	; (80204b8 <etharp_find_entry+0x2d4>)
 802035e:	4613      	mov	r3, r2
 8020360:	005b      	lsls	r3, r3, #1
 8020362:	4413      	add	r3, r2
 8020364:	00db      	lsls	r3, r3, #3
 8020366:	440b      	add	r3, r1
 8020368:	3312      	adds	r3, #18
 802036a:	881b      	ldrh	r3, [r3, #0]
 802036c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802036e:	8c3b      	ldrh	r3, [r7, #32]
 8020370:	3301      	adds	r3, #1
 8020372:	b29b      	uxth	r3, r3
 8020374:	843b      	strh	r3, [r7, #32]
 8020376:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802037a:	2b09      	cmp	r3, #9
 802037c:	f77f af4c 	ble.w	8020218 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8020380:	7afb      	ldrb	r3, [r7, #11]
 8020382:	f003 0302 	and.w	r3, r3, #2
 8020386:	2b00      	cmp	r3, #0
 8020388:	d108      	bne.n	802039c <etharp_find_entry+0x1b8>
 802038a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802038e:	2b0a      	cmp	r3, #10
 8020390:	d107      	bne.n	80203a2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8020392:	7afb      	ldrb	r3, [r7, #11]
 8020394:	f003 0301 	and.w	r3, r3, #1
 8020398:	2b00      	cmp	r3, #0
 802039a:	d102      	bne.n	80203a2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 802039c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80203a0:	e085      	b.n	80204ae <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80203a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80203a6:	2b09      	cmp	r3, #9
 80203a8:	dc02      	bgt.n	80203b0 <etharp_find_entry+0x1cc>
    i = empty;
 80203aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80203ac:	843b      	strh	r3, [r7, #32]
 80203ae:	e039      	b.n	8020424 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80203b0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80203b4:	2b09      	cmp	r3, #9
 80203b6:	dc14      	bgt.n	80203e2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80203b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80203ba:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80203bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80203c0:	493d      	ldr	r1, [pc, #244]	; (80204b8 <etharp_find_entry+0x2d4>)
 80203c2:	4613      	mov	r3, r2
 80203c4:	005b      	lsls	r3, r3, #1
 80203c6:	4413      	add	r3, r2
 80203c8:	00db      	lsls	r3, r3, #3
 80203ca:	440b      	add	r3, r1
 80203cc:	681b      	ldr	r3, [r3, #0]
 80203ce:	2b00      	cmp	r3, #0
 80203d0:	d018      	beq.n	8020404 <etharp_find_entry+0x220>
 80203d2:	4b3a      	ldr	r3, [pc, #232]	; (80204bc <etharp_find_entry+0x2d8>)
 80203d4:	f240 126d 	movw	r2, #365	; 0x16d
 80203d8:	493b      	ldr	r1, [pc, #236]	; (80204c8 <etharp_find_entry+0x2e4>)
 80203da:	483a      	ldr	r0, [pc, #232]	; (80204c4 <etharp_find_entry+0x2e0>)
 80203dc:	f004 fcf0 	bl	8024dc0 <iprintf>
 80203e0:	e010      	b.n	8020404 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80203e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80203e6:	2b09      	cmp	r3, #9
 80203e8:	dc02      	bgt.n	80203f0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80203ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80203ec:	843b      	strh	r3, [r7, #32]
 80203ee:	e009      	b.n	8020404 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80203f0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80203f4:	2b09      	cmp	r3, #9
 80203f6:	dc02      	bgt.n	80203fe <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80203f8:	8bfb      	ldrh	r3, [r7, #30]
 80203fa:	843b      	strh	r3, [r7, #32]
 80203fc:	e002      	b.n	8020404 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80203fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020402:	e054      	b.n	80204ae <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020404:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020408:	2b09      	cmp	r3, #9
 802040a:	dd06      	ble.n	802041a <etharp_find_entry+0x236>
 802040c:	4b2b      	ldr	r3, [pc, #172]	; (80204bc <etharp_find_entry+0x2d8>)
 802040e:	f240 127f 	movw	r2, #383	; 0x17f
 8020412:	492e      	ldr	r1, [pc, #184]	; (80204cc <etharp_find_entry+0x2e8>)
 8020414:	482b      	ldr	r0, [pc, #172]	; (80204c4 <etharp_find_entry+0x2e0>)
 8020416:	f004 fcd3 	bl	8024dc0 <iprintf>
    etharp_free_entry(i);
 802041a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802041e:	4618      	mov	r0, r3
 8020420:	f7ff fe06 	bl	8020030 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020424:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020428:	2b09      	cmp	r3, #9
 802042a:	dd06      	ble.n	802043a <etharp_find_entry+0x256>
 802042c:	4b23      	ldr	r3, [pc, #140]	; (80204bc <etharp_find_entry+0x2d8>)
 802042e:	f240 1283 	movw	r2, #387	; 0x183
 8020432:	4926      	ldr	r1, [pc, #152]	; (80204cc <etharp_find_entry+0x2e8>)
 8020434:	4823      	ldr	r0, [pc, #140]	; (80204c4 <etharp_find_entry+0x2e0>)
 8020436:	f004 fcc3 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 802043a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802043e:	491e      	ldr	r1, [pc, #120]	; (80204b8 <etharp_find_entry+0x2d4>)
 8020440:	4613      	mov	r3, r2
 8020442:	005b      	lsls	r3, r3, #1
 8020444:	4413      	add	r3, r2
 8020446:	00db      	lsls	r3, r3, #3
 8020448:	440b      	add	r3, r1
 802044a:	3314      	adds	r3, #20
 802044c:	781b      	ldrb	r3, [r3, #0]
 802044e:	2b00      	cmp	r3, #0
 8020450:	d006      	beq.n	8020460 <etharp_find_entry+0x27c>
 8020452:	4b1a      	ldr	r3, [pc, #104]	; (80204bc <etharp_find_entry+0x2d8>)
 8020454:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8020458:	491d      	ldr	r1, [pc, #116]	; (80204d0 <etharp_find_entry+0x2ec>)
 802045a:	481a      	ldr	r0, [pc, #104]	; (80204c4 <etharp_find_entry+0x2e0>)
 802045c:	f004 fcb0 	bl	8024dc0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8020460:	68fb      	ldr	r3, [r7, #12]
 8020462:	2b00      	cmp	r3, #0
 8020464:	d00b      	beq.n	802047e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8020466:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802046a:	68fb      	ldr	r3, [r7, #12]
 802046c:	6819      	ldr	r1, [r3, #0]
 802046e:	4812      	ldr	r0, [pc, #72]	; (80204b8 <etharp_find_entry+0x2d4>)
 8020470:	4613      	mov	r3, r2
 8020472:	005b      	lsls	r3, r3, #1
 8020474:	4413      	add	r3, r2
 8020476:	00db      	lsls	r3, r3, #3
 8020478:	4403      	add	r3, r0
 802047a:	3304      	adds	r3, #4
 802047c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 802047e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020482:	490d      	ldr	r1, [pc, #52]	; (80204b8 <etharp_find_entry+0x2d4>)
 8020484:	4613      	mov	r3, r2
 8020486:	005b      	lsls	r3, r3, #1
 8020488:	4413      	add	r3, r2
 802048a:	00db      	lsls	r3, r3, #3
 802048c:	440b      	add	r3, r1
 802048e:	3312      	adds	r3, #18
 8020490:	2200      	movs	r2, #0
 8020492:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8020494:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020498:	4907      	ldr	r1, [pc, #28]	; (80204b8 <etharp_find_entry+0x2d4>)
 802049a:	4613      	mov	r3, r2
 802049c:	005b      	lsls	r3, r3, #1
 802049e:	4413      	add	r3, r2
 80204a0:	00db      	lsls	r3, r3, #3
 80204a2:	440b      	add	r3, r1
 80204a4:	3308      	adds	r3, #8
 80204a6:	687a      	ldr	r2, [r7, #4]
 80204a8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80204aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80204ae:	4618      	mov	r0, r3
 80204b0:	3728      	adds	r7, #40	; 0x28
 80204b2:	46bd      	mov	sp, r7
 80204b4:	bd80      	pop	{r7, pc}
 80204b6:	bf00      	nop
 80204b8:	20016034 	.word	0x20016034
 80204bc:	0802d4dc 	.word	0x0802d4dc
 80204c0:	0802d514 	.word	0x0802d514
 80204c4:	0802d554 	.word	0x0802d554
 80204c8:	0802d57c 	.word	0x0802d57c
 80204cc:	0802d594 	.word	0x0802d594
 80204d0:	0802d5a8 	.word	0x0802d5a8

080204d4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80204d4:	b580      	push	{r7, lr}
 80204d6:	b088      	sub	sp, #32
 80204d8:	af02      	add	r7, sp, #8
 80204da:	60f8      	str	r0, [r7, #12]
 80204dc:	60b9      	str	r1, [r7, #8]
 80204de:	607a      	str	r2, [r7, #4]
 80204e0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80204e2:	68fb      	ldr	r3, [r7, #12]
 80204e4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80204e8:	2b06      	cmp	r3, #6
 80204ea:	d006      	beq.n	80204fa <etharp_update_arp_entry+0x26>
 80204ec:	4b48      	ldr	r3, [pc, #288]	; (8020610 <etharp_update_arp_entry+0x13c>)
 80204ee:	f240 12a9 	movw	r2, #425	; 0x1a9
 80204f2:	4948      	ldr	r1, [pc, #288]	; (8020614 <etharp_update_arp_entry+0x140>)
 80204f4:	4848      	ldr	r0, [pc, #288]	; (8020618 <etharp_update_arp_entry+0x144>)
 80204f6:	f004 fc63 	bl	8024dc0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80204fa:	68bb      	ldr	r3, [r7, #8]
 80204fc:	2b00      	cmp	r3, #0
 80204fe:	d012      	beq.n	8020526 <etharp_update_arp_entry+0x52>
 8020500:	68bb      	ldr	r3, [r7, #8]
 8020502:	681b      	ldr	r3, [r3, #0]
 8020504:	2b00      	cmp	r3, #0
 8020506:	d00e      	beq.n	8020526 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020508:	68bb      	ldr	r3, [r7, #8]
 802050a:	681b      	ldr	r3, [r3, #0]
 802050c:	68f9      	ldr	r1, [r7, #12]
 802050e:	4618      	mov	r0, r3
 8020510:	f001 f8fe 	bl	8021710 <ip4_addr_isbroadcast_u32>
 8020514:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8020516:	2b00      	cmp	r3, #0
 8020518:	d105      	bne.n	8020526 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 802051a:	68bb      	ldr	r3, [r7, #8]
 802051c:	681b      	ldr	r3, [r3, #0]
 802051e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020522:	2be0      	cmp	r3, #224	; 0xe0
 8020524:	d102      	bne.n	802052c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020526:	f06f 030f 	mvn.w	r3, #15
 802052a:	e06c      	b.n	8020606 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 802052c:	78fb      	ldrb	r3, [r7, #3]
 802052e:	68fa      	ldr	r2, [r7, #12]
 8020530:	4619      	mov	r1, r3
 8020532:	68b8      	ldr	r0, [r7, #8]
 8020534:	f7ff fe56 	bl	80201e4 <etharp_find_entry>
 8020538:	4603      	mov	r3, r0
 802053a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 802053c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020540:	2b00      	cmp	r3, #0
 8020542:	da02      	bge.n	802054a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8020544:	8afb      	ldrh	r3, [r7, #22]
 8020546:	b25b      	sxtb	r3, r3
 8020548:	e05d      	b.n	8020606 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 802054a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802054e:	4933      	ldr	r1, [pc, #204]	; (802061c <etharp_update_arp_entry+0x148>)
 8020550:	4613      	mov	r3, r2
 8020552:	005b      	lsls	r3, r3, #1
 8020554:	4413      	add	r3, r2
 8020556:	00db      	lsls	r3, r3, #3
 8020558:	440b      	add	r3, r1
 802055a:	3314      	adds	r3, #20
 802055c:	2202      	movs	r2, #2
 802055e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8020560:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020564:	492d      	ldr	r1, [pc, #180]	; (802061c <etharp_update_arp_entry+0x148>)
 8020566:	4613      	mov	r3, r2
 8020568:	005b      	lsls	r3, r3, #1
 802056a:	4413      	add	r3, r2
 802056c:	00db      	lsls	r3, r3, #3
 802056e:	440b      	add	r3, r1
 8020570:	3308      	adds	r3, #8
 8020572:	68fa      	ldr	r2, [r7, #12]
 8020574:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8020576:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802057a:	4613      	mov	r3, r2
 802057c:	005b      	lsls	r3, r3, #1
 802057e:	4413      	add	r3, r2
 8020580:	00db      	lsls	r3, r3, #3
 8020582:	3308      	adds	r3, #8
 8020584:	4a25      	ldr	r2, [pc, #148]	; (802061c <etharp_update_arp_entry+0x148>)
 8020586:	4413      	add	r3, r2
 8020588:	3304      	adds	r3, #4
 802058a:	2206      	movs	r2, #6
 802058c:	6879      	ldr	r1, [r7, #4]
 802058e:	4618      	mov	r0, r3
 8020590:	f006 f8d5 	bl	802673e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8020594:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020598:	4920      	ldr	r1, [pc, #128]	; (802061c <etharp_update_arp_entry+0x148>)
 802059a:	4613      	mov	r3, r2
 802059c:	005b      	lsls	r3, r3, #1
 802059e:	4413      	add	r3, r2
 80205a0:	00db      	lsls	r3, r3, #3
 80205a2:	440b      	add	r3, r1
 80205a4:	3312      	adds	r3, #18
 80205a6:	2200      	movs	r2, #0
 80205a8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80205aa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80205ae:	491b      	ldr	r1, [pc, #108]	; (802061c <etharp_update_arp_entry+0x148>)
 80205b0:	4613      	mov	r3, r2
 80205b2:	005b      	lsls	r3, r3, #1
 80205b4:	4413      	add	r3, r2
 80205b6:	00db      	lsls	r3, r3, #3
 80205b8:	440b      	add	r3, r1
 80205ba:	681b      	ldr	r3, [r3, #0]
 80205bc:	2b00      	cmp	r3, #0
 80205be:	d021      	beq.n	8020604 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80205c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80205c4:	4915      	ldr	r1, [pc, #84]	; (802061c <etharp_update_arp_entry+0x148>)
 80205c6:	4613      	mov	r3, r2
 80205c8:	005b      	lsls	r3, r3, #1
 80205ca:	4413      	add	r3, r2
 80205cc:	00db      	lsls	r3, r3, #3
 80205ce:	440b      	add	r3, r1
 80205d0:	681b      	ldr	r3, [r3, #0]
 80205d2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80205d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80205d8:	4910      	ldr	r1, [pc, #64]	; (802061c <etharp_update_arp_entry+0x148>)
 80205da:	4613      	mov	r3, r2
 80205dc:	005b      	lsls	r3, r3, #1
 80205de:	4413      	add	r3, r2
 80205e0:	00db      	lsls	r3, r3, #3
 80205e2:	440b      	add	r3, r1
 80205e4:	2200      	movs	r2, #0
 80205e6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80205e8:	68fb      	ldr	r3, [r7, #12]
 80205ea:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80205ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80205f2:	9300      	str	r3, [sp, #0]
 80205f4:	687b      	ldr	r3, [r7, #4]
 80205f6:	6939      	ldr	r1, [r7, #16]
 80205f8:	68f8      	ldr	r0, [r7, #12]
 80205fa:	f002 f951 	bl	80228a0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80205fe:	6938      	ldr	r0, [r7, #16]
 8020600:	f7f7 ffdc 	bl	80185bc <pbuf_free>
  }
  return ERR_OK;
 8020604:	2300      	movs	r3, #0
}
 8020606:	4618      	mov	r0, r3
 8020608:	3718      	adds	r7, #24
 802060a:	46bd      	mov	sp, r7
 802060c:	bd80      	pop	{r7, pc}
 802060e:	bf00      	nop
 8020610:	0802d4dc 	.word	0x0802d4dc
 8020614:	0802d5d4 	.word	0x0802d5d4
 8020618:	0802d554 	.word	0x0802d554
 802061c:	20016034 	.word	0x20016034

08020620 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8020620:	b580      	push	{r7, lr}
 8020622:	b084      	sub	sp, #16
 8020624:	af00      	add	r7, sp, #0
 8020626:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020628:	2300      	movs	r3, #0
 802062a:	60fb      	str	r3, [r7, #12]
 802062c:	e01e      	b.n	802066c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 802062e:	4913      	ldr	r1, [pc, #76]	; (802067c <etharp_cleanup_netif+0x5c>)
 8020630:	68fa      	ldr	r2, [r7, #12]
 8020632:	4613      	mov	r3, r2
 8020634:	005b      	lsls	r3, r3, #1
 8020636:	4413      	add	r3, r2
 8020638:	00db      	lsls	r3, r3, #3
 802063a:	440b      	add	r3, r1
 802063c:	3314      	adds	r3, #20
 802063e:	781b      	ldrb	r3, [r3, #0]
 8020640:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8020642:	7afb      	ldrb	r3, [r7, #11]
 8020644:	2b00      	cmp	r3, #0
 8020646:	d00e      	beq.n	8020666 <etharp_cleanup_netif+0x46>
 8020648:	490c      	ldr	r1, [pc, #48]	; (802067c <etharp_cleanup_netif+0x5c>)
 802064a:	68fa      	ldr	r2, [r7, #12]
 802064c:	4613      	mov	r3, r2
 802064e:	005b      	lsls	r3, r3, #1
 8020650:	4413      	add	r3, r2
 8020652:	00db      	lsls	r3, r3, #3
 8020654:	440b      	add	r3, r1
 8020656:	3308      	adds	r3, #8
 8020658:	681b      	ldr	r3, [r3, #0]
 802065a:	687a      	ldr	r2, [r7, #4]
 802065c:	429a      	cmp	r2, r3
 802065e:	d102      	bne.n	8020666 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8020660:	68f8      	ldr	r0, [r7, #12]
 8020662:	f7ff fce5 	bl	8020030 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020666:	68fb      	ldr	r3, [r7, #12]
 8020668:	3301      	adds	r3, #1
 802066a:	60fb      	str	r3, [r7, #12]
 802066c:	68fb      	ldr	r3, [r7, #12]
 802066e:	2b09      	cmp	r3, #9
 8020670:	dddd      	ble.n	802062e <etharp_cleanup_netif+0xe>
    }
  }
}
 8020672:	bf00      	nop
 8020674:	bf00      	nop
 8020676:	3710      	adds	r7, #16
 8020678:	46bd      	mov	sp, r7
 802067a:	bd80      	pop	{r7, pc}
 802067c:	20016034 	.word	0x20016034

08020680 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8020680:	b5b0      	push	{r4, r5, r7, lr}
 8020682:	b08a      	sub	sp, #40	; 0x28
 8020684:	af04      	add	r7, sp, #16
 8020686:	6078      	str	r0, [r7, #4]
 8020688:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802068a:	683b      	ldr	r3, [r7, #0]
 802068c:	2b00      	cmp	r3, #0
 802068e:	d107      	bne.n	80206a0 <etharp_input+0x20>
 8020690:	4b3d      	ldr	r3, [pc, #244]	; (8020788 <etharp_input+0x108>)
 8020692:	f240 228a 	movw	r2, #650	; 0x28a
 8020696:	493d      	ldr	r1, [pc, #244]	; (802078c <etharp_input+0x10c>)
 8020698:	483d      	ldr	r0, [pc, #244]	; (8020790 <etharp_input+0x110>)
 802069a:	f004 fb91 	bl	8024dc0 <iprintf>
 802069e:	e06f      	b.n	8020780 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80206a0:	687b      	ldr	r3, [r7, #4]
 80206a2:	685b      	ldr	r3, [r3, #4]
 80206a4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80206a6:	693b      	ldr	r3, [r7, #16]
 80206a8:	881b      	ldrh	r3, [r3, #0]
 80206aa:	b29b      	uxth	r3, r3
 80206ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80206b0:	d10c      	bne.n	80206cc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80206b2:	693b      	ldr	r3, [r7, #16]
 80206b4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80206b6:	2b06      	cmp	r3, #6
 80206b8:	d108      	bne.n	80206cc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80206ba:	693b      	ldr	r3, [r7, #16]
 80206bc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80206be:	2b04      	cmp	r3, #4
 80206c0:	d104      	bne.n	80206cc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80206c2:	693b      	ldr	r3, [r7, #16]
 80206c4:	885b      	ldrh	r3, [r3, #2]
 80206c6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80206c8:	2b08      	cmp	r3, #8
 80206ca:	d003      	beq.n	80206d4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80206cc:	6878      	ldr	r0, [r7, #4]
 80206ce:	f7f7 ff75 	bl	80185bc <pbuf_free>
    return;
 80206d2:	e055      	b.n	8020780 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80206d4:	693b      	ldr	r3, [r7, #16]
 80206d6:	330e      	adds	r3, #14
 80206d8:	681b      	ldr	r3, [r3, #0]
 80206da:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80206dc:	693b      	ldr	r3, [r7, #16]
 80206de:	3318      	adds	r3, #24
 80206e0:	681b      	ldr	r3, [r3, #0]
 80206e2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80206e4:	683b      	ldr	r3, [r7, #0]
 80206e6:	3304      	adds	r3, #4
 80206e8:	681b      	ldr	r3, [r3, #0]
 80206ea:	2b00      	cmp	r3, #0
 80206ec:	d102      	bne.n	80206f4 <etharp_input+0x74>
    for_us = 0;
 80206ee:	2300      	movs	r3, #0
 80206f0:	75fb      	strb	r3, [r7, #23]
 80206f2:	e009      	b.n	8020708 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80206f4:	68ba      	ldr	r2, [r7, #8]
 80206f6:	683b      	ldr	r3, [r7, #0]
 80206f8:	3304      	adds	r3, #4
 80206fa:	681b      	ldr	r3, [r3, #0]
 80206fc:	429a      	cmp	r2, r3
 80206fe:	bf0c      	ite	eq
 8020700:	2301      	moveq	r3, #1
 8020702:	2300      	movne	r3, #0
 8020704:	b2db      	uxtb	r3, r3
 8020706:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8020708:	693b      	ldr	r3, [r7, #16]
 802070a:	f103 0208 	add.w	r2, r3, #8
 802070e:	7dfb      	ldrb	r3, [r7, #23]
 8020710:	2b00      	cmp	r3, #0
 8020712:	d001      	beq.n	8020718 <etharp_input+0x98>
 8020714:	2301      	movs	r3, #1
 8020716:	e000      	b.n	802071a <etharp_input+0x9a>
 8020718:	2302      	movs	r3, #2
 802071a:	f107 010c 	add.w	r1, r7, #12
 802071e:	6838      	ldr	r0, [r7, #0]
 8020720:	f7ff fed8 	bl	80204d4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8020724:	693b      	ldr	r3, [r7, #16]
 8020726:	88db      	ldrh	r3, [r3, #6]
 8020728:	b29b      	uxth	r3, r3
 802072a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802072e:	d003      	beq.n	8020738 <etharp_input+0xb8>
 8020730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020734:	d01e      	beq.n	8020774 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8020736:	e020      	b.n	802077a <etharp_input+0xfa>
      if (for_us) {
 8020738:	7dfb      	ldrb	r3, [r7, #23]
 802073a:	2b00      	cmp	r3, #0
 802073c:	d01c      	beq.n	8020778 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802073e:	683b      	ldr	r3, [r7, #0]
 8020740:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8020744:	693b      	ldr	r3, [r7, #16]
 8020746:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 802074a:	683b      	ldr	r3, [r7, #0]
 802074c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8020750:	683b      	ldr	r3, [r7, #0]
 8020752:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8020754:	693a      	ldr	r2, [r7, #16]
 8020756:	3208      	adds	r2, #8
        etharp_raw(netif,
 8020758:	2102      	movs	r1, #2
 802075a:	9103      	str	r1, [sp, #12]
 802075c:	f107 010c 	add.w	r1, r7, #12
 8020760:	9102      	str	r1, [sp, #8]
 8020762:	9201      	str	r2, [sp, #4]
 8020764:	9300      	str	r3, [sp, #0]
 8020766:	462b      	mov	r3, r5
 8020768:	4622      	mov	r2, r4
 802076a:	4601      	mov	r1, r0
 802076c:	6838      	ldr	r0, [r7, #0]
 802076e:	f000 faeb 	bl	8020d48 <etharp_raw>
      break;
 8020772:	e001      	b.n	8020778 <etharp_input+0xf8>
      break;
 8020774:	bf00      	nop
 8020776:	e000      	b.n	802077a <etharp_input+0xfa>
      break;
 8020778:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 802077a:	6878      	ldr	r0, [r7, #4]
 802077c:	f7f7 ff1e 	bl	80185bc <pbuf_free>
}
 8020780:	3718      	adds	r7, #24
 8020782:	46bd      	mov	sp, r7
 8020784:	bdb0      	pop	{r4, r5, r7, pc}
 8020786:	bf00      	nop
 8020788:	0802d4dc 	.word	0x0802d4dc
 802078c:	0802d62c 	.word	0x0802d62c
 8020790:	0802d554 	.word	0x0802d554

08020794 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8020794:	b580      	push	{r7, lr}
 8020796:	b086      	sub	sp, #24
 8020798:	af02      	add	r7, sp, #8
 802079a:	60f8      	str	r0, [r7, #12]
 802079c:	60b9      	str	r1, [r7, #8]
 802079e:	4613      	mov	r3, r2
 80207a0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80207a2:	79fa      	ldrb	r2, [r7, #7]
 80207a4:	4944      	ldr	r1, [pc, #272]	; (80208b8 <etharp_output_to_arp_index+0x124>)
 80207a6:	4613      	mov	r3, r2
 80207a8:	005b      	lsls	r3, r3, #1
 80207aa:	4413      	add	r3, r2
 80207ac:	00db      	lsls	r3, r3, #3
 80207ae:	440b      	add	r3, r1
 80207b0:	3314      	adds	r3, #20
 80207b2:	781b      	ldrb	r3, [r3, #0]
 80207b4:	2b01      	cmp	r3, #1
 80207b6:	d806      	bhi.n	80207c6 <etharp_output_to_arp_index+0x32>
 80207b8:	4b40      	ldr	r3, [pc, #256]	; (80208bc <etharp_output_to_arp_index+0x128>)
 80207ba:	f240 22ee 	movw	r2, #750	; 0x2ee
 80207be:	4940      	ldr	r1, [pc, #256]	; (80208c0 <etharp_output_to_arp_index+0x12c>)
 80207c0:	4840      	ldr	r0, [pc, #256]	; (80208c4 <etharp_output_to_arp_index+0x130>)
 80207c2:	f004 fafd 	bl	8024dc0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80207c6:	79fa      	ldrb	r2, [r7, #7]
 80207c8:	493b      	ldr	r1, [pc, #236]	; (80208b8 <etharp_output_to_arp_index+0x124>)
 80207ca:	4613      	mov	r3, r2
 80207cc:	005b      	lsls	r3, r3, #1
 80207ce:	4413      	add	r3, r2
 80207d0:	00db      	lsls	r3, r3, #3
 80207d2:	440b      	add	r3, r1
 80207d4:	3314      	adds	r3, #20
 80207d6:	781b      	ldrb	r3, [r3, #0]
 80207d8:	2b02      	cmp	r3, #2
 80207da:	d153      	bne.n	8020884 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80207dc:	79fa      	ldrb	r2, [r7, #7]
 80207de:	4936      	ldr	r1, [pc, #216]	; (80208b8 <etharp_output_to_arp_index+0x124>)
 80207e0:	4613      	mov	r3, r2
 80207e2:	005b      	lsls	r3, r3, #1
 80207e4:	4413      	add	r3, r2
 80207e6:	00db      	lsls	r3, r3, #3
 80207e8:	440b      	add	r3, r1
 80207ea:	3312      	adds	r3, #18
 80207ec:	881b      	ldrh	r3, [r3, #0]
 80207ee:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80207f2:	d919      	bls.n	8020828 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80207f4:	79fa      	ldrb	r2, [r7, #7]
 80207f6:	4613      	mov	r3, r2
 80207f8:	005b      	lsls	r3, r3, #1
 80207fa:	4413      	add	r3, r2
 80207fc:	00db      	lsls	r3, r3, #3
 80207fe:	4a2e      	ldr	r2, [pc, #184]	; (80208b8 <etharp_output_to_arp_index+0x124>)
 8020800:	4413      	add	r3, r2
 8020802:	3304      	adds	r3, #4
 8020804:	4619      	mov	r1, r3
 8020806:	68f8      	ldr	r0, [r7, #12]
 8020808:	f000 fb4c 	bl	8020ea4 <etharp_request>
 802080c:	4603      	mov	r3, r0
 802080e:	2b00      	cmp	r3, #0
 8020810:	d138      	bne.n	8020884 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020812:	79fa      	ldrb	r2, [r7, #7]
 8020814:	4928      	ldr	r1, [pc, #160]	; (80208b8 <etharp_output_to_arp_index+0x124>)
 8020816:	4613      	mov	r3, r2
 8020818:	005b      	lsls	r3, r3, #1
 802081a:	4413      	add	r3, r2
 802081c:	00db      	lsls	r3, r3, #3
 802081e:	440b      	add	r3, r1
 8020820:	3314      	adds	r3, #20
 8020822:	2203      	movs	r2, #3
 8020824:	701a      	strb	r2, [r3, #0]
 8020826:	e02d      	b.n	8020884 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8020828:	79fa      	ldrb	r2, [r7, #7]
 802082a:	4923      	ldr	r1, [pc, #140]	; (80208b8 <etharp_output_to_arp_index+0x124>)
 802082c:	4613      	mov	r3, r2
 802082e:	005b      	lsls	r3, r3, #1
 8020830:	4413      	add	r3, r2
 8020832:	00db      	lsls	r3, r3, #3
 8020834:	440b      	add	r3, r1
 8020836:	3312      	adds	r3, #18
 8020838:	881b      	ldrh	r3, [r3, #0]
 802083a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802083e:	d321      	bcc.n	8020884 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8020840:	79fa      	ldrb	r2, [r7, #7]
 8020842:	4613      	mov	r3, r2
 8020844:	005b      	lsls	r3, r3, #1
 8020846:	4413      	add	r3, r2
 8020848:	00db      	lsls	r3, r3, #3
 802084a:	4a1b      	ldr	r2, [pc, #108]	; (80208b8 <etharp_output_to_arp_index+0x124>)
 802084c:	4413      	add	r3, r2
 802084e:	1d19      	adds	r1, r3, #4
 8020850:	79fa      	ldrb	r2, [r7, #7]
 8020852:	4613      	mov	r3, r2
 8020854:	005b      	lsls	r3, r3, #1
 8020856:	4413      	add	r3, r2
 8020858:	00db      	lsls	r3, r3, #3
 802085a:	3308      	adds	r3, #8
 802085c:	4a16      	ldr	r2, [pc, #88]	; (80208b8 <etharp_output_to_arp_index+0x124>)
 802085e:	4413      	add	r3, r2
 8020860:	3304      	adds	r3, #4
 8020862:	461a      	mov	r2, r3
 8020864:	68f8      	ldr	r0, [r7, #12]
 8020866:	f000 fafb 	bl	8020e60 <etharp_request_dst>
 802086a:	4603      	mov	r3, r0
 802086c:	2b00      	cmp	r3, #0
 802086e:	d109      	bne.n	8020884 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020870:	79fa      	ldrb	r2, [r7, #7]
 8020872:	4911      	ldr	r1, [pc, #68]	; (80208b8 <etharp_output_to_arp_index+0x124>)
 8020874:	4613      	mov	r3, r2
 8020876:	005b      	lsls	r3, r3, #1
 8020878:	4413      	add	r3, r2
 802087a:	00db      	lsls	r3, r3, #3
 802087c:	440b      	add	r3, r1
 802087e:	3314      	adds	r3, #20
 8020880:	2203      	movs	r2, #3
 8020882:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8020884:	68fb      	ldr	r3, [r7, #12]
 8020886:	f103 0126 	add.w	r1, r3, #38	; 0x26
 802088a:	79fa      	ldrb	r2, [r7, #7]
 802088c:	4613      	mov	r3, r2
 802088e:	005b      	lsls	r3, r3, #1
 8020890:	4413      	add	r3, r2
 8020892:	00db      	lsls	r3, r3, #3
 8020894:	3308      	adds	r3, #8
 8020896:	4a08      	ldr	r2, [pc, #32]	; (80208b8 <etharp_output_to_arp_index+0x124>)
 8020898:	4413      	add	r3, r2
 802089a:	3304      	adds	r3, #4
 802089c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80208a0:	9200      	str	r2, [sp, #0]
 80208a2:	460a      	mov	r2, r1
 80208a4:	68b9      	ldr	r1, [r7, #8]
 80208a6:	68f8      	ldr	r0, [r7, #12]
 80208a8:	f001 fffa 	bl	80228a0 <ethernet_output>
 80208ac:	4603      	mov	r3, r0
}
 80208ae:	4618      	mov	r0, r3
 80208b0:	3710      	adds	r7, #16
 80208b2:	46bd      	mov	sp, r7
 80208b4:	bd80      	pop	{r7, pc}
 80208b6:	bf00      	nop
 80208b8:	20016034 	.word	0x20016034
 80208bc:	0802d4dc 	.word	0x0802d4dc
 80208c0:	0802d64c 	.word	0x0802d64c
 80208c4:	0802d554 	.word	0x0802d554

080208c8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80208c8:	b580      	push	{r7, lr}
 80208ca:	b08a      	sub	sp, #40	; 0x28
 80208cc:	af02      	add	r7, sp, #8
 80208ce:	60f8      	str	r0, [r7, #12]
 80208d0:	60b9      	str	r1, [r7, #8]
 80208d2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80208d8:	68fb      	ldr	r3, [r7, #12]
 80208da:	2b00      	cmp	r3, #0
 80208dc:	d106      	bne.n	80208ec <etharp_output+0x24>
 80208de:	4b73      	ldr	r3, [pc, #460]	; (8020aac <etharp_output+0x1e4>)
 80208e0:	f240 321e 	movw	r2, #798	; 0x31e
 80208e4:	4972      	ldr	r1, [pc, #456]	; (8020ab0 <etharp_output+0x1e8>)
 80208e6:	4873      	ldr	r0, [pc, #460]	; (8020ab4 <etharp_output+0x1ec>)
 80208e8:	f004 fa6a 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80208ec:	68bb      	ldr	r3, [r7, #8]
 80208ee:	2b00      	cmp	r3, #0
 80208f0:	d106      	bne.n	8020900 <etharp_output+0x38>
 80208f2:	4b6e      	ldr	r3, [pc, #440]	; (8020aac <etharp_output+0x1e4>)
 80208f4:	f240 321f 	movw	r2, #799	; 0x31f
 80208f8:	496f      	ldr	r1, [pc, #444]	; (8020ab8 <etharp_output+0x1f0>)
 80208fa:	486e      	ldr	r0, [pc, #440]	; (8020ab4 <etharp_output+0x1ec>)
 80208fc:	f004 fa60 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8020900:	687b      	ldr	r3, [r7, #4]
 8020902:	2b00      	cmp	r3, #0
 8020904:	d106      	bne.n	8020914 <etharp_output+0x4c>
 8020906:	4b69      	ldr	r3, [pc, #420]	; (8020aac <etharp_output+0x1e4>)
 8020908:	f44f 7248 	mov.w	r2, #800	; 0x320
 802090c:	496b      	ldr	r1, [pc, #428]	; (8020abc <etharp_output+0x1f4>)
 802090e:	4869      	ldr	r0, [pc, #420]	; (8020ab4 <etharp_output+0x1ec>)
 8020910:	f004 fa56 	bl	8024dc0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8020914:	687b      	ldr	r3, [r7, #4]
 8020916:	681b      	ldr	r3, [r3, #0]
 8020918:	68f9      	ldr	r1, [r7, #12]
 802091a:	4618      	mov	r0, r3
 802091c:	f000 fef8 	bl	8021710 <ip4_addr_isbroadcast_u32>
 8020920:	4603      	mov	r3, r0
 8020922:	2b00      	cmp	r3, #0
 8020924:	d002      	beq.n	802092c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8020926:	4b66      	ldr	r3, [pc, #408]	; (8020ac0 <etharp_output+0x1f8>)
 8020928:	61fb      	str	r3, [r7, #28]
 802092a:	e0af      	b.n	8020a8c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 802092c:	687b      	ldr	r3, [r7, #4]
 802092e:	681b      	ldr	r3, [r3, #0]
 8020930:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020934:	2be0      	cmp	r3, #224	; 0xe0
 8020936:	d118      	bne.n	802096a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8020938:	2301      	movs	r3, #1
 802093a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 802093c:	2300      	movs	r3, #0
 802093e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020940:	235e      	movs	r3, #94	; 0x5e
 8020942:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020944:	687b      	ldr	r3, [r7, #4]
 8020946:	3301      	adds	r3, #1
 8020948:	781b      	ldrb	r3, [r3, #0]
 802094a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802094e:	b2db      	uxtb	r3, r3
 8020950:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8020952:	687b      	ldr	r3, [r7, #4]
 8020954:	3302      	adds	r3, #2
 8020956:	781b      	ldrb	r3, [r3, #0]
 8020958:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802095a:	687b      	ldr	r3, [r7, #4]
 802095c:	3303      	adds	r3, #3
 802095e:	781b      	ldrb	r3, [r3, #0]
 8020960:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8020962:	f107 0310 	add.w	r3, r7, #16
 8020966:	61fb      	str	r3, [r7, #28]
 8020968:	e090      	b.n	8020a8c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802096a:	687b      	ldr	r3, [r7, #4]
 802096c:	681a      	ldr	r2, [r3, #0]
 802096e:	68fb      	ldr	r3, [r7, #12]
 8020970:	3304      	adds	r3, #4
 8020972:	681b      	ldr	r3, [r3, #0]
 8020974:	405a      	eors	r2, r3
 8020976:	68fb      	ldr	r3, [r7, #12]
 8020978:	3308      	adds	r3, #8
 802097a:	681b      	ldr	r3, [r3, #0]
 802097c:	4013      	ands	r3, r2
 802097e:	2b00      	cmp	r3, #0
 8020980:	d012      	beq.n	80209a8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8020982:	687b      	ldr	r3, [r7, #4]
 8020984:	681b      	ldr	r3, [r3, #0]
 8020986:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020988:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 802098c:	4293      	cmp	r3, r2
 802098e:	d00b      	beq.n	80209a8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8020990:	68fb      	ldr	r3, [r7, #12]
 8020992:	330c      	adds	r3, #12
 8020994:	681b      	ldr	r3, [r3, #0]
 8020996:	2b00      	cmp	r3, #0
 8020998:	d003      	beq.n	80209a2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 802099a:	68fb      	ldr	r3, [r7, #12]
 802099c:	330c      	adds	r3, #12
 802099e:	61bb      	str	r3, [r7, #24]
 80209a0:	e002      	b.n	80209a8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80209a2:	f06f 0303 	mvn.w	r3, #3
 80209a6:	e07d      	b.n	8020aa4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80209a8:	4b46      	ldr	r3, [pc, #280]	; (8020ac4 <etharp_output+0x1fc>)
 80209aa:	781b      	ldrb	r3, [r3, #0]
 80209ac:	4619      	mov	r1, r3
 80209ae:	4a46      	ldr	r2, [pc, #280]	; (8020ac8 <etharp_output+0x200>)
 80209b0:	460b      	mov	r3, r1
 80209b2:	005b      	lsls	r3, r3, #1
 80209b4:	440b      	add	r3, r1
 80209b6:	00db      	lsls	r3, r3, #3
 80209b8:	4413      	add	r3, r2
 80209ba:	3314      	adds	r3, #20
 80209bc:	781b      	ldrb	r3, [r3, #0]
 80209be:	2b01      	cmp	r3, #1
 80209c0:	d925      	bls.n	8020a0e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80209c2:	4b40      	ldr	r3, [pc, #256]	; (8020ac4 <etharp_output+0x1fc>)
 80209c4:	781b      	ldrb	r3, [r3, #0]
 80209c6:	4619      	mov	r1, r3
 80209c8:	4a3f      	ldr	r2, [pc, #252]	; (8020ac8 <etharp_output+0x200>)
 80209ca:	460b      	mov	r3, r1
 80209cc:	005b      	lsls	r3, r3, #1
 80209ce:	440b      	add	r3, r1
 80209d0:	00db      	lsls	r3, r3, #3
 80209d2:	4413      	add	r3, r2
 80209d4:	3308      	adds	r3, #8
 80209d6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80209d8:	68fa      	ldr	r2, [r7, #12]
 80209da:	429a      	cmp	r2, r3
 80209dc:	d117      	bne.n	8020a0e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80209de:	69bb      	ldr	r3, [r7, #24]
 80209e0:	681a      	ldr	r2, [r3, #0]
 80209e2:	4b38      	ldr	r3, [pc, #224]	; (8020ac4 <etharp_output+0x1fc>)
 80209e4:	781b      	ldrb	r3, [r3, #0]
 80209e6:	4618      	mov	r0, r3
 80209e8:	4937      	ldr	r1, [pc, #220]	; (8020ac8 <etharp_output+0x200>)
 80209ea:	4603      	mov	r3, r0
 80209ec:	005b      	lsls	r3, r3, #1
 80209ee:	4403      	add	r3, r0
 80209f0:	00db      	lsls	r3, r3, #3
 80209f2:	440b      	add	r3, r1
 80209f4:	3304      	adds	r3, #4
 80209f6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80209f8:	429a      	cmp	r2, r3
 80209fa:	d108      	bne.n	8020a0e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80209fc:	4b31      	ldr	r3, [pc, #196]	; (8020ac4 <etharp_output+0x1fc>)
 80209fe:	781b      	ldrb	r3, [r3, #0]
 8020a00:	461a      	mov	r2, r3
 8020a02:	68b9      	ldr	r1, [r7, #8]
 8020a04:	68f8      	ldr	r0, [r7, #12]
 8020a06:	f7ff fec5 	bl	8020794 <etharp_output_to_arp_index>
 8020a0a:	4603      	mov	r3, r0
 8020a0c:	e04a      	b.n	8020aa4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020a0e:	2300      	movs	r3, #0
 8020a10:	75fb      	strb	r3, [r7, #23]
 8020a12:	e031      	b.n	8020a78 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020a14:	7dfa      	ldrb	r2, [r7, #23]
 8020a16:	492c      	ldr	r1, [pc, #176]	; (8020ac8 <etharp_output+0x200>)
 8020a18:	4613      	mov	r3, r2
 8020a1a:	005b      	lsls	r3, r3, #1
 8020a1c:	4413      	add	r3, r2
 8020a1e:	00db      	lsls	r3, r3, #3
 8020a20:	440b      	add	r3, r1
 8020a22:	3314      	adds	r3, #20
 8020a24:	781b      	ldrb	r3, [r3, #0]
 8020a26:	2b01      	cmp	r3, #1
 8020a28:	d923      	bls.n	8020a72 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8020a2a:	7dfa      	ldrb	r2, [r7, #23]
 8020a2c:	4926      	ldr	r1, [pc, #152]	; (8020ac8 <etharp_output+0x200>)
 8020a2e:	4613      	mov	r3, r2
 8020a30:	005b      	lsls	r3, r3, #1
 8020a32:	4413      	add	r3, r2
 8020a34:	00db      	lsls	r3, r3, #3
 8020a36:	440b      	add	r3, r1
 8020a38:	3308      	adds	r3, #8
 8020a3a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020a3c:	68fa      	ldr	r2, [r7, #12]
 8020a3e:	429a      	cmp	r2, r3
 8020a40:	d117      	bne.n	8020a72 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8020a42:	69bb      	ldr	r3, [r7, #24]
 8020a44:	6819      	ldr	r1, [r3, #0]
 8020a46:	7dfa      	ldrb	r2, [r7, #23]
 8020a48:	481f      	ldr	r0, [pc, #124]	; (8020ac8 <etharp_output+0x200>)
 8020a4a:	4613      	mov	r3, r2
 8020a4c:	005b      	lsls	r3, r3, #1
 8020a4e:	4413      	add	r3, r2
 8020a50:	00db      	lsls	r3, r3, #3
 8020a52:	4403      	add	r3, r0
 8020a54:	3304      	adds	r3, #4
 8020a56:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020a58:	4299      	cmp	r1, r3
 8020a5a:	d10a      	bne.n	8020a72 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020a5c:	4a19      	ldr	r2, [pc, #100]	; (8020ac4 <etharp_output+0x1fc>)
 8020a5e:	7dfb      	ldrb	r3, [r7, #23]
 8020a60:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8020a62:	7dfb      	ldrb	r3, [r7, #23]
 8020a64:	461a      	mov	r2, r3
 8020a66:	68b9      	ldr	r1, [r7, #8]
 8020a68:	68f8      	ldr	r0, [r7, #12]
 8020a6a:	f7ff fe93 	bl	8020794 <etharp_output_to_arp_index>
 8020a6e:	4603      	mov	r3, r0
 8020a70:	e018      	b.n	8020aa4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020a72:	7dfb      	ldrb	r3, [r7, #23]
 8020a74:	3301      	adds	r3, #1
 8020a76:	75fb      	strb	r3, [r7, #23]
 8020a78:	7dfb      	ldrb	r3, [r7, #23]
 8020a7a:	2b09      	cmp	r3, #9
 8020a7c:	d9ca      	bls.n	8020a14 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8020a7e:	68ba      	ldr	r2, [r7, #8]
 8020a80:	69b9      	ldr	r1, [r7, #24]
 8020a82:	68f8      	ldr	r0, [r7, #12]
 8020a84:	f000 f822 	bl	8020acc <etharp_query>
 8020a88:	4603      	mov	r3, r0
 8020a8a:	e00b      	b.n	8020aa4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8020a8c:	68fb      	ldr	r3, [r7, #12]
 8020a8e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8020a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020a96:	9300      	str	r3, [sp, #0]
 8020a98:	69fb      	ldr	r3, [r7, #28]
 8020a9a:	68b9      	ldr	r1, [r7, #8]
 8020a9c:	68f8      	ldr	r0, [r7, #12]
 8020a9e:	f001 feff 	bl	80228a0 <ethernet_output>
 8020aa2:	4603      	mov	r3, r0
}
 8020aa4:	4618      	mov	r0, r3
 8020aa6:	3720      	adds	r7, #32
 8020aa8:	46bd      	mov	sp, r7
 8020aaa:	bd80      	pop	{r7, pc}
 8020aac:	0802d4dc 	.word	0x0802d4dc
 8020ab0:	0802d62c 	.word	0x0802d62c
 8020ab4:	0802d554 	.word	0x0802d554
 8020ab8:	0802d67c 	.word	0x0802d67c
 8020abc:	0802d61c 	.word	0x0802d61c
 8020ac0:	0802df38 	.word	0x0802df38
 8020ac4:	20016124 	.word	0x20016124
 8020ac8:	20016034 	.word	0x20016034

08020acc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8020acc:	b580      	push	{r7, lr}
 8020ace:	b08c      	sub	sp, #48	; 0x30
 8020ad0:	af02      	add	r7, sp, #8
 8020ad2:	60f8      	str	r0, [r7, #12]
 8020ad4:	60b9      	str	r1, [r7, #8]
 8020ad6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8020ad8:	68fb      	ldr	r3, [r7, #12]
 8020ada:	3326      	adds	r3, #38	; 0x26
 8020adc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8020ade:	23ff      	movs	r3, #255	; 0xff
 8020ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8020ae4:	2300      	movs	r3, #0
 8020ae6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020ae8:	68bb      	ldr	r3, [r7, #8]
 8020aea:	681b      	ldr	r3, [r3, #0]
 8020aec:	68f9      	ldr	r1, [r7, #12]
 8020aee:	4618      	mov	r0, r3
 8020af0:	f000 fe0e 	bl	8021710 <ip4_addr_isbroadcast_u32>
 8020af4:	4603      	mov	r3, r0
 8020af6:	2b00      	cmp	r3, #0
 8020af8:	d10c      	bne.n	8020b14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020afa:	68bb      	ldr	r3, [r7, #8]
 8020afc:	681b      	ldr	r3, [r3, #0]
 8020afe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020b02:	2be0      	cmp	r3, #224	; 0xe0
 8020b04:	d006      	beq.n	8020b14 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020b06:	68bb      	ldr	r3, [r7, #8]
 8020b08:	2b00      	cmp	r3, #0
 8020b0a:	d003      	beq.n	8020b14 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8020b0c:	68bb      	ldr	r3, [r7, #8]
 8020b0e:	681b      	ldr	r3, [r3, #0]
 8020b10:	2b00      	cmp	r3, #0
 8020b12:	d102      	bne.n	8020b1a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020b14:	f06f 030f 	mvn.w	r3, #15
 8020b18:	e101      	b.n	8020d1e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8020b1a:	68fa      	ldr	r2, [r7, #12]
 8020b1c:	2101      	movs	r1, #1
 8020b1e:	68b8      	ldr	r0, [r7, #8]
 8020b20:	f7ff fb60 	bl	80201e4 <etharp_find_entry>
 8020b24:	4603      	mov	r3, r0
 8020b26:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8020b28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020b2c:	2b00      	cmp	r3, #0
 8020b2e:	da02      	bge.n	8020b36 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020b30:	8a7b      	ldrh	r3, [r7, #18]
 8020b32:	b25b      	sxtb	r3, r3
 8020b34:	e0f3      	b.n	8020d1e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8020b36:	8a7b      	ldrh	r3, [r7, #18]
 8020b38:	2b7e      	cmp	r3, #126	; 0x7e
 8020b3a:	d906      	bls.n	8020b4a <etharp_query+0x7e>
 8020b3c:	4b7a      	ldr	r3, [pc, #488]	; (8020d28 <etharp_query+0x25c>)
 8020b3e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8020b42:	497a      	ldr	r1, [pc, #488]	; (8020d2c <etharp_query+0x260>)
 8020b44:	487a      	ldr	r0, [pc, #488]	; (8020d30 <etharp_query+0x264>)
 8020b46:	f004 f93b 	bl	8024dc0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8020b4a:	8a7b      	ldrh	r3, [r7, #18]
 8020b4c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8020b4e:	7c7a      	ldrb	r2, [r7, #17]
 8020b50:	4978      	ldr	r1, [pc, #480]	; (8020d34 <etharp_query+0x268>)
 8020b52:	4613      	mov	r3, r2
 8020b54:	005b      	lsls	r3, r3, #1
 8020b56:	4413      	add	r3, r2
 8020b58:	00db      	lsls	r3, r3, #3
 8020b5a:	440b      	add	r3, r1
 8020b5c:	3314      	adds	r3, #20
 8020b5e:	781b      	ldrb	r3, [r3, #0]
 8020b60:	2b00      	cmp	r3, #0
 8020b62:	d115      	bne.n	8020b90 <etharp_query+0xc4>
    is_new_entry = 1;
 8020b64:	2301      	movs	r3, #1
 8020b66:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020b68:	7c7a      	ldrb	r2, [r7, #17]
 8020b6a:	4972      	ldr	r1, [pc, #456]	; (8020d34 <etharp_query+0x268>)
 8020b6c:	4613      	mov	r3, r2
 8020b6e:	005b      	lsls	r3, r3, #1
 8020b70:	4413      	add	r3, r2
 8020b72:	00db      	lsls	r3, r3, #3
 8020b74:	440b      	add	r3, r1
 8020b76:	3314      	adds	r3, #20
 8020b78:	2201      	movs	r2, #1
 8020b7a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8020b7c:	7c7a      	ldrb	r2, [r7, #17]
 8020b7e:	496d      	ldr	r1, [pc, #436]	; (8020d34 <etharp_query+0x268>)
 8020b80:	4613      	mov	r3, r2
 8020b82:	005b      	lsls	r3, r3, #1
 8020b84:	4413      	add	r3, r2
 8020b86:	00db      	lsls	r3, r3, #3
 8020b88:	440b      	add	r3, r1
 8020b8a:	3308      	adds	r3, #8
 8020b8c:	68fa      	ldr	r2, [r7, #12]
 8020b8e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8020b90:	7c7a      	ldrb	r2, [r7, #17]
 8020b92:	4968      	ldr	r1, [pc, #416]	; (8020d34 <etharp_query+0x268>)
 8020b94:	4613      	mov	r3, r2
 8020b96:	005b      	lsls	r3, r3, #1
 8020b98:	4413      	add	r3, r2
 8020b9a:	00db      	lsls	r3, r3, #3
 8020b9c:	440b      	add	r3, r1
 8020b9e:	3314      	adds	r3, #20
 8020ba0:	781b      	ldrb	r3, [r3, #0]
 8020ba2:	2b01      	cmp	r3, #1
 8020ba4:	d011      	beq.n	8020bca <etharp_query+0xfe>
 8020ba6:	7c7a      	ldrb	r2, [r7, #17]
 8020ba8:	4962      	ldr	r1, [pc, #392]	; (8020d34 <etharp_query+0x268>)
 8020baa:	4613      	mov	r3, r2
 8020bac:	005b      	lsls	r3, r3, #1
 8020bae:	4413      	add	r3, r2
 8020bb0:	00db      	lsls	r3, r3, #3
 8020bb2:	440b      	add	r3, r1
 8020bb4:	3314      	adds	r3, #20
 8020bb6:	781b      	ldrb	r3, [r3, #0]
 8020bb8:	2b01      	cmp	r3, #1
 8020bba:	d806      	bhi.n	8020bca <etharp_query+0xfe>
 8020bbc:	4b5a      	ldr	r3, [pc, #360]	; (8020d28 <etharp_query+0x25c>)
 8020bbe:	f240 32cd 	movw	r2, #973	; 0x3cd
 8020bc2:	495d      	ldr	r1, [pc, #372]	; (8020d38 <etharp_query+0x26c>)
 8020bc4:	485a      	ldr	r0, [pc, #360]	; (8020d30 <etharp_query+0x264>)
 8020bc6:	f004 f8fb 	bl	8024dc0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8020bca:	6a3b      	ldr	r3, [r7, #32]
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	d102      	bne.n	8020bd6 <etharp_query+0x10a>
 8020bd0:	687b      	ldr	r3, [r7, #4]
 8020bd2:	2b00      	cmp	r3, #0
 8020bd4:	d10c      	bne.n	8020bf0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8020bd6:	68b9      	ldr	r1, [r7, #8]
 8020bd8:	68f8      	ldr	r0, [r7, #12]
 8020bda:	f000 f963 	bl	8020ea4 <etharp_request>
 8020bde:	4603      	mov	r3, r0
 8020be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8020be4:	687b      	ldr	r3, [r7, #4]
 8020be6:	2b00      	cmp	r3, #0
 8020be8:	d102      	bne.n	8020bf0 <etharp_query+0x124>
      return result;
 8020bea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020bee:	e096      	b.n	8020d1e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8020bf0:	687b      	ldr	r3, [r7, #4]
 8020bf2:	2b00      	cmp	r3, #0
 8020bf4:	d106      	bne.n	8020c04 <etharp_query+0x138>
 8020bf6:	4b4c      	ldr	r3, [pc, #304]	; (8020d28 <etharp_query+0x25c>)
 8020bf8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8020bfc:	494f      	ldr	r1, [pc, #316]	; (8020d3c <etharp_query+0x270>)
 8020bfe:	484c      	ldr	r0, [pc, #304]	; (8020d30 <etharp_query+0x264>)
 8020c00:	f004 f8de 	bl	8024dc0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8020c04:	7c7a      	ldrb	r2, [r7, #17]
 8020c06:	494b      	ldr	r1, [pc, #300]	; (8020d34 <etharp_query+0x268>)
 8020c08:	4613      	mov	r3, r2
 8020c0a:	005b      	lsls	r3, r3, #1
 8020c0c:	4413      	add	r3, r2
 8020c0e:	00db      	lsls	r3, r3, #3
 8020c10:	440b      	add	r3, r1
 8020c12:	3314      	adds	r3, #20
 8020c14:	781b      	ldrb	r3, [r3, #0]
 8020c16:	2b01      	cmp	r3, #1
 8020c18:	d917      	bls.n	8020c4a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8020c1a:	4a49      	ldr	r2, [pc, #292]	; (8020d40 <etharp_query+0x274>)
 8020c1c:	7c7b      	ldrb	r3, [r7, #17]
 8020c1e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020c20:	7c7a      	ldrb	r2, [r7, #17]
 8020c22:	4613      	mov	r3, r2
 8020c24:	005b      	lsls	r3, r3, #1
 8020c26:	4413      	add	r3, r2
 8020c28:	00db      	lsls	r3, r3, #3
 8020c2a:	3308      	adds	r3, #8
 8020c2c:	4a41      	ldr	r2, [pc, #260]	; (8020d34 <etharp_query+0x268>)
 8020c2e:	4413      	add	r3, r2
 8020c30:	3304      	adds	r3, #4
 8020c32:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020c36:	9200      	str	r2, [sp, #0]
 8020c38:	697a      	ldr	r2, [r7, #20]
 8020c3a:	6879      	ldr	r1, [r7, #4]
 8020c3c:	68f8      	ldr	r0, [r7, #12]
 8020c3e:	f001 fe2f 	bl	80228a0 <ethernet_output>
 8020c42:	4603      	mov	r3, r0
 8020c44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020c48:	e067      	b.n	8020d1a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020c4a:	7c7a      	ldrb	r2, [r7, #17]
 8020c4c:	4939      	ldr	r1, [pc, #228]	; (8020d34 <etharp_query+0x268>)
 8020c4e:	4613      	mov	r3, r2
 8020c50:	005b      	lsls	r3, r3, #1
 8020c52:	4413      	add	r3, r2
 8020c54:	00db      	lsls	r3, r3, #3
 8020c56:	440b      	add	r3, r1
 8020c58:	3314      	adds	r3, #20
 8020c5a:	781b      	ldrb	r3, [r3, #0]
 8020c5c:	2b01      	cmp	r3, #1
 8020c5e:	d15c      	bne.n	8020d1a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020c60:	2300      	movs	r3, #0
 8020c62:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8020c64:	687b      	ldr	r3, [r7, #4]
 8020c66:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020c68:	e01c      	b.n	8020ca4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020c6a:	69fb      	ldr	r3, [r7, #28]
 8020c6c:	895a      	ldrh	r2, [r3, #10]
 8020c6e:	69fb      	ldr	r3, [r7, #28]
 8020c70:	891b      	ldrh	r3, [r3, #8]
 8020c72:	429a      	cmp	r2, r3
 8020c74:	d10a      	bne.n	8020c8c <etharp_query+0x1c0>
 8020c76:	69fb      	ldr	r3, [r7, #28]
 8020c78:	681b      	ldr	r3, [r3, #0]
 8020c7a:	2b00      	cmp	r3, #0
 8020c7c:	d006      	beq.n	8020c8c <etharp_query+0x1c0>
 8020c7e:	4b2a      	ldr	r3, [pc, #168]	; (8020d28 <etharp_query+0x25c>)
 8020c80:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8020c84:	492f      	ldr	r1, [pc, #188]	; (8020d44 <etharp_query+0x278>)
 8020c86:	482a      	ldr	r0, [pc, #168]	; (8020d30 <etharp_query+0x264>)
 8020c88:	f004 f89a 	bl	8024dc0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8020c8c:	69fb      	ldr	r3, [r7, #28]
 8020c8e:	7b1b      	ldrb	r3, [r3, #12]
 8020c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020c94:	2b00      	cmp	r3, #0
 8020c96:	d002      	beq.n	8020c9e <etharp_query+0x1d2>
        copy_needed = 1;
 8020c98:	2301      	movs	r3, #1
 8020c9a:	61bb      	str	r3, [r7, #24]
        break;
 8020c9c:	e005      	b.n	8020caa <etharp_query+0x1de>
      }
      p = p->next;
 8020c9e:	69fb      	ldr	r3, [r7, #28]
 8020ca0:	681b      	ldr	r3, [r3, #0]
 8020ca2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020ca4:	69fb      	ldr	r3, [r7, #28]
 8020ca6:	2b00      	cmp	r3, #0
 8020ca8:	d1df      	bne.n	8020c6a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8020caa:	69bb      	ldr	r3, [r7, #24]
 8020cac:	2b00      	cmp	r3, #0
 8020cae:	d007      	beq.n	8020cc0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8020cb0:	687a      	ldr	r2, [r7, #4]
 8020cb2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8020cb6:	200e      	movs	r0, #14
 8020cb8:	f7f8 f830 	bl	8018d1c <pbuf_clone>
 8020cbc:	61f8      	str	r0, [r7, #28]
 8020cbe:	e004      	b.n	8020cca <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8020cc0:	687b      	ldr	r3, [r7, #4]
 8020cc2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8020cc4:	69f8      	ldr	r0, [r7, #28]
 8020cc6:	f7f7 fd1f 	bl	8018708 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8020cca:	69fb      	ldr	r3, [r7, #28]
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	d021      	beq.n	8020d14 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8020cd0:	7c7a      	ldrb	r2, [r7, #17]
 8020cd2:	4918      	ldr	r1, [pc, #96]	; (8020d34 <etharp_query+0x268>)
 8020cd4:	4613      	mov	r3, r2
 8020cd6:	005b      	lsls	r3, r3, #1
 8020cd8:	4413      	add	r3, r2
 8020cda:	00db      	lsls	r3, r3, #3
 8020cdc:	440b      	add	r3, r1
 8020cde:	681b      	ldr	r3, [r3, #0]
 8020ce0:	2b00      	cmp	r3, #0
 8020ce2:	d00a      	beq.n	8020cfa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8020ce4:	7c7a      	ldrb	r2, [r7, #17]
 8020ce6:	4913      	ldr	r1, [pc, #76]	; (8020d34 <etharp_query+0x268>)
 8020ce8:	4613      	mov	r3, r2
 8020cea:	005b      	lsls	r3, r3, #1
 8020cec:	4413      	add	r3, r2
 8020cee:	00db      	lsls	r3, r3, #3
 8020cf0:	440b      	add	r3, r1
 8020cf2:	681b      	ldr	r3, [r3, #0]
 8020cf4:	4618      	mov	r0, r3
 8020cf6:	f7f7 fc61 	bl	80185bc <pbuf_free>
      }
      arp_table[i].q = p;
 8020cfa:	7c7a      	ldrb	r2, [r7, #17]
 8020cfc:	490d      	ldr	r1, [pc, #52]	; (8020d34 <etharp_query+0x268>)
 8020cfe:	4613      	mov	r3, r2
 8020d00:	005b      	lsls	r3, r3, #1
 8020d02:	4413      	add	r3, r2
 8020d04:	00db      	lsls	r3, r3, #3
 8020d06:	440b      	add	r3, r1
 8020d08:	69fa      	ldr	r2, [r7, #28]
 8020d0a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8020d0c:	2300      	movs	r3, #0
 8020d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020d12:	e002      	b.n	8020d1a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8020d14:	23ff      	movs	r3, #255	; 0xff
 8020d16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8020d1a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8020d1e:	4618      	mov	r0, r3
 8020d20:	3728      	adds	r7, #40	; 0x28
 8020d22:	46bd      	mov	sp, r7
 8020d24:	bd80      	pop	{r7, pc}
 8020d26:	bf00      	nop
 8020d28:	0802d4dc 	.word	0x0802d4dc
 8020d2c:	0802d688 	.word	0x0802d688
 8020d30:	0802d554 	.word	0x0802d554
 8020d34:	20016034 	.word	0x20016034
 8020d38:	0802d698 	.word	0x0802d698
 8020d3c:	0802d67c 	.word	0x0802d67c
 8020d40:	20016124 	.word	0x20016124
 8020d44:	0802d6c0 	.word	0x0802d6c0

08020d48 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020d48:	b580      	push	{r7, lr}
 8020d4a:	b08a      	sub	sp, #40	; 0x28
 8020d4c:	af02      	add	r7, sp, #8
 8020d4e:	60f8      	str	r0, [r7, #12]
 8020d50:	60b9      	str	r1, [r7, #8]
 8020d52:	607a      	str	r2, [r7, #4]
 8020d54:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8020d56:	2300      	movs	r3, #0
 8020d58:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020d5a:	68fb      	ldr	r3, [r7, #12]
 8020d5c:	2b00      	cmp	r3, #0
 8020d5e:	d106      	bne.n	8020d6e <etharp_raw+0x26>
 8020d60:	4b3a      	ldr	r3, [pc, #232]	; (8020e4c <etharp_raw+0x104>)
 8020d62:	f240 4257 	movw	r2, #1111	; 0x457
 8020d66:	493a      	ldr	r1, [pc, #232]	; (8020e50 <etharp_raw+0x108>)
 8020d68:	483a      	ldr	r0, [pc, #232]	; (8020e54 <etharp_raw+0x10c>)
 8020d6a:	f004 f829 	bl	8024dc0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020d6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020d72:	211c      	movs	r1, #28
 8020d74:	200e      	movs	r0, #14
 8020d76:	f7f7 f93d 	bl	8017ff4 <pbuf_alloc>
 8020d7a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020d7c:	69bb      	ldr	r3, [r7, #24]
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d102      	bne.n	8020d88 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8020d82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020d86:	e05d      	b.n	8020e44 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8020d88:	69bb      	ldr	r3, [r7, #24]
 8020d8a:	895b      	ldrh	r3, [r3, #10]
 8020d8c:	2b1b      	cmp	r3, #27
 8020d8e:	d806      	bhi.n	8020d9e <etharp_raw+0x56>
 8020d90:	4b2e      	ldr	r3, [pc, #184]	; (8020e4c <etharp_raw+0x104>)
 8020d92:	f240 4262 	movw	r2, #1122	; 0x462
 8020d96:	4930      	ldr	r1, [pc, #192]	; (8020e58 <etharp_raw+0x110>)
 8020d98:	482e      	ldr	r0, [pc, #184]	; (8020e54 <etharp_raw+0x10c>)
 8020d9a:	f004 f811 	bl	8024dc0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8020d9e:	69bb      	ldr	r3, [r7, #24]
 8020da0:	685b      	ldr	r3, [r3, #4]
 8020da2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8020da4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8020da6:	4618      	mov	r0, r3
 8020da8:	f7f5 fd4c 	bl	8016844 <lwip_htons>
 8020dac:	4603      	mov	r3, r0
 8020dae:	461a      	mov	r2, r3
 8020db0:	697b      	ldr	r3, [r7, #20]
 8020db2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8020db4:	68fb      	ldr	r3, [r7, #12]
 8020db6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8020dba:	2b06      	cmp	r3, #6
 8020dbc:	d006      	beq.n	8020dcc <etharp_raw+0x84>
 8020dbe:	4b23      	ldr	r3, [pc, #140]	; (8020e4c <etharp_raw+0x104>)
 8020dc0:	f240 4269 	movw	r2, #1129	; 0x469
 8020dc4:	4925      	ldr	r1, [pc, #148]	; (8020e5c <etharp_raw+0x114>)
 8020dc6:	4823      	ldr	r0, [pc, #140]	; (8020e54 <etharp_raw+0x10c>)
 8020dc8:	f003 fffa 	bl	8024dc0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020dcc:	697b      	ldr	r3, [r7, #20]
 8020dce:	3308      	adds	r3, #8
 8020dd0:	2206      	movs	r2, #6
 8020dd2:	6839      	ldr	r1, [r7, #0]
 8020dd4:	4618      	mov	r0, r3
 8020dd6:	f005 fcb2 	bl	802673e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020dda:	697b      	ldr	r3, [r7, #20]
 8020ddc:	3312      	adds	r3, #18
 8020dde:	2206      	movs	r2, #6
 8020de0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020de2:	4618      	mov	r0, r3
 8020de4:	f005 fcab 	bl	802673e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020de8:	697b      	ldr	r3, [r7, #20]
 8020dea:	330e      	adds	r3, #14
 8020dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020dee:	6812      	ldr	r2, [r2, #0]
 8020df0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8020df2:	697b      	ldr	r3, [r7, #20]
 8020df4:	3318      	adds	r3, #24
 8020df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020df8:	6812      	ldr	r2, [r2, #0]
 8020dfa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020dfc:	697b      	ldr	r3, [r7, #20]
 8020dfe:	2200      	movs	r2, #0
 8020e00:	701a      	strb	r2, [r3, #0]
 8020e02:	2200      	movs	r2, #0
 8020e04:	f042 0201 	orr.w	r2, r2, #1
 8020e08:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020e0a:	697b      	ldr	r3, [r7, #20]
 8020e0c:	2200      	movs	r2, #0
 8020e0e:	f042 0208 	orr.w	r2, r2, #8
 8020e12:	709a      	strb	r2, [r3, #2]
 8020e14:	2200      	movs	r2, #0
 8020e16:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020e18:	697b      	ldr	r3, [r7, #20]
 8020e1a:	2206      	movs	r2, #6
 8020e1c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8020e1e:	697b      	ldr	r3, [r7, #20]
 8020e20:	2204      	movs	r2, #4
 8020e22:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020e24:	f640 0306 	movw	r3, #2054	; 0x806
 8020e28:	9300      	str	r3, [sp, #0]
 8020e2a:	687b      	ldr	r3, [r7, #4]
 8020e2c:	68ba      	ldr	r2, [r7, #8]
 8020e2e:	69b9      	ldr	r1, [r7, #24]
 8020e30:	68f8      	ldr	r0, [r7, #12]
 8020e32:	f001 fd35 	bl	80228a0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020e36:	69b8      	ldr	r0, [r7, #24]
 8020e38:	f7f7 fbc0 	bl	80185bc <pbuf_free>
  p = NULL;
 8020e3c:	2300      	movs	r3, #0
 8020e3e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020e40:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020e44:	4618      	mov	r0, r3
 8020e46:	3720      	adds	r7, #32
 8020e48:	46bd      	mov	sp, r7
 8020e4a:	bd80      	pop	{r7, pc}
 8020e4c:	0802d4dc 	.word	0x0802d4dc
 8020e50:	0802d62c 	.word	0x0802d62c
 8020e54:	0802d554 	.word	0x0802d554
 8020e58:	0802d6dc 	.word	0x0802d6dc
 8020e5c:	0802d710 	.word	0x0802d710

08020e60 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020e60:	b580      	push	{r7, lr}
 8020e62:	b088      	sub	sp, #32
 8020e64:	af04      	add	r7, sp, #16
 8020e66:	60f8      	str	r0, [r7, #12]
 8020e68:	60b9      	str	r1, [r7, #8]
 8020e6a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020e6c:	68fb      	ldr	r3, [r7, #12]
 8020e6e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020e72:	68fb      	ldr	r3, [r7, #12]
 8020e74:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8020e78:	68fb      	ldr	r3, [r7, #12]
 8020e7a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020e7c:	2201      	movs	r2, #1
 8020e7e:	9203      	str	r2, [sp, #12]
 8020e80:	68ba      	ldr	r2, [r7, #8]
 8020e82:	9202      	str	r2, [sp, #8]
 8020e84:	4a06      	ldr	r2, [pc, #24]	; (8020ea0 <etharp_request_dst+0x40>)
 8020e86:	9201      	str	r2, [sp, #4]
 8020e88:	9300      	str	r3, [sp, #0]
 8020e8a:	4603      	mov	r3, r0
 8020e8c:	687a      	ldr	r2, [r7, #4]
 8020e8e:	68f8      	ldr	r0, [r7, #12]
 8020e90:	f7ff ff5a 	bl	8020d48 <etharp_raw>
 8020e94:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8020e96:	4618      	mov	r0, r3
 8020e98:	3710      	adds	r7, #16
 8020e9a:	46bd      	mov	sp, r7
 8020e9c:	bd80      	pop	{r7, pc}
 8020e9e:	bf00      	nop
 8020ea0:	0802df40 	.word	0x0802df40

08020ea4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8020ea4:	b580      	push	{r7, lr}
 8020ea6:	b082      	sub	sp, #8
 8020ea8:	af00      	add	r7, sp, #0
 8020eaa:	6078      	str	r0, [r7, #4]
 8020eac:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8020eae:	4a05      	ldr	r2, [pc, #20]	; (8020ec4 <etharp_request+0x20>)
 8020eb0:	6839      	ldr	r1, [r7, #0]
 8020eb2:	6878      	ldr	r0, [r7, #4]
 8020eb4:	f7ff ffd4 	bl	8020e60 <etharp_request_dst>
 8020eb8:	4603      	mov	r3, r0
}
 8020eba:	4618      	mov	r0, r3
 8020ebc:	3708      	adds	r7, #8
 8020ebe:	46bd      	mov	sp, r7
 8020ec0:	bd80      	pop	{r7, pc}
 8020ec2:	bf00      	nop
 8020ec4:	0802df38 	.word	0x0802df38

08020ec8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8020ec8:	b580      	push	{r7, lr}
 8020eca:	b08e      	sub	sp, #56	; 0x38
 8020ecc:	af04      	add	r7, sp, #16
 8020ece:	6078      	str	r0, [r7, #4]
 8020ed0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8020ed2:	4b79      	ldr	r3, [pc, #484]	; (80210b8 <icmp_input+0x1f0>)
 8020ed4:	689b      	ldr	r3, [r3, #8]
 8020ed6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8020ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020eda:	781b      	ldrb	r3, [r3, #0]
 8020edc:	f003 030f 	and.w	r3, r3, #15
 8020ee0:	b2db      	uxtb	r3, r3
 8020ee2:	009b      	lsls	r3, r3, #2
 8020ee4:	b2db      	uxtb	r3, r3
 8020ee6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020ee8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020eea:	2b13      	cmp	r3, #19
 8020eec:	f240 80cd 	bls.w	802108a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020ef0:	687b      	ldr	r3, [r7, #4]
 8020ef2:	895b      	ldrh	r3, [r3, #10]
 8020ef4:	2b03      	cmp	r3, #3
 8020ef6:	f240 80ca 	bls.w	802108e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8020efa:	687b      	ldr	r3, [r7, #4]
 8020efc:	685b      	ldr	r3, [r3, #4]
 8020efe:	781b      	ldrb	r3, [r3, #0]
 8020f00:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8020f04:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020f08:	2b00      	cmp	r3, #0
 8020f0a:	f000 80b7 	beq.w	802107c <icmp_input+0x1b4>
 8020f0e:	2b08      	cmp	r3, #8
 8020f10:	f040 80b7 	bne.w	8021082 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8020f14:	4b69      	ldr	r3, [pc, #420]	; (80210bc <icmp_input+0x1f4>)
 8020f16:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020f18:	4b67      	ldr	r3, [pc, #412]	; (80210b8 <icmp_input+0x1f0>)
 8020f1a:	695b      	ldr	r3, [r3, #20]
 8020f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020f20:	2be0      	cmp	r3, #224	; 0xe0
 8020f22:	f000 80bb 	beq.w	802109c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8020f26:	4b64      	ldr	r3, [pc, #400]	; (80210b8 <icmp_input+0x1f0>)
 8020f28:	695b      	ldr	r3, [r3, #20]
 8020f2a:	4a63      	ldr	r2, [pc, #396]	; (80210b8 <icmp_input+0x1f0>)
 8020f2c:	6812      	ldr	r2, [r2, #0]
 8020f2e:	4611      	mov	r1, r2
 8020f30:	4618      	mov	r0, r3
 8020f32:	f000 fbed 	bl	8021710 <ip4_addr_isbroadcast_u32>
 8020f36:	4603      	mov	r3, r0
 8020f38:	2b00      	cmp	r3, #0
 8020f3a:	f040 80b1 	bne.w	80210a0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8020f3e:	687b      	ldr	r3, [r7, #4]
 8020f40:	891b      	ldrh	r3, [r3, #8]
 8020f42:	2b07      	cmp	r3, #7
 8020f44:	f240 80a5 	bls.w	8021092 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020f48:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020f4a:	330e      	adds	r3, #14
 8020f4c:	4619      	mov	r1, r3
 8020f4e:	6878      	ldr	r0, [r7, #4]
 8020f50:	f7f7 fa9e 	bl	8018490 <pbuf_add_header>
 8020f54:	4603      	mov	r3, r0
 8020f56:	2b00      	cmp	r3, #0
 8020f58:	d04b      	beq.n	8020ff2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8020f5a:	687b      	ldr	r3, [r7, #4]
 8020f5c:	891a      	ldrh	r2, [r3, #8]
 8020f5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020f60:	4413      	add	r3, r2
 8020f62:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8020f64:	687b      	ldr	r3, [r7, #4]
 8020f66:	891b      	ldrh	r3, [r3, #8]
 8020f68:	8b7a      	ldrh	r2, [r7, #26]
 8020f6a:	429a      	cmp	r2, r3
 8020f6c:	f0c0 809a 	bcc.w	80210a4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8020f70:	8b7b      	ldrh	r3, [r7, #26]
 8020f72:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020f76:	4619      	mov	r1, r3
 8020f78:	200e      	movs	r0, #14
 8020f7a:	f7f7 f83b 	bl	8017ff4 <pbuf_alloc>
 8020f7e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8020f80:	697b      	ldr	r3, [r7, #20]
 8020f82:	2b00      	cmp	r3, #0
 8020f84:	f000 8090 	beq.w	80210a8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8020f88:	697b      	ldr	r3, [r7, #20]
 8020f8a:	895b      	ldrh	r3, [r3, #10]
 8020f8c:	461a      	mov	r2, r3
 8020f8e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020f90:	3308      	adds	r3, #8
 8020f92:	429a      	cmp	r2, r3
 8020f94:	d203      	bcs.n	8020f9e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8020f96:	6978      	ldr	r0, [r7, #20]
 8020f98:	f7f7 fb10 	bl	80185bc <pbuf_free>
          goto icmperr;
 8020f9c:	e085      	b.n	80210aa <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8020f9e:	697b      	ldr	r3, [r7, #20]
 8020fa0:	685b      	ldr	r3, [r3, #4]
 8020fa2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020fa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020fa6:	4618      	mov	r0, r3
 8020fa8:	f005 fbc9 	bl	802673e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8020fac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020fae:	4619      	mov	r1, r3
 8020fb0:	6978      	ldr	r0, [r7, #20]
 8020fb2:	f7f7 fa7d 	bl	80184b0 <pbuf_remove_header>
 8020fb6:	4603      	mov	r3, r0
 8020fb8:	2b00      	cmp	r3, #0
 8020fba:	d009      	beq.n	8020fd0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8020fbc:	4b40      	ldr	r3, [pc, #256]	; (80210c0 <icmp_input+0x1f8>)
 8020fbe:	22b6      	movs	r2, #182	; 0xb6
 8020fc0:	4940      	ldr	r1, [pc, #256]	; (80210c4 <icmp_input+0x1fc>)
 8020fc2:	4841      	ldr	r0, [pc, #260]	; (80210c8 <icmp_input+0x200>)
 8020fc4:	f003 fefc 	bl	8024dc0 <iprintf>
          pbuf_free(r);
 8020fc8:	6978      	ldr	r0, [r7, #20]
 8020fca:	f7f7 faf7 	bl	80185bc <pbuf_free>
          goto icmperr;
 8020fce:	e06c      	b.n	80210aa <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8020fd0:	6879      	ldr	r1, [r7, #4]
 8020fd2:	6978      	ldr	r0, [r7, #20]
 8020fd4:	f7f7 fc26 	bl	8018824 <pbuf_copy>
 8020fd8:	4603      	mov	r3, r0
 8020fda:	2b00      	cmp	r3, #0
 8020fdc:	d003      	beq.n	8020fe6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8020fde:	6978      	ldr	r0, [r7, #20]
 8020fe0:	f7f7 faec 	bl	80185bc <pbuf_free>
          goto icmperr;
 8020fe4:	e061      	b.n	80210aa <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8020fe6:	6878      	ldr	r0, [r7, #4]
 8020fe8:	f7f7 fae8 	bl	80185bc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8020fec:	697b      	ldr	r3, [r7, #20]
 8020fee:	607b      	str	r3, [r7, #4]
 8020ff0:	e00f      	b.n	8021012 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020ff2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020ff4:	330e      	adds	r3, #14
 8020ff6:	4619      	mov	r1, r3
 8020ff8:	6878      	ldr	r0, [r7, #4]
 8020ffa:	f7f7 fa59 	bl	80184b0 <pbuf_remove_header>
 8020ffe:	4603      	mov	r3, r0
 8021000:	2b00      	cmp	r3, #0
 8021002:	d006      	beq.n	8021012 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8021004:	4b2e      	ldr	r3, [pc, #184]	; (80210c0 <icmp_input+0x1f8>)
 8021006:	22c7      	movs	r2, #199	; 0xc7
 8021008:	4930      	ldr	r1, [pc, #192]	; (80210cc <icmp_input+0x204>)
 802100a:	482f      	ldr	r0, [pc, #188]	; (80210c8 <icmp_input+0x200>)
 802100c:	f003 fed8 	bl	8024dc0 <iprintf>
          goto icmperr;
 8021010:	e04b      	b.n	80210aa <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8021012:	687b      	ldr	r3, [r7, #4]
 8021014:	685b      	ldr	r3, [r3, #4]
 8021016:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8021018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802101a:	4619      	mov	r1, r3
 802101c:	6878      	ldr	r0, [r7, #4]
 802101e:	f7f7 fa37 	bl	8018490 <pbuf_add_header>
 8021022:	4603      	mov	r3, r0
 8021024:	2b00      	cmp	r3, #0
 8021026:	d12b      	bne.n	8021080 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8021028:	687b      	ldr	r3, [r7, #4]
 802102a:	685b      	ldr	r3, [r3, #4]
 802102c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 802102e:	69fb      	ldr	r3, [r7, #28]
 8021030:	681a      	ldr	r2, [r3, #0]
 8021032:	68fb      	ldr	r3, [r7, #12]
 8021034:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8021036:	4b20      	ldr	r3, [pc, #128]	; (80210b8 <icmp_input+0x1f0>)
 8021038:	691a      	ldr	r2, [r3, #16]
 802103a:	68fb      	ldr	r3, [r7, #12]
 802103c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802103e:	693b      	ldr	r3, [r7, #16]
 8021040:	2200      	movs	r2, #0
 8021042:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8021044:	693b      	ldr	r3, [r7, #16]
 8021046:	2200      	movs	r2, #0
 8021048:	709a      	strb	r2, [r3, #2]
 802104a:	2200      	movs	r2, #0
 802104c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 802104e:	68fb      	ldr	r3, [r7, #12]
 8021050:	22ff      	movs	r2, #255	; 0xff
 8021052:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8021054:	68fb      	ldr	r3, [r7, #12]
 8021056:	2200      	movs	r2, #0
 8021058:	729a      	strb	r2, [r3, #10]
 802105a:	2200      	movs	r2, #0
 802105c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 802105e:	683b      	ldr	r3, [r7, #0]
 8021060:	9302      	str	r3, [sp, #8]
 8021062:	2301      	movs	r3, #1
 8021064:	9301      	str	r3, [sp, #4]
 8021066:	2300      	movs	r3, #0
 8021068:	9300      	str	r3, [sp, #0]
 802106a:	23ff      	movs	r3, #255	; 0xff
 802106c:	2200      	movs	r2, #0
 802106e:	69f9      	ldr	r1, [r7, #28]
 8021070:	6878      	ldr	r0, [r7, #4]
 8021072:	f000 fa75 	bl	8021560 <ip4_output_if>
 8021076:	4603      	mov	r3, r0
 8021078:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 802107a:	e001      	b.n	8021080 <icmp_input+0x1b8>
      break;
 802107c:	bf00      	nop
 802107e:	e000      	b.n	8021082 <icmp_input+0x1ba>
      break;
 8021080:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8021082:	6878      	ldr	r0, [r7, #4]
 8021084:	f7f7 fa9a 	bl	80185bc <pbuf_free>
  return;
 8021088:	e013      	b.n	80210b2 <icmp_input+0x1ea>
    goto lenerr;
 802108a:	bf00      	nop
 802108c:	e002      	b.n	8021094 <icmp_input+0x1cc>
    goto lenerr;
 802108e:	bf00      	nop
 8021090:	e000      	b.n	8021094 <icmp_input+0x1cc>
        goto lenerr;
 8021092:	bf00      	nop
lenerr:
  pbuf_free(p);
 8021094:	6878      	ldr	r0, [r7, #4]
 8021096:	f7f7 fa91 	bl	80185bc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802109a:	e00a      	b.n	80210b2 <icmp_input+0x1ea>
        goto icmperr;
 802109c:	bf00      	nop
 802109e:	e004      	b.n	80210aa <icmp_input+0x1e2>
        goto icmperr;
 80210a0:	bf00      	nop
 80210a2:	e002      	b.n	80210aa <icmp_input+0x1e2>
          goto icmperr;
 80210a4:	bf00      	nop
 80210a6:	e000      	b.n	80210aa <icmp_input+0x1e2>
          goto icmperr;
 80210a8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80210aa:	6878      	ldr	r0, [r7, #4]
 80210ac:	f7f7 fa86 	bl	80185bc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80210b0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80210b2:	3728      	adds	r7, #40	; 0x28
 80210b4:	46bd      	mov	sp, r7
 80210b6:	bd80      	pop	{r7, pc}
 80210b8:	20012458 	.word	0x20012458
 80210bc:	2001246c 	.word	0x2001246c
 80210c0:	0802d754 	.word	0x0802d754
 80210c4:	0802d78c 	.word	0x0802d78c
 80210c8:	0802d7c4 	.word	0x0802d7c4
 80210cc:	0802d7ec 	.word	0x0802d7ec

080210d0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80210d0:	b580      	push	{r7, lr}
 80210d2:	b082      	sub	sp, #8
 80210d4:	af00      	add	r7, sp, #0
 80210d6:	6078      	str	r0, [r7, #4]
 80210d8:	460b      	mov	r3, r1
 80210da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80210dc:	78fb      	ldrb	r3, [r7, #3]
 80210de:	461a      	mov	r2, r3
 80210e0:	2103      	movs	r1, #3
 80210e2:	6878      	ldr	r0, [r7, #4]
 80210e4:	f000 f814 	bl	8021110 <icmp_send_response>
}
 80210e8:	bf00      	nop
 80210ea:	3708      	adds	r7, #8
 80210ec:	46bd      	mov	sp, r7
 80210ee:	bd80      	pop	{r7, pc}

080210f0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80210f0:	b580      	push	{r7, lr}
 80210f2:	b082      	sub	sp, #8
 80210f4:	af00      	add	r7, sp, #0
 80210f6:	6078      	str	r0, [r7, #4]
 80210f8:	460b      	mov	r3, r1
 80210fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80210fc:	78fb      	ldrb	r3, [r7, #3]
 80210fe:	461a      	mov	r2, r3
 8021100:	210b      	movs	r1, #11
 8021102:	6878      	ldr	r0, [r7, #4]
 8021104:	f000 f804 	bl	8021110 <icmp_send_response>
}
 8021108:	bf00      	nop
 802110a:	3708      	adds	r7, #8
 802110c:	46bd      	mov	sp, r7
 802110e:	bd80      	pop	{r7, pc}

08021110 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8021110:	b580      	push	{r7, lr}
 8021112:	b08c      	sub	sp, #48	; 0x30
 8021114:	af04      	add	r7, sp, #16
 8021116:	6078      	str	r0, [r7, #4]
 8021118:	460b      	mov	r3, r1
 802111a:	70fb      	strb	r3, [r7, #3]
 802111c:	4613      	mov	r3, r2
 802111e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8021120:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021124:	2124      	movs	r1, #36	; 0x24
 8021126:	2022      	movs	r0, #34	; 0x22
 8021128:	f7f6 ff64 	bl	8017ff4 <pbuf_alloc>
 802112c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 802112e:	69fb      	ldr	r3, [r7, #28]
 8021130:	2b00      	cmp	r3, #0
 8021132:	d04c      	beq.n	80211ce <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8021134:	69fb      	ldr	r3, [r7, #28]
 8021136:	895b      	ldrh	r3, [r3, #10]
 8021138:	2b23      	cmp	r3, #35	; 0x23
 802113a:	d806      	bhi.n	802114a <icmp_send_response+0x3a>
 802113c:	4b26      	ldr	r3, [pc, #152]	; (80211d8 <icmp_send_response+0xc8>)
 802113e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8021142:	4926      	ldr	r1, [pc, #152]	; (80211dc <icmp_send_response+0xcc>)
 8021144:	4826      	ldr	r0, [pc, #152]	; (80211e0 <icmp_send_response+0xd0>)
 8021146:	f003 fe3b 	bl	8024dc0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 802114a:	687b      	ldr	r3, [r7, #4]
 802114c:	685b      	ldr	r3, [r3, #4]
 802114e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8021150:	69fb      	ldr	r3, [r7, #28]
 8021152:	685b      	ldr	r3, [r3, #4]
 8021154:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8021156:	697b      	ldr	r3, [r7, #20]
 8021158:	78fa      	ldrb	r2, [r7, #3]
 802115a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 802115c:	697b      	ldr	r3, [r7, #20]
 802115e:	78ba      	ldrb	r2, [r7, #2]
 8021160:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8021162:	697b      	ldr	r3, [r7, #20]
 8021164:	2200      	movs	r2, #0
 8021166:	711a      	strb	r2, [r3, #4]
 8021168:	2200      	movs	r2, #0
 802116a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 802116c:	697b      	ldr	r3, [r7, #20]
 802116e:	2200      	movs	r2, #0
 8021170:	719a      	strb	r2, [r3, #6]
 8021172:	2200      	movs	r2, #0
 8021174:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8021176:	69fb      	ldr	r3, [r7, #28]
 8021178:	685b      	ldr	r3, [r3, #4]
 802117a:	f103 0008 	add.w	r0, r3, #8
 802117e:	687b      	ldr	r3, [r7, #4]
 8021180:	685b      	ldr	r3, [r3, #4]
 8021182:	221c      	movs	r2, #28
 8021184:	4619      	mov	r1, r3
 8021186:	f005 fada 	bl	802673e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 802118a:	69bb      	ldr	r3, [r7, #24]
 802118c:	68db      	ldr	r3, [r3, #12]
 802118e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8021190:	f107 030c 	add.w	r3, r7, #12
 8021194:	4618      	mov	r0, r3
 8021196:	f000 f825 	bl	80211e4 <ip4_route>
 802119a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 802119c:	693b      	ldr	r3, [r7, #16]
 802119e:	2b00      	cmp	r3, #0
 80211a0:	d011      	beq.n	80211c6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80211a2:	697b      	ldr	r3, [r7, #20]
 80211a4:	2200      	movs	r2, #0
 80211a6:	709a      	strb	r2, [r3, #2]
 80211a8:	2200      	movs	r2, #0
 80211aa:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80211ac:	f107 020c 	add.w	r2, r7, #12
 80211b0:	693b      	ldr	r3, [r7, #16]
 80211b2:	9302      	str	r3, [sp, #8]
 80211b4:	2301      	movs	r3, #1
 80211b6:	9301      	str	r3, [sp, #4]
 80211b8:	2300      	movs	r3, #0
 80211ba:	9300      	str	r3, [sp, #0]
 80211bc:	23ff      	movs	r3, #255	; 0xff
 80211be:	2100      	movs	r1, #0
 80211c0:	69f8      	ldr	r0, [r7, #28]
 80211c2:	f000 f9cd 	bl	8021560 <ip4_output_if>
  }
  pbuf_free(q);
 80211c6:	69f8      	ldr	r0, [r7, #28]
 80211c8:	f7f7 f9f8 	bl	80185bc <pbuf_free>
 80211cc:	e000      	b.n	80211d0 <icmp_send_response+0xc0>
    return;
 80211ce:	bf00      	nop
}
 80211d0:	3720      	adds	r7, #32
 80211d2:	46bd      	mov	sp, r7
 80211d4:	bd80      	pop	{r7, pc}
 80211d6:	bf00      	nop
 80211d8:	0802d754 	.word	0x0802d754
 80211dc:	0802d820 	.word	0x0802d820
 80211e0:	0802d7c4 	.word	0x0802d7c4

080211e4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80211e4:	b480      	push	{r7}
 80211e6:	b085      	sub	sp, #20
 80211e8:	af00      	add	r7, sp, #0
 80211ea:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80211ec:	4b33      	ldr	r3, [pc, #204]	; (80212bc <ip4_route+0xd8>)
 80211ee:	681b      	ldr	r3, [r3, #0]
 80211f0:	60fb      	str	r3, [r7, #12]
 80211f2:	e036      	b.n	8021262 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80211f4:	68fb      	ldr	r3, [r7, #12]
 80211f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80211fa:	f003 0301 	and.w	r3, r3, #1
 80211fe:	b2db      	uxtb	r3, r3
 8021200:	2b00      	cmp	r3, #0
 8021202:	d02b      	beq.n	802125c <ip4_route+0x78>
 8021204:	68fb      	ldr	r3, [r7, #12]
 8021206:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802120a:	089b      	lsrs	r3, r3, #2
 802120c:	f003 0301 	and.w	r3, r3, #1
 8021210:	b2db      	uxtb	r3, r3
 8021212:	2b00      	cmp	r3, #0
 8021214:	d022      	beq.n	802125c <ip4_route+0x78>
 8021216:	68fb      	ldr	r3, [r7, #12]
 8021218:	3304      	adds	r3, #4
 802121a:	681b      	ldr	r3, [r3, #0]
 802121c:	2b00      	cmp	r3, #0
 802121e:	d01d      	beq.n	802125c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8021220:	687b      	ldr	r3, [r7, #4]
 8021222:	681a      	ldr	r2, [r3, #0]
 8021224:	68fb      	ldr	r3, [r7, #12]
 8021226:	3304      	adds	r3, #4
 8021228:	681b      	ldr	r3, [r3, #0]
 802122a:	405a      	eors	r2, r3
 802122c:	68fb      	ldr	r3, [r7, #12]
 802122e:	3308      	adds	r3, #8
 8021230:	681b      	ldr	r3, [r3, #0]
 8021232:	4013      	ands	r3, r2
 8021234:	2b00      	cmp	r3, #0
 8021236:	d101      	bne.n	802123c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8021238:	68fb      	ldr	r3, [r7, #12]
 802123a:	e038      	b.n	80212ae <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 802123c:	68fb      	ldr	r3, [r7, #12]
 802123e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021242:	f003 0302 	and.w	r3, r3, #2
 8021246:	2b00      	cmp	r3, #0
 8021248:	d108      	bne.n	802125c <ip4_route+0x78>
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	681a      	ldr	r2, [r3, #0]
 802124e:	68fb      	ldr	r3, [r7, #12]
 8021250:	330c      	adds	r3, #12
 8021252:	681b      	ldr	r3, [r3, #0]
 8021254:	429a      	cmp	r2, r3
 8021256:	d101      	bne.n	802125c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8021258:	68fb      	ldr	r3, [r7, #12]
 802125a:	e028      	b.n	80212ae <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 802125c:	68fb      	ldr	r3, [r7, #12]
 802125e:	681b      	ldr	r3, [r3, #0]
 8021260:	60fb      	str	r3, [r7, #12]
 8021262:	68fb      	ldr	r3, [r7, #12]
 8021264:	2b00      	cmp	r3, #0
 8021266:	d1c5      	bne.n	80211f4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8021268:	4b15      	ldr	r3, [pc, #84]	; (80212c0 <ip4_route+0xdc>)
 802126a:	681b      	ldr	r3, [r3, #0]
 802126c:	2b00      	cmp	r3, #0
 802126e:	d01a      	beq.n	80212a6 <ip4_route+0xc2>
 8021270:	4b13      	ldr	r3, [pc, #76]	; (80212c0 <ip4_route+0xdc>)
 8021272:	681b      	ldr	r3, [r3, #0]
 8021274:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021278:	f003 0301 	and.w	r3, r3, #1
 802127c:	2b00      	cmp	r3, #0
 802127e:	d012      	beq.n	80212a6 <ip4_route+0xc2>
 8021280:	4b0f      	ldr	r3, [pc, #60]	; (80212c0 <ip4_route+0xdc>)
 8021282:	681b      	ldr	r3, [r3, #0]
 8021284:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021288:	f003 0304 	and.w	r3, r3, #4
 802128c:	2b00      	cmp	r3, #0
 802128e:	d00a      	beq.n	80212a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8021290:	4b0b      	ldr	r3, [pc, #44]	; (80212c0 <ip4_route+0xdc>)
 8021292:	681b      	ldr	r3, [r3, #0]
 8021294:	3304      	adds	r3, #4
 8021296:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8021298:	2b00      	cmp	r3, #0
 802129a:	d004      	beq.n	80212a6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 802129c:	687b      	ldr	r3, [r7, #4]
 802129e:	681b      	ldr	r3, [r3, #0]
 80212a0:	b2db      	uxtb	r3, r3
 80212a2:	2b7f      	cmp	r3, #127	; 0x7f
 80212a4:	d101      	bne.n	80212aa <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80212a6:	2300      	movs	r3, #0
 80212a8:	e001      	b.n	80212ae <ip4_route+0xca>
  }

  return netif_default;
 80212aa:	4b05      	ldr	r3, [pc, #20]	; (80212c0 <ip4_route+0xdc>)
 80212ac:	681b      	ldr	r3, [r3, #0]
}
 80212ae:	4618      	mov	r0, r3
 80212b0:	3714      	adds	r7, #20
 80212b2:	46bd      	mov	sp, r7
 80212b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212b8:	4770      	bx	lr
 80212ba:	bf00      	nop
 80212bc:	20015fc8 	.word	0x20015fc8
 80212c0:	20015fcc 	.word	0x20015fcc

080212c4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80212c4:	b580      	push	{r7, lr}
 80212c6:	b082      	sub	sp, #8
 80212c8:	af00      	add	r7, sp, #0
 80212ca:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80212cc:	687b      	ldr	r3, [r7, #4]
 80212ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80212d2:	f003 0301 	and.w	r3, r3, #1
 80212d6:	b2db      	uxtb	r3, r3
 80212d8:	2b00      	cmp	r3, #0
 80212da:	d016      	beq.n	802130a <ip4_input_accept+0x46>
 80212dc:	687b      	ldr	r3, [r7, #4]
 80212de:	3304      	adds	r3, #4
 80212e0:	681b      	ldr	r3, [r3, #0]
 80212e2:	2b00      	cmp	r3, #0
 80212e4:	d011      	beq.n	802130a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80212e6:	4b0b      	ldr	r3, [pc, #44]	; (8021314 <ip4_input_accept+0x50>)
 80212e8:	695a      	ldr	r2, [r3, #20]
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	3304      	adds	r3, #4
 80212ee:	681b      	ldr	r3, [r3, #0]
 80212f0:	429a      	cmp	r2, r3
 80212f2:	d008      	beq.n	8021306 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80212f4:	4b07      	ldr	r3, [pc, #28]	; (8021314 <ip4_input_accept+0x50>)
 80212f6:	695b      	ldr	r3, [r3, #20]
 80212f8:	6879      	ldr	r1, [r7, #4]
 80212fa:	4618      	mov	r0, r3
 80212fc:	f000 fa08 	bl	8021710 <ip4_addr_isbroadcast_u32>
 8021300:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021302:	2b00      	cmp	r3, #0
 8021304:	d001      	beq.n	802130a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8021306:	2301      	movs	r3, #1
 8021308:	e000      	b.n	802130c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802130a:	2300      	movs	r3, #0
}
 802130c:	4618      	mov	r0, r3
 802130e:	3708      	adds	r7, #8
 8021310:	46bd      	mov	sp, r7
 8021312:	bd80      	pop	{r7, pc}
 8021314:	20012458 	.word	0x20012458

08021318 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8021318:	b580      	push	{r7, lr}
 802131a:	b086      	sub	sp, #24
 802131c:	af00      	add	r7, sp, #0
 802131e:	6078      	str	r0, [r7, #4]
 8021320:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8021322:	687b      	ldr	r3, [r7, #4]
 8021324:	685b      	ldr	r3, [r3, #4]
 8021326:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8021328:	697b      	ldr	r3, [r7, #20]
 802132a:	781b      	ldrb	r3, [r3, #0]
 802132c:	091b      	lsrs	r3, r3, #4
 802132e:	b2db      	uxtb	r3, r3
 8021330:	2b04      	cmp	r3, #4
 8021332:	d004      	beq.n	802133e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8021334:	6878      	ldr	r0, [r7, #4]
 8021336:	f7f7 f941 	bl	80185bc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 802133a:	2300      	movs	r3, #0
 802133c:	e107      	b.n	802154e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 802133e:	697b      	ldr	r3, [r7, #20]
 8021340:	781b      	ldrb	r3, [r3, #0]
 8021342:	f003 030f 	and.w	r3, r3, #15
 8021346:	b2db      	uxtb	r3, r3
 8021348:	009b      	lsls	r3, r3, #2
 802134a:	b2db      	uxtb	r3, r3
 802134c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 802134e:	697b      	ldr	r3, [r7, #20]
 8021350:	885b      	ldrh	r3, [r3, #2]
 8021352:	b29b      	uxth	r3, r3
 8021354:	4618      	mov	r0, r3
 8021356:	f7f5 fa75 	bl	8016844 <lwip_htons>
 802135a:	4603      	mov	r3, r0
 802135c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 802135e:	687b      	ldr	r3, [r7, #4]
 8021360:	891b      	ldrh	r3, [r3, #8]
 8021362:	89ba      	ldrh	r2, [r7, #12]
 8021364:	429a      	cmp	r2, r3
 8021366:	d204      	bcs.n	8021372 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8021368:	89bb      	ldrh	r3, [r7, #12]
 802136a:	4619      	mov	r1, r3
 802136c:	6878      	ldr	r0, [r7, #4]
 802136e:	f7f6 ff9f 	bl	80182b0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8021372:	687b      	ldr	r3, [r7, #4]
 8021374:	895b      	ldrh	r3, [r3, #10]
 8021376:	89fa      	ldrh	r2, [r7, #14]
 8021378:	429a      	cmp	r2, r3
 802137a:	d807      	bhi.n	802138c <ip4_input+0x74>
 802137c:	687b      	ldr	r3, [r7, #4]
 802137e:	891b      	ldrh	r3, [r3, #8]
 8021380:	89ba      	ldrh	r2, [r7, #12]
 8021382:	429a      	cmp	r2, r3
 8021384:	d802      	bhi.n	802138c <ip4_input+0x74>
 8021386:	89fb      	ldrh	r3, [r7, #14]
 8021388:	2b13      	cmp	r3, #19
 802138a:	d804      	bhi.n	8021396 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 802138c:	6878      	ldr	r0, [r7, #4]
 802138e:	f7f7 f915 	bl	80185bc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8021392:	2300      	movs	r3, #0
 8021394:	e0db      	b.n	802154e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8021396:	697b      	ldr	r3, [r7, #20]
 8021398:	691b      	ldr	r3, [r3, #16]
 802139a:	4a6f      	ldr	r2, [pc, #444]	; (8021558 <ip4_input+0x240>)
 802139c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802139e:	697b      	ldr	r3, [r7, #20]
 80213a0:	68db      	ldr	r3, [r3, #12]
 80213a2:	4a6d      	ldr	r2, [pc, #436]	; (8021558 <ip4_input+0x240>)
 80213a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80213a6:	4b6c      	ldr	r3, [pc, #432]	; (8021558 <ip4_input+0x240>)
 80213a8:	695b      	ldr	r3, [r3, #20]
 80213aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80213ae:	2be0      	cmp	r3, #224	; 0xe0
 80213b0:	d112      	bne.n	80213d8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80213b2:	683b      	ldr	r3, [r7, #0]
 80213b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80213b8:	f003 0301 	and.w	r3, r3, #1
 80213bc:	b2db      	uxtb	r3, r3
 80213be:	2b00      	cmp	r3, #0
 80213c0:	d007      	beq.n	80213d2 <ip4_input+0xba>
 80213c2:	683b      	ldr	r3, [r7, #0]
 80213c4:	3304      	adds	r3, #4
 80213c6:	681b      	ldr	r3, [r3, #0]
 80213c8:	2b00      	cmp	r3, #0
 80213ca:	d002      	beq.n	80213d2 <ip4_input+0xba>
      netif = inp;
 80213cc:	683b      	ldr	r3, [r7, #0]
 80213ce:	613b      	str	r3, [r7, #16]
 80213d0:	e02a      	b.n	8021428 <ip4_input+0x110>
    } else {
      netif = NULL;
 80213d2:	2300      	movs	r3, #0
 80213d4:	613b      	str	r3, [r7, #16]
 80213d6:	e027      	b.n	8021428 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80213d8:	6838      	ldr	r0, [r7, #0]
 80213da:	f7ff ff73 	bl	80212c4 <ip4_input_accept>
 80213de:	4603      	mov	r3, r0
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d002      	beq.n	80213ea <ip4_input+0xd2>
      netif = inp;
 80213e4:	683b      	ldr	r3, [r7, #0]
 80213e6:	613b      	str	r3, [r7, #16]
 80213e8:	e01e      	b.n	8021428 <ip4_input+0x110>
    } else {
      netif = NULL;
 80213ea:	2300      	movs	r3, #0
 80213ec:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80213ee:	4b5a      	ldr	r3, [pc, #360]	; (8021558 <ip4_input+0x240>)
 80213f0:	695b      	ldr	r3, [r3, #20]
 80213f2:	b2db      	uxtb	r3, r3
 80213f4:	2b7f      	cmp	r3, #127	; 0x7f
 80213f6:	d017      	beq.n	8021428 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80213f8:	4b58      	ldr	r3, [pc, #352]	; (802155c <ip4_input+0x244>)
 80213fa:	681b      	ldr	r3, [r3, #0]
 80213fc:	613b      	str	r3, [r7, #16]
 80213fe:	e00e      	b.n	802141e <ip4_input+0x106>
          if (netif == inp) {
 8021400:	693a      	ldr	r2, [r7, #16]
 8021402:	683b      	ldr	r3, [r7, #0]
 8021404:	429a      	cmp	r2, r3
 8021406:	d006      	beq.n	8021416 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8021408:	6938      	ldr	r0, [r7, #16]
 802140a:	f7ff ff5b 	bl	80212c4 <ip4_input_accept>
 802140e:	4603      	mov	r3, r0
 8021410:	2b00      	cmp	r3, #0
 8021412:	d108      	bne.n	8021426 <ip4_input+0x10e>
 8021414:	e000      	b.n	8021418 <ip4_input+0x100>
            continue;
 8021416:	bf00      	nop
        NETIF_FOREACH(netif) {
 8021418:	693b      	ldr	r3, [r7, #16]
 802141a:	681b      	ldr	r3, [r3, #0]
 802141c:	613b      	str	r3, [r7, #16]
 802141e:	693b      	ldr	r3, [r7, #16]
 8021420:	2b00      	cmp	r3, #0
 8021422:	d1ed      	bne.n	8021400 <ip4_input+0xe8>
 8021424:	e000      	b.n	8021428 <ip4_input+0x110>
            break;
 8021426:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021428:	4b4b      	ldr	r3, [pc, #300]	; (8021558 <ip4_input+0x240>)
 802142a:	691b      	ldr	r3, [r3, #16]
 802142c:	6839      	ldr	r1, [r7, #0]
 802142e:	4618      	mov	r0, r3
 8021430:	f000 f96e 	bl	8021710 <ip4_addr_isbroadcast_u32>
 8021434:	4603      	mov	r3, r0
 8021436:	2b00      	cmp	r3, #0
 8021438:	d105      	bne.n	8021446 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802143a:	4b47      	ldr	r3, [pc, #284]	; (8021558 <ip4_input+0x240>)
 802143c:	691b      	ldr	r3, [r3, #16]
 802143e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021442:	2be0      	cmp	r3, #224	; 0xe0
 8021444:	d104      	bne.n	8021450 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8021446:	6878      	ldr	r0, [r7, #4]
 8021448:	f7f7 f8b8 	bl	80185bc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 802144c:	2300      	movs	r3, #0
 802144e:	e07e      	b.n	802154e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8021450:	693b      	ldr	r3, [r7, #16]
 8021452:	2b00      	cmp	r3, #0
 8021454:	d104      	bne.n	8021460 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8021456:	6878      	ldr	r0, [r7, #4]
 8021458:	f7f7 f8b0 	bl	80185bc <pbuf_free>
    return ERR_OK;
 802145c:	2300      	movs	r3, #0
 802145e:	e076      	b.n	802154e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8021460:	697b      	ldr	r3, [r7, #20]
 8021462:	88db      	ldrh	r3, [r3, #6]
 8021464:	b29b      	uxth	r3, r3
 8021466:	461a      	mov	r2, r3
 8021468:	f64f 733f 	movw	r3, #65343	; 0xff3f
 802146c:	4013      	ands	r3, r2
 802146e:	2b00      	cmp	r3, #0
 8021470:	d00b      	beq.n	802148a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8021472:	6878      	ldr	r0, [r7, #4]
 8021474:	f000 fe4c 	bl	8022110 <ip4_reass>
 8021478:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802147a:	687b      	ldr	r3, [r7, #4]
 802147c:	2b00      	cmp	r3, #0
 802147e:	d101      	bne.n	8021484 <ip4_input+0x16c>
      return ERR_OK;
 8021480:	2300      	movs	r3, #0
 8021482:	e064      	b.n	802154e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8021484:	687b      	ldr	r3, [r7, #4]
 8021486:	685b      	ldr	r3, [r3, #4]
 8021488:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802148a:	4a33      	ldr	r2, [pc, #204]	; (8021558 <ip4_input+0x240>)
 802148c:	693b      	ldr	r3, [r7, #16]
 802148e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8021490:	4a31      	ldr	r2, [pc, #196]	; (8021558 <ip4_input+0x240>)
 8021492:	683b      	ldr	r3, [r7, #0]
 8021494:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8021496:	4a30      	ldr	r2, [pc, #192]	; (8021558 <ip4_input+0x240>)
 8021498:	697b      	ldr	r3, [r7, #20]
 802149a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 802149c:	697b      	ldr	r3, [r7, #20]
 802149e:	781b      	ldrb	r3, [r3, #0]
 80214a0:	f003 030f 	and.w	r3, r3, #15
 80214a4:	b2db      	uxtb	r3, r3
 80214a6:	009b      	lsls	r3, r3, #2
 80214a8:	b2db      	uxtb	r3, r3
 80214aa:	b29a      	uxth	r2, r3
 80214ac:	4b2a      	ldr	r3, [pc, #168]	; (8021558 <ip4_input+0x240>)
 80214ae:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80214b0:	89fb      	ldrh	r3, [r7, #14]
 80214b2:	4619      	mov	r1, r3
 80214b4:	6878      	ldr	r0, [r7, #4]
 80214b6:	f7f6 fffb 	bl	80184b0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80214ba:	697b      	ldr	r3, [r7, #20]
 80214bc:	7a5b      	ldrb	r3, [r3, #9]
 80214be:	2b11      	cmp	r3, #17
 80214c0:	d006      	beq.n	80214d0 <ip4_input+0x1b8>
 80214c2:	2b11      	cmp	r3, #17
 80214c4:	dc13      	bgt.n	80214ee <ip4_input+0x1d6>
 80214c6:	2b01      	cmp	r3, #1
 80214c8:	d00c      	beq.n	80214e4 <ip4_input+0x1cc>
 80214ca:	2b06      	cmp	r3, #6
 80214cc:	d005      	beq.n	80214da <ip4_input+0x1c2>
 80214ce:	e00e      	b.n	80214ee <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80214d0:	6839      	ldr	r1, [r7, #0]
 80214d2:	6878      	ldr	r0, [r7, #4]
 80214d4:	f7fe f8c2 	bl	801f65c <udp_input>
        break;
 80214d8:	e026      	b.n	8021528 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80214da:	6839      	ldr	r1, [r7, #0]
 80214dc:	6878      	ldr	r0, [r7, #4]
 80214de:	f7f9 fc6d 	bl	801adbc <tcp_input>
        break;
 80214e2:	e021      	b.n	8021528 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80214e4:	6839      	ldr	r1, [r7, #0]
 80214e6:	6878      	ldr	r0, [r7, #4]
 80214e8:	f7ff fcee 	bl	8020ec8 <icmp_input>
        break;
 80214ec:	e01c      	b.n	8021528 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80214ee:	4b1a      	ldr	r3, [pc, #104]	; (8021558 <ip4_input+0x240>)
 80214f0:	695b      	ldr	r3, [r3, #20]
 80214f2:	6939      	ldr	r1, [r7, #16]
 80214f4:	4618      	mov	r0, r3
 80214f6:	f000 f90b 	bl	8021710 <ip4_addr_isbroadcast_u32>
 80214fa:	4603      	mov	r3, r0
 80214fc:	2b00      	cmp	r3, #0
 80214fe:	d10f      	bne.n	8021520 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021500:	4b15      	ldr	r3, [pc, #84]	; (8021558 <ip4_input+0x240>)
 8021502:	695b      	ldr	r3, [r3, #20]
 8021504:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021508:	2be0      	cmp	r3, #224	; 0xe0
 802150a:	d009      	beq.n	8021520 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 802150c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021510:	4619      	mov	r1, r3
 8021512:	6878      	ldr	r0, [r7, #4]
 8021514:	f7f7 f83f 	bl	8018596 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8021518:	2102      	movs	r1, #2
 802151a:	6878      	ldr	r0, [r7, #4]
 802151c:	f7ff fdd8 	bl	80210d0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8021520:	6878      	ldr	r0, [r7, #4]
 8021522:	f7f7 f84b 	bl	80185bc <pbuf_free>
        break;
 8021526:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8021528:	4b0b      	ldr	r3, [pc, #44]	; (8021558 <ip4_input+0x240>)
 802152a:	2200      	movs	r2, #0
 802152c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 802152e:	4b0a      	ldr	r3, [pc, #40]	; (8021558 <ip4_input+0x240>)
 8021530:	2200      	movs	r2, #0
 8021532:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8021534:	4b08      	ldr	r3, [pc, #32]	; (8021558 <ip4_input+0x240>)
 8021536:	2200      	movs	r2, #0
 8021538:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 802153a:	4b07      	ldr	r3, [pc, #28]	; (8021558 <ip4_input+0x240>)
 802153c:	2200      	movs	r2, #0
 802153e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8021540:	4b05      	ldr	r3, [pc, #20]	; (8021558 <ip4_input+0x240>)
 8021542:	2200      	movs	r2, #0
 8021544:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8021546:	4b04      	ldr	r3, [pc, #16]	; (8021558 <ip4_input+0x240>)
 8021548:	2200      	movs	r2, #0
 802154a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 802154c:	2300      	movs	r3, #0
}
 802154e:	4618      	mov	r0, r3
 8021550:	3718      	adds	r7, #24
 8021552:	46bd      	mov	sp, r7
 8021554:	bd80      	pop	{r7, pc}
 8021556:	bf00      	nop
 8021558:	20012458 	.word	0x20012458
 802155c:	20015fc8 	.word	0x20015fc8

08021560 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8021560:	b580      	push	{r7, lr}
 8021562:	b08a      	sub	sp, #40	; 0x28
 8021564:	af04      	add	r7, sp, #16
 8021566:	60f8      	str	r0, [r7, #12]
 8021568:	60b9      	str	r1, [r7, #8]
 802156a:	607a      	str	r2, [r7, #4]
 802156c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 802156e:	68bb      	ldr	r3, [r7, #8]
 8021570:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8021572:	687b      	ldr	r3, [r7, #4]
 8021574:	2b00      	cmp	r3, #0
 8021576:	d009      	beq.n	802158c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8021578:	68bb      	ldr	r3, [r7, #8]
 802157a:	2b00      	cmp	r3, #0
 802157c:	d003      	beq.n	8021586 <ip4_output_if+0x26>
 802157e:	68bb      	ldr	r3, [r7, #8]
 8021580:	681b      	ldr	r3, [r3, #0]
 8021582:	2b00      	cmp	r3, #0
 8021584:	d102      	bne.n	802158c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8021586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021588:	3304      	adds	r3, #4
 802158a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 802158c:	78fa      	ldrb	r2, [r7, #3]
 802158e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021590:	9302      	str	r3, [sp, #8]
 8021592:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8021596:	9301      	str	r3, [sp, #4]
 8021598:	f897 3020 	ldrb.w	r3, [r7, #32]
 802159c:	9300      	str	r3, [sp, #0]
 802159e:	4613      	mov	r3, r2
 80215a0:	687a      	ldr	r2, [r7, #4]
 80215a2:	6979      	ldr	r1, [r7, #20]
 80215a4:	68f8      	ldr	r0, [r7, #12]
 80215a6:	f000 f805 	bl	80215b4 <ip4_output_if_src>
 80215aa:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80215ac:	4618      	mov	r0, r3
 80215ae:	3718      	adds	r7, #24
 80215b0:	46bd      	mov	sp, r7
 80215b2:	bd80      	pop	{r7, pc}

080215b4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80215b4:	b580      	push	{r7, lr}
 80215b6:	b088      	sub	sp, #32
 80215b8:	af00      	add	r7, sp, #0
 80215ba:	60f8      	str	r0, [r7, #12]
 80215bc:	60b9      	str	r1, [r7, #8]
 80215be:	607a      	str	r2, [r7, #4]
 80215c0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80215c2:	68fb      	ldr	r3, [r7, #12]
 80215c4:	7b9b      	ldrb	r3, [r3, #14]
 80215c6:	2b01      	cmp	r3, #1
 80215c8:	d006      	beq.n	80215d8 <ip4_output_if_src+0x24>
 80215ca:	4b4b      	ldr	r3, [pc, #300]	; (80216f8 <ip4_output_if_src+0x144>)
 80215cc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80215d0:	494a      	ldr	r1, [pc, #296]	; (80216fc <ip4_output_if_src+0x148>)
 80215d2:	484b      	ldr	r0, [pc, #300]	; (8021700 <ip4_output_if_src+0x14c>)
 80215d4:	f003 fbf4 	bl	8024dc0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80215d8:	687b      	ldr	r3, [r7, #4]
 80215da:	2b00      	cmp	r3, #0
 80215dc:	d060      	beq.n	80216a0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80215de:	2314      	movs	r3, #20
 80215e0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80215e2:	2114      	movs	r1, #20
 80215e4:	68f8      	ldr	r0, [r7, #12]
 80215e6:	f7f6 ff53 	bl	8018490 <pbuf_add_header>
 80215ea:	4603      	mov	r3, r0
 80215ec:	2b00      	cmp	r3, #0
 80215ee:	d002      	beq.n	80215f6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80215f0:	f06f 0301 	mvn.w	r3, #1
 80215f4:	e07c      	b.n	80216f0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80215f6:	68fb      	ldr	r3, [r7, #12]
 80215f8:	685b      	ldr	r3, [r3, #4]
 80215fa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80215fc:	68fb      	ldr	r3, [r7, #12]
 80215fe:	895b      	ldrh	r3, [r3, #10]
 8021600:	2b13      	cmp	r3, #19
 8021602:	d806      	bhi.n	8021612 <ip4_output_if_src+0x5e>
 8021604:	4b3c      	ldr	r3, [pc, #240]	; (80216f8 <ip4_output_if_src+0x144>)
 8021606:	f44f 7262 	mov.w	r2, #904	; 0x388
 802160a:	493e      	ldr	r1, [pc, #248]	; (8021704 <ip4_output_if_src+0x150>)
 802160c:	483c      	ldr	r0, [pc, #240]	; (8021700 <ip4_output_if_src+0x14c>)
 802160e:	f003 fbd7 	bl	8024dc0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8021612:	69fb      	ldr	r3, [r7, #28]
 8021614:	78fa      	ldrb	r2, [r7, #3]
 8021616:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8021618:	69fb      	ldr	r3, [r7, #28]
 802161a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 802161e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8021620:	687b      	ldr	r3, [r7, #4]
 8021622:	681a      	ldr	r2, [r3, #0]
 8021624:	69fb      	ldr	r3, [r7, #28]
 8021626:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8021628:	8b7b      	ldrh	r3, [r7, #26]
 802162a:	089b      	lsrs	r3, r3, #2
 802162c:	b29b      	uxth	r3, r3
 802162e:	b2db      	uxtb	r3, r3
 8021630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021634:	b2da      	uxtb	r2, r3
 8021636:	69fb      	ldr	r3, [r7, #28]
 8021638:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 802163a:	69fb      	ldr	r3, [r7, #28]
 802163c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8021640:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021642:	68fb      	ldr	r3, [r7, #12]
 8021644:	891b      	ldrh	r3, [r3, #8]
 8021646:	4618      	mov	r0, r3
 8021648:	f7f5 f8fc 	bl	8016844 <lwip_htons>
 802164c:	4603      	mov	r3, r0
 802164e:	461a      	mov	r2, r3
 8021650:	69fb      	ldr	r3, [r7, #28]
 8021652:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8021654:	69fb      	ldr	r3, [r7, #28]
 8021656:	2200      	movs	r2, #0
 8021658:	719a      	strb	r2, [r3, #6]
 802165a:	2200      	movs	r2, #0
 802165c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802165e:	4b2a      	ldr	r3, [pc, #168]	; (8021708 <ip4_output_if_src+0x154>)
 8021660:	881b      	ldrh	r3, [r3, #0]
 8021662:	4618      	mov	r0, r3
 8021664:	f7f5 f8ee 	bl	8016844 <lwip_htons>
 8021668:	4603      	mov	r3, r0
 802166a:	461a      	mov	r2, r3
 802166c:	69fb      	ldr	r3, [r7, #28]
 802166e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8021670:	4b25      	ldr	r3, [pc, #148]	; (8021708 <ip4_output_if_src+0x154>)
 8021672:	881b      	ldrh	r3, [r3, #0]
 8021674:	3301      	adds	r3, #1
 8021676:	b29a      	uxth	r2, r3
 8021678:	4b23      	ldr	r3, [pc, #140]	; (8021708 <ip4_output_if_src+0x154>)
 802167a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 802167c:	68bb      	ldr	r3, [r7, #8]
 802167e:	2b00      	cmp	r3, #0
 8021680:	d104      	bne.n	802168c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8021682:	4b22      	ldr	r3, [pc, #136]	; (802170c <ip4_output_if_src+0x158>)
 8021684:	681a      	ldr	r2, [r3, #0]
 8021686:	69fb      	ldr	r3, [r7, #28]
 8021688:	60da      	str	r2, [r3, #12]
 802168a:	e003      	b.n	8021694 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 802168c:	68bb      	ldr	r3, [r7, #8]
 802168e:	681a      	ldr	r2, [r3, #0]
 8021690:	69fb      	ldr	r3, [r7, #28]
 8021692:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8021694:	69fb      	ldr	r3, [r7, #28]
 8021696:	2200      	movs	r2, #0
 8021698:	729a      	strb	r2, [r3, #10]
 802169a:	2200      	movs	r2, #0
 802169c:	72da      	strb	r2, [r3, #11]
 802169e:	e00f      	b.n	80216c0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80216a0:	68fb      	ldr	r3, [r7, #12]
 80216a2:	895b      	ldrh	r3, [r3, #10]
 80216a4:	2b13      	cmp	r3, #19
 80216a6:	d802      	bhi.n	80216ae <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80216a8:	f06f 0301 	mvn.w	r3, #1
 80216ac:	e020      	b.n	80216f0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80216ae:	68fb      	ldr	r3, [r7, #12]
 80216b0:	685b      	ldr	r3, [r3, #4]
 80216b2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80216b4:	69fb      	ldr	r3, [r7, #28]
 80216b6:	691b      	ldr	r3, [r3, #16]
 80216b8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80216ba:	f107 0314 	add.w	r3, r7, #20
 80216be:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80216c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80216c4:	2b00      	cmp	r3, #0
 80216c6:	d00c      	beq.n	80216e2 <ip4_output_if_src+0x12e>
 80216c8:	68fb      	ldr	r3, [r7, #12]
 80216ca:	891a      	ldrh	r2, [r3, #8]
 80216cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80216d0:	429a      	cmp	r2, r3
 80216d2:	d906      	bls.n	80216e2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80216d4:	687a      	ldr	r2, [r7, #4]
 80216d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80216d8:	68f8      	ldr	r0, [r7, #12]
 80216da:	f000 ff0d 	bl	80224f8 <ip4_frag>
 80216de:	4603      	mov	r3, r0
 80216e0:	e006      	b.n	80216f0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80216e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80216e4:	695b      	ldr	r3, [r3, #20]
 80216e6:	687a      	ldr	r2, [r7, #4]
 80216e8:	68f9      	ldr	r1, [r7, #12]
 80216ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80216ec:	4798      	blx	r3
 80216ee:	4603      	mov	r3, r0
}
 80216f0:	4618      	mov	r0, r3
 80216f2:	3720      	adds	r7, #32
 80216f4:	46bd      	mov	sp, r7
 80216f6:	bd80      	pop	{r7, pc}
 80216f8:	0802d84c 	.word	0x0802d84c
 80216fc:	0802d880 	.word	0x0802d880
 8021700:	0802d88c 	.word	0x0802d88c
 8021704:	0802d8b4 	.word	0x0802d8b4
 8021708:	20016126 	.word	0x20016126
 802170c:	0802df34 	.word	0x0802df34

08021710 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8021710:	b480      	push	{r7}
 8021712:	b085      	sub	sp, #20
 8021714:	af00      	add	r7, sp, #0
 8021716:	6078      	str	r0, [r7, #4]
 8021718:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 802171a:	687b      	ldr	r3, [r7, #4]
 802171c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 802171e:	687b      	ldr	r3, [r7, #4]
 8021720:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8021724:	d002      	beq.n	802172c <ip4_addr_isbroadcast_u32+0x1c>
 8021726:	687b      	ldr	r3, [r7, #4]
 8021728:	2b00      	cmp	r3, #0
 802172a:	d101      	bne.n	8021730 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 802172c:	2301      	movs	r3, #1
 802172e:	e02a      	b.n	8021786 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8021730:	683b      	ldr	r3, [r7, #0]
 8021732:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021736:	f003 0302 	and.w	r3, r3, #2
 802173a:	2b00      	cmp	r3, #0
 802173c:	d101      	bne.n	8021742 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 802173e:	2300      	movs	r3, #0
 8021740:	e021      	b.n	8021786 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8021742:	683b      	ldr	r3, [r7, #0]
 8021744:	3304      	adds	r3, #4
 8021746:	681b      	ldr	r3, [r3, #0]
 8021748:	687a      	ldr	r2, [r7, #4]
 802174a:	429a      	cmp	r2, r3
 802174c:	d101      	bne.n	8021752 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 802174e:	2300      	movs	r3, #0
 8021750:	e019      	b.n	8021786 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8021752:	68fa      	ldr	r2, [r7, #12]
 8021754:	683b      	ldr	r3, [r7, #0]
 8021756:	3304      	adds	r3, #4
 8021758:	681b      	ldr	r3, [r3, #0]
 802175a:	405a      	eors	r2, r3
 802175c:	683b      	ldr	r3, [r7, #0]
 802175e:	3308      	adds	r3, #8
 8021760:	681b      	ldr	r3, [r3, #0]
 8021762:	4013      	ands	r3, r2
 8021764:	2b00      	cmp	r3, #0
 8021766:	d10d      	bne.n	8021784 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021768:	683b      	ldr	r3, [r7, #0]
 802176a:	3308      	adds	r3, #8
 802176c:	681b      	ldr	r3, [r3, #0]
 802176e:	43da      	mvns	r2, r3
 8021770:	687b      	ldr	r3, [r7, #4]
 8021772:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8021774:	683b      	ldr	r3, [r7, #0]
 8021776:	3308      	adds	r3, #8
 8021778:	681b      	ldr	r3, [r3, #0]
 802177a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802177c:	429a      	cmp	r2, r3
 802177e:	d101      	bne.n	8021784 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8021780:	2301      	movs	r3, #1
 8021782:	e000      	b.n	8021786 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8021784:	2300      	movs	r3, #0
  }
}
 8021786:	4618      	mov	r0, r3
 8021788:	3714      	adds	r7, #20
 802178a:	46bd      	mov	sp, r7
 802178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021790:	4770      	bx	lr
	...

08021794 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8021794:	b580      	push	{r7, lr}
 8021796:	b08a      	sub	sp, #40	; 0x28
 8021798:	af00      	add	r7, sp, #0
 802179a:	6078      	str	r0, [r7, #4]
 802179c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 802179e:	f107 030c 	add.w	r3, r7, #12
 80217a2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 80217a4:	687b      	ldr	r3, [r7, #4]
 80217a6:	781b      	ldrb	r3, [r3, #0]
 80217a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80217ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80217b0:	3301      	adds	r3, #1
 80217b2:	4a89      	ldr	r2, [pc, #548]	; (80219d8 <ip4addr_aton+0x244>)
 80217b4:	4413      	add	r3, r2
 80217b6:	781b      	ldrb	r3, [r3, #0]
 80217b8:	f003 0304 	and.w	r3, r3, #4
 80217bc:	2b00      	cmp	r3, #0
 80217be:	d101      	bne.n	80217c4 <ip4addr_aton+0x30>
      return 0;
 80217c0:	2300      	movs	r3, #0
 80217c2:	e105      	b.n	80219d0 <ip4addr_aton+0x23c>
    }
    val = 0;
 80217c4:	2300      	movs	r3, #0
 80217c6:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 80217c8:	230a      	movs	r3, #10
 80217ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 80217ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80217d2:	2b30      	cmp	r3, #48	; 0x30
 80217d4:	d11c      	bne.n	8021810 <ip4addr_aton+0x7c>
      c = *++cp;
 80217d6:	687b      	ldr	r3, [r7, #4]
 80217d8:	3301      	adds	r3, #1
 80217da:	607b      	str	r3, [r7, #4]
 80217dc:	687b      	ldr	r3, [r7, #4]
 80217de:	781b      	ldrb	r3, [r3, #0]
 80217e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 80217e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80217e8:	2b78      	cmp	r3, #120	; 0x78
 80217ea:	d003      	beq.n	80217f4 <ip4addr_aton+0x60>
 80217ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80217f0:	2b58      	cmp	r3, #88	; 0x58
 80217f2:	d10a      	bne.n	802180a <ip4addr_aton+0x76>
        base = 16;
 80217f4:	2310      	movs	r3, #16
 80217f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 80217fa:	687b      	ldr	r3, [r7, #4]
 80217fc:	3301      	adds	r3, #1
 80217fe:	607b      	str	r3, [r7, #4]
 8021800:	687b      	ldr	r3, [r7, #4]
 8021802:	781b      	ldrb	r3, [r3, #0]
 8021804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8021808:	e002      	b.n	8021810 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 802180a:	2308      	movs	r3, #8
 802180c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8021810:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8021814:	3301      	adds	r3, #1
 8021816:	4a70      	ldr	r2, [pc, #448]	; (80219d8 <ip4addr_aton+0x244>)
 8021818:	4413      	add	r3, r2
 802181a:	781b      	ldrb	r3, [r3, #0]
 802181c:	f003 0304 	and.w	r3, r3, #4
 8021820:	2b00      	cmp	r3, #0
 8021822:	d011      	beq.n	8021848 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8021824:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802182a:	fb03 f202 	mul.w	r2, r3, r2
 802182e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8021832:	4413      	add	r3, r2
 8021834:	3b30      	subs	r3, #48	; 0x30
 8021836:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8021838:	687b      	ldr	r3, [r7, #4]
 802183a:	3301      	adds	r3, #1
 802183c:	607b      	str	r3, [r7, #4]
 802183e:	687b      	ldr	r3, [r7, #4]
 8021840:	781b      	ldrb	r3, [r3, #0]
 8021842:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8021846:	e7e3      	b.n	8021810 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8021848:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802184c:	2b10      	cmp	r3, #16
 802184e:	d127      	bne.n	80218a0 <ip4addr_aton+0x10c>
 8021850:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8021854:	3301      	adds	r3, #1
 8021856:	4a60      	ldr	r2, [pc, #384]	; (80219d8 <ip4addr_aton+0x244>)
 8021858:	4413      	add	r3, r2
 802185a:	781b      	ldrb	r3, [r3, #0]
 802185c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8021860:	2b00      	cmp	r3, #0
 8021862:	d01d      	beq.n	80218a0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8021864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021866:	011b      	lsls	r3, r3, #4
 8021868:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 802186c:	f102 010a 	add.w	r1, r2, #10
 8021870:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8021874:	3201      	adds	r2, #1
 8021876:	4858      	ldr	r0, [pc, #352]	; (80219d8 <ip4addr_aton+0x244>)
 8021878:	4402      	add	r2, r0
 802187a:	7812      	ldrb	r2, [r2, #0]
 802187c:	f002 0203 	and.w	r2, r2, #3
 8021880:	2a02      	cmp	r2, #2
 8021882:	d101      	bne.n	8021888 <ip4addr_aton+0xf4>
 8021884:	2261      	movs	r2, #97	; 0x61
 8021886:	e000      	b.n	802188a <ip4addr_aton+0xf6>
 8021888:	2241      	movs	r2, #65	; 0x41
 802188a:	1a8a      	subs	r2, r1, r2
 802188c:	4313      	orrs	r3, r2
 802188e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8021890:	687b      	ldr	r3, [r7, #4]
 8021892:	3301      	adds	r3, #1
 8021894:	607b      	str	r3, [r7, #4]
 8021896:	687b      	ldr	r3, [r7, #4]
 8021898:	781b      	ldrb	r3, [r3, #0]
 802189a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 802189e:	e7b7      	b.n	8021810 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 80218a0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80218a4:	2b2e      	cmp	r3, #46	; 0x2e
 80218a6:	d114      	bne.n	80218d2 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80218a8:	f107 030c 	add.w	r3, r7, #12
 80218ac:	330c      	adds	r3, #12
 80218ae:	69fa      	ldr	r2, [r7, #28]
 80218b0:	429a      	cmp	r2, r3
 80218b2:	d301      	bcc.n	80218b8 <ip4addr_aton+0x124>
        return 0;
 80218b4:	2300      	movs	r3, #0
 80218b6:	e08b      	b.n	80219d0 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 80218b8:	69fb      	ldr	r3, [r7, #28]
 80218ba:	1d1a      	adds	r2, r3, #4
 80218bc:	61fa      	str	r2, [r7, #28]
 80218be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80218c0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 80218c2:	687b      	ldr	r3, [r7, #4]
 80218c4:	3301      	adds	r3, #1
 80218c6:	607b      	str	r3, [r7, #4]
 80218c8:	687b      	ldr	r3, [r7, #4]
 80218ca:	781b      	ldrb	r3, [r3, #0]
 80218cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 80218d0:	e76c      	b.n	80217ac <ip4addr_aton+0x18>
    } else {
      break;
 80218d2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 80218d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80218d8:	2b00      	cmp	r3, #0
 80218da:	d00b      	beq.n	80218f4 <ip4addr_aton+0x160>
 80218dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80218e0:	3301      	adds	r3, #1
 80218e2:	4a3d      	ldr	r2, [pc, #244]	; (80219d8 <ip4addr_aton+0x244>)
 80218e4:	4413      	add	r3, r2
 80218e6:	781b      	ldrb	r3, [r3, #0]
 80218e8:	f003 0308 	and.w	r3, r3, #8
 80218ec:	2b00      	cmp	r3, #0
 80218ee:	d101      	bne.n	80218f4 <ip4addr_aton+0x160>
    return 0;
 80218f0:	2300      	movs	r3, #0
 80218f2:	e06d      	b.n	80219d0 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 80218f4:	f107 030c 	add.w	r3, r7, #12
 80218f8:	69fa      	ldr	r2, [r7, #28]
 80218fa:	1ad3      	subs	r3, r2, r3
 80218fc:	109b      	asrs	r3, r3, #2
 80218fe:	3301      	adds	r3, #1
 8021900:	2b04      	cmp	r3, #4
 8021902:	d853      	bhi.n	80219ac <ip4addr_aton+0x218>
 8021904:	a201      	add	r2, pc, #4	; (adr r2, 802190c <ip4addr_aton+0x178>)
 8021906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802190a:	bf00      	nop
 802190c:	08021921 	.word	0x08021921
 8021910:	080219bb 	.word	0x080219bb
 8021914:	08021925 	.word	0x08021925
 8021918:	08021947 	.word	0x08021947
 802191c:	08021975 	.word	0x08021975

    case 0:
      return 0;       /* initial nondigit */
 8021920:	2300      	movs	r3, #0
 8021922:	e055      	b.n	80219d0 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8021924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021926:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 802192a:	d301      	bcc.n	8021930 <ip4addr_aton+0x19c>
        return 0;
 802192c:	2300      	movs	r3, #0
 802192e:	e04f      	b.n	80219d0 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8021930:	68fb      	ldr	r3, [r7, #12]
 8021932:	2bff      	cmp	r3, #255	; 0xff
 8021934:	d901      	bls.n	802193a <ip4addr_aton+0x1a6>
        return 0;
 8021936:	2300      	movs	r3, #0
 8021938:	e04a      	b.n	80219d0 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 802193a:	68fb      	ldr	r3, [r7, #12]
 802193c:	061b      	lsls	r3, r3, #24
 802193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021940:	4313      	orrs	r3, r2
 8021942:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8021944:	e03a      	b.n	80219bc <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 8021946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021948:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802194c:	d301      	bcc.n	8021952 <ip4addr_aton+0x1be>
        return 0;
 802194e:	2300      	movs	r3, #0
 8021950:	e03e      	b.n	80219d0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8021952:	68fb      	ldr	r3, [r7, #12]
 8021954:	2bff      	cmp	r3, #255	; 0xff
 8021956:	d802      	bhi.n	802195e <ip4addr_aton+0x1ca>
 8021958:	693b      	ldr	r3, [r7, #16]
 802195a:	2bff      	cmp	r3, #255	; 0xff
 802195c:	d901      	bls.n	8021962 <ip4addr_aton+0x1ce>
        return 0;
 802195e:	2300      	movs	r3, #0
 8021960:	e036      	b.n	80219d0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 8021962:	68fb      	ldr	r3, [r7, #12]
 8021964:	061a      	lsls	r2, r3, #24
 8021966:	693b      	ldr	r3, [r7, #16]
 8021968:	041b      	lsls	r3, r3, #16
 802196a:	4313      	orrs	r3, r2
 802196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802196e:	4313      	orrs	r3, r2
 8021970:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8021972:	e023      	b.n	80219bc <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8021974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021976:	2bff      	cmp	r3, #255	; 0xff
 8021978:	d901      	bls.n	802197e <ip4addr_aton+0x1ea>
        return 0;
 802197a:	2300      	movs	r3, #0
 802197c:	e028      	b.n	80219d0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 802197e:	68fb      	ldr	r3, [r7, #12]
 8021980:	2bff      	cmp	r3, #255	; 0xff
 8021982:	d805      	bhi.n	8021990 <ip4addr_aton+0x1fc>
 8021984:	693b      	ldr	r3, [r7, #16]
 8021986:	2bff      	cmp	r3, #255	; 0xff
 8021988:	d802      	bhi.n	8021990 <ip4addr_aton+0x1fc>
 802198a:	697b      	ldr	r3, [r7, #20]
 802198c:	2bff      	cmp	r3, #255	; 0xff
 802198e:	d901      	bls.n	8021994 <ip4addr_aton+0x200>
        return 0;
 8021990:	2300      	movs	r3, #0
 8021992:	e01d      	b.n	80219d0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8021994:	68fb      	ldr	r3, [r7, #12]
 8021996:	061a      	lsls	r2, r3, #24
 8021998:	693b      	ldr	r3, [r7, #16]
 802199a:	041b      	lsls	r3, r3, #16
 802199c:	431a      	orrs	r2, r3
 802199e:	697b      	ldr	r3, [r7, #20]
 80219a0:	021b      	lsls	r3, r3, #8
 80219a2:	4313      	orrs	r3, r2
 80219a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80219a6:	4313      	orrs	r3, r2
 80219a8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80219aa:	e007      	b.n	80219bc <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 80219ac:	4b0b      	ldr	r3, [pc, #44]	; (80219dc <ip4addr_aton+0x248>)
 80219ae:	22f9      	movs	r2, #249	; 0xf9
 80219b0:	490b      	ldr	r1, [pc, #44]	; (80219e0 <ip4addr_aton+0x24c>)
 80219b2:	480c      	ldr	r0, [pc, #48]	; (80219e4 <ip4addr_aton+0x250>)
 80219b4:	f003 fa04 	bl	8024dc0 <iprintf>
      break;
 80219b8:	e000      	b.n	80219bc <ip4addr_aton+0x228>
      break;
 80219ba:	bf00      	nop
  }
  if (addr) {
 80219bc:	683b      	ldr	r3, [r7, #0]
 80219be:	2b00      	cmp	r3, #0
 80219c0:	d005      	beq.n	80219ce <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80219c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80219c4:	f7f4 ff53 	bl	801686e <lwip_htonl>
 80219c8:	4602      	mov	r2, r0
 80219ca:	683b      	ldr	r3, [r7, #0]
 80219cc:	601a      	str	r2, [r3, #0]
  }
  return 1;
 80219ce:	2301      	movs	r3, #1
}
 80219d0:	4618      	mov	r0, r3
 80219d2:	3728      	adds	r7, #40	; 0x28
 80219d4:	46bd      	mov	sp, r7
 80219d6:	bd80      	pop	{r7, pc}
 80219d8:	0802e5eb 	.word	0x0802e5eb
 80219dc:	0802d8e4 	.word	0x0802d8e4
 80219e0:	0802d920 	.word	0x0802d920
 80219e4:	0802d92c 	.word	0x0802d92c

080219e8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80219e8:	b580      	push	{r7, lr}
 80219ea:	b082      	sub	sp, #8
 80219ec:	af00      	add	r7, sp, #0
 80219ee:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80219f0:	2210      	movs	r2, #16
 80219f2:	4904      	ldr	r1, [pc, #16]	; (8021a04 <ip4addr_ntoa+0x1c>)
 80219f4:	6878      	ldr	r0, [r7, #4]
 80219f6:	f000 f807 	bl	8021a08 <ip4addr_ntoa_r>
 80219fa:	4603      	mov	r3, r0
}
 80219fc:	4618      	mov	r0, r3
 80219fe:	3708      	adds	r7, #8
 8021a00:	46bd      	mov	sp, r7
 8021a02:	bd80      	pop	{r7, pc}
 8021a04:	20016128 	.word	0x20016128

08021a08 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8021a08:	b480      	push	{r7}
 8021a0a:	b08d      	sub	sp, #52	; 0x34
 8021a0c:	af00      	add	r7, sp, #0
 8021a0e:	60f8      	str	r0, [r7, #12]
 8021a10:	60b9      	str	r1, [r7, #8]
 8021a12:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8021a14:	2300      	movs	r3, #0
 8021a16:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8021a18:	68fb      	ldr	r3, [r7, #12]
 8021a1a:	681b      	ldr	r3, [r3, #0]
 8021a1c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8021a1e:	68bb      	ldr	r3, [r7, #8]
 8021a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8021a22:	f107 0318 	add.w	r3, r7, #24
 8021a26:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8021a28:	2300      	movs	r3, #0
 8021a2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021a2e:	e058      	b.n	8021ae2 <ip4addr_ntoa_r+0xda>
    i = 0;
 8021a30:	2300      	movs	r3, #0
 8021a32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8021a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a38:	781a      	ldrb	r2, [r3, #0]
 8021a3a:	4b32      	ldr	r3, [pc, #200]	; (8021b04 <ip4addr_ntoa_r+0xfc>)
 8021a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8021a40:	08d9      	lsrs	r1, r3, #3
 8021a42:	460b      	mov	r3, r1
 8021a44:	009b      	lsls	r3, r3, #2
 8021a46:	440b      	add	r3, r1
 8021a48:	005b      	lsls	r3, r3, #1
 8021a4a:	1ad3      	subs	r3, r2, r3
 8021a4c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8021a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a50:	781b      	ldrb	r3, [r3, #0]
 8021a52:	4a2c      	ldr	r2, [pc, #176]	; (8021b04 <ip4addr_ntoa_r+0xfc>)
 8021a54:	fba2 2303 	umull	r2, r3, r2, r3
 8021a58:	08db      	lsrs	r3, r3, #3
 8021a5a:	b2da      	uxtb	r2, r3
 8021a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a5e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8021a60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021a64:	1c5a      	adds	r2, r3, #1
 8021a66:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8021a6a:	4619      	mov	r1, r3
 8021a6c:	7ffb      	ldrb	r3, [r7, #31]
 8021a6e:	3330      	adds	r3, #48	; 0x30
 8021a70:	b2da      	uxtb	r2, r3
 8021a72:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8021a76:	443b      	add	r3, r7
 8021a78:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8021a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021a7e:	781b      	ldrb	r3, [r3, #0]
 8021a80:	2b00      	cmp	r3, #0
 8021a82:	d1d8      	bne.n	8021a36 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8021a84:	e011      	b.n	8021aaa <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8021a86:	6a3b      	ldr	r3, [r7, #32]
 8021a88:	1c5a      	adds	r2, r3, #1
 8021a8a:	623a      	str	r2, [r7, #32]
 8021a8c:	687a      	ldr	r2, [r7, #4]
 8021a8e:	429a      	cmp	r2, r3
 8021a90:	dc01      	bgt.n	8021a96 <ip4addr_ntoa_r+0x8e>
        return NULL;
 8021a92:	2300      	movs	r3, #0
 8021a94:	e030      	b.n	8021af8 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8021a96:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8021a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a9c:	1c59      	adds	r1, r3, #1
 8021a9e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8021aa0:	3230      	adds	r2, #48	; 0x30
 8021aa2:	443a      	add	r2, r7
 8021aa4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8021aa8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8021aaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021aae:	1e5a      	subs	r2, r3, #1
 8021ab0:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8021ab4:	2b00      	cmp	r3, #0
 8021ab6:	d1e6      	bne.n	8021a86 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8021ab8:	6a3b      	ldr	r3, [r7, #32]
 8021aba:	1c5a      	adds	r2, r3, #1
 8021abc:	623a      	str	r2, [r7, #32]
 8021abe:	687a      	ldr	r2, [r7, #4]
 8021ac0:	429a      	cmp	r2, r3
 8021ac2:	dc01      	bgt.n	8021ac8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8021ac4:	2300      	movs	r3, #0
 8021ac6:	e017      	b.n	8021af8 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8021ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021aca:	1c5a      	adds	r2, r3, #1
 8021acc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8021ace:	222e      	movs	r2, #46	; 0x2e
 8021ad0:	701a      	strb	r2, [r3, #0]
    ap++;
 8021ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ad4:	3301      	adds	r3, #1
 8021ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8021ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021adc:	3301      	adds	r3, #1
 8021ade:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021ae2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021ae6:	2b03      	cmp	r3, #3
 8021ae8:	d9a2      	bls.n	8021a30 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8021aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021aec:	3b01      	subs	r3, #1
 8021aee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021af2:	2200      	movs	r2, #0
 8021af4:	701a      	strb	r2, [r3, #0]
  return buf;
 8021af6:	68bb      	ldr	r3, [r7, #8]
}
 8021af8:	4618      	mov	r0, r3
 8021afa:	3734      	adds	r7, #52	; 0x34
 8021afc:	46bd      	mov	sp, r7
 8021afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021b02:	4770      	bx	lr
 8021b04:	cccccccd 	.word	0xcccccccd

08021b08 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8021b08:	b580      	push	{r7, lr}
 8021b0a:	b084      	sub	sp, #16
 8021b0c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8021b0e:	2300      	movs	r3, #0
 8021b10:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8021b12:	4b12      	ldr	r3, [pc, #72]	; (8021b5c <ip_reass_tmr+0x54>)
 8021b14:	681b      	ldr	r3, [r3, #0]
 8021b16:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8021b18:	e018      	b.n	8021b4c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8021b1a:	68fb      	ldr	r3, [r7, #12]
 8021b1c:	7fdb      	ldrb	r3, [r3, #31]
 8021b1e:	2b00      	cmp	r3, #0
 8021b20:	d00b      	beq.n	8021b3a <ip_reass_tmr+0x32>
      r->timer--;
 8021b22:	68fb      	ldr	r3, [r7, #12]
 8021b24:	7fdb      	ldrb	r3, [r3, #31]
 8021b26:	3b01      	subs	r3, #1
 8021b28:	b2da      	uxtb	r2, r3
 8021b2a:	68fb      	ldr	r3, [r7, #12]
 8021b2c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8021b2e:	68fb      	ldr	r3, [r7, #12]
 8021b30:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8021b32:	68fb      	ldr	r3, [r7, #12]
 8021b34:	681b      	ldr	r3, [r3, #0]
 8021b36:	60fb      	str	r3, [r7, #12]
 8021b38:	e008      	b.n	8021b4c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8021b3a:	68fb      	ldr	r3, [r7, #12]
 8021b3c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8021b3e:	68fb      	ldr	r3, [r7, #12]
 8021b40:	681b      	ldr	r3, [r3, #0]
 8021b42:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8021b44:	68b9      	ldr	r1, [r7, #8]
 8021b46:	6878      	ldr	r0, [r7, #4]
 8021b48:	f000 f80a 	bl	8021b60 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8021b4c:	68fb      	ldr	r3, [r7, #12]
 8021b4e:	2b00      	cmp	r3, #0
 8021b50:	d1e3      	bne.n	8021b1a <ip_reass_tmr+0x12>
    }
  }
}
 8021b52:	bf00      	nop
 8021b54:	bf00      	nop
 8021b56:	3710      	adds	r7, #16
 8021b58:	46bd      	mov	sp, r7
 8021b5a:	bd80      	pop	{r7, pc}
 8021b5c:	20016138 	.word	0x20016138

08021b60 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021b60:	b580      	push	{r7, lr}
 8021b62:	b088      	sub	sp, #32
 8021b64:	af00      	add	r7, sp, #0
 8021b66:	6078      	str	r0, [r7, #4]
 8021b68:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8021b6a:	2300      	movs	r3, #0
 8021b6c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8021b6e:	683a      	ldr	r2, [r7, #0]
 8021b70:	687b      	ldr	r3, [r7, #4]
 8021b72:	429a      	cmp	r2, r3
 8021b74:	d105      	bne.n	8021b82 <ip_reass_free_complete_datagram+0x22>
 8021b76:	4b45      	ldr	r3, [pc, #276]	; (8021c8c <ip_reass_free_complete_datagram+0x12c>)
 8021b78:	22ab      	movs	r2, #171	; 0xab
 8021b7a:	4945      	ldr	r1, [pc, #276]	; (8021c90 <ip_reass_free_complete_datagram+0x130>)
 8021b7c:	4845      	ldr	r0, [pc, #276]	; (8021c94 <ip_reass_free_complete_datagram+0x134>)
 8021b7e:	f003 f91f 	bl	8024dc0 <iprintf>
  if (prev != NULL) {
 8021b82:	683b      	ldr	r3, [r7, #0]
 8021b84:	2b00      	cmp	r3, #0
 8021b86:	d00a      	beq.n	8021b9e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8021b88:	683b      	ldr	r3, [r7, #0]
 8021b8a:	681b      	ldr	r3, [r3, #0]
 8021b8c:	687a      	ldr	r2, [r7, #4]
 8021b8e:	429a      	cmp	r2, r3
 8021b90:	d005      	beq.n	8021b9e <ip_reass_free_complete_datagram+0x3e>
 8021b92:	4b3e      	ldr	r3, [pc, #248]	; (8021c8c <ip_reass_free_complete_datagram+0x12c>)
 8021b94:	22ad      	movs	r2, #173	; 0xad
 8021b96:	4940      	ldr	r1, [pc, #256]	; (8021c98 <ip_reass_free_complete_datagram+0x138>)
 8021b98:	483e      	ldr	r0, [pc, #248]	; (8021c94 <ip_reass_free_complete_datagram+0x134>)
 8021b9a:	f003 f911 	bl	8024dc0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8021b9e:	687b      	ldr	r3, [r7, #4]
 8021ba0:	685b      	ldr	r3, [r3, #4]
 8021ba2:	685b      	ldr	r3, [r3, #4]
 8021ba4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8021ba6:	697b      	ldr	r3, [r7, #20]
 8021ba8:	889b      	ldrh	r3, [r3, #4]
 8021baa:	b29b      	uxth	r3, r3
 8021bac:	2b00      	cmp	r3, #0
 8021bae:	d12a      	bne.n	8021c06 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8021bb0:	687b      	ldr	r3, [r7, #4]
 8021bb2:	685b      	ldr	r3, [r3, #4]
 8021bb4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8021bb6:	697b      	ldr	r3, [r7, #20]
 8021bb8:	681a      	ldr	r2, [r3, #0]
 8021bba:	687b      	ldr	r3, [r7, #4]
 8021bbc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021bbe:	69bb      	ldr	r3, [r7, #24]
 8021bc0:	6858      	ldr	r0, [r3, #4]
 8021bc2:	687b      	ldr	r3, [r7, #4]
 8021bc4:	3308      	adds	r3, #8
 8021bc6:	2214      	movs	r2, #20
 8021bc8:	4619      	mov	r1, r3
 8021bca:	f004 fdb8 	bl	802673e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8021bce:	2101      	movs	r1, #1
 8021bd0:	69b8      	ldr	r0, [r7, #24]
 8021bd2:	f7ff fa8d 	bl	80210f0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8021bd6:	69b8      	ldr	r0, [r7, #24]
 8021bd8:	f7f6 fd7e 	bl	80186d8 <pbuf_clen>
 8021bdc:	4603      	mov	r3, r0
 8021bde:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021be0:	8bfa      	ldrh	r2, [r7, #30]
 8021be2:	8a7b      	ldrh	r3, [r7, #18]
 8021be4:	4413      	add	r3, r2
 8021be6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021bea:	db05      	blt.n	8021bf8 <ip_reass_free_complete_datagram+0x98>
 8021bec:	4b27      	ldr	r3, [pc, #156]	; (8021c8c <ip_reass_free_complete_datagram+0x12c>)
 8021bee:	22bc      	movs	r2, #188	; 0xbc
 8021bf0:	492a      	ldr	r1, [pc, #168]	; (8021c9c <ip_reass_free_complete_datagram+0x13c>)
 8021bf2:	4828      	ldr	r0, [pc, #160]	; (8021c94 <ip_reass_free_complete_datagram+0x134>)
 8021bf4:	f003 f8e4 	bl	8024dc0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021bf8:	8bfa      	ldrh	r2, [r7, #30]
 8021bfa:	8a7b      	ldrh	r3, [r7, #18]
 8021bfc:	4413      	add	r3, r2
 8021bfe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8021c00:	69b8      	ldr	r0, [r7, #24]
 8021c02:	f7f6 fcdb 	bl	80185bc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8021c06:	687b      	ldr	r3, [r7, #4]
 8021c08:	685b      	ldr	r3, [r3, #4]
 8021c0a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8021c0c:	e01f      	b.n	8021c4e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8021c0e:	69bb      	ldr	r3, [r7, #24]
 8021c10:	685b      	ldr	r3, [r3, #4]
 8021c12:	617b      	str	r3, [r7, #20]
    pcur = p;
 8021c14:	69bb      	ldr	r3, [r7, #24]
 8021c16:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8021c18:	697b      	ldr	r3, [r7, #20]
 8021c1a:	681b      	ldr	r3, [r3, #0]
 8021c1c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8021c1e:	68f8      	ldr	r0, [r7, #12]
 8021c20:	f7f6 fd5a 	bl	80186d8 <pbuf_clen>
 8021c24:	4603      	mov	r3, r0
 8021c26:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021c28:	8bfa      	ldrh	r2, [r7, #30]
 8021c2a:	8a7b      	ldrh	r3, [r7, #18]
 8021c2c:	4413      	add	r3, r2
 8021c2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021c32:	db05      	blt.n	8021c40 <ip_reass_free_complete_datagram+0xe0>
 8021c34:	4b15      	ldr	r3, [pc, #84]	; (8021c8c <ip_reass_free_complete_datagram+0x12c>)
 8021c36:	22cc      	movs	r2, #204	; 0xcc
 8021c38:	4918      	ldr	r1, [pc, #96]	; (8021c9c <ip_reass_free_complete_datagram+0x13c>)
 8021c3a:	4816      	ldr	r0, [pc, #88]	; (8021c94 <ip_reass_free_complete_datagram+0x134>)
 8021c3c:	f003 f8c0 	bl	8024dc0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021c40:	8bfa      	ldrh	r2, [r7, #30]
 8021c42:	8a7b      	ldrh	r3, [r7, #18]
 8021c44:	4413      	add	r3, r2
 8021c46:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8021c48:	68f8      	ldr	r0, [r7, #12]
 8021c4a:	f7f6 fcb7 	bl	80185bc <pbuf_free>
  while (p != NULL) {
 8021c4e:	69bb      	ldr	r3, [r7, #24]
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	d1dc      	bne.n	8021c0e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8021c54:	6839      	ldr	r1, [r7, #0]
 8021c56:	6878      	ldr	r0, [r7, #4]
 8021c58:	f000 f8c2 	bl	8021de0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8021c5c:	4b10      	ldr	r3, [pc, #64]	; (8021ca0 <ip_reass_free_complete_datagram+0x140>)
 8021c5e:	881b      	ldrh	r3, [r3, #0]
 8021c60:	8bfa      	ldrh	r2, [r7, #30]
 8021c62:	429a      	cmp	r2, r3
 8021c64:	d905      	bls.n	8021c72 <ip_reass_free_complete_datagram+0x112>
 8021c66:	4b09      	ldr	r3, [pc, #36]	; (8021c8c <ip_reass_free_complete_datagram+0x12c>)
 8021c68:	22d2      	movs	r2, #210	; 0xd2
 8021c6a:	490e      	ldr	r1, [pc, #56]	; (8021ca4 <ip_reass_free_complete_datagram+0x144>)
 8021c6c:	4809      	ldr	r0, [pc, #36]	; (8021c94 <ip_reass_free_complete_datagram+0x134>)
 8021c6e:	f003 f8a7 	bl	8024dc0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021c72:	4b0b      	ldr	r3, [pc, #44]	; (8021ca0 <ip_reass_free_complete_datagram+0x140>)
 8021c74:	881a      	ldrh	r2, [r3, #0]
 8021c76:	8bfb      	ldrh	r3, [r7, #30]
 8021c78:	1ad3      	subs	r3, r2, r3
 8021c7a:	b29a      	uxth	r2, r3
 8021c7c:	4b08      	ldr	r3, [pc, #32]	; (8021ca0 <ip_reass_free_complete_datagram+0x140>)
 8021c7e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8021c80:	8bfb      	ldrh	r3, [r7, #30]
}
 8021c82:	4618      	mov	r0, r3
 8021c84:	3720      	adds	r7, #32
 8021c86:	46bd      	mov	sp, r7
 8021c88:	bd80      	pop	{r7, pc}
 8021c8a:	bf00      	nop
 8021c8c:	0802d954 	.word	0x0802d954
 8021c90:	0802d990 	.word	0x0802d990
 8021c94:	0802d99c 	.word	0x0802d99c
 8021c98:	0802d9c4 	.word	0x0802d9c4
 8021c9c:	0802d9d8 	.word	0x0802d9d8
 8021ca0:	2001613c 	.word	0x2001613c
 8021ca4:	0802d9f8 	.word	0x0802d9f8

08021ca8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021ca8:	b580      	push	{r7, lr}
 8021caa:	b08a      	sub	sp, #40	; 0x28
 8021cac:	af00      	add	r7, sp, #0
 8021cae:	6078      	str	r0, [r7, #4]
 8021cb0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8021cb2:	2300      	movs	r3, #0
 8021cb4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8021cb6:	2300      	movs	r3, #0
 8021cb8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8021cba:	2300      	movs	r3, #0
 8021cbc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8021cbe:	2300      	movs	r3, #0
 8021cc0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8021cc2:	2300      	movs	r3, #0
 8021cc4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8021cc6:	4b28      	ldr	r3, [pc, #160]	; (8021d68 <ip_reass_remove_oldest_datagram+0xc0>)
 8021cc8:	681b      	ldr	r3, [r3, #0]
 8021cca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021ccc:	e030      	b.n	8021d30 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8021cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cd0:	695a      	ldr	r2, [r3, #20]
 8021cd2:	687b      	ldr	r3, [r7, #4]
 8021cd4:	68db      	ldr	r3, [r3, #12]
 8021cd6:	429a      	cmp	r2, r3
 8021cd8:	d10c      	bne.n	8021cf4 <ip_reass_remove_oldest_datagram+0x4c>
 8021cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cdc:	699a      	ldr	r2, [r3, #24]
 8021cde:	687b      	ldr	r3, [r7, #4]
 8021ce0:	691b      	ldr	r3, [r3, #16]
 8021ce2:	429a      	cmp	r2, r3
 8021ce4:	d106      	bne.n	8021cf4 <ip_reass_remove_oldest_datagram+0x4c>
 8021ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ce8:	899a      	ldrh	r2, [r3, #12]
 8021cea:	687b      	ldr	r3, [r7, #4]
 8021cec:	889b      	ldrh	r3, [r3, #4]
 8021cee:	b29b      	uxth	r3, r3
 8021cf0:	429a      	cmp	r2, r3
 8021cf2:	d014      	beq.n	8021d1e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021cf4:	693b      	ldr	r3, [r7, #16]
 8021cf6:	3301      	adds	r3, #1
 8021cf8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8021cfa:	6a3b      	ldr	r3, [r7, #32]
 8021cfc:	2b00      	cmp	r3, #0
 8021cfe:	d104      	bne.n	8021d0a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8021d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d02:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021d04:	69fb      	ldr	r3, [r7, #28]
 8021d06:	61bb      	str	r3, [r7, #24]
 8021d08:	e009      	b.n	8021d1e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8021d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d0c:	7fda      	ldrb	r2, [r3, #31]
 8021d0e:	6a3b      	ldr	r3, [r7, #32]
 8021d10:	7fdb      	ldrb	r3, [r3, #31]
 8021d12:	429a      	cmp	r2, r3
 8021d14:	d803      	bhi.n	8021d1e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8021d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d18:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021d1a:	69fb      	ldr	r3, [r7, #28]
 8021d1c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8021d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d20:	681b      	ldr	r3, [r3, #0]
 8021d22:	2b00      	cmp	r3, #0
 8021d24:	d001      	beq.n	8021d2a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8021d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d28:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8021d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d2c:	681b      	ldr	r3, [r3, #0]
 8021d2e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d1cb      	bne.n	8021cce <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8021d36:	6a3b      	ldr	r3, [r7, #32]
 8021d38:	2b00      	cmp	r3, #0
 8021d3a:	d008      	beq.n	8021d4e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8021d3c:	69b9      	ldr	r1, [r7, #24]
 8021d3e:	6a38      	ldr	r0, [r7, #32]
 8021d40:	f7ff ff0e 	bl	8021b60 <ip_reass_free_complete_datagram>
 8021d44:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8021d46:	697a      	ldr	r2, [r7, #20]
 8021d48:	68fb      	ldr	r3, [r7, #12]
 8021d4a:	4413      	add	r3, r2
 8021d4c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8021d4e:	697a      	ldr	r2, [r7, #20]
 8021d50:	683b      	ldr	r3, [r7, #0]
 8021d52:	429a      	cmp	r2, r3
 8021d54:	da02      	bge.n	8021d5c <ip_reass_remove_oldest_datagram+0xb4>
 8021d56:	693b      	ldr	r3, [r7, #16]
 8021d58:	2b01      	cmp	r3, #1
 8021d5a:	dcac      	bgt.n	8021cb6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8021d5c:	697b      	ldr	r3, [r7, #20]
}
 8021d5e:	4618      	mov	r0, r3
 8021d60:	3728      	adds	r7, #40	; 0x28
 8021d62:	46bd      	mov	sp, r7
 8021d64:	bd80      	pop	{r7, pc}
 8021d66:	bf00      	nop
 8021d68:	20016138 	.word	0x20016138

08021d6c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8021d6c:	b580      	push	{r7, lr}
 8021d6e:	b084      	sub	sp, #16
 8021d70:	af00      	add	r7, sp, #0
 8021d72:	6078      	str	r0, [r7, #4]
 8021d74:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021d76:	2004      	movs	r0, #4
 8021d78:	f7f5 fd06 	bl	8017788 <memp_malloc>
 8021d7c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8021d7e:	68fb      	ldr	r3, [r7, #12]
 8021d80:	2b00      	cmp	r3, #0
 8021d82:	d110      	bne.n	8021da6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8021d84:	6839      	ldr	r1, [r7, #0]
 8021d86:	6878      	ldr	r0, [r7, #4]
 8021d88:	f7ff ff8e 	bl	8021ca8 <ip_reass_remove_oldest_datagram>
 8021d8c:	4602      	mov	r2, r0
 8021d8e:	683b      	ldr	r3, [r7, #0]
 8021d90:	4293      	cmp	r3, r2
 8021d92:	dc03      	bgt.n	8021d9c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021d94:	2004      	movs	r0, #4
 8021d96:	f7f5 fcf7 	bl	8017788 <memp_malloc>
 8021d9a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8021d9c:	68fb      	ldr	r3, [r7, #12]
 8021d9e:	2b00      	cmp	r3, #0
 8021da0:	d101      	bne.n	8021da6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8021da2:	2300      	movs	r3, #0
 8021da4:	e016      	b.n	8021dd4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021da6:	2220      	movs	r2, #32
 8021da8:	2100      	movs	r1, #0
 8021daa:	68f8      	ldr	r0, [r7, #12]
 8021dac:	f003 f9ce 	bl	802514c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8021db0:	68fb      	ldr	r3, [r7, #12]
 8021db2:	220f      	movs	r2, #15
 8021db4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021db6:	4b09      	ldr	r3, [pc, #36]	; (8021ddc <ip_reass_enqueue_new_datagram+0x70>)
 8021db8:	681a      	ldr	r2, [r3, #0]
 8021dba:	68fb      	ldr	r3, [r7, #12]
 8021dbc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8021dbe:	4a07      	ldr	r2, [pc, #28]	; (8021ddc <ip_reass_enqueue_new_datagram+0x70>)
 8021dc0:	68fb      	ldr	r3, [r7, #12]
 8021dc2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021dc4:	68fb      	ldr	r3, [r7, #12]
 8021dc6:	3308      	adds	r3, #8
 8021dc8:	2214      	movs	r2, #20
 8021dca:	6879      	ldr	r1, [r7, #4]
 8021dcc:	4618      	mov	r0, r3
 8021dce:	f004 fcb6 	bl	802673e <memcpy>
  return ipr;
 8021dd2:	68fb      	ldr	r3, [r7, #12]
}
 8021dd4:	4618      	mov	r0, r3
 8021dd6:	3710      	adds	r7, #16
 8021dd8:	46bd      	mov	sp, r7
 8021dda:	bd80      	pop	{r7, pc}
 8021ddc:	20016138 	.word	0x20016138

08021de0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021de0:	b580      	push	{r7, lr}
 8021de2:	b082      	sub	sp, #8
 8021de4:	af00      	add	r7, sp, #0
 8021de6:	6078      	str	r0, [r7, #4]
 8021de8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8021dea:	4b10      	ldr	r3, [pc, #64]	; (8021e2c <ip_reass_dequeue_datagram+0x4c>)
 8021dec:	681b      	ldr	r3, [r3, #0]
 8021dee:	687a      	ldr	r2, [r7, #4]
 8021df0:	429a      	cmp	r2, r3
 8021df2:	d104      	bne.n	8021dfe <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021df4:	687b      	ldr	r3, [r7, #4]
 8021df6:	681b      	ldr	r3, [r3, #0]
 8021df8:	4a0c      	ldr	r2, [pc, #48]	; (8021e2c <ip_reass_dequeue_datagram+0x4c>)
 8021dfa:	6013      	str	r3, [r2, #0]
 8021dfc:	e00d      	b.n	8021e1a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8021dfe:	683b      	ldr	r3, [r7, #0]
 8021e00:	2b00      	cmp	r3, #0
 8021e02:	d106      	bne.n	8021e12 <ip_reass_dequeue_datagram+0x32>
 8021e04:	4b0a      	ldr	r3, [pc, #40]	; (8021e30 <ip_reass_dequeue_datagram+0x50>)
 8021e06:	f240 1245 	movw	r2, #325	; 0x145
 8021e0a:	490a      	ldr	r1, [pc, #40]	; (8021e34 <ip_reass_dequeue_datagram+0x54>)
 8021e0c:	480a      	ldr	r0, [pc, #40]	; (8021e38 <ip_reass_dequeue_datagram+0x58>)
 8021e0e:	f002 ffd7 	bl	8024dc0 <iprintf>
    prev->next = ipr->next;
 8021e12:	687b      	ldr	r3, [r7, #4]
 8021e14:	681a      	ldr	r2, [r3, #0]
 8021e16:	683b      	ldr	r3, [r7, #0]
 8021e18:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8021e1a:	6879      	ldr	r1, [r7, #4]
 8021e1c:	2004      	movs	r0, #4
 8021e1e:	f7f5 fd29 	bl	8017874 <memp_free>
}
 8021e22:	bf00      	nop
 8021e24:	3708      	adds	r7, #8
 8021e26:	46bd      	mov	sp, r7
 8021e28:	bd80      	pop	{r7, pc}
 8021e2a:	bf00      	nop
 8021e2c:	20016138 	.word	0x20016138
 8021e30:	0802d954 	.word	0x0802d954
 8021e34:	0802da1c 	.word	0x0802da1c
 8021e38:	0802d99c 	.word	0x0802d99c

08021e3c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8021e3c:	b580      	push	{r7, lr}
 8021e3e:	b08c      	sub	sp, #48	; 0x30
 8021e40:	af00      	add	r7, sp, #0
 8021e42:	60f8      	str	r0, [r7, #12]
 8021e44:	60b9      	str	r1, [r7, #8]
 8021e46:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8021e48:	2300      	movs	r3, #0
 8021e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8021e4c:	2301      	movs	r3, #1
 8021e4e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8021e50:	68bb      	ldr	r3, [r7, #8]
 8021e52:	685b      	ldr	r3, [r3, #4]
 8021e54:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021e56:	69fb      	ldr	r3, [r7, #28]
 8021e58:	885b      	ldrh	r3, [r3, #2]
 8021e5a:	b29b      	uxth	r3, r3
 8021e5c:	4618      	mov	r0, r3
 8021e5e:	f7f4 fcf1 	bl	8016844 <lwip_htons>
 8021e62:	4603      	mov	r3, r0
 8021e64:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8021e66:	69fb      	ldr	r3, [r7, #28]
 8021e68:	781b      	ldrb	r3, [r3, #0]
 8021e6a:	f003 030f 	and.w	r3, r3, #15
 8021e6e:	b2db      	uxtb	r3, r3
 8021e70:	009b      	lsls	r3, r3, #2
 8021e72:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021e74:	7e7b      	ldrb	r3, [r7, #25]
 8021e76:	b29b      	uxth	r3, r3
 8021e78:	8b7a      	ldrh	r2, [r7, #26]
 8021e7a:	429a      	cmp	r2, r3
 8021e7c:	d202      	bcs.n	8021e84 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021e82:	e135      	b.n	80220f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021e84:	7e7b      	ldrb	r3, [r7, #25]
 8021e86:	b29b      	uxth	r3, r3
 8021e88:	8b7a      	ldrh	r2, [r7, #26]
 8021e8a:	1ad3      	subs	r3, r2, r3
 8021e8c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021e8e:	69fb      	ldr	r3, [r7, #28]
 8021e90:	88db      	ldrh	r3, [r3, #6]
 8021e92:	b29b      	uxth	r3, r3
 8021e94:	4618      	mov	r0, r3
 8021e96:	f7f4 fcd5 	bl	8016844 <lwip_htons>
 8021e9a:	4603      	mov	r3, r0
 8021e9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021ea0:	b29b      	uxth	r3, r3
 8021ea2:	00db      	lsls	r3, r3, #3
 8021ea4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021ea6:	68bb      	ldr	r3, [r7, #8]
 8021ea8:	685b      	ldr	r3, [r3, #4]
 8021eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021eae:	2200      	movs	r2, #0
 8021eb0:	701a      	strb	r2, [r3, #0]
 8021eb2:	2200      	movs	r2, #0
 8021eb4:	705a      	strb	r2, [r3, #1]
 8021eb6:	2200      	movs	r2, #0
 8021eb8:	709a      	strb	r2, [r3, #2]
 8021eba:	2200      	movs	r2, #0
 8021ebc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8021ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ec0:	8afa      	ldrh	r2, [r7, #22]
 8021ec2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021ec4:	8afa      	ldrh	r2, [r7, #22]
 8021ec6:	8b7b      	ldrh	r3, [r7, #26]
 8021ec8:	4413      	add	r3, r2
 8021eca:	b29a      	uxth	r2, r3
 8021ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ece:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8021ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ed2:	88db      	ldrh	r3, [r3, #6]
 8021ed4:	b29b      	uxth	r3, r3
 8021ed6:	8afa      	ldrh	r2, [r7, #22]
 8021ed8:	429a      	cmp	r2, r3
 8021eda:	d902      	bls.n	8021ee2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021ee0:	e106      	b.n	80220f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8021ee2:	68fb      	ldr	r3, [r7, #12]
 8021ee4:	685b      	ldr	r3, [r3, #4]
 8021ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8021ee8:	e068      	b.n	8021fbc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8021eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021eec:	685b      	ldr	r3, [r3, #4]
 8021eee:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8021ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ef2:	889b      	ldrh	r3, [r3, #4]
 8021ef4:	b29a      	uxth	r2, r3
 8021ef6:	693b      	ldr	r3, [r7, #16]
 8021ef8:	889b      	ldrh	r3, [r3, #4]
 8021efa:	b29b      	uxth	r3, r3
 8021efc:	429a      	cmp	r2, r3
 8021efe:	d235      	bcs.n	8021f6c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8021f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021f04:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8021f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f08:	2b00      	cmp	r3, #0
 8021f0a:	d020      	beq.n	8021f4e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8021f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f0e:	889b      	ldrh	r3, [r3, #4]
 8021f10:	b29a      	uxth	r2, r3
 8021f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f14:	88db      	ldrh	r3, [r3, #6]
 8021f16:	b29b      	uxth	r3, r3
 8021f18:	429a      	cmp	r2, r3
 8021f1a:	d307      	bcc.n	8021f2c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8021f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f1e:	88db      	ldrh	r3, [r3, #6]
 8021f20:	b29a      	uxth	r2, r3
 8021f22:	693b      	ldr	r3, [r7, #16]
 8021f24:	889b      	ldrh	r3, [r3, #4]
 8021f26:	b29b      	uxth	r3, r3
 8021f28:	429a      	cmp	r2, r3
 8021f2a:	d902      	bls.n	8021f32 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021f2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021f30:	e0de      	b.n	80220f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8021f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f34:	68ba      	ldr	r2, [r7, #8]
 8021f36:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8021f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f3a:	88db      	ldrh	r3, [r3, #6]
 8021f3c:	b29a      	uxth	r2, r3
 8021f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f40:	889b      	ldrh	r3, [r3, #4]
 8021f42:	b29b      	uxth	r3, r3
 8021f44:	429a      	cmp	r2, r3
 8021f46:	d03d      	beq.n	8021fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021f48:	2300      	movs	r3, #0
 8021f4a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8021f4c:	e03a      	b.n	8021fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8021f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f50:	88db      	ldrh	r3, [r3, #6]
 8021f52:	b29a      	uxth	r2, r3
 8021f54:	693b      	ldr	r3, [r7, #16]
 8021f56:	889b      	ldrh	r3, [r3, #4]
 8021f58:	b29b      	uxth	r3, r3
 8021f5a:	429a      	cmp	r2, r3
 8021f5c:	d902      	bls.n	8021f64 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021f62:	e0c5      	b.n	80220f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021f64:	68fb      	ldr	r3, [r7, #12]
 8021f66:	68ba      	ldr	r2, [r7, #8]
 8021f68:	605a      	str	r2, [r3, #4]
      break;
 8021f6a:	e02b      	b.n	8021fc4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8021f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f6e:	889b      	ldrh	r3, [r3, #4]
 8021f70:	b29a      	uxth	r2, r3
 8021f72:	693b      	ldr	r3, [r7, #16]
 8021f74:	889b      	ldrh	r3, [r3, #4]
 8021f76:	b29b      	uxth	r3, r3
 8021f78:	429a      	cmp	r2, r3
 8021f7a:	d102      	bne.n	8021f82 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021f7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021f80:	e0b6      	b.n	80220f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8021f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f84:	889b      	ldrh	r3, [r3, #4]
 8021f86:	b29a      	uxth	r2, r3
 8021f88:	693b      	ldr	r3, [r7, #16]
 8021f8a:	88db      	ldrh	r3, [r3, #6]
 8021f8c:	b29b      	uxth	r3, r3
 8021f8e:	429a      	cmp	r2, r3
 8021f90:	d202      	bcs.n	8021f98 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021f96:	e0ab      	b.n	80220f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8021f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f9a:	2b00      	cmp	r3, #0
 8021f9c:	d009      	beq.n	8021fb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8021f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fa0:	88db      	ldrh	r3, [r3, #6]
 8021fa2:	b29a      	uxth	r2, r3
 8021fa4:	693b      	ldr	r3, [r7, #16]
 8021fa6:	889b      	ldrh	r3, [r3, #4]
 8021fa8:	b29b      	uxth	r3, r3
 8021faa:	429a      	cmp	r2, r3
 8021fac:	d001      	beq.n	8021fb2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021fae:	2300      	movs	r3, #0
 8021fb0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8021fb2:	693b      	ldr	r3, [r7, #16]
 8021fb4:	681b      	ldr	r3, [r3, #0]
 8021fb6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8021fb8:	693b      	ldr	r3, [r7, #16]
 8021fba:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fbe:	2b00      	cmp	r3, #0
 8021fc0:	d193      	bne.n	8021eea <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8021fc2:	e000      	b.n	8021fc6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021fc4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021fc8:	2b00      	cmp	r3, #0
 8021fca:	d12d      	bne.n	8022028 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fce:	2b00      	cmp	r3, #0
 8021fd0:	d01c      	beq.n	802200c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8021fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fd4:	88db      	ldrh	r3, [r3, #6]
 8021fd6:	b29a      	uxth	r2, r3
 8021fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021fda:	889b      	ldrh	r3, [r3, #4]
 8021fdc:	b29b      	uxth	r3, r3
 8021fde:	429a      	cmp	r2, r3
 8021fe0:	d906      	bls.n	8021ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8021fe2:	4b45      	ldr	r3, [pc, #276]	; (80220f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021fe4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8021fe8:	4944      	ldr	r1, [pc, #272]	; (80220fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8021fea:	4845      	ldr	r0, [pc, #276]	; (8022100 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021fec:	f002 fee8 	bl	8024dc0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8021ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ff2:	68ba      	ldr	r2, [r7, #8]
 8021ff4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021ff8:	88db      	ldrh	r3, [r3, #6]
 8021ffa:	b29a      	uxth	r2, r3
 8021ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ffe:	889b      	ldrh	r3, [r3, #4]
 8022000:	b29b      	uxth	r3, r3
 8022002:	429a      	cmp	r2, r3
 8022004:	d010      	beq.n	8022028 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8022006:	2300      	movs	r3, #0
 8022008:	623b      	str	r3, [r7, #32]
 802200a:	e00d      	b.n	8022028 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 802200c:	68fb      	ldr	r3, [r7, #12]
 802200e:	685b      	ldr	r3, [r3, #4]
 8022010:	2b00      	cmp	r3, #0
 8022012:	d006      	beq.n	8022022 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8022014:	4b38      	ldr	r3, [pc, #224]	; (80220f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022016:	f44f 72df 	mov.w	r2, #446	; 0x1be
 802201a:	493a      	ldr	r1, [pc, #232]	; (8022104 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 802201c:	4838      	ldr	r0, [pc, #224]	; (8022100 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802201e:	f002 fecf 	bl	8024dc0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8022022:	68fb      	ldr	r3, [r7, #12]
 8022024:	68ba      	ldr	r2, [r7, #8]
 8022026:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022028:	687b      	ldr	r3, [r7, #4]
 802202a:	2b00      	cmp	r3, #0
 802202c:	d105      	bne.n	802203a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 802202e:	68fb      	ldr	r3, [r7, #12]
 8022030:	7f9b      	ldrb	r3, [r3, #30]
 8022032:	f003 0301 	and.w	r3, r3, #1
 8022036:	2b00      	cmp	r3, #0
 8022038:	d059      	beq.n	80220ee <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 802203a:	6a3b      	ldr	r3, [r7, #32]
 802203c:	2b00      	cmp	r3, #0
 802203e:	d04f      	beq.n	80220e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022040:	68fb      	ldr	r3, [r7, #12]
 8022042:	685b      	ldr	r3, [r3, #4]
 8022044:	2b00      	cmp	r3, #0
 8022046:	d006      	beq.n	8022056 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8022048:	68fb      	ldr	r3, [r7, #12]
 802204a:	685b      	ldr	r3, [r3, #4]
 802204c:	685b      	ldr	r3, [r3, #4]
 802204e:	889b      	ldrh	r3, [r3, #4]
 8022050:	b29b      	uxth	r3, r3
 8022052:	2b00      	cmp	r3, #0
 8022054:	d002      	beq.n	802205c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8022056:	2300      	movs	r3, #0
 8022058:	623b      	str	r3, [r7, #32]
 802205a:	e041      	b.n	80220e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 802205c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802205e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8022060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022062:	681b      	ldr	r3, [r3, #0]
 8022064:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8022066:	e012      	b.n	802208e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8022068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802206a:	685b      	ldr	r3, [r3, #4]
 802206c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 802206e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022070:	88db      	ldrh	r3, [r3, #6]
 8022072:	b29a      	uxth	r2, r3
 8022074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022076:	889b      	ldrh	r3, [r3, #4]
 8022078:	b29b      	uxth	r3, r3
 802207a:	429a      	cmp	r2, r3
 802207c:	d002      	beq.n	8022084 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 802207e:	2300      	movs	r3, #0
 8022080:	623b      	str	r3, [r7, #32]
            break;
 8022082:	e007      	b.n	8022094 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8022084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022086:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8022088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802208a:	681b      	ldr	r3, [r3, #0]
 802208c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802208e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022090:	2b00      	cmp	r3, #0
 8022092:	d1e9      	bne.n	8022068 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8022094:	6a3b      	ldr	r3, [r7, #32]
 8022096:	2b00      	cmp	r3, #0
 8022098:	d022      	beq.n	80220e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 802209a:	68fb      	ldr	r3, [r7, #12]
 802209c:	685b      	ldr	r3, [r3, #4]
 802209e:	2b00      	cmp	r3, #0
 80220a0:	d106      	bne.n	80220b0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80220a2:	4b15      	ldr	r3, [pc, #84]	; (80220f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80220a4:	f240 12df 	movw	r2, #479	; 0x1df
 80220a8:	4917      	ldr	r1, [pc, #92]	; (8022108 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80220aa:	4815      	ldr	r0, [pc, #84]	; (8022100 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80220ac:	f002 fe88 	bl	8024dc0 <iprintf>
          LWIP_ASSERT("sanity check",
 80220b0:	68fb      	ldr	r3, [r7, #12]
 80220b2:	685b      	ldr	r3, [r3, #4]
 80220b4:	685b      	ldr	r3, [r3, #4]
 80220b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80220b8:	429a      	cmp	r2, r3
 80220ba:	d106      	bne.n	80220ca <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80220bc:	4b0e      	ldr	r3, [pc, #56]	; (80220f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80220be:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80220c2:	4911      	ldr	r1, [pc, #68]	; (8022108 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80220c4:	480e      	ldr	r0, [pc, #56]	; (8022100 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80220c6:	f002 fe7b 	bl	8024dc0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80220ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80220cc:	681b      	ldr	r3, [r3, #0]
 80220ce:	2b00      	cmp	r3, #0
 80220d0:	d006      	beq.n	80220e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80220d2:	4b09      	ldr	r3, [pc, #36]	; (80220f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80220d4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80220d8:	490c      	ldr	r1, [pc, #48]	; (802210c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80220da:	4809      	ldr	r0, [pc, #36]	; (8022100 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80220dc:	f002 fe70 	bl	8024dc0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80220e0:	6a3b      	ldr	r3, [r7, #32]
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	bf14      	ite	ne
 80220e6:	2301      	movne	r3, #1
 80220e8:	2300      	moveq	r3, #0
 80220ea:	b2db      	uxtb	r3, r3
 80220ec:	e000      	b.n	80220f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80220ee:	2300      	movs	r3, #0
}
 80220f0:	4618      	mov	r0, r3
 80220f2:	3730      	adds	r7, #48	; 0x30
 80220f4:	46bd      	mov	sp, r7
 80220f6:	bd80      	pop	{r7, pc}
 80220f8:	0802d954 	.word	0x0802d954
 80220fc:	0802da38 	.word	0x0802da38
 8022100:	0802d99c 	.word	0x0802d99c
 8022104:	0802da58 	.word	0x0802da58
 8022108:	0802da90 	.word	0x0802da90
 802210c:	0802daa0 	.word	0x0802daa0

08022110 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8022110:	b580      	push	{r7, lr}
 8022112:	b08e      	sub	sp, #56	; 0x38
 8022114:	af00      	add	r7, sp, #0
 8022116:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8022118:	687b      	ldr	r3, [r7, #4]
 802211a:	685b      	ldr	r3, [r3, #4]
 802211c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 802211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022120:	781b      	ldrb	r3, [r3, #0]
 8022122:	f003 030f 	and.w	r3, r3, #15
 8022126:	b2db      	uxtb	r3, r3
 8022128:	009b      	lsls	r3, r3, #2
 802212a:	b2db      	uxtb	r3, r3
 802212c:	2b14      	cmp	r3, #20
 802212e:	f040 8171 	bne.w	8022414 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8022132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022134:	88db      	ldrh	r3, [r3, #6]
 8022136:	b29b      	uxth	r3, r3
 8022138:	4618      	mov	r0, r3
 802213a:	f7f4 fb83 	bl	8016844 <lwip_htons>
 802213e:	4603      	mov	r3, r0
 8022140:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022144:	b29b      	uxth	r3, r3
 8022146:	00db      	lsls	r3, r3, #3
 8022148:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802214a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802214c:	885b      	ldrh	r3, [r3, #2]
 802214e:	b29b      	uxth	r3, r3
 8022150:	4618      	mov	r0, r3
 8022152:	f7f4 fb77 	bl	8016844 <lwip_htons>
 8022156:	4603      	mov	r3, r0
 8022158:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802215a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802215c:	781b      	ldrb	r3, [r3, #0]
 802215e:	f003 030f 	and.w	r3, r3, #15
 8022162:	b2db      	uxtb	r3, r3
 8022164:	009b      	lsls	r3, r3, #2
 8022166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802216a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802216e:	b29b      	uxth	r3, r3
 8022170:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8022172:	429a      	cmp	r2, r3
 8022174:	f0c0 8150 	bcc.w	8022418 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8022178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802217c:	b29b      	uxth	r3, r3
 802217e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8022180:	1ad3      	subs	r3, r2, r3
 8022182:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8022184:	6878      	ldr	r0, [r7, #4]
 8022186:	f7f6 faa7 	bl	80186d8 <pbuf_clen>
 802218a:	4603      	mov	r3, r0
 802218c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802218e:	4b8c      	ldr	r3, [pc, #560]	; (80223c0 <ip4_reass+0x2b0>)
 8022190:	881b      	ldrh	r3, [r3, #0]
 8022192:	461a      	mov	r2, r3
 8022194:	8c3b      	ldrh	r3, [r7, #32]
 8022196:	4413      	add	r3, r2
 8022198:	2b0a      	cmp	r3, #10
 802219a:	dd10      	ble.n	80221be <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802219c:	8c3b      	ldrh	r3, [r7, #32]
 802219e:	4619      	mov	r1, r3
 80221a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80221a2:	f7ff fd81 	bl	8021ca8 <ip_reass_remove_oldest_datagram>
 80221a6:	4603      	mov	r3, r0
 80221a8:	2b00      	cmp	r3, #0
 80221aa:	f000 8137 	beq.w	802241c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80221ae:	4b84      	ldr	r3, [pc, #528]	; (80223c0 <ip4_reass+0x2b0>)
 80221b0:	881b      	ldrh	r3, [r3, #0]
 80221b2:	461a      	mov	r2, r3
 80221b4:	8c3b      	ldrh	r3, [r7, #32]
 80221b6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80221b8:	2b0a      	cmp	r3, #10
 80221ba:	f300 812f 	bgt.w	802241c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80221be:	4b81      	ldr	r3, [pc, #516]	; (80223c4 <ip4_reass+0x2b4>)
 80221c0:	681b      	ldr	r3, [r3, #0]
 80221c2:	633b      	str	r3, [r7, #48]	; 0x30
 80221c4:	e015      	b.n	80221f2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80221c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221c8:	695a      	ldr	r2, [r3, #20]
 80221ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221cc:	68db      	ldr	r3, [r3, #12]
 80221ce:	429a      	cmp	r2, r3
 80221d0:	d10c      	bne.n	80221ec <ip4_reass+0xdc>
 80221d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221d4:	699a      	ldr	r2, [r3, #24]
 80221d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221d8:	691b      	ldr	r3, [r3, #16]
 80221da:	429a      	cmp	r2, r3
 80221dc:	d106      	bne.n	80221ec <ip4_reass+0xdc>
 80221de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221e0:	899a      	ldrh	r2, [r3, #12]
 80221e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221e4:	889b      	ldrh	r3, [r3, #4]
 80221e6:	b29b      	uxth	r3, r3
 80221e8:	429a      	cmp	r2, r3
 80221ea:	d006      	beq.n	80221fa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80221ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221ee:	681b      	ldr	r3, [r3, #0]
 80221f0:	633b      	str	r3, [r7, #48]	; 0x30
 80221f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221f4:	2b00      	cmp	r3, #0
 80221f6:	d1e6      	bne.n	80221c6 <ip4_reass+0xb6>
 80221f8:	e000      	b.n	80221fc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80221fa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80221fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221fe:	2b00      	cmp	r3, #0
 8022200:	d109      	bne.n	8022216 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8022202:	8c3b      	ldrh	r3, [r7, #32]
 8022204:	4619      	mov	r1, r3
 8022206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022208:	f7ff fdb0 	bl	8021d6c <ip_reass_enqueue_new_datagram>
 802220c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 802220e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022210:	2b00      	cmp	r3, #0
 8022212:	d11c      	bne.n	802224e <ip4_reass+0x13e>
      goto nullreturn;
 8022214:	e105      	b.n	8022422 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022218:	88db      	ldrh	r3, [r3, #6]
 802221a:	b29b      	uxth	r3, r3
 802221c:	4618      	mov	r0, r3
 802221e:	f7f4 fb11 	bl	8016844 <lwip_htons>
 8022222:	4603      	mov	r3, r0
 8022224:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022228:	2b00      	cmp	r3, #0
 802222a:	d110      	bne.n	802224e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 802222c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802222e:	89db      	ldrh	r3, [r3, #14]
 8022230:	4618      	mov	r0, r3
 8022232:	f7f4 fb07 	bl	8016844 <lwip_htons>
 8022236:	4603      	mov	r3, r0
 8022238:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802223c:	2b00      	cmp	r3, #0
 802223e:	d006      	beq.n	802224e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8022240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022242:	3308      	adds	r3, #8
 8022244:	2214      	movs	r2, #20
 8022246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8022248:	4618      	mov	r0, r3
 802224a:	f004 fa78 	bl	802673e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 802224e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022250:	88db      	ldrh	r3, [r3, #6]
 8022252:	b29b      	uxth	r3, r3
 8022254:	f003 0320 	and.w	r3, r3, #32
 8022258:	2b00      	cmp	r3, #0
 802225a:	bf0c      	ite	eq
 802225c:	2301      	moveq	r3, #1
 802225e:	2300      	movne	r3, #0
 8022260:	b2db      	uxtb	r3, r3
 8022262:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8022264:	69fb      	ldr	r3, [r7, #28]
 8022266:	2b00      	cmp	r3, #0
 8022268:	d00e      	beq.n	8022288 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802226a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802226c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802226e:	4413      	add	r3, r2
 8022270:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8022272:	8b7a      	ldrh	r2, [r7, #26]
 8022274:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022276:	429a      	cmp	r2, r3
 8022278:	f0c0 80a0 	bcc.w	80223bc <ip4_reass+0x2ac>
 802227c:	8b7b      	ldrh	r3, [r7, #26]
 802227e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8022282:	4293      	cmp	r3, r2
 8022284:	f200 809a 	bhi.w	80223bc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8022288:	69fa      	ldr	r2, [r7, #28]
 802228a:	6879      	ldr	r1, [r7, #4]
 802228c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802228e:	f7ff fdd5 	bl	8021e3c <ip_reass_chain_frag_into_datagram_and_validate>
 8022292:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8022294:	697b      	ldr	r3, [r7, #20]
 8022296:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802229a:	f000 809b 	beq.w	80223d4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802229e:	4b48      	ldr	r3, [pc, #288]	; (80223c0 <ip4_reass+0x2b0>)
 80222a0:	881a      	ldrh	r2, [r3, #0]
 80222a2:	8c3b      	ldrh	r3, [r7, #32]
 80222a4:	4413      	add	r3, r2
 80222a6:	b29a      	uxth	r2, r3
 80222a8:	4b45      	ldr	r3, [pc, #276]	; (80223c0 <ip4_reass+0x2b0>)
 80222aa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80222ac:	69fb      	ldr	r3, [r7, #28]
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d00d      	beq.n	80222ce <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80222b2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80222b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80222b6:	4413      	add	r3, r2
 80222b8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80222ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222bc:	8a7a      	ldrh	r2, [r7, #18]
 80222be:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80222c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222c2:	7f9b      	ldrb	r3, [r3, #30]
 80222c4:	f043 0301 	orr.w	r3, r3, #1
 80222c8:	b2da      	uxtb	r2, r3
 80222ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222cc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80222ce:	697b      	ldr	r3, [r7, #20]
 80222d0:	2b01      	cmp	r3, #1
 80222d2:	d171      	bne.n	80223b8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80222d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222d6:	8b9b      	ldrh	r3, [r3, #28]
 80222d8:	3314      	adds	r3, #20
 80222da:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80222dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222de:	685b      	ldr	r3, [r3, #4]
 80222e0:	685b      	ldr	r3, [r3, #4]
 80222e2:	681b      	ldr	r3, [r3, #0]
 80222e4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80222e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222e8:	685b      	ldr	r3, [r3, #4]
 80222ea:	685b      	ldr	r3, [r3, #4]
 80222ec:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80222ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222f0:	3308      	adds	r3, #8
 80222f2:	2214      	movs	r2, #20
 80222f4:	4619      	mov	r1, r3
 80222f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80222f8:	f004 fa21 	bl	802673e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80222fc:	8a3b      	ldrh	r3, [r7, #16]
 80222fe:	4618      	mov	r0, r3
 8022300:	f7f4 faa0 	bl	8016844 <lwip_htons>
 8022304:	4603      	mov	r3, r0
 8022306:	461a      	mov	r2, r3
 8022308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802230a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 802230c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802230e:	2200      	movs	r2, #0
 8022310:	719a      	strb	r2, [r3, #6]
 8022312:	2200      	movs	r2, #0
 8022314:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8022316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022318:	2200      	movs	r2, #0
 802231a:	729a      	strb	r2, [r3, #10]
 802231c:	2200      	movs	r2, #0
 802231e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8022320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022322:	685b      	ldr	r3, [r3, #4]
 8022324:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8022326:	e00d      	b.n	8022344 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8022328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802232a:	685b      	ldr	r3, [r3, #4]
 802232c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 802232e:	2114      	movs	r1, #20
 8022330:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8022332:	f7f6 f8bd 	bl	80184b0 <pbuf_remove_header>
      pbuf_cat(p, r);
 8022336:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022338:	6878      	ldr	r0, [r7, #4]
 802233a:	f7f6 fa0d 	bl	8018758 <pbuf_cat>
      r = iprh->next_pbuf;
 802233e:	68fb      	ldr	r3, [r7, #12]
 8022340:	681b      	ldr	r3, [r3, #0]
 8022342:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8022344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022346:	2b00      	cmp	r3, #0
 8022348:	d1ee      	bne.n	8022328 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 802234a:	4b1e      	ldr	r3, [pc, #120]	; (80223c4 <ip4_reass+0x2b4>)
 802234c:	681b      	ldr	r3, [r3, #0]
 802234e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022350:	429a      	cmp	r2, r3
 8022352:	d102      	bne.n	802235a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8022354:	2300      	movs	r3, #0
 8022356:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022358:	e010      	b.n	802237c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802235a:	4b1a      	ldr	r3, [pc, #104]	; (80223c4 <ip4_reass+0x2b4>)
 802235c:	681b      	ldr	r3, [r3, #0]
 802235e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022360:	e007      	b.n	8022372 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8022362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022364:	681b      	ldr	r3, [r3, #0]
 8022366:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022368:	429a      	cmp	r2, r3
 802236a:	d006      	beq.n	802237a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802236c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802236e:	681b      	ldr	r3, [r3, #0]
 8022370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022374:	2b00      	cmp	r3, #0
 8022376:	d1f4      	bne.n	8022362 <ip4_reass+0x252>
 8022378:	e000      	b.n	802237c <ip4_reass+0x26c>
          break;
 802237a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 802237c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802237e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022380:	f7ff fd2e 	bl	8021de0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8022384:	6878      	ldr	r0, [r7, #4]
 8022386:	f7f6 f9a7 	bl	80186d8 <pbuf_clen>
 802238a:	4603      	mov	r3, r0
 802238c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802238e:	4b0c      	ldr	r3, [pc, #48]	; (80223c0 <ip4_reass+0x2b0>)
 8022390:	881b      	ldrh	r3, [r3, #0]
 8022392:	8c3a      	ldrh	r2, [r7, #32]
 8022394:	429a      	cmp	r2, r3
 8022396:	d906      	bls.n	80223a6 <ip4_reass+0x296>
 8022398:	4b0b      	ldr	r3, [pc, #44]	; (80223c8 <ip4_reass+0x2b8>)
 802239a:	f240 229b 	movw	r2, #667	; 0x29b
 802239e:	490b      	ldr	r1, [pc, #44]	; (80223cc <ip4_reass+0x2bc>)
 80223a0:	480b      	ldr	r0, [pc, #44]	; (80223d0 <ip4_reass+0x2c0>)
 80223a2:	f002 fd0d 	bl	8024dc0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80223a6:	4b06      	ldr	r3, [pc, #24]	; (80223c0 <ip4_reass+0x2b0>)
 80223a8:	881a      	ldrh	r2, [r3, #0]
 80223aa:	8c3b      	ldrh	r3, [r7, #32]
 80223ac:	1ad3      	subs	r3, r2, r3
 80223ae:	b29a      	uxth	r2, r3
 80223b0:	4b03      	ldr	r3, [pc, #12]	; (80223c0 <ip4_reass+0x2b0>)
 80223b2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80223b4:	687b      	ldr	r3, [r7, #4]
 80223b6:	e038      	b.n	802242a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80223b8:	2300      	movs	r3, #0
 80223ba:	e036      	b.n	802242a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80223bc:	bf00      	nop
 80223be:	e00a      	b.n	80223d6 <ip4_reass+0x2c6>
 80223c0:	2001613c 	.word	0x2001613c
 80223c4:	20016138 	.word	0x20016138
 80223c8:	0802d954 	.word	0x0802d954
 80223cc:	0802dac4 	.word	0x0802dac4
 80223d0:	0802d99c 	.word	0x0802d99c
    goto nullreturn_ipr;
 80223d4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80223d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223d8:	2b00      	cmp	r3, #0
 80223da:	d106      	bne.n	80223ea <ip4_reass+0x2da>
 80223dc:	4b15      	ldr	r3, [pc, #84]	; (8022434 <ip4_reass+0x324>)
 80223de:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80223e2:	4915      	ldr	r1, [pc, #84]	; (8022438 <ip4_reass+0x328>)
 80223e4:	4815      	ldr	r0, [pc, #84]	; (802243c <ip4_reass+0x32c>)
 80223e6:	f002 fceb 	bl	8024dc0 <iprintf>
  if (ipr->p == NULL) {
 80223ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223ec:	685b      	ldr	r3, [r3, #4]
 80223ee:	2b00      	cmp	r3, #0
 80223f0:	d116      	bne.n	8022420 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80223f2:	4b13      	ldr	r3, [pc, #76]	; (8022440 <ip4_reass+0x330>)
 80223f4:	681b      	ldr	r3, [r3, #0]
 80223f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80223f8:	429a      	cmp	r2, r3
 80223fa:	d006      	beq.n	802240a <ip4_reass+0x2fa>
 80223fc:	4b0d      	ldr	r3, [pc, #52]	; (8022434 <ip4_reass+0x324>)
 80223fe:	f240 22ab 	movw	r2, #683	; 0x2ab
 8022402:	4910      	ldr	r1, [pc, #64]	; (8022444 <ip4_reass+0x334>)
 8022404:	480d      	ldr	r0, [pc, #52]	; (802243c <ip4_reass+0x32c>)
 8022406:	f002 fcdb 	bl	8024dc0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 802240a:	2100      	movs	r1, #0
 802240c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802240e:	f7ff fce7 	bl	8021de0 <ip_reass_dequeue_datagram>
 8022412:	e006      	b.n	8022422 <ip4_reass+0x312>
    goto nullreturn;
 8022414:	bf00      	nop
 8022416:	e004      	b.n	8022422 <ip4_reass+0x312>
    goto nullreturn;
 8022418:	bf00      	nop
 802241a:	e002      	b.n	8022422 <ip4_reass+0x312>
      goto nullreturn;
 802241c:	bf00      	nop
 802241e:	e000      	b.n	8022422 <ip4_reass+0x312>
  }

nullreturn:
 8022420:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8022422:	6878      	ldr	r0, [r7, #4]
 8022424:	f7f6 f8ca 	bl	80185bc <pbuf_free>
  return NULL;
 8022428:	2300      	movs	r3, #0
}
 802242a:	4618      	mov	r0, r3
 802242c:	3738      	adds	r7, #56	; 0x38
 802242e:	46bd      	mov	sp, r7
 8022430:	bd80      	pop	{r7, pc}
 8022432:	bf00      	nop
 8022434:	0802d954 	.word	0x0802d954
 8022438:	0802dae0 	.word	0x0802dae0
 802243c:	0802d99c 	.word	0x0802d99c
 8022440:	20016138 	.word	0x20016138
 8022444:	0802daec 	.word	0x0802daec

08022448 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8022448:	b580      	push	{r7, lr}
 802244a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 802244c:	2005      	movs	r0, #5
 802244e:	f7f5 f99b 	bl	8017788 <memp_malloc>
 8022452:	4603      	mov	r3, r0
}
 8022454:	4618      	mov	r0, r3
 8022456:	bd80      	pop	{r7, pc}

08022458 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8022458:	b580      	push	{r7, lr}
 802245a:	b082      	sub	sp, #8
 802245c:	af00      	add	r7, sp, #0
 802245e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8022460:	687b      	ldr	r3, [r7, #4]
 8022462:	2b00      	cmp	r3, #0
 8022464:	d106      	bne.n	8022474 <ip_frag_free_pbuf_custom_ref+0x1c>
 8022466:	4b07      	ldr	r3, [pc, #28]	; (8022484 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8022468:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 802246c:	4906      	ldr	r1, [pc, #24]	; (8022488 <ip_frag_free_pbuf_custom_ref+0x30>)
 802246e:	4807      	ldr	r0, [pc, #28]	; (802248c <ip_frag_free_pbuf_custom_ref+0x34>)
 8022470:	f002 fca6 	bl	8024dc0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8022474:	6879      	ldr	r1, [r7, #4]
 8022476:	2005      	movs	r0, #5
 8022478:	f7f5 f9fc 	bl	8017874 <memp_free>
}
 802247c:	bf00      	nop
 802247e:	3708      	adds	r7, #8
 8022480:	46bd      	mov	sp, r7
 8022482:	bd80      	pop	{r7, pc}
 8022484:	0802d954 	.word	0x0802d954
 8022488:	0802db0c 	.word	0x0802db0c
 802248c:	0802d99c 	.word	0x0802d99c

08022490 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8022490:	b580      	push	{r7, lr}
 8022492:	b084      	sub	sp, #16
 8022494:	af00      	add	r7, sp, #0
 8022496:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8022498:	687b      	ldr	r3, [r7, #4]
 802249a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802249c:	68fb      	ldr	r3, [r7, #12]
 802249e:	2b00      	cmp	r3, #0
 80224a0:	d106      	bne.n	80224b0 <ipfrag_free_pbuf_custom+0x20>
 80224a2:	4b11      	ldr	r3, [pc, #68]	; (80224e8 <ipfrag_free_pbuf_custom+0x58>)
 80224a4:	f240 22ce 	movw	r2, #718	; 0x2ce
 80224a8:	4910      	ldr	r1, [pc, #64]	; (80224ec <ipfrag_free_pbuf_custom+0x5c>)
 80224aa:	4811      	ldr	r0, [pc, #68]	; (80224f0 <ipfrag_free_pbuf_custom+0x60>)
 80224ac:	f002 fc88 	bl	8024dc0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80224b0:	68fa      	ldr	r2, [r7, #12]
 80224b2:	687b      	ldr	r3, [r7, #4]
 80224b4:	429a      	cmp	r2, r3
 80224b6:	d006      	beq.n	80224c6 <ipfrag_free_pbuf_custom+0x36>
 80224b8:	4b0b      	ldr	r3, [pc, #44]	; (80224e8 <ipfrag_free_pbuf_custom+0x58>)
 80224ba:	f240 22cf 	movw	r2, #719	; 0x2cf
 80224be:	490d      	ldr	r1, [pc, #52]	; (80224f4 <ipfrag_free_pbuf_custom+0x64>)
 80224c0:	480b      	ldr	r0, [pc, #44]	; (80224f0 <ipfrag_free_pbuf_custom+0x60>)
 80224c2:	f002 fc7d 	bl	8024dc0 <iprintf>
  if (pcr->original != NULL) {
 80224c6:	68fb      	ldr	r3, [r7, #12]
 80224c8:	695b      	ldr	r3, [r3, #20]
 80224ca:	2b00      	cmp	r3, #0
 80224cc:	d004      	beq.n	80224d8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80224ce:	68fb      	ldr	r3, [r7, #12]
 80224d0:	695b      	ldr	r3, [r3, #20]
 80224d2:	4618      	mov	r0, r3
 80224d4:	f7f6 f872 	bl	80185bc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80224d8:	68f8      	ldr	r0, [r7, #12]
 80224da:	f7ff ffbd 	bl	8022458 <ip_frag_free_pbuf_custom_ref>
}
 80224de:	bf00      	nop
 80224e0:	3710      	adds	r7, #16
 80224e2:	46bd      	mov	sp, r7
 80224e4:	bd80      	pop	{r7, pc}
 80224e6:	bf00      	nop
 80224e8:	0802d954 	.word	0x0802d954
 80224ec:	0802db18 	.word	0x0802db18
 80224f0:	0802d99c 	.word	0x0802d99c
 80224f4:	0802db24 	.word	0x0802db24

080224f8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80224f8:	b580      	push	{r7, lr}
 80224fa:	b094      	sub	sp, #80	; 0x50
 80224fc:	af02      	add	r7, sp, #8
 80224fe:	60f8      	str	r0, [r7, #12]
 8022500:	60b9      	str	r1, [r7, #8]
 8022502:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8022504:	2300      	movs	r3, #0
 8022506:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802250a:	68bb      	ldr	r3, [r7, #8]
 802250c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 802250e:	3b14      	subs	r3, #20
 8022510:	2b00      	cmp	r3, #0
 8022512:	da00      	bge.n	8022516 <ip4_frag+0x1e>
 8022514:	3307      	adds	r3, #7
 8022516:	10db      	asrs	r3, r3, #3
 8022518:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802251a:	2314      	movs	r3, #20
 802251c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802251e:	68fb      	ldr	r3, [r7, #12]
 8022520:	685b      	ldr	r3, [r3, #4]
 8022522:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8022524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022526:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8022528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802252a:	781b      	ldrb	r3, [r3, #0]
 802252c:	f003 030f 	and.w	r3, r3, #15
 8022530:	b2db      	uxtb	r3, r3
 8022532:	009b      	lsls	r3, r3, #2
 8022534:	b2db      	uxtb	r3, r3
 8022536:	2b14      	cmp	r3, #20
 8022538:	d002      	beq.n	8022540 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 802253a:	f06f 0305 	mvn.w	r3, #5
 802253e:	e110      	b.n	8022762 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8022540:	68fb      	ldr	r3, [r7, #12]
 8022542:	895b      	ldrh	r3, [r3, #10]
 8022544:	2b13      	cmp	r3, #19
 8022546:	d809      	bhi.n	802255c <ip4_frag+0x64>
 8022548:	4b88      	ldr	r3, [pc, #544]	; (802276c <ip4_frag+0x274>)
 802254a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 802254e:	4988      	ldr	r1, [pc, #544]	; (8022770 <ip4_frag+0x278>)
 8022550:	4888      	ldr	r0, [pc, #544]	; (8022774 <ip4_frag+0x27c>)
 8022552:	f002 fc35 	bl	8024dc0 <iprintf>
 8022556:	f06f 0305 	mvn.w	r3, #5
 802255a:	e102      	b.n	8022762 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802255c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802255e:	88db      	ldrh	r3, [r3, #6]
 8022560:	b29b      	uxth	r3, r3
 8022562:	4618      	mov	r0, r3
 8022564:	f7f4 f96e 	bl	8016844 <lwip_htons>
 8022568:	4603      	mov	r3, r0
 802256a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 802256c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802256e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022572:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8022576:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802257c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802257e:	68fb      	ldr	r3, [r7, #12]
 8022580:	891b      	ldrh	r3, [r3, #8]
 8022582:	3b14      	subs	r3, #20
 8022584:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8022588:	e0e1      	b.n	802274e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802258a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802258c:	00db      	lsls	r3, r3, #3
 802258e:	b29b      	uxth	r3, r3
 8022590:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8022594:	4293      	cmp	r3, r2
 8022596:	bf28      	it	cs
 8022598:	4613      	movcs	r3, r2
 802259a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802259c:	f44f 7220 	mov.w	r2, #640	; 0x280
 80225a0:	2114      	movs	r1, #20
 80225a2:	200e      	movs	r0, #14
 80225a4:	f7f5 fd26 	bl	8017ff4 <pbuf_alloc>
 80225a8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80225aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225ac:	2b00      	cmp	r3, #0
 80225ae:	f000 80d5 	beq.w	802275c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80225b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225b4:	895b      	ldrh	r3, [r3, #10]
 80225b6:	2b13      	cmp	r3, #19
 80225b8:	d806      	bhi.n	80225c8 <ip4_frag+0xd0>
 80225ba:	4b6c      	ldr	r3, [pc, #432]	; (802276c <ip4_frag+0x274>)
 80225bc:	f44f 7249 	mov.w	r2, #804	; 0x324
 80225c0:	496d      	ldr	r1, [pc, #436]	; (8022778 <ip4_frag+0x280>)
 80225c2:	486c      	ldr	r0, [pc, #432]	; (8022774 <ip4_frag+0x27c>)
 80225c4:	f002 fbfc 	bl	8024dc0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80225c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225ca:	685b      	ldr	r3, [r3, #4]
 80225cc:	2214      	movs	r2, #20
 80225ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80225d0:	4618      	mov	r0, r3
 80225d2:	f004 f8b4 	bl	802673e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80225d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80225d8:	685b      	ldr	r3, [r3, #4]
 80225da:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80225dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80225de:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80225e2:	e064      	b.n	80226ae <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80225e4:	68fb      	ldr	r3, [r7, #12]
 80225e6:	895a      	ldrh	r2, [r3, #10]
 80225e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80225ea:	1ad3      	subs	r3, r2, r3
 80225ec:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80225ee:	68fb      	ldr	r3, [r7, #12]
 80225f0:	895b      	ldrh	r3, [r3, #10]
 80225f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80225f4:	429a      	cmp	r2, r3
 80225f6:	d906      	bls.n	8022606 <ip4_frag+0x10e>
 80225f8:	4b5c      	ldr	r3, [pc, #368]	; (802276c <ip4_frag+0x274>)
 80225fa:	f240 322d 	movw	r2, #813	; 0x32d
 80225fe:	495f      	ldr	r1, [pc, #380]	; (802277c <ip4_frag+0x284>)
 8022600:	485c      	ldr	r0, [pc, #368]	; (8022774 <ip4_frag+0x27c>)
 8022602:	f002 fbdd 	bl	8024dc0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8022606:	8bfa      	ldrh	r2, [r7, #30]
 8022608:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802260c:	4293      	cmp	r3, r2
 802260e:	bf28      	it	cs
 8022610:	4613      	movcs	r3, r2
 8022612:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8022616:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802261a:	2b00      	cmp	r3, #0
 802261c:	d105      	bne.n	802262a <ip4_frag+0x132>
        poff = 0;
 802261e:	2300      	movs	r3, #0
 8022620:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8022622:	68fb      	ldr	r3, [r7, #12]
 8022624:	681b      	ldr	r3, [r3, #0]
 8022626:	60fb      	str	r3, [r7, #12]
        continue;
 8022628:	e041      	b.n	80226ae <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 802262a:	f7ff ff0d 	bl	8022448 <ip_frag_alloc_pbuf_custom_ref>
 802262e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8022630:	69bb      	ldr	r3, [r7, #24]
 8022632:	2b00      	cmp	r3, #0
 8022634:	d103      	bne.n	802263e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8022636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022638:	f7f5 ffc0 	bl	80185bc <pbuf_free>
        goto memerr;
 802263c:	e08f      	b.n	802275e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802263e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8022640:	68fb      	ldr	r3, [r7, #12]
 8022642:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8022644:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8022646:	4413      	add	r3, r2
 8022648:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 802264c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8022650:	9201      	str	r2, [sp, #4]
 8022652:	9300      	str	r3, [sp, #0]
 8022654:	4603      	mov	r3, r0
 8022656:	2241      	movs	r2, #65	; 0x41
 8022658:	2000      	movs	r0, #0
 802265a:	f7f5 fdf5 	bl	8018248 <pbuf_alloced_custom>
 802265e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8022660:	697b      	ldr	r3, [r7, #20]
 8022662:	2b00      	cmp	r3, #0
 8022664:	d106      	bne.n	8022674 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8022666:	69b8      	ldr	r0, [r7, #24]
 8022668:	f7ff fef6 	bl	8022458 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 802266c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802266e:	f7f5 ffa5 	bl	80185bc <pbuf_free>
        goto memerr;
 8022672:	e074      	b.n	802275e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8022674:	68f8      	ldr	r0, [r7, #12]
 8022676:	f7f6 f847 	bl	8018708 <pbuf_ref>
      pcr->original = p;
 802267a:	69bb      	ldr	r3, [r7, #24]
 802267c:	68fa      	ldr	r2, [r7, #12]
 802267e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8022680:	69bb      	ldr	r3, [r7, #24]
 8022682:	4a3f      	ldr	r2, [pc, #252]	; (8022780 <ip4_frag+0x288>)
 8022684:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8022686:	6979      	ldr	r1, [r7, #20]
 8022688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802268a:	f7f6 f865 	bl	8018758 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802268e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8022692:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8022696:	1ad3      	subs	r3, r2, r3
 8022698:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 802269c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80226a0:	2b00      	cmp	r3, #0
 80226a2:	d004      	beq.n	80226ae <ip4_frag+0x1b6>
        poff = 0;
 80226a4:	2300      	movs	r3, #0
 80226a6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80226a8:	68fb      	ldr	r3, [r7, #12]
 80226aa:	681b      	ldr	r3, [r3, #0]
 80226ac:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80226ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80226b2:	2b00      	cmp	r3, #0
 80226b4:	d196      	bne.n	80225e4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80226b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80226b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80226bc:	4413      	add	r3, r2
 80226be:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80226c0:	68bb      	ldr	r3, [r7, #8]
 80226c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80226c4:	f1a3 0213 	sub.w	r2, r3, #19
 80226c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80226cc:	429a      	cmp	r2, r3
 80226ce:	bfcc      	ite	gt
 80226d0:	2301      	movgt	r3, #1
 80226d2:	2300      	movle	r3, #0
 80226d4:	b2db      	uxtb	r3, r3
 80226d6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80226d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80226dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80226e0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80226e2:	6a3b      	ldr	r3, [r7, #32]
 80226e4:	2b00      	cmp	r3, #0
 80226e6:	d002      	beq.n	80226ee <ip4_frag+0x1f6>
 80226e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80226ea:	2b00      	cmp	r3, #0
 80226ec:	d003      	beq.n	80226f6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80226ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80226f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80226f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80226f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80226f8:	4618      	mov	r0, r3
 80226fa:	f7f4 f8a3 	bl	8016844 <lwip_htons>
 80226fe:	4603      	mov	r3, r0
 8022700:	461a      	mov	r2, r3
 8022702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022704:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8022706:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8022708:	3314      	adds	r3, #20
 802270a:	b29b      	uxth	r3, r3
 802270c:	4618      	mov	r0, r3
 802270e:	f7f4 f899 	bl	8016844 <lwip_htons>
 8022712:	4603      	mov	r3, r0
 8022714:	461a      	mov	r2, r3
 8022716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022718:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 802271a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802271c:	2200      	movs	r2, #0
 802271e:	729a      	strb	r2, [r3, #10]
 8022720:	2200      	movs	r2, #0
 8022722:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8022724:	68bb      	ldr	r3, [r7, #8]
 8022726:	695b      	ldr	r3, [r3, #20]
 8022728:	687a      	ldr	r2, [r7, #4]
 802272a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802272c:	68b8      	ldr	r0, [r7, #8]
 802272e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8022730:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022732:	f7f5 ff43 	bl	80185bc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8022736:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802273a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802273c:	1ad3      	subs	r3, r2, r3
 802273e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8022742:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8022746:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8022748:	4413      	add	r3, r2
 802274a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 802274e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8022752:	2b00      	cmp	r3, #0
 8022754:	f47f af19 	bne.w	802258a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8022758:	2300      	movs	r3, #0
 802275a:	e002      	b.n	8022762 <ip4_frag+0x26a>
      goto memerr;
 802275c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802275e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8022762:	4618      	mov	r0, r3
 8022764:	3748      	adds	r7, #72	; 0x48
 8022766:	46bd      	mov	sp, r7
 8022768:	bd80      	pop	{r7, pc}
 802276a:	bf00      	nop
 802276c:	0802d954 	.word	0x0802d954
 8022770:	0802db30 	.word	0x0802db30
 8022774:	0802d99c 	.word	0x0802d99c
 8022778:	0802db4c 	.word	0x0802db4c
 802277c:	0802db6c 	.word	0x0802db6c
 8022780:	08022491 	.word	0x08022491

08022784 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8022784:	b580      	push	{r7, lr}
 8022786:	b086      	sub	sp, #24
 8022788:	af00      	add	r7, sp, #0
 802278a:	6078      	str	r0, [r7, #4]
 802278c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802278e:	230e      	movs	r3, #14
 8022790:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8022792:	687b      	ldr	r3, [r7, #4]
 8022794:	895b      	ldrh	r3, [r3, #10]
 8022796:	2b0e      	cmp	r3, #14
 8022798:	d96e      	bls.n	8022878 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802279a:	687b      	ldr	r3, [r7, #4]
 802279c:	7bdb      	ldrb	r3, [r3, #15]
 802279e:	2b00      	cmp	r3, #0
 80227a0:	d106      	bne.n	80227b0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80227a2:	683b      	ldr	r3, [r7, #0]
 80227a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80227a8:	3301      	adds	r3, #1
 80227aa:	b2da      	uxtb	r2, r3
 80227ac:	687b      	ldr	r3, [r7, #4]
 80227ae:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80227b0:	687b      	ldr	r3, [r7, #4]
 80227b2:	685b      	ldr	r3, [r3, #4]
 80227b4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80227b6:	693b      	ldr	r3, [r7, #16]
 80227b8:	7b1a      	ldrb	r2, [r3, #12]
 80227ba:	7b5b      	ldrb	r3, [r3, #13]
 80227bc:	021b      	lsls	r3, r3, #8
 80227be:	4313      	orrs	r3, r2
 80227c0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80227c2:	693b      	ldr	r3, [r7, #16]
 80227c4:	781b      	ldrb	r3, [r3, #0]
 80227c6:	f003 0301 	and.w	r3, r3, #1
 80227ca:	2b00      	cmp	r3, #0
 80227cc:	d023      	beq.n	8022816 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80227ce:	693b      	ldr	r3, [r7, #16]
 80227d0:	781b      	ldrb	r3, [r3, #0]
 80227d2:	2b01      	cmp	r3, #1
 80227d4:	d10f      	bne.n	80227f6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80227d6:	693b      	ldr	r3, [r7, #16]
 80227d8:	785b      	ldrb	r3, [r3, #1]
 80227da:	2b00      	cmp	r3, #0
 80227dc:	d11b      	bne.n	8022816 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80227de:	693b      	ldr	r3, [r7, #16]
 80227e0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80227e2:	2b5e      	cmp	r3, #94	; 0x5e
 80227e4:	d117      	bne.n	8022816 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80227e6:	687b      	ldr	r3, [r7, #4]
 80227e8:	7b5b      	ldrb	r3, [r3, #13]
 80227ea:	f043 0310 	orr.w	r3, r3, #16
 80227ee:	b2da      	uxtb	r2, r3
 80227f0:	687b      	ldr	r3, [r7, #4]
 80227f2:	735a      	strb	r2, [r3, #13]
 80227f4:	e00f      	b.n	8022816 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80227f6:	693b      	ldr	r3, [r7, #16]
 80227f8:	2206      	movs	r2, #6
 80227fa:	4928      	ldr	r1, [pc, #160]	; (802289c <ethernet_input+0x118>)
 80227fc:	4618      	mov	r0, r3
 80227fe:	f002 fc7b 	bl	80250f8 <memcmp>
 8022802:	4603      	mov	r3, r0
 8022804:	2b00      	cmp	r3, #0
 8022806:	d106      	bne.n	8022816 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8022808:	687b      	ldr	r3, [r7, #4]
 802280a:	7b5b      	ldrb	r3, [r3, #13]
 802280c:	f043 0308 	orr.w	r3, r3, #8
 8022810:	b2da      	uxtb	r2, r3
 8022812:	687b      	ldr	r3, [r7, #4]
 8022814:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8022816:	89fb      	ldrh	r3, [r7, #14]
 8022818:	2b08      	cmp	r3, #8
 802281a:	d003      	beq.n	8022824 <ethernet_input+0xa0>
 802281c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8022820:	d014      	beq.n	802284c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8022822:	e032      	b.n	802288a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022824:	683b      	ldr	r3, [r7, #0]
 8022826:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802282a:	f003 0308 	and.w	r3, r3, #8
 802282e:	2b00      	cmp	r3, #0
 8022830:	d024      	beq.n	802287c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022832:	8afb      	ldrh	r3, [r7, #22]
 8022834:	4619      	mov	r1, r3
 8022836:	6878      	ldr	r0, [r7, #4]
 8022838:	f7f5 fe3a 	bl	80184b0 <pbuf_remove_header>
 802283c:	4603      	mov	r3, r0
 802283e:	2b00      	cmp	r3, #0
 8022840:	d11e      	bne.n	8022880 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8022842:	6839      	ldr	r1, [r7, #0]
 8022844:	6878      	ldr	r0, [r7, #4]
 8022846:	f7fe fd67 	bl	8021318 <ip4_input>
      break;
 802284a:	e013      	b.n	8022874 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 802284c:	683b      	ldr	r3, [r7, #0]
 802284e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022852:	f003 0308 	and.w	r3, r3, #8
 8022856:	2b00      	cmp	r3, #0
 8022858:	d014      	beq.n	8022884 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802285a:	8afb      	ldrh	r3, [r7, #22]
 802285c:	4619      	mov	r1, r3
 802285e:	6878      	ldr	r0, [r7, #4]
 8022860:	f7f5 fe26 	bl	80184b0 <pbuf_remove_header>
 8022864:	4603      	mov	r3, r0
 8022866:	2b00      	cmp	r3, #0
 8022868:	d10e      	bne.n	8022888 <ethernet_input+0x104>
        etharp_input(p, netif);
 802286a:	6839      	ldr	r1, [r7, #0]
 802286c:	6878      	ldr	r0, [r7, #4]
 802286e:	f7fd ff07 	bl	8020680 <etharp_input>
      break;
 8022872:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022874:	2300      	movs	r3, #0
 8022876:	e00c      	b.n	8022892 <ethernet_input+0x10e>
    goto free_and_return;
 8022878:	bf00      	nop
 802287a:	e006      	b.n	802288a <ethernet_input+0x106>
        goto free_and_return;
 802287c:	bf00      	nop
 802287e:	e004      	b.n	802288a <ethernet_input+0x106>
        goto free_and_return;
 8022880:	bf00      	nop
 8022882:	e002      	b.n	802288a <ethernet_input+0x106>
        goto free_and_return;
 8022884:	bf00      	nop
 8022886:	e000      	b.n	802288a <ethernet_input+0x106>
        goto free_and_return;
 8022888:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802288a:	6878      	ldr	r0, [r7, #4]
 802288c:	f7f5 fe96 	bl	80185bc <pbuf_free>
  return ERR_OK;
 8022890:	2300      	movs	r3, #0
}
 8022892:	4618      	mov	r0, r3
 8022894:	3718      	adds	r7, #24
 8022896:	46bd      	mov	sp, r7
 8022898:	bd80      	pop	{r7, pc}
 802289a:	bf00      	nop
 802289c:	0802df38 	.word	0x0802df38

080228a0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80228a0:	b580      	push	{r7, lr}
 80228a2:	b086      	sub	sp, #24
 80228a4:	af00      	add	r7, sp, #0
 80228a6:	60f8      	str	r0, [r7, #12]
 80228a8:	60b9      	str	r1, [r7, #8]
 80228aa:	607a      	str	r2, [r7, #4]
 80228ac:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80228ae:	8c3b      	ldrh	r3, [r7, #32]
 80228b0:	4618      	mov	r0, r3
 80228b2:	f7f3 ffc7 	bl	8016844 <lwip_htons>
 80228b6:	4603      	mov	r3, r0
 80228b8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 80228ba:	210e      	movs	r1, #14
 80228bc:	68b8      	ldr	r0, [r7, #8]
 80228be:	f7f5 fde7 	bl	8018490 <pbuf_add_header>
 80228c2:	4603      	mov	r3, r0
 80228c4:	2b00      	cmp	r3, #0
 80228c6:	d125      	bne.n	8022914 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80228c8:	68bb      	ldr	r3, [r7, #8]
 80228ca:	685b      	ldr	r3, [r3, #4]
 80228cc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80228ce:	693b      	ldr	r3, [r7, #16]
 80228d0:	8afa      	ldrh	r2, [r7, #22]
 80228d2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80228d4:	693b      	ldr	r3, [r7, #16]
 80228d6:	2206      	movs	r2, #6
 80228d8:	6839      	ldr	r1, [r7, #0]
 80228da:	4618      	mov	r0, r3
 80228dc:	f003 ff2f 	bl	802673e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80228e0:	693b      	ldr	r3, [r7, #16]
 80228e2:	3306      	adds	r3, #6
 80228e4:	2206      	movs	r2, #6
 80228e6:	6879      	ldr	r1, [r7, #4]
 80228e8:	4618      	mov	r0, r3
 80228ea:	f003 ff28 	bl	802673e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80228ee:	68fb      	ldr	r3, [r7, #12]
 80228f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80228f4:	2b06      	cmp	r3, #6
 80228f6:	d006      	beq.n	8022906 <ethernet_output+0x66>
 80228f8:	4b0a      	ldr	r3, [pc, #40]	; (8022924 <ethernet_output+0x84>)
 80228fa:	f44f 7299 	mov.w	r2, #306	; 0x132
 80228fe:	490a      	ldr	r1, [pc, #40]	; (8022928 <ethernet_output+0x88>)
 8022900:	480a      	ldr	r0, [pc, #40]	; (802292c <ethernet_output+0x8c>)
 8022902:	f002 fa5d 	bl	8024dc0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8022906:	68fb      	ldr	r3, [r7, #12]
 8022908:	699b      	ldr	r3, [r3, #24]
 802290a:	68b9      	ldr	r1, [r7, #8]
 802290c:	68f8      	ldr	r0, [r7, #12]
 802290e:	4798      	blx	r3
 8022910:	4603      	mov	r3, r0
 8022912:	e002      	b.n	802291a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022914:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8022916:	f06f 0301 	mvn.w	r3, #1
}
 802291a:	4618      	mov	r0, r3
 802291c:	3718      	adds	r7, #24
 802291e:	46bd      	mov	sp, r7
 8022920:	bd80      	pop	{r7, pc}
 8022922:	bf00      	nop
 8022924:	0802db7c 	.word	0x0802db7c
 8022928:	0802dbb4 	.word	0x0802dbb4
 802292c:	0802dbe8 	.word	0x0802dbe8

08022930 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8022930:	b580      	push	{r7, lr}
 8022932:	b086      	sub	sp, #24
 8022934:	af00      	add	r7, sp, #0
 8022936:	6078      	str	r0, [r7, #4]
 8022938:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 802293a:	683b      	ldr	r3, [r7, #0]
 802293c:	60bb      	str	r3, [r7, #8]
 802293e:	2304      	movs	r3, #4
 8022940:	60fb      	str	r3, [r7, #12]
 8022942:	2300      	movs	r3, #0
 8022944:	613b      	str	r3, [r7, #16]
 8022946:	2300      	movs	r3, #0
 8022948:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 802294a:	f107 0308 	add.w	r3, r7, #8
 802294e:	2100      	movs	r1, #0
 8022950:	4618      	mov	r0, r3
 8022952:	f7e7 fd80 	bl	800a456 <osMessageCreate>
 8022956:	4602      	mov	r2, r0
 8022958:	687b      	ldr	r3, [r7, #4]
 802295a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 802295c:	687b      	ldr	r3, [r7, #4]
 802295e:	681b      	ldr	r3, [r3, #0]
 8022960:	2b00      	cmp	r3, #0
 8022962:	d102      	bne.n	802296a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8022964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022968:	e000      	b.n	802296c <sys_mbox_new+0x3c>

  return ERR_OK;
 802296a:	2300      	movs	r3, #0
}
 802296c:	4618      	mov	r0, r3
 802296e:	3718      	adds	r7, #24
 8022970:	46bd      	mov	sp, r7
 8022972:	bd80      	pop	{r7, pc}

08022974 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8022974:	b580      	push	{r7, lr}
 8022976:	b082      	sub	sp, #8
 8022978:	af00      	add	r7, sp, #0
 802297a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 802297c:	687b      	ldr	r3, [r7, #4]
 802297e:	681b      	ldr	r3, [r3, #0]
 8022980:	4618      	mov	r0, r3
 8022982:	f7e7 fe45 	bl	800a610 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8022986:	687b      	ldr	r3, [r7, #4]
 8022988:	681b      	ldr	r3, [r3, #0]
 802298a:	4618      	mov	r0, r3
 802298c:	f7e7 fe56 	bl	800a63c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8022990:	bf00      	nop
 8022992:	3708      	adds	r7, #8
 8022994:	46bd      	mov	sp, r7
 8022996:	bd80      	pop	{r7, pc}

08022998 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022998:	b580      	push	{r7, lr}
 802299a:	b084      	sub	sp, #16
 802299c:	af00      	add	r7, sp, #0
 802299e:	6078      	str	r0, [r7, #4]
 80229a0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80229a2:	687b      	ldr	r3, [r7, #4]
 80229a4:	681b      	ldr	r3, [r3, #0]
 80229a6:	6839      	ldr	r1, [r7, #0]
 80229a8:	2200      	movs	r2, #0
 80229aa:	4618      	mov	r0, r3
 80229ac:	f7e7 fd7c 	bl	800a4a8 <osMessagePut>
 80229b0:	4603      	mov	r3, r0
 80229b2:	2b00      	cmp	r3, #0
 80229b4:	d102      	bne.n	80229bc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80229b6:	2300      	movs	r3, #0
 80229b8:	73fb      	strb	r3, [r7, #15]
 80229ba:	e001      	b.n	80229c0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80229bc:	23ff      	movs	r3, #255	; 0xff
 80229be:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80229c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80229c4:	4618      	mov	r0, r3
 80229c6:	3710      	adds	r7, #16
 80229c8:	46bd      	mov	sp, r7
 80229ca:	bd80      	pop	{r7, pc}

080229cc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80229cc:	b580      	push	{r7, lr}
 80229ce:	b08c      	sub	sp, #48	; 0x30
 80229d0:	af00      	add	r7, sp, #0
 80229d2:	61f8      	str	r0, [r7, #28]
 80229d4:	61b9      	str	r1, [r7, #24]
 80229d6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80229d8:	f7e7 fb68 	bl	800a0ac <osKernelSysTick>
 80229dc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80229de:	697b      	ldr	r3, [r7, #20]
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	d017      	beq.n	8022a14 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80229e4:	69fb      	ldr	r3, [r7, #28]
 80229e6:	6819      	ldr	r1, [r3, #0]
 80229e8:	f107 0320 	add.w	r3, r7, #32
 80229ec:	697a      	ldr	r2, [r7, #20]
 80229ee:	4618      	mov	r0, r3
 80229f0:	f7e7 fd9a 	bl	800a528 <osMessageGet>

    if(event.status == osEventMessage)
 80229f4:	6a3b      	ldr	r3, [r7, #32]
 80229f6:	2b10      	cmp	r3, #16
 80229f8:	d109      	bne.n	8022a0e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80229fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229fc:	461a      	mov	r2, r3
 80229fe:	69bb      	ldr	r3, [r7, #24]
 8022a00:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8022a02:	f7e7 fb53 	bl	800a0ac <osKernelSysTick>
 8022a06:	4602      	mov	r2, r0
 8022a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a0a:	1ad3      	subs	r3, r2, r3
 8022a0c:	e019      	b.n	8022a42 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022a12:	e016      	b.n	8022a42 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8022a14:	69fb      	ldr	r3, [r7, #28]
 8022a16:	6819      	ldr	r1, [r3, #0]
 8022a18:	463b      	mov	r3, r7
 8022a1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022a1e:	4618      	mov	r0, r3
 8022a20:	f7e7 fd82 	bl	800a528 <osMessageGet>
 8022a24:	f107 0320 	add.w	r3, r7, #32
 8022a28:	463a      	mov	r2, r7
 8022a2a:	ca07      	ldmia	r2, {r0, r1, r2}
 8022a2c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8022a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a32:	461a      	mov	r2, r3
 8022a34:	69bb      	ldr	r3, [r7, #24]
 8022a36:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8022a38:	f7e7 fb38 	bl	800a0ac <osKernelSysTick>
 8022a3c:	4602      	mov	r2, r0
 8022a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022a40:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8022a42:	4618      	mov	r0, r3
 8022a44:	3730      	adds	r7, #48	; 0x30
 8022a46:	46bd      	mov	sp, r7
 8022a48:	bd80      	pop	{r7, pc}

08022a4a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8022a4a:	b580      	push	{r7, lr}
 8022a4c:	b086      	sub	sp, #24
 8022a4e:	af00      	add	r7, sp, #0
 8022a50:	6078      	str	r0, [r7, #4]
 8022a52:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8022a54:	687b      	ldr	r3, [r7, #4]
 8022a56:	6819      	ldr	r1, [r3, #0]
 8022a58:	f107 030c 	add.w	r3, r7, #12
 8022a5c:	2200      	movs	r2, #0
 8022a5e:	4618      	mov	r0, r3
 8022a60:	f7e7 fd62 	bl	800a528 <osMessageGet>

  if(event.status == osEventMessage)
 8022a64:	68fb      	ldr	r3, [r7, #12]
 8022a66:	2b10      	cmp	r3, #16
 8022a68:	d105      	bne.n	8022a76 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8022a6a:	693b      	ldr	r3, [r7, #16]
 8022a6c:	461a      	mov	r2, r3
 8022a6e:	683b      	ldr	r3, [r7, #0]
 8022a70:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8022a72:	2300      	movs	r3, #0
 8022a74:	e001      	b.n	8022a7a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8022a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8022a7a:	4618      	mov	r0, r3
 8022a7c:	3718      	adds	r7, #24
 8022a7e:	46bd      	mov	sp, r7
 8022a80:	bd80      	pop	{r7, pc}

08022a82 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8022a82:	b480      	push	{r7}
 8022a84:	b083      	sub	sp, #12
 8022a86:	af00      	add	r7, sp, #0
 8022a88:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8022a8a:	687b      	ldr	r3, [r7, #4]
 8022a8c:	681b      	ldr	r3, [r3, #0]
 8022a8e:	2b00      	cmp	r3, #0
 8022a90:	d101      	bne.n	8022a96 <sys_mbox_valid+0x14>
    return 0;
 8022a92:	2300      	movs	r3, #0
 8022a94:	e000      	b.n	8022a98 <sys_mbox_valid+0x16>
  else
    return 1;
 8022a96:	2301      	movs	r3, #1
}
 8022a98:	4618      	mov	r0, r3
 8022a9a:	370c      	adds	r7, #12
 8022a9c:	46bd      	mov	sp, r7
 8022a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022aa2:	4770      	bx	lr

08022aa4 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8022aa4:	b480      	push	{r7}
 8022aa6:	b083      	sub	sp, #12
 8022aa8:	af00      	add	r7, sp, #0
 8022aaa:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8022aac:	687b      	ldr	r3, [r7, #4]
 8022aae:	2200      	movs	r2, #0
 8022ab0:	601a      	str	r2, [r3, #0]
}
 8022ab2:	bf00      	nop
 8022ab4:	370c      	adds	r7, #12
 8022ab6:	46bd      	mov	sp, r7
 8022ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022abc:	4770      	bx	lr

08022abe <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8022abe:	b580      	push	{r7, lr}
 8022ac0:	b084      	sub	sp, #16
 8022ac2:	af00      	add	r7, sp, #0
 8022ac4:	6078      	str	r0, [r7, #4]
 8022ac6:	460b      	mov	r3, r1
 8022ac8:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8022aca:	2300      	movs	r3, #0
 8022acc:	60bb      	str	r3, [r7, #8]
 8022ace:	2300      	movs	r3, #0
 8022ad0:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8022ad2:	f107 0308 	add.w	r3, r7, #8
 8022ad6:	2101      	movs	r1, #1
 8022ad8:	4618      	mov	r0, r3
 8022ada:	f7e7 fbf3 	bl	800a2c4 <osSemaphoreCreate>
 8022ade:	4602      	mov	r2, r0
 8022ae0:	687b      	ldr	r3, [r7, #4]
 8022ae2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8022ae4:	687b      	ldr	r3, [r7, #4]
 8022ae6:	681b      	ldr	r3, [r3, #0]
 8022ae8:	2b00      	cmp	r3, #0
 8022aea:	d102      	bne.n	8022af2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8022aec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022af0:	e009      	b.n	8022b06 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8022af2:	78fb      	ldrb	r3, [r7, #3]
 8022af4:	2b00      	cmp	r3, #0
 8022af6:	d105      	bne.n	8022b04 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8022af8:	687b      	ldr	r3, [r7, #4]
 8022afa:	681b      	ldr	r3, [r3, #0]
 8022afc:	2100      	movs	r1, #0
 8022afe:	4618      	mov	r0, r3
 8022b00:	f7e7 fc12 	bl	800a328 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8022b04:	2300      	movs	r3, #0
}
 8022b06:	4618      	mov	r0, r3
 8022b08:	3710      	adds	r7, #16
 8022b0a:	46bd      	mov	sp, r7
 8022b0c:	bd80      	pop	{r7, pc}

08022b0e <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8022b0e:	b580      	push	{r7, lr}
 8022b10:	b084      	sub	sp, #16
 8022b12:	af00      	add	r7, sp, #0
 8022b14:	6078      	str	r0, [r7, #4]
 8022b16:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8022b18:	f7e7 fac8 	bl	800a0ac <osKernelSysTick>
 8022b1c:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8022b1e:	683b      	ldr	r3, [r7, #0]
 8022b20:	2b00      	cmp	r3, #0
 8022b22:	d011      	beq.n	8022b48 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8022b24:	687b      	ldr	r3, [r7, #4]
 8022b26:	681b      	ldr	r3, [r3, #0]
 8022b28:	6839      	ldr	r1, [r7, #0]
 8022b2a:	4618      	mov	r0, r3
 8022b2c:	f7e7 fbfc 	bl	800a328 <osSemaphoreWait>
 8022b30:	4603      	mov	r3, r0
 8022b32:	2b00      	cmp	r3, #0
 8022b34:	d105      	bne.n	8022b42 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8022b36:	f7e7 fab9 	bl	800a0ac <osKernelSysTick>
 8022b3a:	4602      	mov	r2, r0
 8022b3c:	68fb      	ldr	r3, [r7, #12]
 8022b3e:	1ad3      	subs	r3, r2, r3
 8022b40:	e012      	b.n	8022b68 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022b46:	e00f      	b.n	8022b68 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8022b48:	bf00      	nop
 8022b4a:	687b      	ldr	r3, [r7, #4]
 8022b4c:	681b      	ldr	r3, [r3, #0]
 8022b4e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022b52:	4618      	mov	r0, r3
 8022b54:	f7e7 fbe8 	bl	800a328 <osSemaphoreWait>
 8022b58:	4603      	mov	r3, r0
 8022b5a:	2b00      	cmp	r3, #0
 8022b5c:	d1f5      	bne.n	8022b4a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8022b5e:	f7e7 faa5 	bl	800a0ac <osKernelSysTick>
 8022b62:	4602      	mov	r2, r0
 8022b64:	68fb      	ldr	r3, [r7, #12]
 8022b66:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8022b68:	4618      	mov	r0, r3
 8022b6a:	3710      	adds	r7, #16
 8022b6c:	46bd      	mov	sp, r7
 8022b6e:	bd80      	pop	{r7, pc}

08022b70 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8022b70:	b580      	push	{r7, lr}
 8022b72:	b082      	sub	sp, #8
 8022b74:	af00      	add	r7, sp, #0
 8022b76:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8022b78:	687b      	ldr	r3, [r7, #4]
 8022b7a:	681b      	ldr	r3, [r3, #0]
 8022b7c:	4618      	mov	r0, r3
 8022b7e:	f7e7 fc21 	bl	800a3c4 <osSemaphoreRelease>
}
 8022b82:	bf00      	nop
 8022b84:	3708      	adds	r7, #8
 8022b86:	46bd      	mov	sp, r7
 8022b88:	bd80      	pop	{r7, pc}

08022b8a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8022b8a:	b580      	push	{r7, lr}
 8022b8c:	b082      	sub	sp, #8
 8022b8e:	af00      	add	r7, sp, #0
 8022b90:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8022b92:	687b      	ldr	r3, [r7, #4]
 8022b94:	681b      	ldr	r3, [r3, #0]
 8022b96:	4618      	mov	r0, r3
 8022b98:	f7e7 fc4a 	bl	800a430 <osSemaphoreDelete>
}
 8022b9c:	bf00      	nop
 8022b9e:	3708      	adds	r7, #8
 8022ba0:	46bd      	mov	sp, r7
 8022ba2:	bd80      	pop	{r7, pc}

08022ba4 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8022ba4:	b480      	push	{r7}
 8022ba6:	b083      	sub	sp, #12
 8022ba8:	af00      	add	r7, sp, #0
 8022baa:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8022bac:	687b      	ldr	r3, [r7, #4]
 8022bae:	681b      	ldr	r3, [r3, #0]
 8022bb0:	2b00      	cmp	r3, #0
 8022bb2:	d101      	bne.n	8022bb8 <sys_sem_valid+0x14>
    return 0;
 8022bb4:	2300      	movs	r3, #0
 8022bb6:	e000      	b.n	8022bba <sys_sem_valid+0x16>
  else
    return 1;
 8022bb8:	2301      	movs	r3, #1
}
 8022bba:	4618      	mov	r0, r3
 8022bbc:	370c      	adds	r7, #12
 8022bbe:	46bd      	mov	sp, r7
 8022bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bc4:	4770      	bx	lr

08022bc6 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8022bc6:	b480      	push	{r7}
 8022bc8:	b083      	sub	sp, #12
 8022bca:	af00      	add	r7, sp, #0
 8022bcc:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8022bce:	687b      	ldr	r3, [r7, #4]
 8022bd0:	2200      	movs	r2, #0
 8022bd2:	601a      	str	r2, [r3, #0]
}
 8022bd4:	bf00      	nop
 8022bd6:	370c      	adds	r7, #12
 8022bd8:	46bd      	mov	sp, r7
 8022bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022bde:	4770      	bx	lr

08022be0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8022be0:	b580      	push	{r7, lr}
 8022be2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8022be4:	4803      	ldr	r0, [pc, #12]	; (8022bf4 <sys_init+0x14>)
 8022be6:	f7e7 fad1 	bl	800a18c <osMutexCreate>
 8022bea:	4603      	mov	r3, r0
 8022bec:	4a02      	ldr	r2, [pc, #8]	; (8022bf8 <sys_init+0x18>)
 8022bee:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8022bf0:	bf00      	nop
 8022bf2:	bd80      	pop	{r7, pc}
 8022bf4:	0802df48 	.word	0x0802df48
 8022bf8:	20016140 	.word	0x20016140

08022bfc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8022bfc:	b580      	push	{r7, lr}
 8022bfe:	b084      	sub	sp, #16
 8022c00:	af00      	add	r7, sp, #0
 8022c02:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8022c04:	2300      	movs	r3, #0
 8022c06:	60bb      	str	r3, [r7, #8]
 8022c08:	2300      	movs	r3, #0
 8022c0a:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8022c0c:	f107 0308 	add.w	r3, r7, #8
 8022c10:	4618      	mov	r0, r3
 8022c12:	f7e7 fabb 	bl	800a18c <osMutexCreate>
 8022c16:	4602      	mov	r2, r0
 8022c18:	687b      	ldr	r3, [r7, #4]
 8022c1a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8022c1c:	687b      	ldr	r3, [r7, #4]
 8022c1e:	681b      	ldr	r3, [r3, #0]
 8022c20:	2b00      	cmp	r3, #0
 8022c22:	d102      	bne.n	8022c2a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8022c24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022c28:	e000      	b.n	8022c2c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8022c2a:	2300      	movs	r3, #0
}
 8022c2c:	4618      	mov	r0, r3
 8022c2e:	3710      	adds	r7, #16
 8022c30:	46bd      	mov	sp, r7
 8022c32:	bd80      	pop	{r7, pc}

08022c34 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8022c34:	b580      	push	{r7, lr}
 8022c36:	b082      	sub	sp, #8
 8022c38:	af00      	add	r7, sp, #0
 8022c3a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8022c3c:	687b      	ldr	r3, [r7, #4]
 8022c3e:	681b      	ldr	r3, [r3, #0]
 8022c40:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022c44:	4618      	mov	r0, r3
 8022c46:	f7e7 fab9 	bl	800a1bc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8022c4a:	bf00      	nop
 8022c4c:	3708      	adds	r7, #8
 8022c4e:	46bd      	mov	sp, r7
 8022c50:	bd80      	pop	{r7, pc}

08022c52 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8022c52:	b580      	push	{r7, lr}
 8022c54:	b082      	sub	sp, #8
 8022c56:	af00      	add	r7, sp, #0
 8022c58:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8022c5a:	687b      	ldr	r3, [r7, #4]
 8022c5c:	681b      	ldr	r3, [r3, #0]
 8022c5e:	4618      	mov	r0, r3
 8022c60:	f7e7 fafa 	bl	800a258 <osMutexRelease>
}
 8022c64:	bf00      	nop
 8022c66:	3708      	adds	r7, #8
 8022c68:	46bd      	mov	sp, r7
 8022c6a:	bd80      	pop	{r7, pc}

08022c6c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8022c6c:	b580      	push	{r7, lr}
 8022c6e:	b08c      	sub	sp, #48	; 0x30
 8022c70:	af00      	add	r7, sp, #0
 8022c72:	60f8      	str	r0, [r7, #12]
 8022c74:	60b9      	str	r1, [r7, #8]
 8022c76:	607a      	str	r2, [r7, #4]
 8022c78:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8022c7a:	f107 0314 	add.w	r3, r7, #20
 8022c7e:	2200      	movs	r2, #0
 8022c80:	601a      	str	r2, [r3, #0]
 8022c82:	605a      	str	r2, [r3, #4]
 8022c84:	609a      	str	r2, [r3, #8]
 8022c86:	60da      	str	r2, [r3, #12]
 8022c88:	611a      	str	r2, [r3, #16]
 8022c8a:	615a      	str	r2, [r3, #20]
 8022c8c:	619a      	str	r2, [r3, #24]
 8022c8e:	68fb      	ldr	r3, [r7, #12]
 8022c90:	617b      	str	r3, [r7, #20]
 8022c92:	68bb      	ldr	r3, [r7, #8]
 8022c94:	61bb      	str	r3, [r7, #24]
 8022c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022c98:	b21b      	sxth	r3, r3
 8022c9a:	83bb      	strh	r3, [r7, #28]
 8022c9c:	683b      	ldr	r3, [r7, #0]
 8022c9e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8022ca0:	f107 0314 	add.w	r3, r7, #20
 8022ca4:	6879      	ldr	r1, [r7, #4]
 8022ca6:	4618      	mov	r0, r3
 8022ca8:	f7e7 fa10 	bl	800a0cc <osThreadCreate>
 8022cac:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8022cae:	4618      	mov	r0, r3
 8022cb0:	3730      	adds	r7, #48	; 0x30
 8022cb2:	46bd      	mov	sp, r7
 8022cb4:	bd80      	pop	{r7, pc}
	...

08022cb8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8022cb8:	b580      	push	{r7, lr}
 8022cba:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8022cbc:	4b04      	ldr	r3, [pc, #16]	; (8022cd0 <sys_arch_protect+0x18>)
 8022cbe:	681b      	ldr	r3, [r3, #0]
 8022cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022cc4:	4618      	mov	r0, r3
 8022cc6:	f7e7 fa79 	bl	800a1bc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8022cca:	2301      	movs	r3, #1
}
 8022ccc:	4618      	mov	r0, r3
 8022cce:	bd80      	pop	{r7, pc}
 8022cd0:	20016140 	.word	0x20016140

08022cd4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8022cd4:	b580      	push	{r7, lr}
 8022cd6:	b082      	sub	sp, #8
 8022cd8:	af00      	add	r7, sp, #0
 8022cda:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8022cdc:	4b04      	ldr	r3, [pc, #16]	; (8022cf0 <sys_arch_unprotect+0x1c>)
 8022cde:	681b      	ldr	r3, [r3, #0]
 8022ce0:	4618      	mov	r0, r3
 8022ce2:	f7e7 fab9 	bl	800a258 <osMutexRelease>
}
 8022ce6:	bf00      	nop
 8022ce8:	3708      	adds	r7, #8
 8022cea:	46bd      	mov	sp, r7
 8022cec:	bd80      	pop	{r7, pc}
 8022cee:	bf00      	nop
 8022cf0:	20016140 	.word	0x20016140

08022cf4 <CalculaCRCByte>:

#include "modbus.h"



uint16_t CalculaCRCByte ( uint16_t crc, uint8_t byte ) {
 8022cf4:	b480      	push	{r7}
 8022cf6:	b085      	sub	sp, #20
 8022cf8:	af00      	add	r7, sp, #0
 8022cfa:	4603      	mov	r3, r0
 8022cfc:	460a      	mov	r2, r1
 8022cfe:	80fb      	strh	r3, [r7, #6]
 8022d00:	4613      	mov	r3, r2
 8022d02:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  crc = crc^byte;
 8022d04:	797b      	ldrb	r3, [r7, #5]
 8022d06:	b29a      	uxth	r2, r3
 8022d08:	88fb      	ldrh	r3, [r7, #6]
 8022d0a:	4053      	eors	r3, r2
 8022d0c:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 8022d0e:	2300      	movs	r3, #0
 8022d10:	73fb      	strb	r3, [r7, #15]
 8022d12:	e011      	b.n	8022d38 <CalculaCRCByte+0x44>
    if ( ( crc & 1 ) == 1 ) crc = ( crc >> 1 ) ^cPOLINOMIO;
 8022d14:	88fb      	ldrh	r3, [r7, #6]
 8022d16:	f003 0301 	and.w	r3, r3, #1
 8022d1a:	2b00      	cmp	r3, #0
 8022d1c:	d006      	beq.n	8022d2c <CalculaCRCByte+0x38>
 8022d1e:	88fb      	ldrh	r3, [r7, #6]
 8022d20:	085b      	lsrs	r3, r3, #1
 8022d22:	b29a      	uxth	r2, r3
 8022d24:	4b09      	ldr	r3, [pc, #36]	; (8022d4c <CalculaCRCByte+0x58>)
 8022d26:	4053      	eors	r3, r2
 8022d28:	80fb      	strh	r3, [r7, #6]
 8022d2a:	e002      	b.n	8022d32 <CalculaCRCByte+0x3e>
    else crc = crc >> 1;
 8022d2c:	88fb      	ldrh	r3, [r7, #6]
 8022d2e:	085b      	lsrs	r3, r3, #1
 8022d30:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 8022d32:	7bfb      	ldrb	r3, [r7, #15]
 8022d34:	3301      	adds	r3, #1
 8022d36:	73fb      	strb	r3, [r7, #15]
 8022d38:	7bfb      	ldrb	r3, [r7, #15]
 8022d3a:	2b07      	cmp	r3, #7
 8022d3c:	d9ea      	bls.n	8022d14 <CalculaCRCByte+0x20>
  }
  return crc;
 8022d3e:	88fb      	ldrh	r3, [r7, #6]
}
 8022d40:	4618      	mov	r0, r3
 8022d42:	3714      	adds	r7, #20
 8022d44:	46bd      	mov	sp, r7
 8022d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d4a:	4770      	bx	lr
 8022d4c:	ffffa001 	.word	0xffffa001

08022d50 <CalculaCRCStream>:


uint16_t CalculaCRCStream ( uint8_t *str, uint16_t tam ) {
 8022d50:	b580      	push	{r7, lr}
 8022d52:	b084      	sub	sp, #16
 8022d54:	af00      	add	r7, sp, #0
 8022d56:	6078      	str	r0, [r7, #4]
 8022d58:	460b      	mov	r3, r1
 8022d5a:	807b      	strh	r3, [r7, #2]
  uint16_t i,crc;
  crc = 0xFFFF;
 8022d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8022d60:	81bb      	strh	r3, [r7, #12]
  for( i = 0; i < tam; i++, str++ ) crc = CalculaCRCByte ( crc, *str );
 8022d62:	2300      	movs	r3, #0
 8022d64:	81fb      	strh	r3, [r7, #14]
 8022d66:	e00e      	b.n	8022d86 <CalculaCRCStream+0x36>
 8022d68:	687b      	ldr	r3, [r7, #4]
 8022d6a:	781a      	ldrb	r2, [r3, #0]
 8022d6c:	89bb      	ldrh	r3, [r7, #12]
 8022d6e:	4611      	mov	r1, r2
 8022d70:	4618      	mov	r0, r3
 8022d72:	f7ff ffbf 	bl	8022cf4 <CalculaCRCByte>
 8022d76:	4603      	mov	r3, r0
 8022d78:	81bb      	strh	r3, [r7, #12]
 8022d7a:	89fb      	ldrh	r3, [r7, #14]
 8022d7c:	3301      	adds	r3, #1
 8022d7e:	81fb      	strh	r3, [r7, #14]
 8022d80:	687b      	ldr	r3, [r7, #4]
 8022d82:	3301      	adds	r3, #1
 8022d84:	607b      	str	r3, [r7, #4]
 8022d86:	89fa      	ldrh	r2, [r7, #14]
 8022d88:	887b      	ldrh	r3, [r7, #2]
 8022d8a:	429a      	cmp	r2, r3
 8022d8c:	d3ec      	bcc.n	8022d68 <CalculaCRCStream+0x18>
  return crc;
 8022d8e:	89bb      	ldrh	r3, [r7, #12]
}
 8022d90:	4618      	mov	r0, r3
 8022d92:	3710      	adds	r7, #16
 8022d94:	46bd      	mov	sp, r7
 8022d96:	bd80      	pop	{r7, pc}

08022d98 <ReadCoilRegister>:


uint8_t ReadCoilRegister ( uint8_t *buffer, uint8_t *ptr ) {
 8022d98:	b580      	push	{r7, lr}
 8022d9a:	b084      	sub	sp, #16
 8022d9c:	af00      	add	r7, sp, #0
 8022d9e:	6078      	str	r0, [r7, #4]
 8022da0:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 8022da2:	687b      	ldr	r3, [r7, #4]
 8022da4:	3305      	adds	r3, #5
 8022da6:	781b      	ldrb	r3, [r3, #0]
 8022da8:	005b      	lsls	r3, r3, #1
 8022daa:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 8022dac:	687b      	ldr	r3, [r7, #4]
 8022dae:	3302      	adds	r3, #2
 8022db0:	7bba      	ldrb	r2, [r7, #14]
 8022db2:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8022db4:	2300      	movs	r3, #0
 8022db6:	73fb      	strb	r3, [r7, #15]
 8022db8:	e015      	b.n	8022de6 <ReadCoilRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 8022dba:	7bfb      	ldrb	r3, [r7, #15]
 8022dbc:	3301      	adds	r3, #1
 8022dbe:	683a      	ldr	r2, [r7, #0]
 8022dc0:	441a      	add	r2, r3
 8022dc2:	7bfb      	ldrb	r3, [r7, #15]
 8022dc4:	3303      	adds	r3, #3
 8022dc6:	6879      	ldr	r1, [r7, #4]
 8022dc8:	440b      	add	r3, r1
 8022dca:	7812      	ldrb	r2, [r2, #0]
 8022dcc:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 8022dce:	7bfb      	ldrb	r3, [r7, #15]
 8022dd0:	683a      	ldr	r2, [r7, #0]
 8022dd2:	441a      	add	r2, r3
 8022dd4:	7bfb      	ldrb	r3, [r7, #15]
 8022dd6:	3304      	adds	r3, #4
 8022dd8:	6879      	ldr	r1, [r7, #4]
 8022dda:	440b      	add	r3, r1
 8022ddc:	7812      	ldrb	r2, [r2, #0]
 8022dde:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8022de0:	7bfb      	ldrb	r3, [r7, #15]
 8022de2:	3302      	adds	r3, #2
 8022de4:	73fb      	strb	r3, [r7, #15]
 8022de6:	7bfa      	ldrb	r2, [r7, #15]
 8022de8:	7bbb      	ldrb	r3, [r7, #14]
 8022dea:	429a      	cmp	r2, r3
 8022dec:	d3e5      	bcc.n	8022dba <ReadCoilRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 8022dee:	7bbb      	ldrb	r3, [r7, #14]
 8022df0:	b29b      	uxth	r3, r3
 8022df2:	3303      	adds	r3, #3
 8022df4:	b29b      	uxth	r3, r3
 8022df6:	4619      	mov	r1, r3
 8022df8:	6878      	ldr	r0, [r7, #4]
 8022dfa:	f7ff ffa9 	bl	8022d50 <CalculaCRCStream>
 8022dfe:	4603      	mov	r3, r0
 8022e00:	81bb      	strh	r3, [r7, #12]
	buffer [ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 8022e02:	7bbb      	ldrb	r3, [r7, #14]
 8022e04:	3303      	adds	r3, #3
 8022e06:	687a      	ldr	r2, [r7, #4]
 8022e08:	4413      	add	r3, r2
 8022e0a:	89ba      	ldrh	r2, [r7, #12]
 8022e0c:	b2d2      	uxtb	r2, r2
 8022e0e:	701a      	strb	r2, [r3, #0]
	buffer [ bytecount + 4 ] = ( uint8_t ) ( crc >> 8);
 8022e10:	89bb      	ldrh	r3, [r7, #12]
 8022e12:	0a1b      	lsrs	r3, r3, #8
 8022e14:	b299      	uxth	r1, r3
 8022e16:	7bbb      	ldrb	r3, [r7, #14]
 8022e18:	3304      	adds	r3, #4
 8022e1a:	687a      	ldr	r2, [r7, #4]
 8022e1c:	4413      	add	r3, r2
 8022e1e:	b2ca      	uxtb	r2, r1
 8022e20:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 8022e22:	7bbb      	ldrb	r3, [r7, #14]
 8022e24:	3305      	adds	r3, #5
 8022e26:	b2db      	uxtb	r3, r3
}
 8022e28:	4618      	mov	r0, r3
 8022e2a:	3710      	adds	r7, #16
 8022e2c:	46bd      	mov	sp, r7
 8022e2e:	bd80      	pop	{r7, pc}

08022e30 <ReadInputRegister>:


uint8_t ReadInputRegister ( uint8_t *buffer, uint8_t *ptr ) {
 8022e30:	b580      	push	{r7, lr}
 8022e32:	b084      	sub	sp, #16
 8022e34:	af00      	add	r7, sp, #0
 8022e36:	6078      	str	r0, [r7, #4]
 8022e38:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 8022e3a:	687b      	ldr	r3, [r7, #4]
 8022e3c:	3305      	adds	r3, #5
 8022e3e:	781b      	ldrb	r3, [r3, #0]
 8022e40:	005b      	lsls	r3, r3, #1
 8022e42:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 8022e44:	687b      	ldr	r3, [r7, #4]
 8022e46:	3302      	adds	r3, #2
 8022e48:	7bba      	ldrb	r2, [r7, #14]
 8022e4a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8022e4c:	2300      	movs	r3, #0
 8022e4e:	73fb      	strb	r3, [r7, #15]
 8022e50:	e015      	b.n	8022e7e <ReadInputRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 8022e52:	7bfb      	ldrb	r3, [r7, #15]
 8022e54:	3301      	adds	r3, #1
 8022e56:	683a      	ldr	r2, [r7, #0]
 8022e58:	441a      	add	r2, r3
 8022e5a:	7bfb      	ldrb	r3, [r7, #15]
 8022e5c:	3303      	adds	r3, #3
 8022e5e:	6879      	ldr	r1, [r7, #4]
 8022e60:	440b      	add	r3, r1
 8022e62:	7812      	ldrb	r2, [r2, #0]
 8022e64:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 8022e66:	7bfb      	ldrb	r3, [r7, #15]
 8022e68:	683a      	ldr	r2, [r7, #0]
 8022e6a:	441a      	add	r2, r3
 8022e6c:	7bfb      	ldrb	r3, [r7, #15]
 8022e6e:	3304      	adds	r3, #4
 8022e70:	6879      	ldr	r1, [r7, #4]
 8022e72:	440b      	add	r3, r1
 8022e74:	7812      	ldrb	r2, [r2, #0]
 8022e76:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8022e78:	7bfb      	ldrb	r3, [r7, #15]
 8022e7a:	3302      	adds	r3, #2
 8022e7c:	73fb      	strb	r3, [r7, #15]
 8022e7e:	7bfa      	ldrb	r2, [r7, #15]
 8022e80:	7bbb      	ldrb	r3, [r7, #14]
 8022e82:	429a      	cmp	r2, r3
 8022e84:	d3e5      	bcc.n	8022e52 <ReadInputRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 8022e86:	7bbb      	ldrb	r3, [r7, #14]
 8022e88:	b29b      	uxth	r3, r3
 8022e8a:	3303      	adds	r3, #3
 8022e8c:	b29b      	uxth	r3, r3
 8022e8e:	4619      	mov	r1, r3
 8022e90:	6878      	ldr	r0, [r7, #4]
 8022e92:	f7ff ff5d 	bl	8022d50 <CalculaCRCStream>
 8022e96:	4603      	mov	r3, r0
 8022e98:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 8022e9a:	7bbb      	ldrb	r3, [r7, #14]
 8022e9c:	3303      	adds	r3, #3
 8022e9e:	687a      	ldr	r2, [r7, #4]
 8022ea0:	4413      	add	r3, r2
 8022ea2:	89ba      	ldrh	r2, [r7, #12]
 8022ea4:	b2d2      	uxtb	r2, r2
 8022ea6:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 8022ea8:	89bb      	ldrh	r3, [r7, #12]
 8022eaa:	0a1b      	lsrs	r3, r3, #8
 8022eac:	b299      	uxth	r1, r3
 8022eae:	7bbb      	ldrb	r3, [r7, #14]
 8022eb0:	3304      	adds	r3, #4
 8022eb2:	687a      	ldr	r2, [r7, #4]
 8022eb4:	4413      	add	r3, r2
 8022eb6:	b2ca      	uxtb	r2, r1
 8022eb8:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 8022eba:	7bbb      	ldrb	r3, [r7, #14]
 8022ebc:	3305      	adds	r3, #5
 8022ebe:	b2db      	uxtb	r3, r3
}
 8022ec0:	4618      	mov	r0, r3
 8022ec2:	3710      	adds	r7, #16
 8022ec4:	46bd      	mov	sp, r7
 8022ec6:	bd80      	pop	{r7, pc}

08022ec8 <ReadHoldingRegister>:


uint8_t ReadHoldingRegister ( uint8_t *buffer, uint8_t *ptr ) {
 8022ec8:	b580      	push	{r7, lr}
 8022eca:	b084      	sub	sp, #16
 8022ecc:	af00      	add	r7, sp, #0
 8022ece:	6078      	str	r0, [r7, #4]
 8022ed0:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 8022ed2:	687b      	ldr	r3, [r7, #4]
 8022ed4:	3305      	adds	r3, #5
 8022ed6:	781b      	ldrb	r3, [r3, #0]
 8022ed8:	005b      	lsls	r3, r3, #1
 8022eda:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 8022edc:	687b      	ldr	r3, [r7, #4]
 8022ede:	3302      	adds	r3, #2
 8022ee0:	7bba      	ldrb	r2, [r7, #14]
 8022ee2:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 8022ee4:	2300      	movs	r3, #0
 8022ee6:	73fb      	strb	r3, [r7, #15]
 8022ee8:	e015      	b.n	8022f16 <ReadHoldingRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 8022eea:	7bfb      	ldrb	r3, [r7, #15]
 8022eec:	3301      	adds	r3, #1
 8022eee:	683a      	ldr	r2, [r7, #0]
 8022ef0:	441a      	add	r2, r3
 8022ef2:	7bfb      	ldrb	r3, [r7, #15]
 8022ef4:	3303      	adds	r3, #3
 8022ef6:	6879      	ldr	r1, [r7, #4]
 8022ef8:	440b      	add	r3, r1
 8022efa:	7812      	ldrb	r2, [r2, #0]
 8022efc:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 8022efe:	7bfb      	ldrb	r3, [r7, #15]
 8022f00:	683a      	ldr	r2, [r7, #0]
 8022f02:	441a      	add	r2, r3
 8022f04:	7bfb      	ldrb	r3, [r7, #15]
 8022f06:	3304      	adds	r3, #4
 8022f08:	6879      	ldr	r1, [r7, #4]
 8022f0a:	440b      	add	r3, r1
 8022f0c:	7812      	ldrb	r2, [r2, #0]
 8022f0e:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 8022f10:	7bfb      	ldrb	r3, [r7, #15]
 8022f12:	3302      	adds	r3, #2
 8022f14:	73fb      	strb	r3, [r7, #15]
 8022f16:	7bfa      	ldrb	r2, [r7, #15]
 8022f18:	7bbb      	ldrb	r3, [r7, #14]
 8022f1a:	429a      	cmp	r2, r3
 8022f1c:	d3e5      	bcc.n	8022eea <ReadHoldingRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ]   = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream(buffer, bytecount + 3 );
 8022f1e:	7bbb      	ldrb	r3, [r7, #14]
 8022f20:	b29b      	uxth	r3, r3
 8022f22:	3303      	adds	r3, #3
 8022f24:	b29b      	uxth	r3, r3
 8022f26:	4619      	mov	r1, r3
 8022f28:	6878      	ldr	r0, [r7, #4]
 8022f2a:	f7ff ff11 	bl	8022d50 <CalculaCRCStream>
 8022f2e:	4603      	mov	r3, r0
 8022f30:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 8022f32:	7bbb      	ldrb	r3, [r7, #14]
 8022f34:	3303      	adds	r3, #3
 8022f36:	687a      	ldr	r2, [r7, #4]
 8022f38:	4413      	add	r3, r2
 8022f3a:	89ba      	ldrh	r2, [r7, #12]
 8022f3c:	b2d2      	uxtb	r2, r2
 8022f3e:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 8022f40:	89bb      	ldrh	r3, [r7, #12]
 8022f42:	0a1b      	lsrs	r3, r3, #8
 8022f44:	b299      	uxth	r1, r3
 8022f46:	7bbb      	ldrb	r3, [r7, #14]
 8022f48:	3304      	adds	r3, #4
 8022f4a:	687a      	ldr	r2, [r7, #4]
 8022f4c:	4413      	add	r3, r2
 8022f4e:	b2ca      	uxtb	r2, r1
 8022f50:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 8022f52:	7bbb      	ldrb	r3, [r7, #14]
 8022f54:	3305      	adds	r3, #5
 8022f56:	b2db      	uxtb	r3, r3
}
 8022f58:	4618      	mov	r0, r3
 8022f5a:	3710      	adds	r7, #16
 8022f5c:	46bd      	mov	sp, r7
 8022f5e:	bd80      	pop	{r7, pc}

08022f60 <PresetSingleRegister>:


uint8_t PresetSingleRegister ( uint8_t *buffer, uint8_t *ptr ) {
 8022f60:	b480      	push	{r7}
 8022f62:	b083      	sub	sp, #12
 8022f64:	af00      	add	r7, sp, #0
 8022f66:	6078      	str	r0, [r7, #4]
 8022f68:	6039      	str	r1, [r7, #0]
	#ifdef LITTLE_ENDIAN
	*( ptr ) = buffer [ 5 ];
 8022f6a:	687b      	ldr	r3, [r7, #4]
 8022f6c:	795a      	ldrb	r2, [r3, #5]
 8022f6e:	683b      	ldr	r3, [r7, #0]
 8022f70:	701a      	strb	r2, [r3, #0]
	*( ptr + 1 ) = buffer [ 4 ];
 8022f72:	683b      	ldr	r3, [r7, #0]
 8022f74:	3301      	adds	r3, #1
 8022f76:	687a      	ldr	r2, [r7, #4]
 8022f78:	7912      	ldrb	r2, [r2, #4]
 8022f7a:	701a      	strb	r2, [r3, #0]
	#endif
	#ifdef BIG_ENDIAN
	*( ptr ) = buffer [ 4 ];
	*( ptr + 1 ) = buffer [ 5 ];
	#endif
	return ( 8 );
 8022f7c:	2308      	movs	r3, #8
}
 8022f7e:	4618      	mov	r0, r3
 8022f80:	370c      	adds	r7, #12
 8022f82:	46bd      	mov	sp, r7
 8022f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022f88:	4770      	bx	lr

08022f8a <PresetMultipleRegisters>:

uint8_t PresetMultipleRegisters ( uint8_t *buffer, uint8_t *ptr ) {
 8022f8a:	b580      	push	{r7, lr}
 8022f8c:	b084      	sub	sp, #16
 8022f8e:	af00      	add	r7, sp, #0
 8022f90:	6078      	str	r0, [r7, #4]
 8022f92:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = buffer [ 6 ];
 8022f94:	687b      	ldr	r3, [r7, #4]
 8022f96:	799b      	ldrb	r3, [r3, #6]
 8022f98:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < bytecount; i += 2 ) {
 8022f9a:	2300      	movs	r3, #0
 8022f9c:	73fb      	strb	r3, [r7, #15]
 8022f9e:	e016      	b.n	8022fce <PresetMultipleRegisters+0x44>
		#ifdef LITTLE_ENDIAN
		*( ptr + i ) = buffer [ 7 + i + 1 ];
 8022fa0:	7bfb      	ldrb	r3, [r7, #15]
 8022fa2:	3308      	adds	r3, #8
 8022fa4:	687a      	ldr	r2, [r7, #4]
 8022fa6:	441a      	add	r2, r3
 8022fa8:	7bfb      	ldrb	r3, [r7, #15]
 8022faa:	6839      	ldr	r1, [r7, #0]
 8022fac:	440b      	add	r3, r1
 8022fae:	7812      	ldrb	r2, [r2, #0]
 8022fb0:	701a      	strb	r2, [r3, #0]
		*( ptr + i + 1 ) = buffer [ 7 + i ];
 8022fb2:	7bfb      	ldrb	r3, [r7, #15]
 8022fb4:	3307      	adds	r3, #7
 8022fb6:	461a      	mov	r2, r3
 8022fb8:	687b      	ldr	r3, [r7, #4]
 8022fba:	441a      	add	r2, r3
 8022fbc:	7bfb      	ldrb	r3, [r7, #15]
 8022fbe:	3301      	adds	r3, #1
 8022fc0:	6839      	ldr	r1, [r7, #0]
 8022fc2:	440b      	add	r3, r1
 8022fc4:	7812      	ldrb	r2, [r2, #0]
 8022fc6:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 8022fc8:	7bfb      	ldrb	r3, [r7, #15]
 8022fca:	3302      	adds	r3, #2
 8022fcc:	73fb      	strb	r3, [r7, #15]
 8022fce:	7bfa      	ldrb	r2, [r7, #15]
 8022fd0:	7bbb      	ldrb	r3, [r7, #14]
 8022fd2:	429a      	cmp	r2, r3
 8022fd4:	d3e4      	bcc.n	8022fa0 <PresetMultipleRegisters+0x16>
		#ifdef BIG_ENDIAN
		*( ptr + i ) = buffer [ 7 + i ];
		*( ptr + i + 1 ) = buffer [ 7 + i + 1 ];
		#endif
	}
	crc = CalculaCRCStream ( buffer, 6 );
 8022fd6:	2106      	movs	r1, #6
 8022fd8:	6878      	ldr	r0, [r7, #4]
 8022fda:	f7ff feb9 	bl	8022d50 <CalculaCRCStream>
 8022fde:	4603      	mov	r3, r0
 8022fe0:	81bb      	strh	r3, [r7, #12]
	buffer [ 6 ] = ( uint8_t ) ( crc & 0x00FF );
 8022fe2:	687b      	ldr	r3, [r7, #4]
 8022fe4:	3306      	adds	r3, #6
 8022fe6:	89ba      	ldrh	r2, [r7, #12]
 8022fe8:	b2d2      	uxtb	r2, r2
 8022fea:	701a      	strb	r2, [r3, #0]
	buffer [ 7 ] = ( uint8_t ) ( crc >> 8 );
 8022fec:	89bb      	ldrh	r3, [r7, #12]
 8022fee:	0a1b      	lsrs	r3, r3, #8
 8022ff0:	b29a      	uxth	r2, r3
 8022ff2:	687b      	ldr	r3, [r7, #4]
 8022ff4:	3307      	adds	r3, #7
 8022ff6:	b2d2      	uxtb	r2, r2
 8022ff8:	701a      	strb	r2, [r3, #0]
	return ( 8 );
 8022ffa:	2308      	movs	r3, #8
}
 8022ffc:	4618      	mov	r0, r3
 8022ffe:	3710      	adds	r7, #16
 8023000:	46bd      	mov	sp, r7
 8023002:	bd80      	pop	{r7, pc}

08023004 <InterpreterMODBUS>:


TModbusMap *ModbusMap;

uint16_t InterpreterMODBUS(uint8_t *msg, uint16_t len)
{
 8023004:	b580      	push	{r7, lr}
 8023006:	b086      	sub	sp, #24
 8023008:	af00      	add	r7, sp, #0
 802300a:	6078      	str	r0, [r7, #4]
 802300c:	460b      	mov	r3, r1
 802300e:	807b      	strh	r3, [r7, #2]
	uint8_t *ptr;
	uint16_t crccal, crcrec, address, totalbytes;

	crccal = 0;
 8023010:	2300      	movs	r3, #0
 8023012:	82bb      	strh	r3, [r7, #20]
	crcrec = 0;
 8023014:	2300      	movs	r3, #0
 8023016:	827b      	strh	r3, [r7, #18]
	address = (msg[2] << 8) | msg[3];
 8023018:	687b      	ldr	r3, [r7, #4]
 802301a:	3302      	adds	r3, #2
 802301c:	781b      	ldrb	r3, [r3, #0]
 802301e:	021b      	lsls	r3, r3, #8
 8023020:	b21a      	sxth	r2, r3
 8023022:	687b      	ldr	r3, [r7, #4]
 8023024:	3303      	adds	r3, #3
 8023026:	781b      	ldrb	r3, [r3, #0]
 8023028:	b21b      	sxth	r3, r3
 802302a:	4313      	orrs	r3, r2
 802302c:	b21b      	sxth	r3, r3
 802302e:	823b      	strh	r3, [r7, #16]
	//bytecount = msg[6];
	crccal = CalculaCRCStream(msg, len - 2);
 8023030:	887b      	ldrh	r3, [r7, #2]
 8023032:	3b02      	subs	r3, #2
 8023034:	b29b      	uxth	r3, r3
 8023036:	4619      	mov	r1, r3
 8023038:	6878      	ldr	r0, [r7, #4]
 802303a:	f7ff fe89 	bl	8022d50 <CalculaCRCStream>
 802303e:	4603      	mov	r3, r0
 8023040:	82bb      	strh	r3, [r7, #20]
	crcrec = (msg[len - 1] << 8) | msg[len - 2];
 8023042:	887b      	ldrh	r3, [r7, #2]
 8023044:	3b01      	subs	r3, #1
 8023046:	687a      	ldr	r2, [r7, #4]
 8023048:	4413      	add	r3, r2
 802304a:	781b      	ldrb	r3, [r3, #0]
 802304c:	021b      	lsls	r3, r3, #8
 802304e:	b21a      	sxth	r2, r3
 8023050:	887b      	ldrh	r3, [r7, #2]
 8023052:	3b02      	subs	r3, #2
 8023054:	6879      	ldr	r1, [r7, #4]
 8023056:	440b      	add	r3, r1
 8023058:	781b      	ldrb	r3, [r3, #0]
 802305a:	b21b      	sxth	r3, r3
 802305c:	4313      	orrs	r3, r2
 802305e:	b21b      	sxth	r3, r3
 8023060:	827b      	strh	r3, [r7, #18]

	if (crccal == crcrec)
 8023062:	8aba      	ldrh	r2, [r7, #20]
 8023064:	8a7b      	ldrh	r3, [r7, #18]
 8023066:	429a      	cmp	r2, r3
 8023068:	f040 80be 	bne.w	80231e8 <InterpreterMODBUS+0x1e4>
	{
		switch (msg[0])
 802306c:	687b      	ldr	r3, [r7, #4]
 802306e:	781b      	ldrb	r3, [r3, #0]
 8023070:	2b01      	cmp	r3, #1
 8023072:	f040 80bd 	bne.w	80231f0 <InterpreterMODBUS+0x1ec>
		{
		case 0x01: // Escravo 1
			switch (msg[1])
 8023076:	687b      	ldr	r3, [r7, #4]
 8023078:	3301      	adds	r3, #1
 802307a:	781b      	ldrb	r3, [r3, #0]
 802307c:	3b01      	subs	r3, #1
 802307e:	2b0f      	cmp	r3, #15
 8023080:	f200 80b5 	bhi.w	80231ee <InterpreterMODBUS+0x1ea>
 8023084:	a201      	add	r2, pc, #4	; (adr r2, 802308c <InterpreterMODBUS+0x88>)
 8023086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802308a:	bf00      	nop
 802308c:	080230cd 	.word	0x080230cd
 8023090:	080231e5 	.word	0x080231e5
 8023094:	080230e5 	.word	0x080230e5
 8023098:	080230fd 	.word	0x080230fd
 802309c:	080231e5 	.word	0x080231e5
 80230a0:	08023115 	.word	0x08023115
 80230a4:	080231ef 	.word	0x080231ef
 80230a8:	080231ef 	.word	0x080231ef
 80230ac:	080231ef 	.word	0x080231ef
 80230b0:	080231ef 	.word	0x080231ef
 80230b4:	080231ef 	.word	0x080231ef
 80230b8:	080231ef 	.word	0x080231ef
 80230bc:	080231ef 	.word	0x080231ef
 80230c0:	080231ef 	.word	0x080231ef
 80230c4:	080231e5 	.word	0x080231e5
 80230c8:	0802317d 	.word	0x0802317d
			{
			case 0x01: // Read coil registers

				ptr = GetAddrCoilRegister(address); // Pega o endereco real na memeria do CR
 80230cc:	8a3b      	ldrh	r3, [r7, #16]
 80230ce:	4618      	mov	r0, r3
 80230d0:	f000 f896 	bl	8023200 <GetAddrCoilRegister>
 80230d4:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadCoilRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 80230d6:	68f9      	ldr	r1, [r7, #12]
 80230d8:	6878      	ldr	r0, [r7, #4]
 80230da:	f7ff fe5d 	bl	8022d98 <ReadCoilRegister>
 80230de:	4603      	mov	r3, r0
 80230e0:	82fb      	strh	r3, [r7, #22]

				break;
 80230e2:	e080      	b.n	80231e6 <InterpreterMODBUS+0x1e2>
			case 0x02: // Read input status
				break;
			case 0x03: // Read holding registers
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 80230e4:	8a3b      	ldrh	r3, [r7, #16]
 80230e6:	4618      	mov	r0, r3
 80230e8:	f000 f8d6 	bl	8023298 <GetAddrHoldingRegister>
 80230ec:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadHoldingRegister(msg, ptr);	// Le o valor do IR e monta parte da mensagem
 80230ee:	68f9      	ldr	r1, [r7, #12]
 80230f0:	6878      	ldr	r0, [r7, #4]
 80230f2:	f7ff fee9 	bl	8022ec8 <ReadHoldingRegister>
 80230f6:	4603      	mov	r3, r0
 80230f8:	82fb      	strh	r3, [r7, #22]
				break;
 80230fa:	e074      	b.n	80231e6 <InterpreterMODBUS+0x1e2>
			case 0x04: // Read input registers
				ptr = GetAddrInputRegister(address); // Pega o endereco real na memoria do IR
 80230fc:	8a3b      	ldrh	r3, [r7, #16]
 80230fe:	4618      	mov	r0, r3
 8023100:	f000 f8a4 	bl	802324c <GetAddrInputRegister>
 8023104:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadInputRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 8023106:	68f9      	ldr	r1, [r7, #12]
 8023108:	6878      	ldr	r0, [r7, #4]
 802310a:	f7ff fe91 	bl	8022e30 <ReadInputRegister>
 802310e:	4603      	mov	r3, r0
 8023110:	82fb      	strh	r3, [r7, #22]
				break;
 8023112:	e068      	b.n	80231e6 <InterpreterMODBUS+0x1e2>
			case 0x05: // Force single coil
				break;
			case 0x06: // Preset single register
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8023114:	8a3b      	ldrh	r3, [r7, #16]
 8023116:	4618      	mov	r0, r3
 8023118:	f000 f8be 	bl	8023298 <GetAddrHoldingRegister>
 802311c:	60f8      	str	r0, [r7, #12]
				totalbytes = PresetSingleRegister(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 802311e:	68f9      	ldr	r1, [r7, #12]
 8023120:	6878      	ldr	r0, [r7, #4]
 8023122:	f7ff ff1d 	bl	8022f60 <PresetSingleRegister>
 8023126:	4603      	mov	r3, r0
 8023128:	82fb      	strh	r3, [r7, #22]


				//eeprom_write_char ( address, *( ptr ) );
				//eeprom_write_char ( address + 1, *( ptr + 1 ) );

				if (totalbytes)
 802312a:	8afb      	ldrh	r3, [r7, #22]
 802312c:	2b00      	cmp	r3, #0
 802312e:	d01f      	beq.n	8023170 <InterpreterMODBUS+0x16c>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] != ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 8023130:	4b32      	ldr	r3, [pc, #200]	; (80231fc <InterpreterMODBUS+0x1f8>)
 8023132:	681b      	ldr	r3, [r3, #0]
 8023134:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8023138:	2b00      	cmp	r3, #0
 802313a:	d015      	beq.n	8023168 <InterpreterMODBUS+0x164>
 802313c:	4b2f      	ldr	r3, [pc, #188]	; (80231fc <InterpreterMODBUS+0x1f8>)
 802313e:	681b      	ldr	r3, [r3, #0]
 8023140:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 8023144:	4b2d      	ldr	r3, [pc, #180]	; (80231fc <InterpreterMODBUS+0x1f8>)
 8023146:	681b      	ldr	r3, [r3, #0]
 8023148:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 802314c:	429a      	cmp	r2, r3
 802314e:	d00b      	beq.n	8023168 <InterpreterMODBUS+0x164>
					{
						//if((modbusMapa.COPIA_TIPO_HARDW != 0) && (modbusMapa.TIPO_HARDW != modbusMapa.COPIA_TIPO_HARDW)){

						ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] = ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 8023150:	4b2a      	ldr	r3, [pc, #168]	; (80231fc <InterpreterMODBUS+0x1f8>)
 8023152:	681a      	ldr	r2, [r3, #0]
 8023154:	4b29      	ldr	r3, [pc, #164]	; (80231fc <InterpreterMODBUS+0x1f8>)
 8023156:	681b      	ldr	r3, [r3, #0]
 8023158:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 802315c:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						//modbusMapa.TIPO_HARDW = modbusMapa.COPIA_TIPO_HARDW;

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 8023160:	206f      	movs	r0, #111	; 0x6f
 8023162:	f000 f873 	bl	802324c <GetAddrInputRegister>
 8023166:	60f8      	str	r0, [r7, #12]

						//while(eeprom_write_int(END_TIPO_HARDW_EEPROM, MB.TIPO_HARDW));
					}

					CfgFiles_UpdateCfgFileByIndex(MAP_FILE_IDX, false);
 8023168:	2100      	movs	r1, #0
 802316a:	2000      	movs	r0, #0
 802316c:	f7de ffa8 	bl	80020c0 <CfgFiles_UpdateCfgFileByIndex>
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8023170:	8a3b      	ldrh	r3, [r7, #16]
 8023172:	4618      	mov	r0, r3
 8023174:	f000 f890 	bl	8023298 <GetAddrHoldingRegister>
 8023178:	60f8      	str	r0, [r7, #12]

				//eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 802317a:	e034      	b.n	80231e6 <InterpreterMODBUS+0x1e2>
			case 0x0F: // Preset multiple coils
				break;
			case 0x10: // Preset multiple resgisters
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memeria do HR
 802317c:	8a3b      	ldrh	r3, [r7, #16]
 802317e:	4618      	mov	r0, r3
 8023180:	f000 f88a 	bl	8023298 <GetAddrHoldingRegister>
 8023184:	60f8      	str	r0, [r7, #12]

				totalbytes = PresetMultipleRegisters(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 8023186:	68f9      	ldr	r1, [r7, #12]
 8023188:	6878      	ldr	r0, [r7, #4]
 802318a:	f7ff fefe 	bl	8022f8a <PresetMultipleRegisters>
 802318e:	4603      	mov	r3, r0
 8023190:	82fb      	strh	r3, [r7, #22]

				//eeprom_write_stream((address * 2), bytecount, ptr);

				if (totalbytes)
 8023192:	8afb      	ldrh	r3, [r7, #22]
 8023194:	2b00      	cmp	r3, #0
 8023196:	d01f      	beq.n	80231d8 <InterpreterMODBUS+0x1d4>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] != ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 8023198:	4b18      	ldr	r3, [pc, #96]	; (80231fc <InterpreterMODBUS+0x1f8>)
 802319a:	681b      	ldr	r3, [r3, #0]
 802319c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80231a0:	2b00      	cmp	r3, #0
 80231a2:	d015      	beq.n	80231d0 <InterpreterMODBUS+0x1cc>
 80231a4:	4b15      	ldr	r3, [pc, #84]	; (80231fc <InterpreterMODBUS+0x1f8>)
 80231a6:	681b      	ldr	r3, [r3, #0]
 80231a8:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 80231ac:	4b13      	ldr	r3, [pc, #76]	; (80231fc <InterpreterMODBUS+0x1f8>)
 80231ae:	681b      	ldr	r3, [r3, #0]
 80231b0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80231b4:	429a      	cmp	r2, r3
 80231b6:	d00b      	beq.n	80231d0 <InterpreterMODBUS+0x1cc>
					{
						ModbusMap->INPUTREGISTERS[ADD_TIPO_HARDW] = ModbusMap->HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 80231b8:	4b10      	ldr	r3, [pc, #64]	; (80231fc <InterpreterMODBUS+0x1f8>)
 80231ba:	681a      	ldr	r2, [r3, #0]
 80231bc:	4b0f      	ldr	r3, [pc, #60]	; (80231fc <InterpreterMODBUS+0x1f8>)
 80231be:	681b      	ldr	r3, [r3, #0]
 80231c0:	f8b2 20ac 	ldrh.w	r2, [r2, #172]	; 0xac
 80231c4:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 80231c8:	206f      	movs	r0, #111	; 0x6f
 80231ca:	f000 f83f 	bl	802324c <GetAddrInputRegister>
 80231ce:	60f8      	str	r0, [r7, #12]
					}

				    CfgFiles_UpdateCfgFileByIndex(MAP_FILE_IDX, false);
 80231d0:	2100      	movs	r1, #0
 80231d2:	2000      	movs	r0, #0
 80231d4:	f7de ff74 	bl	80020c0 <CfgFiles_UpdateCfgFileByIndex>
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 80231d8:	8a3b      	ldrh	r3, [r7, #16]
 80231da:	4618      	mov	r0, r3
 80231dc:	f000 f85c 	bl	8023298 <GetAddrHoldingRegister>
 80231e0:	60f8      	str	r0, [r7, #12]
				// eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 80231e2:	e000      	b.n	80231e6 <InterpreterMODBUS+0x1e2>
				break;
 80231e4:	bf00      	nop
			}
			break;
 80231e6:	e002      	b.n	80231ee <InterpreterMODBUS+0x1ea>
		}
	}
	else
	{

		totalbytes = 0;
 80231e8:	2300      	movs	r3, #0
 80231ea:	82fb      	strh	r3, [r7, #22]
 80231ec:	e000      	b.n	80231f0 <InterpreterMODBUS+0x1ec>
			break;
 80231ee:	bf00      	nop
	}

	return totalbytes;
 80231f0:	8afb      	ldrh	r3, [r7, #22]
}
 80231f2:	4618      	mov	r0, r3
 80231f4:	3718      	adds	r7, #24
 80231f6:	46bd      	mov	sp, r7
 80231f8:	bd80      	pop	{r7, pc}
 80231fa:	bf00      	nop
 80231fc:	20016144 	.word	0x20016144

08023200 <GetAddrCoilRegister>:

uint8_t* GetAddrCoilRegister(uint16_t address)
{
 8023200:	b480      	push	{r7}
 8023202:	b085      	sub	sp, #20
 8023204:	af00      	add	r7, sp, #0
 8023206:	4603      	mov	r3, r0
 8023208:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	switch (address)
 802320a:	88fb      	ldrh	r3, [r7, #6]
 802320c:	2b02      	cmp	r3, #2
 802320e:	d00f      	beq.n	8023230 <GetAddrCoilRegister+0x30>
 8023210:	2b02      	cmp	r3, #2
 8023212:	dc12      	bgt.n	802323a <GetAddrCoilRegister+0x3a>
 8023214:	2b00      	cmp	r3, #0
 8023216:	d002      	beq.n	802321e <GetAddrCoilRegister+0x1e>
 8023218:	2b01      	cmp	r3, #1
 802321a:	d004      	beq.n	8023226 <GetAddrCoilRegister+0x26>
 802321c:	e00d      	b.n	802323a <GetAddrCoilRegister+0x3a>
	{

	case ADD_IN_1:
		ptr = (uint8_t*) &ModbusMap->COILS[ADD_IN_1];
 802321e:	4b0a      	ldr	r3, [pc, #40]	; (8023248 <GetAddrCoilRegister+0x48>)
 8023220:	681b      	ldr	r3, [r3, #0]
 8023222:	60fb      	str	r3, [r7, #12]
		break;
 8023224:	e009      	b.n	802323a <GetAddrCoilRegister+0x3a>
	case ADD_IN_2:
		ptr = (uint8_t*) &ModbusMap->COILS[ADD_IN_2];
 8023226:	4b08      	ldr	r3, [pc, #32]	; (8023248 <GetAddrCoilRegister+0x48>)
 8023228:	681b      	ldr	r3, [r3, #0]
 802322a:	3302      	adds	r3, #2
 802322c:	60fb      	str	r3, [r7, #12]
		break;
 802322e:	e004      	b.n	802323a <GetAddrCoilRegister+0x3a>
	case ADD_OUT_1:
		ptr = (uint8_t*) &ModbusMap->COILS[ADD_OUT_1];
 8023230:	4b05      	ldr	r3, [pc, #20]	; (8023248 <GetAddrCoilRegister+0x48>)
 8023232:	681b      	ldr	r3, [r3, #0]
 8023234:	3304      	adds	r3, #4
 8023236:	60fb      	str	r3, [r7, #12]
		break;
 8023238:	bf00      	nop
	}
	return ptr;
 802323a:	68fb      	ldr	r3, [r7, #12]
}
 802323c:	4618      	mov	r0, r3
 802323e:	3714      	adds	r7, #20
 8023240:	46bd      	mov	sp, r7
 8023242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023246:	4770      	bx	lr
 8023248:	20016144 	.word	0x20016144

0802324c <GetAddrInputRegister>:

uint8_t* GetAddrInputRegister(uint16_t address)
{
 802324c:	b480      	push	{r7}
 802324e:	b085      	sub	sp, #20
 8023250:	af00      	add	r7, sp, #0
 8023252:	4603      	mov	r3, r0
 8023254:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 256)
 8023256:	88fb      	ldrh	r3, [r7, #6]
 8023258:	2bff      	cmp	r3, #255	; 0xff
 802325a:	d809      	bhi.n	8023270 <GetAddrInputRegister+0x24>

		ptr = (uint8_t*) &ModbusMap->INPUTREGISTERS[ADD_IMEI_1 + (address)];
 802325c:	4b0d      	ldr	r3, [pc, #52]	; (8023294 <GetAddrInputRegister+0x48>)
 802325e:	681a      	ldr	r2, [r3, #0]
 8023260:	88fb      	ldrh	r3, [r7, #6]
 8023262:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8023266:	005b      	lsls	r3, r3, #1
 8023268:	4413      	add	r3, r2
 802326a:	3306      	adds	r3, #6
 802326c:	60fb      	str	r3, [r7, #12]
 802326e:	e00a      	b.n	8023286 <GetAddrInputRegister+0x3a>
	else
		ptr = (uint8_t*) &ModbusMap->ESPELHO[ADD_IMEI_1 + ((address - 256))];
 8023270:	4b08      	ldr	r3, [pc, #32]	; (8023294 <GetAddrInputRegister+0x48>)
 8023272:	681a      	ldr	r2, [r3, #0]
 8023274:	88fb      	ldrh	r3, [r7, #6]
 8023276:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 802327a:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 802327e:	005b      	lsls	r3, r3, #1
 8023280:	4413      	add	r3, r2
 8023282:	3304      	adds	r3, #4
 8023284:	60fb      	str	r3, [r7, #12]
	return ptr;
 8023286:	68fb      	ldr	r3, [r7, #12]
}
 8023288:	4618      	mov	r0, r3
 802328a:	3714      	adds	r7, #20
 802328c:	46bd      	mov	sp, r7
 802328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023292:	4770      	bx	lr
 8023294:	20016144 	.word	0x20016144

08023298 <GetAddrHoldingRegister>:

uint8_t* GetAddrHoldingRegister(uint16_t address)
{
 8023298:	b480      	push	{r7}
 802329a:	b085      	sub	sp, #20
 802329c:	af00      	add	r7, sp, #0
 802329e:	4603      	mov	r3, r0
 80232a0:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 500)
 80232a2:	88fb      	ldrh	r3, [r7, #6]
 80232a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80232a8:	d207      	bcs.n	80232ba <GetAddrHoldingRegister+0x22>

		ptr = (uint8_t*) &ModbusMap->HOLDINGREGISTERS[ADD_TEMVALCONGPR + (address)];
 80232aa:	4b0b      	ldr	r3, [pc, #44]	; (80232d8 <GetAddrHoldingRegister+0x40>)
 80232ac:	681a      	ldr	r2, [r3, #0]
 80232ae:	88fb      	ldrh	r3, [r7, #6]
 80232b0:	005b      	lsls	r3, r3, #1
 80232b2:	4413      	add	r3, r2
 80232b4:	3306      	adds	r3, #6
 80232b6:	60fb      	str	r3, [r7, #12]
 80232b8:	e007      	b.n	80232ca <GetAddrHoldingRegister+0x32>
	//ptr = (uint8_t*) &modbusMapa.TEMVALCONGPR + (address * 2);
	else
		ptr = (uint8_t*) &ModbusMap->HOLDINGREGISTERS[(ADD_NUMSER_1 - 130) + (address - 500)];
 80232ba:	4b07      	ldr	r3, [pc, #28]	; (80232d8 <GetAddrHoldingRegister+0x40>)
 80232bc:	681a      	ldr	r2, [r3, #0]
 80232be:	88fb      	ldrh	r3, [r7, #6]
 80232c0:	3b82      	subs	r3, #130	; 0x82
 80232c2:	005b      	lsls	r3, r3, #1
 80232c4:	4413      	add	r3, r2
 80232c6:	3306      	adds	r3, #6
 80232c8:	60fb      	str	r3, [r7, #12]
	//ptr = (uint8_t*) &modbusMapa.NUMSER_1 + ((address - 500) * 2);
	return ptr;
 80232ca:	68fb      	ldr	r3, [r7, #12]
}
 80232cc:	4618      	mov	r0, r3
 80232ce:	3714      	adds	r7, #20
 80232d0:	46bd      	mov	sp, r7
 80232d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232d6:	4770      	bx	lr
 80232d8:	20016144 	.word	0x20016144

080232dc <CreateDefaultModbusMap>:
}



void CreateDefaultModbusMap(void *fileDataBuffer, TModbusMap *modbusMap)
{
 80232dc:	b580      	push	{r7, lr}
 80232de:	b086      	sub	sp, #24
 80232e0:	af00      	add	r7, sp, #0
 80232e2:	6078      	str	r0, [r7, #4]
 80232e4:	6039      	str	r1, [r7, #0]
  if (modbusMap == NULL)
 80232e6:	683b      	ldr	r3, [r7, #0]
 80232e8:	2b00      	cmp	r3, #0
 80232ea:	d03e      	beq.n	802336a <CreateDefaultModbusMap+0x8e>
    return;
  memset(fileDataBuffer, 0, (1024 * 2));
 80232ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80232f0:	2100      	movs	r1, #0
 80232f2:	6878      	ldr	r0, [r7, #4]
 80232f4:	f001 ff2a 	bl	802514c <memset>

  for (int var = 0; var < TOTAL_VARIAVEIS_INPUT; ++var)
 80232f8:	2300      	movs	r3, #0
 80232fa:	617b      	str	r3, [r7, #20]
 80232fc:	e00a      	b.n	8023314 <CreateDefaultModbusMap+0x38>
  {

    modbusMap->INPUTREGISTERS [var] = 1;
 80232fe:	683a      	ldr	r2, [r7, #0]
 8023300:	697b      	ldr	r3, [r7, #20]
 8023302:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8023306:	005b      	lsls	r3, r3, #1
 8023308:	4413      	add	r3, r2
 802330a:	2201      	movs	r2, #1
 802330c:	80da      	strh	r2, [r3, #6]
  for (int var = 0; var < TOTAL_VARIAVEIS_INPUT; ++var)
 802330e:	697b      	ldr	r3, [r7, #20]
 8023310:	3301      	adds	r3, #1
 8023312:	617b      	str	r3, [r7, #20]
 8023314:	697b      	ldr	r3, [r7, #20]
 8023316:	2b76      	cmp	r3, #118	; 0x76
 8023318:	ddf1      	ble.n	80232fe <CreateDefaultModbusMap+0x22>
  }

  for (int var = 0; var < TOTAL_VARIAVEIS_HOLDING; ++var)
 802331a:	2300      	movs	r3, #0
 802331c:	613b      	str	r3, [r7, #16]
 802331e:	e008      	b.n	8023332 <CreateDefaultModbusMap+0x56>
  {

    modbusMap->HOLDINGREGISTERS [var] = 2;
 8023320:	683a      	ldr	r2, [r7, #0]
 8023322:	693b      	ldr	r3, [r7, #16]
 8023324:	005b      	lsls	r3, r3, #1
 8023326:	4413      	add	r3, r2
 8023328:	2202      	movs	r2, #2
 802332a:	80da      	strh	r2, [r3, #6]
  for (int var = 0; var < TOTAL_VARIAVEIS_HOLDING; ++var)
 802332c:	693b      	ldr	r3, [r7, #16]
 802332e:	3301      	adds	r3, #1
 8023330:	613b      	str	r3, [r7, #16]
 8023332:	693b      	ldr	r3, [r7, #16]
 8023334:	f5b3 7fbc 	cmp.w	r3, #376	; 0x178
 8023338:	dbf2      	blt.n	8023320 <CreateDefaultModbusMap+0x44>
  }

  for (int var = 0; var < TOTAL_VARIAVEIS_ESPELHO; ++var)
 802333a:	2300      	movs	r3, #0
 802333c:	60fb      	str	r3, [r7, #12]
 802333e:	e00a      	b.n	8023356 <CreateDefaultModbusMap+0x7a>
  {

    modbusMap->ESPELHO [var] = 3;
 8023340:	683a      	ldr	r2, [r7, #0]
 8023342:	68fb      	ldr	r3, [r7, #12]
 8023344:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8023348:	005b      	lsls	r3, r3, #1
 802334a:	4413      	add	r3, r2
 802334c:	2203      	movs	r2, #3
 802334e:	809a      	strh	r2, [r3, #4]
  for (int var = 0; var < TOTAL_VARIAVEIS_ESPELHO; ++var)
 8023350:	68fb      	ldr	r3, [r7, #12]
 8023352:	3301      	adds	r3, #1
 8023354:	60fb      	str	r3, [r7, #12]
 8023356:	68fb      	ldr	r3, [r7, #12]
 8023358:	2b4a      	cmp	r3, #74	; 0x4a
 802335a:	ddf1      	ble.n	8023340 <CreateDefaultModbusMap+0x64>
  }

  memcpy(fileDataBuffer, modbusMap, sizeof(TModbusMap));
 802335c:	f240 427a 	movw	r2, #1146	; 0x47a
 8023360:	6839      	ldr	r1, [r7, #0]
 8023362:	6878      	ldr	r0, [r7, #4]
 8023364:	f003 f9eb 	bl	802673e <memcpy>
 8023368:	e000      	b.n	802336c <CreateDefaultModbusMap+0x90>
    return;
 802336a:	bf00      	nop
}
 802336c:	3718      	adds	r7, #24
 802336e:	46bd      	mov	sp, r7
 8023370:	bd80      	pop	{r7, pc}
	...

08023374 <ModbusInit>:




void ModbusInit ()
{
 8023374:	b480      	push	{r7}
 8023376:	af00      	add	r7, sp, #0
  ModbusMap = &modbusMapFile;
 8023378:	4b03      	ldr	r3, [pc, #12]	; (8023388 <ModbusInit+0x14>)
 802337a:	4a04      	ldr	r2, [pc, #16]	; (802338c <ModbusInit+0x18>)
 802337c:	601a      	str	r2, [r3, #0]

}
 802337e:	bf00      	nop
 8023380:	46bd      	mov	sp, r7
 8023382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023386:	4770      	bx	lr
 8023388:	20016144 	.word	0x20016144
 802338c:	200004b4 	.word	0x200004b4

08023390 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8023390:	b480      	push	{r7}
 8023392:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8023394:	bf00      	nop
 8023396:	46bd      	mov	sp, r7
 8023398:	f85d 7b04 	ldr.w	r7, [sp], #4
 802339c:	4770      	bx	lr
	...

080233a0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80233a0:	b580      	push	{r7, lr}
 80233a2:	b086      	sub	sp, #24
 80233a4:	af04      	add	r7, sp, #16
 80233a6:	4603      	mov	r3, r0
 80233a8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80233aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80233ae:	9302      	str	r3, [sp, #8]
 80233b0:	2301      	movs	r3, #1
 80233b2:	9301      	str	r3, [sp, #4]
 80233b4:	1dfb      	adds	r3, r7, #7
 80233b6:	9300      	str	r3, [sp, #0]
 80233b8:	2301      	movs	r3, #1
 80233ba:	2200      	movs	r2, #0
 80233bc:	2178      	movs	r1, #120	; 0x78
 80233be:	4803      	ldr	r0, [pc, #12]	; (80233cc <ssd1306_WriteCommand+0x2c>)
 80233c0:	f7e2 ffde 	bl	8006380 <HAL_I2C_Mem_Write>
}
 80233c4:	bf00      	nop
 80233c6:	3708      	adds	r7, #8
 80233c8:	46bd      	mov	sp, r7
 80233ca:	bd80      	pop	{r7, pc}
 80233cc:	20001e5c 	.word	0x20001e5c

080233d0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80233d0:	b580      	push	{r7, lr}
 80233d2:	b086      	sub	sp, #24
 80233d4:	af04      	add	r7, sp, #16
 80233d6:	6078      	str	r0, [r7, #4]
 80233d8:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80233da:	683b      	ldr	r3, [r7, #0]
 80233dc:	b29b      	uxth	r3, r3
 80233de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80233e2:	9202      	str	r2, [sp, #8]
 80233e4:	9301      	str	r3, [sp, #4]
 80233e6:	687b      	ldr	r3, [r7, #4]
 80233e8:	9300      	str	r3, [sp, #0]
 80233ea:	2301      	movs	r3, #1
 80233ec:	2240      	movs	r2, #64	; 0x40
 80233ee:	2178      	movs	r1, #120	; 0x78
 80233f0:	4803      	ldr	r0, [pc, #12]	; (8023400 <ssd1306_WriteData+0x30>)
 80233f2:	f7e2 ffc5 	bl	8006380 <HAL_I2C_Mem_Write>
}
 80233f6:	bf00      	nop
 80233f8:	3708      	adds	r7, #8
 80233fa:	46bd      	mov	sp, r7
 80233fc:	bd80      	pop	{r7, pc}
 80233fe:	bf00      	nop
 8023400:	20001e5c 	.word	0x20001e5c

08023404 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8023404:	b580      	push	{r7, lr}
 8023406:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8023408:	f7ff ffc2 	bl	8023390 <ssd1306_Reset>

    // Wait for the screen to boot
    //HAL_Delay(100);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 802340c:	2000      	movs	r0, #0
 802340e:	f000 f9cf 	bl	80237b0 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8023412:	2020      	movs	r0, #32
 8023414:	f7ff ffc4 	bl	80233a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8023418:	2000      	movs	r0, #0
 802341a:	f7ff ffc1 	bl	80233a0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 802341e:	20b0      	movs	r0, #176	; 0xb0
 8023420:	f7ff ffbe 	bl	80233a0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8023424:	20c8      	movs	r0, #200	; 0xc8
 8023426:	f7ff ffbb 	bl	80233a0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 802342a:	2000      	movs	r0, #0
 802342c:	f7ff ffb8 	bl	80233a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8023430:	2010      	movs	r0, #16
 8023432:	f7ff ffb5 	bl	80233a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8023436:	2040      	movs	r0, #64	; 0x40
 8023438:	f7ff ffb2 	bl	80233a0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 802343c:	20ff      	movs	r0, #255	; 0xff
 802343e:	f000 f9a3 	bl	8023788 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8023442:	20a1      	movs	r0, #161	; 0xa1
 8023444:	f7ff ffac 	bl	80233a0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8023448:	20a6      	movs	r0, #166	; 0xa6
 802344a:	f7ff ffa9 	bl	80233a0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 802344e:	20a8      	movs	r0, #168	; 0xa8
 8023450:	f7ff ffa6 	bl	80233a0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8023454:	201f      	movs	r0, #31
 8023456:	f7ff ffa3 	bl	80233a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 802345a:	20a4      	movs	r0, #164	; 0xa4
 802345c:	f7ff ffa0 	bl	80233a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8023460:	20d3      	movs	r0, #211	; 0xd3
 8023462:	f7ff ff9d 	bl	80233a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8023466:	2000      	movs	r0, #0
 8023468:	f7ff ff9a 	bl	80233a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 802346c:	20d5      	movs	r0, #213	; 0xd5
 802346e:	f7ff ff97 	bl	80233a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8023472:	20f0      	movs	r0, #240	; 0xf0
 8023474:	f7ff ff94 	bl	80233a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8023478:	20d9      	movs	r0, #217	; 0xd9
 802347a:	f7ff ff91 	bl	80233a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 802347e:	2022      	movs	r0, #34	; 0x22
 8023480:	f7ff ff8e 	bl	80233a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8023484:	20da      	movs	r0, #218	; 0xda
 8023486:	f7ff ff8b 	bl	80233a0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 802348a:	2002      	movs	r0, #2
 802348c:	f7ff ff88 	bl	80233a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8023490:	20db      	movs	r0, #219	; 0xdb
 8023492:	f7ff ff85 	bl	80233a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8023496:	2020      	movs	r0, #32
 8023498:	f7ff ff82 	bl	80233a0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 802349c:	208d      	movs	r0, #141	; 0x8d
 802349e:	f7ff ff7f 	bl	80233a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80234a2:	2014      	movs	r0, #20
 80234a4:	f7ff ff7c 	bl	80233a0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80234a8:	2001      	movs	r0, #1
 80234aa:	f000 f981 	bl	80237b0 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80234ae:	2000      	movs	r0, #0
 80234b0:	f000 f810 	bl	80234d4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80234b4:	f000 f826 	bl	8023504 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80234b8:	4b05      	ldr	r3, [pc, #20]	; (80234d0 <ssd1306_Init+0xcc>)
 80234ba:	2200      	movs	r2, #0
 80234bc:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80234be:	4b04      	ldr	r3, [pc, #16]	; (80234d0 <ssd1306_Init+0xcc>)
 80234c0:	2200      	movs	r2, #0
 80234c2:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80234c4:	4b02      	ldr	r3, [pc, #8]	; (80234d0 <ssd1306_Init+0xcc>)
 80234c6:	2201      	movs	r2, #1
 80234c8:	711a      	strb	r2, [r3, #4]
}
 80234ca:	bf00      	nop
 80234cc:	bd80      	pop	{r7, pc}
 80234ce:	bf00      	nop
 80234d0:	20016348 	.word	0x20016348

080234d4 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80234d4:	b580      	push	{r7, lr}
 80234d6:	b082      	sub	sp, #8
 80234d8:	af00      	add	r7, sp, #0
 80234da:	4603      	mov	r3, r0
 80234dc:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80234de:	79fb      	ldrb	r3, [r7, #7]
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d101      	bne.n	80234e8 <ssd1306_Fill+0x14>
 80234e4:	2300      	movs	r3, #0
 80234e6:	e000      	b.n	80234ea <ssd1306_Fill+0x16>
 80234e8:	23ff      	movs	r3, #255	; 0xff
 80234ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80234ee:	4619      	mov	r1, r3
 80234f0:	4803      	ldr	r0, [pc, #12]	; (8023500 <ssd1306_Fill+0x2c>)
 80234f2:	f001 fe2b 	bl	802514c <memset>
}
 80234f6:	bf00      	nop
 80234f8:	3708      	adds	r7, #8
 80234fa:	46bd      	mov	sp, r7
 80234fc:	bd80      	pop	{r7, pc}
 80234fe:	bf00      	nop
 8023500:	20016148 	.word	0x20016148

08023504 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8023504:	b580      	push	{r7, lr}
 8023506:	b082      	sub	sp, #8
 8023508:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 802350a:	2300      	movs	r3, #0
 802350c:	71fb      	strb	r3, [r7, #7]
 802350e:	e016      	b.n	802353e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8023510:	79fb      	ldrb	r3, [r7, #7]
 8023512:	3b50      	subs	r3, #80	; 0x50
 8023514:	b2db      	uxtb	r3, r3
 8023516:	4618      	mov	r0, r3
 8023518:	f7ff ff42 	bl	80233a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 802351c:	2000      	movs	r0, #0
 802351e:	f7ff ff3f 	bl	80233a0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8023522:	2010      	movs	r0, #16
 8023524:	f7ff ff3c 	bl	80233a0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8023528:	79fb      	ldrb	r3, [r7, #7]
 802352a:	01db      	lsls	r3, r3, #7
 802352c:	4a08      	ldr	r2, [pc, #32]	; (8023550 <ssd1306_UpdateScreen+0x4c>)
 802352e:	4413      	add	r3, r2
 8023530:	2180      	movs	r1, #128	; 0x80
 8023532:	4618      	mov	r0, r3
 8023534:	f7ff ff4c 	bl	80233d0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8023538:	79fb      	ldrb	r3, [r7, #7]
 802353a:	3301      	adds	r3, #1
 802353c:	71fb      	strb	r3, [r7, #7]
 802353e:	79fb      	ldrb	r3, [r7, #7]
 8023540:	2b03      	cmp	r3, #3
 8023542:	d9e5      	bls.n	8023510 <ssd1306_UpdateScreen+0xc>
    }
}
 8023544:	bf00      	nop
 8023546:	bf00      	nop
 8023548:	3708      	adds	r7, #8
 802354a:	46bd      	mov	sp, r7
 802354c:	bd80      	pop	{r7, pc}
 802354e:	bf00      	nop
 8023550:	20016148 	.word	0x20016148

08023554 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8023554:	b480      	push	{r7}
 8023556:	b083      	sub	sp, #12
 8023558:	af00      	add	r7, sp, #0
 802355a:	4603      	mov	r3, r0
 802355c:	71fb      	strb	r3, [r7, #7]
 802355e:	460b      	mov	r3, r1
 8023560:	71bb      	strb	r3, [r7, #6]
 8023562:	4613      	mov	r3, r2
 8023564:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8023566:	f997 3007 	ldrsb.w	r3, [r7, #7]
 802356a:	2b00      	cmp	r3, #0
 802356c:	db3d      	blt.n	80235ea <ssd1306_DrawPixel+0x96>
 802356e:	79bb      	ldrb	r3, [r7, #6]
 8023570:	2b1f      	cmp	r3, #31
 8023572:	d83a      	bhi.n	80235ea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8023574:	797b      	ldrb	r3, [r7, #5]
 8023576:	2b01      	cmp	r3, #1
 8023578:	d11a      	bne.n	80235b0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 802357a:	79fa      	ldrb	r2, [r7, #7]
 802357c:	79bb      	ldrb	r3, [r7, #6]
 802357e:	08db      	lsrs	r3, r3, #3
 8023580:	b2d8      	uxtb	r0, r3
 8023582:	4603      	mov	r3, r0
 8023584:	01db      	lsls	r3, r3, #7
 8023586:	4413      	add	r3, r2
 8023588:	4a1b      	ldr	r2, [pc, #108]	; (80235f8 <ssd1306_DrawPixel+0xa4>)
 802358a:	5cd3      	ldrb	r3, [r2, r3]
 802358c:	b25a      	sxtb	r2, r3
 802358e:	79bb      	ldrb	r3, [r7, #6]
 8023590:	f003 0307 	and.w	r3, r3, #7
 8023594:	2101      	movs	r1, #1
 8023596:	fa01 f303 	lsl.w	r3, r1, r3
 802359a:	b25b      	sxtb	r3, r3
 802359c:	4313      	orrs	r3, r2
 802359e:	b259      	sxtb	r1, r3
 80235a0:	79fa      	ldrb	r2, [r7, #7]
 80235a2:	4603      	mov	r3, r0
 80235a4:	01db      	lsls	r3, r3, #7
 80235a6:	4413      	add	r3, r2
 80235a8:	b2c9      	uxtb	r1, r1
 80235aa:	4a13      	ldr	r2, [pc, #76]	; (80235f8 <ssd1306_DrawPixel+0xa4>)
 80235ac:	54d1      	strb	r1, [r2, r3]
 80235ae:	e01d      	b.n	80235ec <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80235b0:	79fa      	ldrb	r2, [r7, #7]
 80235b2:	79bb      	ldrb	r3, [r7, #6]
 80235b4:	08db      	lsrs	r3, r3, #3
 80235b6:	b2d8      	uxtb	r0, r3
 80235b8:	4603      	mov	r3, r0
 80235ba:	01db      	lsls	r3, r3, #7
 80235bc:	4413      	add	r3, r2
 80235be:	4a0e      	ldr	r2, [pc, #56]	; (80235f8 <ssd1306_DrawPixel+0xa4>)
 80235c0:	5cd3      	ldrb	r3, [r2, r3]
 80235c2:	b25a      	sxtb	r2, r3
 80235c4:	79bb      	ldrb	r3, [r7, #6]
 80235c6:	f003 0307 	and.w	r3, r3, #7
 80235ca:	2101      	movs	r1, #1
 80235cc:	fa01 f303 	lsl.w	r3, r1, r3
 80235d0:	b25b      	sxtb	r3, r3
 80235d2:	43db      	mvns	r3, r3
 80235d4:	b25b      	sxtb	r3, r3
 80235d6:	4013      	ands	r3, r2
 80235d8:	b259      	sxtb	r1, r3
 80235da:	79fa      	ldrb	r2, [r7, #7]
 80235dc:	4603      	mov	r3, r0
 80235de:	01db      	lsls	r3, r3, #7
 80235e0:	4413      	add	r3, r2
 80235e2:	b2c9      	uxtb	r1, r1
 80235e4:	4a04      	ldr	r2, [pc, #16]	; (80235f8 <ssd1306_DrawPixel+0xa4>)
 80235e6:	54d1      	strb	r1, [r2, r3]
 80235e8:	e000      	b.n	80235ec <ssd1306_DrawPixel+0x98>
        return;
 80235ea:	bf00      	nop
    }
}
 80235ec:	370c      	adds	r7, #12
 80235ee:	46bd      	mov	sp, r7
 80235f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80235f4:	4770      	bx	lr
 80235f6:	bf00      	nop
 80235f8:	20016148 	.word	0x20016148

080235fc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80235fc:	b590      	push	{r4, r7, lr}
 80235fe:	b089      	sub	sp, #36	; 0x24
 8023600:	af00      	add	r7, sp, #0
 8023602:	4604      	mov	r4, r0
 8023604:	1d38      	adds	r0, r7, #4
 8023606:	e880 0006 	stmia.w	r0, {r1, r2}
 802360a:	461a      	mov	r2, r3
 802360c:	4623      	mov	r3, r4
 802360e:	73fb      	strb	r3, [r7, #15]
 8023610:	4613      	mov	r3, r2
 8023612:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8023614:	7bfb      	ldrb	r3, [r7, #15]
 8023616:	2b1f      	cmp	r3, #31
 8023618:	d902      	bls.n	8023620 <ssd1306_WriteChar+0x24>
 802361a:	7bfb      	ldrb	r3, [r7, #15]
 802361c:	2b7e      	cmp	r3, #126	; 0x7e
 802361e:	d901      	bls.n	8023624 <ssd1306_WriteChar+0x28>
        return 0;
 8023620:	2300      	movs	r3, #0
 8023622:	e06d      	b.n	8023700 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8023624:	4b38      	ldr	r3, [pc, #224]	; (8023708 <ssd1306_WriteChar+0x10c>)
 8023626:	881b      	ldrh	r3, [r3, #0]
 8023628:	461a      	mov	r2, r3
 802362a:	793b      	ldrb	r3, [r7, #4]
 802362c:	4413      	add	r3, r2
 802362e:	2b80      	cmp	r3, #128	; 0x80
 8023630:	dc06      	bgt.n	8023640 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8023632:	4b35      	ldr	r3, [pc, #212]	; (8023708 <ssd1306_WriteChar+0x10c>)
 8023634:	885b      	ldrh	r3, [r3, #2]
 8023636:	461a      	mov	r2, r3
 8023638:	797b      	ldrb	r3, [r7, #5]
 802363a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 802363c:	2b20      	cmp	r3, #32
 802363e:	dd01      	ble.n	8023644 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8023640:	2300      	movs	r3, #0
 8023642:	e05d      	b.n	8023700 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8023644:	2300      	movs	r3, #0
 8023646:	61fb      	str	r3, [r7, #28]
 8023648:	e04c      	b.n	80236e4 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 802364a:	68ba      	ldr	r2, [r7, #8]
 802364c:	7bfb      	ldrb	r3, [r7, #15]
 802364e:	3b20      	subs	r3, #32
 8023650:	7979      	ldrb	r1, [r7, #5]
 8023652:	fb01 f303 	mul.w	r3, r1, r3
 8023656:	4619      	mov	r1, r3
 8023658:	69fb      	ldr	r3, [r7, #28]
 802365a:	440b      	add	r3, r1
 802365c:	005b      	lsls	r3, r3, #1
 802365e:	4413      	add	r3, r2
 8023660:	881b      	ldrh	r3, [r3, #0]
 8023662:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8023664:	2300      	movs	r3, #0
 8023666:	61bb      	str	r3, [r7, #24]
 8023668:	e034      	b.n	80236d4 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 802366a:	697a      	ldr	r2, [r7, #20]
 802366c:	69bb      	ldr	r3, [r7, #24]
 802366e:	fa02 f303 	lsl.w	r3, r2, r3
 8023672:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8023676:	2b00      	cmp	r3, #0
 8023678:	d012      	beq.n	80236a0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 802367a:	4b23      	ldr	r3, [pc, #140]	; (8023708 <ssd1306_WriteChar+0x10c>)
 802367c:	881b      	ldrh	r3, [r3, #0]
 802367e:	b2da      	uxtb	r2, r3
 8023680:	69bb      	ldr	r3, [r7, #24]
 8023682:	b2db      	uxtb	r3, r3
 8023684:	4413      	add	r3, r2
 8023686:	b2d8      	uxtb	r0, r3
 8023688:	4b1f      	ldr	r3, [pc, #124]	; (8023708 <ssd1306_WriteChar+0x10c>)
 802368a:	885b      	ldrh	r3, [r3, #2]
 802368c:	b2da      	uxtb	r2, r3
 802368e:	69fb      	ldr	r3, [r7, #28]
 8023690:	b2db      	uxtb	r3, r3
 8023692:	4413      	add	r3, r2
 8023694:	b2db      	uxtb	r3, r3
 8023696:	7bba      	ldrb	r2, [r7, #14]
 8023698:	4619      	mov	r1, r3
 802369a:	f7ff ff5b 	bl	8023554 <ssd1306_DrawPixel>
 802369e:	e016      	b.n	80236ce <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80236a0:	4b19      	ldr	r3, [pc, #100]	; (8023708 <ssd1306_WriteChar+0x10c>)
 80236a2:	881b      	ldrh	r3, [r3, #0]
 80236a4:	b2da      	uxtb	r2, r3
 80236a6:	69bb      	ldr	r3, [r7, #24]
 80236a8:	b2db      	uxtb	r3, r3
 80236aa:	4413      	add	r3, r2
 80236ac:	b2d8      	uxtb	r0, r3
 80236ae:	4b16      	ldr	r3, [pc, #88]	; (8023708 <ssd1306_WriteChar+0x10c>)
 80236b0:	885b      	ldrh	r3, [r3, #2]
 80236b2:	b2da      	uxtb	r2, r3
 80236b4:	69fb      	ldr	r3, [r7, #28]
 80236b6:	b2db      	uxtb	r3, r3
 80236b8:	4413      	add	r3, r2
 80236ba:	b2d9      	uxtb	r1, r3
 80236bc:	7bbb      	ldrb	r3, [r7, #14]
 80236be:	2b00      	cmp	r3, #0
 80236c0:	bf0c      	ite	eq
 80236c2:	2301      	moveq	r3, #1
 80236c4:	2300      	movne	r3, #0
 80236c6:	b2db      	uxtb	r3, r3
 80236c8:	461a      	mov	r2, r3
 80236ca:	f7ff ff43 	bl	8023554 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80236ce:	69bb      	ldr	r3, [r7, #24]
 80236d0:	3301      	adds	r3, #1
 80236d2:	61bb      	str	r3, [r7, #24]
 80236d4:	793b      	ldrb	r3, [r7, #4]
 80236d6:	461a      	mov	r2, r3
 80236d8:	69bb      	ldr	r3, [r7, #24]
 80236da:	4293      	cmp	r3, r2
 80236dc:	d3c5      	bcc.n	802366a <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80236de:	69fb      	ldr	r3, [r7, #28]
 80236e0:	3301      	adds	r3, #1
 80236e2:	61fb      	str	r3, [r7, #28]
 80236e4:	797b      	ldrb	r3, [r7, #5]
 80236e6:	461a      	mov	r2, r3
 80236e8:	69fb      	ldr	r3, [r7, #28]
 80236ea:	4293      	cmp	r3, r2
 80236ec:	d3ad      	bcc.n	802364a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80236ee:	4b06      	ldr	r3, [pc, #24]	; (8023708 <ssd1306_WriteChar+0x10c>)
 80236f0:	881a      	ldrh	r2, [r3, #0]
 80236f2:	793b      	ldrb	r3, [r7, #4]
 80236f4:	b29b      	uxth	r3, r3
 80236f6:	4413      	add	r3, r2
 80236f8:	b29a      	uxth	r2, r3
 80236fa:	4b03      	ldr	r3, [pc, #12]	; (8023708 <ssd1306_WriteChar+0x10c>)
 80236fc:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80236fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8023700:	4618      	mov	r0, r3
 8023702:	3724      	adds	r7, #36	; 0x24
 8023704:	46bd      	mov	sp, r7
 8023706:	bd90      	pop	{r4, r7, pc}
 8023708:	20016348 	.word	0x20016348

0802370c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 802370c:	b580      	push	{r7, lr}
 802370e:	b084      	sub	sp, #16
 8023710:	af00      	add	r7, sp, #0
 8023712:	60f8      	str	r0, [r7, #12]
 8023714:	1d38      	adds	r0, r7, #4
 8023716:	e880 0006 	stmia.w	r0, {r1, r2}
 802371a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 802371c:	e012      	b.n	8023744 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 802371e:	68fb      	ldr	r3, [r7, #12]
 8023720:	7818      	ldrb	r0, [r3, #0]
 8023722:	78fb      	ldrb	r3, [r7, #3]
 8023724:	1d3a      	adds	r2, r7, #4
 8023726:	ca06      	ldmia	r2, {r1, r2}
 8023728:	f7ff ff68 	bl	80235fc <ssd1306_WriteChar>
 802372c:	4603      	mov	r3, r0
 802372e:	461a      	mov	r2, r3
 8023730:	68fb      	ldr	r3, [r7, #12]
 8023732:	781b      	ldrb	r3, [r3, #0]
 8023734:	429a      	cmp	r2, r3
 8023736:	d002      	beq.n	802373e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8023738:	68fb      	ldr	r3, [r7, #12]
 802373a:	781b      	ldrb	r3, [r3, #0]
 802373c:	e008      	b.n	8023750 <ssd1306_WriteString+0x44>
        }
        str++;
 802373e:	68fb      	ldr	r3, [r7, #12]
 8023740:	3301      	adds	r3, #1
 8023742:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8023744:	68fb      	ldr	r3, [r7, #12]
 8023746:	781b      	ldrb	r3, [r3, #0]
 8023748:	2b00      	cmp	r3, #0
 802374a:	d1e8      	bne.n	802371e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 802374c:	68fb      	ldr	r3, [r7, #12]
 802374e:	781b      	ldrb	r3, [r3, #0]
}
 8023750:	4618      	mov	r0, r3
 8023752:	3710      	adds	r7, #16
 8023754:	46bd      	mov	sp, r7
 8023756:	bd80      	pop	{r7, pc}

08023758 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8023758:	b480      	push	{r7}
 802375a:	b083      	sub	sp, #12
 802375c:	af00      	add	r7, sp, #0
 802375e:	4603      	mov	r3, r0
 8023760:	460a      	mov	r2, r1
 8023762:	71fb      	strb	r3, [r7, #7]
 8023764:	4613      	mov	r3, r2
 8023766:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8023768:	79fb      	ldrb	r3, [r7, #7]
 802376a:	b29a      	uxth	r2, r3
 802376c:	4b05      	ldr	r3, [pc, #20]	; (8023784 <ssd1306_SetCursor+0x2c>)
 802376e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8023770:	79bb      	ldrb	r3, [r7, #6]
 8023772:	b29a      	uxth	r2, r3
 8023774:	4b03      	ldr	r3, [pc, #12]	; (8023784 <ssd1306_SetCursor+0x2c>)
 8023776:	805a      	strh	r2, [r3, #2]
}
 8023778:	bf00      	nop
 802377a:	370c      	adds	r7, #12
 802377c:	46bd      	mov	sp, r7
 802377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023782:	4770      	bx	lr
 8023784:	20016348 	.word	0x20016348

08023788 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8023788:	b580      	push	{r7, lr}
 802378a:	b084      	sub	sp, #16
 802378c:	af00      	add	r7, sp, #0
 802378e:	4603      	mov	r3, r0
 8023790:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8023792:	2381      	movs	r3, #129	; 0x81
 8023794:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8023796:	7bfb      	ldrb	r3, [r7, #15]
 8023798:	4618      	mov	r0, r3
 802379a:	f7ff fe01 	bl	80233a0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 802379e:	79fb      	ldrb	r3, [r7, #7]
 80237a0:	4618      	mov	r0, r3
 80237a2:	f7ff fdfd 	bl	80233a0 <ssd1306_WriteCommand>
}
 80237a6:	bf00      	nop
 80237a8:	3710      	adds	r7, #16
 80237aa:	46bd      	mov	sp, r7
 80237ac:	bd80      	pop	{r7, pc}
	...

080237b0 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80237b0:	b580      	push	{r7, lr}
 80237b2:	b084      	sub	sp, #16
 80237b4:	af00      	add	r7, sp, #0
 80237b6:	4603      	mov	r3, r0
 80237b8:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80237ba:	79fb      	ldrb	r3, [r7, #7]
 80237bc:	2b00      	cmp	r3, #0
 80237be:	d005      	beq.n	80237cc <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80237c0:	23af      	movs	r3, #175	; 0xaf
 80237c2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80237c4:	4b08      	ldr	r3, [pc, #32]	; (80237e8 <ssd1306_SetDisplayOn+0x38>)
 80237c6:	2201      	movs	r2, #1
 80237c8:	715a      	strb	r2, [r3, #5]
 80237ca:	e004      	b.n	80237d6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80237cc:	23ae      	movs	r3, #174	; 0xae
 80237ce:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80237d0:	4b05      	ldr	r3, [pc, #20]	; (80237e8 <ssd1306_SetDisplayOn+0x38>)
 80237d2:	2200      	movs	r2, #0
 80237d4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80237d6:	7bfb      	ldrb	r3, [r7, #15]
 80237d8:	4618      	mov	r0, r3
 80237da:	f7ff fde1 	bl	80233a0 <ssd1306_WriteCommand>
}
 80237de:	bf00      	nop
 80237e0:	3710      	adds	r7, #16
 80237e2:	46bd      	mov	sp, r7
 80237e4:	bd80      	pop	{r7, pc}
 80237e6:	bf00      	nop
 80237e8:	20016348 	.word	0x20016348

080237ec <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80237ec:	b580      	push	{r7, lr}
 80237ee:	b086      	sub	sp, #24
 80237f0:	af02      	add	r7, sp, #8
 80237f2:	4603      	mov	r3, r0
 80237f4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

 HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80237f6:	f107 020f 	add.w	r2, r7, #15
 80237fa:	1df9      	adds	r1, r7, #7
 80237fc:	2364      	movs	r3, #100	; 0x64
 80237fe:	9300      	str	r3, [sp, #0]
 8023800:	2301      	movs	r3, #1
 8023802:	4804      	ldr	r0, [pc, #16]	; (8023814 <W25qxx_Spi+0x28>)
 8023804:	f7e4 fc82 	bl	800810c <HAL_SPI_TransmitReceive>


	return ret;
 8023808:	7bfb      	ldrb	r3, [r7, #15]
}
 802380a:	4618      	mov	r0, r3
 802380c:	3710      	adds	r7, #16
 802380e:	46bd      	mov	sp, r7
 8023810:	bd80      	pop	{r7, pc}
 8023812:	bf00      	nop
 8023814:	20001f84 	.word	0x20001f84

08023818 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8023818:	b580      	push	{r7, lr}
 802381a:	b084      	sub	sp, #16
 802381c:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 802381e:	2300      	movs	r3, #0
 8023820:	60fb      	str	r3, [r7, #12]
 8023822:	2300      	movs	r3, #0
 8023824:	60bb      	str	r3, [r7, #8]
 8023826:	2300      	movs	r3, #0
 8023828:	607b      	str	r3, [r7, #4]
 802382a:	2300      	movs	r3, #0
 802382c:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 802382e:	2200      	movs	r2, #0
 8023830:	2108      	movs	r1, #8
 8023832:	4813      	ldr	r0, [pc, #76]	; (8023880 <W25qxx_ReadID+0x68>)
 8023834:	f7e2 fc2c 	bl	8006090 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8023838:	209f      	movs	r0, #159	; 0x9f
 802383a:	f7ff ffd7 	bl	80237ec <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 802383e:	20a5      	movs	r0, #165	; 0xa5
 8023840:	f7ff ffd4 	bl	80237ec <W25qxx_Spi>
 8023844:	4603      	mov	r3, r0
 8023846:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8023848:	20a5      	movs	r0, #165	; 0xa5
 802384a:	f7ff ffcf 	bl	80237ec <W25qxx_Spi>
 802384e:	4603      	mov	r3, r0
 8023850:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8023852:	20a5      	movs	r0, #165	; 0xa5
 8023854:	f7ff ffca 	bl	80237ec <W25qxx_Spi>
 8023858:	4603      	mov	r3, r0
 802385a:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 802385c:	2201      	movs	r2, #1
 802385e:	2108      	movs	r1, #8
 8023860:	4807      	ldr	r0, [pc, #28]	; (8023880 <W25qxx_ReadID+0x68>)
 8023862:	f7e2 fc15 	bl	8006090 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 8023866:	68bb      	ldr	r3, [r7, #8]
 8023868:	041a      	lsls	r2, r3, #16
 802386a:	687b      	ldr	r3, [r7, #4]
 802386c:	021b      	lsls	r3, r3, #8
 802386e:	4313      	orrs	r3, r2
 8023870:	683a      	ldr	r2, [r7, #0]
 8023872:	4313      	orrs	r3, r2
 8023874:	60fb      	str	r3, [r7, #12]
	return Temp;
 8023876:	68fb      	ldr	r3, [r7, #12]
}
 8023878:	4618      	mov	r0, r3
 802387a:	3710      	adds	r7, #16
 802387c:	46bd      	mov	sp, r7
 802387e:	bd80      	pop	{r7, pc}
 8023880:	40021000 	.word	0x40021000

08023884 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 8023884:	b590      	push	{r4, r7, lr}
 8023886:	b083      	sub	sp, #12
 8023888:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 802388a:	2200      	movs	r2, #0
 802388c:	2108      	movs	r1, #8
 802388e:	4816      	ldr	r0, [pc, #88]	; (80238e8 <W25qxx_ReadUniqID+0x64>)
 8023890:	f7e2 fbfe 	bl	8006090 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8023894:	204b      	movs	r0, #75	; 0x4b
 8023896:	f7ff ffa9 	bl	80237ec <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 802389a:	2300      	movs	r3, #0
 802389c:	71fb      	strb	r3, [r7, #7]
 802389e:	e005      	b.n	80238ac <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80238a0:	20a5      	movs	r0, #165	; 0xa5
 80238a2:	f7ff ffa3 	bl	80237ec <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 80238a6:	79fb      	ldrb	r3, [r7, #7]
 80238a8:	3301      	adds	r3, #1
 80238aa:	71fb      	strb	r3, [r7, #7]
 80238ac:	79fb      	ldrb	r3, [r7, #7]
 80238ae:	2b03      	cmp	r3, #3
 80238b0:	d9f6      	bls.n	80238a0 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80238b2:	2300      	movs	r3, #0
 80238b4:	71bb      	strb	r3, [r7, #6]
 80238b6:	e00b      	b.n	80238d0 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80238b8:	79bc      	ldrb	r4, [r7, #6]
 80238ba:	20a5      	movs	r0, #165	; 0xa5
 80238bc:	f7ff ff96 	bl	80237ec <W25qxx_Spi>
 80238c0:	4603      	mov	r3, r0
 80238c2:	461a      	mov	r2, r3
 80238c4:	4b09      	ldr	r3, [pc, #36]	; (80238ec <W25qxx_ReadUniqID+0x68>)
 80238c6:	4423      	add	r3, r4
 80238c8:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80238ca:	79bb      	ldrb	r3, [r7, #6]
 80238cc:	3301      	adds	r3, #1
 80238ce:	71bb      	strb	r3, [r7, #6]
 80238d0:	79bb      	ldrb	r3, [r7, #6]
 80238d2:	2b07      	cmp	r3, #7
 80238d4:	d9f0      	bls.n	80238b8 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80238d6:	2201      	movs	r2, #1
 80238d8:	2108      	movs	r1, #8
 80238da:	4803      	ldr	r0, [pc, #12]	; (80238e8 <W25qxx_ReadUniqID+0x64>)
 80238dc:	f7e2 fbd8 	bl	8006090 <HAL_GPIO_WritePin>
}
 80238e0:	bf00      	nop
 80238e2:	370c      	adds	r7, #12
 80238e4:	46bd      	mov	sp, r7
 80238e6:	bd90      	pop	{r4, r7, pc}
 80238e8:	40021000 	.word	0x40021000
 80238ec:	20016350 	.word	0x20016350

080238f0 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80238f0:	b580      	push	{r7, lr}
 80238f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80238f4:	2200      	movs	r2, #0
 80238f6:	2108      	movs	r1, #8
 80238f8:	4807      	ldr	r0, [pc, #28]	; (8023918 <W25qxx_WriteEnable+0x28>)
 80238fa:	f7e2 fbc9 	bl	8006090 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80238fe:	2006      	movs	r0, #6
 8023900:	f7ff ff74 	bl	80237ec <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8023904:	2201      	movs	r2, #1
 8023906:	2108      	movs	r1, #8
 8023908:	4803      	ldr	r0, [pc, #12]	; (8023918 <W25qxx_WriteEnable+0x28>)
 802390a:	f7e2 fbc1 	bl	8006090 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 802390e:	2001      	movs	r0, #1
 8023910:	f7e6 fc28 	bl	800a164 <osDelay>
}
 8023914:	bf00      	nop
 8023916:	bd80      	pop	{r7, pc}
 8023918:	40021000 	.word	0x40021000

0802391c <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 802391c:	b580      	push	{r7, lr}
 802391e:	b084      	sub	sp, #16
 8023920:	af00      	add	r7, sp, #0
 8023922:	4603      	mov	r3, r0
 8023924:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 8023926:	2300      	movs	r3, #0
 8023928:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 802392a:	2200      	movs	r2, #0
 802392c:	2108      	movs	r1, #8
 802392e:	481c      	ldr	r0, [pc, #112]	; (80239a0 <W25qxx_ReadStatusRegister+0x84>)
 8023930:	f7e2 fbae 	bl	8006090 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 8023934:	79fb      	ldrb	r3, [r7, #7]
 8023936:	2b01      	cmp	r3, #1
 8023938:	d10c      	bne.n	8023954 <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 802393a:	2005      	movs	r0, #5
 802393c:	f7ff ff56 	bl	80237ec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8023940:	20a5      	movs	r0, #165	; 0xa5
 8023942:	f7ff ff53 	bl	80237ec <W25qxx_Spi>
 8023946:	4603      	mov	r3, r0
 8023948:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 802394a:	4a16      	ldr	r2, [pc, #88]	; (80239a4 <W25qxx_ReadStatusRegister+0x88>)
 802394c:	7bfb      	ldrb	r3, [r7, #15]
 802394e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8023952:	e01b      	b.n	802398c <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 8023954:	79fb      	ldrb	r3, [r7, #7]
 8023956:	2b02      	cmp	r3, #2
 8023958:	d10c      	bne.n	8023974 <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 802395a:	2035      	movs	r0, #53	; 0x35
 802395c:	f7ff ff46 	bl	80237ec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8023960:	20a5      	movs	r0, #165	; 0xa5
 8023962:	f7ff ff43 	bl	80237ec <W25qxx_Spi>
 8023966:	4603      	mov	r3, r0
 8023968:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 802396a:	4a0e      	ldr	r2, [pc, #56]	; (80239a4 <W25qxx_ReadStatusRegister+0x88>)
 802396c:	7bfb      	ldrb	r3, [r7, #15]
 802396e:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 8023972:	e00b      	b.n	802398c <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 8023974:	2015      	movs	r0, #21
 8023976:	f7ff ff39 	bl	80237ec <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 802397a:	20a5      	movs	r0, #165	; 0xa5
 802397c:	f7ff ff36 	bl	80237ec <W25qxx_Spi>
 8023980:	4603      	mov	r3, r0
 8023982:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 8023984:	4a07      	ldr	r2, [pc, #28]	; (80239a4 <W25qxx_ReadStatusRegister+0x88>)
 8023986:	7bfb      	ldrb	r3, [r7, #15]
 8023988:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 802398c:	2201      	movs	r2, #1
 802398e:	2108      	movs	r1, #8
 8023990:	4803      	ldr	r0, [pc, #12]	; (80239a0 <W25qxx_ReadStatusRegister+0x84>)
 8023992:	f7e2 fb7d 	bl	8006090 <HAL_GPIO_WritePin>
	return status;
 8023996:	7bfb      	ldrb	r3, [r7, #15]
}
 8023998:	4618      	mov	r0, r3
 802399a:	3710      	adds	r7, #16
 802399c:	46bd      	mov	sp, r7
 802399e:	bd80      	pop	{r7, pc}
 80239a0:	40021000 	.word	0x40021000
 80239a4:	20016350 	.word	0x20016350

080239a8 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80239a8:	b580      	push	{r7, lr}
 80239aa:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80239ac:	2001      	movs	r0, #1
 80239ae:	f7e6 fbd9 	bl	800a164 <osDelay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80239b2:	2200      	movs	r2, #0
 80239b4:	2108      	movs	r1, #8
 80239b6:	480f      	ldr	r0, [pc, #60]	; (80239f4 <W25qxx_WaitForWriteEnd+0x4c>)
 80239b8:	f7e2 fb6a 	bl	8006090 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80239bc:	2005      	movs	r0, #5
 80239be:	f7ff ff15 	bl	80237ec <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80239c2:	20a5      	movs	r0, #165	; 0xa5
 80239c4:	f7ff ff12 	bl	80237ec <W25qxx_Spi>
 80239c8:	4603      	mov	r3, r0
 80239ca:	461a      	mov	r2, r3
 80239cc:	4b0a      	ldr	r3, [pc, #40]	; (80239f8 <W25qxx_WaitForWriteEnd+0x50>)
 80239ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80239d2:	2001      	movs	r0, #1
 80239d4:	f7e6 fbc6 	bl	800a164 <osDelay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80239d8:	4b07      	ldr	r3, [pc, #28]	; (80239f8 <W25qxx_WaitForWriteEnd+0x50>)
 80239da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80239de:	f003 0301 	and.w	r3, r3, #1
 80239e2:	2b00      	cmp	r3, #0
 80239e4:	d1ed      	bne.n	80239c2 <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80239e6:	2201      	movs	r2, #1
 80239e8:	2108      	movs	r1, #8
 80239ea:	4802      	ldr	r0, [pc, #8]	; (80239f4 <W25qxx_WaitForWriteEnd+0x4c>)
 80239ec:	f7e2 fb50 	bl	8006090 <HAL_GPIO_WritePin>
}
 80239f0:	bf00      	nop
 80239f2:	bd80      	pop	{r7, pc}
 80239f4:	40021000 	.word	0x40021000
 80239f8:	20016350 	.word	0x20016350

080239fc <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80239fc:	b580      	push	{r7, lr}
 80239fe:	b082      	sub	sp, #8
 8023a00:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8023a02:	4b65      	ldr	r3, [pc, #404]	; (8023b98 <W25qxx_Init+0x19c>)
 8023a04:	2201      	movs	r2, #1
 8023a06:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8023a0a:	e002      	b.n	8023a12 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8023a0c:	2001      	movs	r0, #1
 8023a0e:	f7e6 fba9 	bl	800a164 <osDelay>
	while (HAL_GetTick() < 100)
 8023a12:	f7e0 fe1b 	bl	800464c <HAL_GetTick>
 8023a16:	4603      	mov	r3, r0
 8023a18:	2b63      	cmp	r3, #99	; 0x63
 8023a1a:	d9f7      	bls.n	8023a0c <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8023a1c:	2201      	movs	r2, #1
 8023a1e:	2108      	movs	r1, #8
 8023a20:	485e      	ldr	r0, [pc, #376]	; (8023b9c <W25qxx_Init+0x1a0>)
 8023a22:	f7e2 fb35 	bl	8006090 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 8023a26:	2064      	movs	r0, #100	; 0x64
 8023a28:	f7e6 fb9c 	bl	800a164 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8023a2c:	f7ff fef4 	bl	8023818 <W25qxx_ReadID>
 8023a30:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 8023a32:	687b      	ldr	r3, [r7, #4]
 8023a34:	b2db      	uxtb	r3, r3
 8023a36:	3b11      	subs	r3, #17
 8023a38:	2b0f      	cmp	r3, #15
 8023a3a:	d86c      	bhi.n	8023b16 <W25qxx_Init+0x11a>
 8023a3c:	a201      	add	r2, pc, #4	; (adr r2, 8023a44 <W25qxx_Init+0x48>)
 8023a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023a42:	bf00      	nop
 8023a44:	08023b09 	.word	0x08023b09
 8023a48:	08023afb 	.word	0x08023afb
 8023a4c:	08023aed 	.word	0x08023aed
 8023a50:	08023adf 	.word	0x08023adf
 8023a54:	08023ad1 	.word	0x08023ad1
 8023a58:	08023ac3 	.word	0x08023ac3
 8023a5c:	08023ab5 	.word	0x08023ab5
 8023a60:	08023aa5 	.word	0x08023aa5
 8023a64:	08023a95 	.word	0x08023a95
 8023a68:	08023b17 	.word	0x08023b17
 8023a6c:	08023b17 	.word	0x08023b17
 8023a70:	08023b17 	.word	0x08023b17
 8023a74:	08023b17 	.word	0x08023b17
 8023a78:	08023b17 	.word	0x08023b17
 8023a7c:	08023b17 	.word	0x08023b17
 8023a80:	08023a85 	.word	0x08023a85
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 8023a84:	4b44      	ldr	r3, [pc, #272]	; (8023b98 <W25qxx_Init+0x19c>)
 8023a86:	220a      	movs	r2, #10
 8023a88:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8023a8a:	4b43      	ldr	r3, [pc, #268]	; (8023b98 <W25qxx_Init+0x19c>)
 8023a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8023a90:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 8023a92:	e046      	b.n	8023b22 <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 8023a94:	4b40      	ldr	r3, [pc, #256]	; (8023b98 <W25qxx_Init+0x19c>)
 8023a96:	2209      	movs	r2, #9
 8023a98:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8023a9a:	4b3f      	ldr	r3, [pc, #252]	; (8023b98 <W25qxx_Init+0x19c>)
 8023a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8023aa0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 8023aa2:	e03e      	b.n	8023b22 <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 8023aa4:	4b3c      	ldr	r3, [pc, #240]	; (8023b98 <W25qxx_Init+0x19c>)
 8023aa6:	2208      	movs	r2, #8
 8023aa8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 8023aaa:	4b3b      	ldr	r3, [pc, #236]	; (8023b98 <W25qxx_Init+0x19c>)
 8023aac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023ab0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 8023ab2:	e036      	b.n	8023b22 <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 8023ab4:	4b38      	ldr	r3, [pc, #224]	; (8023b98 <W25qxx_Init+0x19c>)
 8023ab6:	2207      	movs	r2, #7
 8023ab8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 8023aba:	4b37      	ldr	r3, [pc, #220]	; (8023b98 <W25qxx_Init+0x19c>)
 8023abc:	2280      	movs	r2, #128	; 0x80
 8023abe:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 8023ac0:	e02f      	b.n	8023b22 <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 8023ac2:	4b35      	ldr	r3, [pc, #212]	; (8023b98 <W25qxx_Init+0x19c>)
 8023ac4:	2206      	movs	r2, #6
 8023ac6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 8023ac8:	4b33      	ldr	r3, [pc, #204]	; (8023b98 <W25qxx_Init+0x19c>)
 8023aca:	2240      	movs	r2, #64	; 0x40
 8023acc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 8023ace:	e028      	b.n	8023b22 <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 8023ad0:	4b31      	ldr	r3, [pc, #196]	; (8023b98 <W25qxx_Init+0x19c>)
 8023ad2:	2205      	movs	r2, #5
 8023ad4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 8023ad6:	4b30      	ldr	r3, [pc, #192]	; (8023b98 <W25qxx_Init+0x19c>)
 8023ad8:	2220      	movs	r2, #32
 8023ada:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 8023adc:	e021      	b.n	8023b22 <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 8023ade:	4b2e      	ldr	r3, [pc, #184]	; (8023b98 <W25qxx_Init+0x19c>)
 8023ae0:	2204      	movs	r2, #4
 8023ae2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 8023ae4:	4b2c      	ldr	r3, [pc, #176]	; (8023b98 <W25qxx_Init+0x19c>)
 8023ae6:	2210      	movs	r2, #16
 8023ae8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 8023aea:	e01a      	b.n	8023b22 <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 8023aec:	4b2a      	ldr	r3, [pc, #168]	; (8023b98 <W25qxx_Init+0x19c>)
 8023aee:	2203      	movs	r2, #3
 8023af0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8023af2:	4b29      	ldr	r3, [pc, #164]	; (8023b98 <W25qxx_Init+0x19c>)
 8023af4:	2208      	movs	r2, #8
 8023af6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 8023af8:	e013      	b.n	8023b22 <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 8023afa:	4b27      	ldr	r3, [pc, #156]	; (8023b98 <W25qxx_Init+0x19c>)
 8023afc:	2202      	movs	r2, #2
 8023afe:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8023b00:	4b25      	ldr	r3, [pc, #148]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b02:	2204      	movs	r2, #4
 8023b04:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 8023b06:	e00c      	b.n	8023b22 <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8023b08:	4b23      	ldr	r3, [pc, #140]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b0a:	2201      	movs	r2, #1
 8023b0c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8023b0e:	4b22      	ldr	r3, [pc, #136]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b10:	2202      	movs	r2, #2
 8023b12:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8023b14:	e005      	b.n	8023b22 <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8023b16:	4b20      	ldr	r3, [pc, #128]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b18:	2200      	movs	r2, #0
 8023b1a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8023b1e:	2300      	movs	r3, #0
 8023b20:	e036      	b.n	8023b90 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8023b22:	4b1d      	ldr	r3, [pc, #116]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8023b28:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8023b2a:	4b1b      	ldr	r3, [pc, #108]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8023b30:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8023b32:	4b19      	ldr	r3, [pc, #100]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b34:	69db      	ldr	r3, [r3, #28]
 8023b36:	011b      	lsls	r3, r3, #4
 8023b38:	4a17      	ldr	r2, [pc, #92]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b3a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8023b3c:	4b16      	ldr	r3, [pc, #88]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b3e:	695b      	ldr	r3, [r3, #20]
 8023b40:	4a15      	ldr	r2, [pc, #84]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b42:	6912      	ldr	r2, [r2, #16]
 8023b44:	fb02 f303 	mul.w	r3, r2, r3
 8023b48:	4a13      	ldr	r2, [pc, #76]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b4a:	8952      	ldrh	r2, [r2, #10]
 8023b4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8023b50:	4a11      	ldr	r2, [pc, #68]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b52:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8023b54:	4b10      	ldr	r3, [pc, #64]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b56:	691b      	ldr	r3, [r3, #16]
 8023b58:	011b      	lsls	r3, r3, #4
 8023b5a:	4a0f      	ldr	r2, [pc, #60]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b5c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8023b5e:	4b0e      	ldr	r3, [pc, #56]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b60:	695b      	ldr	r3, [r3, #20]
 8023b62:	4a0d      	ldr	r2, [pc, #52]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b64:	6912      	ldr	r2, [r2, #16]
 8023b66:	fb02 f303 	mul.w	r3, r2, r3
 8023b6a:	0a9b      	lsrs	r3, r3, #10
 8023b6c:	4a0a      	ldr	r2, [pc, #40]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b6e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8023b70:	f7ff fe88 	bl	8023884 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8023b74:	2001      	movs	r0, #1
 8023b76:	f7ff fed1 	bl	802391c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8023b7a:	2002      	movs	r0, #2
 8023b7c:	f7ff fece 	bl	802391c <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8023b80:	2003      	movs	r0, #3
 8023b82:	f7ff fecb 	bl	802391c <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8023b86:	4b04      	ldr	r3, [pc, #16]	; (8023b98 <W25qxx_Init+0x19c>)
 8023b88:	2200      	movs	r2, #0
 8023b8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8023b8e:	2301      	movs	r3, #1
}
 8023b90:	4618      	mov	r0, r3
 8023b92:	3708      	adds	r7, #8
 8023b94:	46bd      	mov	sp, r7
 8023b96:	bd80      	pop	{r7, pc}
 8023b98:	20016350 	.word	0x20016350
 8023b9c:	40021000 	.word	0x40021000

08023ba0 <W25qxx_EraseSector>:
#endif
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
uint8_t W25qxx_EraseSector(uint32_t SectorAddr) {
 8023ba0:	b580      	push	{r7, lr}
 8023ba2:	b082      	sub	sp, #8
 8023ba4:	af00      	add	r7, sp, #0
 8023ba6:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8023ba8:	e002      	b.n	8023bb0 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8023baa:	2001      	movs	r0, #1
 8023bac:	f7e6 fada 	bl	800a164 <osDelay>
	while (w25qxx.Lock == 1)
 8023bb0:	4b26      	ldr	r3, [pc, #152]	; (8023c4c <W25qxx_EraseSector+0xac>)
 8023bb2:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8023bb6:	2b01      	cmp	r3, #1
 8023bb8:	d0f7      	beq.n	8023baa <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8023bba:	4b24      	ldr	r3, [pc, #144]	; (8023c4c <W25qxx_EraseSector+0xac>)
 8023bbc:	2201      	movs	r2, #1
 8023bbe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8023bc2:	f7ff fef1 	bl	80239a8 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8023bc6:	4b21      	ldr	r3, [pc, #132]	; (8023c4c <W25qxx_EraseSector+0xac>)
 8023bc8:	691a      	ldr	r2, [r3, #16]
 8023bca:	687b      	ldr	r3, [r7, #4]
 8023bcc:	fb02 f303 	mul.w	r3, r2, r3
 8023bd0:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8023bd2:	f7ff fe8d 	bl	80238f0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8023bd6:	2200      	movs	r2, #0
 8023bd8:	2108      	movs	r1, #8
 8023bda:	481d      	ldr	r0, [pc, #116]	; (8023c50 <W25qxx_EraseSector+0xb0>)
 8023bdc:	f7e2 fa58 	bl	8006090 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256) {
 8023be0:	4b1a      	ldr	r3, [pc, #104]	; (8023c4c <W25qxx_EraseSector+0xac>)
 8023be2:	781b      	ldrb	r3, [r3, #0]
 8023be4:	2b08      	cmp	r3, #8
 8023be6:	d909      	bls.n	8023bfc <W25qxx_EraseSector+0x5c>
		W25qxx_Spi(0x21);
 8023be8:	2021      	movs	r0, #33	; 0x21
 8023bea:	f7ff fdff 	bl	80237ec <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8023bee:	687b      	ldr	r3, [r7, #4]
 8023bf0:	0e1b      	lsrs	r3, r3, #24
 8023bf2:	b2db      	uxtb	r3, r3
 8023bf4:	4618      	mov	r0, r3
 8023bf6:	f7ff fdf9 	bl	80237ec <W25qxx_Spi>
 8023bfa:	e002      	b.n	8023c02 <W25qxx_EraseSector+0x62>
	} else {
		W25qxx_Spi(0x20);
 8023bfc:	2020      	movs	r0, #32
 8023bfe:	f7ff fdf5 	bl	80237ec <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8023c02:	687b      	ldr	r3, [r7, #4]
 8023c04:	0c1b      	lsrs	r3, r3, #16
 8023c06:	b2db      	uxtb	r3, r3
 8023c08:	4618      	mov	r0, r3
 8023c0a:	f7ff fdef 	bl	80237ec <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8023c0e:	687b      	ldr	r3, [r7, #4]
 8023c10:	0a1b      	lsrs	r3, r3, #8
 8023c12:	b2db      	uxtb	r3, r3
 8023c14:	4618      	mov	r0, r3
 8023c16:	f7ff fde9 	bl	80237ec <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8023c1a:	687b      	ldr	r3, [r7, #4]
 8023c1c:	b2db      	uxtb	r3, r3
 8023c1e:	4618      	mov	r0, r3
 8023c20:	f7ff fde4 	bl	80237ec <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8023c24:	2201      	movs	r2, #1
 8023c26:	2108      	movs	r1, #8
 8023c28:	4809      	ldr	r0, [pc, #36]	; (8023c50 <W25qxx_EraseSector+0xb0>)
 8023c2a:	f7e2 fa31 	bl	8006090 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8023c2e:	f7ff febb 	bl	80239a8 <W25qxx_WaitForWriteEnd>

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8023c32:	2001      	movs	r0, #1
 8023c34:	f7e6 fa96 	bl	800a164 <osDelay>
	w25qxx.Lock = 0;
 8023c38:	4b04      	ldr	r3, [pc, #16]	; (8023c4c <W25qxx_EraseSector+0xac>)
 8023c3a:	2200      	movs	r2, #0
 8023c3c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 8023c40:	bf00      	nop
 8023c42:	4618      	mov	r0, r3
 8023c44:	3708      	adds	r7, #8
 8023c46:	46bd      	mov	sp, r7
 8023c48:	bd80      	pop	{r7, pc}
 8023c4a:	bf00      	nop
 8023c4c:	20016350 	.word	0x20016350
 8023c50:	40021000 	.word	0x40021000

08023c54 <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8023c54:	b480      	push	{r7}
 8023c56:	b083      	sub	sp, #12
 8023c58:	af00      	add	r7, sp, #0
 8023c5a:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8023c5c:	4b07      	ldr	r3, [pc, #28]	; (8023c7c <W25qxx_SectorToPage+0x28>)
 8023c5e:	691b      	ldr	r3, [r3, #16]
 8023c60:	687a      	ldr	r2, [r7, #4]
 8023c62:	fb02 f303 	mul.w	r3, r2, r3
 8023c66:	4a05      	ldr	r2, [pc, #20]	; (8023c7c <W25qxx_SectorToPage+0x28>)
 8023c68:	8952      	ldrh	r2, [r2, #10]
 8023c6a:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8023c6e:	4618      	mov	r0, r3
 8023c70:	370c      	adds	r7, #12
 8023c72:	46bd      	mov	sp, r7
 8023c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023c78:	4770      	bx	lr
 8023c7a:	bf00      	nop
 8023c7c:	20016350 	.word	0x20016350

08023c80 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8023c80:	b580      	push	{r7, lr}
 8023c82:	b084      	sub	sp, #16
 8023c84:	af00      	add	r7, sp, #0
 8023c86:	60f8      	str	r0, [r7, #12]
 8023c88:	60b9      	str	r1, [r7, #8]
 8023c8a:	607a      	str	r2, [r7, #4]
 8023c8c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8023c8e:	e002      	b.n	8023c96 <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8023c90:	2001      	movs	r0, #1
 8023c92:	f7e6 fa67 	bl	800a164 <osDelay>
	while (w25qxx.Lock == 1)
 8023c96:	4b39      	ldr	r3, [pc, #228]	; (8023d7c <W25qxx_WritePage+0xfc>)
 8023c98:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8023c9c:	2b01      	cmp	r3, #1
 8023c9e:	d0f7      	beq.n	8023c90 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8023ca0:	4b36      	ldr	r3, [pc, #216]	; (8023d7c <W25qxx_WritePage+0xfc>)
 8023ca2:	2201      	movs	r2, #1
 8023ca4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8023ca8:	683a      	ldr	r2, [r7, #0]
 8023caa:	687b      	ldr	r3, [r7, #4]
 8023cac:	4413      	add	r3, r2
 8023cae:	4a33      	ldr	r2, [pc, #204]	; (8023d7c <W25qxx_WritePage+0xfc>)
 8023cb0:	8952      	ldrh	r2, [r2, #10]
 8023cb2:	4293      	cmp	r3, r2
 8023cb4:	d802      	bhi.n	8023cbc <W25qxx_WritePage+0x3c>
 8023cb6:	683b      	ldr	r3, [r7, #0]
 8023cb8:	2b00      	cmp	r3, #0
 8023cba:	d105      	bne.n	8023cc8 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8023cbc:	4b2f      	ldr	r3, [pc, #188]	; (8023d7c <W25qxx_WritePage+0xfc>)
 8023cbe:	895b      	ldrh	r3, [r3, #10]
 8023cc0:	461a      	mov	r2, r3
 8023cc2:	687b      	ldr	r3, [r7, #4]
 8023cc4:	1ad3      	subs	r3, r2, r3
 8023cc6:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8023cc8:	687a      	ldr	r2, [r7, #4]
 8023cca:	683b      	ldr	r3, [r7, #0]
 8023ccc:	4413      	add	r3, r2
 8023cce:	4a2b      	ldr	r2, [pc, #172]	; (8023d7c <W25qxx_WritePage+0xfc>)
 8023cd0:	8952      	ldrh	r2, [r2, #10]
 8023cd2:	4293      	cmp	r3, r2
 8023cd4:	d905      	bls.n	8023ce2 <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8023cd6:	4b29      	ldr	r3, [pc, #164]	; (8023d7c <W25qxx_WritePage+0xfc>)
 8023cd8:	895b      	ldrh	r3, [r3, #10]
 8023cda:	461a      	mov	r2, r3
 8023cdc:	687b      	ldr	r3, [r7, #4]
 8023cde:	1ad3      	subs	r3, r2, r3
 8023ce0:	603b      	str	r3, [r7, #0]

	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();
#endif

	W25qxx_WaitForWriteEnd();
 8023ce2:	f7ff fe61 	bl	80239a8 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8023ce6:	f7ff fe03 	bl	80238f0 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8023cea:	2200      	movs	r2, #0
 8023cec:	2108      	movs	r1, #8
 8023cee:	4824      	ldr	r0, [pc, #144]	; (8023d80 <W25qxx_WritePage+0x100>)
 8023cf0:	f7e2 f9ce 	bl	8006090 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8023cf4:	4b21      	ldr	r3, [pc, #132]	; (8023d7c <W25qxx_WritePage+0xfc>)
 8023cf6:	895b      	ldrh	r3, [r3, #10]
 8023cf8:	461a      	mov	r2, r3
 8023cfa:	68bb      	ldr	r3, [r7, #8]
 8023cfc:	fb02 f303 	mul.w	r3, r2, r3
 8023d00:	687a      	ldr	r2, [r7, #4]
 8023d02:	4413      	add	r3, r2
 8023d04:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8023d06:	4b1d      	ldr	r3, [pc, #116]	; (8023d7c <W25qxx_WritePage+0xfc>)
 8023d08:	781b      	ldrb	r3, [r3, #0]
 8023d0a:	2b08      	cmp	r3, #8
 8023d0c:	d909      	bls.n	8023d22 <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8023d0e:	2012      	movs	r0, #18
 8023d10:	f7ff fd6c 	bl	80237ec <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8023d14:	68bb      	ldr	r3, [r7, #8]
 8023d16:	0e1b      	lsrs	r3, r3, #24
 8023d18:	b2db      	uxtb	r3, r3
 8023d1a:	4618      	mov	r0, r3
 8023d1c:	f7ff fd66 	bl	80237ec <W25qxx_Spi>
 8023d20:	e002      	b.n	8023d28 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8023d22:	2002      	movs	r0, #2
 8023d24:	f7ff fd62 	bl	80237ec <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8023d28:	68bb      	ldr	r3, [r7, #8]
 8023d2a:	0c1b      	lsrs	r3, r3, #16
 8023d2c:	b2db      	uxtb	r3, r3
 8023d2e:	4618      	mov	r0, r3
 8023d30:	f7ff fd5c 	bl	80237ec <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8023d34:	68bb      	ldr	r3, [r7, #8]
 8023d36:	0a1b      	lsrs	r3, r3, #8
 8023d38:	b2db      	uxtb	r3, r3
 8023d3a:	4618      	mov	r0, r3
 8023d3c:	f7ff fd56 	bl	80237ec <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8023d40:	68bb      	ldr	r3, [r7, #8]
 8023d42:	b2db      	uxtb	r3, r3
 8023d44:	4618      	mov	r0, r3
 8023d46:	f7ff fd51 	bl	80237ec <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8023d4a:	683b      	ldr	r3, [r7, #0]
 8023d4c:	b29a      	uxth	r2, r3
 8023d4e:	2364      	movs	r3, #100	; 0x64
 8023d50:	68f9      	ldr	r1, [r7, #12]
 8023d52:	480c      	ldr	r0, [pc, #48]	; (8023d84 <W25qxx_WritePage+0x104>)
 8023d54:	f7e3 ff7f 	bl	8007c56 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8023d58:	2201      	movs	r2, #1
 8023d5a:	2108      	movs	r1, #8
 8023d5c:	4808      	ldr	r0, [pc, #32]	; (8023d80 <W25qxx_WritePage+0x100>)
 8023d5e:	f7e2 f997 	bl	8006090 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8023d62:	f7ff fe21 	bl	80239a8 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8023d66:	2001      	movs	r0, #1
 8023d68:	f7e6 f9fc 	bl	800a164 <osDelay>
	w25qxx.Lock = 0;
 8023d6c:	4b03      	ldr	r3, [pc, #12]	; (8023d7c <W25qxx_WritePage+0xfc>)
 8023d6e:	2200      	movs	r2, #0
 8023d70:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8023d74:	bf00      	nop
 8023d76:	3710      	adds	r7, #16
 8023d78:	46bd      	mov	sp, r7
 8023d7a:	bd80      	pop	{r7, pc}
 8023d7c:	20016350 	.word	0x20016350
 8023d80:	40021000 	.word	0x40021000
 8023d84:	20001f84 	.word	0x20001f84

08023d88 <W25qxx_WriteSector>:
//###################################################################################################################
uint8_t W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8023d88:	b580      	push	{r7, lr}
 8023d8a:	b088      	sub	sp, #32
 8023d8c:	af00      	add	r7, sp, #0
 8023d8e:	60f8      	str	r0, [r7, #12]
 8023d90:	60b9      	str	r1, [r7, #8]
 8023d92:	607a      	str	r2, [r7, #4]
 8023d94:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8023d96:	4b2d      	ldr	r3, [pc, #180]	; (8023e4c <W25qxx_WriteSector+0xc4>)
 8023d98:	691b      	ldr	r3, [r3, #16]
 8023d9a:	683a      	ldr	r2, [r7, #0]
 8023d9c:	429a      	cmp	r2, r3
 8023d9e:	d802      	bhi.n	8023da6 <W25qxx_WriteSector+0x1e>
 8023da0:	683b      	ldr	r3, [r7, #0]
 8023da2:	2b00      	cmp	r3, #0
 8023da4:	d102      	bne.n	8023dac <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8023da6:	4b29      	ldr	r3, [pc, #164]	; (8023e4c <W25qxx_WriteSector+0xc4>)
 8023da8:	691b      	ldr	r3, [r3, #16]
 8023daa:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8023dac:	4b27      	ldr	r3, [pc, #156]	; (8023e4c <W25qxx_WriteSector+0xc4>)
 8023dae:	691b      	ldr	r3, [r3, #16]
 8023db0:	687a      	ldr	r2, [r7, #4]
 8023db2:	429a      	cmp	r2, r3
 8023db4:	d301      	bcc.n	8023dba <W25qxx_WriteSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 8023db6:	2300      	movs	r3, #0
 8023db8:	e043      	b.n	8023e42 <W25qxx_WriteSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8023dba:	687a      	ldr	r2, [r7, #4]
 8023dbc:	683b      	ldr	r3, [r7, #0]
 8023dbe:	441a      	add	r2, r3
 8023dc0:	4b22      	ldr	r3, [pc, #136]	; (8023e4c <W25qxx_WriteSector+0xc4>)
 8023dc2:	691b      	ldr	r3, [r3, #16]
 8023dc4:	429a      	cmp	r2, r3
 8023dc6:	d905      	bls.n	8023dd4 <W25qxx_WriteSector+0x4c>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8023dc8:	4b20      	ldr	r3, [pc, #128]	; (8023e4c <W25qxx_WriteSector+0xc4>)
 8023dca:	691a      	ldr	r2, [r3, #16]
 8023dcc:	687b      	ldr	r3, [r7, #4]
 8023dce:	1ad3      	subs	r3, r2, r3
 8023dd0:	61bb      	str	r3, [r7, #24]
 8023dd2:	e001      	b.n	8023dd8 <W25qxx_WriteSector+0x50>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8023dd4:	683b      	ldr	r3, [r7, #0]
 8023dd6:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8023dd8:	68b8      	ldr	r0, [r7, #8]
 8023dda:	f7ff ff3b 	bl	8023c54 <W25qxx_SectorToPage>
 8023dde:	4602      	mov	r2, r0
 8023de0:	4b1a      	ldr	r3, [pc, #104]	; (8023e4c <W25qxx_WriteSector+0xc4>)
 8023de2:	895b      	ldrh	r3, [r3, #10]
 8023de4:	4619      	mov	r1, r3
 8023de6:	687b      	ldr	r3, [r7, #4]
 8023de8:	fbb3 f3f1 	udiv	r3, r3, r1
 8023dec:	4413      	add	r3, r2
 8023dee:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8023df0:	4b16      	ldr	r3, [pc, #88]	; (8023e4c <W25qxx_WriteSector+0xc4>)
 8023df2:	895b      	ldrh	r3, [r3, #10]
 8023df4:	461a      	mov	r2, r3
 8023df6:	687b      	ldr	r3, [r7, #4]
 8023df8:	fbb3 f1f2 	udiv	r1, r3, r2
 8023dfc:	fb01 f202 	mul.w	r2, r1, r2
 8023e00:	1a9b      	subs	r3, r3, r2
 8023e02:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8023e04:	69bb      	ldr	r3, [r7, #24]
 8023e06:	697a      	ldr	r2, [r7, #20]
 8023e08:	69f9      	ldr	r1, [r7, #28]
 8023e0a:	68f8      	ldr	r0, [r7, #12]
 8023e0c:	f7ff ff38 	bl	8023c80 <W25qxx_WritePage>
		StartPage++;
 8023e10:	69fb      	ldr	r3, [r7, #28]
 8023e12:	3301      	adds	r3, #1
 8023e14:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8023e16:	4b0d      	ldr	r3, [pc, #52]	; (8023e4c <W25qxx_WriteSector+0xc4>)
 8023e18:	895b      	ldrh	r3, [r3, #10]
 8023e1a:	461a      	mov	r2, r3
 8023e1c:	697b      	ldr	r3, [r7, #20]
 8023e1e:	1a9a      	subs	r2, r3, r2
 8023e20:	69bb      	ldr	r3, [r7, #24]
 8023e22:	4413      	add	r3, r2
 8023e24:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8023e26:	4b09      	ldr	r3, [pc, #36]	; (8023e4c <W25qxx_WriteSector+0xc4>)
 8023e28:	895b      	ldrh	r3, [r3, #10]
 8023e2a:	461a      	mov	r2, r3
 8023e2c:	697b      	ldr	r3, [r7, #20]
 8023e2e:	1ad3      	subs	r3, r2, r3
 8023e30:	68fa      	ldr	r2, [r7, #12]
 8023e32:	4413      	add	r3, r2
 8023e34:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8023e36:	2300      	movs	r3, #0
 8023e38:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8023e3a:	69bb      	ldr	r3, [r7, #24]
 8023e3c:	2b00      	cmp	r3, #0
 8023e3e:	dce1      	bgt.n	8023e04 <W25qxx_WriteSector+0x7c>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif

	return 1;
 8023e40:	2301      	movs	r3, #1

}
 8023e42:	4618      	mov	r0, r3
 8023e44:	3720      	adds	r7, #32
 8023e46:	46bd      	mov	sp, r7
 8023e48:	bd80      	pop	{r7, pc}
 8023e4a:	bf00      	nop
 8023e4c:	20016350 	.word	0x20016350

08023e50 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8023e50:	b580      	push	{r7, lr}
 8023e52:	b084      	sub	sp, #16
 8023e54:	af00      	add	r7, sp, #0
 8023e56:	60f8      	str	r0, [r7, #12]
 8023e58:	60b9      	str	r1, [r7, #8]
 8023e5a:	607a      	str	r2, [r7, #4]
 8023e5c:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8023e5e:	e002      	b.n	8023e66 <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8023e60:	2001      	movs	r0, #1
 8023e62:	f7e6 f97f 	bl	800a164 <osDelay>
	while (w25qxx.Lock == 1)
 8023e66:	4b36      	ldr	r3, [pc, #216]	; (8023f40 <W25qxx_ReadPage+0xf0>)
 8023e68:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8023e6c:	2b01      	cmp	r3, #1
 8023e6e:	d0f7      	beq.n	8023e60 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8023e70:	4b33      	ldr	r3, [pc, #204]	; (8023f40 <W25qxx_ReadPage+0xf0>)
 8023e72:	2201      	movs	r2, #1
 8023e74:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8023e78:	4b31      	ldr	r3, [pc, #196]	; (8023f40 <W25qxx_ReadPage+0xf0>)
 8023e7a:	895b      	ldrh	r3, [r3, #10]
 8023e7c:	461a      	mov	r2, r3
 8023e7e:	683b      	ldr	r3, [r7, #0]
 8023e80:	4293      	cmp	r3, r2
 8023e82:	d802      	bhi.n	8023e8a <W25qxx_ReadPage+0x3a>
 8023e84:	683b      	ldr	r3, [r7, #0]
 8023e86:	2b00      	cmp	r3, #0
 8023e88:	d102      	bne.n	8023e90 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8023e8a:	4b2d      	ldr	r3, [pc, #180]	; (8023f40 <W25qxx_ReadPage+0xf0>)
 8023e8c:	895b      	ldrh	r3, [r3, #10]
 8023e8e:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8023e90:	687a      	ldr	r2, [r7, #4]
 8023e92:	683b      	ldr	r3, [r7, #0]
 8023e94:	4413      	add	r3, r2
 8023e96:	4a2a      	ldr	r2, [pc, #168]	; (8023f40 <W25qxx_ReadPage+0xf0>)
 8023e98:	8952      	ldrh	r2, [r2, #10]
 8023e9a:	4293      	cmp	r3, r2
 8023e9c:	d905      	bls.n	8023eaa <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8023e9e:	4b28      	ldr	r3, [pc, #160]	; (8023f40 <W25qxx_ReadPage+0xf0>)
 8023ea0:	895b      	ldrh	r3, [r3, #10]
 8023ea2:	461a      	mov	r2, r3
 8023ea4:	687b      	ldr	r3, [r7, #4]
 8023ea6:	1ad3      	subs	r3, r2, r3
 8023ea8:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG_1 == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();

#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8023eaa:	4b25      	ldr	r3, [pc, #148]	; (8023f40 <W25qxx_ReadPage+0xf0>)
 8023eac:	895b      	ldrh	r3, [r3, #10]
 8023eae:	461a      	mov	r2, r3
 8023eb0:	68bb      	ldr	r3, [r7, #8]
 8023eb2:	fb02 f303 	mul.w	r3, r2, r3
 8023eb6:	687a      	ldr	r2, [r7, #4]
 8023eb8:	4413      	add	r3, r2
 8023eba:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8023ebc:	2200      	movs	r2, #0
 8023ebe:	2108      	movs	r1, #8
 8023ec0:	4820      	ldr	r0, [pc, #128]	; (8023f44 <W25qxx_ReadPage+0xf4>)
 8023ec2:	f7e2 f8e5 	bl	8006090 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8023ec6:	4b1e      	ldr	r3, [pc, #120]	; (8023f40 <W25qxx_ReadPage+0xf0>)
 8023ec8:	781b      	ldrb	r3, [r3, #0]
 8023eca:	2b08      	cmp	r3, #8
 8023ecc:	d909      	bls.n	8023ee2 <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8023ece:	200c      	movs	r0, #12
 8023ed0:	f7ff fc8c 	bl	80237ec <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8023ed4:	68bb      	ldr	r3, [r7, #8]
 8023ed6:	0e1b      	lsrs	r3, r3, #24
 8023ed8:	b2db      	uxtb	r3, r3
 8023eda:	4618      	mov	r0, r3
 8023edc:	f7ff fc86 	bl	80237ec <W25qxx_Spi>
 8023ee0:	e002      	b.n	8023ee8 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8023ee2:	200b      	movs	r0, #11
 8023ee4:	f7ff fc82 	bl	80237ec <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8023ee8:	68bb      	ldr	r3, [r7, #8]
 8023eea:	0c1b      	lsrs	r3, r3, #16
 8023eec:	b2db      	uxtb	r3, r3
 8023eee:	4618      	mov	r0, r3
 8023ef0:	f7ff fc7c 	bl	80237ec <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8023ef4:	68bb      	ldr	r3, [r7, #8]
 8023ef6:	0a1b      	lsrs	r3, r3, #8
 8023ef8:	b2db      	uxtb	r3, r3
 8023efa:	4618      	mov	r0, r3
 8023efc:	f7ff fc76 	bl	80237ec <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8023f00:	68bb      	ldr	r3, [r7, #8]
 8023f02:	b2db      	uxtb	r3, r3
 8023f04:	4618      	mov	r0, r3
 8023f06:	f7ff fc71 	bl	80237ec <W25qxx_Spi>
	W25qxx_Spi(0);
 8023f0a:	2000      	movs	r0, #0
 8023f0c:	f7ff fc6e 	bl	80237ec <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8023f10:	683b      	ldr	r3, [r7, #0]
 8023f12:	b29a      	uxth	r2, r3
 8023f14:	2364      	movs	r3, #100	; 0x64
 8023f16:	68f9      	ldr	r1, [r7, #12]
 8023f18:	480b      	ldr	r0, [pc, #44]	; (8023f48 <W25qxx_ReadPage+0xf8>)
 8023f1a:	f7e3 ffdf 	bl	8007edc <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8023f1e:	2201      	movs	r2, #1
 8023f20:	2108      	movs	r1, #8
 8023f22:	4808      	ldr	r0, [pc, #32]	; (8023f44 <W25qxx_ReadPage+0xf4>)
 8023f24:	f7e2 f8b4 	bl	8006090 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8023f28:	2001      	movs	r0, #1
 8023f2a:	f7e6 f91b 	bl	800a164 <osDelay>
	w25qxx.Lock = 0;
 8023f2e:	4b04      	ldr	r3, [pc, #16]	; (8023f40 <W25qxx_ReadPage+0xf0>)
 8023f30:	2200      	movs	r2, #0
 8023f32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8023f36:	bf00      	nop
 8023f38:	3710      	adds	r7, #16
 8023f3a:	46bd      	mov	sp, r7
 8023f3c:	bd80      	pop	{r7, pc}
 8023f3e:	bf00      	nop
 8023f40:	20016350 	.word	0x20016350
 8023f44:	40021000 	.word	0x40021000
 8023f48:	20001f84 	.word	0x20001f84

08023f4c <W25qxx_ReadSector>:
//###################################################################################################################
uint8_t W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8023f4c:	b580      	push	{r7, lr}
 8023f4e:	b088      	sub	sp, #32
 8023f50:	af00      	add	r7, sp, #0
 8023f52:	60f8      	str	r0, [r7, #12]
 8023f54:	60b9      	str	r1, [r7, #8]
 8023f56:	607a      	str	r2, [r7, #4]
 8023f58:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8023f5a:	4b2d      	ldr	r3, [pc, #180]	; (8024010 <W25qxx_ReadSector+0xc4>)
 8023f5c:	691b      	ldr	r3, [r3, #16]
 8023f5e:	683a      	ldr	r2, [r7, #0]
 8023f60:	429a      	cmp	r2, r3
 8023f62:	d802      	bhi.n	8023f6a <W25qxx_ReadSector+0x1e>
 8023f64:	683b      	ldr	r3, [r7, #0]
 8023f66:	2b00      	cmp	r3, #0
 8023f68:	d102      	bne.n	8023f70 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8023f6a:	4b29      	ldr	r3, [pc, #164]	; (8024010 <W25qxx_ReadSector+0xc4>)
 8023f6c:	691b      	ldr	r3, [r3, #16]
 8023f6e:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8023f70:	4b27      	ldr	r3, [pc, #156]	; (8024010 <W25qxx_ReadSector+0xc4>)
 8023f72:	691b      	ldr	r3, [r3, #16]
 8023f74:	687a      	ldr	r2, [r7, #4]
 8023f76:	429a      	cmp	r2, r3
 8023f78:	d301      	bcc.n	8023f7e <W25qxx_ReadSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 8023f7a:	2300      	movs	r3, #0
 8023f7c:	e043      	b.n	8024006 <W25qxx_ReadSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8023f7e:	687a      	ldr	r2, [r7, #4]
 8023f80:	683b      	ldr	r3, [r7, #0]
 8023f82:	441a      	add	r2, r3
 8023f84:	4b22      	ldr	r3, [pc, #136]	; (8024010 <W25qxx_ReadSector+0xc4>)
 8023f86:	691b      	ldr	r3, [r3, #16]
 8023f88:	429a      	cmp	r2, r3
 8023f8a:	d905      	bls.n	8023f98 <W25qxx_ReadSector+0x4c>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8023f8c:	4b20      	ldr	r3, [pc, #128]	; (8024010 <W25qxx_ReadSector+0xc4>)
 8023f8e:	691a      	ldr	r2, [r3, #16]
 8023f90:	687b      	ldr	r3, [r7, #4]
 8023f92:	1ad3      	subs	r3, r2, r3
 8023f94:	61bb      	str	r3, [r7, #24]
 8023f96:	e001      	b.n	8023f9c <W25qxx_ReadSector+0x50>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8023f98:	683b      	ldr	r3, [r7, #0]
 8023f9a:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8023f9c:	68b8      	ldr	r0, [r7, #8]
 8023f9e:	f7ff fe59 	bl	8023c54 <W25qxx_SectorToPage>
 8023fa2:	4602      	mov	r2, r0
 8023fa4:	4b1a      	ldr	r3, [pc, #104]	; (8024010 <W25qxx_ReadSector+0xc4>)
 8023fa6:	895b      	ldrh	r3, [r3, #10]
 8023fa8:	4619      	mov	r1, r3
 8023faa:	687b      	ldr	r3, [r7, #4]
 8023fac:	fbb3 f3f1 	udiv	r3, r3, r1
 8023fb0:	4413      	add	r3, r2
 8023fb2:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8023fb4:	4b16      	ldr	r3, [pc, #88]	; (8024010 <W25qxx_ReadSector+0xc4>)
 8023fb6:	895b      	ldrh	r3, [r3, #10]
 8023fb8:	461a      	mov	r2, r3
 8023fba:	687b      	ldr	r3, [r7, #4]
 8023fbc:	fbb3 f1f2 	udiv	r1, r3, r2
 8023fc0:	fb01 f202 	mul.w	r2, r1, r2
 8023fc4:	1a9b      	subs	r3, r3, r2
 8023fc6:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8023fc8:	69bb      	ldr	r3, [r7, #24]
 8023fca:	697a      	ldr	r2, [r7, #20]
 8023fcc:	69f9      	ldr	r1, [r7, #28]
 8023fce:	68f8      	ldr	r0, [r7, #12]
 8023fd0:	f7ff ff3e 	bl	8023e50 <W25qxx_ReadPage>
		StartPage++;
 8023fd4:	69fb      	ldr	r3, [r7, #28]
 8023fd6:	3301      	adds	r3, #1
 8023fd8:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8023fda:	4b0d      	ldr	r3, [pc, #52]	; (8024010 <W25qxx_ReadSector+0xc4>)
 8023fdc:	895b      	ldrh	r3, [r3, #10]
 8023fde:	461a      	mov	r2, r3
 8023fe0:	697b      	ldr	r3, [r7, #20]
 8023fe2:	1a9a      	subs	r2, r3, r2
 8023fe4:	69bb      	ldr	r3, [r7, #24]
 8023fe6:	4413      	add	r3, r2
 8023fe8:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8023fea:	4b09      	ldr	r3, [pc, #36]	; (8024010 <W25qxx_ReadSector+0xc4>)
 8023fec:	895b      	ldrh	r3, [r3, #10]
 8023fee:	461a      	mov	r2, r3
 8023ff0:	697b      	ldr	r3, [r7, #20]
 8023ff2:	1ad3      	subs	r3, r2, r3
 8023ff4:	68fa      	ldr	r2, [r7, #12]
 8023ff6:	4413      	add	r3, r2
 8023ff8:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8023ffa:	2300      	movs	r3, #0
 8023ffc:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8023ffe:	69bb      	ldr	r3, [r7, #24]
 8024000:	2b00      	cmp	r3, #0
 8024002:	dce1      	bgt.n	8023fc8 <W25qxx_ReadSector+0x7c>
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif


	return 1;
 8024004:	2301      	movs	r3, #1
}
 8024006:	4618      	mov	r0, r3
 8024008:	3720      	adds	r7, #32
 802400a:	46bd      	mov	sp, r7
 802400c:	bd80      	pop	{r7, pc}
 802400e:	bf00      	nop
 8024010:	20016350 	.word	0x20016350

08024014 <__assert_func>:
 8024014:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024016:	4614      	mov	r4, r2
 8024018:	461a      	mov	r2, r3
 802401a:	4b09      	ldr	r3, [pc, #36]	; (8024040 <__assert_func+0x2c>)
 802401c:	681b      	ldr	r3, [r3, #0]
 802401e:	4605      	mov	r5, r0
 8024020:	68d8      	ldr	r0, [r3, #12]
 8024022:	b14c      	cbz	r4, 8024038 <__assert_func+0x24>
 8024024:	4b07      	ldr	r3, [pc, #28]	; (8024044 <__assert_func+0x30>)
 8024026:	9100      	str	r1, [sp, #0]
 8024028:	e9cd 3401 	strd	r3, r4, [sp, #4]
 802402c:	4906      	ldr	r1, [pc, #24]	; (8024048 <__assert_func+0x34>)
 802402e:	462b      	mov	r3, r5
 8024030:	f000 fe96 	bl	8024d60 <fiprintf>
 8024034:	f002 fb91 	bl	802675a <abort>
 8024038:	4b04      	ldr	r3, [pc, #16]	; (802404c <__assert_func+0x38>)
 802403a:	461c      	mov	r4, r3
 802403c:	e7f3      	b.n	8024026 <__assert_func+0x12>
 802403e:	bf00      	nop
 8024040:	200000a0 	.word	0x200000a0
 8024044:	0802e540 	.word	0x0802e540
 8024048:	0802e54d 	.word	0x0802e54d
 802404c:	0802e57b 	.word	0x0802e57b

08024050 <malloc>:
 8024050:	4b02      	ldr	r3, [pc, #8]	; (802405c <malloc+0xc>)
 8024052:	4601      	mov	r1, r0
 8024054:	6818      	ldr	r0, [r3, #0]
 8024056:	f000 b82b 	b.w	80240b0 <_malloc_r>
 802405a:	bf00      	nop
 802405c:	200000a0 	.word	0x200000a0

08024060 <free>:
 8024060:	4b02      	ldr	r3, [pc, #8]	; (802406c <free+0xc>)
 8024062:	4601      	mov	r1, r0
 8024064:	6818      	ldr	r0, [r3, #0]
 8024066:	f003 b9fd 	b.w	8027464 <_free_r>
 802406a:	bf00      	nop
 802406c:	200000a0 	.word	0x200000a0

08024070 <sbrk_aligned>:
 8024070:	b570      	push	{r4, r5, r6, lr}
 8024072:	4e0e      	ldr	r6, [pc, #56]	; (80240ac <sbrk_aligned+0x3c>)
 8024074:	460c      	mov	r4, r1
 8024076:	6831      	ldr	r1, [r6, #0]
 8024078:	4605      	mov	r5, r0
 802407a:	b911      	cbnz	r1, 8024082 <sbrk_aligned+0x12>
 802407c:	f002 fb06 	bl	802668c <_sbrk_r>
 8024080:	6030      	str	r0, [r6, #0]
 8024082:	4621      	mov	r1, r4
 8024084:	4628      	mov	r0, r5
 8024086:	f002 fb01 	bl	802668c <_sbrk_r>
 802408a:	1c43      	adds	r3, r0, #1
 802408c:	d00a      	beq.n	80240a4 <sbrk_aligned+0x34>
 802408e:	1cc4      	adds	r4, r0, #3
 8024090:	f024 0403 	bic.w	r4, r4, #3
 8024094:	42a0      	cmp	r0, r4
 8024096:	d007      	beq.n	80240a8 <sbrk_aligned+0x38>
 8024098:	1a21      	subs	r1, r4, r0
 802409a:	4628      	mov	r0, r5
 802409c:	f002 faf6 	bl	802668c <_sbrk_r>
 80240a0:	3001      	adds	r0, #1
 80240a2:	d101      	bne.n	80240a8 <sbrk_aligned+0x38>
 80240a4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80240a8:	4620      	mov	r0, r4
 80240aa:	bd70      	pop	{r4, r5, r6, pc}
 80240ac:	2001637c 	.word	0x2001637c

080240b0 <_malloc_r>:
 80240b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80240b4:	1ccd      	adds	r5, r1, #3
 80240b6:	f025 0503 	bic.w	r5, r5, #3
 80240ba:	3508      	adds	r5, #8
 80240bc:	2d0c      	cmp	r5, #12
 80240be:	bf38      	it	cc
 80240c0:	250c      	movcc	r5, #12
 80240c2:	2d00      	cmp	r5, #0
 80240c4:	4607      	mov	r7, r0
 80240c6:	db01      	blt.n	80240cc <_malloc_r+0x1c>
 80240c8:	42a9      	cmp	r1, r5
 80240ca:	d905      	bls.n	80240d8 <_malloc_r+0x28>
 80240cc:	230c      	movs	r3, #12
 80240ce:	603b      	str	r3, [r7, #0]
 80240d0:	2600      	movs	r6, #0
 80240d2:	4630      	mov	r0, r6
 80240d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80240d8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80241ac <_malloc_r+0xfc>
 80240dc:	f000 f868 	bl	80241b0 <__malloc_lock>
 80240e0:	f8d8 3000 	ldr.w	r3, [r8]
 80240e4:	461c      	mov	r4, r3
 80240e6:	bb5c      	cbnz	r4, 8024140 <_malloc_r+0x90>
 80240e8:	4629      	mov	r1, r5
 80240ea:	4638      	mov	r0, r7
 80240ec:	f7ff ffc0 	bl	8024070 <sbrk_aligned>
 80240f0:	1c43      	adds	r3, r0, #1
 80240f2:	4604      	mov	r4, r0
 80240f4:	d155      	bne.n	80241a2 <_malloc_r+0xf2>
 80240f6:	f8d8 4000 	ldr.w	r4, [r8]
 80240fa:	4626      	mov	r6, r4
 80240fc:	2e00      	cmp	r6, #0
 80240fe:	d145      	bne.n	802418c <_malloc_r+0xdc>
 8024100:	2c00      	cmp	r4, #0
 8024102:	d048      	beq.n	8024196 <_malloc_r+0xe6>
 8024104:	6823      	ldr	r3, [r4, #0]
 8024106:	4631      	mov	r1, r6
 8024108:	4638      	mov	r0, r7
 802410a:	eb04 0903 	add.w	r9, r4, r3
 802410e:	f002 fabd 	bl	802668c <_sbrk_r>
 8024112:	4581      	cmp	r9, r0
 8024114:	d13f      	bne.n	8024196 <_malloc_r+0xe6>
 8024116:	6821      	ldr	r1, [r4, #0]
 8024118:	1a6d      	subs	r5, r5, r1
 802411a:	4629      	mov	r1, r5
 802411c:	4638      	mov	r0, r7
 802411e:	f7ff ffa7 	bl	8024070 <sbrk_aligned>
 8024122:	3001      	adds	r0, #1
 8024124:	d037      	beq.n	8024196 <_malloc_r+0xe6>
 8024126:	6823      	ldr	r3, [r4, #0]
 8024128:	442b      	add	r3, r5
 802412a:	6023      	str	r3, [r4, #0]
 802412c:	f8d8 3000 	ldr.w	r3, [r8]
 8024130:	2b00      	cmp	r3, #0
 8024132:	d038      	beq.n	80241a6 <_malloc_r+0xf6>
 8024134:	685a      	ldr	r2, [r3, #4]
 8024136:	42a2      	cmp	r2, r4
 8024138:	d12b      	bne.n	8024192 <_malloc_r+0xe2>
 802413a:	2200      	movs	r2, #0
 802413c:	605a      	str	r2, [r3, #4]
 802413e:	e00f      	b.n	8024160 <_malloc_r+0xb0>
 8024140:	6822      	ldr	r2, [r4, #0]
 8024142:	1b52      	subs	r2, r2, r5
 8024144:	d41f      	bmi.n	8024186 <_malloc_r+0xd6>
 8024146:	2a0b      	cmp	r2, #11
 8024148:	d917      	bls.n	802417a <_malloc_r+0xca>
 802414a:	1961      	adds	r1, r4, r5
 802414c:	42a3      	cmp	r3, r4
 802414e:	6025      	str	r5, [r4, #0]
 8024150:	bf18      	it	ne
 8024152:	6059      	strne	r1, [r3, #4]
 8024154:	6863      	ldr	r3, [r4, #4]
 8024156:	bf08      	it	eq
 8024158:	f8c8 1000 	streq.w	r1, [r8]
 802415c:	5162      	str	r2, [r4, r5]
 802415e:	604b      	str	r3, [r1, #4]
 8024160:	4638      	mov	r0, r7
 8024162:	f104 060b 	add.w	r6, r4, #11
 8024166:	f000 f829 	bl	80241bc <__malloc_unlock>
 802416a:	f026 0607 	bic.w	r6, r6, #7
 802416e:	1d23      	adds	r3, r4, #4
 8024170:	1af2      	subs	r2, r6, r3
 8024172:	d0ae      	beq.n	80240d2 <_malloc_r+0x22>
 8024174:	1b9b      	subs	r3, r3, r6
 8024176:	50a3      	str	r3, [r4, r2]
 8024178:	e7ab      	b.n	80240d2 <_malloc_r+0x22>
 802417a:	42a3      	cmp	r3, r4
 802417c:	6862      	ldr	r2, [r4, #4]
 802417e:	d1dd      	bne.n	802413c <_malloc_r+0x8c>
 8024180:	f8c8 2000 	str.w	r2, [r8]
 8024184:	e7ec      	b.n	8024160 <_malloc_r+0xb0>
 8024186:	4623      	mov	r3, r4
 8024188:	6864      	ldr	r4, [r4, #4]
 802418a:	e7ac      	b.n	80240e6 <_malloc_r+0x36>
 802418c:	4634      	mov	r4, r6
 802418e:	6876      	ldr	r6, [r6, #4]
 8024190:	e7b4      	b.n	80240fc <_malloc_r+0x4c>
 8024192:	4613      	mov	r3, r2
 8024194:	e7cc      	b.n	8024130 <_malloc_r+0x80>
 8024196:	230c      	movs	r3, #12
 8024198:	603b      	str	r3, [r7, #0]
 802419a:	4638      	mov	r0, r7
 802419c:	f000 f80e 	bl	80241bc <__malloc_unlock>
 80241a0:	e797      	b.n	80240d2 <_malloc_r+0x22>
 80241a2:	6025      	str	r5, [r4, #0]
 80241a4:	e7dc      	b.n	8024160 <_malloc_r+0xb0>
 80241a6:	605b      	str	r3, [r3, #4]
 80241a8:	deff      	udf	#255	; 0xff
 80241aa:	bf00      	nop
 80241ac:	20016378 	.word	0x20016378

080241b0 <__malloc_lock>:
 80241b0:	4801      	ldr	r0, [pc, #4]	; (80241b8 <__malloc_lock+0x8>)
 80241b2:	f002 bab9 	b.w	8026728 <__retarget_lock_acquire_recursive>
 80241b6:	bf00      	nop
 80241b8:	200164e5 	.word	0x200164e5

080241bc <__malloc_unlock>:
 80241bc:	4801      	ldr	r0, [pc, #4]	; (80241c4 <__malloc_unlock+0x8>)
 80241be:	f002 bab5 	b.w	802672c <__retarget_lock_release_recursive>
 80241c2:	bf00      	nop
 80241c4:	200164e5 	.word	0x200164e5

080241c8 <rand>:
 80241c8:	4b16      	ldr	r3, [pc, #88]	; (8024224 <rand+0x5c>)
 80241ca:	b510      	push	{r4, lr}
 80241cc:	681c      	ldr	r4, [r3, #0]
 80241ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80241d0:	b9b3      	cbnz	r3, 8024200 <rand+0x38>
 80241d2:	2018      	movs	r0, #24
 80241d4:	f7ff ff3c 	bl	8024050 <malloc>
 80241d8:	4602      	mov	r2, r0
 80241da:	6320      	str	r0, [r4, #48]	; 0x30
 80241dc:	b920      	cbnz	r0, 80241e8 <rand+0x20>
 80241de:	4b12      	ldr	r3, [pc, #72]	; (8024228 <rand+0x60>)
 80241e0:	4812      	ldr	r0, [pc, #72]	; (802422c <rand+0x64>)
 80241e2:	2152      	movs	r1, #82	; 0x52
 80241e4:	f7ff ff16 	bl	8024014 <__assert_func>
 80241e8:	4911      	ldr	r1, [pc, #68]	; (8024230 <rand+0x68>)
 80241ea:	4b12      	ldr	r3, [pc, #72]	; (8024234 <rand+0x6c>)
 80241ec:	e9c0 1300 	strd	r1, r3, [r0]
 80241f0:	4b11      	ldr	r3, [pc, #68]	; (8024238 <rand+0x70>)
 80241f2:	6083      	str	r3, [r0, #8]
 80241f4:	230b      	movs	r3, #11
 80241f6:	8183      	strh	r3, [r0, #12]
 80241f8:	2100      	movs	r1, #0
 80241fa:	2001      	movs	r0, #1
 80241fc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8024200:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8024202:	480e      	ldr	r0, [pc, #56]	; (802423c <rand+0x74>)
 8024204:	690b      	ldr	r3, [r1, #16]
 8024206:	694c      	ldr	r4, [r1, #20]
 8024208:	4a0d      	ldr	r2, [pc, #52]	; (8024240 <rand+0x78>)
 802420a:	4358      	muls	r0, r3
 802420c:	fb02 0004 	mla	r0, r2, r4, r0
 8024210:	fba3 3202 	umull	r3, r2, r3, r2
 8024214:	3301      	adds	r3, #1
 8024216:	eb40 0002 	adc.w	r0, r0, r2
 802421a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 802421e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8024222:	bd10      	pop	{r4, pc}
 8024224:	200000a0 	.word	0x200000a0
 8024228:	0802e57c 	.word	0x0802e57c
 802422c:	0802e593 	.word	0x0802e593
 8024230:	abcd330e 	.word	0xabcd330e
 8024234:	e66d1234 	.word	0xe66d1234
 8024238:	0005deec 	.word	0x0005deec
 802423c:	5851f42d 	.word	0x5851f42d
 8024240:	4c957f2d 	.word	0x4c957f2d

08024244 <_strtol_l.constprop.0>:
 8024244:	2b01      	cmp	r3, #1
 8024246:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802424a:	d001      	beq.n	8024250 <_strtol_l.constprop.0+0xc>
 802424c:	2b24      	cmp	r3, #36	; 0x24
 802424e:	d906      	bls.n	802425e <_strtol_l.constprop.0+0x1a>
 8024250:	f002 fa3e 	bl	80266d0 <__errno>
 8024254:	2316      	movs	r3, #22
 8024256:	6003      	str	r3, [r0, #0]
 8024258:	2000      	movs	r0, #0
 802425a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802425e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8024344 <_strtol_l.constprop.0+0x100>
 8024262:	460d      	mov	r5, r1
 8024264:	462e      	mov	r6, r5
 8024266:	f815 4b01 	ldrb.w	r4, [r5], #1
 802426a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 802426e:	f017 0708 	ands.w	r7, r7, #8
 8024272:	d1f7      	bne.n	8024264 <_strtol_l.constprop.0+0x20>
 8024274:	2c2d      	cmp	r4, #45	; 0x2d
 8024276:	d132      	bne.n	80242de <_strtol_l.constprop.0+0x9a>
 8024278:	782c      	ldrb	r4, [r5, #0]
 802427a:	2701      	movs	r7, #1
 802427c:	1cb5      	adds	r5, r6, #2
 802427e:	2b00      	cmp	r3, #0
 8024280:	d05b      	beq.n	802433a <_strtol_l.constprop.0+0xf6>
 8024282:	2b10      	cmp	r3, #16
 8024284:	d109      	bne.n	802429a <_strtol_l.constprop.0+0x56>
 8024286:	2c30      	cmp	r4, #48	; 0x30
 8024288:	d107      	bne.n	802429a <_strtol_l.constprop.0+0x56>
 802428a:	782c      	ldrb	r4, [r5, #0]
 802428c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8024290:	2c58      	cmp	r4, #88	; 0x58
 8024292:	d14d      	bne.n	8024330 <_strtol_l.constprop.0+0xec>
 8024294:	786c      	ldrb	r4, [r5, #1]
 8024296:	2310      	movs	r3, #16
 8024298:	3502      	adds	r5, #2
 802429a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802429e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80242a2:	f04f 0e00 	mov.w	lr, #0
 80242a6:	fbb8 f9f3 	udiv	r9, r8, r3
 80242aa:	4676      	mov	r6, lr
 80242ac:	fb03 8a19 	mls	sl, r3, r9, r8
 80242b0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80242b4:	f1bc 0f09 	cmp.w	ip, #9
 80242b8:	d816      	bhi.n	80242e8 <_strtol_l.constprop.0+0xa4>
 80242ba:	4664      	mov	r4, ip
 80242bc:	42a3      	cmp	r3, r4
 80242be:	dd24      	ble.n	802430a <_strtol_l.constprop.0+0xc6>
 80242c0:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 80242c4:	d008      	beq.n	80242d8 <_strtol_l.constprop.0+0x94>
 80242c6:	45b1      	cmp	r9, r6
 80242c8:	d31c      	bcc.n	8024304 <_strtol_l.constprop.0+0xc0>
 80242ca:	d101      	bne.n	80242d0 <_strtol_l.constprop.0+0x8c>
 80242cc:	45a2      	cmp	sl, r4
 80242ce:	db19      	blt.n	8024304 <_strtol_l.constprop.0+0xc0>
 80242d0:	fb06 4603 	mla	r6, r6, r3, r4
 80242d4:	f04f 0e01 	mov.w	lr, #1
 80242d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80242dc:	e7e8      	b.n	80242b0 <_strtol_l.constprop.0+0x6c>
 80242de:	2c2b      	cmp	r4, #43	; 0x2b
 80242e0:	bf04      	itt	eq
 80242e2:	782c      	ldrbeq	r4, [r5, #0]
 80242e4:	1cb5      	addeq	r5, r6, #2
 80242e6:	e7ca      	b.n	802427e <_strtol_l.constprop.0+0x3a>
 80242e8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80242ec:	f1bc 0f19 	cmp.w	ip, #25
 80242f0:	d801      	bhi.n	80242f6 <_strtol_l.constprop.0+0xb2>
 80242f2:	3c37      	subs	r4, #55	; 0x37
 80242f4:	e7e2      	b.n	80242bc <_strtol_l.constprop.0+0x78>
 80242f6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80242fa:	f1bc 0f19 	cmp.w	ip, #25
 80242fe:	d804      	bhi.n	802430a <_strtol_l.constprop.0+0xc6>
 8024300:	3c57      	subs	r4, #87	; 0x57
 8024302:	e7db      	b.n	80242bc <_strtol_l.constprop.0+0x78>
 8024304:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8024308:	e7e6      	b.n	80242d8 <_strtol_l.constprop.0+0x94>
 802430a:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
 802430e:	d105      	bne.n	802431c <_strtol_l.constprop.0+0xd8>
 8024310:	2322      	movs	r3, #34	; 0x22
 8024312:	6003      	str	r3, [r0, #0]
 8024314:	4646      	mov	r6, r8
 8024316:	b942      	cbnz	r2, 802432a <_strtol_l.constprop.0+0xe6>
 8024318:	4630      	mov	r0, r6
 802431a:	e79e      	b.n	802425a <_strtol_l.constprop.0+0x16>
 802431c:	b107      	cbz	r7, 8024320 <_strtol_l.constprop.0+0xdc>
 802431e:	4276      	negs	r6, r6
 8024320:	2a00      	cmp	r2, #0
 8024322:	d0f9      	beq.n	8024318 <_strtol_l.constprop.0+0xd4>
 8024324:	f1be 0f00 	cmp.w	lr, #0
 8024328:	d000      	beq.n	802432c <_strtol_l.constprop.0+0xe8>
 802432a:	1e69      	subs	r1, r5, #1
 802432c:	6011      	str	r1, [r2, #0]
 802432e:	e7f3      	b.n	8024318 <_strtol_l.constprop.0+0xd4>
 8024330:	2430      	movs	r4, #48	; 0x30
 8024332:	2b00      	cmp	r3, #0
 8024334:	d1b1      	bne.n	802429a <_strtol_l.constprop.0+0x56>
 8024336:	2308      	movs	r3, #8
 8024338:	e7af      	b.n	802429a <_strtol_l.constprop.0+0x56>
 802433a:	2c30      	cmp	r4, #48	; 0x30
 802433c:	d0a5      	beq.n	802428a <_strtol_l.constprop.0+0x46>
 802433e:	230a      	movs	r3, #10
 8024340:	e7ab      	b.n	802429a <_strtol_l.constprop.0+0x56>
 8024342:	bf00      	nop
 8024344:	0802e5ec 	.word	0x0802e5ec

08024348 <_strtol_r>:
 8024348:	f7ff bf7c 	b.w	8024244 <_strtol_l.constprop.0>

0802434c <__cvt>:
 802434c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024350:	ec55 4b10 	vmov	r4, r5, d0
 8024354:	2d00      	cmp	r5, #0
 8024356:	460e      	mov	r6, r1
 8024358:	4619      	mov	r1, r3
 802435a:	462b      	mov	r3, r5
 802435c:	bfbb      	ittet	lt
 802435e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8024362:	461d      	movlt	r5, r3
 8024364:	2300      	movge	r3, #0
 8024366:	232d      	movlt	r3, #45	; 0x2d
 8024368:	700b      	strb	r3, [r1, #0]
 802436a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802436c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8024370:	4691      	mov	r9, r2
 8024372:	f023 0820 	bic.w	r8, r3, #32
 8024376:	bfbc      	itt	lt
 8024378:	4622      	movlt	r2, r4
 802437a:	4614      	movlt	r4, r2
 802437c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024380:	d005      	beq.n	802438e <__cvt+0x42>
 8024382:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8024386:	d100      	bne.n	802438a <__cvt+0x3e>
 8024388:	3601      	adds	r6, #1
 802438a:	2102      	movs	r1, #2
 802438c:	e000      	b.n	8024390 <__cvt+0x44>
 802438e:	2103      	movs	r1, #3
 8024390:	ab03      	add	r3, sp, #12
 8024392:	9301      	str	r3, [sp, #4]
 8024394:	ab02      	add	r3, sp, #8
 8024396:	9300      	str	r3, [sp, #0]
 8024398:	ec45 4b10 	vmov	d0, r4, r5
 802439c:	4653      	mov	r3, sl
 802439e:	4632      	mov	r2, r6
 80243a0:	f002 fa6e 	bl	8026880 <_dtoa_r>
 80243a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80243a8:	4607      	mov	r7, r0
 80243aa:	d102      	bne.n	80243b2 <__cvt+0x66>
 80243ac:	f019 0f01 	tst.w	r9, #1
 80243b0:	d022      	beq.n	80243f8 <__cvt+0xac>
 80243b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80243b6:	eb07 0906 	add.w	r9, r7, r6
 80243ba:	d110      	bne.n	80243de <__cvt+0x92>
 80243bc:	783b      	ldrb	r3, [r7, #0]
 80243be:	2b30      	cmp	r3, #48	; 0x30
 80243c0:	d10a      	bne.n	80243d8 <__cvt+0x8c>
 80243c2:	2200      	movs	r2, #0
 80243c4:	2300      	movs	r3, #0
 80243c6:	4620      	mov	r0, r4
 80243c8:	4629      	mov	r1, r5
 80243ca:	f7dc fb8d 	bl	8000ae8 <__aeabi_dcmpeq>
 80243ce:	b918      	cbnz	r0, 80243d8 <__cvt+0x8c>
 80243d0:	f1c6 0601 	rsb	r6, r6, #1
 80243d4:	f8ca 6000 	str.w	r6, [sl]
 80243d8:	f8da 3000 	ldr.w	r3, [sl]
 80243dc:	4499      	add	r9, r3
 80243de:	2200      	movs	r2, #0
 80243e0:	2300      	movs	r3, #0
 80243e2:	4620      	mov	r0, r4
 80243e4:	4629      	mov	r1, r5
 80243e6:	f7dc fb7f 	bl	8000ae8 <__aeabi_dcmpeq>
 80243ea:	b108      	cbz	r0, 80243f0 <__cvt+0xa4>
 80243ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80243f0:	2230      	movs	r2, #48	; 0x30
 80243f2:	9b03      	ldr	r3, [sp, #12]
 80243f4:	454b      	cmp	r3, r9
 80243f6:	d307      	bcc.n	8024408 <__cvt+0xbc>
 80243f8:	9b03      	ldr	r3, [sp, #12]
 80243fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80243fc:	1bdb      	subs	r3, r3, r7
 80243fe:	4638      	mov	r0, r7
 8024400:	6013      	str	r3, [r2, #0]
 8024402:	b004      	add	sp, #16
 8024404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024408:	1c59      	adds	r1, r3, #1
 802440a:	9103      	str	r1, [sp, #12]
 802440c:	701a      	strb	r2, [r3, #0]
 802440e:	e7f0      	b.n	80243f2 <__cvt+0xa6>

08024410 <__exponent>:
 8024410:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024412:	4603      	mov	r3, r0
 8024414:	2900      	cmp	r1, #0
 8024416:	bfb8      	it	lt
 8024418:	4249      	neglt	r1, r1
 802441a:	f803 2b02 	strb.w	r2, [r3], #2
 802441e:	bfb4      	ite	lt
 8024420:	222d      	movlt	r2, #45	; 0x2d
 8024422:	222b      	movge	r2, #43	; 0x2b
 8024424:	2909      	cmp	r1, #9
 8024426:	7042      	strb	r2, [r0, #1]
 8024428:	dd2a      	ble.n	8024480 <__exponent+0x70>
 802442a:	f10d 0207 	add.w	r2, sp, #7
 802442e:	4617      	mov	r7, r2
 8024430:	260a      	movs	r6, #10
 8024432:	4694      	mov	ip, r2
 8024434:	fb91 f5f6 	sdiv	r5, r1, r6
 8024438:	fb06 1415 	mls	r4, r6, r5, r1
 802443c:	3430      	adds	r4, #48	; 0x30
 802443e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8024442:	460c      	mov	r4, r1
 8024444:	2c63      	cmp	r4, #99	; 0x63
 8024446:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 802444a:	4629      	mov	r1, r5
 802444c:	dcf1      	bgt.n	8024432 <__exponent+0x22>
 802444e:	3130      	adds	r1, #48	; 0x30
 8024450:	f1ac 0402 	sub.w	r4, ip, #2
 8024454:	f802 1c01 	strb.w	r1, [r2, #-1]
 8024458:	1c41      	adds	r1, r0, #1
 802445a:	4622      	mov	r2, r4
 802445c:	42ba      	cmp	r2, r7
 802445e:	d30a      	bcc.n	8024476 <__exponent+0x66>
 8024460:	f10d 0209 	add.w	r2, sp, #9
 8024464:	eba2 020c 	sub.w	r2, r2, ip
 8024468:	42bc      	cmp	r4, r7
 802446a:	bf88      	it	hi
 802446c:	2200      	movhi	r2, #0
 802446e:	4413      	add	r3, r2
 8024470:	1a18      	subs	r0, r3, r0
 8024472:	b003      	add	sp, #12
 8024474:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024476:	f812 5b01 	ldrb.w	r5, [r2], #1
 802447a:	f801 5f01 	strb.w	r5, [r1, #1]!
 802447e:	e7ed      	b.n	802445c <__exponent+0x4c>
 8024480:	2330      	movs	r3, #48	; 0x30
 8024482:	3130      	adds	r1, #48	; 0x30
 8024484:	7083      	strb	r3, [r0, #2]
 8024486:	70c1      	strb	r1, [r0, #3]
 8024488:	1d03      	adds	r3, r0, #4
 802448a:	e7f1      	b.n	8024470 <__exponent+0x60>

0802448c <_printf_float>:
 802448c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024490:	ed2d 8b02 	vpush	{d8}
 8024494:	b08d      	sub	sp, #52	; 0x34
 8024496:	460c      	mov	r4, r1
 8024498:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 802449c:	4616      	mov	r6, r2
 802449e:	461f      	mov	r7, r3
 80244a0:	4605      	mov	r5, r0
 80244a2:	f002 f865 	bl	8026570 <_localeconv_r>
 80244a6:	f8d0 a000 	ldr.w	sl, [r0]
 80244aa:	4650      	mov	r0, sl
 80244ac:	f7db fef0 	bl	8000290 <strlen>
 80244b0:	2300      	movs	r3, #0
 80244b2:	930a      	str	r3, [sp, #40]	; 0x28
 80244b4:	6823      	ldr	r3, [r4, #0]
 80244b6:	9305      	str	r3, [sp, #20]
 80244b8:	f8d8 3000 	ldr.w	r3, [r8]
 80244bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80244c0:	3307      	adds	r3, #7
 80244c2:	f023 0307 	bic.w	r3, r3, #7
 80244c6:	f103 0208 	add.w	r2, r3, #8
 80244ca:	f8c8 2000 	str.w	r2, [r8]
 80244ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 80244d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80244d6:	9307      	str	r3, [sp, #28]
 80244d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80244dc:	ee08 0a10 	vmov	s16, r0
 80244e0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80244e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80244e8:	4b9e      	ldr	r3, [pc, #632]	; (8024764 <_printf_float+0x2d8>)
 80244ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80244ee:	f7dc fb2d 	bl	8000b4c <__aeabi_dcmpun>
 80244f2:	bb88      	cbnz	r0, 8024558 <_printf_float+0xcc>
 80244f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80244f8:	4b9a      	ldr	r3, [pc, #616]	; (8024764 <_printf_float+0x2d8>)
 80244fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80244fe:	f7dc fb07 	bl	8000b10 <__aeabi_dcmple>
 8024502:	bb48      	cbnz	r0, 8024558 <_printf_float+0xcc>
 8024504:	2200      	movs	r2, #0
 8024506:	2300      	movs	r3, #0
 8024508:	4640      	mov	r0, r8
 802450a:	4649      	mov	r1, r9
 802450c:	f7dc faf6 	bl	8000afc <__aeabi_dcmplt>
 8024510:	b110      	cbz	r0, 8024518 <_printf_float+0x8c>
 8024512:	232d      	movs	r3, #45	; 0x2d
 8024514:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024518:	4a93      	ldr	r2, [pc, #588]	; (8024768 <_printf_float+0x2dc>)
 802451a:	4b94      	ldr	r3, [pc, #592]	; (802476c <_printf_float+0x2e0>)
 802451c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8024520:	bf94      	ite	ls
 8024522:	4690      	movls	r8, r2
 8024524:	4698      	movhi	r8, r3
 8024526:	2303      	movs	r3, #3
 8024528:	6123      	str	r3, [r4, #16]
 802452a:	9b05      	ldr	r3, [sp, #20]
 802452c:	f023 0304 	bic.w	r3, r3, #4
 8024530:	6023      	str	r3, [r4, #0]
 8024532:	f04f 0900 	mov.w	r9, #0
 8024536:	9700      	str	r7, [sp, #0]
 8024538:	4633      	mov	r3, r6
 802453a:	aa0b      	add	r2, sp, #44	; 0x2c
 802453c:	4621      	mov	r1, r4
 802453e:	4628      	mov	r0, r5
 8024540:	f000 f9da 	bl	80248f8 <_printf_common>
 8024544:	3001      	adds	r0, #1
 8024546:	f040 8090 	bne.w	802466a <_printf_float+0x1de>
 802454a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802454e:	b00d      	add	sp, #52	; 0x34
 8024550:	ecbd 8b02 	vpop	{d8}
 8024554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024558:	4642      	mov	r2, r8
 802455a:	464b      	mov	r3, r9
 802455c:	4640      	mov	r0, r8
 802455e:	4649      	mov	r1, r9
 8024560:	f7dc faf4 	bl	8000b4c <__aeabi_dcmpun>
 8024564:	b140      	cbz	r0, 8024578 <_printf_float+0xec>
 8024566:	464b      	mov	r3, r9
 8024568:	2b00      	cmp	r3, #0
 802456a:	bfbc      	itt	lt
 802456c:	232d      	movlt	r3, #45	; 0x2d
 802456e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8024572:	4a7f      	ldr	r2, [pc, #508]	; (8024770 <_printf_float+0x2e4>)
 8024574:	4b7f      	ldr	r3, [pc, #508]	; (8024774 <_printf_float+0x2e8>)
 8024576:	e7d1      	b.n	802451c <_printf_float+0x90>
 8024578:	6863      	ldr	r3, [r4, #4]
 802457a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 802457e:	9206      	str	r2, [sp, #24]
 8024580:	1c5a      	adds	r2, r3, #1
 8024582:	d13f      	bne.n	8024604 <_printf_float+0x178>
 8024584:	2306      	movs	r3, #6
 8024586:	6063      	str	r3, [r4, #4]
 8024588:	9b05      	ldr	r3, [sp, #20]
 802458a:	6861      	ldr	r1, [r4, #4]
 802458c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8024590:	2300      	movs	r3, #0
 8024592:	9303      	str	r3, [sp, #12]
 8024594:	ab0a      	add	r3, sp, #40	; 0x28
 8024596:	e9cd b301 	strd	fp, r3, [sp, #4]
 802459a:	ab09      	add	r3, sp, #36	; 0x24
 802459c:	ec49 8b10 	vmov	d0, r8, r9
 80245a0:	9300      	str	r3, [sp, #0]
 80245a2:	6022      	str	r2, [r4, #0]
 80245a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80245a8:	4628      	mov	r0, r5
 80245aa:	f7ff fecf 	bl	802434c <__cvt>
 80245ae:	9b06      	ldr	r3, [sp, #24]
 80245b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80245b2:	2b47      	cmp	r3, #71	; 0x47
 80245b4:	4680      	mov	r8, r0
 80245b6:	d108      	bne.n	80245ca <_printf_float+0x13e>
 80245b8:	1cc8      	adds	r0, r1, #3
 80245ba:	db02      	blt.n	80245c2 <_printf_float+0x136>
 80245bc:	6863      	ldr	r3, [r4, #4]
 80245be:	4299      	cmp	r1, r3
 80245c0:	dd41      	ble.n	8024646 <_printf_float+0x1ba>
 80245c2:	f1ab 0302 	sub.w	r3, fp, #2
 80245c6:	fa5f fb83 	uxtb.w	fp, r3
 80245ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80245ce:	d820      	bhi.n	8024612 <_printf_float+0x186>
 80245d0:	3901      	subs	r1, #1
 80245d2:	465a      	mov	r2, fp
 80245d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80245d8:	9109      	str	r1, [sp, #36]	; 0x24
 80245da:	f7ff ff19 	bl	8024410 <__exponent>
 80245de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80245e0:	1813      	adds	r3, r2, r0
 80245e2:	2a01      	cmp	r2, #1
 80245e4:	4681      	mov	r9, r0
 80245e6:	6123      	str	r3, [r4, #16]
 80245e8:	dc02      	bgt.n	80245f0 <_printf_float+0x164>
 80245ea:	6822      	ldr	r2, [r4, #0]
 80245ec:	07d2      	lsls	r2, r2, #31
 80245ee:	d501      	bpl.n	80245f4 <_printf_float+0x168>
 80245f0:	3301      	adds	r3, #1
 80245f2:	6123      	str	r3, [r4, #16]
 80245f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80245f8:	2b00      	cmp	r3, #0
 80245fa:	d09c      	beq.n	8024536 <_printf_float+0xaa>
 80245fc:	232d      	movs	r3, #45	; 0x2d
 80245fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024602:	e798      	b.n	8024536 <_printf_float+0xaa>
 8024604:	9a06      	ldr	r2, [sp, #24]
 8024606:	2a47      	cmp	r2, #71	; 0x47
 8024608:	d1be      	bne.n	8024588 <_printf_float+0xfc>
 802460a:	2b00      	cmp	r3, #0
 802460c:	d1bc      	bne.n	8024588 <_printf_float+0xfc>
 802460e:	2301      	movs	r3, #1
 8024610:	e7b9      	b.n	8024586 <_printf_float+0xfa>
 8024612:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8024616:	d118      	bne.n	802464a <_printf_float+0x1be>
 8024618:	2900      	cmp	r1, #0
 802461a:	6863      	ldr	r3, [r4, #4]
 802461c:	dd0b      	ble.n	8024636 <_printf_float+0x1aa>
 802461e:	6121      	str	r1, [r4, #16]
 8024620:	b913      	cbnz	r3, 8024628 <_printf_float+0x19c>
 8024622:	6822      	ldr	r2, [r4, #0]
 8024624:	07d0      	lsls	r0, r2, #31
 8024626:	d502      	bpl.n	802462e <_printf_float+0x1a2>
 8024628:	3301      	adds	r3, #1
 802462a:	440b      	add	r3, r1
 802462c:	6123      	str	r3, [r4, #16]
 802462e:	65a1      	str	r1, [r4, #88]	; 0x58
 8024630:	f04f 0900 	mov.w	r9, #0
 8024634:	e7de      	b.n	80245f4 <_printf_float+0x168>
 8024636:	b913      	cbnz	r3, 802463e <_printf_float+0x1b2>
 8024638:	6822      	ldr	r2, [r4, #0]
 802463a:	07d2      	lsls	r2, r2, #31
 802463c:	d501      	bpl.n	8024642 <_printf_float+0x1b6>
 802463e:	3302      	adds	r3, #2
 8024640:	e7f4      	b.n	802462c <_printf_float+0x1a0>
 8024642:	2301      	movs	r3, #1
 8024644:	e7f2      	b.n	802462c <_printf_float+0x1a0>
 8024646:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802464a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802464c:	4299      	cmp	r1, r3
 802464e:	db05      	blt.n	802465c <_printf_float+0x1d0>
 8024650:	6823      	ldr	r3, [r4, #0]
 8024652:	6121      	str	r1, [r4, #16]
 8024654:	07d8      	lsls	r0, r3, #31
 8024656:	d5ea      	bpl.n	802462e <_printf_float+0x1a2>
 8024658:	1c4b      	adds	r3, r1, #1
 802465a:	e7e7      	b.n	802462c <_printf_float+0x1a0>
 802465c:	2900      	cmp	r1, #0
 802465e:	bfd4      	ite	le
 8024660:	f1c1 0202 	rsble	r2, r1, #2
 8024664:	2201      	movgt	r2, #1
 8024666:	4413      	add	r3, r2
 8024668:	e7e0      	b.n	802462c <_printf_float+0x1a0>
 802466a:	6823      	ldr	r3, [r4, #0]
 802466c:	055a      	lsls	r2, r3, #21
 802466e:	d407      	bmi.n	8024680 <_printf_float+0x1f4>
 8024670:	6923      	ldr	r3, [r4, #16]
 8024672:	4642      	mov	r2, r8
 8024674:	4631      	mov	r1, r6
 8024676:	4628      	mov	r0, r5
 8024678:	47b8      	blx	r7
 802467a:	3001      	adds	r0, #1
 802467c:	d12c      	bne.n	80246d8 <_printf_float+0x24c>
 802467e:	e764      	b.n	802454a <_printf_float+0xbe>
 8024680:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8024684:	f240 80e0 	bls.w	8024848 <_printf_float+0x3bc>
 8024688:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802468c:	2200      	movs	r2, #0
 802468e:	2300      	movs	r3, #0
 8024690:	f7dc fa2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8024694:	2800      	cmp	r0, #0
 8024696:	d034      	beq.n	8024702 <_printf_float+0x276>
 8024698:	4a37      	ldr	r2, [pc, #220]	; (8024778 <_printf_float+0x2ec>)
 802469a:	2301      	movs	r3, #1
 802469c:	4631      	mov	r1, r6
 802469e:	4628      	mov	r0, r5
 80246a0:	47b8      	blx	r7
 80246a2:	3001      	adds	r0, #1
 80246a4:	f43f af51 	beq.w	802454a <_printf_float+0xbe>
 80246a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80246ac:	429a      	cmp	r2, r3
 80246ae:	db02      	blt.n	80246b6 <_printf_float+0x22a>
 80246b0:	6823      	ldr	r3, [r4, #0]
 80246b2:	07d8      	lsls	r0, r3, #31
 80246b4:	d510      	bpl.n	80246d8 <_printf_float+0x24c>
 80246b6:	ee18 3a10 	vmov	r3, s16
 80246ba:	4652      	mov	r2, sl
 80246bc:	4631      	mov	r1, r6
 80246be:	4628      	mov	r0, r5
 80246c0:	47b8      	blx	r7
 80246c2:	3001      	adds	r0, #1
 80246c4:	f43f af41 	beq.w	802454a <_printf_float+0xbe>
 80246c8:	f04f 0800 	mov.w	r8, #0
 80246cc:	f104 091a 	add.w	r9, r4, #26
 80246d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80246d2:	3b01      	subs	r3, #1
 80246d4:	4543      	cmp	r3, r8
 80246d6:	dc09      	bgt.n	80246ec <_printf_float+0x260>
 80246d8:	6823      	ldr	r3, [r4, #0]
 80246da:	079b      	lsls	r3, r3, #30
 80246dc:	f100 8107 	bmi.w	80248ee <_printf_float+0x462>
 80246e0:	68e0      	ldr	r0, [r4, #12]
 80246e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80246e4:	4298      	cmp	r0, r3
 80246e6:	bfb8      	it	lt
 80246e8:	4618      	movlt	r0, r3
 80246ea:	e730      	b.n	802454e <_printf_float+0xc2>
 80246ec:	2301      	movs	r3, #1
 80246ee:	464a      	mov	r2, r9
 80246f0:	4631      	mov	r1, r6
 80246f2:	4628      	mov	r0, r5
 80246f4:	47b8      	blx	r7
 80246f6:	3001      	adds	r0, #1
 80246f8:	f43f af27 	beq.w	802454a <_printf_float+0xbe>
 80246fc:	f108 0801 	add.w	r8, r8, #1
 8024700:	e7e6      	b.n	80246d0 <_printf_float+0x244>
 8024702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024704:	2b00      	cmp	r3, #0
 8024706:	dc39      	bgt.n	802477c <_printf_float+0x2f0>
 8024708:	4a1b      	ldr	r2, [pc, #108]	; (8024778 <_printf_float+0x2ec>)
 802470a:	2301      	movs	r3, #1
 802470c:	4631      	mov	r1, r6
 802470e:	4628      	mov	r0, r5
 8024710:	47b8      	blx	r7
 8024712:	3001      	adds	r0, #1
 8024714:	f43f af19 	beq.w	802454a <_printf_float+0xbe>
 8024718:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 802471c:	4313      	orrs	r3, r2
 802471e:	d102      	bne.n	8024726 <_printf_float+0x29a>
 8024720:	6823      	ldr	r3, [r4, #0]
 8024722:	07d9      	lsls	r1, r3, #31
 8024724:	d5d8      	bpl.n	80246d8 <_printf_float+0x24c>
 8024726:	ee18 3a10 	vmov	r3, s16
 802472a:	4652      	mov	r2, sl
 802472c:	4631      	mov	r1, r6
 802472e:	4628      	mov	r0, r5
 8024730:	47b8      	blx	r7
 8024732:	3001      	adds	r0, #1
 8024734:	f43f af09 	beq.w	802454a <_printf_float+0xbe>
 8024738:	f04f 0900 	mov.w	r9, #0
 802473c:	f104 0a1a 	add.w	sl, r4, #26
 8024740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024742:	425b      	negs	r3, r3
 8024744:	454b      	cmp	r3, r9
 8024746:	dc01      	bgt.n	802474c <_printf_float+0x2c0>
 8024748:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802474a:	e792      	b.n	8024672 <_printf_float+0x1e6>
 802474c:	2301      	movs	r3, #1
 802474e:	4652      	mov	r2, sl
 8024750:	4631      	mov	r1, r6
 8024752:	4628      	mov	r0, r5
 8024754:	47b8      	blx	r7
 8024756:	3001      	adds	r0, #1
 8024758:	f43f aef7 	beq.w	802454a <_printf_float+0xbe>
 802475c:	f109 0901 	add.w	r9, r9, #1
 8024760:	e7ee      	b.n	8024740 <_printf_float+0x2b4>
 8024762:	bf00      	nop
 8024764:	7fefffff 	.word	0x7fefffff
 8024768:	0802e6ec 	.word	0x0802e6ec
 802476c:	0802e6f0 	.word	0x0802e6f0
 8024770:	0802e6f4 	.word	0x0802e6f4
 8024774:	0802e6f8 	.word	0x0802e6f8
 8024778:	0802ec4d 	.word	0x0802ec4d
 802477c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802477e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8024780:	429a      	cmp	r2, r3
 8024782:	bfa8      	it	ge
 8024784:	461a      	movge	r2, r3
 8024786:	2a00      	cmp	r2, #0
 8024788:	4691      	mov	r9, r2
 802478a:	dc37      	bgt.n	80247fc <_printf_float+0x370>
 802478c:	f04f 0b00 	mov.w	fp, #0
 8024790:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024794:	f104 021a 	add.w	r2, r4, #26
 8024798:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802479a:	9305      	str	r3, [sp, #20]
 802479c:	eba3 0309 	sub.w	r3, r3, r9
 80247a0:	455b      	cmp	r3, fp
 80247a2:	dc33      	bgt.n	802480c <_printf_float+0x380>
 80247a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80247a8:	429a      	cmp	r2, r3
 80247aa:	db3b      	blt.n	8024824 <_printf_float+0x398>
 80247ac:	6823      	ldr	r3, [r4, #0]
 80247ae:	07da      	lsls	r2, r3, #31
 80247b0:	d438      	bmi.n	8024824 <_printf_float+0x398>
 80247b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80247b6:	eba2 0903 	sub.w	r9, r2, r3
 80247ba:	9b05      	ldr	r3, [sp, #20]
 80247bc:	1ad2      	subs	r2, r2, r3
 80247be:	4591      	cmp	r9, r2
 80247c0:	bfa8      	it	ge
 80247c2:	4691      	movge	r9, r2
 80247c4:	f1b9 0f00 	cmp.w	r9, #0
 80247c8:	dc35      	bgt.n	8024836 <_printf_float+0x3aa>
 80247ca:	f04f 0800 	mov.w	r8, #0
 80247ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80247d2:	f104 0a1a 	add.w	sl, r4, #26
 80247d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80247da:	1a9b      	subs	r3, r3, r2
 80247dc:	eba3 0309 	sub.w	r3, r3, r9
 80247e0:	4543      	cmp	r3, r8
 80247e2:	f77f af79 	ble.w	80246d8 <_printf_float+0x24c>
 80247e6:	2301      	movs	r3, #1
 80247e8:	4652      	mov	r2, sl
 80247ea:	4631      	mov	r1, r6
 80247ec:	4628      	mov	r0, r5
 80247ee:	47b8      	blx	r7
 80247f0:	3001      	adds	r0, #1
 80247f2:	f43f aeaa 	beq.w	802454a <_printf_float+0xbe>
 80247f6:	f108 0801 	add.w	r8, r8, #1
 80247fa:	e7ec      	b.n	80247d6 <_printf_float+0x34a>
 80247fc:	4613      	mov	r3, r2
 80247fe:	4631      	mov	r1, r6
 8024800:	4642      	mov	r2, r8
 8024802:	4628      	mov	r0, r5
 8024804:	47b8      	blx	r7
 8024806:	3001      	adds	r0, #1
 8024808:	d1c0      	bne.n	802478c <_printf_float+0x300>
 802480a:	e69e      	b.n	802454a <_printf_float+0xbe>
 802480c:	2301      	movs	r3, #1
 802480e:	4631      	mov	r1, r6
 8024810:	4628      	mov	r0, r5
 8024812:	9205      	str	r2, [sp, #20]
 8024814:	47b8      	blx	r7
 8024816:	3001      	adds	r0, #1
 8024818:	f43f ae97 	beq.w	802454a <_printf_float+0xbe>
 802481c:	9a05      	ldr	r2, [sp, #20]
 802481e:	f10b 0b01 	add.w	fp, fp, #1
 8024822:	e7b9      	b.n	8024798 <_printf_float+0x30c>
 8024824:	ee18 3a10 	vmov	r3, s16
 8024828:	4652      	mov	r2, sl
 802482a:	4631      	mov	r1, r6
 802482c:	4628      	mov	r0, r5
 802482e:	47b8      	blx	r7
 8024830:	3001      	adds	r0, #1
 8024832:	d1be      	bne.n	80247b2 <_printf_float+0x326>
 8024834:	e689      	b.n	802454a <_printf_float+0xbe>
 8024836:	9a05      	ldr	r2, [sp, #20]
 8024838:	464b      	mov	r3, r9
 802483a:	4442      	add	r2, r8
 802483c:	4631      	mov	r1, r6
 802483e:	4628      	mov	r0, r5
 8024840:	47b8      	blx	r7
 8024842:	3001      	adds	r0, #1
 8024844:	d1c1      	bne.n	80247ca <_printf_float+0x33e>
 8024846:	e680      	b.n	802454a <_printf_float+0xbe>
 8024848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802484a:	2a01      	cmp	r2, #1
 802484c:	dc01      	bgt.n	8024852 <_printf_float+0x3c6>
 802484e:	07db      	lsls	r3, r3, #31
 8024850:	d53a      	bpl.n	80248c8 <_printf_float+0x43c>
 8024852:	2301      	movs	r3, #1
 8024854:	4642      	mov	r2, r8
 8024856:	4631      	mov	r1, r6
 8024858:	4628      	mov	r0, r5
 802485a:	47b8      	blx	r7
 802485c:	3001      	adds	r0, #1
 802485e:	f43f ae74 	beq.w	802454a <_printf_float+0xbe>
 8024862:	ee18 3a10 	vmov	r3, s16
 8024866:	4652      	mov	r2, sl
 8024868:	4631      	mov	r1, r6
 802486a:	4628      	mov	r0, r5
 802486c:	47b8      	blx	r7
 802486e:	3001      	adds	r0, #1
 8024870:	f43f ae6b 	beq.w	802454a <_printf_float+0xbe>
 8024874:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8024878:	2200      	movs	r2, #0
 802487a:	2300      	movs	r3, #0
 802487c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8024880:	f7dc f932 	bl	8000ae8 <__aeabi_dcmpeq>
 8024884:	b9d8      	cbnz	r0, 80248be <_printf_float+0x432>
 8024886:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 802488a:	f108 0201 	add.w	r2, r8, #1
 802488e:	4631      	mov	r1, r6
 8024890:	4628      	mov	r0, r5
 8024892:	47b8      	blx	r7
 8024894:	3001      	adds	r0, #1
 8024896:	d10e      	bne.n	80248b6 <_printf_float+0x42a>
 8024898:	e657      	b.n	802454a <_printf_float+0xbe>
 802489a:	2301      	movs	r3, #1
 802489c:	4652      	mov	r2, sl
 802489e:	4631      	mov	r1, r6
 80248a0:	4628      	mov	r0, r5
 80248a2:	47b8      	blx	r7
 80248a4:	3001      	adds	r0, #1
 80248a6:	f43f ae50 	beq.w	802454a <_printf_float+0xbe>
 80248aa:	f108 0801 	add.w	r8, r8, #1
 80248ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80248b0:	3b01      	subs	r3, #1
 80248b2:	4543      	cmp	r3, r8
 80248b4:	dcf1      	bgt.n	802489a <_printf_float+0x40e>
 80248b6:	464b      	mov	r3, r9
 80248b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80248bc:	e6da      	b.n	8024674 <_printf_float+0x1e8>
 80248be:	f04f 0800 	mov.w	r8, #0
 80248c2:	f104 0a1a 	add.w	sl, r4, #26
 80248c6:	e7f2      	b.n	80248ae <_printf_float+0x422>
 80248c8:	2301      	movs	r3, #1
 80248ca:	4642      	mov	r2, r8
 80248cc:	e7df      	b.n	802488e <_printf_float+0x402>
 80248ce:	2301      	movs	r3, #1
 80248d0:	464a      	mov	r2, r9
 80248d2:	4631      	mov	r1, r6
 80248d4:	4628      	mov	r0, r5
 80248d6:	47b8      	blx	r7
 80248d8:	3001      	adds	r0, #1
 80248da:	f43f ae36 	beq.w	802454a <_printf_float+0xbe>
 80248de:	f108 0801 	add.w	r8, r8, #1
 80248e2:	68e3      	ldr	r3, [r4, #12]
 80248e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80248e6:	1a5b      	subs	r3, r3, r1
 80248e8:	4543      	cmp	r3, r8
 80248ea:	dcf0      	bgt.n	80248ce <_printf_float+0x442>
 80248ec:	e6f8      	b.n	80246e0 <_printf_float+0x254>
 80248ee:	f04f 0800 	mov.w	r8, #0
 80248f2:	f104 0919 	add.w	r9, r4, #25
 80248f6:	e7f4      	b.n	80248e2 <_printf_float+0x456>

080248f8 <_printf_common>:
 80248f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80248fc:	4616      	mov	r6, r2
 80248fe:	4699      	mov	r9, r3
 8024900:	688a      	ldr	r2, [r1, #8]
 8024902:	690b      	ldr	r3, [r1, #16]
 8024904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024908:	4293      	cmp	r3, r2
 802490a:	bfb8      	it	lt
 802490c:	4613      	movlt	r3, r2
 802490e:	6033      	str	r3, [r6, #0]
 8024910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024914:	4607      	mov	r7, r0
 8024916:	460c      	mov	r4, r1
 8024918:	b10a      	cbz	r2, 802491e <_printf_common+0x26>
 802491a:	3301      	adds	r3, #1
 802491c:	6033      	str	r3, [r6, #0]
 802491e:	6823      	ldr	r3, [r4, #0]
 8024920:	0699      	lsls	r1, r3, #26
 8024922:	bf42      	ittt	mi
 8024924:	6833      	ldrmi	r3, [r6, #0]
 8024926:	3302      	addmi	r3, #2
 8024928:	6033      	strmi	r3, [r6, #0]
 802492a:	6825      	ldr	r5, [r4, #0]
 802492c:	f015 0506 	ands.w	r5, r5, #6
 8024930:	d106      	bne.n	8024940 <_printf_common+0x48>
 8024932:	f104 0a19 	add.w	sl, r4, #25
 8024936:	68e3      	ldr	r3, [r4, #12]
 8024938:	6832      	ldr	r2, [r6, #0]
 802493a:	1a9b      	subs	r3, r3, r2
 802493c:	42ab      	cmp	r3, r5
 802493e:	dc26      	bgt.n	802498e <_printf_common+0x96>
 8024940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024944:	1e13      	subs	r3, r2, #0
 8024946:	6822      	ldr	r2, [r4, #0]
 8024948:	bf18      	it	ne
 802494a:	2301      	movne	r3, #1
 802494c:	0692      	lsls	r2, r2, #26
 802494e:	d42b      	bmi.n	80249a8 <_printf_common+0xb0>
 8024950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024954:	4649      	mov	r1, r9
 8024956:	4638      	mov	r0, r7
 8024958:	47c0      	blx	r8
 802495a:	3001      	adds	r0, #1
 802495c:	d01e      	beq.n	802499c <_printf_common+0xa4>
 802495e:	6823      	ldr	r3, [r4, #0]
 8024960:	6922      	ldr	r2, [r4, #16]
 8024962:	f003 0306 	and.w	r3, r3, #6
 8024966:	2b04      	cmp	r3, #4
 8024968:	bf02      	ittt	eq
 802496a:	68e5      	ldreq	r5, [r4, #12]
 802496c:	6833      	ldreq	r3, [r6, #0]
 802496e:	1aed      	subeq	r5, r5, r3
 8024970:	68a3      	ldr	r3, [r4, #8]
 8024972:	bf0c      	ite	eq
 8024974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024978:	2500      	movne	r5, #0
 802497a:	4293      	cmp	r3, r2
 802497c:	bfc4      	itt	gt
 802497e:	1a9b      	subgt	r3, r3, r2
 8024980:	18ed      	addgt	r5, r5, r3
 8024982:	2600      	movs	r6, #0
 8024984:	341a      	adds	r4, #26
 8024986:	42b5      	cmp	r5, r6
 8024988:	d11a      	bne.n	80249c0 <_printf_common+0xc8>
 802498a:	2000      	movs	r0, #0
 802498c:	e008      	b.n	80249a0 <_printf_common+0xa8>
 802498e:	2301      	movs	r3, #1
 8024990:	4652      	mov	r2, sl
 8024992:	4649      	mov	r1, r9
 8024994:	4638      	mov	r0, r7
 8024996:	47c0      	blx	r8
 8024998:	3001      	adds	r0, #1
 802499a:	d103      	bne.n	80249a4 <_printf_common+0xac>
 802499c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80249a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80249a4:	3501      	adds	r5, #1
 80249a6:	e7c6      	b.n	8024936 <_printf_common+0x3e>
 80249a8:	18e1      	adds	r1, r4, r3
 80249aa:	1c5a      	adds	r2, r3, #1
 80249ac:	2030      	movs	r0, #48	; 0x30
 80249ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80249b2:	4422      	add	r2, r4
 80249b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80249b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80249bc:	3302      	adds	r3, #2
 80249be:	e7c7      	b.n	8024950 <_printf_common+0x58>
 80249c0:	2301      	movs	r3, #1
 80249c2:	4622      	mov	r2, r4
 80249c4:	4649      	mov	r1, r9
 80249c6:	4638      	mov	r0, r7
 80249c8:	47c0      	blx	r8
 80249ca:	3001      	adds	r0, #1
 80249cc:	d0e6      	beq.n	802499c <_printf_common+0xa4>
 80249ce:	3601      	adds	r6, #1
 80249d0:	e7d9      	b.n	8024986 <_printf_common+0x8e>
	...

080249d4 <_printf_i>:
 80249d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80249d8:	7e0f      	ldrb	r7, [r1, #24]
 80249da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80249dc:	2f78      	cmp	r7, #120	; 0x78
 80249de:	4691      	mov	r9, r2
 80249e0:	4680      	mov	r8, r0
 80249e2:	460c      	mov	r4, r1
 80249e4:	469a      	mov	sl, r3
 80249e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80249ea:	d807      	bhi.n	80249fc <_printf_i+0x28>
 80249ec:	2f62      	cmp	r7, #98	; 0x62
 80249ee:	d80a      	bhi.n	8024a06 <_printf_i+0x32>
 80249f0:	2f00      	cmp	r7, #0
 80249f2:	f000 80d4 	beq.w	8024b9e <_printf_i+0x1ca>
 80249f6:	2f58      	cmp	r7, #88	; 0x58
 80249f8:	f000 80c0 	beq.w	8024b7c <_printf_i+0x1a8>
 80249fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024a04:	e03a      	b.n	8024a7c <_printf_i+0xa8>
 8024a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024a0a:	2b15      	cmp	r3, #21
 8024a0c:	d8f6      	bhi.n	80249fc <_printf_i+0x28>
 8024a0e:	a101      	add	r1, pc, #4	; (adr r1, 8024a14 <_printf_i+0x40>)
 8024a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024a14:	08024a6d 	.word	0x08024a6d
 8024a18:	08024a81 	.word	0x08024a81
 8024a1c:	080249fd 	.word	0x080249fd
 8024a20:	080249fd 	.word	0x080249fd
 8024a24:	080249fd 	.word	0x080249fd
 8024a28:	080249fd 	.word	0x080249fd
 8024a2c:	08024a81 	.word	0x08024a81
 8024a30:	080249fd 	.word	0x080249fd
 8024a34:	080249fd 	.word	0x080249fd
 8024a38:	080249fd 	.word	0x080249fd
 8024a3c:	080249fd 	.word	0x080249fd
 8024a40:	08024b85 	.word	0x08024b85
 8024a44:	08024aad 	.word	0x08024aad
 8024a48:	08024b3f 	.word	0x08024b3f
 8024a4c:	080249fd 	.word	0x080249fd
 8024a50:	080249fd 	.word	0x080249fd
 8024a54:	08024ba7 	.word	0x08024ba7
 8024a58:	080249fd 	.word	0x080249fd
 8024a5c:	08024aad 	.word	0x08024aad
 8024a60:	080249fd 	.word	0x080249fd
 8024a64:	080249fd 	.word	0x080249fd
 8024a68:	08024b47 	.word	0x08024b47
 8024a6c:	682b      	ldr	r3, [r5, #0]
 8024a6e:	1d1a      	adds	r2, r3, #4
 8024a70:	681b      	ldr	r3, [r3, #0]
 8024a72:	602a      	str	r2, [r5, #0]
 8024a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024a7c:	2301      	movs	r3, #1
 8024a7e:	e09f      	b.n	8024bc0 <_printf_i+0x1ec>
 8024a80:	6820      	ldr	r0, [r4, #0]
 8024a82:	682b      	ldr	r3, [r5, #0]
 8024a84:	0607      	lsls	r7, r0, #24
 8024a86:	f103 0104 	add.w	r1, r3, #4
 8024a8a:	6029      	str	r1, [r5, #0]
 8024a8c:	d501      	bpl.n	8024a92 <_printf_i+0xbe>
 8024a8e:	681e      	ldr	r6, [r3, #0]
 8024a90:	e003      	b.n	8024a9a <_printf_i+0xc6>
 8024a92:	0646      	lsls	r6, r0, #25
 8024a94:	d5fb      	bpl.n	8024a8e <_printf_i+0xba>
 8024a96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8024a9a:	2e00      	cmp	r6, #0
 8024a9c:	da03      	bge.n	8024aa6 <_printf_i+0xd2>
 8024a9e:	232d      	movs	r3, #45	; 0x2d
 8024aa0:	4276      	negs	r6, r6
 8024aa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024aa6:	485a      	ldr	r0, [pc, #360]	; (8024c10 <_printf_i+0x23c>)
 8024aa8:	230a      	movs	r3, #10
 8024aaa:	e012      	b.n	8024ad2 <_printf_i+0xfe>
 8024aac:	682b      	ldr	r3, [r5, #0]
 8024aae:	6820      	ldr	r0, [r4, #0]
 8024ab0:	1d19      	adds	r1, r3, #4
 8024ab2:	6029      	str	r1, [r5, #0]
 8024ab4:	0605      	lsls	r5, r0, #24
 8024ab6:	d501      	bpl.n	8024abc <_printf_i+0xe8>
 8024ab8:	681e      	ldr	r6, [r3, #0]
 8024aba:	e002      	b.n	8024ac2 <_printf_i+0xee>
 8024abc:	0641      	lsls	r1, r0, #25
 8024abe:	d5fb      	bpl.n	8024ab8 <_printf_i+0xe4>
 8024ac0:	881e      	ldrh	r6, [r3, #0]
 8024ac2:	4853      	ldr	r0, [pc, #332]	; (8024c10 <_printf_i+0x23c>)
 8024ac4:	2f6f      	cmp	r7, #111	; 0x6f
 8024ac6:	bf0c      	ite	eq
 8024ac8:	2308      	moveq	r3, #8
 8024aca:	230a      	movne	r3, #10
 8024acc:	2100      	movs	r1, #0
 8024ace:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024ad2:	6865      	ldr	r5, [r4, #4]
 8024ad4:	60a5      	str	r5, [r4, #8]
 8024ad6:	2d00      	cmp	r5, #0
 8024ad8:	bfa2      	ittt	ge
 8024ada:	6821      	ldrge	r1, [r4, #0]
 8024adc:	f021 0104 	bicge.w	r1, r1, #4
 8024ae0:	6021      	strge	r1, [r4, #0]
 8024ae2:	b90e      	cbnz	r6, 8024ae8 <_printf_i+0x114>
 8024ae4:	2d00      	cmp	r5, #0
 8024ae6:	d04b      	beq.n	8024b80 <_printf_i+0x1ac>
 8024ae8:	4615      	mov	r5, r2
 8024aea:	fbb6 f1f3 	udiv	r1, r6, r3
 8024aee:	fb03 6711 	mls	r7, r3, r1, r6
 8024af2:	5dc7      	ldrb	r7, [r0, r7]
 8024af4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024af8:	4637      	mov	r7, r6
 8024afa:	42bb      	cmp	r3, r7
 8024afc:	460e      	mov	r6, r1
 8024afe:	d9f4      	bls.n	8024aea <_printf_i+0x116>
 8024b00:	2b08      	cmp	r3, #8
 8024b02:	d10b      	bne.n	8024b1c <_printf_i+0x148>
 8024b04:	6823      	ldr	r3, [r4, #0]
 8024b06:	07de      	lsls	r6, r3, #31
 8024b08:	d508      	bpl.n	8024b1c <_printf_i+0x148>
 8024b0a:	6923      	ldr	r3, [r4, #16]
 8024b0c:	6861      	ldr	r1, [r4, #4]
 8024b0e:	4299      	cmp	r1, r3
 8024b10:	bfde      	ittt	le
 8024b12:	2330      	movle	r3, #48	; 0x30
 8024b14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024b18:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8024b1c:	1b52      	subs	r2, r2, r5
 8024b1e:	6122      	str	r2, [r4, #16]
 8024b20:	f8cd a000 	str.w	sl, [sp]
 8024b24:	464b      	mov	r3, r9
 8024b26:	aa03      	add	r2, sp, #12
 8024b28:	4621      	mov	r1, r4
 8024b2a:	4640      	mov	r0, r8
 8024b2c:	f7ff fee4 	bl	80248f8 <_printf_common>
 8024b30:	3001      	adds	r0, #1
 8024b32:	d14a      	bne.n	8024bca <_printf_i+0x1f6>
 8024b34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024b38:	b004      	add	sp, #16
 8024b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024b3e:	6823      	ldr	r3, [r4, #0]
 8024b40:	f043 0320 	orr.w	r3, r3, #32
 8024b44:	6023      	str	r3, [r4, #0]
 8024b46:	4833      	ldr	r0, [pc, #204]	; (8024c14 <_printf_i+0x240>)
 8024b48:	2778      	movs	r7, #120	; 0x78
 8024b4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8024b4e:	6823      	ldr	r3, [r4, #0]
 8024b50:	6829      	ldr	r1, [r5, #0]
 8024b52:	061f      	lsls	r7, r3, #24
 8024b54:	f851 6b04 	ldr.w	r6, [r1], #4
 8024b58:	d402      	bmi.n	8024b60 <_printf_i+0x18c>
 8024b5a:	065f      	lsls	r7, r3, #25
 8024b5c:	bf48      	it	mi
 8024b5e:	b2b6      	uxthmi	r6, r6
 8024b60:	07df      	lsls	r7, r3, #31
 8024b62:	bf48      	it	mi
 8024b64:	f043 0320 	orrmi.w	r3, r3, #32
 8024b68:	6029      	str	r1, [r5, #0]
 8024b6a:	bf48      	it	mi
 8024b6c:	6023      	strmi	r3, [r4, #0]
 8024b6e:	b91e      	cbnz	r6, 8024b78 <_printf_i+0x1a4>
 8024b70:	6823      	ldr	r3, [r4, #0]
 8024b72:	f023 0320 	bic.w	r3, r3, #32
 8024b76:	6023      	str	r3, [r4, #0]
 8024b78:	2310      	movs	r3, #16
 8024b7a:	e7a7      	b.n	8024acc <_printf_i+0xf8>
 8024b7c:	4824      	ldr	r0, [pc, #144]	; (8024c10 <_printf_i+0x23c>)
 8024b7e:	e7e4      	b.n	8024b4a <_printf_i+0x176>
 8024b80:	4615      	mov	r5, r2
 8024b82:	e7bd      	b.n	8024b00 <_printf_i+0x12c>
 8024b84:	682b      	ldr	r3, [r5, #0]
 8024b86:	6826      	ldr	r6, [r4, #0]
 8024b88:	6961      	ldr	r1, [r4, #20]
 8024b8a:	1d18      	adds	r0, r3, #4
 8024b8c:	6028      	str	r0, [r5, #0]
 8024b8e:	0635      	lsls	r5, r6, #24
 8024b90:	681b      	ldr	r3, [r3, #0]
 8024b92:	d501      	bpl.n	8024b98 <_printf_i+0x1c4>
 8024b94:	6019      	str	r1, [r3, #0]
 8024b96:	e002      	b.n	8024b9e <_printf_i+0x1ca>
 8024b98:	0670      	lsls	r0, r6, #25
 8024b9a:	d5fb      	bpl.n	8024b94 <_printf_i+0x1c0>
 8024b9c:	8019      	strh	r1, [r3, #0]
 8024b9e:	2300      	movs	r3, #0
 8024ba0:	6123      	str	r3, [r4, #16]
 8024ba2:	4615      	mov	r5, r2
 8024ba4:	e7bc      	b.n	8024b20 <_printf_i+0x14c>
 8024ba6:	682b      	ldr	r3, [r5, #0]
 8024ba8:	1d1a      	adds	r2, r3, #4
 8024baa:	602a      	str	r2, [r5, #0]
 8024bac:	681d      	ldr	r5, [r3, #0]
 8024bae:	6862      	ldr	r2, [r4, #4]
 8024bb0:	2100      	movs	r1, #0
 8024bb2:	4628      	mov	r0, r5
 8024bb4:	f7db fb1c 	bl	80001f0 <memchr>
 8024bb8:	b108      	cbz	r0, 8024bbe <_printf_i+0x1ea>
 8024bba:	1b40      	subs	r0, r0, r5
 8024bbc:	6060      	str	r0, [r4, #4]
 8024bbe:	6863      	ldr	r3, [r4, #4]
 8024bc0:	6123      	str	r3, [r4, #16]
 8024bc2:	2300      	movs	r3, #0
 8024bc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024bc8:	e7aa      	b.n	8024b20 <_printf_i+0x14c>
 8024bca:	6923      	ldr	r3, [r4, #16]
 8024bcc:	462a      	mov	r2, r5
 8024bce:	4649      	mov	r1, r9
 8024bd0:	4640      	mov	r0, r8
 8024bd2:	47d0      	blx	sl
 8024bd4:	3001      	adds	r0, #1
 8024bd6:	d0ad      	beq.n	8024b34 <_printf_i+0x160>
 8024bd8:	6823      	ldr	r3, [r4, #0]
 8024bda:	079b      	lsls	r3, r3, #30
 8024bdc:	d413      	bmi.n	8024c06 <_printf_i+0x232>
 8024bde:	68e0      	ldr	r0, [r4, #12]
 8024be0:	9b03      	ldr	r3, [sp, #12]
 8024be2:	4298      	cmp	r0, r3
 8024be4:	bfb8      	it	lt
 8024be6:	4618      	movlt	r0, r3
 8024be8:	e7a6      	b.n	8024b38 <_printf_i+0x164>
 8024bea:	2301      	movs	r3, #1
 8024bec:	4632      	mov	r2, r6
 8024bee:	4649      	mov	r1, r9
 8024bf0:	4640      	mov	r0, r8
 8024bf2:	47d0      	blx	sl
 8024bf4:	3001      	adds	r0, #1
 8024bf6:	d09d      	beq.n	8024b34 <_printf_i+0x160>
 8024bf8:	3501      	adds	r5, #1
 8024bfa:	68e3      	ldr	r3, [r4, #12]
 8024bfc:	9903      	ldr	r1, [sp, #12]
 8024bfe:	1a5b      	subs	r3, r3, r1
 8024c00:	42ab      	cmp	r3, r5
 8024c02:	dcf2      	bgt.n	8024bea <_printf_i+0x216>
 8024c04:	e7eb      	b.n	8024bde <_printf_i+0x20a>
 8024c06:	2500      	movs	r5, #0
 8024c08:	f104 0619 	add.w	r6, r4, #25
 8024c0c:	e7f5      	b.n	8024bfa <_printf_i+0x226>
 8024c0e:	bf00      	nop
 8024c10:	0802e6fc 	.word	0x0802e6fc
 8024c14:	0802e70d 	.word	0x0802e70d

08024c18 <std>:
 8024c18:	2300      	movs	r3, #0
 8024c1a:	b510      	push	{r4, lr}
 8024c1c:	4604      	mov	r4, r0
 8024c1e:	e9c0 3300 	strd	r3, r3, [r0]
 8024c22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8024c26:	6083      	str	r3, [r0, #8]
 8024c28:	8181      	strh	r1, [r0, #12]
 8024c2a:	6643      	str	r3, [r0, #100]	; 0x64
 8024c2c:	81c2      	strh	r2, [r0, #14]
 8024c2e:	6183      	str	r3, [r0, #24]
 8024c30:	4619      	mov	r1, r3
 8024c32:	2208      	movs	r2, #8
 8024c34:	305c      	adds	r0, #92	; 0x5c
 8024c36:	f000 fa89 	bl	802514c <memset>
 8024c3a:	4b0d      	ldr	r3, [pc, #52]	; (8024c70 <std+0x58>)
 8024c3c:	6263      	str	r3, [r4, #36]	; 0x24
 8024c3e:	4b0d      	ldr	r3, [pc, #52]	; (8024c74 <std+0x5c>)
 8024c40:	62a3      	str	r3, [r4, #40]	; 0x28
 8024c42:	4b0d      	ldr	r3, [pc, #52]	; (8024c78 <std+0x60>)
 8024c44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8024c46:	4b0d      	ldr	r3, [pc, #52]	; (8024c7c <std+0x64>)
 8024c48:	6323      	str	r3, [r4, #48]	; 0x30
 8024c4a:	4b0d      	ldr	r3, [pc, #52]	; (8024c80 <std+0x68>)
 8024c4c:	6224      	str	r4, [r4, #32]
 8024c4e:	429c      	cmp	r4, r3
 8024c50:	d006      	beq.n	8024c60 <std+0x48>
 8024c52:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8024c56:	4294      	cmp	r4, r2
 8024c58:	d002      	beq.n	8024c60 <std+0x48>
 8024c5a:	33d0      	adds	r3, #208	; 0xd0
 8024c5c:	429c      	cmp	r4, r3
 8024c5e:	d105      	bne.n	8024c6c <std+0x54>
 8024c60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8024c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024c68:	f001 bd5c 	b.w	8026724 <__retarget_lock_init_recursive>
 8024c6c:	bd10      	pop	{r4, pc}
 8024c6e:	bf00      	nop
 8024c70:	08024f45 	.word	0x08024f45
 8024c74:	08024f6b 	.word	0x08024f6b
 8024c78:	08024fa3 	.word	0x08024fa3
 8024c7c:	08024fc7 	.word	0x08024fc7
 8024c80:	20016380 	.word	0x20016380

08024c84 <stdio_exit_handler>:
 8024c84:	4a02      	ldr	r2, [pc, #8]	; (8024c90 <stdio_exit_handler+0xc>)
 8024c86:	4903      	ldr	r1, [pc, #12]	; (8024c94 <stdio_exit_handler+0x10>)
 8024c88:	4803      	ldr	r0, [pc, #12]	; (8024c98 <stdio_exit_handler+0x14>)
 8024c8a:	f000 b87b 	b.w	8024d84 <_fwalk_sglue>
 8024c8e:	bf00      	nop
 8024c90:	20000040 	.word	0x20000040
 8024c94:	080283c5 	.word	0x080283c5
 8024c98:	20000054 	.word	0x20000054

08024c9c <cleanup_stdio>:
 8024c9c:	6841      	ldr	r1, [r0, #4]
 8024c9e:	4b0c      	ldr	r3, [pc, #48]	; (8024cd0 <cleanup_stdio+0x34>)
 8024ca0:	4299      	cmp	r1, r3
 8024ca2:	b510      	push	{r4, lr}
 8024ca4:	4604      	mov	r4, r0
 8024ca6:	d001      	beq.n	8024cac <cleanup_stdio+0x10>
 8024ca8:	f003 fb8c 	bl	80283c4 <_fflush_r>
 8024cac:	68a1      	ldr	r1, [r4, #8]
 8024cae:	4b09      	ldr	r3, [pc, #36]	; (8024cd4 <cleanup_stdio+0x38>)
 8024cb0:	4299      	cmp	r1, r3
 8024cb2:	d002      	beq.n	8024cba <cleanup_stdio+0x1e>
 8024cb4:	4620      	mov	r0, r4
 8024cb6:	f003 fb85 	bl	80283c4 <_fflush_r>
 8024cba:	68e1      	ldr	r1, [r4, #12]
 8024cbc:	4b06      	ldr	r3, [pc, #24]	; (8024cd8 <cleanup_stdio+0x3c>)
 8024cbe:	4299      	cmp	r1, r3
 8024cc0:	d004      	beq.n	8024ccc <cleanup_stdio+0x30>
 8024cc2:	4620      	mov	r0, r4
 8024cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024cc8:	f003 bb7c 	b.w	80283c4 <_fflush_r>
 8024ccc:	bd10      	pop	{r4, pc}
 8024cce:	bf00      	nop
 8024cd0:	20016380 	.word	0x20016380
 8024cd4:	200163e8 	.word	0x200163e8
 8024cd8:	20016450 	.word	0x20016450

08024cdc <global_stdio_init.part.0>:
 8024cdc:	b510      	push	{r4, lr}
 8024cde:	4b0b      	ldr	r3, [pc, #44]	; (8024d0c <global_stdio_init.part.0+0x30>)
 8024ce0:	4c0b      	ldr	r4, [pc, #44]	; (8024d10 <global_stdio_init.part.0+0x34>)
 8024ce2:	4a0c      	ldr	r2, [pc, #48]	; (8024d14 <global_stdio_init.part.0+0x38>)
 8024ce4:	601a      	str	r2, [r3, #0]
 8024ce6:	4620      	mov	r0, r4
 8024ce8:	2200      	movs	r2, #0
 8024cea:	2104      	movs	r1, #4
 8024cec:	f7ff ff94 	bl	8024c18 <std>
 8024cf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8024cf4:	2201      	movs	r2, #1
 8024cf6:	2109      	movs	r1, #9
 8024cf8:	f7ff ff8e 	bl	8024c18 <std>
 8024cfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8024d00:	2202      	movs	r2, #2
 8024d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d06:	2112      	movs	r1, #18
 8024d08:	f7ff bf86 	b.w	8024c18 <std>
 8024d0c:	200164b8 	.word	0x200164b8
 8024d10:	20016380 	.word	0x20016380
 8024d14:	08024c85 	.word	0x08024c85

08024d18 <__sfp_lock_acquire>:
 8024d18:	4801      	ldr	r0, [pc, #4]	; (8024d20 <__sfp_lock_acquire+0x8>)
 8024d1a:	f001 bd05 	b.w	8026728 <__retarget_lock_acquire_recursive>
 8024d1e:	bf00      	nop
 8024d20:	200164e6 	.word	0x200164e6

08024d24 <__sfp_lock_release>:
 8024d24:	4801      	ldr	r0, [pc, #4]	; (8024d2c <__sfp_lock_release+0x8>)
 8024d26:	f001 bd01 	b.w	802672c <__retarget_lock_release_recursive>
 8024d2a:	bf00      	nop
 8024d2c:	200164e6 	.word	0x200164e6

08024d30 <__sinit>:
 8024d30:	b510      	push	{r4, lr}
 8024d32:	4604      	mov	r4, r0
 8024d34:	f7ff fff0 	bl	8024d18 <__sfp_lock_acquire>
 8024d38:	6a23      	ldr	r3, [r4, #32]
 8024d3a:	b11b      	cbz	r3, 8024d44 <__sinit+0x14>
 8024d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024d40:	f7ff bff0 	b.w	8024d24 <__sfp_lock_release>
 8024d44:	4b04      	ldr	r3, [pc, #16]	; (8024d58 <__sinit+0x28>)
 8024d46:	6223      	str	r3, [r4, #32]
 8024d48:	4b04      	ldr	r3, [pc, #16]	; (8024d5c <__sinit+0x2c>)
 8024d4a:	681b      	ldr	r3, [r3, #0]
 8024d4c:	2b00      	cmp	r3, #0
 8024d4e:	d1f5      	bne.n	8024d3c <__sinit+0xc>
 8024d50:	f7ff ffc4 	bl	8024cdc <global_stdio_init.part.0>
 8024d54:	e7f2      	b.n	8024d3c <__sinit+0xc>
 8024d56:	bf00      	nop
 8024d58:	08024c9d 	.word	0x08024c9d
 8024d5c:	200164b8 	.word	0x200164b8

08024d60 <fiprintf>:
 8024d60:	b40e      	push	{r1, r2, r3}
 8024d62:	b503      	push	{r0, r1, lr}
 8024d64:	4601      	mov	r1, r0
 8024d66:	ab03      	add	r3, sp, #12
 8024d68:	4805      	ldr	r0, [pc, #20]	; (8024d80 <fiprintf+0x20>)
 8024d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8024d6e:	6800      	ldr	r0, [r0, #0]
 8024d70:	9301      	str	r3, [sp, #4]
 8024d72:	f003 f987 	bl	8028084 <_vfiprintf_r>
 8024d76:	b002      	add	sp, #8
 8024d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8024d7c:	b003      	add	sp, #12
 8024d7e:	4770      	bx	lr
 8024d80:	200000a0 	.word	0x200000a0

08024d84 <_fwalk_sglue>:
 8024d84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8024d88:	4607      	mov	r7, r0
 8024d8a:	4688      	mov	r8, r1
 8024d8c:	4614      	mov	r4, r2
 8024d8e:	2600      	movs	r6, #0
 8024d90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8024d94:	f1b9 0901 	subs.w	r9, r9, #1
 8024d98:	d505      	bpl.n	8024da6 <_fwalk_sglue+0x22>
 8024d9a:	6824      	ldr	r4, [r4, #0]
 8024d9c:	2c00      	cmp	r4, #0
 8024d9e:	d1f7      	bne.n	8024d90 <_fwalk_sglue+0xc>
 8024da0:	4630      	mov	r0, r6
 8024da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8024da6:	89ab      	ldrh	r3, [r5, #12]
 8024da8:	2b01      	cmp	r3, #1
 8024daa:	d907      	bls.n	8024dbc <_fwalk_sglue+0x38>
 8024dac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8024db0:	3301      	adds	r3, #1
 8024db2:	d003      	beq.n	8024dbc <_fwalk_sglue+0x38>
 8024db4:	4629      	mov	r1, r5
 8024db6:	4638      	mov	r0, r7
 8024db8:	47c0      	blx	r8
 8024dba:	4306      	orrs	r6, r0
 8024dbc:	3568      	adds	r5, #104	; 0x68
 8024dbe:	e7e9      	b.n	8024d94 <_fwalk_sglue+0x10>

08024dc0 <iprintf>:
 8024dc0:	b40f      	push	{r0, r1, r2, r3}
 8024dc2:	b507      	push	{r0, r1, r2, lr}
 8024dc4:	4906      	ldr	r1, [pc, #24]	; (8024de0 <iprintf+0x20>)
 8024dc6:	ab04      	add	r3, sp, #16
 8024dc8:	6808      	ldr	r0, [r1, #0]
 8024dca:	f853 2b04 	ldr.w	r2, [r3], #4
 8024dce:	6881      	ldr	r1, [r0, #8]
 8024dd0:	9301      	str	r3, [sp, #4]
 8024dd2:	f003 f957 	bl	8028084 <_vfiprintf_r>
 8024dd6:	b003      	add	sp, #12
 8024dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8024ddc:	b004      	add	sp, #16
 8024dde:	4770      	bx	lr
 8024de0:	200000a0 	.word	0x200000a0

08024de4 <_puts_r>:
 8024de4:	6a03      	ldr	r3, [r0, #32]
 8024de6:	b570      	push	{r4, r5, r6, lr}
 8024de8:	6884      	ldr	r4, [r0, #8]
 8024dea:	4605      	mov	r5, r0
 8024dec:	460e      	mov	r6, r1
 8024dee:	b90b      	cbnz	r3, 8024df4 <_puts_r+0x10>
 8024df0:	f7ff ff9e 	bl	8024d30 <__sinit>
 8024df4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024df6:	07db      	lsls	r3, r3, #31
 8024df8:	d405      	bmi.n	8024e06 <_puts_r+0x22>
 8024dfa:	89a3      	ldrh	r3, [r4, #12]
 8024dfc:	0598      	lsls	r0, r3, #22
 8024dfe:	d402      	bmi.n	8024e06 <_puts_r+0x22>
 8024e00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024e02:	f001 fc91 	bl	8026728 <__retarget_lock_acquire_recursive>
 8024e06:	89a3      	ldrh	r3, [r4, #12]
 8024e08:	0719      	lsls	r1, r3, #28
 8024e0a:	d513      	bpl.n	8024e34 <_puts_r+0x50>
 8024e0c:	6923      	ldr	r3, [r4, #16]
 8024e0e:	b18b      	cbz	r3, 8024e34 <_puts_r+0x50>
 8024e10:	3e01      	subs	r6, #1
 8024e12:	68a3      	ldr	r3, [r4, #8]
 8024e14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8024e18:	3b01      	subs	r3, #1
 8024e1a:	60a3      	str	r3, [r4, #8]
 8024e1c:	b9e9      	cbnz	r1, 8024e5a <_puts_r+0x76>
 8024e1e:	2b00      	cmp	r3, #0
 8024e20:	da2e      	bge.n	8024e80 <_puts_r+0x9c>
 8024e22:	4622      	mov	r2, r4
 8024e24:	210a      	movs	r1, #10
 8024e26:	4628      	mov	r0, r5
 8024e28:	f000 f8d1 	bl	8024fce <__swbuf_r>
 8024e2c:	3001      	adds	r0, #1
 8024e2e:	d007      	beq.n	8024e40 <_puts_r+0x5c>
 8024e30:	250a      	movs	r5, #10
 8024e32:	e007      	b.n	8024e44 <_puts_r+0x60>
 8024e34:	4621      	mov	r1, r4
 8024e36:	4628      	mov	r0, r5
 8024e38:	f000 f906 	bl	8025048 <__swsetup_r>
 8024e3c:	2800      	cmp	r0, #0
 8024e3e:	d0e7      	beq.n	8024e10 <_puts_r+0x2c>
 8024e40:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8024e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024e46:	07da      	lsls	r2, r3, #31
 8024e48:	d405      	bmi.n	8024e56 <_puts_r+0x72>
 8024e4a:	89a3      	ldrh	r3, [r4, #12]
 8024e4c:	059b      	lsls	r3, r3, #22
 8024e4e:	d402      	bmi.n	8024e56 <_puts_r+0x72>
 8024e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024e52:	f001 fc6b 	bl	802672c <__retarget_lock_release_recursive>
 8024e56:	4628      	mov	r0, r5
 8024e58:	bd70      	pop	{r4, r5, r6, pc}
 8024e5a:	2b00      	cmp	r3, #0
 8024e5c:	da04      	bge.n	8024e68 <_puts_r+0x84>
 8024e5e:	69a2      	ldr	r2, [r4, #24]
 8024e60:	429a      	cmp	r2, r3
 8024e62:	dc06      	bgt.n	8024e72 <_puts_r+0x8e>
 8024e64:	290a      	cmp	r1, #10
 8024e66:	d004      	beq.n	8024e72 <_puts_r+0x8e>
 8024e68:	6823      	ldr	r3, [r4, #0]
 8024e6a:	1c5a      	adds	r2, r3, #1
 8024e6c:	6022      	str	r2, [r4, #0]
 8024e6e:	7019      	strb	r1, [r3, #0]
 8024e70:	e7cf      	b.n	8024e12 <_puts_r+0x2e>
 8024e72:	4622      	mov	r2, r4
 8024e74:	4628      	mov	r0, r5
 8024e76:	f000 f8aa 	bl	8024fce <__swbuf_r>
 8024e7a:	3001      	adds	r0, #1
 8024e7c:	d1c9      	bne.n	8024e12 <_puts_r+0x2e>
 8024e7e:	e7df      	b.n	8024e40 <_puts_r+0x5c>
 8024e80:	6823      	ldr	r3, [r4, #0]
 8024e82:	250a      	movs	r5, #10
 8024e84:	1c5a      	adds	r2, r3, #1
 8024e86:	6022      	str	r2, [r4, #0]
 8024e88:	701d      	strb	r5, [r3, #0]
 8024e8a:	e7db      	b.n	8024e44 <_puts_r+0x60>

08024e8c <puts>:
 8024e8c:	4b02      	ldr	r3, [pc, #8]	; (8024e98 <puts+0xc>)
 8024e8e:	4601      	mov	r1, r0
 8024e90:	6818      	ldr	r0, [r3, #0]
 8024e92:	f7ff bfa7 	b.w	8024de4 <_puts_r>
 8024e96:	bf00      	nop
 8024e98:	200000a0 	.word	0x200000a0

08024e9c <sniprintf>:
 8024e9c:	b40c      	push	{r2, r3}
 8024e9e:	b530      	push	{r4, r5, lr}
 8024ea0:	4b17      	ldr	r3, [pc, #92]	; (8024f00 <sniprintf+0x64>)
 8024ea2:	1e0c      	subs	r4, r1, #0
 8024ea4:	681d      	ldr	r5, [r3, #0]
 8024ea6:	b09d      	sub	sp, #116	; 0x74
 8024ea8:	da08      	bge.n	8024ebc <sniprintf+0x20>
 8024eaa:	238b      	movs	r3, #139	; 0x8b
 8024eac:	602b      	str	r3, [r5, #0]
 8024eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024eb2:	b01d      	add	sp, #116	; 0x74
 8024eb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024eb8:	b002      	add	sp, #8
 8024eba:	4770      	bx	lr
 8024ebc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8024ec0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8024ec4:	bf14      	ite	ne
 8024ec6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8024eca:	4623      	moveq	r3, r4
 8024ecc:	9304      	str	r3, [sp, #16]
 8024ece:	9307      	str	r3, [sp, #28]
 8024ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024ed4:	9002      	str	r0, [sp, #8]
 8024ed6:	9006      	str	r0, [sp, #24]
 8024ed8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8024edc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8024ede:	ab21      	add	r3, sp, #132	; 0x84
 8024ee0:	a902      	add	r1, sp, #8
 8024ee2:	4628      	mov	r0, r5
 8024ee4:	9301      	str	r3, [sp, #4]
 8024ee6:	f002 ffa5 	bl	8027e34 <_svfiprintf_r>
 8024eea:	1c43      	adds	r3, r0, #1
 8024eec:	bfbc      	itt	lt
 8024eee:	238b      	movlt	r3, #139	; 0x8b
 8024ef0:	602b      	strlt	r3, [r5, #0]
 8024ef2:	2c00      	cmp	r4, #0
 8024ef4:	d0dd      	beq.n	8024eb2 <sniprintf+0x16>
 8024ef6:	9b02      	ldr	r3, [sp, #8]
 8024ef8:	2200      	movs	r2, #0
 8024efa:	701a      	strb	r2, [r3, #0]
 8024efc:	e7d9      	b.n	8024eb2 <sniprintf+0x16>
 8024efe:	bf00      	nop
 8024f00:	200000a0 	.word	0x200000a0

08024f04 <siprintf>:
 8024f04:	b40e      	push	{r1, r2, r3}
 8024f06:	b500      	push	{lr}
 8024f08:	b09c      	sub	sp, #112	; 0x70
 8024f0a:	ab1d      	add	r3, sp, #116	; 0x74
 8024f0c:	9002      	str	r0, [sp, #8]
 8024f0e:	9006      	str	r0, [sp, #24]
 8024f10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024f14:	4809      	ldr	r0, [pc, #36]	; (8024f3c <siprintf+0x38>)
 8024f16:	9107      	str	r1, [sp, #28]
 8024f18:	9104      	str	r1, [sp, #16]
 8024f1a:	4909      	ldr	r1, [pc, #36]	; (8024f40 <siprintf+0x3c>)
 8024f1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8024f20:	9105      	str	r1, [sp, #20]
 8024f22:	6800      	ldr	r0, [r0, #0]
 8024f24:	9301      	str	r3, [sp, #4]
 8024f26:	a902      	add	r1, sp, #8
 8024f28:	f002 ff84 	bl	8027e34 <_svfiprintf_r>
 8024f2c:	9b02      	ldr	r3, [sp, #8]
 8024f2e:	2200      	movs	r2, #0
 8024f30:	701a      	strb	r2, [r3, #0]
 8024f32:	b01c      	add	sp, #112	; 0x70
 8024f34:	f85d eb04 	ldr.w	lr, [sp], #4
 8024f38:	b003      	add	sp, #12
 8024f3a:	4770      	bx	lr
 8024f3c:	200000a0 	.word	0x200000a0
 8024f40:	ffff0208 	.word	0xffff0208

08024f44 <__sread>:
 8024f44:	b510      	push	{r4, lr}
 8024f46:	460c      	mov	r4, r1
 8024f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024f4c:	f001 fb8c 	bl	8026668 <_read_r>
 8024f50:	2800      	cmp	r0, #0
 8024f52:	bfab      	itete	ge
 8024f54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8024f56:	89a3      	ldrhlt	r3, [r4, #12]
 8024f58:	181b      	addge	r3, r3, r0
 8024f5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8024f5e:	bfac      	ite	ge
 8024f60:	6563      	strge	r3, [r4, #84]	; 0x54
 8024f62:	81a3      	strhlt	r3, [r4, #12]
 8024f64:	bd10      	pop	{r4, pc}

08024f66 <__seofread>:
 8024f66:	2000      	movs	r0, #0
 8024f68:	4770      	bx	lr

08024f6a <__swrite>:
 8024f6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024f6e:	461f      	mov	r7, r3
 8024f70:	898b      	ldrh	r3, [r1, #12]
 8024f72:	05db      	lsls	r3, r3, #23
 8024f74:	4605      	mov	r5, r0
 8024f76:	460c      	mov	r4, r1
 8024f78:	4616      	mov	r6, r2
 8024f7a:	d505      	bpl.n	8024f88 <__swrite+0x1e>
 8024f7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024f80:	2302      	movs	r3, #2
 8024f82:	2200      	movs	r2, #0
 8024f84:	f001 fb5e 	bl	8026644 <_lseek_r>
 8024f88:	89a3      	ldrh	r3, [r4, #12]
 8024f8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8024f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024f92:	81a3      	strh	r3, [r4, #12]
 8024f94:	4632      	mov	r2, r6
 8024f96:	463b      	mov	r3, r7
 8024f98:	4628      	mov	r0, r5
 8024f9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8024f9e:	f001 bb85 	b.w	80266ac <_write_r>

08024fa2 <__sseek>:
 8024fa2:	b510      	push	{r4, lr}
 8024fa4:	460c      	mov	r4, r1
 8024fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024faa:	f001 fb4b 	bl	8026644 <_lseek_r>
 8024fae:	1c43      	adds	r3, r0, #1
 8024fb0:	89a3      	ldrh	r3, [r4, #12]
 8024fb2:	bf15      	itete	ne
 8024fb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8024fb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8024fba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8024fbe:	81a3      	strheq	r3, [r4, #12]
 8024fc0:	bf18      	it	ne
 8024fc2:	81a3      	strhne	r3, [r4, #12]
 8024fc4:	bd10      	pop	{r4, pc}

08024fc6 <__sclose>:
 8024fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024fca:	f001 bad5 	b.w	8026578 <_close_r>

08024fce <__swbuf_r>:
 8024fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024fd0:	460e      	mov	r6, r1
 8024fd2:	4614      	mov	r4, r2
 8024fd4:	4605      	mov	r5, r0
 8024fd6:	b118      	cbz	r0, 8024fe0 <__swbuf_r+0x12>
 8024fd8:	6a03      	ldr	r3, [r0, #32]
 8024fda:	b90b      	cbnz	r3, 8024fe0 <__swbuf_r+0x12>
 8024fdc:	f7ff fea8 	bl	8024d30 <__sinit>
 8024fe0:	69a3      	ldr	r3, [r4, #24]
 8024fe2:	60a3      	str	r3, [r4, #8]
 8024fe4:	89a3      	ldrh	r3, [r4, #12]
 8024fe6:	071a      	lsls	r2, r3, #28
 8024fe8:	d525      	bpl.n	8025036 <__swbuf_r+0x68>
 8024fea:	6923      	ldr	r3, [r4, #16]
 8024fec:	b31b      	cbz	r3, 8025036 <__swbuf_r+0x68>
 8024fee:	6823      	ldr	r3, [r4, #0]
 8024ff0:	6922      	ldr	r2, [r4, #16]
 8024ff2:	1a98      	subs	r0, r3, r2
 8024ff4:	6963      	ldr	r3, [r4, #20]
 8024ff6:	b2f6      	uxtb	r6, r6
 8024ff8:	4283      	cmp	r3, r0
 8024ffa:	4637      	mov	r7, r6
 8024ffc:	dc04      	bgt.n	8025008 <__swbuf_r+0x3a>
 8024ffe:	4621      	mov	r1, r4
 8025000:	4628      	mov	r0, r5
 8025002:	f003 f9df 	bl	80283c4 <_fflush_r>
 8025006:	b9e0      	cbnz	r0, 8025042 <__swbuf_r+0x74>
 8025008:	68a3      	ldr	r3, [r4, #8]
 802500a:	3b01      	subs	r3, #1
 802500c:	60a3      	str	r3, [r4, #8]
 802500e:	6823      	ldr	r3, [r4, #0]
 8025010:	1c5a      	adds	r2, r3, #1
 8025012:	6022      	str	r2, [r4, #0]
 8025014:	701e      	strb	r6, [r3, #0]
 8025016:	6962      	ldr	r2, [r4, #20]
 8025018:	1c43      	adds	r3, r0, #1
 802501a:	429a      	cmp	r2, r3
 802501c:	d004      	beq.n	8025028 <__swbuf_r+0x5a>
 802501e:	89a3      	ldrh	r3, [r4, #12]
 8025020:	07db      	lsls	r3, r3, #31
 8025022:	d506      	bpl.n	8025032 <__swbuf_r+0x64>
 8025024:	2e0a      	cmp	r6, #10
 8025026:	d104      	bne.n	8025032 <__swbuf_r+0x64>
 8025028:	4621      	mov	r1, r4
 802502a:	4628      	mov	r0, r5
 802502c:	f003 f9ca 	bl	80283c4 <_fflush_r>
 8025030:	b938      	cbnz	r0, 8025042 <__swbuf_r+0x74>
 8025032:	4638      	mov	r0, r7
 8025034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025036:	4621      	mov	r1, r4
 8025038:	4628      	mov	r0, r5
 802503a:	f000 f805 	bl	8025048 <__swsetup_r>
 802503e:	2800      	cmp	r0, #0
 8025040:	d0d5      	beq.n	8024fee <__swbuf_r+0x20>
 8025042:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8025046:	e7f4      	b.n	8025032 <__swbuf_r+0x64>

08025048 <__swsetup_r>:
 8025048:	b538      	push	{r3, r4, r5, lr}
 802504a:	4b2a      	ldr	r3, [pc, #168]	; (80250f4 <__swsetup_r+0xac>)
 802504c:	4605      	mov	r5, r0
 802504e:	6818      	ldr	r0, [r3, #0]
 8025050:	460c      	mov	r4, r1
 8025052:	b118      	cbz	r0, 802505c <__swsetup_r+0x14>
 8025054:	6a03      	ldr	r3, [r0, #32]
 8025056:	b90b      	cbnz	r3, 802505c <__swsetup_r+0x14>
 8025058:	f7ff fe6a 	bl	8024d30 <__sinit>
 802505c:	89a3      	ldrh	r3, [r4, #12]
 802505e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025062:	0718      	lsls	r0, r3, #28
 8025064:	d422      	bmi.n	80250ac <__swsetup_r+0x64>
 8025066:	06d9      	lsls	r1, r3, #27
 8025068:	d407      	bmi.n	802507a <__swsetup_r+0x32>
 802506a:	2309      	movs	r3, #9
 802506c:	602b      	str	r3, [r5, #0]
 802506e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025072:	81a3      	strh	r3, [r4, #12]
 8025074:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025078:	e034      	b.n	80250e4 <__swsetup_r+0x9c>
 802507a:	0758      	lsls	r0, r3, #29
 802507c:	d512      	bpl.n	80250a4 <__swsetup_r+0x5c>
 802507e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025080:	b141      	cbz	r1, 8025094 <__swsetup_r+0x4c>
 8025082:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025086:	4299      	cmp	r1, r3
 8025088:	d002      	beq.n	8025090 <__swsetup_r+0x48>
 802508a:	4628      	mov	r0, r5
 802508c:	f002 f9ea 	bl	8027464 <_free_r>
 8025090:	2300      	movs	r3, #0
 8025092:	6363      	str	r3, [r4, #52]	; 0x34
 8025094:	89a3      	ldrh	r3, [r4, #12]
 8025096:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802509a:	81a3      	strh	r3, [r4, #12]
 802509c:	2300      	movs	r3, #0
 802509e:	6063      	str	r3, [r4, #4]
 80250a0:	6923      	ldr	r3, [r4, #16]
 80250a2:	6023      	str	r3, [r4, #0]
 80250a4:	89a3      	ldrh	r3, [r4, #12]
 80250a6:	f043 0308 	orr.w	r3, r3, #8
 80250aa:	81a3      	strh	r3, [r4, #12]
 80250ac:	6923      	ldr	r3, [r4, #16]
 80250ae:	b94b      	cbnz	r3, 80250c4 <__swsetup_r+0x7c>
 80250b0:	89a3      	ldrh	r3, [r4, #12]
 80250b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80250b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80250ba:	d003      	beq.n	80250c4 <__swsetup_r+0x7c>
 80250bc:	4621      	mov	r1, r4
 80250be:	4628      	mov	r0, r5
 80250c0:	f003 f9ce 	bl	8028460 <__smakebuf_r>
 80250c4:	89a0      	ldrh	r0, [r4, #12]
 80250c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80250ca:	f010 0301 	ands.w	r3, r0, #1
 80250ce:	d00a      	beq.n	80250e6 <__swsetup_r+0x9e>
 80250d0:	2300      	movs	r3, #0
 80250d2:	60a3      	str	r3, [r4, #8]
 80250d4:	6963      	ldr	r3, [r4, #20]
 80250d6:	425b      	negs	r3, r3
 80250d8:	61a3      	str	r3, [r4, #24]
 80250da:	6923      	ldr	r3, [r4, #16]
 80250dc:	b943      	cbnz	r3, 80250f0 <__swsetup_r+0xa8>
 80250de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80250e2:	d1c4      	bne.n	802506e <__swsetup_r+0x26>
 80250e4:	bd38      	pop	{r3, r4, r5, pc}
 80250e6:	0781      	lsls	r1, r0, #30
 80250e8:	bf58      	it	pl
 80250ea:	6963      	ldrpl	r3, [r4, #20]
 80250ec:	60a3      	str	r3, [r4, #8]
 80250ee:	e7f4      	b.n	80250da <__swsetup_r+0x92>
 80250f0:	2000      	movs	r0, #0
 80250f2:	e7f7      	b.n	80250e4 <__swsetup_r+0x9c>
 80250f4:	200000a0 	.word	0x200000a0

080250f8 <memcmp>:
 80250f8:	b510      	push	{r4, lr}
 80250fa:	3901      	subs	r1, #1
 80250fc:	4402      	add	r2, r0
 80250fe:	4290      	cmp	r0, r2
 8025100:	d101      	bne.n	8025106 <memcmp+0xe>
 8025102:	2000      	movs	r0, #0
 8025104:	e005      	b.n	8025112 <memcmp+0x1a>
 8025106:	7803      	ldrb	r3, [r0, #0]
 8025108:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802510c:	42a3      	cmp	r3, r4
 802510e:	d001      	beq.n	8025114 <memcmp+0x1c>
 8025110:	1b18      	subs	r0, r3, r4
 8025112:	bd10      	pop	{r4, pc}
 8025114:	3001      	adds	r0, #1
 8025116:	e7f2      	b.n	80250fe <memcmp+0x6>

08025118 <memmove>:
 8025118:	4288      	cmp	r0, r1
 802511a:	b510      	push	{r4, lr}
 802511c:	eb01 0402 	add.w	r4, r1, r2
 8025120:	d902      	bls.n	8025128 <memmove+0x10>
 8025122:	4284      	cmp	r4, r0
 8025124:	4623      	mov	r3, r4
 8025126:	d807      	bhi.n	8025138 <memmove+0x20>
 8025128:	1e43      	subs	r3, r0, #1
 802512a:	42a1      	cmp	r1, r4
 802512c:	d008      	beq.n	8025140 <memmove+0x28>
 802512e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025132:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025136:	e7f8      	b.n	802512a <memmove+0x12>
 8025138:	4402      	add	r2, r0
 802513a:	4601      	mov	r1, r0
 802513c:	428a      	cmp	r2, r1
 802513e:	d100      	bne.n	8025142 <memmove+0x2a>
 8025140:	bd10      	pop	{r4, pc}
 8025142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802514a:	e7f7      	b.n	802513c <memmove+0x24>

0802514c <memset>:
 802514c:	4402      	add	r2, r0
 802514e:	4603      	mov	r3, r0
 8025150:	4293      	cmp	r3, r2
 8025152:	d100      	bne.n	8025156 <memset+0xa>
 8025154:	4770      	bx	lr
 8025156:	f803 1b01 	strb.w	r1, [r3], #1
 802515a:	e7f9      	b.n	8025150 <memset+0x4>

0802515c <strcat>:
 802515c:	b510      	push	{r4, lr}
 802515e:	4602      	mov	r2, r0
 8025160:	7814      	ldrb	r4, [r2, #0]
 8025162:	4613      	mov	r3, r2
 8025164:	3201      	adds	r2, #1
 8025166:	2c00      	cmp	r4, #0
 8025168:	d1fa      	bne.n	8025160 <strcat+0x4>
 802516a:	3b01      	subs	r3, #1
 802516c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025170:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025174:	2a00      	cmp	r2, #0
 8025176:	d1f9      	bne.n	802516c <strcat+0x10>
 8025178:	bd10      	pop	{r4, pc}

0802517a <strchr>:
 802517a:	b2c9      	uxtb	r1, r1
 802517c:	4603      	mov	r3, r0
 802517e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025182:	b11a      	cbz	r2, 802518c <strchr+0x12>
 8025184:	428a      	cmp	r2, r1
 8025186:	d1f9      	bne.n	802517c <strchr+0x2>
 8025188:	4618      	mov	r0, r3
 802518a:	4770      	bx	lr
 802518c:	2900      	cmp	r1, #0
 802518e:	bf18      	it	ne
 8025190:	2300      	movne	r3, #0
 8025192:	e7f9      	b.n	8025188 <strchr+0xe>

08025194 <strcspn>:
 8025194:	b570      	push	{r4, r5, r6, lr}
 8025196:	4603      	mov	r3, r0
 8025198:	461e      	mov	r6, r3
 802519a:	f813 4b01 	ldrb.w	r4, [r3], #1
 802519e:	b144      	cbz	r4, 80251b2 <strcspn+0x1e>
 80251a0:	1e4a      	subs	r2, r1, #1
 80251a2:	e001      	b.n	80251a8 <strcspn+0x14>
 80251a4:	42a5      	cmp	r5, r4
 80251a6:	d004      	beq.n	80251b2 <strcspn+0x1e>
 80251a8:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80251ac:	2d00      	cmp	r5, #0
 80251ae:	d1f9      	bne.n	80251a4 <strcspn+0x10>
 80251b0:	e7f2      	b.n	8025198 <strcspn+0x4>
 80251b2:	1a30      	subs	r0, r6, r0
 80251b4:	bd70      	pop	{r4, r5, r6, pc}

080251b6 <strncmp>:
 80251b6:	b510      	push	{r4, lr}
 80251b8:	b16a      	cbz	r2, 80251d6 <strncmp+0x20>
 80251ba:	3901      	subs	r1, #1
 80251bc:	1884      	adds	r4, r0, r2
 80251be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80251c2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80251c6:	429a      	cmp	r2, r3
 80251c8:	d103      	bne.n	80251d2 <strncmp+0x1c>
 80251ca:	42a0      	cmp	r0, r4
 80251cc:	d001      	beq.n	80251d2 <strncmp+0x1c>
 80251ce:	2a00      	cmp	r2, #0
 80251d0:	d1f5      	bne.n	80251be <strncmp+0x8>
 80251d2:	1ad0      	subs	r0, r2, r3
 80251d4:	bd10      	pop	{r4, pc}
 80251d6:	4610      	mov	r0, r2
 80251d8:	e7fc      	b.n	80251d4 <strncmp+0x1e>

080251da <strncpy>:
 80251da:	b510      	push	{r4, lr}
 80251dc:	3901      	subs	r1, #1
 80251de:	4603      	mov	r3, r0
 80251e0:	b132      	cbz	r2, 80251f0 <strncpy+0x16>
 80251e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80251e6:	f803 4b01 	strb.w	r4, [r3], #1
 80251ea:	3a01      	subs	r2, #1
 80251ec:	2c00      	cmp	r4, #0
 80251ee:	d1f7      	bne.n	80251e0 <strncpy+0x6>
 80251f0:	441a      	add	r2, r3
 80251f2:	2100      	movs	r1, #0
 80251f4:	4293      	cmp	r3, r2
 80251f6:	d100      	bne.n	80251fa <strncpy+0x20>
 80251f8:	bd10      	pop	{r4, pc}
 80251fa:	f803 1b01 	strb.w	r1, [r3], #1
 80251fe:	e7f9      	b.n	80251f4 <strncpy+0x1a>

08025200 <strspn>:
 8025200:	b570      	push	{r4, r5, r6, lr}
 8025202:	4603      	mov	r3, r0
 8025204:	461e      	mov	r6, r3
 8025206:	f813 4b01 	ldrb.w	r4, [r3], #1
 802520a:	b13c      	cbz	r4, 802521c <strspn+0x1c>
 802520c:	1e4a      	subs	r2, r1, #1
 802520e:	e001      	b.n	8025214 <strspn+0x14>
 8025210:	42a5      	cmp	r5, r4
 8025212:	d0f7      	beq.n	8025204 <strspn+0x4>
 8025214:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8025218:	2d00      	cmp	r5, #0
 802521a:	d1f9      	bne.n	8025210 <strspn+0x10>
 802521c:	1a30      	subs	r0, r6, r0
 802521e:	bd70      	pop	{r4, r5, r6, pc}

08025220 <gmtime_r>:
 8025220:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025224:	4a4d      	ldr	r2, [pc, #308]	; (802535c <gmtime_r+0x13c>)
 8025226:	460c      	mov	r4, r1
 8025228:	2300      	movs	r3, #0
 802522a:	e9d0 0100 	ldrd	r0, r1, [r0]
 802522e:	f7db fccb 	bl	8000bc8 <__aeabi_ldivmod>
 8025232:	2a00      	cmp	r2, #0
 8025234:	bfbc      	itt	lt
 8025236:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 802523a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 802523e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8025242:	f500 202f 	add.w	r0, r0, #716800	; 0xaf000
 8025246:	fbb2 f3f1 	udiv	r3, r2, r1
 802524a:	fb01 2213 	mls	r2, r1, r3, r2
 802524e:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8025252:	bfac      	ite	ge
 8025254:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8025258:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 802525c:	60a3      	str	r3, [r4, #8]
 802525e:	fbb2 f3f1 	udiv	r3, r2, r1
 8025262:	fb01 2213 	mls	r2, r1, r3, r2
 8025266:	6063      	str	r3, [r4, #4]
 8025268:	6022      	str	r2, [r4, #0]
 802526a:	1cc3      	adds	r3, r0, #3
 802526c:	2207      	movs	r2, #7
 802526e:	fb93 f2f2 	sdiv	r2, r3, r2
 8025272:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8025276:	1a9b      	subs	r3, r3, r2
 8025278:	bf48      	it	mi
 802527a:	3307      	addmi	r3, #7
 802527c:	2800      	cmp	r0, #0
 802527e:	61a3      	str	r3, [r4, #24]
 8025280:	bfb8      	it	lt
 8025282:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8025286:	4936      	ldr	r1, [pc, #216]	; (8025360 <gmtime_r+0x140>)
 8025288:	bfae      	itee	ge
 802528a:	fb90 f1f1 	sdivge	r1, r0, r1
 802528e:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8025292:	fb93 f1f1 	sdivlt	r1, r3, r1
 8025296:	4b33      	ldr	r3, [pc, #204]	; (8025364 <gmtime_r+0x144>)
 8025298:	fb03 0001 	mla	r0, r3, r1, r0
 802529c:	f648 63ac 	movw	r3, #36524	; 0x8eac
 80252a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80252a4:	4403      	add	r3, r0
 80252a6:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 80252aa:	fbb0 f2fc 	udiv	r2, r0, ip
 80252ae:	1a9b      	subs	r3, r3, r2
 80252b0:	f240 176d 	movw	r7, #365	; 0x16d
 80252b4:	4a2c      	ldr	r2, [pc, #176]	; (8025368 <gmtime_r+0x148>)
 80252b6:	fbb0 f2f2 	udiv	r2, r0, r2
 80252ba:	2664      	movs	r6, #100	; 0x64
 80252bc:	1a9b      	subs	r3, r3, r2
 80252be:	fbb3 f2f7 	udiv	r2, r3, r7
 80252c2:	fbb3 f3fc 	udiv	r3, r3, ip
 80252c6:	fbb2 f5f6 	udiv	r5, r2, r6
 80252ca:	1aeb      	subs	r3, r5, r3
 80252cc:	4403      	add	r3, r0
 80252ce:	fb07 3312 	mls	r3, r7, r2, r3
 80252d2:	2099      	movs	r0, #153	; 0x99
 80252d4:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80252d8:	3702      	adds	r7, #2
 80252da:	f103 0e01 	add.w	lr, r3, #1
 80252de:	fbb7 fcf0 	udiv	ip, r7, r0
 80252e2:	fb00 f00c 	mul.w	r0, r0, ip
 80252e6:	3002      	adds	r0, #2
 80252e8:	f04f 0805 	mov.w	r8, #5
 80252ec:	fbb0 f0f8 	udiv	r0, r0, r8
 80252f0:	ebae 0000 	sub.w	r0, lr, r0
 80252f4:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 80252f8:	4577      	cmp	r7, lr
 80252fa:	bf94      	ite	ls
 80252fc:	2702      	movls	r7, #2
 80252fe:	f06f 0709 	mvnhi.w	r7, #9
 8025302:	4467      	add	r7, ip
 8025304:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8025308:	fb0c 2101 	mla	r1, ip, r1, r2
 802530c:	2f01      	cmp	r7, #1
 802530e:	bf98      	it	ls
 8025310:	3101      	addls	r1, #1
 8025312:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8025316:	d30c      	bcc.n	8025332 <gmtime_r+0x112>
 8025318:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 802531c:	61e3      	str	r3, [r4, #28]
 802531e:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8025322:	2300      	movs	r3, #0
 8025324:	60e0      	str	r0, [r4, #12]
 8025326:	e9c4 7104 	strd	r7, r1, [r4, #16]
 802532a:	6223      	str	r3, [r4, #32]
 802532c:	4620      	mov	r0, r4
 802532e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025332:	f012 0f03 	tst.w	r2, #3
 8025336:	d102      	bne.n	802533e <gmtime_r+0x11e>
 8025338:	fb06 2515 	mls	r5, r6, r5, r2
 802533c:	b95d      	cbnz	r5, 8025356 <gmtime_r+0x136>
 802533e:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8025342:	fbb2 f6f5 	udiv	r6, r2, r5
 8025346:	fb05 2216 	mls	r2, r5, r6, r2
 802534a:	fab2 f282 	clz	r2, r2
 802534e:	0952      	lsrs	r2, r2, #5
 8025350:	333b      	adds	r3, #59	; 0x3b
 8025352:	4413      	add	r3, r2
 8025354:	e7e2      	b.n	802531c <gmtime_r+0xfc>
 8025356:	2201      	movs	r2, #1
 8025358:	e7fa      	b.n	8025350 <gmtime_r+0x130>
 802535a:	bf00      	nop
 802535c:	00015180 	.word	0x00015180
 8025360:	00023ab1 	.word	0x00023ab1
 8025364:	fffdc54f 	.word	0xfffdc54f
 8025368:	00023ab0 	.word	0x00023ab0

0802536c <localtime_r>:
 802536c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025370:	4680      	mov	r8, r0
 8025372:	9101      	str	r1, [sp, #4]
 8025374:	f003 f90c 	bl	8028590 <__gettzinfo>
 8025378:	9901      	ldr	r1, [sp, #4]
 802537a:	4605      	mov	r5, r0
 802537c:	4640      	mov	r0, r8
 802537e:	f7ff ff4f 	bl	8025220 <gmtime_r>
 8025382:	6943      	ldr	r3, [r0, #20]
 8025384:	0799      	lsls	r1, r3, #30
 8025386:	4604      	mov	r4, r0
 8025388:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 802538c:	d105      	bne.n	802539a <localtime_r+0x2e>
 802538e:	2264      	movs	r2, #100	; 0x64
 8025390:	fb97 f3f2 	sdiv	r3, r7, r2
 8025394:	fb02 7313 	mls	r3, r2, r3, r7
 8025398:	bb7b      	cbnz	r3, 80253fa <localtime_r+0x8e>
 802539a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802539e:	fb97 f3f2 	sdiv	r3, r7, r2
 80253a2:	fb02 7313 	mls	r3, r2, r3, r7
 80253a6:	fab3 f383 	clz	r3, r3
 80253aa:	095b      	lsrs	r3, r3, #5
 80253ac:	4e68      	ldr	r6, [pc, #416]	; (8025550 <localtime_r+0x1e4>)
 80253ae:	2230      	movs	r2, #48	; 0x30
 80253b0:	fb02 6603 	mla	r6, r2, r3, r6
 80253b4:	f000 feaa 	bl	802610c <__tz_lock>
 80253b8:	f000 feb4 	bl	8026124 <_tzset_unlocked>
 80253bc:	4b65      	ldr	r3, [pc, #404]	; (8025554 <localtime_r+0x1e8>)
 80253be:	681b      	ldr	r3, [r3, #0]
 80253c0:	b353      	cbz	r3, 8025418 <localtime_r+0xac>
 80253c2:	686b      	ldr	r3, [r5, #4]
 80253c4:	42bb      	cmp	r3, r7
 80253c6:	d11a      	bne.n	80253fe <localtime_r+0x92>
 80253c8:	682f      	ldr	r7, [r5, #0]
 80253ca:	e9d8 2300 	ldrd	r2, r3, [r8]
 80253ce:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 80253d2:	b9e7      	cbnz	r7, 802540e <localtime_r+0xa2>
 80253d4:	4282      	cmp	r2, r0
 80253d6:	eb73 0101 	sbcs.w	r1, r3, r1
 80253da:	da25      	bge.n	8025428 <localtime_r+0xbc>
 80253dc:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 80253e0:	4282      	cmp	r2, r0
 80253e2:	eb73 0701 	sbcs.w	r7, r3, r1
 80253e6:	bfb4      	ite	lt
 80253e8:	2701      	movlt	r7, #1
 80253ea:	2700      	movge	r7, #0
 80253ec:	4282      	cmp	r2, r0
 80253ee:	eb73 0101 	sbcs.w	r1, r3, r1
 80253f2:	6227      	str	r7, [r4, #32]
 80253f4:	db1a      	blt.n	802542c <localtime_r+0xc0>
 80253f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80253f8:	e019      	b.n	802542e <localtime_r+0xc2>
 80253fa:	2301      	movs	r3, #1
 80253fc:	e7d6      	b.n	80253ac <localtime_r+0x40>
 80253fe:	4638      	mov	r0, r7
 8025400:	f000 fdde 	bl	8025fc0 <__tzcalc_limits>
 8025404:	2800      	cmp	r0, #0
 8025406:	d1df      	bne.n	80253c8 <localtime_r+0x5c>
 8025408:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 802540c:	e004      	b.n	8025418 <localtime_r+0xac>
 802540e:	4282      	cmp	r2, r0
 8025410:	eb73 0101 	sbcs.w	r1, r3, r1
 8025414:	da02      	bge.n	802541c <localtime_r+0xb0>
 8025416:	2300      	movs	r3, #0
 8025418:	6223      	str	r3, [r4, #32]
 802541a:	e7ec      	b.n	80253f6 <localtime_r+0x8a>
 802541c:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8025420:	4282      	cmp	r2, r0
 8025422:	eb73 0101 	sbcs.w	r1, r3, r1
 8025426:	daf6      	bge.n	8025416 <localtime_r+0xaa>
 8025428:	2301      	movs	r3, #1
 802542a:	6223      	str	r3, [r4, #32]
 802542c:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 802542e:	6861      	ldr	r1, [r4, #4]
 8025430:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8025434:	fb93 f0f2 	sdiv	r0, r3, r2
 8025438:	fb02 3310 	mls	r3, r2, r0, r3
 802543c:	223c      	movs	r2, #60	; 0x3c
 802543e:	fb93 f5f2 	sdiv	r5, r3, r2
 8025442:	fb02 3215 	mls	r2, r2, r5, r3
 8025446:	6823      	ldr	r3, [r4, #0]
 8025448:	1a9b      	subs	r3, r3, r2
 802544a:	68a2      	ldr	r2, [r4, #8]
 802544c:	6023      	str	r3, [r4, #0]
 802544e:	1b49      	subs	r1, r1, r5
 8025450:	1a12      	subs	r2, r2, r0
 8025452:	2b3b      	cmp	r3, #59	; 0x3b
 8025454:	6061      	str	r1, [r4, #4]
 8025456:	60a2      	str	r2, [r4, #8]
 8025458:	dd35      	ble.n	80254c6 <localtime_r+0x15a>
 802545a:	3101      	adds	r1, #1
 802545c:	6061      	str	r1, [r4, #4]
 802545e:	3b3c      	subs	r3, #60	; 0x3c
 8025460:	6023      	str	r3, [r4, #0]
 8025462:	6863      	ldr	r3, [r4, #4]
 8025464:	2b3b      	cmp	r3, #59	; 0x3b
 8025466:	dd34      	ble.n	80254d2 <localtime_r+0x166>
 8025468:	3201      	adds	r2, #1
 802546a:	60a2      	str	r2, [r4, #8]
 802546c:	3b3c      	subs	r3, #60	; 0x3c
 802546e:	6063      	str	r3, [r4, #4]
 8025470:	68a3      	ldr	r3, [r4, #8]
 8025472:	2b17      	cmp	r3, #23
 8025474:	dd33      	ble.n	80254de <localtime_r+0x172>
 8025476:	69e2      	ldr	r2, [r4, #28]
 8025478:	3201      	adds	r2, #1
 802547a:	61e2      	str	r2, [r4, #28]
 802547c:	69a2      	ldr	r2, [r4, #24]
 802547e:	3201      	adds	r2, #1
 8025480:	2a07      	cmp	r2, #7
 8025482:	bfa8      	it	ge
 8025484:	2200      	movge	r2, #0
 8025486:	61a2      	str	r2, [r4, #24]
 8025488:	68e2      	ldr	r2, [r4, #12]
 802548a:	3b18      	subs	r3, #24
 802548c:	3201      	adds	r2, #1
 802548e:	60a3      	str	r3, [r4, #8]
 8025490:	6923      	ldr	r3, [r4, #16]
 8025492:	60e2      	str	r2, [r4, #12]
 8025494:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8025498:	428a      	cmp	r2, r1
 802549a:	dd0e      	ble.n	80254ba <localtime_r+0x14e>
 802549c:	2b0b      	cmp	r3, #11
 802549e:	eba2 0201 	sub.w	r2, r2, r1
 80254a2:	60e2      	str	r2, [r4, #12]
 80254a4:	f103 0201 	add.w	r2, r3, #1
 80254a8:	bf09      	itett	eq
 80254aa:	6963      	ldreq	r3, [r4, #20]
 80254ac:	6122      	strne	r2, [r4, #16]
 80254ae:	2200      	moveq	r2, #0
 80254b0:	3301      	addeq	r3, #1
 80254b2:	bf02      	ittt	eq
 80254b4:	6122      	streq	r2, [r4, #16]
 80254b6:	6163      	streq	r3, [r4, #20]
 80254b8:	61e2      	streq	r2, [r4, #28]
 80254ba:	f000 fe2d 	bl	8026118 <__tz_unlock>
 80254be:	4620      	mov	r0, r4
 80254c0:	b002      	add	sp, #8
 80254c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80254c6:	2b00      	cmp	r3, #0
 80254c8:	dacb      	bge.n	8025462 <localtime_r+0xf6>
 80254ca:	3901      	subs	r1, #1
 80254cc:	6061      	str	r1, [r4, #4]
 80254ce:	333c      	adds	r3, #60	; 0x3c
 80254d0:	e7c6      	b.n	8025460 <localtime_r+0xf4>
 80254d2:	2b00      	cmp	r3, #0
 80254d4:	dacc      	bge.n	8025470 <localtime_r+0x104>
 80254d6:	3a01      	subs	r2, #1
 80254d8:	60a2      	str	r2, [r4, #8]
 80254da:	333c      	adds	r3, #60	; 0x3c
 80254dc:	e7c7      	b.n	802546e <localtime_r+0x102>
 80254de:	2b00      	cmp	r3, #0
 80254e0:	daeb      	bge.n	80254ba <localtime_r+0x14e>
 80254e2:	69e2      	ldr	r2, [r4, #28]
 80254e4:	3a01      	subs	r2, #1
 80254e6:	61e2      	str	r2, [r4, #28]
 80254e8:	69a2      	ldr	r2, [r4, #24]
 80254ea:	3a01      	subs	r2, #1
 80254ec:	bf48      	it	mi
 80254ee:	2206      	movmi	r2, #6
 80254f0:	61a2      	str	r2, [r4, #24]
 80254f2:	68e2      	ldr	r2, [r4, #12]
 80254f4:	3318      	adds	r3, #24
 80254f6:	3a01      	subs	r2, #1
 80254f8:	60e2      	str	r2, [r4, #12]
 80254fa:	60a3      	str	r3, [r4, #8]
 80254fc:	2a00      	cmp	r2, #0
 80254fe:	d1dc      	bne.n	80254ba <localtime_r+0x14e>
 8025500:	6923      	ldr	r3, [r4, #16]
 8025502:	3b01      	subs	r3, #1
 8025504:	d405      	bmi.n	8025512 <localtime_r+0x1a6>
 8025506:	6123      	str	r3, [r4, #16]
 8025508:	6923      	ldr	r3, [r4, #16]
 802550a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802550e:	60e3      	str	r3, [r4, #12]
 8025510:	e7d3      	b.n	80254ba <localtime_r+0x14e>
 8025512:	230b      	movs	r3, #11
 8025514:	6123      	str	r3, [r4, #16]
 8025516:	6963      	ldr	r3, [r4, #20]
 8025518:	1e5a      	subs	r2, r3, #1
 802551a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 802551e:	6162      	str	r2, [r4, #20]
 8025520:	079a      	lsls	r2, r3, #30
 8025522:	d105      	bne.n	8025530 <localtime_r+0x1c4>
 8025524:	2164      	movs	r1, #100	; 0x64
 8025526:	fb93 f2f1 	sdiv	r2, r3, r1
 802552a:	fb01 3212 	mls	r2, r1, r2, r3
 802552e:	b962      	cbnz	r2, 802554a <localtime_r+0x1de>
 8025530:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8025534:	fb93 f1f2 	sdiv	r1, r3, r2
 8025538:	fb02 3311 	mls	r3, r2, r1, r3
 802553c:	fab3 f383 	clz	r3, r3
 8025540:	095b      	lsrs	r3, r3, #5
 8025542:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8025546:	61e3      	str	r3, [r4, #28]
 8025548:	e7de      	b.n	8025508 <localtime_r+0x19c>
 802554a:	2301      	movs	r3, #1
 802554c:	e7f9      	b.n	8025542 <localtime_r+0x1d6>
 802554e:	bf00      	nop
 8025550:	0802e720 	.word	0x0802e720
 8025554:	200164d8 	.word	0x200164d8

08025558 <iso_year_adjust>:
 8025558:	6942      	ldr	r2, [r0, #20]
 802555a:	2a00      	cmp	r2, #0
 802555c:	f240 736c 	movw	r3, #1900	; 0x76c
 8025560:	bfa8      	it	ge
 8025562:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8025566:	4413      	add	r3, r2
 8025568:	0792      	lsls	r2, r2, #30
 802556a:	d105      	bne.n	8025578 <iso_year_adjust+0x20>
 802556c:	2164      	movs	r1, #100	; 0x64
 802556e:	fb93 f2f1 	sdiv	r2, r3, r1
 8025572:	fb01 3212 	mls	r2, r1, r2, r3
 8025576:	b9ca      	cbnz	r2, 80255ac <iso_year_adjust+0x54>
 8025578:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802557c:	fb93 f1f2 	sdiv	r1, r3, r2
 8025580:	fb02 3311 	mls	r3, r2, r1, r3
 8025584:	fab3 f383 	clz	r3, r3
 8025588:	095b      	lsrs	r3, r3, #5
 802558a:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802558e:	0040      	lsls	r0, r0, #1
 8025590:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8025594:	4418      	add	r0, r3
 8025596:	f241 63a2 	movw	r3, #5794	; 0x16a2
 802559a:	4298      	cmp	r0, r3
 802559c:	d027      	beq.n	80255ee <iso_year_adjust+0x96>
 802559e:	dc11      	bgt.n	80255c4 <iso_year_adjust+0x6c>
 80255a0:	2801      	cmp	r0, #1
 80255a2:	dc0a      	bgt.n	80255ba <iso_year_adjust+0x62>
 80255a4:	43c0      	mvns	r0, r0
 80255a6:	0fc0      	lsrs	r0, r0, #31
 80255a8:	4240      	negs	r0, r0
 80255aa:	4770      	bx	lr
 80255ac:	2301      	movs	r3, #1
 80255ae:	e7ec      	b.n	802558a <iso_year_adjust+0x32>
 80255b0:	4b10      	ldr	r3, [pc, #64]	; (80255f4 <iso_year_adjust+0x9c>)
 80255b2:	40c3      	lsrs	r3, r0
 80255b4:	f343 0000 	sbfx	r0, r3, #0, #1
 80255b8:	4770      	bx	lr
 80255ba:	380a      	subs	r0, #10
 80255bc:	2817      	cmp	r0, #23
 80255be:	d9f7      	bls.n	80255b0 <iso_year_adjust+0x58>
 80255c0:	2000      	movs	r0, #0
 80255c2:	4770      	bx	lr
 80255c4:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80255c8:	4298      	cmp	r0, r3
 80255ca:	dc06      	bgt.n	80255da <iso_year_adjust+0x82>
 80255cc:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80255d0:	4298      	cmp	r0, r3
 80255d2:	bfd4      	ite	le
 80255d4:	2000      	movle	r0, #0
 80255d6:	2001      	movgt	r0, #1
 80255d8:	4770      	bx	lr
 80255da:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80255de:	3802      	subs	r0, #2
 80255e0:	2815      	cmp	r0, #21
 80255e2:	d8ed      	bhi.n	80255c0 <iso_year_adjust+0x68>
 80255e4:	4b04      	ldr	r3, [pc, #16]	; (80255f8 <iso_year_adjust+0xa0>)
 80255e6:	40c3      	lsrs	r3, r0
 80255e8:	f003 0001 	and.w	r0, r3, #1
 80255ec:	4770      	bx	lr
 80255ee:	2001      	movs	r0, #1
 80255f0:	4770      	bx	lr
 80255f2:	bf00      	nop
 80255f4:	00cc00cf 	.word	0x00cc00cf
 80255f8:	002a001f 	.word	0x002a001f

080255fc <__strftime.isra.0>:
 80255fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025600:	b08f      	sub	sp, #60	; 0x3c
 8025602:	461e      	mov	r6, r3
 8025604:	2300      	movs	r3, #0
 8025606:	4607      	mov	r7, r0
 8025608:	460d      	mov	r5, r1
 802560a:	9302      	str	r3, [sp, #8]
 802560c:	461c      	mov	r4, r3
 802560e:	7813      	ldrb	r3, [r2, #0]
 8025610:	2b00      	cmp	r3, #0
 8025612:	f000 84bf 	beq.w	8025f94 <__strftime.isra.0+0x998>
 8025616:	2b25      	cmp	r3, #37	; 0x25
 8025618:	d11f      	bne.n	802565a <__strftime.isra.0+0x5e>
 802561a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802561e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8025622:	d024      	beq.n	802566e <__strftime.isra.0+0x72>
 8025624:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025628:	d021      	beq.n	802566e <__strftime.isra.0+0x72>
 802562a:	f102 0801 	add.w	r8, r2, #1
 802562e:	f04f 0b00 	mov.w	fp, #0
 8025632:	f898 2000 	ldrb.w	r2, [r8]
 8025636:	3a31      	subs	r2, #49	; 0x31
 8025638:	2a08      	cmp	r2, #8
 802563a:	d81b      	bhi.n	8025674 <__strftime.isra.0+0x78>
 802563c:	4640      	mov	r0, r8
 802563e:	220a      	movs	r2, #10
 8025640:	a906      	add	r1, sp, #24
 8025642:	f002 fb93 	bl	8027d6c <strtoul>
 8025646:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802564a:	4681      	mov	r9, r0
 802564c:	f898 2000 	ldrb.w	r2, [r8]
 8025650:	2a45      	cmp	r2, #69	; 0x45
 8025652:	d112      	bne.n	802567a <__strftime.isra.0+0x7e>
 8025654:	f108 0801 	add.w	r8, r8, #1
 8025658:	e011      	b.n	802567e <__strftime.isra.0+0x82>
 802565a:	1e69      	subs	r1, r5, #1
 802565c:	42a1      	cmp	r1, r4
 802565e:	d802      	bhi.n	8025666 <__strftime.isra.0+0x6a>
 8025660:	2400      	movs	r4, #0
 8025662:	f000 bc9a 	b.w	8025f9a <__strftime.isra.0+0x99e>
 8025666:	553b      	strb	r3, [r7, r4]
 8025668:	3201      	adds	r2, #1
 802566a:	3401      	adds	r4, #1
 802566c:	e7cf      	b.n	802560e <__strftime.isra.0+0x12>
 802566e:	f102 0802 	add.w	r8, r2, #2
 8025672:	e7de      	b.n	8025632 <__strftime.isra.0+0x36>
 8025674:	f04f 0900 	mov.w	r9, #0
 8025678:	e7e8      	b.n	802564c <__strftime.isra.0+0x50>
 802567a:	2a4f      	cmp	r2, #79	; 0x4f
 802567c:	d0ea      	beq.n	8025654 <__strftime.isra.0+0x58>
 802567e:	f898 0000 	ldrb.w	r0, [r8]
 8025682:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 8025686:	2a55      	cmp	r2, #85	; 0x55
 8025688:	d8ea      	bhi.n	8025660 <__strftime.isra.0+0x64>
 802568a:	a101      	add	r1, pc, #4	; (adr r1, 8025690 <__strftime.isra.0+0x94>)
 802568c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8025690:	08025f89 	.word	0x08025f89
 8025694:	08025661 	.word	0x08025661
 8025698:	08025661 	.word	0x08025661
 802569c:	08025661 	.word	0x08025661
 80256a0:	08025661 	.word	0x08025661
 80256a4:	08025661 	.word	0x08025661
 80256a8:	08025661 	.word	0x08025661
 80256ac:	08025661 	.word	0x08025661
 80256b0:	08025661 	.word	0x08025661
 80256b4:	08025661 	.word	0x08025661
 80256b8:	08025661 	.word	0x08025661
 80256bc:	08025661 	.word	0x08025661
 80256c0:	08025661 	.word	0x08025661
 80256c4:	08025661 	.word	0x08025661
 80256c8:	08025661 	.word	0x08025661
 80256cc:	08025661 	.word	0x08025661
 80256d0:	08025661 	.word	0x08025661
 80256d4:	08025661 	.word	0x08025661
 80256d8:	08025661 	.word	0x08025661
 80256dc:	08025661 	.word	0x08025661
 80256e0:	08025661 	.word	0x08025661
 80256e4:	08025661 	.word	0x08025661
 80256e8:	08025661 	.word	0x08025661
 80256ec:	08025661 	.word	0x08025661
 80256f0:	08025661 	.word	0x08025661
 80256f4:	08025661 	.word	0x08025661
 80256f8:	08025661 	.word	0x08025661
 80256fc:	08025661 	.word	0x08025661
 8025700:	08025825 	.word	0x08025825
 8025704:	0802587d 	.word	0x0802587d
 8025708:	080258eb 	.word	0x080258eb
 802570c:	08025989 	.word	0x08025989
 8025710:	08025661 	.word	0x08025661
 8025714:	080259d5 	.word	0x080259d5
 8025718:	08025ac1 	.word	0x08025ac1
 802571c:	08025bb5 	.word	0x08025bb5
 8025720:	08025bc3 	.word	0x08025bc3
 8025724:	08025661 	.word	0x08025661
 8025728:	08025661 	.word	0x08025661
 802572c:	08025661 	.word	0x08025661
 8025730:	08025bf3 	.word	0x08025bf3
 8025734:	08025661 	.word	0x08025661
 8025738:	08025661 	.word	0x08025661
 802573c:	08025c07 	.word	0x08025c07
 8025740:	08025661 	.word	0x08025661
 8025744:	08025c59 	.word	0x08025c59
 8025748:	08025d67 	.word	0x08025d67
 802574c:	08025d77 	.word	0x08025d77
 8025750:	08025d9f 	.word	0x08025d9f
 8025754:	08025ddd 	.word	0x08025ddd
 8025758:	08025e4f 	.word	0x08025e4f
 802575c:	080258e3 	.word	0x080258e3
 8025760:	08025e7b 	.word	0x08025e7b
 8025764:	08025f37 	.word	0x08025f37
 8025768:	08025661 	.word	0x08025661
 802576c:	08025661 	.word	0x08025661
 8025770:	08025661 	.word	0x08025661
 8025774:	08025661 	.word	0x08025661
 8025778:	08025661 	.word	0x08025661
 802577c:	08025661 	.word	0x08025661
 8025780:	080257e9 	.word	0x080257e9
 8025784:	08025853 	.word	0x08025853
 8025788:	080258a9 	.word	0x080258a9
 802578c:	08025965 	.word	0x08025965
 8025790:	08025965 	.word	0x08025965
 8025794:	08025661 	.word	0x08025661
 8025798:	08025a27 	.word	0x08025a27
 802579c:	08025853 	.word	0x08025853
 80257a0:	08025661 	.word	0x08025661
 80257a4:	08025be5 	.word	0x08025be5
 80257a8:	08025bb5 	.word	0x08025bb5
 80257ac:	08025bc3 	.word	0x08025bc3
 80257b0:	08025bed 	.word	0x08025bed
 80257b4:	08025bf7 	.word	0x08025bf7
 80257b8:	08025661 	.word	0x08025661
 80257bc:	08025c07 	.word	0x08025c07
 80257c0:	08025661 	.word	0x08025661
 80257c4:	080258d3 	.word	0x080258d3
 80257c8:	08025c6b 	.word	0x08025c6b
 80257cc:	08025d6b 	.word	0x08025d6b
 80257d0:	08025d85 	.word	0x08025d85
 80257d4:	08025661 	.word	0x08025661
 80257d8:	08025e41 	.word	0x08025e41
 80257dc:	080258db 	.word	0x080258db
 80257e0:	08025e5f 	.word	0x08025e5f
 80257e4:	08025ec1 	.word	0x08025ec1
 80257e8:	69b3      	ldr	r3, [r6, #24]
 80257ea:	4aa9      	ldr	r2, [pc, #676]	; (8025a90 <__strftime.isra.0+0x494>)
 80257ec:	3318      	adds	r3, #24
 80257ee:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80257f2:	4648      	mov	r0, r9
 80257f4:	f7da fd4c 	bl	8000290 <strlen>
 80257f8:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80257fc:	4420      	add	r0, r4
 80257fe:	1e6b      	subs	r3, r5, #1
 8025800:	42a0      	cmp	r0, r4
 8025802:	d107      	bne.n	8025814 <__strftime.isra.0+0x218>
 8025804:	f898 3000 	ldrb.w	r3, [r8]
 8025808:	2b00      	cmp	r3, #0
 802580a:	f000 83c3 	beq.w	8025f94 <__strftime.isra.0+0x998>
 802580e:	f108 0201 	add.w	r2, r8, #1
 8025812:	e6fc      	b.n	802560e <__strftime.isra.0+0x12>
 8025814:	42a3      	cmp	r3, r4
 8025816:	f67f af23 	bls.w	8025660 <__strftime.isra.0+0x64>
 802581a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802581e:	553a      	strb	r2, [r7, r4]
 8025820:	3401      	adds	r4, #1
 8025822:	e7ed      	b.n	8025800 <__strftime.isra.0+0x204>
 8025824:	69b2      	ldr	r2, [r6, #24]
 8025826:	4b9a      	ldr	r3, [pc, #616]	; (8025a90 <__strftime.isra.0+0x494>)
 8025828:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802582c:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8025830:	4648      	mov	r0, r9
 8025832:	f7da fd2d 	bl	8000290 <strlen>
 8025836:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 802583a:	4420      	add	r0, r4
 802583c:	1e6b      	subs	r3, r5, #1
 802583e:	4284      	cmp	r4, r0
 8025840:	d0e0      	beq.n	8025804 <__strftime.isra.0+0x208>
 8025842:	42a3      	cmp	r3, r4
 8025844:	f67f af0c 	bls.w	8025660 <__strftime.isra.0+0x64>
 8025848:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802584c:	553a      	strb	r2, [r7, r4]
 802584e:	3401      	adds	r4, #1
 8025850:	e7f5      	b.n	802583e <__strftime.isra.0+0x242>
 8025852:	4b8f      	ldr	r3, [pc, #572]	; (8025a90 <__strftime.isra.0+0x494>)
 8025854:	6932      	ldr	r2, [r6, #16]
 8025856:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 802585a:	4648      	mov	r0, r9
 802585c:	f7da fd18 	bl	8000290 <strlen>
 8025860:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8025864:	4420      	add	r0, r4
 8025866:	1e6b      	subs	r3, r5, #1
 8025868:	42a0      	cmp	r0, r4
 802586a:	d0cb      	beq.n	8025804 <__strftime.isra.0+0x208>
 802586c:	42a3      	cmp	r3, r4
 802586e:	f67f aef7 	bls.w	8025660 <__strftime.isra.0+0x64>
 8025872:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025876:	553a      	strb	r2, [r7, r4]
 8025878:	3401      	adds	r4, #1
 802587a:	e7f5      	b.n	8025868 <__strftime.isra.0+0x26c>
 802587c:	6933      	ldr	r3, [r6, #16]
 802587e:	4a84      	ldr	r2, [pc, #528]	; (8025a90 <__strftime.isra.0+0x494>)
 8025880:	330c      	adds	r3, #12
 8025882:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025886:	4648      	mov	r0, r9
 8025888:	f7da fd02 	bl	8000290 <strlen>
 802588c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8025890:	4420      	add	r0, r4
 8025892:	1e6b      	subs	r3, r5, #1
 8025894:	42a0      	cmp	r0, r4
 8025896:	d0b5      	beq.n	8025804 <__strftime.isra.0+0x208>
 8025898:	42a3      	cmp	r3, r4
 802589a:	f67f aee1 	bls.w	8025660 <__strftime.isra.0+0x64>
 802589e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80258a2:	553a      	strb	r2, [r7, r4]
 80258a4:	3401      	adds	r4, #1
 80258a6:	e7f5      	b.n	8025894 <__strftime.isra.0+0x298>
 80258a8:	4b79      	ldr	r3, [pc, #484]	; (8025a90 <__strftime.isra.0+0x494>)
 80258aa:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 80258ae:	4648      	mov	r0, r9
 80258b0:	f7da fcee 	bl	8000290 <strlen>
 80258b4:	f899 3000 	ldrb.w	r3, [r9]
 80258b8:	2b00      	cmp	r3, #0
 80258ba:	d0a3      	beq.n	8025804 <__strftime.isra.0+0x208>
 80258bc:	4633      	mov	r3, r6
 80258be:	464a      	mov	r2, r9
 80258c0:	1b29      	subs	r1, r5, r4
 80258c2:	1938      	adds	r0, r7, r4
 80258c4:	f7ff fe9a 	bl	80255fc <__strftime.isra.0>
 80258c8:	2800      	cmp	r0, #0
 80258ca:	f77f aec9 	ble.w	8025660 <__strftime.isra.0+0x64>
 80258ce:	4404      	add	r4, r0
 80258d0:	e798      	b.n	8025804 <__strftime.isra.0+0x208>
 80258d2:	4b6f      	ldr	r3, [pc, #444]	; (8025a90 <__strftime.isra.0+0x494>)
 80258d4:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 80258d8:	e7e9      	b.n	80258ae <__strftime.isra.0+0x2b2>
 80258da:	4b6d      	ldr	r3, [pc, #436]	; (8025a90 <__strftime.isra.0+0x494>)
 80258dc:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 80258e0:	e7e5      	b.n	80258ae <__strftime.isra.0+0x2b2>
 80258e2:	4b6b      	ldr	r3, [pc, #428]	; (8025a90 <__strftime.isra.0+0x494>)
 80258e4:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 80258e8:	e7e1      	b.n	80258ae <__strftime.isra.0+0x2b2>
 80258ea:	496a      	ldr	r1, [pc, #424]	; (8025a94 <__strftime.isra.0+0x498>)
 80258ec:	f8d6 a014 	ldr.w	sl, [r6, #20]
 80258f0:	458a      	cmp	sl, r1
 80258f2:	bfac      	ite	ge
 80258f4:	2100      	movge	r1, #0
 80258f6:	2101      	movlt	r1, #1
 80258f8:	f1ba 0f00 	cmp.w	sl, #0
 80258fc:	db11      	blt.n	8025922 <__strftime.isra.0+0x326>
 80258fe:	2064      	movs	r0, #100	; 0x64
 8025900:	fb9a f0f0 	sdiv	r0, sl, r0
 8025904:	3013      	adds	r0, #19
 8025906:	f1bb 0f00 	cmp.w	fp, #0
 802590a:	d014      	beq.n	8025936 <__strftime.isra.0+0x33a>
 802590c:	2863      	cmp	r0, #99	; 0x63
 802590e:	dd27      	ble.n	8025960 <__strftime.isra.0+0x364>
 8025910:	4b61      	ldr	r3, [pc, #388]	; (8025a98 <__strftime.isra.0+0x49c>)
 8025912:	4a62      	ldr	r2, [pc, #392]	; (8025a9c <__strftime.isra.0+0x4a0>)
 8025914:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025918:	bf18      	it	ne
 802591a:	461a      	movne	r2, r3
 802591c:	f8df c198 	ldr.w	ip, [pc, #408]	; 8025ab8 <__strftime.isra.0+0x4bc>
 8025920:	e00c      	b.n	802593c <__strftime.isra.0+0x340>
 8025922:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8025926:	9103      	str	r1, [sp, #12]
 8025928:	f000 ff1e 	bl	8026768 <abs>
 802592c:	2264      	movs	r2, #100	; 0x64
 802592e:	9903      	ldr	r1, [sp, #12]
 8025930:	fb90 f0f2 	sdiv	r0, r0, r2
 8025934:	e7e7      	b.n	8025906 <__strftime.isra.0+0x30a>
 8025936:	4a58      	ldr	r2, [pc, #352]	; (8025a98 <__strftime.isra.0+0x49c>)
 8025938:	f8df c180 	ldr.w	ip, [pc, #384]	; 8025abc <__strftime.isra.0+0x4c0>
 802593c:	4b58      	ldr	r3, [pc, #352]	; (8025aa0 <__strftime.isra.0+0x4a4>)
 802593e:	9001      	str	r0, [sp, #4]
 8025940:	f1b9 0f02 	cmp.w	r9, #2
 8025944:	bf2c      	ite	cs
 8025946:	ebc1 0109 	rsbcs	r1, r1, r9
 802594a:	f1c1 0102 	rsbcc	r1, r1, #2
 802594e:	9100      	str	r1, [sp, #0]
 8025950:	4950      	ldr	r1, [pc, #320]	; (8025a94 <__strftime.isra.0+0x498>)
 8025952:	458a      	cmp	sl, r1
 8025954:	bfa8      	it	ge
 8025956:	4613      	movge	r3, r2
 8025958:	4662      	mov	r2, ip
 802595a:	1b29      	subs	r1, r5, r4
 802595c:	1938      	adds	r0, r7, r4
 802595e:	e028      	b.n	80259b2 <__strftime.isra.0+0x3b6>
 8025960:	4a4d      	ldr	r2, [pc, #308]	; (8025a98 <__strftime.isra.0+0x49c>)
 8025962:	e7db      	b.n	802591c <__strftime.isra.0+0x320>
 8025964:	494f      	ldr	r1, [pc, #316]	; (8025aa4 <__strftime.isra.0+0x4a8>)
 8025966:	4a50      	ldr	r2, [pc, #320]	; (8025aa8 <__strftime.isra.0+0x4ac>)
 8025968:	68f3      	ldr	r3, [r6, #12]
 802596a:	2864      	cmp	r0, #100	; 0x64
 802596c:	bf08      	it	eq
 802596e:	460a      	moveq	r2, r1
 8025970:	1b29      	subs	r1, r5, r4
 8025972:	1938      	adds	r0, r7, r4
 8025974:	f7ff fa92 	bl	8024e9c <sniprintf>
 8025978:	2800      	cmp	r0, #0
 802597a:	f6ff ae71 	blt.w	8025660 <__strftime.isra.0+0x64>
 802597e:	4404      	add	r4, r0
 8025980:	42a5      	cmp	r5, r4
 8025982:	f63f af3f 	bhi.w	8025804 <__strftime.isra.0+0x208>
 8025986:	e66b      	b.n	8025660 <__strftime.isra.0+0x64>
 8025988:	6970      	ldr	r0, [r6, #20]
 802598a:	6933      	ldr	r3, [r6, #16]
 802598c:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8025990:	2800      	cmp	r0, #0
 8025992:	eb07 0904 	add.w	r9, r7, r4
 8025996:	eba5 0104 	sub.w	r1, r5, r4
 802599a:	f103 0301 	add.w	r3, r3, #1
 802599e:	db0b      	blt.n	80259b8 <__strftime.isra.0+0x3bc>
 80259a0:	2264      	movs	r2, #100	; 0x64
 80259a2:	fb90 fcf2 	sdiv	ip, r0, r2
 80259a6:	fb02 001c 	mls	r0, r2, ip, r0
 80259aa:	4a40      	ldr	r2, [pc, #256]	; (8025aac <__strftime.isra.0+0x4b0>)
 80259ac:	e9cd a000 	strd	sl, r0, [sp]
 80259b0:	4648      	mov	r0, r9
 80259b2:	f7ff fa73 	bl	8024e9c <sniprintf>
 80259b6:	e7df      	b.n	8025978 <__strftime.isra.0+0x37c>
 80259b8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80259bc:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80259c0:	f000 fed2 	bl	8026768 <abs>
 80259c4:	2264      	movs	r2, #100	; 0x64
 80259c6:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 80259ca:	fb90 fcf2 	sdiv	ip, r0, r2
 80259ce:	fb0c 0012 	mls	r0, ip, r2, r0
 80259d2:	e7ea      	b.n	80259aa <__strftime.isra.0+0x3ae>
 80259d4:	2225      	movs	r2, #37	; 0x25
 80259d6:	f88d 2018 	strb.w	r2, [sp, #24]
 80259da:	f1bb 0f00 	cmp.w	fp, #0
 80259de:	d011      	beq.n	8025a04 <__strftime.isra.0+0x408>
 80259e0:	f1b9 0f06 	cmp.w	r9, #6
 80259e4:	bf38      	it	cc
 80259e6:	f04f 0906 	movcc.w	r9, #6
 80259ea:	f1b9 0306 	subs.w	r3, r9, #6
 80259ee:	f88d b019 	strb.w	fp, [sp, #25]
 80259f2:	d10c      	bne.n	8025a0e <__strftime.isra.0+0x412>
 80259f4:	f10d 001a 	add.w	r0, sp, #26
 80259f8:	492d      	ldr	r1, [pc, #180]	; (8025ab0 <__strftime.isra.0+0x4b4>)
 80259fa:	f000 fe98 	bl	802672e <strcpy>
 80259fe:	4633      	mov	r3, r6
 8025a00:	aa06      	add	r2, sp, #24
 8025a02:	e75d      	b.n	80258c0 <__strftime.isra.0+0x2c4>
 8025a04:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8025a08:	f04f 090a 	mov.w	r9, #10
 8025a0c:	e7ed      	b.n	80259ea <__strftime.isra.0+0x3ee>
 8025a0e:	4a29      	ldr	r2, [pc, #164]	; (8025ab4 <__strftime.isra.0+0x4b8>)
 8025a10:	211e      	movs	r1, #30
 8025a12:	f10d 001a 	add.w	r0, sp, #26
 8025a16:	f7ff fa41 	bl	8024e9c <sniprintf>
 8025a1a:	2800      	cmp	r0, #0
 8025a1c:	ddea      	ble.n	80259f4 <__strftime.isra.0+0x3f8>
 8025a1e:	f10d 031a 	add.w	r3, sp, #26
 8025a22:	4418      	add	r0, r3
 8025a24:	e7e8      	b.n	80259f8 <__strftime.isra.0+0x3fc>
 8025a26:	4630      	mov	r0, r6
 8025a28:	f7ff fd96 	bl	8025558 <iso_year_adjust>
 8025a2c:	4681      	mov	r9, r0
 8025a2e:	6970      	ldr	r0, [r6, #20]
 8025a30:	2800      	cmp	r0, #0
 8025a32:	db11      	blt.n	8025a58 <__strftime.isra.0+0x45c>
 8025a34:	2364      	movs	r3, #100	; 0x64
 8025a36:	fb90 f2f3 	sdiv	r2, r0, r3
 8025a3a:	fb03 0012 	mls	r0, r3, r2, r0
 8025a3e:	2364      	movs	r3, #100	; 0x64
 8025a40:	4481      	add	r9, r0
 8025a42:	fb99 f2f3 	sdiv	r2, r9, r3
 8025a46:	fb03 9912 	mls	r9, r3, r2, r9
 8025a4a:	4499      	add	r9, r3
 8025a4c:	fbb9 f2f3 	udiv	r2, r9, r3
 8025a50:	fb03 9312 	mls	r3, r3, r2, r9
 8025a54:	4a13      	ldr	r2, [pc, #76]	; (8025aa4 <__strftime.isra.0+0x4a8>)
 8025a56:	e78b      	b.n	8025970 <__strftime.isra.0+0x374>
 8025a58:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025a5c:	f000 fe84 	bl	8026768 <abs>
 8025a60:	2364      	movs	r3, #100	; 0x64
 8025a62:	f1b9 0f00 	cmp.w	r9, #0
 8025a66:	fb90 f2f3 	sdiv	r2, r0, r3
 8025a6a:	fb02 0013 	mls	r0, r2, r3, r0
 8025a6e:	da07      	bge.n	8025a80 <__strftime.isra.0+0x484>
 8025a70:	6972      	ldr	r2, [r6, #20]
 8025a72:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 8025a76:	429a      	cmp	r2, r3
 8025a78:	bfb8      	it	lt
 8025a7a:	f04f 0901 	movlt.w	r9, #1
 8025a7e:	e7de      	b.n	8025a3e <__strftime.isra.0+0x442>
 8025a80:	d0dd      	beq.n	8025a3e <__strftime.isra.0+0x442>
 8025a82:	6972      	ldr	r2, [r6, #20]
 8025a84:	4b03      	ldr	r3, [pc, #12]	; (8025a94 <__strftime.isra.0+0x498>)
 8025a86:	429a      	cmp	r2, r3
 8025a88:	bfb8      	it	lt
 8025a8a:	f04f 39ff 	movlt.w	r9, #4294967295	; 0xffffffff
 8025a8e:	e7d6      	b.n	8025a3e <__strftime.isra.0+0x442>
 8025a90:	0802e954 	.word	0x0802e954
 8025a94:	fffff894 	.word	0xfffff894
 8025a98:	0802e57b 	.word	0x0802e57b
 8025a9c:	0802e787 	.word	0x0802e787
 8025aa0:	0802ec4a 	.word	0x0802ec4a
 8025aa4:	0802e79f 	.word	0x0802e79f
 8025aa8:	0802e791 	.word	0x0802e791
 8025aac:	0802e795 	.word	0x0802e795
 8025ab0:	0802e7a8 	.word	0x0802e7a8
 8025ab4:	0802e7a4 	.word	0x0802e7a4
 8025ab8:	0802e789 	.word	0x0802e789
 8025abc:	0802e780 	.word	0x0802e780
 8025ac0:	6971      	ldr	r1, [r6, #20]
 8025ac2:	4abb      	ldr	r2, [pc, #748]	; (8025db0 <__strftime.isra.0+0x7b4>)
 8025ac4:	4291      	cmp	r1, r2
 8025ac6:	bfac      	ite	ge
 8025ac8:	2300      	movge	r3, #0
 8025aca:	2301      	movlt	r3, #1
 8025acc:	4630      	mov	r0, r6
 8025ace:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8025ad2:	f7ff fd41 	bl	8025558 <iso_year_adjust>
 8025ad6:	9904      	ldr	r1, [sp, #16]
 8025ad8:	2900      	cmp	r1, #0
 8025ada:	4682      	mov	sl, r0
 8025adc:	db39      	blt.n	8025b52 <__strftime.isra.0+0x556>
 8025ade:	2264      	movs	r2, #100	; 0x64
 8025ae0:	fb91 f2f2 	sdiv	r2, r1, r2
 8025ae4:	3213      	adds	r2, #19
 8025ae6:	6970      	ldr	r0, [r6, #20]
 8025ae8:	2800      	cmp	r0, #0
 8025aea:	db3d      	blt.n	8025b68 <__strftime.isra.0+0x56c>
 8025aec:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025af0:	fb90 fefc 	sdiv	lr, r0, ip
 8025af4:	fb0c 001e 	mls	r0, ip, lr, r0
 8025af8:	f1ba 0f00 	cmp.w	sl, #0
 8025afc:	da43      	bge.n	8025b86 <__strftime.isra.0+0x58a>
 8025afe:	6971      	ldr	r1, [r6, #20]
 8025b00:	4bac      	ldr	r3, [pc, #688]	; (8025db4 <__strftime.isra.0+0x7b8>)
 8025b02:	4299      	cmp	r1, r3
 8025b04:	db4a      	blt.n	8025b9c <__strftime.isra.0+0x5a0>
 8025b06:	4482      	add	sl, r0
 8025b08:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8025b0c:	d14b      	bne.n	8025ba6 <__strftime.isra.0+0x5aa>
 8025b0e:	3a01      	subs	r2, #1
 8025b10:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8025b14:	9b03      	ldr	r3, [sp, #12]
 8025b16:	2164      	movs	r1, #100	; 0x64
 8025b18:	fb01 aa02 	mla	sl, r1, r2, sl
 8025b1c:	2b00      	cmp	r3, #0
 8025b1e:	f040 8240 	bne.w	8025fa2 <__strftime.isra.0+0x9a6>
 8025b22:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025b26:	d104      	bne.n	8025b32 <__strftime.isra.0+0x536>
 8025b28:	f242 720f 	movw	r2, #9999	; 0x270f
 8025b2c:	4592      	cmp	sl, r2
 8025b2e:	f200 823c 	bhi.w	8025faa <__strftime.isra.0+0x9ae>
 8025b32:	aa06      	add	r2, sp, #24
 8025b34:	2125      	movs	r1, #37	; 0x25
 8025b36:	7011      	strb	r1, [r2, #0]
 8025b38:	f1bb 0f00 	cmp.w	fp, #0
 8025b3c:	f040 81bc 	bne.w	8025eb8 <__strftime.isra.0+0x8bc>
 8025b40:	1c50      	adds	r0, r2, #1
 8025b42:	499d      	ldr	r1, [pc, #628]	; (8025db8 <__strftime.isra.0+0x7bc>)
 8025b44:	f000 fdf3 	bl	802672e <strcpy>
 8025b48:	f8cd a000 	str.w	sl, [sp]
 8025b4c:	464b      	mov	r3, r9
 8025b4e:	aa06      	add	r2, sp, #24
 8025b50:	e086      	b.n	8025c60 <__strftime.isra.0+0x664>
 8025b52:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8025b56:	9104      	str	r1, [sp, #16]
 8025b58:	f000 fe06 	bl	8026768 <abs>
 8025b5c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025b60:	9904      	ldr	r1, [sp, #16]
 8025b62:	fb90 f2fc 	sdiv	r2, r0, ip
 8025b66:	e7be      	b.n	8025ae6 <__strftime.isra.0+0x4ea>
 8025b68:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025b6c:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8025b70:	f000 fdfa 	bl	8026768 <abs>
 8025b74:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025b78:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8025b7c:	fb90 fefc 	sdiv	lr, r0, ip
 8025b80:	fb0e 001c 	mls	r0, lr, ip, r0
 8025b84:	e7b8      	b.n	8025af8 <__strftime.isra.0+0x4fc>
 8025b86:	d0be      	beq.n	8025b06 <__strftime.isra.0+0x50a>
 8025b88:	4b89      	ldr	r3, [pc, #548]	; (8025db0 <__strftime.isra.0+0x7b4>)
 8025b8a:	4299      	cmp	r1, r3
 8025b8c:	bfb4      	ite	lt
 8025b8e:	2301      	movlt	r3, #1
 8025b90:	2300      	movge	r3, #0
 8025b92:	9303      	str	r3, [sp, #12]
 8025b94:	bfb8      	it	lt
 8025b96:	f04f 3aff 	movlt.w	sl, #4294967295	; 0xffffffff
 8025b9a:	e7b4      	b.n	8025b06 <__strftime.isra.0+0x50a>
 8025b9c:	f04f 0a01 	mov.w	sl, #1
 8025ba0:	f8cd a00c 	str.w	sl, [sp, #12]
 8025ba4:	e7af      	b.n	8025b06 <__strftime.isra.0+0x50a>
 8025ba6:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8025baa:	bf04      	itt	eq
 8025bac:	3201      	addeq	r2, #1
 8025bae:	f04f 0a00 	moveq.w	sl, #0
 8025bb2:	e7af      	b.n	8025b14 <__strftime.isra.0+0x518>
 8025bb4:	4981      	ldr	r1, [pc, #516]	; (8025dbc <__strftime.isra.0+0x7c0>)
 8025bb6:	4a82      	ldr	r2, [pc, #520]	; (8025dc0 <__strftime.isra.0+0x7c4>)
 8025bb8:	68b3      	ldr	r3, [r6, #8]
 8025bba:	286b      	cmp	r0, #107	; 0x6b
 8025bbc:	bf08      	it	eq
 8025bbe:	460a      	moveq	r2, r1
 8025bc0:	e6d6      	b.n	8025970 <__strftime.isra.0+0x374>
 8025bc2:	68b3      	ldr	r3, [r6, #8]
 8025bc4:	b163      	cbz	r3, 8025be0 <__strftime.isra.0+0x5e4>
 8025bc6:	2b0c      	cmp	r3, #12
 8025bc8:	d004      	beq.n	8025bd4 <__strftime.isra.0+0x5d8>
 8025bca:	210c      	movs	r1, #12
 8025bcc:	fb93 f2f1 	sdiv	r2, r3, r1
 8025bd0:	fb01 3312 	mls	r3, r1, r2, r3
 8025bd4:	497a      	ldr	r1, [pc, #488]	; (8025dc0 <__strftime.isra.0+0x7c4>)
 8025bd6:	4a79      	ldr	r2, [pc, #484]	; (8025dbc <__strftime.isra.0+0x7c0>)
 8025bd8:	2849      	cmp	r0, #73	; 0x49
 8025bda:	bf08      	it	eq
 8025bdc:	460a      	moveq	r2, r1
 8025bde:	e6c7      	b.n	8025970 <__strftime.isra.0+0x374>
 8025be0:	230c      	movs	r3, #12
 8025be2:	e7f7      	b.n	8025bd4 <__strftime.isra.0+0x5d8>
 8025be4:	69f3      	ldr	r3, [r6, #28]
 8025be6:	4a77      	ldr	r2, [pc, #476]	; (8025dc4 <__strftime.isra.0+0x7c8>)
 8025be8:	3301      	adds	r3, #1
 8025bea:	e6c1      	b.n	8025970 <__strftime.isra.0+0x374>
 8025bec:	6933      	ldr	r3, [r6, #16]
 8025bee:	3301      	adds	r3, #1
 8025bf0:	e730      	b.n	8025a54 <__strftime.isra.0+0x458>
 8025bf2:	6873      	ldr	r3, [r6, #4]
 8025bf4:	e72e      	b.n	8025a54 <__strftime.isra.0+0x458>
 8025bf6:	1e6b      	subs	r3, r5, #1
 8025bf8:	429c      	cmp	r4, r3
 8025bfa:	f4bf ad31 	bcs.w	8025660 <__strftime.isra.0+0x64>
 8025bfe:	230a      	movs	r3, #10
 8025c00:	553b      	strb	r3, [r7, r4]
 8025c02:	3401      	adds	r4, #1
 8025c04:	e5fe      	b.n	8025804 <__strftime.isra.0+0x208>
 8025c06:	68b3      	ldr	r3, [r6, #8]
 8025c08:	2b0b      	cmp	r3, #11
 8025c0a:	4b6f      	ldr	r3, [pc, #444]	; (8025dc8 <__strftime.isra.0+0x7cc>)
 8025c0c:	bfd4      	ite	le
 8025c0e:	2200      	movle	r2, #0
 8025c10:	2201      	movgt	r2, #1
 8025c12:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025c16:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8025c1a:	4648      	mov	r0, r9
 8025c1c:	f7da fb38 	bl	8000290 <strlen>
 8025c20:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 8025c24:	4420      	add	r0, r4
 8025c26:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 8025c2a:	42a0      	cmp	r0, r4
 8025c2c:	f43f adea 	beq.w	8025804 <__strftime.isra.0+0x208>
 8025c30:	45a4      	cmp	ip, r4
 8025c32:	f67f ad15 	bls.w	8025660 <__strftime.isra.0+0x64>
 8025c36:	f898 1000 	ldrb.w	r1, [r8]
 8025c3a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8025c3e:	2950      	cmp	r1, #80	; 0x50
 8025c40:	d107      	bne.n	8025c52 <__strftime.isra.0+0x656>
 8025c42:	4962      	ldr	r1, [pc, #392]	; (8025dcc <__strftime.isra.0+0x7d0>)
 8025c44:	5cc9      	ldrb	r1, [r1, r3]
 8025c46:	f001 0103 	and.w	r1, r1, #3
 8025c4a:	2901      	cmp	r1, #1
 8025c4c:	bf08      	it	eq
 8025c4e:	3320      	addeq	r3, #32
 8025c50:	b2db      	uxtb	r3, r3
 8025c52:	553b      	strb	r3, [r7, r4]
 8025c54:	3401      	adds	r4, #1
 8025c56:	e7e8      	b.n	8025c2a <__strftime.isra.0+0x62e>
 8025c58:	6873      	ldr	r3, [r6, #4]
 8025c5a:	9300      	str	r3, [sp, #0]
 8025c5c:	4a5c      	ldr	r2, [pc, #368]	; (8025dd0 <__strftime.isra.0+0x7d4>)
 8025c5e:	68b3      	ldr	r3, [r6, #8]
 8025c60:	1b29      	subs	r1, r5, r4
 8025c62:	1938      	adds	r0, r7, r4
 8025c64:	f7ff f91a 	bl	8024e9c <sniprintf>
 8025c68:	e686      	b.n	8025978 <__strftime.isra.0+0x37c>
 8025c6a:	6a33      	ldr	r3, [r6, #32]
 8025c6c:	2b00      	cmp	r3, #0
 8025c6e:	db77      	blt.n	8025d60 <__strftime.isra.0+0x764>
 8025c70:	f000 fa4c 	bl	802610c <__tz_lock>
 8025c74:	9b02      	ldr	r3, [sp, #8]
 8025c76:	b90b      	cbnz	r3, 8025c7c <__strftime.isra.0+0x680>
 8025c78:	f000 fa54 	bl	8026124 <_tzset_unlocked>
 8025c7c:	f002 fc88 	bl	8028590 <__gettzinfo>
 8025c80:	6a33      	ldr	r3, [r6, #32]
 8025c82:	2b00      	cmp	r3, #0
 8025c84:	bfd4      	ite	le
 8025c86:	2200      	movle	r2, #0
 8025c88:	2201      	movgt	r2, #1
 8025c8a:	2328      	movs	r3, #40	; 0x28
 8025c8c:	fb02 3303 	mla	r3, r2, r3, r3
 8025c90:	58c3      	ldr	r3, [r0, r3]
 8025c92:	f1c3 0900 	rsb	r9, r3, #0
 8025c96:	f000 fa3f 	bl	8026118 <__tz_unlock>
 8025c9a:	2301      	movs	r3, #1
 8025c9c:	9302      	str	r3, [sp, #8]
 8025c9e:	6972      	ldr	r2, [r6, #20]
 8025ca0:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8025ca4:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8025ca8:	f16c 0c00 	sbc.w	ip, ip, #0
 8025cac:	f1bc 0f00 	cmp.w	ip, #0
 8025cb0:	eba5 0104 	sub.w	r1, r5, r4
 8025cb4:	eb07 0004 	add.w	r0, r7, r4
 8025cb8:	da02      	bge.n	8025cc0 <__strftime.isra.0+0x6c4>
 8025cba:	3303      	adds	r3, #3
 8025cbc:	f14c 0c00 	adc.w	ip, ip, #0
 8025cc0:	089b      	lsrs	r3, r3, #2
 8025cc2:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8025cc6:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
 8025cca:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8025cce:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8025cd2:	fb9a fefe 	sdiv	lr, sl, lr
 8025cd6:	ebb3 030e 	subs.w	r3, r3, lr
 8025cda:	eb6c 7eee 	sbc.w	lr, ip, lr, asr #31
 8025cde:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8025ce2:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8025ce6:	fb9a fcfc 	sdiv	ip, sl, ip
 8025cea:	eb13 030c 	adds.w	r3, r3, ip
 8025cee:	eb4e 7cec 	adc.w	ip, lr, ip, asr #31
 8025cf2:	3a46      	subs	r2, #70	; 0x46
 8025cf4:	f240 1e6d 	movw	lr, #365	; 0x16d
 8025cf8:	fb0e f202 	mul.w	r2, lr, r2
 8025cfc:	189b      	adds	r3, r3, r2
 8025cfe:	eb4c 72e2 	adc.w	r2, ip, r2, asr #31
 8025d02:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 8025d06:	f04f 0a18 	mov.w	sl, #24
 8025d0a:	eb13 030c 	adds.w	r3, r3, ip
 8025d0e:	eb42 72ec 	adc.w	r2, r2, ip, asr #31
 8025d12:	fba3 c30a 	umull	ip, r3, r3, sl
 8025d16:	fb0a 3e02 	mla	lr, sl, r2, r3
 8025d1a:	68b3      	ldr	r3, [r6, #8]
 8025d1c:	eb1c 0203 	adds.w	r2, ip, r3
 8025d20:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8025d24:	eb4e 7ee3 	adc.w	lr, lr, r3, asr #31
 8025d28:	fba2 320c 	umull	r3, r2, r2, ip
 8025d2c:	fb0c 220e 	mla	r2, ip, lr, r2
 8025d30:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8025d34:	eb13 030e 	adds.w	r3, r3, lr
 8025d38:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8025d3c:	fba3 3e0c 	umull	r3, lr, r3, ip
 8025d40:	fb0c ee02 	mla	lr, ip, r2, lr
 8025d44:	6832      	ldr	r2, [r6, #0]
 8025d46:	189b      	adds	r3, r3, r2
 8025d48:	eb4e 7ee2 	adc.w	lr, lr, r2, asr #31
 8025d4c:	ebb3 0309 	subs.w	r3, r3, r9
 8025d50:	eb6e 72e9 	sbc.w	r2, lr, r9, asr #31
 8025d54:	e9cd 3200 	strd	r3, r2, [sp]
 8025d58:	4a1e      	ldr	r2, [pc, #120]	; (8025dd4 <__strftime.isra.0+0x7d8>)
 8025d5a:	f7ff f89f 	bl	8024e9c <sniprintf>
 8025d5e:	e60b      	b.n	8025978 <__strftime.isra.0+0x37c>
 8025d60:	f04f 0900 	mov.w	r9, #0
 8025d64:	e79b      	b.n	8025c9e <__strftime.isra.0+0x6a2>
 8025d66:	6833      	ldr	r3, [r6, #0]
 8025d68:	e674      	b.n	8025a54 <__strftime.isra.0+0x458>
 8025d6a:	1e6b      	subs	r3, r5, #1
 8025d6c:	429c      	cmp	r4, r3
 8025d6e:	f4bf ac77 	bcs.w	8025660 <__strftime.isra.0+0x64>
 8025d72:	2309      	movs	r3, #9
 8025d74:	e744      	b.n	8025c00 <__strftime.isra.0+0x604>
 8025d76:	6833      	ldr	r3, [r6, #0]
 8025d78:	9301      	str	r3, [sp, #4]
 8025d7a:	6873      	ldr	r3, [r6, #4]
 8025d7c:	9300      	str	r3, [sp, #0]
 8025d7e:	4a16      	ldr	r2, [pc, #88]	; (8025dd8 <__strftime.isra.0+0x7dc>)
 8025d80:	68b3      	ldr	r3, [r6, #8]
 8025d82:	e5ea      	b.n	802595a <__strftime.isra.0+0x35e>
 8025d84:	1e6b      	subs	r3, r5, #1
 8025d86:	429c      	cmp	r4, r3
 8025d88:	f4bf ac6a 	bcs.w	8025660 <__strftime.isra.0+0x64>
 8025d8c:	69b3      	ldr	r3, [r6, #24]
 8025d8e:	1c62      	adds	r2, r4, #1
 8025d90:	b91b      	cbnz	r3, 8025d9a <__strftime.isra.0+0x79e>
 8025d92:	2337      	movs	r3, #55	; 0x37
 8025d94:	553b      	strb	r3, [r7, r4]
 8025d96:	4614      	mov	r4, r2
 8025d98:	e534      	b.n	8025804 <__strftime.isra.0+0x208>
 8025d9a:	3330      	adds	r3, #48	; 0x30
 8025d9c:	e7fa      	b.n	8025d94 <__strftime.isra.0+0x798>
 8025d9e:	69f3      	ldr	r3, [r6, #28]
 8025da0:	69b2      	ldr	r2, [r6, #24]
 8025da2:	3307      	adds	r3, #7
 8025da4:	1a9b      	subs	r3, r3, r2
 8025da6:	2207      	movs	r2, #7
 8025da8:	fb93 f3f2 	sdiv	r3, r3, r2
 8025dac:	e652      	b.n	8025a54 <__strftime.isra.0+0x458>
 8025dae:	bf00      	nop
 8025db0:	fffff894 	.word	0xfffff894
 8025db4:	fffff895 	.word	0xfffff895
 8025db8:	0802e7b0 	.word	0x0802e7b0
 8025dbc:	0802e791 	.word	0x0802e791
 8025dc0:	0802e79f 	.word	0x0802e79f
 8025dc4:	0802e7b4 	.word	0x0802e7b4
 8025dc8:	0802e954 	.word	0x0802e954
 8025dcc:	0802e5ec 	.word	0x0802e5ec
 8025dd0:	0802e7c3 	.word	0x0802e7c3
 8025dd4:	0802e7b9 	.word	0x0802e7b9
 8025dd8:	0802e7be 	.word	0x0802e7be
 8025ddc:	4630      	mov	r0, r6
 8025dde:	f7ff fbbb 	bl	8025558 <iso_year_adjust>
 8025de2:	69b2      	ldr	r2, [r6, #24]
 8025de4:	b132      	cbz	r2, 8025df4 <__strftime.isra.0+0x7f8>
 8025de6:	3a01      	subs	r2, #1
 8025de8:	2800      	cmp	r0, #0
 8025dea:	69f3      	ldr	r3, [r6, #28]
 8025dec:	dc26      	bgt.n	8025e3c <__strftime.isra.0+0x840>
 8025dee:	d103      	bne.n	8025df8 <__strftime.isra.0+0x7fc>
 8025df0:	330a      	adds	r3, #10
 8025df2:	e7d7      	b.n	8025da4 <__strftime.isra.0+0x7a8>
 8025df4:	2206      	movs	r2, #6
 8025df6:	e7f7      	b.n	8025de8 <__strftime.isra.0+0x7ec>
 8025df8:	1ad2      	subs	r2, r2, r3
 8025dfa:	6973      	ldr	r3, [r6, #20]
 8025dfc:	2b00      	cmp	r3, #0
 8025dfe:	f240 716b 	movw	r1, #1899	; 0x76b
 8025e02:	bfa8      	it	ge
 8025e04:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 8025e08:	440b      	add	r3, r1
 8025e0a:	0799      	lsls	r1, r3, #30
 8025e0c:	d105      	bne.n	8025e1a <__strftime.isra.0+0x81e>
 8025e0e:	2064      	movs	r0, #100	; 0x64
 8025e10:	fb93 f1f0 	sdiv	r1, r3, r0
 8025e14:	fb00 3111 	mls	r1, r0, r1, r3
 8025e18:	b971      	cbnz	r1, 8025e38 <__strftime.isra.0+0x83c>
 8025e1a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8025e1e:	fb93 f0f1 	sdiv	r0, r3, r1
 8025e22:	fb01 3310 	mls	r3, r1, r0, r3
 8025e26:	fab3 f383 	clz	r3, r3
 8025e2a:	095b      	lsrs	r3, r3, #5
 8025e2c:	1ad2      	subs	r2, r2, r3
 8025e2e:	2a05      	cmp	r2, #5
 8025e30:	bfb4      	ite	lt
 8025e32:	2335      	movlt	r3, #53	; 0x35
 8025e34:	2334      	movge	r3, #52	; 0x34
 8025e36:	e60d      	b.n	8025a54 <__strftime.isra.0+0x458>
 8025e38:	2301      	movs	r3, #1
 8025e3a:	e7f7      	b.n	8025e2c <__strftime.isra.0+0x830>
 8025e3c:	2301      	movs	r3, #1
 8025e3e:	e609      	b.n	8025a54 <__strftime.isra.0+0x458>
 8025e40:	1e6b      	subs	r3, r5, #1
 8025e42:	429c      	cmp	r4, r3
 8025e44:	f4bf ac0c 	bcs.w	8025660 <__strftime.isra.0+0x64>
 8025e48:	69b3      	ldr	r3, [r6, #24]
 8025e4a:	3330      	adds	r3, #48	; 0x30
 8025e4c:	e6d8      	b.n	8025c00 <__strftime.isra.0+0x604>
 8025e4e:	69b2      	ldr	r2, [r6, #24]
 8025e50:	b11a      	cbz	r2, 8025e5a <__strftime.isra.0+0x85e>
 8025e52:	3a01      	subs	r2, #1
 8025e54:	69f3      	ldr	r3, [r6, #28]
 8025e56:	3307      	adds	r3, #7
 8025e58:	e7a4      	b.n	8025da4 <__strftime.isra.0+0x7a8>
 8025e5a:	2206      	movs	r2, #6
 8025e5c:	e7fa      	b.n	8025e54 <__strftime.isra.0+0x858>
 8025e5e:	6970      	ldr	r0, [r6, #20]
 8025e60:	2800      	cmp	r0, #0
 8025e62:	db05      	blt.n	8025e70 <__strftime.isra.0+0x874>
 8025e64:	2364      	movs	r3, #100	; 0x64
 8025e66:	fb90 f2f3 	sdiv	r2, r0, r3
 8025e6a:	fb02 0313 	mls	r3, r2, r3, r0
 8025e6e:	e5f1      	b.n	8025a54 <__strftime.isra.0+0x458>
 8025e70:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025e74:	f000 fc78 	bl	8026768 <abs>
 8025e78:	e7f4      	b.n	8025e64 <__strftime.isra.0+0x868>
 8025e7a:	6972      	ldr	r2, [r6, #20]
 8025e7c:	494c      	ldr	r1, [pc, #304]	; (8025fb0 <__strftime.isra.0+0x9b4>)
 8025e7e:	428a      	cmp	r2, r1
 8025e80:	da0c      	bge.n	8025e9c <__strftime.isra.0+0x8a0>
 8025e82:	202d      	movs	r0, #45	; 0x2d
 8025e84:	f88d 0018 	strb.w	r0, [sp, #24]
 8025e88:	eba1 0a02 	sub.w	sl, r1, r2
 8025e8c:	f1b9 0f00 	cmp.w	r9, #0
 8025e90:	d001      	beq.n	8025e96 <__strftime.isra.0+0x89a>
 8025e92:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8025e96:	f10d 0219 	add.w	r2, sp, #25
 8025e9a:	e64b      	b.n	8025b34 <__strftime.isra.0+0x538>
 8025e9c:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025ea0:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8025ea4:	f47f ae45 	bne.w	8025b32 <__strftime.isra.0+0x536>
 8025ea8:	f242 720f 	movw	r2, #9999	; 0x270f
 8025eac:	4592      	cmp	sl, r2
 8025eae:	f67f ae40 	bls.w	8025b32 <__strftime.isra.0+0x536>
 8025eb2:	f88d b018 	strb.w	fp, [sp, #24]
 8025eb6:	e7e9      	b.n	8025e8c <__strftime.isra.0+0x890>
 8025eb8:	2330      	movs	r3, #48	; 0x30
 8025eba:	1c90      	adds	r0, r2, #2
 8025ebc:	7053      	strb	r3, [r2, #1]
 8025ebe:	e640      	b.n	8025b42 <__strftime.isra.0+0x546>
 8025ec0:	6a33      	ldr	r3, [r6, #32]
 8025ec2:	2b00      	cmp	r3, #0
 8025ec4:	f6ff ac9e 	blt.w	8025804 <__strftime.isra.0+0x208>
 8025ec8:	f000 f920 	bl	802610c <__tz_lock>
 8025ecc:	9b02      	ldr	r3, [sp, #8]
 8025ece:	b90b      	cbnz	r3, 8025ed4 <__strftime.isra.0+0x8d8>
 8025ed0:	f000 f928 	bl	8026124 <_tzset_unlocked>
 8025ed4:	f002 fb5c 	bl	8028590 <__gettzinfo>
 8025ed8:	6a33      	ldr	r3, [r6, #32]
 8025eda:	2b00      	cmp	r3, #0
 8025edc:	bfd4      	ite	le
 8025ede:	2200      	movle	r2, #0
 8025ee0:	2201      	movgt	r2, #1
 8025ee2:	2328      	movs	r3, #40	; 0x28
 8025ee4:	fb02 3303 	mla	r3, r2, r3, r3
 8025ee8:	eb07 0a04 	add.w	sl, r7, r4
 8025eec:	58c3      	ldr	r3, [r0, r3]
 8025eee:	f1c3 0900 	rsb	r9, r3, #0
 8025ef2:	f000 f911 	bl	8026118 <__tz_unlock>
 8025ef6:	233c      	movs	r3, #60	; 0x3c
 8025ef8:	fb99 f0f3 	sdiv	r0, r9, r3
 8025efc:	f001 fb41 	bl	8027582 <labs>
 8025f00:	233c      	movs	r3, #60	; 0x3c
 8025f02:	eba5 0b04 	sub.w	fp, r5, r4
 8025f06:	fb90 f2f3 	sdiv	r2, r0, r3
 8025f0a:	fb02 0013 	mls	r0, r2, r3, r0
 8025f0e:	9000      	str	r0, [sp, #0]
 8025f10:	4a28      	ldr	r2, [pc, #160]	; (8025fb4 <__strftime.isra.0+0x9b8>)
 8025f12:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8025f16:	4659      	mov	r1, fp
 8025f18:	4650      	mov	r0, sl
 8025f1a:	fb99 f3f3 	sdiv	r3, r9, r3
 8025f1e:	f7fe ffbd 	bl	8024e9c <sniprintf>
 8025f22:	2800      	cmp	r0, #0
 8025f24:	f6ff ab9c 	blt.w	8025660 <__strftime.isra.0+0x64>
 8025f28:	4404      	add	r4, r0
 8025f2a:	42a5      	cmp	r5, r4
 8025f2c:	f67f ab98 	bls.w	8025660 <__strftime.isra.0+0x64>
 8025f30:	2301      	movs	r3, #1
 8025f32:	9302      	str	r3, [sp, #8]
 8025f34:	e466      	b.n	8025804 <__strftime.isra.0+0x208>
 8025f36:	6a33      	ldr	r3, [r6, #32]
 8025f38:	2b00      	cmp	r3, #0
 8025f3a:	f6ff ac63 	blt.w	8025804 <__strftime.isra.0+0x208>
 8025f3e:	f000 f8e5 	bl	802610c <__tz_lock>
 8025f42:	9b02      	ldr	r3, [sp, #8]
 8025f44:	b90b      	cbnz	r3, 8025f4a <__strftime.isra.0+0x94e>
 8025f46:	f000 f8ed 	bl	8026124 <_tzset_unlocked>
 8025f4a:	6a33      	ldr	r3, [r6, #32]
 8025f4c:	4a1a      	ldr	r2, [pc, #104]	; (8025fb8 <__strftime.isra.0+0x9bc>)
 8025f4e:	2b00      	cmp	r3, #0
 8025f50:	bfd4      	ite	le
 8025f52:	2300      	movle	r3, #0
 8025f54:	2301      	movgt	r3, #1
 8025f56:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025f5a:	4648      	mov	r0, r9
 8025f5c:	f7da f998 	bl	8000290 <strlen>
 8025f60:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8025f64:	4420      	add	r0, r4
 8025f66:	1e6b      	subs	r3, r5, #1
 8025f68:	42a0      	cmp	r0, r4
 8025f6a:	d102      	bne.n	8025f72 <__strftime.isra.0+0x976>
 8025f6c:	f000 f8d4 	bl	8026118 <__tz_unlock>
 8025f70:	e7de      	b.n	8025f30 <__strftime.isra.0+0x934>
 8025f72:	42a3      	cmp	r3, r4
 8025f74:	d904      	bls.n	8025f80 <__strftime.isra.0+0x984>
 8025f76:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025f7a:	553a      	strb	r2, [r7, r4]
 8025f7c:	3401      	adds	r4, #1
 8025f7e:	e7f3      	b.n	8025f68 <__strftime.isra.0+0x96c>
 8025f80:	f000 f8ca 	bl	8026118 <__tz_unlock>
 8025f84:	f7ff bb6c 	b.w	8025660 <__strftime.isra.0+0x64>
 8025f88:	1e6b      	subs	r3, r5, #1
 8025f8a:	429c      	cmp	r4, r3
 8025f8c:	f4bf ab68 	bcs.w	8025660 <__strftime.isra.0+0x64>
 8025f90:	2325      	movs	r3, #37	; 0x25
 8025f92:	e635      	b.n	8025c00 <__strftime.isra.0+0x604>
 8025f94:	b10d      	cbz	r5, 8025f9a <__strftime.isra.0+0x99e>
 8025f96:	2300      	movs	r3, #0
 8025f98:	553b      	strb	r3, [r7, r4]
 8025f9a:	4620      	mov	r0, r4
 8025f9c:	b00f      	add	sp, #60	; 0x3c
 8025f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025fa2:	222d      	movs	r2, #45	; 0x2d
 8025fa4:	f88d 2018 	strb.w	r2, [sp, #24]
 8025fa8:	e770      	b.n	8025e8c <__strftime.isra.0+0x890>
 8025faa:	465a      	mov	r2, fp
 8025fac:	e7fa      	b.n	8025fa4 <__strftime.isra.0+0x9a8>
 8025fae:	bf00      	nop
 8025fb0:	fffff894 	.word	0xfffff894
 8025fb4:	0802e7cd 	.word	0x0802e7cd
 8025fb8:	2000004c 	.word	0x2000004c

08025fbc <strftime>:
 8025fbc:	f7ff bb1e 	b.w	80255fc <__strftime.isra.0>

08025fc0 <__tzcalc_limits>:
 8025fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025fc4:	4605      	mov	r5, r0
 8025fc6:	f002 fae3 	bl	8028590 <__gettzinfo>
 8025fca:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8025fce:	429d      	cmp	r5, r3
 8025fd0:	f340 8095 	ble.w	80260fe <__tzcalc_limits+0x13e>
 8025fd4:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8025fd8:	18ac      	adds	r4, r5, r2
 8025fda:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 8025fde:	f240 126d 	movw	r2, #365	; 0x16d
 8025fe2:	10a4      	asrs	r4, r4, #2
 8025fe4:	fb02 4403 	mla	r4, r2, r3, r4
 8025fe8:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8025fec:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 8025ff0:	fb93 f3f2 	sdiv	r3, r3, r2
 8025ff4:	441c      	add	r4, r3
 8025ff6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8025ffa:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 8025ffe:	fb95 fcf3 	sdiv	ip, r5, r3
 8026002:	fb03 5c1c 	mls	ip, r3, ip, r5
 8026006:	186a      	adds	r2, r5, r1
 8026008:	fabc f68c 	clz	r6, ip
 802600c:	fbb2 f2f3 	udiv	r2, r2, r3
 8026010:	f005 0303 	and.w	r3, r5, #3
 8026014:	4414      	add	r4, r2
 8026016:	2264      	movs	r2, #100	; 0x64
 8026018:	6045      	str	r5, [r0, #4]
 802601a:	fb95 f7f2 	sdiv	r7, r5, r2
 802601e:	0976      	lsrs	r6, r6, #5
 8026020:	fb02 5717 	mls	r7, r2, r7, r5
 8026024:	4601      	mov	r1, r0
 8026026:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 802602a:	9300      	str	r3, [sp, #0]
 802602c:	f04f 0a07 	mov.w	sl, #7
 8026030:	7a0d      	ldrb	r5, [r1, #8]
 8026032:	694b      	ldr	r3, [r1, #20]
 8026034:	2d4a      	cmp	r5, #74	; 0x4a
 8026036:	d12b      	bne.n	8026090 <__tzcalc_limits+0xd0>
 8026038:	9a00      	ldr	r2, [sp, #0]
 802603a:	18e5      	adds	r5, r4, r3
 802603c:	b902      	cbnz	r2, 8026040 <__tzcalc_limits+0x80>
 802603e:	b917      	cbnz	r7, 8026046 <__tzcalc_limits+0x86>
 8026040:	f1bc 0f00 	cmp.w	ip, #0
 8026044:	d122      	bne.n	802608c <__tzcalc_limits+0xcc>
 8026046:	2b3b      	cmp	r3, #59	; 0x3b
 8026048:	bfd4      	ite	le
 802604a:	2300      	movle	r3, #0
 802604c:	2301      	movgt	r3, #1
 802604e:	442b      	add	r3, r5
 8026050:	3b01      	subs	r3, #1
 8026052:	698d      	ldr	r5, [r1, #24]
 8026054:	4a2b      	ldr	r2, [pc, #172]	; (8026104 <__tzcalc_limits+0x144>)
 8026056:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 802605a:	fbc3 5e02 	smlal	r5, lr, r3, r2
 802605e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8026060:	18ed      	adds	r5, r5, r3
 8026062:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 8026066:	e9c1 5308 	strd	r5, r3, [r1, #32]
 802606a:	3128      	adds	r1, #40	; 0x28
 802606c:	458b      	cmp	fp, r1
 802606e:	d1df      	bne.n	8026030 <__tzcalc_limits+0x70>
 8026070:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 8026074:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	; 0x48
 8026078:	428c      	cmp	r4, r1
 802607a:	4193      	sbcs	r3, r2
 802607c:	bfb4      	ite	lt
 802607e:	2301      	movlt	r3, #1
 8026080:	2300      	movge	r3, #0
 8026082:	6003      	str	r3, [r0, #0]
 8026084:	2001      	movs	r0, #1
 8026086:	b003      	add	sp, #12
 8026088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802608c:	2300      	movs	r3, #0
 802608e:	e7de      	b.n	802604e <__tzcalc_limits+0x8e>
 8026090:	2d44      	cmp	r5, #68	; 0x44
 8026092:	d101      	bne.n	8026098 <__tzcalc_limits+0xd8>
 8026094:	4423      	add	r3, r4
 8026096:	e7dc      	b.n	8026052 <__tzcalc_limits+0x92>
 8026098:	9a00      	ldr	r2, [sp, #0]
 802609a:	bb52      	cbnz	r2, 80260f2 <__tzcalc_limits+0x132>
 802609c:	2f00      	cmp	r7, #0
 802609e:	bf0c      	ite	eq
 80260a0:	4635      	moveq	r5, r6
 80260a2:	2501      	movne	r5, #1
 80260a4:	68ca      	ldr	r2, [r1, #12]
 80260a6:	9201      	str	r2, [sp, #4]
 80260a8:	4a17      	ldr	r2, [pc, #92]	; (8026108 <__tzcalc_limits+0x148>)
 80260aa:	f04f 0930 	mov.w	r9, #48	; 0x30
 80260ae:	fb09 2505 	mla	r5, r9, r5, r2
 80260b2:	46a6      	mov	lr, r4
 80260b4:	f04f 0800 	mov.w	r8, #0
 80260b8:	3d04      	subs	r5, #4
 80260ba:	9a01      	ldr	r2, [sp, #4]
 80260bc:	f108 0801 	add.w	r8, r8, #1
 80260c0:	4542      	cmp	r2, r8
 80260c2:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 80260c6:	dc16      	bgt.n	80260f6 <__tzcalc_limits+0x136>
 80260c8:	f10e 0504 	add.w	r5, lr, #4
 80260cc:	fb95 f8fa 	sdiv	r8, r5, sl
 80260d0:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 80260d4:	eba5 0508 	sub.w	r5, r5, r8
 80260d8:	1b5d      	subs	r5, r3, r5
 80260da:	690b      	ldr	r3, [r1, #16]
 80260dc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80260e0:	bf48      	it	mi
 80260e2:	3507      	addmi	r5, #7
 80260e4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80260e8:	442b      	add	r3, r5
 80260ea:	454b      	cmp	r3, r9
 80260ec:	da05      	bge.n	80260fa <__tzcalc_limits+0x13a>
 80260ee:	4473      	add	r3, lr
 80260f0:	e7af      	b.n	8026052 <__tzcalc_limits+0x92>
 80260f2:	4635      	mov	r5, r6
 80260f4:	e7d6      	b.n	80260a4 <__tzcalc_limits+0xe4>
 80260f6:	44ce      	add	lr, r9
 80260f8:	e7df      	b.n	80260ba <__tzcalc_limits+0xfa>
 80260fa:	3b07      	subs	r3, #7
 80260fc:	e7f5      	b.n	80260ea <__tzcalc_limits+0x12a>
 80260fe:	2000      	movs	r0, #0
 8026100:	e7c1      	b.n	8026086 <__tzcalc_limits+0xc6>
 8026102:	bf00      	nop
 8026104:	00015180 	.word	0x00015180
 8026108:	0802e720 	.word	0x0802e720

0802610c <__tz_lock>:
 802610c:	4801      	ldr	r0, [pc, #4]	; (8026114 <__tz_lock+0x8>)
 802610e:	f000 bb0a 	b.w	8026726 <__retarget_lock_acquire>
 8026112:	bf00      	nop
 8026114:	200164e7 	.word	0x200164e7

08026118 <__tz_unlock>:
 8026118:	4801      	ldr	r0, [pc, #4]	; (8026120 <__tz_unlock+0x8>)
 802611a:	f000 bb06 	b.w	802672a <__retarget_lock_release>
 802611e:	bf00      	nop
 8026120:	200164e7 	.word	0x200164e7

08026124 <_tzset_unlocked>:
 8026124:	4b01      	ldr	r3, [pc, #4]	; (802612c <_tzset_unlocked+0x8>)
 8026126:	6818      	ldr	r0, [r3, #0]
 8026128:	f000 b802 	b.w	8026130 <_tzset_unlocked_r>
 802612c:	200000a0 	.word	0x200000a0

08026130 <_tzset_unlocked_r>:
 8026130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026134:	b08d      	sub	sp, #52	; 0x34
 8026136:	4607      	mov	r7, r0
 8026138:	f002 fa2a 	bl	8028590 <__gettzinfo>
 802613c:	49bb      	ldr	r1, [pc, #748]	; (802642c <_tzset_unlocked_r+0x2fc>)
 802613e:	4dbc      	ldr	r5, [pc, #752]	; (8026430 <_tzset_unlocked_r+0x300>)
 8026140:	4604      	mov	r4, r0
 8026142:	4638      	mov	r0, r7
 8026144:	f001 fa16 	bl	8027574 <_getenv_r>
 8026148:	4606      	mov	r6, r0
 802614a:	bb10      	cbnz	r0, 8026192 <_tzset_unlocked_r+0x62>
 802614c:	4bb9      	ldr	r3, [pc, #740]	; (8026434 <_tzset_unlocked_r+0x304>)
 802614e:	4aba      	ldr	r2, [pc, #744]	; (8026438 <_tzset_unlocked_r+0x308>)
 8026150:	6018      	str	r0, [r3, #0]
 8026152:	4bba      	ldr	r3, [pc, #744]	; (802643c <_tzset_unlocked_r+0x30c>)
 8026154:	62a0      	str	r0, [r4, #40]	; 0x28
 8026156:	6018      	str	r0, [r3, #0]
 8026158:	4bb9      	ldr	r3, [pc, #740]	; (8026440 <_tzset_unlocked_r+0x310>)
 802615a:	6520      	str	r0, [r4, #80]	; 0x50
 802615c:	e9c3 2200 	strd	r2, r2, [r3]
 8026160:	214a      	movs	r1, #74	; 0x4a
 8026162:	2200      	movs	r2, #0
 8026164:	2300      	movs	r3, #0
 8026166:	e9c4 0003 	strd	r0, r0, [r4, #12]
 802616a:	e9c4 0005 	strd	r0, r0, [r4, #20]
 802616e:	e9c4 000d 	strd	r0, r0, [r4, #52]	; 0x34
 8026172:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8026176:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802617a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 802617e:	6828      	ldr	r0, [r5, #0]
 8026180:	7221      	strb	r1, [r4, #8]
 8026182:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8026186:	f7fd ff6b 	bl	8024060 <free>
 802618a:	602e      	str	r6, [r5, #0]
 802618c:	b00d      	add	sp, #52	; 0x34
 802618e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026192:	6829      	ldr	r1, [r5, #0]
 8026194:	2900      	cmp	r1, #0
 8026196:	f040 808e 	bne.w	80262b6 <_tzset_unlocked_r+0x186>
 802619a:	6828      	ldr	r0, [r5, #0]
 802619c:	f7fd ff60 	bl	8024060 <free>
 80261a0:	4630      	mov	r0, r6
 80261a2:	f7da f875 	bl	8000290 <strlen>
 80261a6:	1c41      	adds	r1, r0, #1
 80261a8:	4638      	mov	r0, r7
 80261aa:	f7fd ff81 	bl	80240b0 <_malloc_r>
 80261ae:	6028      	str	r0, [r5, #0]
 80261b0:	2800      	cmp	r0, #0
 80261b2:	f040 8086 	bne.w	80262c2 <_tzset_unlocked_r+0x192>
 80261b6:	4aa1      	ldr	r2, [pc, #644]	; (802643c <_tzset_unlocked_r+0x30c>)
 80261b8:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8026440 <_tzset_unlocked_r+0x310>
 80261bc:	f8df a274 	ldr.w	sl, [pc, #628]	; 8026434 <_tzset_unlocked_r+0x304>
 80261c0:	2300      	movs	r3, #0
 80261c2:	6013      	str	r3, [r2, #0]
 80261c4:	4a9f      	ldr	r2, [pc, #636]	; (8026444 <_tzset_unlocked_r+0x314>)
 80261c6:	f8ca 3000 	str.w	r3, [sl]
 80261ca:	2000      	movs	r0, #0
 80261cc:	2100      	movs	r1, #0
 80261ce:	e9c8 2200 	strd	r2, r2, [r8]
 80261d2:	e9c4 3303 	strd	r3, r3, [r4, #12]
 80261d6:	e9c4 3305 	strd	r3, r3, [r4, #20]
 80261da:	e9c4 0108 	strd	r0, r1, [r4, #32]
 80261de:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
 80261e2:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 80261e6:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80261ea:	224a      	movs	r2, #74	; 0x4a
 80261ec:	7222      	strb	r2, [r4, #8]
 80261ee:	62a3      	str	r3, [r4, #40]	; 0x28
 80261f0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 80261f4:	6523      	str	r3, [r4, #80]	; 0x50
 80261f6:	7833      	ldrb	r3, [r6, #0]
 80261f8:	2b3a      	cmp	r3, #58	; 0x3a
 80261fa:	bf08      	it	eq
 80261fc:	3601      	addeq	r6, #1
 80261fe:	7833      	ldrb	r3, [r6, #0]
 8026200:	2b3c      	cmp	r3, #60	; 0x3c
 8026202:	d162      	bne.n	80262ca <_tzset_unlocked_r+0x19a>
 8026204:	1c75      	adds	r5, r6, #1
 8026206:	4a90      	ldr	r2, [pc, #576]	; (8026448 <_tzset_unlocked_r+0x318>)
 8026208:	4990      	ldr	r1, [pc, #576]	; (802644c <_tzset_unlocked_r+0x31c>)
 802620a:	ab0a      	add	r3, sp, #40	; 0x28
 802620c:	4628      	mov	r0, r5
 802620e:	f002 f963 	bl	80284d8 <siscanf>
 8026212:	2800      	cmp	r0, #0
 8026214:	ddba      	ble.n	802618c <_tzset_unlocked_r+0x5c>
 8026216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026218:	1eda      	subs	r2, r3, #3
 802621a:	2a07      	cmp	r2, #7
 802621c:	d8b6      	bhi.n	802618c <_tzset_unlocked_r+0x5c>
 802621e:	5ceb      	ldrb	r3, [r5, r3]
 8026220:	2b3e      	cmp	r3, #62	; 0x3e
 8026222:	d1b3      	bne.n	802618c <_tzset_unlocked_r+0x5c>
 8026224:	3602      	adds	r6, #2
 8026226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026228:	18f5      	adds	r5, r6, r3
 802622a:	5cf3      	ldrb	r3, [r6, r3]
 802622c:	2b2d      	cmp	r3, #45	; 0x2d
 802622e:	d15a      	bne.n	80262e6 <_tzset_unlocked_r+0x1b6>
 8026230:	3501      	adds	r5, #1
 8026232:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8026236:	2300      	movs	r3, #0
 8026238:	f8ad 301e 	strh.w	r3, [sp, #30]
 802623c:	f8ad 3020 	strh.w	r3, [sp, #32]
 8026240:	af08      	add	r7, sp, #32
 8026242:	ab0a      	add	r3, sp, #40	; 0x28
 8026244:	e9cd 3701 	strd	r3, r7, [sp, #4]
 8026248:	9303      	str	r3, [sp, #12]
 802624a:	f10d 031e 	add.w	r3, sp, #30
 802624e:	9300      	str	r3, [sp, #0]
 8026250:	497f      	ldr	r1, [pc, #508]	; (8026450 <_tzset_unlocked_r+0x320>)
 8026252:	ab0a      	add	r3, sp, #40	; 0x28
 8026254:	aa07      	add	r2, sp, #28
 8026256:	4628      	mov	r0, r5
 8026258:	f002 f93e 	bl	80284d8 <siscanf>
 802625c:	2800      	cmp	r0, #0
 802625e:	dd95      	ble.n	802618c <_tzset_unlocked_r+0x5c>
 8026260:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8026264:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 8026268:	223c      	movs	r2, #60	; 0x3c
 802626a:	fb02 6603 	mla	r6, r2, r3, r6
 802626e:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 8026272:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8026276:	fb02 6603 	mla	r6, r2, r3, r6
 802627a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802627c:	fb09 f606 	mul.w	r6, r9, r6
 8026280:	eb05 0903 	add.w	r9, r5, r3
 8026284:	5ceb      	ldrb	r3, [r5, r3]
 8026286:	2b3c      	cmp	r3, #60	; 0x3c
 8026288:	f040 80ec 	bne.w	8026464 <_tzset_unlocked_r+0x334>
 802628c:	f109 0501 	add.w	r5, r9, #1
 8026290:	4a70      	ldr	r2, [pc, #448]	; (8026454 <_tzset_unlocked_r+0x324>)
 8026292:	496e      	ldr	r1, [pc, #440]	; (802644c <_tzset_unlocked_r+0x31c>)
 8026294:	ab0a      	add	r3, sp, #40	; 0x28
 8026296:	4628      	mov	r0, r5
 8026298:	f002 f91e 	bl	80284d8 <siscanf>
 802629c:	2800      	cmp	r0, #0
 802629e:	dc28      	bgt.n	80262f2 <_tzset_unlocked_r+0x1c2>
 80262a0:	f899 3001 	ldrb.w	r3, [r9, #1]
 80262a4:	2b3e      	cmp	r3, #62	; 0x3e
 80262a6:	d124      	bne.n	80262f2 <_tzset_unlocked_r+0x1c2>
 80262a8:	4b67      	ldr	r3, [pc, #412]	; (8026448 <_tzset_unlocked_r+0x318>)
 80262aa:	62a6      	str	r6, [r4, #40]	; 0x28
 80262ac:	e9c8 3300 	strd	r3, r3, [r8]
 80262b0:	f8ca 6000 	str.w	r6, [sl]
 80262b4:	e76a      	b.n	802618c <_tzset_unlocked_r+0x5c>
 80262b6:	f7d9 ff8b 	bl	80001d0 <strcmp>
 80262ba:	2800      	cmp	r0, #0
 80262bc:	f47f af6d 	bne.w	802619a <_tzset_unlocked_r+0x6a>
 80262c0:	e764      	b.n	802618c <_tzset_unlocked_r+0x5c>
 80262c2:	4631      	mov	r1, r6
 80262c4:	f000 fa33 	bl	802672e <strcpy>
 80262c8:	e775      	b.n	80261b6 <_tzset_unlocked_r+0x86>
 80262ca:	4a5f      	ldr	r2, [pc, #380]	; (8026448 <_tzset_unlocked_r+0x318>)
 80262cc:	4962      	ldr	r1, [pc, #392]	; (8026458 <_tzset_unlocked_r+0x328>)
 80262ce:	ab0a      	add	r3, sp, #40	; 0x28
 80262d0:	4630      	mov	r0, r6
 80262d2:	f002 f901 	bl	80284d8 <siscanf>
 80262d6:	2800      	cmp	r0, #0
 80262d8:	f77f af58 	ble.w	802618c <_tzset_unlocked_r+0x5c>
 80262dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80262de:	3b03      	subs	r3, #3
 80262e0:	2b07      	cmp	r3, #7
 80262e2:	d9a0      	bls.n	8026226 <_tzset_unlocked_r+0xf6>
 80262e4:	e752      	b.n	802618c <_tzset_unlocked_r+0x5c>
 80262e6:	2b2b      	cmp	r3, #43	; 0x2b
 80262e8:	bf08      	it	eq
 80262ea:	3501      	addeq	r5, #1
 80262ec:	f04f 0901 	mov.w	r9, #1
 80262f0:	e7a1      	b.n	8026236 <_tzset_unlocked_r+0x106>
 80262f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80262f4:	1eda      	subs	r2, r3, #3
 80262f6:	2a07      	cmp	r2, #7
 80262f8:	f63f af48 	bhi.w	802618c <_tzset_unlocked_r+0x5c>
 80262fc:	5ceb      	ldrb	r3, [r5, r3]
 80262fe:	2b3e      	cmp	r3, #62	; 0x3e
 8026300:	f47f af44 	bne.w	802618c <_tzset_unlocked_r+0x5c>
 8026304:	f109 0902 	add.w	r9, r9, #2
 8026308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802630a:	eb09 0503 	add.w	r5, r9, r3
 802630e:	f819 3003 	ldrb.w	r3, [r9, r3]
 8026312:	2b2d      	cmp	r3, #45	; 0x2d
 8026314:	f040 80b5 	bne.w	8026482 <_tzset_unlocked_r+0x352>
 8026318:	3501      	adds	r5, #1
 802631a:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 802631e:	2300      	movs	r3, #0
 8026320:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026324:	f8ad 301e 	strh.w	r3, [sp, #30]
 8026328:	f8ad 3020 	strh.w	r3, [sp, #32]
 802632c:	930a      	str	r3, [sp, #40]	; 0x28
 802632e:	ab0a      	add	r3, sp, #40	; 0x28
 8026330:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8026334:	9301      	str	r3, [sp, #4]
 8026336:	f10d 031e 	add.w	r3, sp, #30
 802633a:	9300      	str	r3, [sp, #0]
 802633c:	4944      	ldr	r1, [pc, #272]	; (8026450 <_tzset_unlocked_r+0x320>)
 802633e:	ab0a      	add	r3, sp, #40	; 0x28
 8026340:	aa07      	add	r2, sp, #28
 8026342:	4628      	mov	r0, r5
 8026344:	f002 f8c8 	bl	80284d8 <siscanf>
 8026348:	2800      	cmp	r0, #0
 802634a:	f300 80a0 	bgt.w	802648e <_tzset_unlocked_r+0x35e>
 802634e:	f5a6 6361 	sub.w	r3, r6, #3600	; 0xe10
 8026352:	9304      	str	r3, [sp, #16]
 8026354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026356:	4627      	mov	r7, r4
 8026358:	441d      	add	r5, r3
 802635a:	f04f 0b00 	mov.w	fp, #0
 802635e:	782b      	ldrb	r3, [r5, #0]
 8026360:	2b2c      	cmp	r3, #44	; 0x2c
 8026362:	bf08      	it	eq
 8026364:	3501      	addeq	r5, #1
 8026366:	f895 9000 	ldrb.w	r9, [r5]
 802636a:	f1b9 0f4d 	cmp.w	r9, #77	; 0x4d
 802636e:	f040 80a1 	bne.w	80264b4 <_tzset_unlocked_r+0x384>
 8026372:	ab0a      	add	r3, sp, #40	; 0x28
 8026374:	f10d 0226 	add.w	r2, sp, #38	; 0x26
 8026378:	e9cd 3201 	strd	r3, r2, [sp, #4]
 802637c:	aa09      	add	r2, sp, #36	; 0x24
 802637e:	9200      	str	r2, [sp, #0]
 8026380:	4936      	ldr	r1, [pc, #216]	; (802645c <_tzset_unlocked_r+0x32c>)
 8026382:	9303      	str	r3, [sp, #12]
 8026384:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8026388:	4628      	mov	r0, r5
 802638a:	f002 f8a5 	bl	80284d8 <siscanf>
 802638e:	2803      	cmp	r0, #3
 8026390:	f47f aefc 	bne.w	802618c <_tzset_unlocked_r+0x5c>
 8026394:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8026398:	1e4b      	subs	r3, r1, #1
 802639a:	2b0b      	cmp	r3, #11
 802639c:	f63f aef6 	bhi.w	802618c <_tzset_unlocked_r+0x5c>
 80263a0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 80263a4:	1e53      	subs	r3, r2, #1
 80263a6:	2b04      	cmp	r3, #4
 80263a8:	f63f aef0 	bhi.w	802618c <_tzset_unlocked_r+0x5c>
 80263ac:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 80263b0:	2b06      	cmp	r3, #6
 80263b2:	f63f aeeb 	bhi.w	802618c <_tzset_unlocked_r+0x5c>
 80263b6:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80263ba:	f887 9008 	strb.w	r9, [r7, #8]
 80263be:	617b      	str	r3, [r7, #20]
 80263c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80263c2:	eb05 0903 	add.w	r9, r5, r3
 80263c6:	2500      	movs	r5, #0
 80263c8:	2302      	movs	r3, #2
 80263ca:	f8ad 301c 	strh.w	r3, [sp, #28]
 80263ce:	f8ad 501e 	strh.w	r5, [sp, #30]
 80263d2:	f8ad 5020 	strh.w	r5, [sp, #32]
 80263d6:	950a      	str	r5, [sp, #40]	; 0x28
 80263d8:	f899 3000 	ldrb.w	r3, [r9]
 80263dc:	2b2f      	cmp	r3, #47	; 0x2f
 80263de:	f040 8095 	bne.w	802650c <_tzset_unlocked_r+0x3dc>
 80263e2:	ab0a      	add	r3, sp, #40	; 0x28
 80263e4:	aa08      	add	r2, sp, #32
 80263e6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80263ea:	f10d 021e 	add.w	r2, sp, #30
 80263ee:	9200      	str	r2, [sp, #0]
 80263f0:	491b      	ldr	r1, [pc, #108]	; (8026460 <_tzset_unlocked_r+0x330>)
 80263f2:	9303      	str	r3, [sp, #12]
 80263f4:	aa07      	add	r2, sp, #28
 80263f6:	4648      	mov	r0, r9
 80263f8:	f002 f86e 	bl	80284d8 <siscanf>
 80263fc:	42a8      	cmp	r0, r5
 80263fe:	f300 8085 	bgt.w	802650c <_tzset_unlocked_r+0x3dc>
 8026402:	214a      	movs	r1, #74	; 0x4a
 8026404:	2200      	movs	r2, #0
 8026406:	2300      	movs	r3, #0
 8026408:	e9c4 5503 	strd	r5, r5, [r4, #12]
 802640c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8026410:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8026414:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026418:	e9c4 550f 	strd	r5, r5, [r4, #60]	; 0x3c
 802641c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8026420:	7221      	strb	r1, [r4, #8]
 8026422:	62a5      	str	r5, [r4, #40]	; 0x28
 8026424:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
 8026428:	6525      	str	r5, [r4, #80]	; 0x50
 802642a:	e6af      	b.n	802618c <_tzset_unlocked_r+0x5c>
 802642c:	0802e7d9 	.word	0x0802e7d9
 8026430:	200164d4 	.word	0x200164d4
 8026434:	200164dc 	.word	0x200164dc
 8026438:	0802e7dc 	.word	0x0802e7dc
 802643c:	200164d8 	.word	0x200164d8
 8026440:	2000004c 	.word	0x2000004c
 8026444:	0802e57b 	.word	0x0802e57b
 8026448:	200164c8 	.word	0x200164c8
 802644c:	0802e7e0 	.word	0x0802e7e0
 8026450:	0802e815 	.word	0x0802e815
 8026454:	200164bc 	.word	0x200164bc
 8026458:	0802e7f3 	.word	0x0802e7f3
 802645c:	0802e801 	.word	0x0802e801
 8026460:	0802e814 	.word	0x0802e814
 8026464:	4a3e      	ldr	r2, [pc, #248]	; (8026560 <_tzset_unlocked_r+0x430>)
 8026466:	493f      	ldr	r1, [pc, #252]	; (8026564 <_tzset_unlocked_r+0x434>)
 8026468:	ab0a      	add	r3, sp, #40	; 0x28
 802646a:	4648      	mov	r0, r9
 802646c:	f002 f834 	bl	80284d8 <siscanf>
 8026470:	2800      	cmp	r0, #0
 8026472:	f77f af19 	ble.w	80262a8 <_tzset_unlocked_r+0x178>
 8026476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026478:	3b03      	subs	r3, #3
 802647a:	2b07      	cmp	r3, #7
 802647c:	f67f af44 	bls.w	8026308 <_tzset_unlocked_r+0x1d8>
 8026480:	e684      	b.n	802618c <_tzset_unlocked_r+0x5c>
 8026482:	2b2b      	cmp	r3, #43	; 0x2b
 8026484:	bf08      	it	eq
 8026486:	3501      	addeq	r5, #1
 8026488:	f04f 0901 	mov.w	r9, #1
 802648c:	e747      	b.n	802631e <_tzset_unlocked_r+0x1ee>
 802648e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8026492:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026496:	213c      	movs	r1, #60	; 0x3c
 8026498:	fb01 3302 	mla	r3, r1, r2, r3
 802649c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80264a0:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80264a4:	fb01 3302 	mla	r3, r1, r2, r3
 80264a8:	fb09 f303 	mul.w	r3, r9, r3
 80264ac:	e751      	b.n	8026352 <_tzset_unlocked_r+0x222>
 80264ae:	f04f 0b01 	mov.w	fp, #1
 80264b2:	e754      	b.n	802635e <_tzset_unlocked_r+0x22e>
 80264b4:	f1b9 0f4a 	cmp.w	r9, #74	; 0x4a
 80264b8:	bf06      	itte	eq
 80264ba:	3501      	addeq	r5, #1
 80264bc:	464b      	moveq	r3, r9
 80264be:	2344      	movne	r3, #68	; 0x44
 80264c0:	220a      	movs	r2, #10
 80264c2:	a90b      	add	r1, sp, #44	; 0x2c
 80264c4:	4628      	mov	r0, r5
 80264c6:	9305      	str	r3, [sp, #20]
 80264c8:	f001 fc50 	bl	8027d6c <strtoul>
 80264cc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80264d0:	9b05      	ldr	r3, [sp, #20]
 80264d2:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80264d6:	45a9      	cmp	r9, r5
 80264d8:	d114      	bne.n	8026504 <_tzset_unlocked_r+0x3d4>
 80264da:	234d      	movs	r3, #77	; 0x4d
 80264dc:	f1bb 0f00 	cmp.w	fp, #0
 80264e0:	d107      	bne.n	80264f2 <_tzset_unlocked_r+0x3c2>
 80264e2:	7223      	strb	r3, [r4, #8]
 80264e4:	2103      	movs	r1, #3
 80264e6:	2302      	movs	r3, #2
 80264e8:	e9c4 1303 	strd	r1, r3, [r4, #12]
 80264ec:	f8c4 b014 	str.w	fp, [r4, #20]
 80264f0:	e769      	b.n	80263c6 <_tzset_unlocked_r+0x296>
 80264f2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
 80264f6:	220b      	movs	r2, #11
 80264f8:	2301      	movs	r3, #1
 80264fa:	e9c4 230d 	strd	r2, r3, [r4, #52]	; 0x34
 80264fe:	2300      	movs	r3, #0
 8026500:	63e3      	str	r3, [r4, #60]	; 0x3c
 8026502:	e760      	b.n	80263c6 <_tzset_unlocked_r+0x296>
 8026504:	b280      	uxth	r0, r0
 8026506:	723b      	strb	r3, [r7, #8]
 8026508:	6178      	str	r0, [r7, #20]
 802650a:	e75c      	b.n	80263c6 <_tzset_unlocked_r+0x296>
 802650c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8026510:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026514:	213c      	movs	r1, #60	; 0x3c
 8026516:	fb01 3302 	mla	r3, r1, r2, r3
 802651a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802651e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8026522:	fb01 3302 	mla	r3, r1, r2, r3
 8026526:	61bb      	str	r3, [r7, #24]
 8026528:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 802652a:	3728      	adds	r7, #40	; 0x28
 802652c:	444d      	add	r5, r9
 802652e:	f1bb 0f00 	cmp.w	fp, #0
 8026532:	d0bc      	beq.n	80264ae <_tzset_unlocked_r+0x37e>
 8026534:	9b04      	ldr	r3, [sp, #16]
 8026536:	6523      	str	r3, [r4, #80]	; 0x50
 8026538:	4b0b      	ldr	r3, [pc, #44]	; (8026568 <_tzset_unlocked_r+0x438>)
 802653a:	f8c8 3000 	str.w	r3, [r8]
 802653e:	6860      	ldr	r0, [r4, #4]
 8026540:	4b07      	ldr	r3, [pc, #28]	; (8026560 <_tzset_unlocked_r+0x430>)
 8026542:	62a6      	str	r6, [r4, #40]	; 0x28
 8026544:	f8c8 3004 	str.w	r3, [r8, #4]
 8026548:	f7ff fd3a 	bl	8025fc0 <__tzcalc_limits>
 802654c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 802654e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8026550:	f8ca 2000 	str.w	r2, [sl]
 8026554:	1a9b      	subs	r3, r3, r2
 8026556:	4a05      	ldr	r2, [pc, #20]	; (802656c <_tzset_unlocked_r+0x43c>)
 8026558:	bf18      	it	ne
 802655a:	2301      	movne	r3, #1
 802655c:	6013      	str	r3, [r2, #0]
 802655e:	e615      	b.n	802618c <_tzset_unlocked_r+0x5c>
 8026560:	200164bc 	.word	0x200164bc
 8026564:	0802e7f3 	.word	0x0802e7f3
 8026568:	200164c8 	.word	0x200164c8
 802656c:	200164d8 	.word	0x200164d8

08026570 <_localeconv_r>:
 8026570:	4800      	ldr	r0, [pc, #0]	; (8026574 <_localeconv_r+0x4>)
 8026572:	4770      	bx	lr
 8026574:	200001f0 	.word	0x200001f0

08026578 <_close_r>:
 8026578:	b538      	push	{r3, r4, r5, lr}
 802657a:	4d06      	ldr	r5, [pc, #24]	; (8026594 <_close_r+0x1c>)
 802657c:	2300      	movs	r3, #0
 802657e:	4604      	mov	r4, r0
 8026580:	4608      	mov	r0, r1
 8026582:	602b      	str	r3, [r5, #0]
 8026584:	f7dd fdb1 	bl	80040ea <_close>
 8026588:	1c43      	adds	r3, r0, #1
 802658a:	d102      	bne.n	8026592 <_close_r+0x1a>
 802658c:	682b      	ldr	r3, [r5, #0]
 802658e:	b103      	cbz	r3, 8026592 <_close_r+0x1a>
 8026590:	6023      	str	r3, [r4, #0]
 8026592:	bd38      	pop	{r3, r4, r5, pc}
 8026594:	200164e0 	.word	0x200164e0

08026598 <_reclaim_reent>:
 8026598:	4b29      	ldr	r3, [pc, #164]	; (8026640 <_reclaim_reent+0xa8>)
 802659a:	681b      	ldr	r3, [r3, #0]
 802659c:	4283      	cmp	r3, r0
 802659e:	b570      	push	{r4, r5, r6, lr}
 80265a0:	4604      	mov	r4, r0
 80265a2:	d04b      	beq.n	802663c <_reclaim_reent+0xa4>
 80265a4:	69c3      	ldr	r3, [r0, #28]
 80265a6:	b143      	cbz	r3, 80265ba <_reclaim_reent+0x22>
 80265a8:	68db      	ldr	r3, [r3, #12]
 80265aa:	2b00      	cmp	r3, #0
 80265ac:	d144      	bne.n	8026638 <_reclaim_reent+0xa0>
 80265ae:	69e3      	ldr	r3, [r4, #28]
 80265b0:	6819      	ldr	r1, [r3, #0]
 80265b2:	b111      	cbz	r1, 80265ba <_reclaim_reent+0x22>
 80265b4:	4620      	mov	r0, r4
 80265b6:	f000 ff55 	bl	8027464 <_free_r>
 80265ba:	6961      	ldr	r1, [r4, #20]
 80265bc:	b111      	cbz	r1, 80265c4 <_reclaim_reent+0x2c>
 80265be:	4620      	mov	r0, r4
 80265c0:	f000 ff50 	bl	8027464 <_free_r>
 80265c4:	69e1      	ldr	r1, [r4, #28]
 80265c6:	b111      	cbz	r1, 80265ce <_reclaim_reent+0x36>
 80265c8:	4620      	mov	r0, r4
 80265ca:	f000 ff4b 	bl	8027464 <_free_r>
 80265ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80265d0:	b111      	cbz	r1, 80265d8 <_reclaim_reent+0x40>
 80265d2:	4620      	mov	r0, r4
 80265d4:	f000 ff46 	bl	8027464 <_free_r>
 80265d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80265da:	b111      	cbz	r1, 80265e2 <_reclaim_reent+0x4a>
 80265dc:	4620      	mov	r0, r4
 80265de:	f000 ff41 	bl	8027464 <_free_r>
 80265e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80265e4:	b111      	cbz	r1, 80265ec <_reclaim_reent+0x54>
 80265e6:	4620      	mov	r0, r4
 80265e8:	f000 ff3c 	bl	8027464 <_free_r>
 80265ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80265ee:	b111      	cbz	r1, 80265f6 <_reclaim_reent+0x5e>
 80265f0:	4620      	mov	r0, r4
 80265f2:	f000 ff37 	bl	8027464 <_free_r>
 80265f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80265f8:	b111      	cbz	r1, 8026600 <_reclaim_reent+0x68>
 80265fa:	4620      	mov	r0, r4
 80265fc:	f000 ff32 	bl	8027464 <_free_r>
 8026600:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8026602:	b111      	cbz	r1, 802660a <_reclaim_reent+0x72>
 8026604:	4620      	mov	r0, r4
 8026606:	f000 ff2d 	bl	8027464 <_free_r>
 802660a:	6a23      	ldr	r3, [r4, #32]
 802660c:	b1b3      	cbz	r3, 802663c <_reclaim_reent+0xa4>
 802660e:	4620      	mov	r0, r4
 8026610:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026614:	4718      	bx	r3
 8026616:	5949      	ldr	r1, [r1, r5]
 8026618:	b941      	cbnz	r1, 802662c <_reclaim_reent+0x94>
 802661a:	3504      	adds	r5, #4
 802661c:	69e3      	ldr	r3, [r4, #28]
 802661e:	2d80      	cmp	r5, #128	; 0x80
 8026620:	68d9      	ldr	r1, [r3, #12]
 8026622:	d1f8      	bne.n	8026616 <_reclaim_reent+0x7e>
 8026624:	4620      	mov	r0, r4
 8026626:	f000 ff1d 	bl	8027464 <_free_r>
 802662a:	e7c0      	b.n	80265ae <_reclaim_reent+0x16>
 802662c:	680e      	ldr	r6, [r1, #0]
 802662e:	4620      	mov	r0, r4
 8026630:	f000 ff18 	bl	8027464 <_free_r>
 8026634:	4631      	mov	r1, r6
 8026636:	e7ef      	b.n	8026618 <_reclaim_reent+0x80>
 8026638:	2500      	movs	r5, #0
 802663a:	e7ef      	b.n	802661c <_reclaim_reent+0x84>
 802663c:	bd70      	pop	{r4, r5, r6, pc}
 802663e:	bf00      	nop
 8026640:	200000a0 	.word	0x200000a0

08026644 <_lseek_r>:
 8026644:	b538      	push	{r3, r4, r5, lr}
 8026646:	4d07      	ldr	r5, [pc, #28]	; (8026664 <_lseek_r+0x20>)
 8026648:	4604      	mov	r4, r0
 802664a:	4608      	mov	r0, r1
 802664c:	4611      	mov	r1, r2
 802664e:	2200      	movs	r2, #0
 8026650:	602a      	str	r2, [r5, #0]
 8026652:	461a      	mov	r2, r3
 8026654:	f7dd fd70 	bl	8004138 <_lseek>
 8026658:	1c43      	adds	r3, r0, #1
 802665a:	d102      	bne.n	8026662 <_lseek_r+0x1e>
 802665c:	682b      	ldr	r3, [r5, #0]
 802665e:	b103      	cbz	r3, 8026662 <_lseek_r+0x1e>
 8026660:	6023      	str	r3, [r4, #0]
 8026662:	bd38      	pop	{r3, r4, r5, pc}
 8026664:	200164e0 	.word	0x200164e0

08026668 <_read_r>:
 8026668:	b538      	push	{r3, r4, r5, lr}
 802666a:	4d07      	ldr	r5, [pc, #28]	; (8026688 <_read_r+0x20>)
 802666c:	4604      	mov	r4, r0
 802666e:	4608      	mov	r0, r1
 8026670:	4611      	mov	r1, r2
 8026672:	2200      	movs	r2, #0
 8026674:	602a      	str	r2, [r5, #0]
 8026676:	461a      	mov	r2, r3
 8026678:	f7dd fcfe 	bl	8004078 <_read>
 802667c:	1c43      	adds	r3, r0, #1
 802667e:	d102      	bne.n	8026686 <_read_r+0x1e>
 8026680:	682b      	ldr	r3, [r5, #0]
 8026682:	b103      	cbz	r3, 8026686 <_read_r+0x1e>
 8026684:	6023      	str	r3, [r4, #0]
 8026686:	bd38      	pop	{r3, r4, r5, pc}
 8026688:	200164e0 	.word	0x200164e0

0802668c <_sbrk_r>:
 802668c:	b538      	push	{r3, r4, r5, lr}
 802668e:	4d06      	ldr	r5, [pc, #24]	; (80266a8 <_sbrk_r+0x1c>)
 8026690:	2300      	movs	r3, #0
 8026692:	4604      	mov	r4, r0
 8026694:	4608      	mov	r0, r1
 8026696:	602b      	str	r3, [r5, #0]
 8026698:	f7dd fd5c 	bl	8004154 <_sbrk>
 802669c:	1c43      	adds	r3, r0, #1
 802669e:	d102      	bne.n	80266a6 <_sbrk_r+0x1a>
 80266a0:	682b      	ldr	r3, [r5, #0]
 80266a2:	b103      	cbz	r3, 80266a6 <_sbrk_r+0x1a>
 80266a4:	6023      	str	r3, [r4, #0]
 80266a6:	bd38      	pop	{r3, r4, r5, pc}
 80266a8:	200164e0 	.word	0x200164e0

080266ac <_write_r>:
 80266ac:	b538      	push	{r3, r4, r5, lr}
 80266ae:	4d07      	ldr	r5, [pc, #28]	; (80266cc <_write_r+0x20>)
 80266b0:	4604      	mov	r4, r0
 80266b2:	4608      	mov	r0, r1
 80266b4:	4611      	mov	r1, r2
 80266b6:	2200      	movs	r2, #0
 80266b8:	602a      	str	r2, [r5, #0]
 80266ba:	461a      	mov	r2, r3
 80266bc:	f7dd fcf9 	bl	80040b2 <_write>
 80266c0:	1c43      	adds	r3, r0, #1
 80266c2:	d102      	bne.n	80266ca <_write_r+0x1e>
 80266c4:	682b      	ldr	r3, [r5, #0]
 80266c6:	b103      	cbz	r3, 80266ca <_write_r+0x1e>
 80266c8:	6023      	str	r3, [r4, #0]
 80266ca:	bd38      	pop	{r3, r4, r5, pc}
 80266cc:	200164e0 	.word	0x200164e0

080266d0 <__errno>:
 80266d0:	4b01      	ldr	r3, [pc, #4]	; (80266d8 <__errno+0x8>)
 80266d2:	6818      	ldr	r0, [r3, #0]
 80266d4:	4770      	bx	lr
 80266d6:	bf00      	nop
 80266d8:	200000a0 	.word	0x200000a0

080266dc <__libc_init_array>:
 80266dc:	b570      	push	{r4, r5, r6, lr}
 80266de:	4d0d      	ldr	r5, [pc, #52]	; (8026714 <__libc_init_array+0x38>)
 80266e0:	4c0d      	ldr	r4, [pc, #52]	; (8026718 <__libc_init_array+0x3c>)
 80266e2:	1b64      	subs	r4, r4, r5
 80266e4:	10a4      	asrs	r4, r4, #2
 80266e6:	2600      	movs	r6, #0
 80266e8:	42a6      	cmp	r6, r4
 80266ea:	d109      	bne.n	8026700 <__libc_init_array+0x24>
 80266ec:	4d0b      	ldr	r5, [pc, #44]	; (802671c <__libc_init_array+0x40>)
 80266ee:	4c0c      	ldr	r4, [pc, #48]	; (8026720 <__libc_init_array+0x44>)
 80266f0:	f002 fb94 	bl	8028e1c <_init>
 80266f4:	1b64      	subs	r4, r4, r5
 80266f6:	10a4      	asrs	r4, r4, #2
 80266f8:	2600      	movs	r6, #0
 80266fa:	42a6      	cmp	r6, r4
 80266fc:	d105      	bne.n	802670a <__libc_init_array+0x2e>
 80266fe:	bd70      	pop	{r4, r5, r6, pc}
 8026700:	f855 3b04 	ldr.w	r3, [r5], #4
 8026704:	4798      	blx	r3
 8026706:	3601      	adds	r6, #1
 8026708:	e7ee      	b.n	80266e8 <__libc_init_array+0xc>
 802670a:	f855 3b04 	ldr.w	r3, [r5], #4
 802670e:	4798      	blx	r3
 8026710:	3601      	adds	r6, #1
 8026712:	e7f2      	b.n	80266fa <__libc_init_array+0x1e>
 8026714:	0802ec5c 	.word	0x0802ec5c
 8026718:	0802ec5c 	.word	0x0802ec5c
 802671c:	0802ec5c 	.word	0x0802ec5c
 8026720:	0802ec60 	.word	0x0802ec60

08026724 <__retarget_lock_init_recursive>:
 8026724:	4770      	bx	lr

08026726 <__retarget_lock_acquire>:
 8026726:	4770      	bx	lr

08026728 <__retarget_lock_acquire_recursive>:
 8026728:	4770      	bx	lr

0802672a <__retarget_lock_release>:
 802672a:	4770      	bx	lr

0802672c <__retarget_lock_release_recursive>:
 802672c:	4770      	bx	lr

0802672e <strcpy>:
 802672e:	4603      	mov	r3, r0
 8026730:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026734:	f803 2b01 	strb.w	r2, [r3], #1
 8026738:	2a00      	cmp	r2, #0
 802673a:	d1f9      	bne.n	8026730 <strcpy+0x2>
 802673c:	4770      	bx	lr

0802673e <memcpy>:
 802673e:	440a      	add	r2, r1
 8026740:	4291      	cmp	r1, r2
 8026742:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8026746:	d100      	bne.n	802674a <memcpy+0xc>
 8026748:	4770      	bx	lr
 802674a:	b510      	push	{r4, lr}
 802674c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026750:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026754:	4291      	cmp	r1, r2
 8026756:	d1f9      	bne.n	802674c <memcpy+0xe>
 8026758:	bd10      	pop	{r4, pc}

0802675a <abort>:
 802675a:	b508      	push	{r3, lr}
 802675c:	2006      	movs	r0, #6
 802675e:	f001 ff0f 	bl	8028580 <raise>
 8026762:	2001      	movs	r0, #1
 8026764:	f7dd fc7e 	bl	8004064 <_exit>

08026768 <abs>:
 8026768:	2800      	cmp	r0, #0
 802676a:	bfb8      	it	lt
 802676c:	4240      	neglt	r0, r0
 802676e:	4770      	bx	lr

08026770 <quorem>:
 8026770:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026774:	6903      	ldr	r3, [r0, #16]
 8026776:	690c      	ldr	r4, [r1, #16]
 8026778:	42a3      	cmp	r3, r4
 802677a:	4607      	mov	r7, r0
 802677c:	db7e      	blt.n	802687c <quorem+0x10c>
 802677e:	3c01      	subs	r4, #1
 8026780:	f101 0814 	add.w	r8, r1, #20
 8026784:	f100 0514 	add.w	r5, r0, #20
 8026788:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 802678c:	9301      	str	r3, [sp, #4]
 802678e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026792:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8026796:	3301      	adds	r3, #1
 8026798:	429a      	cmp	r2, r3
 802679a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802679e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80267a2:	fbb2 f6f3 	udiv	r6, r2, r3
 80267a6:	d331      	bcc.n	802680c <quorem+0x9c>
 80267a8:	f04f 0e00 	mov.w	lr, #0
 80267ac:	4640      	mov	r0, r8
 80267ae:	46ac      	mov	ip, r5
 80267b0:	46f2      	mov	sl, lr
 80267b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80267b6:	b293      	uxth	r3, r2
 80267b8:	fb06 e303 	mla	r3, r6, r3, lr
 80267bc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80267c0:	0c1a      	lsrs	r2, r3, #16
 80267c2:	b29b      	uxth	r3, r3
 80267c4:	ebaa 0303 	sub.w	r3, sl, r3
 80267c8:	f8dc a000 	ldr.w	sl, [ip]
 80267cc:	fa13 f38a 	uxtah	r3, r3, sl
 80267d0:	fb06 220e 	mla	r2, r6, lr, r2
 80267d4:	9300      	str	r3, [sp, #0]
 80267d6:	9b00      	ldr	r3, [sp, #0]
 80267d8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80267dc:	b292      	uxth	r2, r2
 80267de:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80267e2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80267e6:	f8bd 3000 	ldrh.w	r3, [sp]
 80267ea:	4581      	cmp	r9, r0
 80267ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80267f0:	f84c 3b04 	str.w	r3, [ip], #4
 80267f4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80267f8:	d2db      	bcs.n	80267b2 <quorem+0x42>
 80267fa:	f855 300b 	ldr.w	r3, [r5, fp]
 80267fe:	b92b      	cbnz	r3, 802680c <quorem+0x9c>
 8026800:	9b01      	ldr	r3, [sp, #4]
 8026802:	3b04      	subs	r3, #4
 8026804:	429d      	cmp	r5, r3
 8026806:	461a      	mov	r2, r3
 8026808:	d32c      	bcc.n	8026864 <quorem+0xf4>
 802680a:	613c      	str	r4, [r7, #16]
 802680c:	4638      	mov	r0, r7
 802680e:	f001 f939 	bl	8027a84 <__mcmp>
 8026812:	2800      	cmp	r0, #0
 8026814:	db22      	blt.n	802685c <quorem+0xec>
 8026816:	3601      	adds	r6, #1
 8026818:	4629      	mov	r1, r5
 802681a:	2000      	movs	r0, #0
 802681c:	f858 2b04 	ldr.w	r2, [r8], #4
 8026820:	f8d1 c000 	ldr.w	ip, [r1]
 8026824:	b293      	uxth	r3, r2
 8026826:	1ac3      	subs	r3, r0, r3
 8026828:	0c12      	lsrs	r2, r2, #16
 802682a:	fa13 f38c 	uxtah	r3, r3, ip
 802682e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8026832:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8026836:	b29b      	uxth	r3, r3
 8026838:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802683c:	45c1      	cmp	r9, r8
 802683e:	f841 3b04 	str.w	r3, [r1], #4
 8026842:	ea4f 4022 	mov.w	r0, r2, asr #16
 8026846:	d2e9      	bcs.n	802681c <quorem+0xac>
 8026848:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802684c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026850:	b922      	cbnz	r2, 802685c <quorem+0xec>
 8026852:	3b04      	subs	r3, #4
 8026854:	429d      	cmp	r5, r3
 8026856:	461a      	mov	r2, r3
 8026858:	d30a      	bcc.n	8026870 <quorem+0x100>
 802685a:	613c      	str	r4, [r7, #16]
 802685c:	4630      	mov	r0, r6
 802685e:	b003      	add	sp, #12
 8026860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026864:	6812      	ldr	r2, [r2, #0]
 8026866:	3b04      	subs	r3, #4
 8026868:	2a00      	cmp	r2, #0
 802686a:	d1ce      	bne.n	802680a <quorem+0x9a>
 802686c:	3c01      	subs	r4, #1
 802686e:	e7c9      	b.n	8026804 <quorem+0x94>
 8026870:	6812      	ldr	r2, [r2, #0]
 8026872:	3b04      	subs	r3, #4
 8026874:	2a00      	cmp	r2, #0
 8026876:	d1f0      	bne.n	802685a <quorem+0xea>
 8026878:	3c01      	subs	r4, #1
 802687a:	e7eb      	b.n	8026854 <quorem+0xe4>
 802687c:	2000      	movs	r0, #0
 802687e:	e7ee      	b.n	802685e <quorem+0xee>

08026880 <_dtoa_r>:
 8026880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026884:	ed2d 8b04 	vpush	{d8-d9}
 8026888:	69c5      	ldr	r5, [r0, #28]
 802688a:	b093      	sub	sp, #76	; 0x4c
 802688c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026890:	ec57 6b10 	vmov	r6, r7, d0
 8026894:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8026898:	9107      	str	r1, [sp, #28]
 802689a:	4604      	mov	r4, r0
 802689c:	920a      	str	r2, [sp, #40]	; 0x28
 802689e:	930d      	str	r3, [sp, #52]	; 0x34
 80268a0:	b975      	cbnz	r5, 80268c0 <_dtoa_r+0x40>
 80268a2:	2010      	movs	r0, #16
 80268a4:	f7fd fbd4 	bl	8024050 <malloc>
 80268a8:	4602      	mov	r2, r0
 80268aa:	61e0      	str	r0, [r4, #28]
 80268ac:	b920      	cbnz	r0, 80268b8 <_dtoa_r+0x38>
 80268ae:	4bae      	ldr	r3, [pc, #696]	; (8026b68 <_dtoa_r+0x2e8>)
 80268b0:	21ef      	movs	r1, #239	; 0xef
 80268b2:	48ae      	ldr	r0, [pc, #696]	; (8026b6c <_dtoa_r+0x2ec>)
 80268b4:	f7fd fbae 	bl	8024014 <__assert_func>
 80268b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80268bc:	6005      	str	r5, [r0, #0]
 80268be:	60c5      	str	r5, [r0, #12]
 80268c0:	69e3      	ldr	r3, [r4, #28]
 80268c2:	6819      	ldr	r1, [r3, #0]
 80268c4:	b151      	cbz	r1, 80268dc <_dtoa_r+0x5c>
 80268c6:	685a      	ldr	r2, [r3, #4]
 80268c8:	604a      	str	r2, [r1, #4]
 80268ca:	2301      	movs	r3, #1
 80268cc:	4093      	lsls	r3, r2
 80268ce:	608b      	str	r3, [r1, #8]
 80268d0:	4620      	mov	r0, r4
 80268d2:	f000 fe9b 	bl	802760c <_Bfree>
 80268d6:	69e3      	ldr	r3, [r4, #28]
 80268d8:	2200      	movs	r2, #0
 80268da:	601a      	str	r2, [r3, #0]
 80268dc:	1e3b      	subs	r3, r7, #0
 80268de:	bfbb      	ittet	lt
 80268e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80268e4:	9303      	strlt	r3, [sp, #12]
 80268e6:	2300      	movge	r3, #0
 80268e8:	2201      	movlt	r2, #1
 80268ea:	bfac      	ite	ge
 80268ec:	f8c8 3000 	strge.w	r3, [r8]
 80268f0:	f8c8 2000 	strlt.w	r2, [r8]
 80268f4:	4b9e      	ldr	r3, [pc, #632]	; (8026b70 <_dtoa_r+0x2f0>)
 80268f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80268fa:	ea33 0308 	bics.w	r3, r3, r8
 80268fe:	d11b      	bne.n	8026938 <_dtoa_r+0xb8>
 8026900:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026902:	f242 730f 	movw	r3, #9999	; 0x270f
 8026906:	6013      	str	r3, [r2, #0]
 8026908:	f3c8 0313 	ubfx	r3, r8, #0, #20
 802690c:	4333      	orrs	r3, r6
 802690e:	f000 8593 	beq.w	8027438 <_dtoa_r+0xbb8>
 8026912:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026914:	b963      	cbnz	r3, 8026930 <_dtoa_r+0xb0>
 8026916:	4b97      	ldr	r3, [pc, #604]	; (8026b74 <_dtoa_r+0x2f4>)
 8026918:	e027      	b.n	802696a <_dtoa_r+0xea>
 802691a:	4b97      	ldr	r3, [pc, #604]	; (8026b78 <_dtoa_r+0x2f8>)
 802691c:	9300      	str	r3, [sp, #0]
 802691e:	3308      	adds	r3, #8
 8026920:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8026922:	6013      	str	r3, [r2, #0]
 8026924:	9800      	ldr	r0, [sp, #0]
 8026926:	b013      	add	sp, #76	; 0x4c
 8026928:	ecbd 8b04 	vpop	{d8-d9}
 802692c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026930:	4b90      	ldr	r3, [pc, #576]	; (8026b74 <_dtoa_r+0x2f4>)
 8026932:	9300      	str	r3, [sp, #0]
 8026934:	3303      	adds	r3, #3
 8026936:	e7f3      	b.n	8026920 <_dtoa_r+0xa0>
 8026938:	ed9d 7b02 	vldr	d7, [sp, #8]
 802693c:	2200      	movs	r2, #0
 802693e:	ec51 0b17 	vmov	r0, r1, d7
 8026942:	eeb0 8a47 	vmov.f32	s16, s14
 8026946:	eef0 8a67 	vmov.f32	s17, s15
 802694a:	2300      	movs	r3, #0
 802694c:	f7da f8cc 	bl	8000ae8 <__aeabi_dcmpeq>
 8026950:	4681      	mov	r9, r0
 8026952:	b160      	cbz	r0, 802696e <_dtoa_r+0xee>
 8026954:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026956:	2301      	movs	r3, #1
 8026958:	6013      	str	r3, [r2, #0]
 802695a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802695c:	2b00      	cmp	r3, #0
 802695e:	f000 8568 	beq.w	8027432 <_dtoa_r+0xbb2>
 8026962:	4b86      	ldr	r3, [pc, #536]	; (8026b7c <_dtoa_r+0x2fc>)
 8026964:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8026966:	6013      	str	r3, [r2, #0]
 8026968:	3b01      	subs	r3, #1
 802696a:	9300      	str	r3, [sp, #0]
 802696c:	e7da      	b.n	8026924 <_dtoa_r+0xa4>
 802696e:	aa10      	add	r2, sp, #64	; 0x40
 8026970:	a911      	add	r1, sp, #68	; 0x44
 8026972:	4620      	mov	r0, r4
 8026974:	eeb0 0a48 	vmov.f32	s0, s16
 8026978:	eef0 0a68 	vmov.f32	s1, s17
 802697c:	f001 f928 	bl	8027bd0 <__d2b>
 8026980:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8026984:	4682      	mov	sl, r0
 8026986:	2d00      	cmp	r5, #0
 8026988:	d07f      	beq.n	8026a8a <_dtoa_r+0x20a>
 802698a:	ee18 3a90 	vmov	r3, s17
 802698e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8026992:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8026996:	ec51 0b18 	vmov	r0, r1, d8
 802699a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 802699e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80269a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80269a6:	4619      	mov	r1, r3
 80269a8:	2200      	movs	r2, #0
 80269aa:	4b75      	ldr	r3, [pc, #468]	; (8026b80 <_dtoa_r+0x300>)
 80269ac:	f7d9 fc7c 	bl	80002a8 <__aeabi_dsub>
 80269b0:	a367      	add	r3, pc, #412	; (adr r3, 8026b50 <_dtoa_r+0x2d0>)
 80269b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269b6:	f7d9 fe2f 	bl	8000618 <__aeabi_dmul>
 80269ba:	a367      	add	r3, pc, #412	; (adr r3, 8026b58 <_dtoa_r+0x2d8>)
 80269bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269c0:	f7d9 fc74 	bl	80002ac <__adddf3>
 80269c4:	4606      	mov	r6, r0
 80269c6:	4628      	mov	r0, r5
 80269c8:	460f      	mov	r7, r1
 80269ca:	f7d9 fdbb 	bl	8000544 <__aeabi_i2d>
 80269ce:	a364      	add	r3, pc, #400	; (adr r3, 8026b60 <_dtoa_r+0x2e0>)
 80269d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80269d4:	f7d9 fe20 	bl	8000618 <__aeabi_dmul>
 80269d8:	4602      	mov	r2, r0
 80269da:	460b      	mov	r3, r1
 80269dc:	4630      	mov	r0, r6
 80269de:	4639      	mov	r1, r7
 80269e0:	f7d9 fc64 	bl	80002ac <__adddf3>
 80269e4:	4606      	mov	r6, r0
 80269e6:	460f      	mov	r7, r1
 80269e8:	f7da f8c6 	bl	8000b78 <__aeabi_d2iz>
 80269ec:	2200      	movs	r2, #0
 80269ee:	4683      	mov	fp, r0
 80269f0:	2300      	movs	r3, #0
 80269f2:	4630      	mov	r0, r6
 80269f4:	4639      	mov	r1, r7
 80269f6:	f7da f881 	bl	8000afc <__aeabi_dcmplt>
 80269fa:	b148      	cbz	r0, 8026a10 <_dtoa_r+0x190>
 80269fc:	4658      	mov	r0, fp
 80269fe:	f7d9 fda1 	bl	8000544 <__aeabi_i2d>
 8026a02:	4632      	mov	r2, r6
 8026a04:	463b      	mov	r3, r7
 8026a06:	f7da f86f 	bl	8000ae8 <__aeabi_dcmpeq>
 8026a0a:	b908      	cbnz	r0, 8026a10 <_dtoa_r+0x190>
 8026a0c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8026a10:	f1bb 0f16 	cmp.w	fp, #22
 8026a14:	d857      	bhi.n	8026ac6 <_dtoa_r+0x246>
 8026a16:	4b5b      	ldr	r3, [pc, #364]	; (8026b84 <_dtoa_r+0x304>)
 8026a18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026a20:	ec51 0b18 	vmov	r0, r1, d8
 8026a24:	f7da f86a 	bl	8000afc <__aeabi_dcmplt>
 8026a28:	2800      	cmp	r0, #0
 8026a2a:	d04e      	beq.n	8026aca <_dtoa_r+0x24a>
 8026a2c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8026a30:	2300      	movs	r3, #0
 8026a32:	930c      	str	r3, [sp, #48]	; 0x30
 8026a34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026a36:	1b5b      	subs	r3, r3, r5
 8026a38:	1e5a      	subs	r2, r3, #1
 8026a3a:	bf45      	ittet	mi
 8026a3c:	f1c3 0301 	rsbmi	r3, r3, #1
 8026a40:	9305      	strmi	r3, [sp, #20]
 8026a42:	2300      	movpl	r3, #0
 8026a44:	2300      	movmi	r3, #0
 8026a46:	9206      	str	r2, [sp, #24]
 8026a48:	bf54      	ite	pl
 8026a4a:	9305      	strpl	r3, [sp, #20]
 8026a4c:	9306      	strmi	r3, [sp, #24]
 8026a4e:	f1bb 0f00 	cmp.w	fp, #0
 8026a52:	db3c      	blt.n	8026ace <_dtoa_r+0x24e>
 8026a54:	9b06      	ldr	r3, [sp, #24]
 8026a56:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8026a5a:	445b      	add	r3, fp
 8026a5c:	9306      	str	r3, [sp, #24]
 8026a5e:	2300      	movs	r3, #0
 8026a60:	9308      	str	r3, [sp, #32]
 8026a62:	9b07      	ldr	r3, [sp, #28]
 8026a64:	2b09      	cmp	r3, #9
 8026a66:	d868      	bhi.n	8026b3a <_dtoa_r+0x2ba>
 8026a68:	2b05      	cmp	r3, #5
 8026a6a:	bfc4      	itt	gt
 8026a6c:	3b04      	subgt	r3, #4
 8026a6e:	9307      	strgt	r3, [sp, #28]
 8026a70:	9b07      	ldr	r3, [sp, #28]
 8026a72:	f1a3 0302 	sub.w	r3, r3, #2
 8026a76:	bfcc      	ite	gt
 8026a78:	2500      	movgt	r5, #0
 8026a7a:	2501      	movle	r5, #1
 8026a7c:	2b03      	cmp	r3, #3
 8026a7e:	f200 8085 	bhi.w	8026b8c <_dtoa_r+0x30c>
 8026a82:	e8df f003 	tbb	[pc, r3]
 8026a86:	3b2e      	.short	0x3b2e
 8026a88:	5839      	.short	0x5839
 8026a8a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8026a8e:	441d      	add	r5, r3
 8026a90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8026a94:	2b20      	cmp	r3, #32
 8026a96:	bfc1      	itttt	gt
 8026a98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8026a9c:	fa08 f803 	lslgt.w	r8, r8, r3
 8026aa0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8026aa4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8026aa8:	bfd6      	itet	le
 8026aaa:	f1c3 0320 	rsble	r3, r3, #32
 8026aae:	ea48 0003 	orrgt.w	r0, r8, r3
 8026ab2:	fa06 f003 	lslle.w	r0, r6, r3
 8026ab6:	f7d9 fd35 	bl	8000524 <__aeabi_ui2d>
 8026aba:	2201      	movs	r2, #1
 8026abc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8026ac0:	3d01      	subs	r5, #1
 8026ac2:	920e      	str	r2, [sp, #56]	; 0x38
 8026ac4:	e76f      	b.n	80269a6 <_dtoa_r+0x126>
 8026ac6:	2301      	movs	r3, #1
 8026ac8:	e7b3      	b.n	8026a32 <_dtoa_r+0x1b2>
 8026aca:	900c      	str	r0, [sp, #48]	; 0x30
 8026acc:	e7b2      	b.n	8026a34 <_dtoa_r+0x1b4>
 8026ace:	9b05      	ldr	r3, [sp, #20]
 8026ad0:	eba3 030b 	sub.w	r3, r3, fp
 8026ad4:	9305      	str	r3, [sp, #20]
 8026ad6:	f1cb 0300 	rsb	r3, fp, #0
 8026ada:	9308      	str	r3, [sp, #32]
 8026adc:	2300      	movs	r3, #0
 8026ade:	930b      	str	r3, [sp, #44]	; 0x2c
 8026ae0:	e7bf      	b.n	8026a62 <_dtoa_r+0x1e2>
 8026ae2:	2300      	movs	r3, #0
 8026ae4:	9309      	str	r3, [sp, #36]	; 0x24
 8026ae6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026ae8:	2b00      	cmp	r3, #0
 8026aea:	dc52      	bgt.n	8026b92 <_dtoa_r+0x312>
 8026aec:	2301      	movs	r3, #1
 8026aee:	9301      	str	r3, [sp, #4]
 8026af0:	9304      	str	r3, [sp, #16]
 8026af2:	461a      	mov	r2, r3
 8026af4:	920a      	str	r2, [sp, #40]	; 0x28
 8026af6:	e00b      	b.n	8026b10 <_dtoa_r+0x290>
 8026af8:	2301      	movs	r3, #1
 8026afa:	e7f3      	b.n	8026ae4 <_dtoa_r+0x264>
 8026afc:	2300      	movs	r3, #0
 8026afe:	9309      	str	r3, [sp, #36]	; 0x24
 8026b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026b02:	445b      	add	r3, fp
 8026b04:	9301      	str	r3, [sp, #4]
 8026b06:	3301      	adds	r3, #1
 8026b08:	2b01      	cmp	r3, #1
 8026b0a:	9304      	str	r3, [sp, #16]
 8026b0c:	bfb8      	it	lt
 8026b0e:	2301      	movlt	r3, #1
 8026b10:	69e0      	ldr	r0, [r4, #28]
 8026b12:	2100      	movs	r1, #0
 8026b14:	2204      	movs	r2, #4
 8026b16:	f102 0614 	add.w	r6, r2, #20
 8026b1a:	429e      	cmp	r6, r3
 8026b1c:	d93d      	bls.n	8026b9a <_dtoa_r+0x31a>
 8026b1e:	6041      	str	r1, [r0, #4]
 8026b20:	4620      	mov	r0, r4
 8026b22:	f000 fd33 	bl	802758c <_Balloc>
 8026b26:	9000      	str	r0, [sp, #0]
 8026b28:	2800      	cmp	r0, #0
 8026b2a:	d139      	bne.n	8026ba0 <_dtoa_r+0x320>
 8026b2c:	4b16      	ldr	r3, [pc, #88]	; (8026b88 <_dtoa_r+0x308>)
 8026b2e:	4602      	mov	r2, r0
 8026b30:	f240 11af 	movw	r1, #431	; 0x1af
 8026b34:	e6bd      	b.n	80268b2 <_dtoa_r+0x32>
 8026b36:	2301      	movs	r3, #1
 8026b38:	e7e1      	b.n	8026afe <_dtoa_r+0x27e>
 8026b3a:	2501      	movs	r5, #1
 8026b3c:	2300      	movs	r3, #0
 8026b3e:	9307      	str	r3, [sp, #28]
 8026b40:	9509      	str	r5, [sp, #36]	; 0x24
 8026b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8026b46:	9301      	str	r3, [sp, #4]
 8026b48:	9304      	str	r3, [sp, #16]
 8026b4a:	2200      	movs	r2, #0
 8026b4c:	2312      	movs	r3, #18
 8026b4e:	e7d1      	b.n	8026af4 <_dtoa_r+0x274>
 8026b50:	636f4361 	.word	0x636f4361
 8026b54:	3fd287a7 	.word	0x3fd287a7
 8026b58:	8b60c8b3 	.word	0x8b60c8b3
 8026b5c:	3fc68a28 	.word	0x3fc68a28
 8026b60:	509f79fb 	.word	0x509f79fb
 8026b64:	3fd34413 	.word	0x3fd34413
 8026b68:	0802e57c 	.word	0x0802e57c
 8026b6c:	0802ea5d 	.word	0x0802ea5d
 8026b70:	7ff00000 	.word	0x7ff00000
 8026b74:	0802ea59 	.word	0x0802ea59
 8026b78:	0802ea50 	.word	0x0802ea50
 8026b7c:	0802ec4e 	.word	0x0802ec4e
 8026b80:	3ff80000 	.word	0x3ff80000
 8026b84:	0802eb48 	.word	0x0802eb48
 8026b88:	0802eab5 	.word	0x0802eab5
 8026b8c:	2301      	movs	r3, #1
 8026b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8026b90:	e7d7      	b.n	8026b42 <_dtoa_r+0x2c2>
 8026b92:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026b94:	9301      	str	r3, [sp, #4]
 8026b96:	9304      	str	r3, [sp, #16]
 8026b98:	e7ba      	b.n	8026b10 <_dtoa_r+0x290>
 8026b9a:	3101      	adds	r1, #1
 8026b9c:	0052      	lsls	r2, r2, #1
 8026b9e:	e7ba      	b.n	8026b16 <_dtoa_r+0x296>
 8026ba0:	69e3      	ldr	r3, [r4, #28]
 8026ba2:	9a00      	ldr	r2, [sp, #0]
 8026ba4:	601a      	str	r2, [r3, #0]
 8026ba6:	9b04      	ldr	r3, [sp, #16]
 8026ba8:	2b0e      	cmp	r3, #14
 8026baa:	f200 80a8 	bhi.w	8026cfe <_dtoa_r+0x47e>
 8026bae:	2d00      	cmp	r5, #0
 8026bb0:	f000 80a5 	beq.w	8026cfe <_dtoa_r+0x47e>
 8026bb4:	f1bb 0f00 	cmp.w	fp, #0
 8026bb8:	dd38      	ble.n	8026c2c <_dtoa_r+0x3ac>
 8026bba:	4bc0      	ldr	r3, [pc, #768]	; (8026ebc <_dtoa_r+0x63c>)
 8026bbc:	f00b 020f 	and.w	r2, fp, #15
 8026bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026bc4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8026bc8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8026bcc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8026bd0:	d019      	beq.n	8026c06 <_dtoa_r+0x386>
 8026bd2:	4bbb      	ldr	r3, [pc, #748]	; (8026ec0 <_dtoa_r+0x640>)
 8026bd4:	ec51 0b18 	vmov	r0, r1, d8
 8026bd8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8026bdc:	f7d9 fe46 	bl	800086c <__aeabi_ddiv>
 8026be0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026be4:	f008 080f 	and.w	r8, r8, #15
 8026be8:	2503      	movs	r5, #3
 8026bea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8026ec0 <_dtoa_r+0x640>
 8026bee:	f1b8 0f00 	cmp.w	r8, #0
 8026bf2:	d10a      	bne.n	8026c0a <_dtoa_r+0x38a>
 8026bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8026bf8:	4632      	mov	r2, r6
 8026bfa:	463b      	mov	r3, r7
 8026bfc:	f7d9 fe36 	bl	800086c <__aeabi_ddiv>
 8026c00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026c04:	e02b      	b.n	8026c5e <_dtoa_r+0x3de>
 8026c06:	2502      	movs	r5, #2
 8026c08:	e7ef      	b.n	8026bea <_dtoa_r+0x36a>
 8026c0a:	f018 0f01 	tst.w	r8, #1
 8026c0e:	d008      	beq.n	8026c22 <_dtoa_r+0x3a2>
 8026c10:	4630      	mov	r0, r6
 8026c12:	4639      	mov	r1, r7
 8026c14:	e9d9 2300 	ldrd	r2, r3, [r9]
 8026c18:	f7d9 fcfe 	bl	8000618 <__aeabi_dmul>
 8026c1c:	3501      	adds	r5, #1
 8026c1e:	4606      	mov	r6, r0
 8026c20:	460f      	mov	r7, r1
 8026c22:	ea4f 0868 	mov.w	r8, r8, asr #1
 8026c26:	f109 0908 	add.w	r9, r9, #8
 8026c2a:	e7e0      	b.n	8026bee <_dtoa_r+0x36e>
 8026c2c:	f000 809f 	beq.w	8026d6e <_dtoa_r+0x4ee>
 8026c30:	f1cb 0600 	rsb	r6, fp, #0
 8026c34:	4ba1      	ldr	r3, [pc, #644]	; (8026ebc <_dtoa_r+0x63c>)
 8026c36:	4fa2      	ldr	r7, [pc, #648]	; (8026ec0 <_dtoa_r+0x640>)
 8026c38:	f006 020f 	and.w	r2, r6, #15
 8026c3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026c44:	ec51 0b18 	vmov	r0, r1, d8
 8026c48:	f7d9 fce6 	bl	8000618 <__aeabi_dmul>
 8026c4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026c50:	1136      	asrs	r6, r6, #4
 8026c52:	2300      	movs	r3, #0
 8026c54:	2502      	movs	r5, #2
 8026c56:	2e00      	cmp	r6, #0
 8026c58:	d17e      	bne.n	8026d58 <_dtoa_r+0x4d8>
 8026c5a:	2b00      	cmp	r3, #0
 8026c5c:	d1d0      	bne.n	8026c00 <_dtoa_r+0x380>
 8026c5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8026c60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8026c64:	2b00      	cmp	r3, #0
 8026c66:	f000 8084 	beq.w	8026d72 <_dtoa_r+0x4f2>
 8026c6a:	4b96      	ldr	r3, [pc, #600]	; (8026ec4 <_dtoa_r+0x644>)
 8026c6c:	2200      	movs	r2, #0
 8026c6e:	4640      	mov	r0, r8
 8026c70:	4649      	mov	r1, r9
 8026c72:	f7d9 ff43 	bl	8000afc <__aeabi_dcmplt>
 8026c76:	2800      	cmp	r0, #0
 8026c78:	d07b      	beq.n	8026d72 <_dtoa_r+0x4f2>
 8026c7a:	9b04      	ldr	r3, [sp, #16]
 8026c7c:	2b00      	cmp	r3, #0
 8026c7e:	d078      	beq.n	8026d72 <_dtoa_r+0x4f2>
 8026c80:	9b01      	ldr	r3, [sp, #4]
 8026c82:	2b00      	cmp	r3, #0
 8026c84:	dd39      	ble.n	8026cfa <_dtoa_r+0x47a>
 8026c86:	4b90      	ldr	r3, [pc, #576]	; (8026ec8 <_dtoa_r+0x648>)
 8026c88:	2200      	movs	r2, #0
 8026c8a:	4640      	mov	r0, r8
 8026c8c:	4649      	mov	r1, r9
 8026c8e:	f7d9 fcc3 	bl	8000618 <__aeabi_dmul>
 8026c92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026c96:	9e01      	ldr	r6, [sp, #4]
 8026c98:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8026c9c:	3501      	adds	r5, #1
 8026c9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8026ca2:	4628      	mov	r0, r5
 8026ca4:	f7d9 fc4e 	bl	8000544 <__aeabi_i2d>
 8026ca8:	4642      	mov	r2, r8
 8026caa:	464b      	mov	r3, r9
 8026cac:	f7d9 fcb4 	bl	8000618 <__aeabi_dmul>
 8026cb0:	4b86      	ldr	r3, [pc, #536]	; (8026ecc <_dtoa_r+0x64c>)
 8026cb2:	2200      	movs	r2, #0
 8026cb4:	f7d9 fafa 	bl	80002ac <__adddf3>
 8026cb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8026cbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8026cc0:	9303      	str	r3, [sp, #12]
 8026cc2:	2e00      	cmp	r6, #0
 8026cc4:	d158      	bne.n	8026d78 <_dtoa_r+0x4f8>
 8026cc6:	4b82      	ldr	r3, [pc, #520]	; (8026ed0 <_dtoa_r+0x650>)
 8026cc8:	2200      	movs	r2, #0
 8026cca:	4640      	mov	r0, r8
 8026ccc:	4649      	mov	r1, r9
 8026cce:	f7d9 faeb 	bl	80002a8 <__aeabi_dsub>
 8026cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8026cd6:	4680      	mov	r8, r0
 8026cd8:	4689      	mov	r9, r1
 8026cda:	f7d9 ff2d 	bl	8000b38 <__aeabi_dcmpgt>
 8026cde:	2800      	cmp	r0, #0
 8026ce0:	f040 8296 	bne.w	8027210 <_dtoa_r+0x990>
 8026ce4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8026ce8:	4640      	mov	r0, r8
 8026cea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8026cee:	4649      	mov	r1, r9
 8026cf0:	f7d9 ff04 	bl	8000afc <__aeabi_dcmplt>
 8026cf4:	2800      	cmp	r0, #0
 8026cf6:	f040 8289 	bne.w	802720c <_dtoa_r+0x98c>
 8026cfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8026cfe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8026d00:	2b00      	cmp	r3, #0
 8026d02:	f2c0 814e 	blt.w	8026fa2 <_dtoa_r+0x722>
 8026d06:	f1bb 0f0e 	cmp.w	fp, #14
 8026d0a:	f300 814a 	bgt.w	8026fa2 <_dtoa_r+0x722>
 8026d0e:	4b6b      	ldr	r3, [pc, #428]	; (8026ebc <_dtoa_r+0x63c>)
 8026d10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026d14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8026d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026d1a:	2b00      	cmp	r3, #0
 8026d1c:	f280 80dc 	bge.w	8026ed8 <_dtoa_r+0x658>
 8026d20:	9b04      	ldr	r3, [sp, #16]
 8026d22:	2b00      	cmp	r3, #0
 8026d24:	f300 80d8 	bgt.w	8026ed8 <_dtoa_r+0x658>
 8026d28:	f040 826f 	bne.w	802720a <_dtoa_r+0x98a>
 8026d2c:	4b68      	ldr	r3, [pc, #416]	; (8026ed0 <_dtoa_r+0x650>)
 8026d2e:	2200      	movs	r2, #0
 8026d30:	4640      	mov	r0, r8
 8026d32:	4649      	mov	r1, r9
 8026d34:	f7d9 fc70 	bl	8000618 <__aeabi_dmul>
 8026d38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8026d3c:	f7d9 fef2 	bl	8000b24 <__aeabi_dcmpge>
 8026d40:	9e04      	ldr	r6, [sp, #16]
 8026d42:	4637      	mov	r7, r6
 8026d44:	2800      	cmp	r0, #0
 8026d46:	f040 8245 	bne.w	80271d4 <_dtoa_r+0x954>
 8026d4a:	9d00      	ldr	r5, [sp, #0]
 8026d4c:	2331      	movs	r3, #49	; 0x31
 8026d4e:	f805 3b01 	strb.w	r3, [r5], #1
 8026d52:	f10b 0b01 	add.w	fp, fp, #1
 8026d56:	e241      	b.n	80271dc <_dtoa_r+0x95c>
 8026d58:	07f2      	lsls	r2, r6, #31
 8026d5a:	d505      	bpl.n	8026d68 <_dtoa_r+0x4e8>
 8026d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026d60:	f7d9 fc5a 	bl	8000618 <__aeabi_dmul>
 8026d64:	3501      	adds	r5, #1
 8026d66:	2301      	movs	r3, #1
 8026d68:	1076      	asrs	r6, r6, #1
 8026d6a:	3708      	adds	r7, #8
 8026d6c:	e773      	b.n	8026c56 <_dtoa_r+0x3d6>
 8026d6e:	2502      	movs	r5, #2
 8026d70:	e775      	b.n	8026c5e <_dtoa_r+0x3de>
 8026d72:	9e04      	ldr	r6, [sp, #16]
 8026d74:	465f      	mov	r7, fp
 8026d76:	e792      	b.n	8026c9e <_dtoa_r+0x41e>
 8026d78:	9900      	ldr	r1, [sp, #0]
 8026d7a:	4b50      	ldr	r3, [pc, #320]	; (8026ebc <_dtoa_r+0x63c>)
 8026d7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026d80:	4431      	add	r1, r6
 8026d82:	9102      	str	r1, [sp, #8]
 8026d84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8026d86:	eeb0 9a47 	vmov.f32	s18, s14
 8026d8a:	eef0 9a67 	vmov.f32	s19, s15
 8026d8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8026d92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8026d96:	2900      	cmp	r1, #0
 8026d98:	d044      	beq.n	8026e24 <_dtoa_r+0x5a4>
 8026d9a:	494e      	ldr	r1, [pc, #312]	; (8026ed4 <_dtoa_r+0x654>)
 8026d9c:	2000      	movs	r0, #0
 8026d9e:	f7d9 fd65 	bl	800086c <__aeabi_ddiv>
 8026da2:	ec53 2b19 	vmov	r2, r3, d9
 8026da6:	f7d9 fa7f 	bl	80002a8 <__aeabi_dsub>
 8026daa:	9d00      	ldr	r5, [sp, #0]
 8026dac:	ec41 0b19 	vmov	d9, r0, r1
 8026db0:	4649      	mov	r1, r9
 8026db2:	4640      	mov	r0, r8
 8026db4:	f7d9 fee0 	bl	8000b78 <__aeabi_d2iz>
 8026db8:	4606      	mov	r6, r0
 8026dba:	f7d9 fbc3 	bl	8000544 <__aeabi_i2d>
 8026dbe:	4602      	mov	r2, r0
 8026dc0:	460b      	mov	r3, r1
 8026dc2:	4640      	mov	r0, r8
 8026dc4:	4649      	mov	r1, r9
 8026dc6:	f7d9 fa6f 	bl	80002a8 <__aeabi_dsub>
 8026dca:	3630      	adds	r6, #48	; 0x30
 8026dcc:	f805 6b01 	strb.w	r6, [r5], #1
 8026dd0:	ec53 2b19 	vmov	r2, r3, d9
 8026dd4:	4680      	mov	r8, r0
 8026dd6:	4689      	mov	r9, r1
 8026dd8:	f7d9 fe90 	bl	8000afc <__aeabi_dcmplt>
 8026ddc:	2800      	cmp	r0, #0
 8026dde:	d164      	bne.n	8026eaa <_dtoa_r+0x62a>
 8026de0:	4642      	mov	r2, r8
 8026de2:	464b      	mov	r3, r9
 8026de4:	4937      	ldr	r1, [pc, #220]	; (8026ec4 <_dtoa_r+0x644>)
 8026de6:	2000      	movs	r0, #0
 8026de8:	f7d9 fa5e 	bl	80002a8 <__aeabi_dsub>
 8026dec:	ec53 2b19 	vmov	r2, r3, d9
 8026df0:	f7d9 fe84 	bl	8000afc <__aeabi_dcmplt>
 8026df4:	2800      	cmp	r0, #0
 8026df6:	f040 80b6 	bne.w	8026f66 <_dtoa_r+0x6e6>
 8026dfa:	9b02      	ldr	r3, [sp, #8]
 8026dfc:	429d      	cmp	r5, r3
 8026dfe:	f43f af7c 	beq.w	8026cfa <_dtoa_r+0x47a>
 8026e02:	4b31      	ldr	r3, [pc, #196]	; (8026ec8 <_dtoa_r+0x648>)
 8026e04:	ec51 0b19 	vmov	r0, r1, d9
 8026e08:	2200      	movs	r2, #0
 8026e0a:	f7d9 fc05 	bl	8000618 <__aeabi_dmul>
 8026e0e:	4b2e      	ldr	r3, [pc, #184]	; (8026ec8 <_dtoa_r+0x648>)
 8026e10:	ec41 0b19 	vmov	d9, r0, r1
 8026e14:	2200      	movs	r2, #0
 8026e16:	4640      	mov	r0, r8
 8026e18:	4649      	mov	r1, r9
 8026e1a:	f7d9 fbfd 	bl	8000618 <__aeabi_dmul>
 8026e1e:	4680      	mov	r8, r0
 8026e20:	4689      	mov	r9, r1
 8026e22:	e7c5      	b.n	8026db0 <_dtoa_r+0x530>
 8026e24:	ec51 0b17 	vmov	r0, r1, d7
 8026e28:	f7d9 fbf6 	bl	8000618 <__aeabi_dmul>
 8026e2c:	9b02      	ldr	r3, [sp, #8]
 8026e2e:	9d00      	ldr	r5, [sp, #0]
 8026e30:	930f      	str	r3, [sp, #60]	; 0x3c
 8026e32:	ec41 0b19 	vmov	d9, r0, r1
 8026e36:	4649      	mov	r1, r9
 8026e38:	4640      	mov	r0, r8
 8026e3a:	f7d9 fe9d 	bl	8000b78 <__aeabi_d2iz>
 8026e3e:	4606      	mov	r6, r0
 8026e40:	f7d9 fb80 	bl	8000544 <__aeabi_i2d>
 8026e44:	3630      	adds	r6, #48	; 0x30
 8026e46:	4602      	mov	r2, r0
 8026e48:	460b      	mov	r3, r1
 8026e4a:	4640      	mov	r0, r8
 8026e4c:	4649      	mov	r1, r9
 8026e4e:	f7d9 fa2b 	bl	80002a8 <__aeabi_dsub>
 8026e52:	f805 6b01 	strb.w	r6, [r5], #1
 8026e56:	9b02      	ldr	r3, [sp, #8]
 8026e58:	429d      	cmp	r5, r3
 8026e5a:	4680      	mov	r8, r0
 8026e5c:	4689      	mov	r9, r1
 8026e5e:	f04f 0200 	mov.w	r2, #0
 8026e62:	d124      	bne.n	8026eae <_dtoa_r+0x62e>
 8026e64:	4b1b      	ldr	r3, [pc, #108]	; (8026ed4 <_dtoa_r+0x654>)
 8026e66:	ec51 0b19 	vmov	r0, r1, d9
 8026e6a:	f7d9 fa1f 	bl	80002ac <__adddf3>
 8026e6e:	4602      	mov	r2, r0
 8026e70:	460b      	mov	r3, r1
 8026e72:	4640      	mov	r0, r8
 8026e74:	4649      	mov	r1, r9
 8026e76:	f7d9 fe5f 	bl	8000b38 <__aeabi_dcmpgt>
 8026e7a:	2800      	cmp	r0, #0
 8026e7c:	d173      	bne.n	8026f66 <_dtoa_r+0x6e6>
 8026e7e:	ec53 2b19 	vmov	r2, r3, d9
 8026e82:	4914      	ldr	r1, [pc, #80]	; (8026ed4 <_dtoa_r+0x654>)
 8026e84:	2000      	movs	r0, #0
 8026e86:	f7d9 fa0f 	bl	80002a8 <__aeabi_dsub>
 8026e8a:	4602      	mov	r2, r0
 8026e8c:	460b      	mov	r3, r1
 8026e8e:	4640      	mov	r0, r8
 8026e90:	4649      	mov	r1, r9
 8026e92:	f7d9 fe33 	bl	8000afc <__aeabi_dcmplt>
 8026e96:	2800      	cmp	r0, #0
 8026e98:	f43f af2f 	beq.w	8026cfa <_dtoa_r+0x47a>
 8026e9c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026e9e:	1e6b      	subs	r3, r5, #1
 8026ea0:	930f      	str	r3, [sp, #60]	; 0x3c
 8026ea2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8026ea6:	2b30      	cmp	r3, #48	; 0x30
 8026ea8:	d0f8      	beq.n	8026e9c <_dtoa_r+0x61c>
 8026eaa:	46bb      	mov	fp, r7
 8026eac:	e04a      	b.n	8026f44 <_dtoa_r+0x6c4>
 8026eae:	4b06      	ldr	r3, [pc, #24]	; (8026ec8 <_dtoa_r+0x648>)
 8026eb0:	f7d9 fbb2 	bl	8000618 <__aeabi_dmul>
 8026eb4:	4680      	mov	r8, r0
 8026eb6:	4689      	mov	r9, r1
 8026eb8:	e7bd      	b.n	8026e36 <_dtoa_r+0x5b6>
 8026eba:	bf00      	nop
 8026ebc:	0802eb48 	.word	0x0802eb48
 8026ec0:	0802eb20 	.word	0x0802eb20
 8026ec4:	3ff00000 	.word	0x3ff00000
 8026ec8:	40240000 	.word	0x40240000
 8026ecc:	401c0000 	.word	0x401c0000
 8026ed0:	40140000 	.word	0x40140000
 8026ed4:	3fe00000 	.word	0x3fe00000
 8026ed8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8026edc:	9d00      	ldr	r5, [sp, #0]
 8026ede:	4642      	mov	r2, r8
 8026ee0:	464b      	mov	r3, r9
 8026ee2:	4630      	mov	r0, r6
 8026ee4:	4639      	mov	r1, r7
 8026ee6:	f7d9 fcc1 	bl	800086c <__aeabi_ddiv>
 8026eea:	f7d9 fe45 	bl	8000b78 <__aeabi_d2iz>
 8026eee:	9001      	str	r0, [sp, #4]
 8026ef0:	f7d9 fb28 	bl	8000544 <__aeabi_i2d>
 8026ef4:	4642      	mov	r2, r8
 8026ef6:	464b      	mov	r3, r9
 8026ef8:	f7d9 fb8e 	bl	8000618 <__aeabi_dmul>
 8026efc:	4602      	mov	r2, r0
 8026efe:	460b      	mov	r3, r1
 8026f00:	4630      	mov	r0, r6
 8026f02:	4639      	mov	r1, r7
 8026f04:	f7d9 f9d0 	bl	80002a8 <__aeabi_dsub>
 8026f08:	9e01      	ldr	r6, [sp, #4]
 8026f0a:	9f04      	ldr	r7, [sp, #16]
 8026f0c:	3630      	adds	r6, #48	; 0x30
 8026f0e:	f805 6b01 	strb.w	r6, [r5], #1
 8026f12:	9e00      	ldr	r6, [sp, #0]
 8026f14:	1bae      	subs	r6, r5, r6
 8026f16:	42b7      	cmp	r7, r6
 8026f18:	4602      	mov	r2, r0
 8026f1a:	460b      	mov	r3, r1
 8026f1c:	d134      	bne.n	8026f88 <_dtoa_r+0x708>
 8026f1e:	f7d9 f9c5 	bl	80002ac <__adddf3>
 8026f22:	4642      	mov	r2, r8
 8026f24:	464b      	mov	r3, r9
 8026f26:	4606      	mov	r6, r0
 8026f28:	460f      	mov	r7, r1
 8026f2a:	f7d9 fe05 	bl	8000b38 <__aeabi_dcmpgt>
 8026f2e:	b9c8      	cbnz	r0, 8026f64 <_dtoa_r+0x6e4>
 8026f30:	4642      	mov	r2, r8
 8026f32:	464b      	mov	r3, r9
 8026f34:	4630      	mov	r0, r6
 8026f36:	4639      	mov	r1, r7
 8026f38:	f7d9 fdd6 	bl	8000ae8 <__aeabi_dcmpeq>
 8026f3c:	b110      	cbz	r0, 8026f44 <_dtoa_r+0x6c4>
 8026f3e:	9b01      	ldr	r3, [sp, #4]
 8026f40:	07db      	lsls	r3, r3, #31
 8026f42:	d40f      	bmi.n	8026f64 <_dtoa_r+0x6e4>
 8026f44:	4651      	mov	r1, sl
 8026f46:	4620      	mov	r0, r4
 8026f48:	f000 fb60 	bl	802760c <_Bfree>
 8026f4c:	2300      	movs	r3, #0
 8026f4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8026f50:	702b      	strb	r3, [r5, #0]
 8026f52:	f10b 0301 	add.w	r3, fp, #1
 8026f56:	6013      	str	r3, [r2, #0]
 8026f58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026f5a:	2b00      	cmp	r3, #0
 8026f5c:	f43f ace2 	beq.w	8026924 <_dtoa_r+0xa4>
 8026f60:	601d      	str	r5, [r3, #0]
 8026f62:	e4df      	b.n	8026924 <_dtoa_r+0xa4>
 8026f64:	465f      	mov	r7, fp
 8026f66:	462b      	mov	r3, r5
 8026f68:	461d      	mov	r5, r3
 8026f6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026f6e:	2a39      	cmp	r2, #57	; 0x39
 8026f70:	d106      	bne.n	8026f80 <_dtoa_r+0x700>
 8026f72:	9a00      	ldr	r2, [sp, #0]
 8026f74:	429a      	cmp	r2, r3
 8026f76:	d1f7      	bne.n	8026f68 <_dtoa_r+0x6e8>
 8026f78:	9900      	ldr	r1, [sp, #0]
 8026f7a:	2230      	movs	r2, #48	; 0x30
 8026f7c:	3701      	adds	r7, #1
 8026f7e:	700a      	strb	r2, [r1, #0]
 8026f80:	781a      	ldrb	r2, [r3, #0]
 8026f82:	3201      	adds	r2, #1
 8026f84:	701a      	strb	r2, [r3, #0]
 8026f86:	e790      	b.n	8026eaa <_dtoa_r+0x62a>
 8026f88:	4ba3      	ldr	r3, [pc, #652]	; (8027218 <_dtoa_r+0x998>)
 8026f8a:	2200      	movs	r2, #0
 8026f8c:	f7d9 fb44 	bl	8000618 <__aeabi_dmul>
 8026f90:	2200      	movs	r2, #0
 8026f92:	2300      	movs	r3, #0
 8026f94:	4606      	mov	r6, r0
 8026f96:	460f      	mov	r7, r1
 8026f98:	f7d9 fda6 	bl	8000ae8 <__aeabi_dcmpeq>
 8026f9c:	2800      	cmp	r0, #0
 8026f9e:	d09e      	beq.n	8026ede <_dtoa_r+0x65e>
 8026fa0:	e7d0      	b.n	8026f44 <_dtoa_r+0x6c4>
 8026fa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026fa4:	2a00      	cmp	r2, #0
 8026fa6:	f000 80ca 	beq.w	802713e <_dtoa_r+0x8be>
 8026faa:	9a07      	ldr	r2, [sp, #28]
 8026fac:	2a01      	cmp	r2, #1
 8026fae:	f300 80ad 	bgt.w	802710c <_dtoa_r+0x88c>
 8026fb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026fb4:	2a00      	cmp	r2, #0
 8026fb6:	f000 80a5 	beq.w	8027104 <_dtoa_r+0x884>
 8026fba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8026fbe:	9e08      	ldr	r6, [sp, #32]
 8026fc0:	9d05      	ldr	r5, [sp, #20]
 8026fc2:	9a05      	ldr	r2, [sp, #20]
 8026fc4:	441a      	add	r2, r3
 8026fc6:	9205      	str	r2, [sp, #20]
 8026fc8:	9a06      	ldr	r2, [sp, #24]
 8026fca:	2101      	movs	r1, #1
 8026fcc:	441a      	add	r2, r3
 8026fce:	4620      	mov	r0, r4
 8026fd0:	9206      	str	r2, [sp, #24]
 8026fd2:	f000 fbd1 	bl	8027778 <__i2b>
 8026fd6:	4607      	mov	r7, r0
 8026fd8:	b165      	cbz	r5, 8026ff4 <_dtoa_r+0x774>
 8026fda:	9b06      	ldr	r3, [sp, #24]
 8026fdc:	2b00      	cmp	r3, #0
 8026fde:	dd09      	ble.n	8026ff4 <_dtoa_r+0x774>
 8026fe0:	42ab      	cmp	r3, r5
 8026fe2:	9a05      	ldr	r2, [sp, #20]
 8026fe4:	bfa8      	it	ge
 8026fe6:	462b      	movge	r3, r5
 8026fe8:	1ad2      	subs	r2, r2, r3
 8026fea:	9205      	str	r2, [sp, #20]
 8026fec:	9a06      	ldr	r2, [sp, #24]
 8026fee:	1aed      	subs	r5, r5, r3
 8026ff0:	1ad3      	subs	r3, r2, r3
 8026ff2:	9306      	str	r3, [sp, #24]
 8026ff4:	9b08      	ldr	r3, [sp, #32]
 8026ff6:	b1f3      	cbz	r3, 8027036 <_dtoa_r+0x7b6>
 8026ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ffa:	2b00      	cmp	r3, #0
 8026ffc:	f000 80a3 	beq.w	8027146 <_dtoa_r+0x8c6>
 8027000:	2e00      	cmp	r6, #0
 8027002:	dd10      	ble.n	8027026 <_dtoa_r+0x7a6>
 8027004:	4639      	mov	r1, r7
 8027006:	4632      	mov	r2, r6
 8027008:	4620      	mov	r0, r4
 802700a:	f000 fc75 	bl	80278f8 <__pow5mult>
 802700e:	4652      	mov	r2, sl
 8027010:	4601      	mov	r1, r0
 8027012:	4607      	mov	r7, r0
 8027014:	4620      	mov	r0, r4
 8027016:	f000 fbc5 	bl	80277a4 <__multiply>
 802701a:	4651      	mov	r1, sl
 802701c:	4680      	mov	r8, r0
 802701e:	4620      	mov	r0, r4
 8027020:	f000 faf4 	bl	802760c <_Bfree>
 8027024:	46c2      	mov	sl, r8
 8027026:	9b08      	ldr	r3, [sp, #32]
 8027028:	1b9a      	subs	r2, r3, r6
 802702a:	d004      	beq.n	8027036 <_dtoa_r+0x7b6>
 802702c:	4651      	mov	r1, sl
 802702e:	4620      	mov	r0, r4
 8027030:	f000 fc62 	bl	80278f8 <__pow5mult>
 8027034:	4682      	mov	sl, r0
 8027036:	2101      	movs	r1, #1
 8027038:	4620      	mov	r0, r4
 802703a:	f000 fb9d 	bl	8027778 <__i2b>
 802703e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8027040:	2b00      	cmp	r3, #0
 8027042:	4606      	mov	r6, r0
 8027044:	f340 8081 	ble.w	802714a <_dtoa_r+0x8ca>
 8027048:	461a      	mov	r2, r3
 802704a:	4601      	mov	r1, r0
 802704c:	4620      	mov	r0, r4
 802704e:	f000 fc53 	bl	80278f8 <__pow5mult>
 8027052:	9b07      	ldr	r3, [sp, #28]
 8027054:	2b01      	cmp	r3, #1
 8027056:	4606      	mov	r6, r0
 8027058:	dd7a      	ble.n	8027150 <_dtoa_r+0x8d0>
 802705a:	f04f 0800 	mov.w	r8, #0
 802705e:	6933      	ldr	r3, [r6, #16]
 8027060:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8027064:	6918      	ldr	r0, [r3, #16]
 8027066:	f000 fb39 	bl	80276dc <__hi0bits>
 802706a:	f1c0 0020 	rsb	r0, r0, #32
 802706e:	9b06      	ldr	r3, [sp, #24]
 8027070:	4418      	add	r0, r3
 8027072:	f010 001f 	ands.w	r0, r0, #31
 8027076:	f000 8094 	beq.w	80271a2 <_dtoa_r+0x922>
 802707a:	f1c0 0320 	rsb	r3, r0, #32
 802707e:	2b04      	cmp	r3, #4
 8027080:	f340 8085 	ble.w	802718e <_dtoa_r+0x90e>
 8027084:	9b05      	ldr	r3, [sp, #20]
 8027086:	f1c0 001c 	rsb	r0, r0, #28
 802708a:	4403      	add	r3, r0
 802708c:	9305      	str	r3, [sp, #20]
 802708e:	9b06      	ldr	r3, [sp, #24]
 8027090:	4403      	add	r3, r0
 8027092:	4405      	add	r5, r0
 8027094:	9306      	str	r3, [sp, #24]
 8027096:	9b05      	ldr	r3, [sp, #20]
 8027098:	2b00      	cmp	r3, #0
 802709a:	dd05      	ble.n	80270a8 <_dtoa_r+0x828>
 802709c:	4651      	mov	r1, sl
 802709e:	461a      	mov	r2, r3
 80270a0:	4620      	mov	r0, r4
 80270a2:	f000 fc83 	bl	80279ac <__lshift>
 80270a6:	4682      	mov	sl, r0
 80270a8:	9b06      	ldr	r3, [sp, #24]
 80270aa:	2b00      	cmp	r3, #0
 80270ac:	dd05      	ble.n	80270ba <_dtoa_r+0x83a>
 80270ae:	4631      	mov	r1, r6
 80270b0:	461a      	mov	r2, r3
 80270b2:	4620      	mov	r0, r4
 80270b4:	f000 fc7a 	bl	80279ac <__lshift>
 80270b8:	4606      	mov	r6, r0
 80270ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80270bc:	2b00      	cmp	r3, #0
 80270be:	d072      	beq.n	80271a6 <_dtoa_r+0x926>
 80270c0:	4631      	mov	r1, r6
 80270c2:	4650      	mov	r0, sl
 80270c4:	f000 fcde 	bl	8027a84 <__mcmp>
 80270c8:	2800      	cmp	r0, #0
 80270ca:	da6c      	bge.n	80271a6 <_dtoa_r+0x926>
 80270cc:	2300      	movs	r3, #0
 80270ce:	4651      	mov	r1, sl
 80270d0:	220a      	movs	r2, #10
 80270d2:	4620      	mov	r0, r4
 80270d4:	f000 fabc 	bl	8027650 <__multadd>
 80270d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80270da:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80270de:	4682      	mov	sl, r0
 80270e0:	2b00      	cmp	r3, #0
 80270e2:	f000 81b0 	beq.w	8027446 <_dtoa_r+0xbc6>
 80270e6:	2300      	movs	r3, #0
 80270e8:	4639      	mov	r1, r7
 80270ea:	220a      	movs	r2, #10
 80270ec:	4620      	mov	r0, r4
 80270ee:	f000 faaf 	bl	8027650 <__multadd>
 80270f2:	9b01      	ldr	r3, [sp, #4]
 80270f4:	2b00      	cmp	r3, #0
 80270f6:	4607      	mov	r7, r0
 80270f8:	f300 8096 	bgt.w	8027228 <_dtoa_r+0x9a8>
 80270fc:	9b07      	ldr	r3, [sp, #28]
 80270fe:	2b02      	cmp	r3, #2
 8027100:	dc59      	bgt.n	80271b6 <_dtoa_r+0x936>
 8027102:	e091      	b.n	8027228 <_dtoa_r+0x9a8>
 8027104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8027106:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802710a:	e758      	b.n	8026fbe <_dtoa_r+0x73e>
 802710c:	9b04      	ldr	r3, [sp, #16]
 802710e:	1e5e      	subs	r6, r3, #1
 8027110:	9b08      	ldr	r3, [sp, #32]
 8027112:	42b3      	cmp	r3, r6
 8027114:	bfbf      	itttt	lt
 8027116:	9b08      	ldrlt	r3, [sp, #32]
 8027118:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802711a:	9608      	strlt	r6, [sp, #32]
 802711c:	1af3      	sublt	r3, r6, r3
 802711e:	bfb4      	ite	lt
 8027120:	18d2      	addlt	r2, r2, r3
 8027122:	1b9e      	subge	r6, r3, r6
 8027124:	9b04      	ldr	r3, [sp, #16]
 8027126:	bfbc      	itt	lt
 8027128:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802712a:	2600      	movlt	r6, #0
 802712c:	2b00      	cmp	r3, #0
 802712e:	bfb7      	itett	lt
 8027130:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8027134:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8027138:	1a9d      	sublt	r5, r3, r2
 802713a:	2300      	movlt	r3, #0
 802713c:	e741      	b.n	8026fc2 <_dtoa_r+0x742>
 802713e:	9e08      	ldr	r6, [sp, #32]
 8027140:	9d05      	ldr	r5, [sp, #20]
 8027142:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8027144:	e748      	b.n	8026fd8 <_dtoa_r+0x758>
 8027146:	9a08      	ldr	r2, [sp, #32]
 8027148:	e770      	b.n	802702c <_dtoa_r+0x7ac>
 802714a:	9b07      	ldr	r3, [sp, #28]
 802714c:	2b01      	cmp	r3, #1
 802714e:	dc19      	bgt.n	8027184 <_dtoa_r+0x904>
 8027150:	9b02      	ldr	r3, [sp, #8]
 8027152:	b9bb      	cbnz	r3, 8027184 <_dtoa_r+0x904>
 8027154:	9b03      	ldr	r3, [sp, #12]
 8027156:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802715a:	b99b      	cbnz	r3, 8027184 <_dtoa_r+0x904>
 802715c:	9b03      	ldr	r3, [sp, #12]
 802715e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8027162:	0d1b      	lsrs	r3, r3, #20
 8027164:	051b      	lsls	r3, r3, #20
 8027166:	b183      	cbz	r3, 802718a <_dtoa_r+0x90a>
 8027168:	9b05      	ldr	r3, [sp, #20]
 802716a:	3301      	adds	r3, #1
 802716c:	9305      	str	r3, [sp, #20]
 802716e:	9b06      	ldr	r3, [sp, #24]
 8027170:	3301      	adds	r3, #1
 8027172:	9306      	str	r3, [sp, #24]
 8027174:	f04f 0801 	mov.w	r8, #1
 8027178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802717a:	2b00      	cmp	r3, #0
 802717c:	f47f af6f 	bne.w	802705e <_dtoa_r+0x7de>
 8027180:	2001      	movs	r0, #1
 8027182:	e774      	b.n	802706e <_dtoa_r+0x7ee>
 8027184:	f04f 0800 	mov.w	r8, #0
 8027188:	e7f6      	b.n	8027178 <_dtoa_r+0x8f8>
 802718a:	4698      	mov	r8, r3
 802718c:	e7f4      	b.n	8027178 <_dtoa_r+0x8f8>
 802718e:	d082      	beq.n	8027096 <_dtoa_r+0x816>
 8027190:	9a05      	ldr	r2, [sp, #20]
 8027192:	331c      	adds	r3, #28
 8027194:	441a      	add	r2, r3
 8027196:	9205      	str	r2, [sp, #20]
 8027198:	9a06      	ldr	r2, [sp, #24]
 802719a:	441a      	add	r2, r3
 802719c:	441d      	add	r5, r3
 802719e:	9206      	str	r2, [sp, #24]
 80271a0:	e779      	b.n	8027096 <_dtoa_r+0x816>
 80271a2:	4603      	mov	r3, r0
 80271a4:	e7f4      	b.n	8027190 <_dtoa_r+0x910>
 80271a6:	9b04      	ldr	r3, [sp, #16]
 80271a8:	2b00      	cmp	r3, #0
 80271aa:	dc37      	bgt.n	802721c <_dtoa_r+0x99c>
 80271ac:	9b07      	ldr	r3, [sp, #28]
 80271ae:	2b02      	cmp	r3, #2
 80271b0:	dd34      	ble.n	802721c <_dtoa_r+0x99c>
 80271b2:	9b04      	ldr	r3, [sp, #16]
 80271b4:	9301      	str	r3, [sp, #4]
 80271b6:	9b01      	ldr	r3, [sp, #4]
 80271b8:	b963      	cbnz	r3, 80271d4 <_dtoa_r+0x954>
 80271ba:	4631      	mov	r1, r6
 80271bc:	2205      	movs	r2, #5
 80271be:	4620      	mov	r0, r4
 80271c0:	f000 fa46 	bl	8027650 <__multadd>
 80271c4:	4601      	mov	r1, r0
 80271c6:	4606      	mov	r6, r0
 80271c8:	4650      	mov	r0, sl
 80271ca:	f000 fc5b 	bl	8027a84 <__mcmp>
 80271ce:	2800      	cmp	r0, #0
 80271d0:	f73f adbb 	bgt.w	8026d4a <_dtoa_r+0x4ca>
 80271d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80271d6:	9d00      	ldr	r5, [sp, #0]
 80271d8:	ea6f 0b03 	mvn.w	fp, r3
 80271dc:	f04f 0800 	mov.w	r8, #0
 80271e0:	4631      	mov	r1, r6
 80271e2:	4620      	mov	r0, r4
 80271e4:	f000 fa12 	bl	802760c <_Bfree>
 80271e8:	2f00      	cmp	r7, #0
 80271ea:	f43f aeab 	beq.w	8026f44 <_dtoa_r+0x6c4>
 80271ee:	f1b8 0f00 	cmp.w	r8, #0
 80271f2:	d005      	beq.n	8027200 <_dtoa_r+0x980>
 80271f4:	45b8      	cmp	r8, r7
 80271f6:	d003      	beq.n	8027200 <_dtoa_r+0x980>
 80271f8:	4641      	mov	r1, r8
 80271fa:	4620      	mov	r0, r4
 80271fc:	f000 fa06 	bl	802760c <_Bfree>
 8027200:	4639      	mov	r1, r7
 8027202:	4620      	mov	r0, r4
 8027204:	f000 fa02 	bl	802760c <_Bfree>
 8027208:	e69c      	b.n	8026f44 <_dtoa_r+0x6c4>
 802720a:	2600      	movs	r6, #0
 802720c:	4637      	mov	r7, r6
 802720e:	e7e1      	b.n	80271d4 <_dtoa_r+0x954>
 8027210:	46bb      	mov	fp, r7
 8027212:	4637      	mov	r7, r6
 8027214:	e599      	b.n	8026d4a <_dtoa_r+0x4ca>
 8027216:	bf00      	nop
 8027218:	40240000 	.word	0x40240000
 802721c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802721e:	2b00      	cmp	r3, #0
 8027220:	f000 80c8 	beq.w	80273b4 <_dtoa_r+0xb34>
 8027224:	9b04      	ldr	r3, [sp, #16]
 8027226:	9301      	str	r3, [sp, #4]
 8027228:	2d00      	cmp	r5, #0
 802722a:	dd05      	ble.n	8027238 <_dtoa_r+0x9b8>
 802722c:	4639      	mov	r1, r7
 802722e:	462a      	mov	r2, r5
 8027230:	4620      	mov	r0, r4
 8027232:	f000 fbbb 	bl	80279ac <__lshift>
 8027236:	4607      	mov	r7, r0
 8027238:	f1b8 0f00 	cmp.w	r8, #0
 802723c:	d05b      	beq.n	80272f6 <_dtoa_r+0xa76>
 802723e:	6879      	ldr	r1, [r7, #4]
 8027240:	4620      	mov	r0, r4
 8027242:	f000 f9a3 	bl	802758c <_Balloc>
 8027246:	4605      	mov	r5, r0
 8027248:	b928      	cbnz	r0, 8027256 <_dtoa_r+0x9d6>
 802724a:	4b83      	ldr	r3, [pc, #524]	; (8027458 <_dtoa_r+0xbd8>)
 802724c:	4602      	mov	r2, r0
 802724e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8027252:	f7ff bb2e 	b.w	80268b2 <_dtoa_r+0x32>
 8027256:	693a      	ldr	r2, [r7, #16]
 8027258:	3202      	adds	r2, #2
 802725a:	0092      	lsls	r2, r2, #2
 802725c:	f107 010c 	add.w	r1, r7, #12
 8027260:	300c      	adds	r0, #12
 8027262:	f7ff fa6c 	bl	802673e <memcpy>
 8027266:	2201      	movs	r2, #1
 8027268:	4629      	mov	r1, r5
 802726a:	4620      	mov	r0, r4
 802726c:	f000 fb9e 	bl	80279ac <__lshift>
 8027270:	9b00      	ldr	r3, [sp, #0]
 8027272:	3301      	adds	r3, #1
 8027274:	9304      	str	r3, [sp, #16]
 8027276:	e9dd 2300 	ldrd	r2, r3, [sp]
 802727a:	4413      	add	r3, r2
 802727c:	9308      	str	r3, [sp, #32]
 802727e:	9b02      	ldr	r3, [sp, #8]
 8027280:	f003 0301 	and.w	r3, r3, #1
 8027284:	46b8      	mov	r8, r7
 8027286:	9306      	str	r3, [sp, #24]
 8027288:	4607      	mov	r7, r0
 802728a:	9b04      	ldr	r3, [sp, #16]
 802728c:	4631      	mov	r1, r6
 802728e:	3b01      	subs	r3, #1
 8027290:	4650      	mov	r0, sl
 8027292:	9301      	str	r3, [sp, #4]
 8027294:	f7ff fa6c 	bl	8026770 <quorem>
 8027298:	4641      	mov	r1, r8
 802729a:	9002      	str	r0, [sp, #8]
 802729c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80272a0:	4650      	mov	r0, sl
 80272a2:	f000 fbef 	bl	8027a84 <__mcmp>
 80272a6:	463a      	mov	r2, r7
 80272a8:	9005      	str	r0, [sp, #20]
 80272aa:	4631      	mov	r1, r6
 80272ac:	4620      	mov	r0, r4
 80272ae:	f000 fc05 	bl	8027abc <__mdiff>
 80272b2:	68c2      	ldr	r2, [r0, #12]
 80272b4:	4605      	mov	r5, r0
 80272b6:	bb02      	cbnz	r2, 80272fa <_dtoa_r+0xa7a>
 80272b8:	4601      	mov	r1, r0
 80272ba:	4650      	mov	r0, sl
 80272bc:	f000 fbe2 	bl	8027a84 <__mcmp>
 80272c0:	4602      	mov	r2, r0
 80272c2:	4629      	mov	r1, r5
 80272c4:	4620      	mov	r0, r4
 80272c6:	9209      	str	r2, [sp, #36]	; 0x24
 80272c8:	f000 f9a0 	bl	802760c <_Bfree>
 80272cc:	9b07      	ldr	r3, [sp, #28]
 80272ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80272d0:	9d04      	ldr	r5, [sp, #16]
 80272d2:	ea43 0102 	orr.w	r1, r3, r2
 80272d6:	9b06      	ldr	r3, [sp, #24]
 80272d8:	4319      	orrs	r1, r3
 80272da:	d110      	bne.n	80272fe <_dtoa_r+0xa7e>
 80272dc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80272e0:	d029      	beq.n	8027336 <_dtoa_r+0xab6>
 80272e2:	9b05      	ldr	r3, [sp, #20]
 80272e4:	2b00      	cmp	r3, #0
 80272e6:	dd02      	ble.n	80272ee <_dtoa_r+0xa6e>
 80272e8:	9b02      	ldr	r3, [sp, #8]
 80272ea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80272ee:	9b01      	ldr	r3, [sp, #4]
 80272f0:	f883 9000 	strb.w	r9, [r3]
 80272f4:	e774      	b.n	80271e0 <_dtoa_r+0x960>
 80272f6:	4638      	mov	r0, r7
 80272f8:	e7ba      	b.n	8027270 <_dtoa_r+0x9f0>
 80272fa:	2201      	movs	r2, #1
 80272fc:	e7e1      	b.n	80272c2 <_dtoa_r+0xa42>
 80272fe:	9b05      	ldr	r3, [sp, #20]
 8027300:	2b00      	cmp	r3, #0
 8027302:	db04      	blt.n	802730e <_dtoa_r+0xa8e>
 8027304:	9907      	ldr	r1, [sp, #28]
 8027306:	430b      	orrs	r3, r1
 8027308:	9906      	ldr	r1, [sp, #24]
 802730a:	430b      	orrs	r3, r1
 802730c:	d120      	bne.n	8027350 <_dtoa_r+0xad0>
 802730e:	2a00      	cmp	r2, #0
 8027310:	dded      	ble.n	80272ee <_dtoa_r+0xa6e>
 8027312:	4651      	mov	r1, sl
 8027314:	2201      	movs	r2, #1
 8027316:	4620      	mov	r0, r4
 8027318:	f000 fb48 	bl	80279ac <__lshift>
 802731c:	4631      	mov	r1, r6
 802731e:	4682      	mov	sl, r0
 8027320:	f000 fbb0 	bl	8027a84 <__mcmp>
 8027324:	2800      	cmp	r0, #0
 8027326:	dc03      	bgt.n	8027330 <_dtoa_r+0xab0>
 8027328:	d1e1      	bne.n	80272ee <_dtoa_r+0xa6e>
 802732a:	f019 0f01 	tst.w	r9, #1
 802732e:	d0de      	beq.n	80272ee <_dtoa_r+0xa6e>
 8027330:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8027334:	d1d8      	bne.n	80272e8 <_dtoa_r+0xa68>
 8027336:	9a01      	ldr	r2, [sp, #4]
 8027338:	2339      	movs	r3, #57	; 0x39
 802733a:	7013      	strb	r3, [r2, #0]
 802733c:	462b      	mov	r3, r5
 802733e:	461d      	mov	r5, r3
 8027340:	3b01      	subs	r3, #1
 8027342:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8027346:	2a39      	cmp	r2, #57	; 0x39
 8027348:	d06c      	beq.n	8027424 <_dtoa_r+0xba4>
 802734a:	3201      	adds	r2, #1
 802734c:	701a      	strb	r2, [r3, #0]
 802734e:	e747      	b.n	80271e0 <_dtoa_r+0x960>
 8027350:	2a00      	cmp	r2, #0
 8027352:	dd07      	ble.n	8027364 <_dtoa_r+0xae4>
 8027354:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8027358:	d0ed      	beq.n	8027336 <_dtoa_r+0xab6>
 802735a:	9a01      	ldr	r2, [sp, #4]
 802735c:	f109 0301 	add.w	r3, r9, #1
 8027360:	7013      	strb	r3, [r2, #0]
 8027362:	e73d      	b.n	80271e0 <_dtoa_r+0x960>
 8027364:	9b04      	ldr	r3, [sp, #16]
 8027366:	9a08      	ldr	r2, [sp, #32]
 8027368:	f803 9c01 	strb.w	r9, [r3, #-1]
 802736c:	4293      	cmp	r3, r2
 802736e:	d043      	beq.n	80273f8 <_dtoa_r+0xb78>
 8027370:	4651      	mov	r1, sl
 8027372:	2300      	movs	r3, #0
 8027374:	220a      	movs	r2, #10
 8027376:	4620      	mov	r0, r4
 8027378:	f000 f96a 	bl	8027650 <__multadd>
 802737c:	45b8      	cmp	r8, r7
 802737e:	4682      	mov	sl, r0
 8027380:	f04f 0300 	mov.w	r3, #0
 8027384:	f04f 020a 	mov.w	r2, #10
 8027388:	4641      	mov	r1, r8
 802738a:	4620      	mov	r0, r4
 802738c:	d107      	bne.n	802739e <_dtoa_r+0xb1e>
 802738e:	f000 f95f 	bl	8027650 <__multadd>
 8027392:	4680      	mov	r8, r0
 8027394:	4607      	mov	r7, r0
 8027396:	9b04      	ldr	r3, [sp, #16]
 8027398:	3301      	adds	r3, #1
 802739a:	9304      	str	r3, [sp, #16]
 802739c:	e775      	b.n	802728a <_dtoa_r+0xa0a>
 802739e:	f000 f957 	bl	8027650 <__multadd>
 80273a2:	4639      	mov	r1, r7
 80273a4:	4680      	mov	r8, r0
 80273a6:	2300      	movs	r3, #0
 80273a8:	220a      	movs	r2, #10
 80273aa:	4620      	mov	r0, r4
 80273ac:	f000 f950 	bl	8027650 <__multadd>
 80273b0:	4607      	mov	r7, r0
 80273b2:	e7f0      	b.n	8027396 <_dtoa_r+0xb16>
 80273b4:	9b04      	ldr	r3, [sp, #16]
 80273b6:	9301      	str	r3, [sp, #4]
 80273b8:	9d00      	ldr	r5, [sp, #0]
 80273ba:	4631      	mov	r1, r6
 80273bc:	4650      	mov	r0, sl
 80273be:	f7ff f9d7 	bl	8026770 <quorem>
 80273c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80273c6:	9b00      	ldr	r3, [sp, #0]
 80273c8:	f805 9b01 	strb.w	r9, [r5], #1
 80273cc:	1aea      	subs	r2, r5, r3
 80273ce:	9b01      	ldr	r3, [sp, #4]
 80273d0:	4293      	cmp	r3, r2
 80273d2:	dd07      	ble.n	80273e4 <_dtoa_r+0xb64>
 80273d4:	4651      	mov	r1, sl
 80273d6:	2300      	movs	r3, #0
 80273d8:	220a      	movs	r2, #10
 80273da:	4620      	mov	r0, r4
 80273dc:	f000 f938 	bl	8027650 <__multadd>
 80273e0:	4682      	mov	sl, r0
 80273e2:	e7ea      	b.n	80273ba <_dtoa_r+0xb3a>
 80273e4:	9b01      	ldr	r3, [sp, #4]
 80273e6:	2b00      	cmp	r3, #0
 80273e8:	bfc8      	it	gt
 80273ea:	461d      	movgt	r5, r3
 80273ec:	9b00      	ldr	r3, [sp, #0]
 80273ee:	bfd8      	it	le
 80273f0:	2501      	movle	r5, #1
 80273f2:	441d      	add	r5, r3
 80273f4:	f04f 0800 	mov.w	r8, #0
 80273f8:	4651      	mov	r1, sl
 80273fa:	2201      	movs	r2, #1
 80273fc:	4620      	mov	r0, r4
 80273fe:	f000 fad5 	bl	80279ac <__lshift>
 8027402:	4631      	mov	r1, r6
 8027404:	4682      	mov	sl, r0
 8027406:	f000 fb3d 	bl	8027a84 <__mcmp>
 802740a:	2800      	cmp	r0, #0
 802740c:	dc96      	bgt.n	802733c <_dtoa_r+0xabc>
 802740e:	d102      	bne.n	8027416 <_dtoa_r+0xb96>
 8027410:	f019 0f01 	tst.w	r9, #1
 8027414:	d192      	bne.n	802733c <_dtoa_r+0xabc>
 8027416:	462b      	mov	r3, r5
 8027418:	461d      	mov	r5, r3
 802741a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802741e:	2a30      	cmp	r2, #48	; 0x30
 8027420:	d0fa      	beq.n	8027418 <_dtoa_r+0xb98>
 8027422:	e6dd      	b.n	80271e0 <_dtoa_r+0x960>
 8027424:	9a00      	ldr	r2, [sp, #0]
 8027426:	429a      	cmp	r2, r3
 8027428:	d189      	bne.n	802733e <_dtoa_r+0xabe>
 802742a:	f10b 0b01 	add.w	fp, fp, #1
 802742e:	2331      	movs	r3, #49	; 0x31
 8027430:	e796      	b.n	8027360 <_dtoa_r+0xae0>
 8027432:	4b0a      	ldr	r3, [pc, #40]	; (802745c <_dtoa_r+0xbdc>)
 8027434:	f7ff ba99 	b.w	802696a <_dtoa_r+0xea>
 8027438:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802743a:	2b00      	cmp	r3, #0
 802743c:	f47f aa6d 	bne.w	802691a <_dtoa_r+0x9a>
 8027440:	4b07      	ldr	r3, [pc, #28]	; (8027460 <_dtoa_r+0xbe0>)
 8027442:	f7ff ba92 	b.w	802696a <_dtoa_r+0xea>
 8027446:	9b01      	ldr	r3, [sp, #4]
 8027448:	2b00      	cmp	r3, #0
 802744a:	dcb5      	bgt.n	80273b8 <_dtoa_r+0xb38>
 802744c:	9b07      	ldr	r3, [sp, #28]
 802744e:	2b02      	cmp	r3, #2
 8027450:	f73f aeb1 	bgt.w	80271b6 <_dtoa_r+0x936>
 8027454:	e7b0      	b.n	80273b8 <_dtoa_r+0xb38>
 8027456:	bf00      	nop
 8027458:	0802eab5 	.word	0x0802eab5
 802745c:	0802ec4d 	.word	0x0802ec4d
 8027460:	0802ea50 	.word	0x0802ea50

08027464 <_free_r>:
 8027464:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027466:	2900      	cmp	r1, #0
 8027468:	d044      	beq.n	80274f4 <_free_r+0x90>
 802746a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802746e:	9001      	str	r0, [sp, #4]
 8027470:	2b00      	cmp	r3, #0
 8027472:	f1a1 0404 	sub.w	r4, r1, #4
 8027476:	bfb8      	it	lt
 8027478:	18e4      	addlt	r4, r4, r3
 802747a:	f7fc fe99 	bl	80241b0 <__malloc_lock>
 802747e:	4a1e      	ldr	r2, [pc, #120]	; (80274f8 <_free_r+0x94>)
 8027480:	9801      	ldr	r0, [sp, #4]
 8027482:	6813      	ldr	r3, [r2, #0]
 8027484:	b933      	cbnz	r3, 8027494 <_free_r+0x30>
 8027486:	6063      	str	r3, [r4, #4]
 8027488:	6014      	str	r4, [r2, #0]
 802748a:	b003      	add	sp, #12
 802748c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8027490:	f7fc be94 	b.w	80241bc <__malloc_unlock>
 8027494:	42a3      	cmp	r3, r4
 8027496:	d908      	bls.n	80274aa <_free_r+0x46>
 8027498:	6825      	ldr	r5, [r4, #0]
 802749a:	1961      	adds	r1, r4, r5
 802749c:	428b      	cmp	r3, r1
 802749e:	bf01      	itttt	eq
 80274a0:	6819      	ldreq	r1, [r3, #0]
 80274a2:	685b      	ldreq	r3, [r3, #4]
 80274a4:	1949      	addeq	r1, r1, r5
 80274a6:	6021      	streq	r1, [r4, #0]
 80274a8:	e7ed      	b.n	8027486 <_free_r+0x22>
 80274aa:	461a      	mov	r2, r3
 80274ac:	685b      	ldr	r3, [r3, #4]
 80274ae:	b10b      	cbz	r3, 80274b4 <_free_r+0x50>
 80274b0:	42a3      	cmp	r3, r4
 80274b2:	d9fa      	bls.n	80274aa <_free_r+0x46>
 80274b4:	6811      	ldr	r1, [r2, #0]
 80274b6:	1855      	adds	r5, r2, r1
 80274b8:	42a5      	cmp	r5, r4
 80274ba:	d10b      	bne.n	80274d4 <_free_r+0x70>
 80274bc:	6824      	ldr	r4, [r4, #0]
 80274be:	4421      	add	r1, r4
 80274c0:	1854      	adds	r4, r2, r1
 80274c2:	42a3      	cmp	r3, r4
 80274c4:	6011      	str	r1, [r2, #0]
 80274c6:	d1e0      	bne.n	802748a <_free_r+0x26>
 80274c8:	681c      	ldr	r4, [r3, #0]
 80274ca:	685b      	ldr	r3, [r3, #4]
 80274cc:	6053      	str	r3, [r2, #4]
 80274ce:	440c      	add	r4, r1
 80274d0:	6014      	str	r4, [r2, #0]
 80274d2:	e7da      	b.n	802748a <_free_r+0x26>
 80274d4:	d902      	bls.n	80274dc <_free_r+0x78>
 80274d6:	230c      	movs	r3, #12
 80274d8:	6003      	str	r3, [r0, #0]
 80274da:	e7d6      	b.n	802748a <_free_r+0x26>
 80274dc:	6825      	ldr	r5, [r4, #0]
 80274de:	1961      	adds	r1, r4, r5
 80274e0:	428b      	cmp	r3, r1
 80274e2:	bf04      	itt	eq
 80274e4:	6819      	ldreq	r1, [r3, #0]
 80274e6:	685b      	ldreq	r3, [r3, #4]
 80274e8:	6063      	str	r3, [r4, #4]
 80274ea:	bf04      	itt	eq
 80274ec:	1949      	addeq	r1, r1, r5
 80274ee:	6021      	streq	r1, [r4, #0]
 80274f0:	6054      	str	r4, [r2, #4]
 80274f2:	e7ca      	b.n	802748a <_free_r+0x26>
 80274f4:	b003      	add	sp, #12
 80274f6:	bd30      	pop	{r4, r5, pc}
 80274f8:	20016378 	.word	0x20016378

080274fc <_findenv_r>:
 80274fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027500:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8027570 <_findenv_r+0x74>
 8027504:	4607      	mov	r7, r0
 8027506:	4689      	mov	r9, r1
 8027508:	4616      	mov	r6, r2
 802750a:	f001 f891 	bl	8028630 <__env_lock>
 802750e:	f8da 4000 	ldr.w	r4, [sl]
 8027512:	b134      	cbz	r4, 8027522 <_findenv_r+0x26>
 8027514:	464b      	mov	r3, r9
 8027516:	4698      	mov	r8, r3
 8027518:	f813 2b01 	ldrb.w	r2, [r3], #1
 802751c:	b13a      	cbz	r2, 802752e <_findenv_r+0x32>
 802751e:	2a3d      	cmp	r2, #61	; 0x3d
 8027520:	d1f9      	bne.n	8027516 <_findenv_r+0x1a>
 8027522:	4638      	mov	r0, r7
 8027524:	f001 f88a 	bl	802863c <__env_unlock>
 8027528:	2000      	movs	r0, #0
 802752a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802752e:	eba8 0809 	sub.w	r8, r8, r9
 8027532:	46a3      	mov	fp, r4
 8027534:	f854 0b04 	ldr.w	r0, [r4], #4
 8027538:	2800      	cmp	r0, #0
 802753a:	d0f2      	beq.n	8027522 <_findenv_r+0x26>
 802753c:	4642      	mov	r2, r8
 802753e:	4649      	mov	r1, r9
 8027540:	f7fd fe39 	bl	80251b6 <strncmp>
 8027544:	2800      	cmp	r0, #0
 8027546:	d1f4      	bne.n	8027532 <_findenv_r+0x36>
 8027548:	f854 3c04 	ldr.w	r3, [r4, #-4]
 802754c:	eb03 0508 	add.w	r5, r3, r8
 8027550:	f813 3008 	ldrb.w	r3, [r3, r8]
 8027554:	2b3d      	cmp	r3, #61	; 0x3d
 8027556:	d1ec      	bne.n	8027532 <_findenv_r+0x36>
 8027558:	f8da 3000 	ldr.w	r3, [sl]
 802755c:	ebab 0303 	sub.w	r3, fp, r3
 8027560:	109b      	asrs	r3, r3, #2
 8027562:	4638      	mov	r0, r7
 8027564:	6033      	str	r3, [r6, #0]
 8027566:	f001 f869 	bl	802863c <__env_unlock>
 802756a:	1c68      	adds	r0, r5, #1
 802756c:	e7dd      	b.n	802752a <_findenv_r+0x2e>
 802756e:	bf00      	nop
 8027570:	20000004 	.word	0x20000004

08027574 <_getenv_r>:
 8027574:	b507      	push	{r0, r1, r2, lr}
 8027576:	aa01      	add	r2, sp, #4
 8027578:	f7ff ffc0 	bl	80274fc <_findenv_r>
 802757c:	b003      	add	sp, #12
 802757e:	f85d fb04 	ldr.w	pc, [sp], #4

08027582 <labs>:
 8027582:	2800      	cmp	r0, #0
 8027584:	bfb8      	it	lt
 8027586:	4240      	neglt	r0, r0
 8027588:	4770      	bx	lr
	...

0802758c <_Balloc>:
 802758c:	b570      	push	{r4, r5, r6, lr}
 802758e:	69c6      	ldr	r6, [r0, #28]
 8027590:	4604      	mov	r4, r0
 8027592:	460d      	mov	r5, r1
 8027594:	b976      	cbnz	r6, 80275b4 <_Balloc+0x28>
 8027596:	2010      	movs	r0, #16
 8027598:	f7fc fd5a 	bl	8024050 <malloc>
 802759c:	4602      	mov	r2, r0
 802759e:	61e0      	str	r0, [r4, #28]
 80275a0:	b920      	cbnz	r0, 80275ac <_Balloc+0x20>
 80275a2:	4b18      	ldr	r3, [pc, #96]	; (8027604 <_Balloc+0x78>)
 80275a4:	4818      	ldr	r0, [pc, #96]	; (8027608 <_Balloc+0x7c>)
 80275a6:	216b      	movs	r1, #107	; 0x6b
 80275a8:	f7fc fd34 	bl	8024014 <__assert_func>
 80275ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80275b0:	6006      	str	r6, [r0, #0]
 80275b2:	60c6      	str	r6, [r0, #12]
 80275b4:	69e6      	ldr	r6, [r4, #28]
 80275b6:	68f3      	ldr	r3, [r6, #12]
 80275b8:	b183      	cbz	r3, 80275dc <_Balloc+0x50>
 80275ba:	69e3      	ldr	r3, [r4, #28]
 80275bc:	68db      	ldr	r3, [r3, #12]
 80275be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80275c2:	b9b8      	cbnz	r0, 80275f4 <_Balloc+0x68>
 80275c4:	2101      	movs	r1, #1
 80275c6:	fa01 f605 	lsl.w	r6, r1, r5
 80275ca:	1d72      	adds	r2, r6, #5
 80275cc:	0092      	lsls	r2, r2, #2
 80275ce:	4620      	mov	r0, r4
 80275d0:	f001 f818 	bl	8028604 <_calloc_r>
 80275d4:	b160      	cbz	r0, 80275f0 <_Balloc+0x64>
 80275d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80275da:	e00e      	b.n	80275fa <_Balloc+0x6e>
 80275dc:	2221      	movs	r2, #33	; 0x21
 80275de:	2104      	movs	r1, #4
 80275e0:	4620      	mov	r0, r4
 80275e2:	f001 f80f 	bl	8028604 <_calloc_r>
 80275e6:	69e3      	ldr	r3, [r4, #28]
 80275e8:	60f0      	str	r0, [r6, #12]
 80275ea:	68db      	ldr	r3, [r3, #12]
 80275ec:	2b00      	cmp	r3, #0
 80275ee:	d1e4      	bne.n	80275ba <_Balloc+0x2e>
 80275f0:	2000      	movs	r0, #0
 80275f2:	bd70      	pop	{r4, r5, r6, pc}
 80275f4:	6802      	ldr	r2, [r0, #0]
 80275f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80275fa:	2300      	movs	r3, #0
 80275fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027600:	e7f7      	b.n	80275f2 <_Balloc+0x66>
 8027602:	bf00      	nop
 8027604:	0802e57c 	.word	0x0802e57c
 8027608:	0802eac6 	.word	0x0802eac6

0802760c <_Bfree>:
 802760c:	b570      	push	{r4, r5, r6, lr}
 802760e:	69c6      	ldr	r6, [r0, #28]
 8027610:	4605      	mov	r5, r0
 8027612:	460c      	mov	r4, r1
 8027614:	b976      	cbnz	r6, 8027634 <_Bfree+0x28>
 8027616:	2010      	movs	r0, #16
 8027618:	f7fc fd1a 	bl	8024050 <malloc>
 802761c:	4602      	mov	r2, r0
 802761e:	61e8      	str	r0, [r5, #28]
 8027620:	b920      	cbnz	r0, 802762c <_Bfree+0x20>
 8027622:	4b09      	ldr	r3, [pc, #36]	; (8027648 <_Bfree+0x3c>)
 8027624:	4809      	ldr	r0, [pc, #36]	; (802764c <_Bfree+0x40>)
 8027626:	218f      	movs	r1, #143	; 0x8f
 8027628:	f7fc fcf4 	bl	8024014 <__assert_func>
 802762c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027630:	6006      	str	r6, [r0, #0]
 8027632:	60c6      	str	r6, [r0, #12]
 8027634:	b13c      	cbz	r4, 8027646 <_Bfree+0x3a>
 8027636:	69eb      	ldr	r3, [r5, #28]
 8027638:	6862      	ldr	r2, [r4, #4]
 802763a:	68db      	ldr	r3, [r3, #12]
 802763c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8027640:	6021      	str	r1, [r4, #0]
 8027642:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8027646:	bd70      	pop	{r4, r5, r6, pc}
 8027648:	0802e57c 	.word	0x0802e57c
 802764c:	0802eac6 	.word	0x0802eac6

08027650 <__multadd>:
 8027650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027654:	690d      	ldr	r5, [r1, #16]
 8027656:	4607      	mov	r7, r0
 8027658:	460c      	mov	r4, r1
 802765a:	461e      	mov	r6, r3
 802765c:	f101 0c14 	add.w	ip, r1, #20
 8027660:	2000      	movs	r0, #0
 8027662:	f8dc 3000 	ldr.w	r3, [ip]
 8027666:	b299      	uxth	r1, r3
 8027668:	fb02 6101 	mla	r1, r2, r1, r6
 802766c:	0c1e      	lsrs	r6, r3, #16
 802766e:	0c0b      	lsrs	r3, r1, #16
 8027670:	fb02 3306 	mla	r3, r2, r6, r3
 8027674:	b289      	uxth	r1, r1
 8027676:	3001      	adds	r0, #1
 8027678:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802767c:	4285      	cmp	r5, r0
 802767e:	f84c 1b04 	str.w	r1, [ip], #4
 8027682:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8027686:	dcec      	bgt.n	8027662 <__multadd+0x12>
 8027688:	b30e      	cbz	r6, 80276ce <__multadd+0x7e>
 802768a:	68a3      	ldr	r3, [r4, #8]
 802768c:	42ab      	cmp	r3, r5
 802768e:	dc19      	bgt.n	80276c4 <__multadd+0x74>
 8027690:	6861      	ldr	r1, [r4, #4]
 8027692:	4638      	mov	r0, r7
 8027694:	3101      	adds	r1, #1
 8027696:	f7ff ff79 	bl	802758c <_Balloc>
 802769a:	4680      	mov	r8, r0
 802769c:	b928      	cbnz	r0, 80276aa <__multadd+0x5a>
 802769e:	4602      	mov	r2, r0
 80276a0:	4b0c      	ldr	r3, [pc, #48]	; (80276d4 <__multadd+0x84>)
 80276a2:	480d      	ldr	r0, [pc, #52]	; (80276d8 <__multadd+0x88>)
 80276a4:	21ba      	movs	r1, #186	; 0xba
 80276a6:	f7fc fcb5 	bl	8024014 <__assert_func>
 80276aa:	6922      	ldr	r2, [r4, #16]
 80276ac:	3202      	adds	r2, #2
 80276ae:	f104 010c 	add.w	r1, r4, #12
 80276b2:	0092      	lsls	r2, r2, #2
 80276b4:	300c      	adds	r0, #12
 80276b6:	f7ff f842 	bl	802673e <memcpy>
 80276ba:	4621      	mov	r1, r4
 80276bc:	4638      	mov	r0, r7
 80276be:	f7ff ffa5 	bl	802760c <_Bfree>
 80276c2:	4644      	mov	r4, r8
 80276c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80276c8:	3501      	adds	r5, #1
 80276ca:	615e      	str	r6, [r3, #20]
 80276cc:	6125      	str	r5, [r4, #16]
 80276ce:	4620      	mov	r0, r4
 80276d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80276d4:	0802eab5 	.word	0x0802eab5
 80276d8:	0802eac6 	.word	0x0802eac6

080276dc <__hi0bits>:
 80276dc:	0c03      	lsrs	r3, r0, #16
 80276de:	041b      	lsls	r3, r3, #16
 80276e0:	b9d3      	cbnz	r3, 8027718 <__hi0bits+0x3c>
 80276e2:	0400      	lsls	r0, r0, #16
 80276e4:	2310      	movs	r3, #16
 80276e6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80276ea:	bf04      	itt	eq
 80276ec:	0200      	lsleq	r0, r0, #8
 80276ee:	3308      	addeq	r3, #8
 80276f0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80276f4:	bf04      	itt	eq
 80276f6:	0100      	lsleq	r0, r0, #4
 80276f8:	3304      	addeq	r3, #4
 80276fa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80276fe:	bf04      	itt	eq
 8027700:	0080      	lsleq	r0, r0, #2
 8027702:	3302      	addeq	r3, #2
 8027704:	2800      	cmp	r0, #0
 8027706:	db05      	blt.n	8027714 <__hi0bits+0x38>
 8027708:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802770c:	f103 0301 	add.w	r3, r3, #1
 8027710:	bf08      	it	eq
 8027712:	2320      	moveq	r3, #32
 8027714:	4618      	mov	r0, r3
 8027716:	4770      	bx	lr
 8027718:	2300      	movs	r3, #0
 802771a:	e7e4      	b.n	80276e6 <__hi0bits+0xa>

0802771c <__lo0bits>:
 802771c:	6803      	ldr	r3, [r0, #0]
 802771e:	f013 0207 	ands.w	r2, r3, #7
 8027722:	d00c      	beq.n	802773e <__lo0bits+0x22>
 8027724:	07d9      	lsls	r1, r3, #31
 8027726:	d422      	bmi.n	802776e <__lo0bits+0x52>
 8027728:	079a      	lsls	r2, r3, #30
 802772a:	bf49      	itett	mi
 802772c:	085b      	lsrmi	r3, r3, #1
 802772e:	089b      	lsrpl	r3, r3, #2
 8027730:	6003      	strmi	r3, [r0, #0]
 8027732:	2201      	movmi	r2, #1
 8027734:	bf5c      	itt	pl
 8027736:	6003      	strpl	r3, [r0, #0]
 8027738:	2202      	movpl	r2, #2
 802773a:	4610      	mov	r0, r2
 802773c:	4770      	bx	lr
 802773e:	b299      	uxth	r1, r3
 8027740:	b909      	cbnz	r1, 8027746 <__lo0bits+0x2a>
 8027742:	0c1b      	lsrs	r3, r3, #16
 8027744:	2210      	movs	r2, #16
 8027746:	b2d9      	uxtb	r1, r3
 8027748:	b909      	cbnz	r1, 802774e <__lo0bits+0x32>
 802774a:	3208      	adds	r2, #8
 802774c:	0a1b      	lsrs	r3, r3, #8
 802774e:	0719      	lsls	r1, r3, #28
 8027750:	bf04      	itt	eq
 8027752:	091b      	lsreq	r3, r3, #4
 8027754:	3204      	addeq	r2, #4
 8027756:	0799      	lsls	r1, r3, #30
 8027758:	bf04      	itt	eq
 802775a:	089b      	lsreq	r3, r3, #2
 802775c:	3202      	addeq	r2, #2
 802775e:	07d9      	lsls	r1, r3, #31
 8027760:	d403      	bmi.n	802776a <__lo0bits+0x4e>
 8027762:	085b      	lsrs	r3, r3, #1
 8027764:	f102 0201 	add.w	r2, r2, #1
 8027768:	d003      	beq.n	8027772 <__lo0bits+0x56>
 802776a:	6003      	str	r3, [r0, #0]
 802776c:	e7e5      	b.n	802773a <__lo0bits+0x1e>
 802776e:	2200      	movs	r2, #0
 8027770:	e7e3      	b.n	802773a <__lo0bits+0x1e>
 8027772:	2220      	movs	r2, #32
 8027774:	e7e1      	b.n	802773a <__lo0bits+0x1e>
	...

08027778 <__i2b>:
 8027778:	b510      	push	{r4, lr}
 802777a:	460c      	mov	r4, r1
 802777c:	2101      	movs	r1, #1
 802777e:	f7ff ff05 	bl	802758c <_Balloc>
 8027782:	4602      	mov	r2, r0
 8027784:	b928      	cbnz	r0, 8027792 <__i2b+0x1a>
 8027786:	4b05      	ldr	r3, [pc, #20]	; (802779c <__i2b+0x24>)
 8027788:	4805      	ldr	r0, [pc, #20]	; (80277a0 <__i2b+0x28>)
 802778a:	f240 1145 	movw	r1, #325	; 0x145
 802778e:	f7fc fc41 	bl	8024014 <__assert_func>
 8027792:	2301      	movs	r3, #1
 8027794:	6144      	str	r4, [r0, #20]
 8027796:	6103      	str	r3, [r0, #16]
 8027798:	bd10      	pop	{r4, pc}
 802779a:	bf00      	nop
 802779c:	0802eab5 	.word	0x0802eab5
 80277a0:	0802eac6 	.word	0x0802eac6

080277a4 <__multiply>:
 80277a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80277a8:	4691      	mov	r9, r2
 80277aa:	690a      	ldr	r2, [r1, #16]
 80277ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80277b0:	429a      	cmp	r2, r3
 80277b2:	bfb8      	it	lt
 80277b4:	460b      	movlt	r3, r1
 80277b6:	460c      	mov	r4, r1
 80277b8:	bfbc      	itt	lt
 80277ba:	464c      	movlt	r4, r9
 80277bc:	4699      	movlt	r9, r3
 80277be:	6927      	ldr	r7, [r4, #16]
 80277c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80277c4:	68a3      	ldr	r3, [r4, #8]
 80277c6:	6861      	ldr	r1, [r4, #4]
 80277c8:	eb07 060a 	add.w	r6, r7, sl
 80277cc:	42b3      	cmp	r3, r6
 80277ce:	b085      	sub	sp, #20
 80277d0:	bfb8      	it	lt
 80277d2:	3101      	addlt	r1, #1
 80277d4:	f7ff feda 	bl	802758c <_Balloc>
 80277d8:	b930      	cbnz	r0, 80277e8 <__multiply+0x44>
 80277da:	4602      	mov	r2, r0
 80277dc:	4b44      	ldr	r3, [pc, #272]	; (80278f0 <__multiply+0x14c>)
 80277de:	4845      	ldr	r0, [pc, #276]	; (80278f4 <__multiply+0x150>)
 80277e0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80277e4:	f7fc fc16 	bl	8024014 <__assert_func>
 80277e8:	f100 0514 	add.w	r5, r0, #20
 80277ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80277f0:	462b      	mov	r3, r5
 80277f2:	2200      	movs	r2, #0
 80277f4:	4543      	cmp	r3, r8
 80277f6:	d321      	bcc.n	802783c <__multiply+0x98>
 80277f8:	f104 0314 	add.w	r3, r4, #20
 80277fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027800:	f109 0314 	add.w	r3, r9, #20
 8027804:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8027808:	9202      	str	r2, [sp, #8]
 802780a:	1b3a      	subs	r2, r7, r4
 802780c:	3a15      	subs	r2, #21
 802780e:	f022 0203 	bic.w	r2, r2, #3
 8027812:	3204      	adds	r2, #4
 8027814:	f104 0115 	add.w	r1, r4, #21
 8027818:	428f      	cmp	r7, r1
 802781a:	bf38      	it	cc
 802781c:	2204      	movcc	r2, #4
 802781e:	9201      	str	r2, [sp, #4]
 8027820:	9a02      	ldr	r2, [sp, #8]
 8027822:	9303      	str	r3, [sp, #12]
 8027824:	429a      	cmp	r2, r3
 8027826:	d80c      	bhi.n	8027842 <__multiply+0x9e>
 8027828:	2e00      	cmp	r6, #0
 802782a:	dd03      	ble.n	8027834 <__multiply+0x90>
 802782c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8027830:	2b00      	cmp	r3, #0
 8027832:	d05b      	beq.n	80278ec <__multiply+0x148>
 8027834:	6106      	str	r6, [r0, #16]
 8027836:	b005      	add	sp, #20
 8027838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802783c:	f843 2b04 	str.w	r2, [r3], #4
 8027840:	e7d8      	b.n	80277f4 <__multiply+0x50>
 8027842:	f8b3 a000 	ldrh.w	sl, [r3]
 8027846:	f1ba 0f00 	cmp.w	sl, #0
 802784a:	d024      	beq.n	8027896 <__multiply+0xf2>
 802784c:	f104 0e14 	add.w	lr, r4, #20
 8027850:	46a9      	mov	r9, r5
 8027852:	f04f 0c00 	mov.w	ip, #0
 8027856:	f85e 2b04 	ldr.w	r2, [lr], #4
 802785a:	f8d9 1000 	ldr.w	r1, [r9]
 802785e:	fa1f fb82 	uxth.w	fp, r2
 8027862:	b289      	uxth	r1, r1
 8027864:	fb0a 110b 	mla	r1, sl, fp, r1
 8027868:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802786c:	f8d9 2000 	ldr.w	r2, [r9]
 8027870:	4461      	add	r1, ip
 8027872:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8027876:	fb0a c20b 	mla	r2, sl, fp, ip
 802787a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802787e:	b289      	uxth	r1, r1
 8027880:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8027884:	4577      	cmp	r7, lr
 8027886:	f849 1b04 	str.w	r1, [r9], #4
 802788a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802788e:	d8e2      	bhi.n	8027856 <__multiply+0xb2>
 8027890:	9a01      	ldr	r2, [sp, #4]
 8027892:	f845 c002 	str.w	ip, [r5, r2]
 8027896:	9a03      	ldr	r2, [sp, #12]
 8027898:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802789c:	3304      	adds	r3, #4
 802789e:	f1b9 0f00 	cmp.w	r9, #0
 80278a2:	d021      	beq.n	80278e8 <__multiply+0x144>
 80278a4:	6829      	ldr	r1, [r5, #0]
 80278a6:	f104 0c14 	add.w	ip, r4, #20
 80278aa:	46ae      	mov	lr, r5
 80278ac:	f04f 0a00 	mov.w	sl, #0
 80278b0:	f8bc b000 	ldrh.w	fp, [ip]
 80278b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80278b8:	fb09 220b 	mla	r2, r9, fp, r2
 80278bc:	4452      	add	r2, sl
 80278be:	b289      	uxth	r1, r1
 80278c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80278c4:	f84e 1b04 	str.w	r1, [lr], #4
 80278c8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80278cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80278d0:	f8be 1000 	ldrh.w	r1, [lr]
 80278d4:	fb09 110a 	mla	r1, r9, sl, r1
 80278d8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80278dc:	4567      	cmp	r7, ip
 80278de:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80278e2:	d8e5      	bhi.n	80278b0 <__multiply+0x10c>
 80278e4:	9a01      	ldr	r2, [sp, #4]
 80278e6:	50a9      	str	r1, [r5, r2]
 80278e8:	3504      	adds	r5, #4
 80278ea:	e799      	b.n	8027820 <__multiply+0x7c>
 80278ec:	3e01      	subs	r6, #1
 80278ee:	e79b      	b.n	8027828 <__multiply+0x84>
 80278f0:	0802eab5 	.word	0x0802eab5
 80278f4:	0802eac6 	.word	0x0802eac6

080278f8 <__pow5mult>:
 80278f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80278fc:	4615      	mov	r5, r2
 80278fe:	f012 0203 	ands.w	r2, r2, #3
 8027902:	4606      	mov	r6, r0
 8027904:	460f      	mov	r7, r1
 8027906:	d007      	beq.n	8027918 <__pow5mult+0x20>
 8027908:	4c25      	ldr	r4, [pc, #148]	; (80279a0 <__pow5mult+0xa8>)
 802790a:	3a01      	subs	r2, #1
 802790c:	2300      	movs	r3, #0
 802790e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027912:	f7ff fe9d 	bl	8027650 <__multadd>
 8027916:	4607      	mov	r7, r0
 8027918:	10ad      	asrs	r5, r5, #2
 802791a:	d03d      	beq.n	8027998 <__pow5mult+0xa0>
 802791c:	69f4      	ldr	r4, [r6, #28]
 802791e:	b97c      	cbnz	r4, 8027940 <__pow5mult+0x48>
 8027920:	2010      	movs	r0, #16
 8027922:	f7fc fb95 	bl	8024050 <malloc>
 8027926:	4602      	mov	r2, r0
 8027928:	61f0      	str	r0, [r6, #28]
 802792a:	b928      	cbnz	r0, 8027938 <__pow5mult+0x40>
 802792c:	4b1d      	ldr	r3, [pc, #116]	; (80279a4 <__pow5mult+0xac>)
 802792e:	481e      	ldr	r0, [pc, #120]	; (80279a8 <__pow5mult+0xb0>)
 8027930:	f240 11b3 	movw	r1, #435	; 0x1b3
 8027934:	f7fc fb6e 	bl	8024014 <__assert_func>
 8027938:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802793c:	6004      	str	r4, [r0, #0]
 802793e:	60c4      	str	r4, [r0, #12]
 8027940:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8027944:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8027948:	b94c      	cbnz	r4, 802795e <__pow5mult+0x66>
 802794a:	f240 2171 	movw	r1, #625	; 0x271
 802794e:	4630      	mov	r0, r6
 8027950:	f7ff ff12 	bl	8027778 <__i2b>
 8027954:	2300      	movs	r3, #0
 8027956:	f8c8 0008 	str.w	r0, [r8, #8]
 802795a:	4604      	mov	r4, r0
 802795c:	6003      	str	r3, [r0, #0]
 802795e:	f04f 0900 	mov.w	r9, #0
 8027962:	07eb      	lsls	r3, r5, #31
 8027964:	d50a      	bpl.n	802797c <__pow5mult+0x84>
 8027966:	4639      	mov	r1, r7
 8027968:	4622      	mov	r2, r4
 802796a:	4630      	mov	r0, r6
 802796c:	f7ff ff1a 	bl	80277a4 <__multiply>
 8027970:	4639      	mov	r1, r7
 8027972:	4680      	mov	r8, r0
 8027974:	4630      	mov	r0, r6
 8027976:	f7ff fe49 	bl	802760c <_Bfree>
 802797a:	4647      	mov	r7, r8
 802797c:	106d      	asrs	r5, r5, #1
 802797e:	d00b      	beq.n	8027998 <__pow5mult+0xa0>
 8027980:	6820      	ldr	r0, [r4, #0]
 8027982:	b938      	cbnz	r0, 8027994 <__pow5mult+0x9c>
 8027984:	4622      	mov	r2, r4
 8027986:	4621      	mov	r1, r4
 8027988:	4630      	mov	r0, r6
 802798a:	f7ff ff0b 	bl	80277a4 <__multiply>
 802798e:	6020      	str	r0, [r4, #0]
 8027990:	f8c0 9000 	str.w	r9, [r0]
 8027994:	4604      	mov	r4, r0
 8027996:	e7e4      	b.n	8027962 <__pow5mult+0x6a>
 8027998:	4638      	mov	r0, r7
 802799a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802799e:	bf00      	nop
 80279a0:	0802ec10 	.word	0x0802ec10
 80279a4:	0802e57c 	.word	0x0802e57c
 80279a8:	0802eac6 	.word	0x0802eac6

080279ac <__lshift>:
 80279ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80279b0:	460c      	mov	r4, r1
 80279b2:	6849      	ldr	r1, [r1, #4]
 80279b4:	6923      	ldr	r3, [r4, #16]
 80279b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80279ba:	68a3      	ldr	r3, [r4, #8]
 80279bc:	4607      	mov	r7, r0
 80279be:	4691      	mov	r9, r2
 80279c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80279c4:	f108 0601 	add.w	r6, r8, #1
 80279c8:	42b3      	cmp	r3, r6
 80279ca:	db0b      	blt.n	80279e4 <__lshift+0x38>
 80279cc:	4638      	mov	r0, r7
 80279ce:	f7ff fddd 	bl	802758c <_Balloc>
 80279d2:	4605      	mov	r5, r0
 80279d4:	b948      	cbnz	r0, 80279ea <__lshift+0x3e>
 80279d6:	4602      	mov	r2, r0
 80279d8:	4b28      	ldr	r3, [pc, #160]	; (8027a7c <__lshift+0xd0>)
 80279da:	4829      	ldr	r0, [pc, #164]	; (8027a80 <__lshift+0xd4>)
 80279dc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80279e0:	f7fc fb18 	bl	8024014 <__assert_func>
 80279e4:	3101      	adds	r1, #1
 80279e6:	005b      	lsls	r3, r3, #1
 80279e8:	e7ee      	b.n	80279c8 <__lshift+0x1c>
 80279ea:	2300      	movs	r3, #0
 80279ec:	f100 0114 	add.w	r1, r0, #20
 80279f0:	f100 0210 	add.w	r2, r0, #16
 80279f4:	4618      	mov	r0, r3
 80279f6:	4553      	cmp	r3, sl
 80279f8:	db33      	blt.n	8027a62 <__lshift+0xb6>
 80279fa:	6920      	ldr	r0, [r4, #16]
 80279fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027a00:	f104 0314 	add.w	r3, r4, #20
 8027a04:	f019 091f 	ands.w	r9, r9, #31
 8027a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027a0c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8027a10:	d02b      	beq.n	8027a6a <__lshift+0xbe>
 8027a12:	f1c9 0e20 	rsb	lr, r9, #32
 8027a16:	468a      	mov	sl, r1
 8027a18:	2200      	movs	r2, #0
 8027a1a:	6818      	ldr	r0, [r3, #0]
 8027a1c:	fa00 f009 	lsl.w	r0, r0, r9
 8027a20:	4310      	orrs	r0, r2
 8027a22:	f84a 0b04 	str.w	r0, [sl], #4
 8027a26:	f853 2b04 	ldr.w	r2, [r3], #4
 8027a2a:	459c      	cmp	ip, r3
 8027a2c:	fa22 f20e 	lsr.w	r2, r2, lr
 8027a30:	d8f3      	bhi.n	8027a1a <__lshift+0x6e>
 8027a32:	ebac 0304 	sub.w	r3, ip, r4
 8027a36:	3b15      	subs	r3, #21
 8027a38:	f023 0303 	bic.w	r3, r3, #3
 8027a3c:	3304      	adds	r3, #4
 8027a3e:	f104 0015 	add.w	r0, r4, #21
 8027a42:	4584      	cmp	ip, r0
 8027a44:	bf38      	it	cc
 8027a46:	2304      	movcc	r3, #4
 8027a48:	50ca      	str	r2, [r1, r3]
 8027a4a:	b10a      	cbz	r2, 8027a50 <__lshift+0xa4>
 8027a4c:	f108 0602 	add.w	r6, r8, #2
 8027a50:	3e01      	subs	r6, #1
 8027a52:	4638      	mov	r0, r7
 8027a54:	612e      	str	r6, [r5, #16]
 8027a56:	4621      	mov	r1, r4
 8027a58:	f7ff fdd8 	bl	802760c <_Bfree>
 8027a5c:	4628      	mov	r0, r5
 8027a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027a62:	f842 0f04 	str.w	r0, [r2, #4]!
 8027a66:	3301      	adds	r3, #1
 8027a68:	e7c5      	b.n	80279f6 <__lshift+0x4a>
 8027a6a:	3904      	subs	r1, #4
 8027a6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8027a70:	f841 2f04 	str.w	r2, [r1, #4]!
 8027a74:	459c      	cmp	ip, r3
 8027a76:	d8f9      	bhi.n	8027a6c <__lshift+0xc0>
 8027a78:	e7ea      	b.n	8027a50 <__lshift+0xa4>
 8027a7a:	bf00      	nop
 8027a7c:	0802eab5 	.word	0x0802eab5
 8027a80:	0802eac6 	.word	0x0802eac6

08027a84 <__mcmp>:
 8027a84:	b530      	push	{r4, r5, lr}
 8027a86:	6902      	ldr	r2, [r0, #16]
 8027a88:	690c      	ldr	r4, [r1, #16]
 8027a8a:	1b12      	subs	r2, r2, r4
 8027a8c:	d10e      	bne.n	8027aac <__mcmp+0x28>
 8027a8e:	f100 0314 	add.w	r3, r0, #20
 8027a92:	3114      	adds	r1, #20
 8027a94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8027a98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8027a9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8027aa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027aa4:	42a5      	cmp	r5, r4
 8027aa6:	d003      	beq.n	8027ab0 <__mcmp+0x2c>
 8027aa8:	d305      	bcc.n	8027ab6 <__mcmp+0x32>
 8027aaa:	2201      	movs	r2, #1
 8027aac:	4610      	mov	r0, r2
 8027aae:	bd30      	pop	{r4, r5, pc}
 8027ab0:	4283      	cmp	r3, r0
 8027ab2:	d3f3      	bcc.n	8027a9c <__mcmp+0x18>
 8027ab4:	e7fa      	b.n	8027aac <__mcmp+0x28>
 8027ab6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8027aba:	e7f7      	b.n	8027aac <__mcmp+0x28>

08027abc <__mdiff>:
 8027abc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027ac0:	460c      	mov	r4, r1
 8027ac2:	4606      	mov	r6, r0
 8027ac4:	4611      	mov	r1, r2
 8027ac6:	4620      	mov	r0, r4
 8027ac8:	4690      	mov	r8, r2
 8027aca:	f7ff ffdb 	bl	8027a84 <__mcmp>
 8027ace:	1e05      	subs	r5, r0, #0
 8027ad0:	d110      	bne.n	8027af4 <__mdiff+0x38>
 8027ad2:	4629      	mov	r1, r5
 8027ad4:	4630      	mov	r0, r6
 8027ad6:	f7ff fd59 	bl	802758c <_Balloc>
 8027ada:	b930      	cbnz	r0, 8027aea <__mdiff+0x2e>
 8027adc:	4b3a      	ldr	r3, [pc, #232]	; (8027bc8 <__mdiff+0x10c>)
 8027ade:	4602      	mov	r2, r0
 8027ae0:	f240 2137 	movw	r1, #567	; 0x237
 8027ae4:	4839      	ldr	r0, [pc, #228]	; (8027bcc <__mdiff+0x110>)
 8027ae6:	f7fc fa95 	bl	8024014 <__assert_func>
 8027aea:	2301      	movs	r3, #1
 8027aec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8027af0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027af4:	bfa4      	itt	ge
 8027af6:	4643      	movge	r3, r8
 8027af8:	46a0      	movge	r8, r4
 8027afa:	4630      	mov	r0, r6
 8027afc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8027b00:	bfa6      	itte	ge
 8027b02:	461c      	movge	r4, r3
 8027b04:	2500      	movge	r5, #0
 8027b06:	2501      	movlt	r5, #1
 8027b08:	f7ff fd40 	bl	802758c <_Balloc>
 8027b0c:	b920      	cbnz	r0, 8027b18 <__mdiff+0x5c>
 8027b0e:	4b2e      	ldr	r3, [pc, #184]	; (8027bc8 <__mdiff+0x10c>)
 8027b10:	4602      	mov	r2, r0
 8027b12:	f240 2145 	movw	r1, #581	; 0x245
 8027b16:	e7e5      	b.n	8027ae4 <__mdiff+0x28>
 8027b18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027b1c:	6926      	ldr	r6, [r4, #16]
 8027b1e:	60c5      	str	r5, [r0, #12]
 8027b20:	f104 0914 	add.w	r9, r4, #20
 8027b24:	f108 0514 	add.w	r5, r8, #20
 8027b28:	f100 0e14 	add.w	lr, r0, #20
 8027b2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8027b30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8027b34:	f108 0210 	add.w	r2, r8, #16
 8027b38:	46f2      	mov	sl, lr
 8027b3a:	2100      	movs	r1, #0
 8027b3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8027b40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8027b44:	fa11 f88b 	uxtah	r8, r1, fp
 8027b48:	b299      	uxth	r1, r3
 8027b4a:	0c1b      	lsrs	r3, r3, #16
 8027b4c:	eba8 0801 	sub.w	r8, r8, r1
 8027b50:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8027b54:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8027b58:	fa1f f888 	uxth.w	r8, r8
 8027b5c:	1419      	asrs	r1, r3, #16
 8027b5e:	454e      	cmp	r6, r9
 8027b60:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8027b64:	f84a 3b04 	str.w	r3, [sl], #4
 8027b68:	d8e8      	bhi.n	8027b3c <__mdiff+0x80>
 8027b6a:	1b33      	subs	r3, r6, r4
 8027b6c:	3b15      	subs	r3, #21
 8027b6e:	f023 0303 	bic.w	r3, r3, #3
 8027b72:	3304      	adds	r3, #4
 8027b74:	3415      	adds	r4, #21
 8027b76:	42a6      	cmp	r6, r4
 8027b78:	bf38      	it	cc
 8027b7a:	2304      	movcc	r3, #4
 8027b7c:	441d      	add	r5, r3
 8027b7e:	4473      	add	r3, lr
 8027b80:	469e      	mov	lr, r3
 8027b82:	462e      	mov	r6, r5
 8027b84:	4566      	cmp	r6, ip
 8027b86:	d30e      	bcc.n	8027ba6 <__mdiff+0xea>
 8027b88:	f10c 0203 	add.w	r2, ip, #3
 8027b8c:	1b52      	subs	r2, r2, r5
 8027b8e:	f022 0203 	bic.w	r2, r2, #3
 8027b92:	3d03      	subs	r5, #3
 8027b94:	45ac      	cmp	ip, r5
 8027b96:	bf38      	it	cc
 8027b98:	2200      	movcc	r2, #0
 8027b9a:	4413      	add	r3, r2
 8027b9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8027ba0:	b17a      	cbz	r2, 8027bc2 <__mdiff+0x106>
 8027ba2:	6107      	str	r7, [r0, #16]
 8027ba4:	e7a4      	b.n	8027af0 <__mdiff+0x34>
 8027ba6:	f856 8b04 	ldr.w	r8, [r6], #4
 8027baa:	fa11 f288 	uxtah	r2, r1, r8
 8027bae:	1414      	asrs	r4, r2, #16
 8027bb0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027bb4:	b292      	uxth	r2, r2
 8027bb6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8027bba:	f84e 2b04 	str.w	r2, [lr], #4
 8027bbe:	1421      	asrs	r1, r4, #16
 8027bc0:	e7e0      	b.n	8027b84 <__mdiff+0xc8>
 8027bc2:	3f01      	subs	r7, #1
 8027bc4:	e7ea      	b.n	8027b9c <__mdiff+0xe0>
 8027bc6:	bf00      	nop
 8027bc8:	0802eab5 	.word	0x0802eab5
 8027bcc:	0802eac6 	.word	0x0802eac6

08027bd0 <__d2b>:
 8027bd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027bd4:	460f      	mov	r7, r1
 8027bd6:	2101      	movs	r1, #1
 8027bd8:	ec59 8b10 	vmov	r8, r9, d0
 8027bdc:	4616      	mov	r6, r2
 8027bde:	f7ff fcd5 	bl	802758c <_Balloc>
 8027be2:	4604      	mov	r4, r0
 8027be4:	b930      	cbnz	r0, 8027bf4 <__d2b+0x24>
 8027be6:	4602      	mov	r2, r0
 8027be8:	4b24      	ldr	r3, [pc, #144]	; (8027c7c <__d2b+0xac>)
 8027bea:	4825      	ldr	r0, [pc, #148]	; (8027c80 <__d2b+0xb0>)
 8027bec:	f240 310f 	movw	r1, #783	; 0x30f
 8027bf0:	f7fc fa10 	bl	8024014 <__assert_func>
 8027bf4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8027bf8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8027bfc:	bb2d      	cbnz	r5, 8027c4a <__d2b+0x7a>
 8027bfe:	9301      	str	r3, [sp, #4]
 8027c00:	f1b8 0300 	subs.w	r3, r8, #0
 8027c04:	d026      	beq.n	8027c54 <__d2b+0x84>
 8027c06:	4668      	mov	r0, sp
 8027c08:	9300      	str	r3, [sp, #0]
 8027c0a:	f7ff fd87 	bl	802771c <__lo0bits>
 8027c0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8027c12:	b1e8      	cbz	r0, 8027c50 <__d2b+0x80>
 8027c14:	f1c0 0320 	rsb	r3, r0, #32
 8027c18:	fa02 f303 	lsl.w	r3, r2, r3
 8027c1c:	430b      	orrs	r3, r1
 8027c1e:	40c2      	lsrs	r2, r0
 8027c20:	6163      	str	r3, [r4, #20]
 8027c22:	9201      	str	r2, [sp, #4]
 8027c24:	9b01      	ldr	r3, [sp, #4]
 8027c26:	61a3      	str	r3, [r4, #24]
 8027c28:	2b00      	cmp	r3, #0
 8027c2a:	bf14      	ite	ne
 8027c2c:	2202      	movne	r2, #2
 8027c2e:	2201      	moveq	r2, #1
 8027c30:	6122      	str	r2, [r4, #16]
 8027c32:	b1bd      	cbz	r5, 8027c64 <__d2b+0x94>
 8027c34:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8027c38:	4405      	add	r5, r0
 8027c3a:	603d      	str	r5, [r7, #0]
 8027c3c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027c40:	6030      	str	r0, [r6, #0]
 8027c42:	4620      	mov	r0, r4
 8027c44:	b003      	add	sp, #12
 8027c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027c4e:	e7d6      	b.n	8027bfe <__d2b+0x2e>
 8027c50:	6161      	str	r1, [r4, #20]
 8027c52:	e7e7      	b.n	8027c24 <__d2b+0x54>
 8027c54:	a801      	add	r0, sp, #4
 8027c56:	f7ff fd61 	bl	802771c <__lo0bits>
 8027c5a:	9b01      	ldr	r3, [sp, #4]
 8027c5c:	6163      	str	r3, [r4, #20]
 8027c5e:	3020      	adds	r0, #32
 8027c60:	2201      	movs	r2, #1
 8027c62:	e7e5      	b.n	8027c30 <__d2b+0x60>
 8027c64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8027c68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8027c6c:	6038      	str	r0, [r7, #0]
 8027c6e:	6918      	ldr	r0, [r3, #16]
 8027c70:	f7ff fd34 	bl	80276dc <__hi0bits>
 8027c74:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8027c78:	e7e2      	b.n	8027c40 <__d2b+0x70>
 8027c7a:	bf00      	nop
 8027c7c:	0802eab5 	.word	0x0802eab5
 8027c80:	0802eac6 	.word	0x0802eac6

08027c84 <_strtoul_l.constprop.0>:
 8027c84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8027c88:	4f36      	ldr	r7, [pc, #216]	; (8027d64 <_strtoul_l.constprop.0+0xe0>)
 8027c8a:	4686      	mov	lr, r0
 8027c8c:	460d      	mov	r5, r1
 8027c8e:	4628      	mov	r0, r5
 8027c90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027c94:	5d3e      	ldrb	r6, [r7, r4]
 8027c96:	f016 0608 	ands.w	r6, r6, #8
 8027c9a:	d1f8      	bne.n	8027c8e <_strtoul_l.constprop.0+0xa>
 8027c9c:	2c2d      	cmp	r4, #45	; 0x2d
 8027c9e:	d130      	bne.n	8027d02 <_strtoul_l.constprop.0+0x7e>
 8027ca0:	782c      	ldrb	r4, [r5, #0]
 8027ca2:	2601      	movs	r6, #1
 8027ca4:	1c85      	adds	r5, r0, #2
 8027ca6:	2b00      	cmp	r3, #0
 8027ca8:	d057      	beq.n	8027d5a <_strtoul_l.constprop.0+0xd6>
 8027caa:	2b10      	cmp	r3, #16
 8027cac:	d109      	bne.n	8027cc2 <_strtoul_l.constprop.0+0x3e>
 8027cae:	2c30      	cmp	r4, #48	; 0x30
 8027cb0:	d107      	bne.n	8027cc2 <_strtoul_l.constprop.0+0x3e>
 8027cb2:	7828      	ldrb	r0, [r5, #0]
 8027cb4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8027cb8:	2858      	cmp	r0, #88	; 0x58
 8027cba:	d149      	bne.n	8027d50 <_strtoul_l.constprop.0+0xcc>
 8027cbc:	786c      	ldrb	r4, [r5, #1]
 8027cbe:	2310      	movs	r3, #16
 8027cc0:	3502      	adds	r5, #2
 8027cc2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8027cc6:	2700      	movs	r7, #0
 8027cc8:	fbb8 f8f3 	udiv	r8, r8, r3
 8027ccc:	fb03 f908 	mul.w	r9, r3, r8
 8027cd0:	ea6f 0909 	mvn.w	r9, r9
 8027cd4:	4638      	mov	r0, r7
 8027cd6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8027cda:	f1bc 0f09 	cmp.w	ip, #9
 8027cde:	d815      	bhi.n	8027d0c <_strtoul_l.constprop.0+0x88>
 8027ce0:	4664      	mov	r4, ip
 8027ce2:	42a3      	cmp	r3, r4
 8027ce4:	dd23      	ble.n	8027d2e <_strtoul_l.constprop.0+0xaa>
 8027ce6:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8027cea:	d007      	beq.n	8027cfc <_strtoul_l.constprop.0+0x78>
 8027cec:	4580      	cmp	r8, r0
 8027cee:	d31b      	bcc.n	8027d28 <_strtoul_l.constprop.0+0xa4>
 8027cf0:	d101      	bne.n	8027cf6 <_strtoul_l.constprop.0+0x72>
 8027cf2:	45a1      	cmp	r9, r4
 8027cf4:	db18      	blt.n	8027d28 <_strtoul_l.constprop.0+0xa4>
 8027cf6:	fb00 4003 	mla	r0, r0, r3, r4
 8027cfa:	2701      	movs	r7, #1
 8027cfc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8027d00:	e7e9      	b.n	8027cd6 <_strtoul_l.constprop.0+0x52>
 8027d02:	2c2b      	cmp	r4, #43	; 0x2b
 8027d04:	bf04      	itt	eq
 8027d06:	782c      	ldrbeq	r4, [r5, #0]
 8027d08:	1c85      	addeq	r5, r0, #2
 8027d0a:	e7cc      	b.n	8027ca6 <_strtoul_l.constprop.0+0x22>
 8027d0c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8027d10:	f1bc 0f19 	cmp.w	ip, #25
 8027d14:	d801      	bhi.n	8027d1a <_strtoul_l.constprop.0+0x96>
 8027d16:	3c37      	subs	r4, #55	; 0x37
 8027d18:	e7e3      	b.n	8027ce2 <_strtoul_l.constprop.0+0x5e>
 8027d1a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8027d1e:	f1bc 0f19 	cmp.w	ip, #25
 8027d22:	d804      	bhi.n	8027d2e <_strtoul_l.constprop.0+0xaa>
 8027d24:	3c57      	subs	r4, #87	; 0x57
 8027d26:	e7dc      	b.n	8027ce2 <_strtoul_l.constprop.0+0x5e>
 8027d28:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8027d2c:	e7e6      	b.n	8027cfc <_strtoul_l.constprop.0+0x78>
 8027d2e:	1c7b      	adds	r3, r7, #1
 8027d30:	d106      	bne.n	8027d40 <_strtoul_l.constprop.0+0xbc>
 8027d32:	2322      	movs	r3, #34	; 0x22
 8027d34:	f8ce 3000 	str.w	r3, [lr]
 8027d38:	4638      	mov	r0, r7
 8027d3a:	b932      	cbnz	r2, 8027d4a <_strtoul_l.constprop.0+0xc6>
 8027d3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027d40:	b106      	cbz	r6, 8027d44 <_strtoul_l.constprop.0+0xc0>
 8027d42:	4240      	negs	r0, r0
 8027d44:	2a00      	cmp	r2, #0
 8027d46:	d0f9      	beq.n	8027d3c <_strtoul_l.constprop.0+0xb8>
 8027d48:	b107      	cbz	r7, 8027d4c <_strtoul_l.constprop.0+0xc8>
 8027d4a:	1e69      	subs	r1, r5, #1
 8027d4c:	6011      	str	r1, [r2, #0]
 8027d4e:	e7f5      	b.n	8027d3c <_strtoul_l.constprop.0+0xb8>
 8027d50:	2430      	movs	r4, #48	; 0x30
 8027d52:	2b00      	cmp	r3, #0
 8027d54:	d1b5      	bne.n	8027cc2 <_strtoul_l.constprop.0+0x3e>
 8027d56:	2308      	movs	r3, #8
 8027d58:	e7b3      	b.n	8027cc2 <_strtoul_l.constprop.0+0x3e>
 8027d5a:	2c30      	cmp	r4, #48	; 0x30
 8027d5c:	d0a9      	beq.n	8027cb2 <_strtoul_l.constprop.0+0x2e>
 8027d5e:	230a      	movs	r3, #10
 8027d60:	e7af      	b.n	8027cc2 <_strtoul_l.constprop.0+0x3e>
 8027d62:	bf00      	nop
 8027d64:	0802e5ec 	.word	0x0802e5ec

08027d68 <_strtoul_r>:
 8027d68:	f7ff bf8c 	b.w	8027c84 <_strtoul_l.constprop.0>

08027d6c <strtoul>:
 8027d6c:	4613      	mov	r3, r2
 8027d6e:	460a      	mov	r2, r1
 8027d70:	4601      	mov	r1, r0
 8027d72:	4802      	ldr	r0, [pc, #8]	; (8027d7c <strtoul+0x10>)
 8027d74:	6800      	ldr	r0, [r0, #0]
 8027d76:	f7ff bf85 	b.w	8027c84 <_strtoul_l.constprop.0>
 8027d7a:	bf00      	nop
 8027d7c:	200000a0 	.word	0x200000a0

08027d80 <__ssputs_r>:
 8027d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027d84:	688e      	ldr	r6, [r1, #8]
 8027d86:	461f      	mov	r7, r3
 8027d88:	42be      	cmp	r6, r7
 8027d8a:	680b      	ldr	r3, [r1, #0]
 8027d8c:	4682      	mov	sl, r0
 8027d8e:	460c      	mov	r4, r1
 8027d90:	4690      	mov	r8, r2
 8027d92:	d82c      	bhi.n	8027dee <__ssputs_r+0x6e>
 8027d94:	898a      	ldrh	r2, [r1, #12]
 8027d96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027d9a:	d026      	beq.n	8027dea <__ssputs_r+0x6a>
 8027d9c:	6965      	ldr	r5, [r4, #20]
 8027d9e:	6909      	ldr	r1, [r1, #16]
 8027da0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027da4:	eba3 0901 	sub.w	r9, r3, r1
 8027da8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027dac:	1c7b      	adds	r3, r7, #1
 8027dae:	444b      	add	r3, r9
 8027db0:	106d      	asrs	r5, r5, #1
 8027db2:	429d      	cmp	r5, r3
 8027db4:	bf38      	it	cc
 8027db6:	461d      	movcc	r5, r3
 8027db8:	0553      	lsls	r3, r2, #21
 8027dba:	d527      	bpl.n	8027e0c <__ssputs_r+0x8c>
 8027dbc:	4629      	mov	r1, r5
 8027dbe:	f7fc f977 	bl	80240b0 <_malloc_r>
 8027dc2:	4606      	mov	r6, r0
 8027dc4:	b360      	cbz	r0, 8027e20 <__ssputs_r+0xa0>
 8027dc6:	6921      	ldr	r1, [r4, #16]
 8027dc8:	464a      	mov	r2, r9
 8027dca:	f7fe fcb8 	bl	802673e <memcpy>
 8027dce:	89a3      	ldrh	r3, [r4, #12]
 8027dd0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027dd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027dd8:	81a3      	strh	r3, [r4, #12]
 8027dda:	6126      	str	r6, [r4, #16]
 8027ddc:	6165      	str	r5, [r4, #20]
 8027dde:	444e      	add	r6, r9
 8027de0:	eba5 0509 	sub.w	r5, r5, r9
 8027de4:	6026      	str	r6, [r4, #0]
 8027de6:	60a5      	str	r5, [r4, #8]
 8027de8:	463e      	mov	r6, r7
 8027dea:	42be      	cmp	r6, r7
 8027dec:	d900      	bls.n	8027df0 <__ssputs_r+0x70>
 8027dee:	463e      	mov	r6, r7
 8027df0:	6820      	ldr	r0, [r4, #0]
 8027df2:	4632      	mov	r2, r6
 8027df4:	4641      	mov	r1, r8
 8027df6:	f7fd f98f 	bl	8025118 <memmove>
 8027dfa:	68a3      	ldr	r3, [r4, #8]
 8027dfc:	1b9b      	subs	r3, r3, r6
 8027dfe:	60a3      	str	r3, [r4, #8]
 8027e00:	6823      	ldr	r3, [r4, #0]
 8027e02:	4433      	add	r3, r6
 8027e04:	6023      	str	r3, [r4, #0]
 8027e06:	2000      	movs	r0, #0
 8027e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027e0c:	462a      	mov	r2, r5
 8027e0e:	f000 fc2d 	bl	802866c <_realloc_r>
 8027e12:	4606      	mov	r6, r0
 8027e14:	2800      	cmp	r0, #0
 8027e16:	d1e0      	bne.n	8027dda <__ssputs_r+0x5a>
 8027e18:	6921      	ldr	r1, [r4, #16]
 8027e1a:	4650      	mov	r0, sl
 8027e1c:	f7ff fb22 	bl	8027464 <_free_r>
 8027e20:	230c      	movs	r3, #12
 8027e22:	f8ca 3000 	str.w	r3, [sl]
 8027e26:	89a3      	ldrh	r3, [r4, #12]
 8027e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027e2c:	81a3      	strh	r3, [r4, #12]
 8027e2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027e32:	e7e9      	b.n	8027e08 <__ssputs_r+0x88>

08027e34 <_svfiprintf_r>:
 8027e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e38:	4698      	mov	r8, r3
 8027e3a:	898b      	ldrh	r3, [r1, #12]
 8027e3c:	061b      	lsls	r3, r3, #24
 8027e3e:	b09d      	sub	sp, #116	; 0x74
 8027e40:	4607      	mov	r7, r0
 8027e42:	460d      	mov	r5, r1
 8027e44:	4614      	mov	r4, r2
 8027e46:	d50e      	bpl.n	8027e66 <_svfiprintf_r+0x32>
 8027e48:	690b      	ldr	r3, [r1, #16]
 8027e4a:	b963      	cbnz	r3, 8027e66 <_svfiprintf_r+0x32>
 8027e4c:	2140      	movs	r1, #64	; 0x40
 8027e4e:	f7fc f92f 	bl	80240b0 <_malloc_r>
 8027e52:	6028      	str	r0, [r5, #0]
 8027e54:	6128      	str	r0, [r5, #16]
 8027e56:	b920      	cbnz	r0, 8027e62 <_svfiprintf_r+0x2e>
 8027e58:	230c      	movs	r3, #12
 8027e5a:	603b      	str	r3, [r7, #0]
 8027e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8027e60:	e0d0      	b.n	8028004 <_svfiprintf_r+0x1d0>
 8027e62:	2340      	movs	r3, #64	; 0x40
 8027e64:	616b      	str	r3, [r5, #20]
 8027e66:	2300      	movs	r3, #0
 8027e68:	9309      	str	r3, [sp, #36]	; 0x24
 8027e6a:	2320      	movs	r3, #32
 8027e6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027e70:	f8cd 800c 	str.w	r8, [sp, #12]
 8027e74:	2330      	movs	r3, #48	; 0x30
 8027e76:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 802801c <_svfiprintf_r+0x1e8>
 8027e7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027e7e:	f04f 0901 	mov.w	r9, #1
 8027e82:	4623      	mov	r3, r4
 8027e84:	469a      	mov	sl, r3
 8027e86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027e8a:	b10a      	cbz	r2, 8027e90 <_svfiprintf_r+0x5c>
 8027e8c:	2a25      	cmp	r2, #37	; 0x25
 8027e8e:	d1f9      	bne.n	8027e84 <_svfiprintf_r+0x50>
 8027e90:	ebba 0b04 	subs.w	fp, sl, r4
 8027e94:	d00b      	beq.n	8027eae <_svfiprintf_r+0x7a>
 8027e96:	465b      	mov	r3, fp
 8027e98:	4622      	mov	r2, r4
 8027e9a:	4629      	mov	r1, r5
 8027e9c:	4638      	mov	r0, r7
 8027e9e:	f7ff ff6f 	bl	8027d80 <__ssputs_r>
 8027ea2:	3001      	adds	r0, #1
 8027ea4:	f000 80a9 	beq.w	8027ffa <_svfiprintf_r+0x1c6>
 8027ea8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027eaa:	445a      	add	r2, fp
 8027eac:	9209      	str	r2, [sp, #36]	; 0x24
 8027eae:	f89a 3000 	ldrb.w	r3, [sl]
 8027eb2:	2b00      	cmp	r3, #0
 8027eb4:	f000 80a1 	beq.w	8027ffa <_svfiprintf_r+0x1c6>
 8027eb8:	2300      	movs	r3, #0
 8027eba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8027ebe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027ec2:	f10a 0a01 	add.w	sl, sl, #1
 8027ec6:	9304      	str	r3, [sp, #16]
 8027ec8:	9307      	str	r3, [sp, #28]
 8027eca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027ece:	931a      	str	r3, [sp, #104]	; 0x68
 8027ed0:	4654      	mov	r4, sl
 8027ed2:	2205      	movs	r2, #5
 8027ed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027ed8:	4850      	ldr	r0, [pc, #320]	; (802801c <_svfiprintf_r+0x1e8>)
 8027eda:	f7d8 f989 	bl	80001f0 <memchr>
 8027ede:	9a04      	ldr	r2, [sp, #16]
 8027ee0:	b9d8      	cbnz	r0, 8027f1a <_svfiprintf_r+0xe6>
 8027ee2:	06d0      	lsls	r0, r2, #27
 8027ee4:	bf44      	itt	mi
 8027ee6:	2320      	movmi	r3, #32
 8027ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027eec:	0711      	lsls	r1, r2, #28
 8027eee:	bf44      	itt	mi
 8027ef0:	232b      	movmi	r3, #43	; 0x2b
 8027ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027ef6:	f89a 3000 	ldrb.w	r3, [sl]
 8027efa:	2b2a      	cmp	r3, #42	; 0x2a
 8027efc:	d015      	beq.n	8027f2a <_svfiprintf_r+0xf6>
 8027efe:	9a07      	ldr	r2, [sp, #28]
 8027f00:	4654      	mov	r4, sl
 8027f02:	2000      	movs	r0, #0
 8027f04:	f04f 0c0a 	mov.w	ip, #10
 8027f08:	4621      	mov	r1, r4
 8027f0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027f0e:	3b30      	subs	r3, #48	; 0x30
 8027f10:	2b09      	cmp	r3, #9
 8027f12:	d94d      	bls.n	8027fb0 <_svfiprintf_r+0x17c>
 8027f14:	b1b0      	cbz	r0, 8027f44 <_svfiprintf_r+0x110>
 8027f16:	9207      	str	r2, [sp, #28]
 8027f18:	e014      	b.n	8027f44 <_svfiprintf_r+0x110>
 8027f1a:	eba0 0308 	sub.w	r3, r0, r8
 8027f1e:	fa09 f303 	lsl.w	r3, r9, r3
 8027f22:	4313      	orrs	r3, r2
 8027f24:	9304      	str	r3, [sp, #16]
 8027f26:	46a2      	mov	sl, r4
 8027f28:	e7d2      	b.n	8027ed0 <_svfiprintf_r+0x9c>
 8027f2a:	9b03      	ldr	r3, [sp, #12]
 8027f2c:	1d19      	adds	r1, r3, #4
 8027f2e:	681b      	ldr	r3, [r3, #0]
 8027f30:	9103      	str	r1, [sp, #12]
 8027f32:	2b00      	cmp	r3, #0
 8027f34:	bfbb      	ittet	lt
 8027f36:	425b      	neglt	r3, r3
 8027f38:	f042 0202 	orrlt.w	r2, r2, #2
 8027f3c:	9307      	strge	r3, [sp, #28]
 8027f3e:	9307      	strlt	r3, [sp, #28]
 8027f40:	bfb8      	it	lt
 8027f42:	9204      	strlt	r2, [sp, #16]
 8027f44:	7823      	ldrb	r3, [r4, #0]
 8027f46:	2b2e      	cmp	r3, #46	; 0x2e
 8027f48:	d10c      	bne.n	8027f64 <_svfiprintf_r+0x130>
 8027f4a:	7863      	ldrb	r3, [r4, #1]
 8027f4c:	2b2a      	cmp	r3, #42	; 0x2a
 8027f4e:	d134      	bne.n	8027fba <_svfiprintf_r+0x186>
 8027f50:	9b03      	ldr	r3, [sp, #12]
 8027f52:	1d1a      	adds	r2, r3, #4
 8027f54:	681b      	ldr	r3, [r3, #0]
 8027f56:	9203      	str	r2, [sp, #12]
 8027f58:	2b00      	cmp	r3, #0
 8027f5a:	bfb8      	it	lt
 8027f5c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8027f60:	3402      	adds	r4, #2
 8027f62:	9305      	str	r3, [sp, #20]
 8027f64:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 802802c <_svfiprintf_r+0x1f8>
 8027f68:	7821      	ldrb	r1, [r4, #0]
 8027f6a:	2203      	movs	r2, #3
 8027f6c:	4650      	mov	r0, sl
 8027f6e:	f7d8 f93f 	bl	80001f0 <memchr>
 8027f72:	b138      	cbz	r0, 8027f84 <_svfiprintf_r+0x150>
 8027f74:	9b04      	ldr	r3, [sp, #16]
 8027f76:	eba0 000a 	sub.w	r0, r0, sl
 8027f7a:	2240      	movs	r2, #64	; 0x40
 8027f7c:	4082      	lsls	r2, r0
 8027f7e:	4313      	orrs	r3, r2
 8027f80:	3401      	adds	r4, #1
 8027f82:	9304      	str	r3, [sp, #16]
 8027f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027f88:	4825      	ldr	r0, [pc, #148]	; (8028020 <_svfiprintf_r+0x1ec>)
 8027f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8027f8e:	2206      	movs	r2, #6
 8027f90:	f7d8 f92e 	bl	80001f0 <memchr>
 8027f94:	2800      	cmp	r0, #0
 8027f96:	d038      	beq.n	802800a <_svfiprintf_r+0x1d6>
 8027f98:	4b22      	ldr	r3, [pc, #136]	; (8028024 <_svfiprintf_r+0x1f0>)
 8027f9a:	bb1b      	cbnz	r3, 8027fe4 <_svfiprintf_r+0x1b0>
 8027f9c:	9b03      	ldr	r3, [sp, #12]
 8027f9e:	3307      	adds	r3, #7
 8027fa0:	f023 0307 	bic.w	r3, r3, #7
 8027fa4:	3308      	adds	r3, #8
 8027fa6:	9303      	str	r3, [sp, #12]
 8027fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027faa:	4433      	add	r3, r6
 8027fac:	9309      	str	r3, [sp, #36]	; 0x24
 8027fae:	e768      	b.n	8027e82 <_svfiprintf_r+0x4e>
 8027fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8027fb4:	460c      	mov	r4, r1
 8027fb6:	2001      	movs	r0, #1
 8027fb8:	e7a6      	b.n	8027f08 <_svfiprintf_r+0xd4>
 8027fba:	2300      	movs	r3, #0
 8027fbc:	3401      	adds	r4, #1
 8027fbe:	9305      	str	r3, [sp, #20]
 8027fc0:	4619      	mov	r1, r3
 8027fc2:	f04f 0c0a 	mov.w	ip, #10
 8027fc6:	4620      	mov	r0, r4
 8027fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027fcc:	3a30      	subs	r2, #48	; 0x30
 8027fce:	2a09      	cmp	r2, #9
 8027fd0:	d903      	bls.n	8027fda <_svfiprintf_r+0x1a6>
 8027fd2:	2b00      	cmp	r3, #0
 8027fd4:	d0c6      	beq.n	8027f64 <_svfiprintf_r+0x130>
 8027fd6:	9105      	str	r1, [sp, #20]
 8027fd8:	e7c4      	b.n	8027f64 <_svfiprintf_r+0x130>
 8027fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8027fde:	4604      	mov	r4, r0
 8027fe0:	2301      	movs	r3, #1
 8027fe2:	e7f0      	b.n	8027fc6 <_svfiprintf_r+0x192>
 8027fe4:	ab03      	add	r3, sp, #12
 8027fe6:	9300      	str	r3, [sp, #0]
 8027fe8:	462a      	mov	r2, r5
 8027fea:	4b0f      	ldr	r3, [pc, #60]	; (8028028 <_svfiprintf_r+0x1f4>)
 8027fec:	a904      	add	r1, sp, #16
 8027fee:	4638      	mov	r0, r7
 8027ff0:	f7fc fa4c 	bl	802448c <_printf_float>
 8027ff4:	1c42      	adds	r2, r0, #1
 8027ff6:	4606      	mov	r6, r0
 8027ff8:	d1d6      	bne.n	8027fa8 <_svfiprintf_r+0x174>
 8027ffa:	89ab      	ldrh	r3, [r5, #12]
 8027ffc:	065b      	lsls	r3, r3, #25
 8027ffe:	f53f af2d 	bmi.w	8027e5c <_svfiprintf_r+0x28>
 8028002:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028004:	b01d      	add	sp, #116	; 0x74
 8028006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802800a:	ab03      	add	r3, sp, #12
 802800c:	9300      	str	r3, [sp, #0]
 802800e:	462a      	mov	r2, r5
 8028010:	4b05      	ldr	r3, [pc, #20]	; (8028028 <_svfiprintf_r+0x1f4>)
 8028012:	a904      	add	r1, sp, #16
 8028014:	4638      	mov	r0, r7
 8028016:	f7fc fcdd 	bl	80249d4 <_printf_i>
 802801a:	e7eb      	b.n	8027ff4 <_svfiprintf_r+0x1c0>
 802801c:	0802ec1c 	.word	0x0802ec1c
 8028020:	0802ec26 	.word	0x0802ec26
 8028024:	0802448d 	.word	0x0802448d
 8028028:	08027d81 	.word	0x08027d81
 802802c:	0802ec22 	.word	0x0802ec22

08028030 <__sfputc_r>:
 8028030:	6893      	ldr	r3, [r2, #8]
 8028032:	3b01      	subs	r3, #1
 8028034:	2b00      	cmp	r3, #0
 8028036:	b410      	push	{r4}
 8028038:	6093      	str	r3, [r2, #8]
 802803a:	da08      	bge.n	802804e <__sfputc_r+0x1e>
 802803c:	6994      	ldr	r4, [r2, #24]
 802803e:	42a3      	cmp	r3, r4
 8028040:	db01      	blt.n	8028046 <__sfputc_r+0x16>
 8028042:	290a      	cmp	r1, #10
 8028044:	d103      	bne.n	802804e <__sfputc_r+0x1e>
 8028046:	f85d 4b04 	ldr.w	r4, [sp], #4
 802804a:	f7fc bfc0 	b.w	8024fce <__swbuf_r>
 802804e:	6813      	ldr	r3, [r2, #0]
 8028050:	1c58      	adds	r0, r3, #1
 8028052:	6010      	str	r0, [r2, #0]
 8028054:	7019      	strb	r1, [r3, #0]
 8028056:	4608      	mov	r0, r1
 8028058:	f85d 4b04 	ldr.w	r4, [sp], #4
 802805c:	4770      	bx	lr

0802805e <__sfputs_r>:
 802805e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028060:	4606      	mov	r6, r0
 8028062:	460f      	mov	r7, r1
 8028064:	4614      	mov	r4, r2
 8028066:	18d5      	adds	r5, r2, r3
 8028068:	42ac      	cmp	r4, r5
 802806a:	d101      	bne.n	8028070 <__sfputs_r+0x12>
 802806c:	2000      	movs	r0, #0
 802806e:	e007      	b.n	8028080 <__sfputs_r+0x22>
 8028070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028074:	463a      	mov	r2, r7
 8028076:	4630      	mov	r0, r6
 8028078:	f7ff ffda 	bl	8028030 <__sfputc_r>
 802807c:	1c43      	adds	r3, r0, #1
 802807e:	d1f3      	bne.n	8028068 <__sfputs_r+0xa>
 8028080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08028084 <_vfiprintf_r>:
 8028084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028088:	460d      	mov	r5, r1
 802808a:	b09d      	sub	sp, #116	; 0x74
 802808c:	4614      	mov	r4, r2
 802808e:	4698      	mov	r8, r3
 8028090:	4606      	mov	r6, r0
 8028092:	b118      	cbz	r0, 802809c <_vfiprintf_r+0x18>
 8028094:	6a03      	ldr	r3, [r0, #32]
 8028096:	b90b      	cbnz	r3, 802809c <_vfiprintf_r+0x18>
 8028098:	f7fc fe4a 	bl	8024d30 <__sinit>
 802809c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802809e:	07d9      	lsls	r1, r3, #31
 80280a0:	d405      	bmi.n	80280ae <_vfiprintf_r+0x2a>
 80280a2:	89ab      	ldrh	r3, [r5, #12]
 80280a4:	059a      	lsls	r2, r3, #22
 80280a6:	d402      	bmi.n	80280ae <_vfiprintf_r+0x2a>
 80280a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80280aa:	f7fe fb3d 	bl	8026728 <__retarget_lock_acquire_recursive>
 80280ae:	89ab      	ldrh	r3, [r5, #12]
 80280b0:	071b      	lsls	r3, r3, #28
 80280b2:	d501      	bpl.n	80280b8 <_vfiprintf_r+0x34>
 80280b4:	692b      	ldr	r3, [r5, #16]
 80280b6:	b99b      	cbnz	r3, 80280e0 <_vfiprintf_r+0x5c>
 80280b8:	4629      	mov	r1, r5
 80280ba:	4630      	mov	r0, r6
 80280bc:	f7fc ffc4 	bl	8025048 <__swsetup_r>
 80280c0:	b170      	cbz	r0, 80280e0 <_vfiprintf_r+0x5c>
 80280c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80280c4:	07dc      	lsls	r4, r3, #31
 80280c6:	d504      	bpl.n	80280d2 <_vfiprintf_r+0x4e>
 80280c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80280cc:	b01d      	add	sp, #116	; 0x74
 80280ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80280d2:	89ab      	ldrh	r3, [r5, #12]
 80280d4:	0598      	lsls	r0, r3, #22
 80280d6:	d4f7      	bmi.n	80280c8 <_vfiprintf_r+0x44>
 80280d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80280da:	f7fe fb27 	bl	802672c <__retarget_lock_release_recursive>
 80280de:	e7f3      	b.n	80280c8 <_vfiprintf_r+0x44>
 80280e0:	2300      	movs	r3, #0
 80280e2:	9309      	str	r3, [sp, #36]	; 0x24
 80280e4:	2320      	movs	r3, #32
 80280e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80280ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80280ee:	2330      	movs	r3, #48	; 0x30
 80280f0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80282a4 <_vfiprintf_r+0x220>
 80280f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80280f8:	f04f 0901 	mov.w	r9, #1
 80280fc:	4623      	mov	r3, r4
 80280fe:	469a      	mov	sl, r3
 8028100:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028104:	b10a      	cbz	r2, 802810a <_vfiprintf_r+0x86>
 8028106:	2a25      	cmp	r2, #37	; 0x25
 8028108:	d1f9      	bne.n	80280fe <_vfiprintf_r+0x7a>
 802810a:	ebba 0b04 	subs.w	fp, sl, r4
 802810e:	d00b      	beq.n	8028128 <_vfiprintf_r+0xa4>
 8028110:	465b      	mov	r3, fp
 8028112:	4622      	mov	r2, r4
 8028114:	4629      	mov	r1, r5
 8028116:	4630      	mov	r0, r6
 8028118:	f7ff ffa1 	bl	802805e <__sfputs_r>
 802811c:	3001      	adds	r0, #1
 802811e:	f000 80a9 	beq.w	8028274 <_vfiprintf_r+0x1f0>
 8028122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028124:	445a      	add	r2, fp
 8028126:	9209      	str	r2, [sp, #36]	; 0x24
 8028128:	f89a 3000 	ldrb.w	r3, [sl]
 802812c:	2b00      	cmp	r3, #0
 802812e:	f000 80a1 	beq.w	8028274 <_vfiprintf_r+0x1f0>
 8028132:	2300      	movs	r3, #0
 8028134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8028138:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802813c:	f10a 0a01 	add.w	sl, sl, #1
 8028140:	9304      	str	r3, [sp, #16]
 8028142:	9307      	str	r3, [sp, #28]
 8028144:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028148:	931a      	str	r3, [sp, #104]	; 0x68
 802814a:	4654      	mov	r4, sl
 802814c:	2205      	movs	r2, #5
 802814e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028152:	4854      	ldr	r0, [pc, #336]	; (80282a4 <_vfiprintf_r+0x220>)
 8028154:	f7d8 f84c 	bl	80001f0 <memchr>
 8028158:	9a04      	ldr	r2, [sp, #16]
 802815a:	b9d8      	cbnz	r0, 8028194 <_vfiprintf_r+0x110>
 802815c:	06d1      	lsls	r1, r2, #27
 802815e:	bf44      	itt	mi
 8028160:	2320      	movmi	r3, #32
 8028162:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028166:	0713      	lsls	r3, r2, #28
 8028168:	bf44      	itt	mi
 802816a:	232b      	movmi	r3, #43	; 0x2b
 802816c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028170:	f89a 3000 	ldrb.w	r3, [sl]
 8028174:	2b2a      	cmp	r3, #42	; 0x2a
 8028176:	d015      	beq.n	80281a4 <_vfiprintf_r+0x120>
 8028178:	9a07      	ldr	r2, [sp, #28]
 802817a:	4654      	mov	r4, sl
 802817c:	2000      	movs	r0, #0
 802817e:	f04f 0c0a 	mov.w	ip, #10
 8028182:	4621      	mov	r1, r4
 8028184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028188:	3b30      	subs	r3, #48	; 0x30
 802818a:	2b09      	cmp	r3, #9
 802818c:	d94d      	bls.n	802822a <_vfiprintf_r+0x1a6>
 802818e:	b1b0      	cbz	r0, 80281be <_vfiprintf_r+0x13a>
 8028190:	9207      	str	r2, [sp, #28]
 8028192:	e014      	b.n	80281be <_vfiprintf_r+0x13a>
 8028194:	eba0 0308 	sub.w	r3, r0, r8
 8028198:	fa09 f303 	lsl.w	r3, r9, r3
 802819c:	4313      	orrs	r3, r2
 802819e:	9304      	str	r3, [sp, #16]
 80281a0:	46a2      	mov	sl, r4
 80281a2:	e7d2      	b.n	802814a <_vfiprintf_r+0xc6>
 80281a4:	9b03      	ldr	r3, [sp, #12]
 80281a6:	1d19      	adds	r1, r3, #4
 80281a8:	681b      	ldr	r3, [r3, #0]
 80281aa:	9103      	str	r1, [sp, #12]
 80281ac:	2b00      	cmp	r3, #0
 80281ae:	bfbb      	ittet	lt
 80281b0:	425b      	neglt	r3, r3
 80281b2:	f042 0202 	orrlt.w	r2, r2, #2
 80281b6:	9307      	strge	r3, [sp, #28]
 80281b8:	9307      	strlt	r3, [sp, #28]
 80281ba:	bfb8      	it	lt
 80281bc:	9204      	strlt	r2, [sp, #16]
 80281be:	7823      	ldrb	r3, [r4, #0]
 80281c0:	2b2e      	cmp	r3, #46	; 0x2e
 80281c2:	d10c      	bne.n	80281de <_vfiprintf_r+0x15a>
 80281c4:	7863      	ldrb	r3, [r4, #1]
 80281c6:	2b2a      	cmp	r3, #42	; 0x2a
 80281c8:	d134      	bne.n	8028234 <_vfiprintf_r+0x1b0>
 80281ca:	9b03      	ldr	r3, [sp, #12]
 80281cc:	1d1a      	adds	r2, r3, #4
 80281ce:	681b      	ldr	r3, [r3, #0]
 80281d0:	9203      	str	r2, [sp, #12]
 80281d2:	2b00      	cmp	r3, #0
 80281d4:	bfb8      	it	lt
 80281d6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80281da:	3402      	adds	r4, #2
 80281dc:	9305      	str	r3, [sp, #20]
 80281de:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80282b4 <_vfiprintf_r+0x230>
 80281e2:	7821      	ldrb	r1, [r4, #0]
 80281e4:	2203      	movs	r2, #3
 80281e6:	4650      	mov	r0, sl
 80281e8:	f7d8 f802 	bl	80001f0 <memchr>
 80281ec:	b138      	cbz	r0, 80281fe <_vfiprintf_r+0x17a>
 80281ee:	9b04      	ldr	r3, [sp, #16]
 80281f0:	eba0 000a 	sub.w	r0, r0, sl
 80281f4:	2240      	movs	r2, #64	; 0x40
 80281f6:	4082      	lsls	r2, r0
 80281f8:	4313      	orrs	r3, r2
 80281fa:	3401      	adds	r4, #1
 80281fc:	9304      	str	r3, [sp, #16]
 80281fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028202:	4829      	ldr	r0, [pc, #164]	; (80282a8 <_vfiprintf_r+0x224>)
 8028204:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028208:	2206      	movs	r2, #6
 802820a:	f7d7 fff1 	bl	80001f0 <memchr>
 802820e:	2800      	cmp	r0, #0
 8028210:	d03f      	beq.n	8028292 <_vfiprintf_r+0x20e>
 8028212:	4b26      	ldr	r3, [pc, #152]	; (80282ac <_vfiprintf_r+0x228>)
 8028214:	bb1b      	cbnz	r3, 802825e <_vfiprintf_r+0x1da>
 8028216:	9b03      	ldr	r3, [sp, #12]
 8028218:	3307      	adds	r3, #7
 802821a:	f023 0307 	bic.w	r3, r3, #7
 802821e:	3308      	adds	r3, #8
 8028220:	9303      	str	r3, [sp, #12]
 8028222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028224:	443b      	add	r3, r7
 8028226:	9309      	str	r3, [sp, #36]	; 0x24
 8028228:	e768      	b.n	80280fc <_vfiprintf_r+0x78>
 802822a:	fb0c 3202 	mla	r2, ip, r2, r3
 802822e:	460c      	mov	r4, r1
 8028230:	2001      	movs	r0, #1
 8028232:	e7a6      	b.n	8028182 <_vfiprintf_r+0xfe>
 8028234:	2300      	movs	r3, #0
 8028236:	3401      	adds	r4, #1
 8028238:	9305      	str	r3, [sp, #20]
 802823a:	4619      	mov	r1, r3
 802823c:	f04f 0c0a 	mov.w	ip, #10
 8028240:	4620      	mov	r0, r4
 8028242:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028246:	3a30      	subs	r2, #48	; 0x30
 8028248:	2a09      	cmp	r2, #9
 802824a:	d903      	bls.n	8028254 <_vfiprintf_r+0x1d0>
 802824c:	2b00      	cmp	r3, #0
 802824e:	d0c6      	beq.n	80281de <_vfiprintf_r+0x15a>
 8028250:	9105      	str	r1, [sp, #20]
 8028252:	e7c4      	b.n	80281de <_vfiprintf_r+0x15a>
 8028254:	fb0c 2101 	mla	r1, ip, r1, r2
 8028258:	4604      	mov	r4, r0
 802825a:	2301      	movs	r3, #1
 802825c:	e7f0      	b.n	8028240 <_vfiprintf_r+0x1bc>
 802825e:	ab03      	add	r3, sp, #12
 8028260:	9300      	str	r3, [sp, #0]
 8028262:	462a      	mov	r2, r5
 8028264:	4b12      	ldr	r3, [pc, #72]	; (80282b0 <_vfiprintf_r+0x22c>)
 8028266:	a904      	add	r1, sp, #16
 8028268:	4630      	mov	r0, r6
 802826a:	f7fc f90f 	bl	802448c <_printf_float>
 802826e:	4607      	mov	r7, r0
 8028270:	1c78      	adds	r0, r7, #1
 8028272:	d1d6      	bne.n	8028222 <_vfiprintf_r+0x19e>
 8028274:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028276:	07d9      	lsls	r1, r3, #31
 8028278:	d405      	bmi.n	8028286 <_vfiprintf_r+0x202>
 802827a:	89ab      	ldrh	r3, [r5, #12]
 802827c:	059a      	lsls	r2, r3, #22
 802827e:	d402      	bmi.n	8028286 <_vfiprintf_r+0x202>
 8028280:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028282:	f7fe fa53 	bl	802672c <__retarget_lock_release_recursive>
 8028286:	89ab      	ldrh	r3, [r5, #12]
 8028288:	065b      	lsls	r3, r3, #25
 802828a:	f53f af1d 	bmi.w	80280c8 <_vfiprintf_r+0x44>
 802828e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8028290:	e71c      	b.n	80280cc <_vfiprintf_r+0x48>
 8028292:	ab03      	add	r3, sp, #12
 8028294:	9300      	str	r3, [sp, #0]
 8028296:	462a      	mov	r2, r5
 8028298:	4b05      	ldr	r3, [pc, #20]	; (80282b0 <_vfiprintf_r+0x22c>)
 802829a:	a904      	add	r1, sp, #16
 802829c:	4630      	mov	r0, r6
 802829e:	f7fc fb99 	bl	80249d4 <_printf_i>
 80282a2:	e7e4      	b.n	802826e <_vfiprintf_r+0x1ea>
 80282a4:	0802ec1c 	.word	0x0802ec1c
 80282a8:	0802ec26 	.word	0x0802ec26
 80282ac:	0802448d 	.word	0x0802448d
 80282b0:	0802805f 	.word	0x0802805f
 80282b4:	0802ec22 	.word	0x0802ec22

080282b8 <__sflush_r>:
 80282b8:	898a      	ldrh	r2, [r1, #12]
 80282ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80282be:	4605      	mov	r5, r0
 80282c0:	0710      	lsls	r0, r2, #28
 80282c2:	460c      	mov	r4, r1
 80282c4:	d458      	bmi.n	8028378 <__sflush_r+0xc0>
 80282c6:	684b      	ldr	r3, [r1, #4]
 80282c8:	2b00      	cmp	r3, #0
 80282ca:	dc05      	bgt.n	80282d8 <__sflush_r+0x20>
 80282cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80282ce:	2b00      	cmp	r3, #0
 80282d0:	dc02      	bgt.n	80282d8 <__sflush_r+0x20>
 80282d2:	2000      	movs	r0, #0
 80282d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80282d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80282da:	2e00      	cmp	r6, #0
 80282dc:	d0f9      	beq.n	80282d2 <__sflush_r+0x1a>
 80282de:	2300      	movs	r3, #0
 80282e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80282e4:	682f      	ldr	r7, [r5, #0]
 80282e6:	6a21      	ldr	r1, [r4, #32]
 80282e8:	602b      	str	r3, [r5, #0]
 80282ea:	d032      	beq.n	8028352 <__sflush_r+0x9a>
 80282ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80282ee:	89a3      	ldrh	r3, [r4, #12]
 80282f0:	075a      	lsls	r2, r3, #29
 80282f2:	d505      	bpl.n	8028300 <__sflush_r+0x48>
 80282f4:	6863      	ldr	r3, [r4, #4]
 80282f6:	1ac0      	subs	r0, r0, r3
 80282f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80282fa:	b10b      	cbz	r3, 8028300 <__sflush_r+0x48>
 80282fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80282fe:	1ac0      	subs	r0, r0, r3
 8028300:	2300      	movs	r3, #0
 8028302:	4602      	mov	r2, r0
 8028304:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8028306:	6a21      	ldr	r1, [r4, #32]
 8028308:	4628      	mov	r0, r5
 802830a:	47b0      	blx	r6
 802830c:	1c43      	adds	r3, r0, #1
 802830e:	89a3      	ldrh	r3, [r4, #12]
 8028310:	d106      	bne.n	8028320 <__sflush_r+0x68>
 8028312:	6829      	ldr	r1, [r5, #0]
 8028314:	291d      	cmp	r1, #29
 8028316:	d82b      	bhi.n	8028370 <__sflush_r+0xb8>
 8028318:	4a29      	ldr	r2, [pc, #164]	; (80283c0 <__sflush_r+0x108>)
 802831a:	410a      	asrs	r2, r1
 802831c:	07d6      	lsls	r6, r2, #31
 802831e:	d427      	bmi.n	8028370 <__sflush_r+0xb8>
 8028320:	2200      	movs	r2, #0
 8028322:	6062      	str	r2, [r4, #4]
 8028324:	04d9      	lsls	r1, r3, #19
 8028326:	6922      	ldr	r2, [r4, #16]
 8028328:	6022      	str	r2, [r4, #0]
 802832a:	d504      	bpl.n	8028336 <__sflush_r+0x7e>
 802832c:	1c42      	adds	r2, r0, #1
 802832e:	d101      	bne.n	8028334 <__sflush_r+0x7c>
 8028330:	682b      	ldr	r3, [r5, #0]
 8028332:	b903      	cbnz	r3, 8028336 <__sflush_r+0x7e>
 8028334:	6560      	str	r0, [r4, #84]	; 0x54
 8028336:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8028338:	602f      	str	r7, [r5, #0]
 802833a:	2900      	cmp	r1, #0
 802833c:	d0c9      	beq.n	80282d2 <__sflush_r+0x1a>
 802833e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028342:	4299      	cmp	r1, r3
 8028344:	d002      	beq.n	802834c <__sflush_r+0x94>
 8028346:	4628      	mov	r0, r5
 8028348:	f7ff f88c 	bl	8027464 <_free_r>
 802834c:	2000      	movs	r0, #0
 802834e:	6360      	str	r0, [r4, #52]	; 0x34
 8028350:	e7c0      	b.n	80282d4 <__sflush_r+0x1c>
 8028352:	2301      	movs	r3, #1
 8028354:	4628      	mov	r0, r5
 8028356:	47b0      	blx	r6
 8028358:	1c41      	adds	r1, r0, #1
 802835a:	d1c8      	bne.n	80282ee <__sflush_r+0x36>
 802835c:	682b      	ldr	r3, [r5, #0]
 802835e:	2b00      	cmp	r3, #0
 8028360:	d0c5      	beq.n	80282ee <__sflush_r+0x36>
 8028362:	2b1d      	cmp	r3, #29
 8028364:	d001      	beq.n	802836a <__sflush_r+0xb2>
 8028366:	2b16      	cmp	r3, #22
 8028368:	d101      	bne.n	802836e <__sflush_r+0xb6>
 802836a:	602f      	str	r7, [r5, #0]
 802836c:	e7b1      	b.n	80282d2 <__sflush_r+0x1a>
 802836e:	89a3      	ldrh	r3, [r4, #12]
 8028370:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028374:	81a3      	strh	r3, [r4, #12]
 8028376:	e7ad      	b.n	80282d4 <__sflush_r+0x1c>
 8028378:	690f      	ldr	r7, [r1, #16]
 802837a:	2f00      	cmp	r7, #0
 802837c:	d0a9      	beq.n	80282d2 <__sflush_r+0x1a>
 802837e:	0793      	lsls	r3, r2, #30
 8028380:	680e      	ldr	r6, [r1, #0]
 8028382:	bf08      	it	eq
 8028384:	694b      	ldreq	r3, [r1, #20]
 8028386:	600f      	str	r7, [r1, #0]
 8028388:	bf18      	it	ne
 802838a:	2300      	movne	r3, #0
 802838c:	eba6 0807 	sub.w	r8, r6, r7
 8028390:	608b      	str	r3, [r1, #8]
 8028392:	f1b8 0f00 	cmp.w	r8, #0
 8028396:	dd9c      	ble.n	80282d2 <__sflush_r+0x1a>
 8028398:	6a21      	ldr	r1, [r4, #32]
 802839a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802839c:	4643      	mov	r3, r8
 802839e:	463a      	mov	r2, r7
 80283a0:	4628      	mov	r0, r5
 80283a2:	47b0      	blx	r6
 80283a4:	2800      	cmp	r0, #0
 80283a6:	dc06      	bgt.n	80283b6 <__sflush_r+0xfe>
 80283a8:	89a3      	ldrh	r3, [r4, #12]
 80283aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80283ae:	81a3      	strh	r3, [r4, #12]
 80283b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80283b4:	e78e      	b.n	80282d4 <__sflush_r+0x1c>
 80283b6:	4407      	add	r7, r0
 80283b8:	eba8 0800 	sub.w	r8, r8, r0
 80283bc:	e7e9      	b.n	8028392 <__sflush_r+0xda>
 80283be:	bf00      	nop
 80283c0:	dfbffffe 	.word	0xdfbffffe

080283c4 <_fflush_r>:
 80283c4:	b538      	push	{r3, r4, r5, lr}
 80283c6:	690b      	ldr	r3, [r1, #16]
 80283c8:	4605      	mov	r5, r0
 80283ca:	460c      	mov	r4, r1
 80283cc:	b913      	cbnz	r3, 80283d4 <_fflush_r+0x10>
 80283ce:	2500      	movs	r5, #0
 80283d0:	4628      	mov	r0, r5
 80283d2:	bd38      	pop	{r3, r4, r5, pc}
 80283d4:	b118      	cbz	r0, 80283de <_fflush_r+0x1a>
 80283d6:	6a03      	ldr	r3, [r0, #32]
 80283d8:	b90b      	cbnz	r3, 80283de <_fflush_r+0x1a>
 80283da:	f7fc fca9 	bl	8024d30 <__sinit>
 80283de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80283e2:	2b00      	cmp	r3, #0
 80283e4:	d0f3      	beq.n	80283ce <_fflush_r+0xa>
 80283e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80283e8:	07d0      	lsls	r0, r2, #31
 80283ea:	d404      	bmi.n	80283f6 <_fflush_r+0x32>
 80283ec:	0599      	lsls	r1, r3, #22
 80283ee:	d402      	bmi.n	80283f6 <_fflush_r+0x32>
 80283f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80283f2:	f7fe f999 	bl	8026728 <__retarget_lock_acquire_recursive>
 80283f6:	4628      	mov	r0, r5
 80283f8:	4621      	mov	r1, r4
 80283fa:	f7ff ff5d 	bl	80282b8 <__sflush_r>
 80283fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028400:	07da      	lsls	r2, r3, #31
 8028402:	4605      	mov	r5, r0
 8028404:	d4e4      	bmi.n	80283d0 <_fflush_r+0xc>
 8028406:	89a3      	ldrh	r3, [r4, #12]
 8028408:	059b      	lsls	r3, r3, #22
 802840a:	d4e1      	bmi.n	80283d0 <_fflush_r+0xc>
 802840c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802840e:	f7fe f98d 	bl	802672c <__retarget_lock_release_recursive>
 8028412:	e7dd      	b.n	80283d0 <_fflush_r+0xc>

08028414 <__swhatbuf_r>:
 8028414:	b570      	push	{r4, r5, r6, lr}
 8028416:	460c      	mov	r4, r1
 8028418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802841c:	2900      	cmp	r1, #0
 802841e:	b096      	sub	sp, #88	; 0x58
 8028420:	4615      	mov	r5, r2
 8028422:	461e      	mov	r6, r3
 8028424:	da0d      	bge.n	8028442 <__swhatbuf_r+0x2e>
 8028426:	89a3      	ldrh	r3, [r4, #12]
 8028428:	f013 0f80 	tst.w	r3, #128	; 0x80
 802842c:	f04f 0100 	mov.w	r1, #0
 8028430:	bf0c      	ite	eq
 8028432:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8028436:	2340      	movne	r3, #64	; 0x40
 8028438:	2000      	movs	r0, #0
 802843a:	6031      	str	r1, [r6, #0]
 802843c:	602b      	str	r3, [r5, #0]
 802843e:	b016      	add	sp, #88	; 0x58
 8028440:	bd70      	pop	{r4, r5, r6, pc}
 8028442:	466a      	mov	r2, sp
 8028444:	f000 f8a8 	bl	8028598 <_fstat_r>
 8028448:	2800      	cmp	r0, #0
 802844a:	dbec      	blt.n	8028426 <__swhatbuf_r+0x12>
 802844c:	9901      	ldr	r1, [sp, #4]
 802844e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8028452:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8028456:	4259      	negs	r1, r3
 8028458:	4159      	adcs	r1, r3
 802845a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802845e:	e7eb      	b.n	8028438 <__swhatbuf_r+0x24>

08028460 <__smakebuf_r>:
 8028460:	898b      	ldrh	r3, [r1, #12]
 8028462:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8028464:	079d      	lsls	r5, r3, #30
 8028466:	4606      	mov	r6, r0
 8028468:	460c      	mov	r4, r1
 802846a:	d507      	bpl.n	802847c <__smakebuf_r+0x1c>
 802846c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8028470:	6023      	str	r3, [r4, #0]
 8028472:	6123      	str	r3, [r4, #16]
 8028474:	2301      	movs	r3, #1
 8028476:	6163      	str	r3, [r4, #20]
 8028478:	b002      	add	sp, #8
 802847a:	bd70      	pop	{r4, r5, r6, pc}
 802847c:	ab01      	add	r3, sp, #4
 802847e:	466a      	mov	r2, sp
 8028480:	f7ff ffc8 	bl	8028414 <__swhatbuf_r>
 8028484:	9900      	ldr	r1, [sp, #0]
 8028486:	4605      	mov	r5, r0
 8028488:	4630      	mov	r0, r6
 802848a:	f7fb fe11 	bl	80240b0 <_malloc_r>
 802848e:	b948      	cbnz	r0, 80284a4 <__smakebuf_r+0x44>
 8028490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8028494:	059a      	lsls	r2, r3, #22
 8028496:	d4ef      	bmi.n	8028478 <__smakebuf_r+0x18>
 8028498:	f023 0303 	bic.w	r3, r3, #3
 802849c:	f043 0302 	orr.w	r3, r3, #2
 80284a0:	81a3      	strh	r3, [r4, #12]
 80284a2:	e7e3      	b.n	802846c <__smakebuf_r+0xc>
 80284a4:	89a3      	ldrh	r3, [r4, #12]
 80284a6:	6020      	str	r0, [r4, #0]
 80284a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80284ac:	81a3      	strh	r3, [r4, #12]
 80284ae:	9b00      	ldr	r3, [sp, #0]
 80284b0:	6163      	str	r3, [r4, #20]
 80284b2:	9b01      	ldr	r3, [sp, #4]
 80284b4:	6120      	str	r0, [r4, #16]
 80284b6:	b15b      	cbz	r3, 80284d0 <__smakebuf_r+0x70>
 80284b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80284bc:	4630      	mov	r0, r6
 80284be:	f000 f87d 	bl	80285bc <_isatty_r>
 80284c2:	b128      	cbz	r0, 80284d0 <__smakebuf_r+0x70>
 80284c4:	89a3      	ldrh	r3, [r4, #12]
 80284c6:	f023 0303 	bic.w	r3, r3, #3
 80284ca:	f043 0301 	orr.w	r3, r3, #1
 80284ce:	81a3      	strh	r3, [r4, #12]
 80284d0:	89a3      	ldrh	r3, [r4, #12]
 80284d2:	431d      	orrs	r5, r3
 80284d4:	81a5      	strh	r5, [r4, #12]
 80284d6:	e7cf      	b.n	8028478 <__smakebuf_r+0x18>

080284d8 <siscanf>:
 80284d8:	b40e      	push	{r1, r2, r3}
 80284da:	b510      	push	{r4, lr}
 80284dc:	b09f      	sub	sp, #124	; 0x7c
 80284de:	ac21      	add	r4, sp, #132	; 0x84
 80284e0:	f44f 7101 	mov.w	r1, #516	; 0x204
 80284e4:	f854 2b04 	ldr.w	r2, [r4], #4
 80284e8:	9201      	str	r2, [sp, #4]
 80284ea:	f8ad 101c 	strh.w	r1, [sp, #28]
 80284ee:	9004      	str	r0, [sp, #16]
 80284f0:	9008      	str	r0, [sp, #32]
 80284f2:	f7d7 fecd 	bl	8000290 <strlen>
 80284f6:	4b0c      	ldr	r3, [pc, #48]	; (8028528 <siscanf+0x50>)
 80284f8:	9005      	str	r0, [sp, #20]
 80284fa:	9009      	str	r0, [sp, #36]	; 0x24
 80284fc:	930d      	str	r3, [sp, #52]	; 0x34
 80284fe:	480b      	ldr	r0, [pc, #44]	; (802852c <siscanf+0x54>)
 8028500:	9a01      	ldr	r2, [sp, #4]
 8028502:	6800      	ldr	r0, [r0, #0]
 8028504:	9403      	str	r4, [sp, #12]
 8028506:	2300      	movs	r3, #0
 8028508:	9311      	str	r3, [sp, #68]	; 0x44
 802850a:	9316      	str	r3, [sp, #88]	; 0x58
 802850c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8028510:	f8ad 301e 	strh.w	r3, [sp, #30]
 8028514:	a904      	add	r1, sp, #16
 8028516:	4623      	mov	r3, r4
 8028518:	f000 f93e 	bl	8028798 <__ssvfiscanf_r>
 802851c:	b01f      	add	sp, #124	; 0x7c
 802851e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8028522:	b003      	add	sp, #12
 8028524:	4770      	bx	lr
 8028526:	bf00      	nop
 8028528:	08024f67 	.word	0x08024f67
 802852c:	200000a0 	.word	0x200000a0

08028530 <_raise_r>:
 8028530:	291f      	cmp	r1, #31
 8028532:	b538      	push	{r3, r4, r5, lr}
 8028534:	4604      	mov	r4, r0
 8028536:	460d      	mov	r5, r1
 8028538:	d904      	bls.n	8028544 <_raise_r+0x14>
 802853a:	2316      	movs	r3, #22
 802853c:	6003      	str	r3, [r0, #0]
 802853e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028542:	bd38      	pop	{r3, r4, r5, pc}
 8028544:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8028546:	b112      	cbz	r2, 802854e <_raise_r+0x1e>
 8028548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802854c:	b94b      	cbnz	r3, 8028562 <_raise_r+0x32>
 802854e:	4620      	mov	r0, r4
 8028550:	f000 f856 	bl	8028600 <_getpid_r>
 8028554:	462a      	mov	r2, r5
 8028556:	4601      	mov	r1, r0
 8028558:	4620      	mov	r0, r4
 802855a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802855e:	f000 b83d 	b.w	80285dc <_kill_r>
 8028562:	2b01      	cmp	r3, #1
 8028564:	d00a      	beq.n	802857c <_raise_r+0x4c>
 8028566:	1c59      	adds	r1, r3, #1
 8028568:	d103      	bne.n	8028572 <_raise_r+0x42>
 802856a:	2316      	movs	r3, #22
 802856c:	6003      	str	r3, [r0, #0]
 802856e:	2001      	movs	r0, #1
 8028570:	e7e7      	b.n	8028542 <_raise_r+0x12>
 8028572:	2400      	movs	r4, #0
 8028574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028578:	4628      	mov	r0, r5
 802857a:	4798      	blx	r3
 802857c:	2000      	movs	r0, #0
 802857e:	e7e0      	b.n	8028542 <_raise_r+0x12>

08028580 <raise>:
 8028580:	4b02      	ldr	r3, [pc, #8]	; (802858c <raise+0xc>)
 8028582:	4601      	mov	r1, r0
 8028584:	6818      	ldr	r0, [r3, #0]
 8028586:	f7ff bfd3 	b.w	8028530 <_raise_r>
 802858a:	bf00      	nop
 802858c:	200000a0 	.word	0x200000a0

08028590 <__gettzinfo>:
 8028590:	4800      	ldr	r0, [pc, #0]	; (8028594 <__gettzinfo+0x4>)
 8028592:	4770      	bx	lr
 8028594:	200000a8 	.word	0x200000a8

08028598 <_fstat_r>:
 8028598:	b538      	push	{r3, r4, r5, lr}
 802859a:	4d07      	ldr	r5, [pc, #28]	; (80285b8 <_fstat_r+0x20>)
 802859c:	2300      	movs	r3, #0
 802859e:	4604      	mov	r4, r0
 80285a0:	4608      	mov	r0, r1
 80285a2:	4611      	mov	r1, r2
 80285a4:	602b      	str	r3, [r5, #0]
 80285a6:	f7db fdac 	bl	8004102 <_fstat>
 80285aa:	1c43      	adds	r3, r0, #1
 80285ac:	d102      	bne.n	80285b4 <_fstat_r+0x1c>
 80285ae:	682b      	ldr	r3, [r5, #0]
 80285b0:	b103      	cbz	r3, 80285b4 <_fstat_r+0x1c>
 80285b2:	6023      	str	r3, [r4, #0]
 80285b4:	bd38      	pop	{r3, r4, r5, pc}
 80285b6:	bf00      	nop
 80285b8:	200164e0 	.word	0x200164e0

080285bc <_isatty_r>:
 80285bc:	b538      	push	{r3, r4, r5, lr}
 80285be:	4d06      	ldr	r5, [pc, #24]	; (80285d8 <_isatty_r+0x1c>)
 80285c0:	2300      	movs	r3, #0
 80285c2:	4604      	mov	r4, r0
 80285c4:	4608      	mov	r0, r1
 80285c6:	602b      	str	r3, [r5, #0]
 80285c8:	f7db fdab 	bl	8004122 <_isatty>
 80285cc:	1c43      	adds	r3, r0, #1
 80285ce:	d102      	bne.n	80285d6 <_isatty_r+0x1a>
 80285d0:	682b      	ldr	r3, [r5, #0]
 80285d2:	b103      	cbz	r3, 80285d6 <_isatty_r+0x1a>
 80285d4:	6023      	str	r3, [r4, #0]
 80285d6:	bd38      	pop	{r3, r4, r5, pc}
 80285d8:	200164e0 	.word	0x200164e0

080285dc <_kill_r>:
 80285dc:	b538      	push	{r3, r4, r5, lr}
 80285de:	4d07      	ldr	r5, [pc, #28]	; (80285fc <_kill_r+0x20>)
 80285e0:	2300      	movs	r3, #0
 80285e2:	4604      	mov	r4, r0
 80285e4:	4608      	mov	r0, r1
 80285e6:	4611      	mov	r1, r2
 80285e8:	602b      	str	r3, [r5, #0]
 80285ea:	f7db fd29 	bl	8004040 <_kill>
 80285ee:	1c43      	adds	r3, r0, #1
 80285f0:	d102      	bne.n	80285f8 <_kill_r+0x1c>
 80285f2:	682b      	ldr	r3, [r5, #0]
 80285f4:	b103      	cbz	r3, 80285f8 <_kill_r+0x1c>
 80285f6:	6023      	str	r3, [r4, #0]
 80285f8:	bd38      	pop	{r3, r4, r5, pc}
 80285fa:	bf00      	nop
 80285fc:	200164e0 	.word	0x200164e0

08028600 <_getpid_r>:
 8028600:	f7db bd16 	b.w	8004030 <_getpid>

08028604 <_calloc_r>:
 8028604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8028606:	fba1 2402 	umull	r2, r4, r1, r2
 802860a:	b94c      	cbnz	r4, 8028620 <_calloc_r+0x1c>
 802860c:	4611      	mov	r1, r2
 802860e:	9201      	str	r2, [sp, #4]
 8028610:	f7fb fd4e 	bl	80240b0 <_malloc_r>
 8028614:	9a01      	ldr	r2, [sp, #4]
 8028616:	4605      	mov	r5, r0
 8028618:	b930      	cbnz	r0, 8028628 <_calloc_r+0x24>
 802861a:	4628      	mov	r0, r5
 802861c:	b003      	add	sp, #12
 802861e:	bd30      	pop	{r4, r5, pc}
 8028620:	220c      	movs	r2, #12
 8028622:	6002      	str	r2, [r0, #0]
 8028624:	2500      	movs	r5, #0
 8028626:	e7f8      	b.n	802861a <_calloc_r+0x16>
 8028628:	4621      	mov	r1, r4
 802862a:	f7fc fd8f 	bl	802514c <memset>
 802862e:	e7f4      	b.n	802861a <_calloc_r+0x16>

08028630 <__env_lock>:
 8028630:	4801      	ldr	r0, [pc, #4]	; (8028638 <__env_lock+0x8>)
 8028632:	f7fe b879 	b.w	8026728 <__retarget_lock_acquire_recursive>
 8028636:	bf00      	nop
 8028638:	200164e4 	.word	0x200164e4

0802863c <__env_unlock>:
 802863c:	4801      	ldr	r0, [pc, #4]	; (8028644 <__env_unlock+0x8>)
 802863e:	f7fe b875 	b.w	802672c <__retarget_lock_release_recursive>
 8028642:	bf00      	nop
 8028644:	200164e4 	.word	0x200164e4

08028648 <__ascii_mbtowc>:
 8028648:	b082      	sub	sp, #8
 802864a:	b901      	cbnz	r1, 802864e <__ascii_mbtowc+0x6>
 802864c:	a901      	add	r1, sp, #4
 802864e:	b142      	cbz	r2, 8028662 <__ascii_mbtowc+0x1a>
 8028650:	b14b      	cbz	r3, 8028666 <__ascii_mbtowc+0x1e>
 8028652:	7813      	ldrb	r3, [r2, #0]
 8028654:	600b      	str	r3, [r1, #0]
 8028656:	7812      	ldrb	r2, [r2, #0]
 8028658:	1e10      	subs	r0, r2, #0
 802865a:	bf18      	it	ne
 802865c:	2001      	movne	r0, #1
 802865e:	b002      	add	sp, #8
 8028660:	4770      	bx	lr
 8028662:	4610      	mov	r0, r2
 8028664:	e7fb      	b.n	802865e <__ascii_mbtowc+0x16>
 8028666:	f06f 0001 	mvn.w	r0, #1
 802866a:	e7f8      	b.n	802865e <__ascii_mbtowc+0x16>

0802866c <_realloc_r>:
 802866c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028670:	4680      	mov	r8, r0
 8028672:	4614      	mov	r4, r2
 8028674:	460e      	mov	r6, r1
 8028676:	b921      	cbnz	r1, 8028682 <_realloc_r+0x16>
 8028678:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802867c:	4611      	mov	r1, r2
 802867e:	f7fb bd17 	b.w	80240b0 <_malloc_r>
 8028682:	b92a      	cbnz	r2, 8028690 <_realloc_r+0x24>
 8028684:	f7fe feee 	bl	8027464 <_free_r>
 8028688:	4625      	mov	r5, r4
 802868a:	4628      	mov	r0, r5
 802868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028690:	f000 fbbb 	bl	8028e0a <_malloc_usable_size_r>
 8028694:	4284      	cmp	r4, r0
 8028696:	4607      	mov	r7, r0
 8028698:	d802      	bhi.n	80286a0 <_realloc_r+0x34>
 802869a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802869e:	d812      	bhi.n	80286c6 <_realloc_r+0x5a>
 80286a0:	4621      	mov	r1, r4
 80286a2:	4640      	mov	r0, r8
 80286a4:	f7fb fd04 	bl	80240b0 <_malloc_r>
 80286a8:	4605      	mov	r5, r0
 80286aa:	2800      	cmp	r0, #0
 80286ac:	d0ed      	beq.n	802868a <_realloc_r+0x1e>
 80286ae:	42bc      	cmp	r4, r7
 80286b0:	4622      	mov	r2, r4
 80286b2:	4631      	mov	r1, r6
 80286b4:	bf28      	it	cs
 80286b6:	463a      	movcs	r2, r7
 80286b8:	f7fe f841 	bl	802673e <memcpy>
 80286bc:	4631      	mov	r1, r6
 80286be:	4640      	mov	r0, r8
 80286c0:	f7fe fed0 	bl	8027464 <_free_r>
 80286c4:	e7e1      	b.n	802868a <_realloc_r+0x1e>
 80286c6:	4635      	mov	r5, r6
 80286c8:	e7df      	b.n	802868a <_realloc_r+0x1e>

080286ca <__ascii_wctomb>:
 80286ca:	b149      	cbz	r1, 80286e0 <__ascii_wctomb+0x16>
 80286cc:	2aff      	cmp	r2, #255	; 0xff
 80286ce:	bf85      	ittet	hi
 80286d0:	238a      	movhi	r3, #138	; 0x8a
 80286d2:	6003      	strhi	r3, [r0, #0]
 80286d4:	700a      	strbls	r2, [r1, #0]
 80286d6:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80286da:	bf98      	it	ls
 80286dc:	2001      	movls	r0, #1
 80286de:	4770      	bx	lr
 80286e0:	4608      	mov	r0, r1
 80286e2:	4770      	bx	lr

080286e4 <_sungetc_r>:
 80286e4:	b538      	push	{r3, r4, r5, lr}
 80286e6:	1c4b      	adds	r3, r1, #1
 80286e8:	4614      	mov	r4, r2
 80286ea:	d103      	bne.n	80286f4 <_sungetc_r+0x10>
 80286ec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80286f0:	4628      	mov	r0, r5
 80286f2:	bd38      	pop	{r3, r4, r5, pc}
 80286f4:	8993      	ldrh	r3, [r2, #12]
 80286f6:	f023 0320 	bic.w	r3, r3, #32
 80286fa:	8193      	strh	r3, [r2, #12]
 80286fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80286fe:	6852      	ldr	r2, [r2, #4]
 8028700:	b2cd      	uxtb	r5, r1
 8028702:	b18b      	cbz	r3, 8028728 <_sungetc_r+0x44>
 8028704:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8028706:	4293      	cmp	r3, r2
 8028708:	dd08      	ble.n	802871c <_sungetc_r+0x38>
 802870a:	6823      	ldr	r3, [r4, #0]
 802870c:	1e5a      	subs	r2, r3, #1
 802870e:	6022      	str	r2, [r4, #0]
 8028710:	f803 5c01 	strb.w	r5, [r3, #-1]
 8028714:	6863      	ldr	r3, [r4, #4]
 8028716:	3301      	adds	r3, #1
 8028718:	6063      	str	r3, [r4, #4]
 802871a:	e7e9      	b.n	80286f0 <_sungetc_r+0xc>
 802871c:	4621      	mov	r1, r4
 802871e:	f000 fb3a 	bl	8028d96 <__submore>
 8028722:	2800      	cmp	r0, #0
 8028724:	d0f1      	beq.n	802870a <_sungetc_r+0x26>
 8028726:	e7e1      	b.n	80286ec <_sungetc_r+0x8>
 8028728:	6921      	ldr	r1, [r4, #16]
 802872a:	6823      	ldr	r3, [r4, #0]
 802872c:	b151      	cbz	r1, 8028744 <_sungetc_r+0x60>
 802872e:	4299      	cmp	r1, r3
 8028730:	d208      	bcs.n	8028744 <_sungetc_r+0x60>
 8028732:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8028736:	42a9      	cmp	r1, r5
 8028738:	d104      	bne.n	8028744 <_sungetc_r+0x60>
 802873a:	3b01      	subs	r3, #1
 802873c:	3201      	adds	r2, #1
 802873e:	6023      	str	r3, [r4, #0]
 8028740:	6062      	str	r2, [r4, #4]
 8028742:	e7d5      	b.n	80286f0 <_sungetc_r+0xc>
 8028744:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8028748:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802874c:	6363      	str	r3, [r4, #52]	; 0x34
 802874e:	2303      	movs	r3, #3
 8028750:	63a3      	str	r3, [r4, #56]	; 0x38
 8028752:	4623      	mov	r3, r4
 8028754:	f803 5f46 	strb.w	r5, [r3, #70]!
 8028758:	6023      	str	r3, [r4, #0]
 802875a:	2301      	movs	r3, #1
 802875c:	e7dc      	b.n	8028718 <_sungetc_r+0x34>

0802875e <__ssrefill_r>:
 802875e:	b510      	push	{r4, lr}
 8028760:	460c      	mov	r4, r1
 8028762:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028764:	b169      	cbz	r1, 8028782 <__ssrefill_r+0x24>
 8028766:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802876a:	4299      	cmp	r1, r3
 802876c:	d001      	beq.n	8028772 <__ssrefill_r+0x14>
 802876e:	f7fe fe79 	bl	8027464 <_free_r>
 8028772:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8028774:	6063      	str	r3, [r4, #4]
 8028776:	2000      	movs	r0, #0
 8028778:	6360      	str	r0, [r4, #52]	; 0x34
 802877a:	b113      	cbz	r3, 8028782 <__ssrefill_r+0x24>
 802877c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802877e:	6023      	str	r3, [r4, #0]
 8028780:	bd10      	pop	{r4, pc}
 8028782:	6923      	ldr	r3, [r4, #16]
 8028784:	6023      	str	r3, [r4, #0]
 8028786:	2300      	movs	r3, #0
 8028788:	6063      	str	r3, [r4, #4]
 802878a:	89a3      	ldrh	r3, [r4, #12]
 802878c:	f043 0320 	orr.w	r3, r3, #32
 8028790:	81a3      	strh	r3, [r4, #12]
 8028792:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028796:	e7f3      	b.n	8028780 <__ssrefill_r+0x22>

08028798 <__ssvfiscanf_r>:
 8028798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802879c:	460c      	mov	r4, r1
 802879e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80287a2:	2100      	movs	r1, #0
 80287a4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80287a8:	49a6      	ldr	r1, [pc, #664]	; (8028a44 <__ssvfiscanf_r+0x2ac>)
 80287aa:	91a0      	str	r1, [sp, #640]	; 0x280
 80287ac:	f10d 0804 	add.w	r8, sp, #4
 80287b0:	49a5      	ldr	r1, [pc, #660]	; (8028a48 <__ssvfiscanf_r+0x2b0>)
 80287b2:	4fa6      	ldr	r7, [pc, #664]	; (8028a4c <__ssvfiscanf_r+0x2b4>)
 80287b4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8028a50 <__ssvfiscanf_r+0x2b8>
 80287b8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80287bc:	4606      	mov	r6, r0
 80287be:	91a1      	str	r1, [sp, #644]	; 0x284
 80287c0:	9300      	str	r3, [sp, #0]
 80287c2:	7813      	ldrb	r3, [r2, #0]
 80287c4:	2b00      	cmp	r3, #0
 80287c6:	f000 815a 	beq.w	8028a7e <__ssvfiscanf_r+0x2e6>
 80287ca:	5cf9      	ldrb	r1, [r7, r3]
 80287cc:	f011 0108 	ands.w	r1, r1, #8
 80287d0:	f102 0501 	add.w	r5, r2, #1
 80287d4:	d019      	beq.n	802880a <__ssvfiscanf_r+0x72>
 80287d6:	6863      	ldr	r3, [r4, #4]
 80287d8:	2b00      	cmp	r3, #0
 80287da:	dd0f      	ble.n	80287fc <__ssvfiscanf_r+0x64>
 80287dc:	6823      	ldr	r3, [r4, #0]
 80287de:	781a      	ldrb	r2, [r3, #0]
 80287e0:	5cba      	ldrb	r2, [r7, r2]
 80287e2:	0712      	lsls	r2, r2, #28
 80287e4:	d401      	bmi.n	80287ea <__ssvfiscanf_r+0x52>
 80287e6:	462a      	mov	r2, r5
 80287e8:	e7eb      	b.n	80287c2 <__ssvfiscanf_r+0x2a>
 80287ea:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80287ec:	3201      	adds	r2, #1
 80287ee:	9245      	str	r2, [sp, #276]	; 0x114
 80287f0:	6862      	ldr	r2, [r4, #4]
 80287f2:	3301      	adds	r3, #1
 80287f4:	3a01      	subs	r2, #1
 80287f6:	6062      	str	r2, [r4, #4]
 80287f8:	6023      	str	r3, [r4, #0]
 80287fa:	e7ec      	b.n	80287d6 <__ssvfiscanf_r+0x3e>
 80287fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80287fe:	4621      	mov	r1, r4
 8028800:	4630      	mov	r0, r6
 8028802:	4798      	blx	r3
 8028804:	2800      	cmp	r0, #0
 8028806:	d0e9      	beq.n	80287dc <__ssvfiscanf_r+0x44>
 8028808:	e7ed      	b.n	80287e6 <__ssvfiscanf_r+0x4e>
 802880a:	2b25      	cmp	r3, #37	; 0x25
 802880c:	d012      	beq.n	8028834 <__ssvfiscanf_r+0x9c>
 802880e:	469a      	mov	sl, r3
 8028810:	6863      	ldr	r3, [r4, #4]
 8028812:	2b00      	cmp	r3, #0
 8028814:	f340 8091 	ble.w	802893a <__ssvfiscanf_r+0x1a2>
 8028818:	6822      	ldr	r2, [r4, #0]
 802881a:	7813      	ldrb	r3, [r2, #0]
 802881c:	4553      	cmp	r3, sl
 802881e:	f040 812e 	bne.w	8028a7e <__ssvfiscanf_r+0x2e6>
 8028822:	6863      	ldr	r3, [r4, #4]
 8028824:	3b01      	subs	r3, #1
 8028826:	6063      	str	r3, [r4, #4]
 8028828:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802882a:	3201      	adds	r2, #1
 802882c:	3301      	adds	r3, #1
 802882e:	6022      	str	r2, [r4, #0]
 8028830:	9345      	str	r3, [sp, #276]	; 0x114
 8028832:	e7d8      	b.n	80287e6 <__ssvfiscanf_r+0x4e>
 8028834:	9141      	str	r1, [sp, #260]	; 0x104
 8028836:	9143      	str	r1, [sp, #268]	; 0x10c
 8028838:	7853      	ldrb	r3, [r2, #1]
 802883a:	2b2a      	cmp	r3, #42	; 0x2a
 802883c:	bf02      	ittt	eq
 802883e:	2310      	moveq	r3, #16
 8028840:	1c95      	addeq	r5, r2, #2
 8028842:	9341      	streq	r3, [sp, #260]	; 0x104
 8028844:	220a      	movs	r2, #10
 8028846:	46aa      	mov	sl, r5
 8028848:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802884c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8028850:	2b09      	cmp	r3, #9
 8028852:	d91c      	bls.n	802888e <__ssvfiscanf_r+0xf6>
 8028854:	487e      	ldr	r0, [pc, #504]	; (8028a50 <__ssvfiscanf_r+0x2b8>)
 8028856:	2203      	movs	r2, #3
 8028858:	f7d7 fcca 	bl	80001f0 <memchr>
 802885c:	b138      	cbz	r0, 802886e <__ssvfiscanf_r+0xd6>
 802885e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8028860:	eba0 0009 	sub.w	r0, r0, r9
 8028864:	2301      	movs	r3, #1
 8028866:	4083      	lsls	r3, r0
 8028868:	4313      	orrs	r3, r2
 802886a:	9341      	str	r3, [sp, #260]	; 0x104
 802886c:	4655      	mov	r5, sl
 802886e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8028872:	2b78      	cmp	r3, #120	; 0x78
 8028874:	d806      	bhi.n	8028884 <__ssvfiscanf_r+0xec>
 8028876:	2b57      	cmp	r3, #87	; 0x57
 8028878:	d810      	bhi.n	802889c <__ssvfiscanf_r+0x104>
 802887a:	2b25      	cmp	r3, #37	; 0x25
 802887c:	d0c7      	beq.n	802880e <__ssvfiscanf_r+0x76>
 802887e:	d857      	bhi.n	8028930 <__ssvfiscanf_r+0x198>
 8028880:	2b00      	cmp	r3, #0
 8028882:	d065      	beq.n	8028950 <__ssvfiscanf_r+0x1b8>
 8028884:	2303      	movs	r3, #3
 8028886:	9347      	str	r3, [sp, #284]	; 0x11c
 8028888:	230a      	movs	r3, #10
 802888a:	9342      	str	r3, [sp, #264]	; 0x108
 802888c:	e076      	b.n	802897c <__ssvfiscanf_r+0x1e4>
 802888e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8028890:	fb02 1103 	mla	r1, r2, r3, r1
 8028894:	3930      	subs	r1, #48	; 0x30
 8028896:	9143      	str	r1, [sp, #268]	; 0x10c
 8028898:	4655      	mov	r5, sl
 802889a:	e7d4      	b.n	8028846 <__ssvfiscanf_r+0xae>
 802889c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80288a0:	2a20      	cmp	r2, #32
 80288a2:	d8ef      	bhi.n	8028884 <__ssvfiscanf_r+0xec>
 80288a4:	a101      	add	r1, pc, #4	; (adr r1, 80288ac <__ssvfiscanf_r+0x114>)
 80288a6:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80288aa:	bf00      	nop
 80288ac:	0802895f 	.word	0x0802895f
 80288b0:	08028885 	.word	0x08028885
 80288b4:	08028885 	.word	0x08028885
 80288b8:	080289bd 	.word	0x080289bd
 80288bc:	08028885 	.word	0x08028885
 80288c0:	08028885 	.word	0x08028885
 80288c4:	08028885 	.word	0x08028885
 80288c8:	08028885 	.word	0x08028885
 80288cc:	08028885 	.word	0x08028885
 80288d0:	08028885 	.word	0x08028885
 80288d4:	08028885 	.word	0x08028885
 80288d8:	080289d3 	.word	0x080289d3
 80288dc:	080289b9 	.word	0x080289b9
 80288e0:	08028937 	.word	0x08028937
 80288e4:	08028937 	.word	0x08028937
 80288e8:	08028937 	.word	0x08028937
 80288ec:	08028885 	.word	0x08028885
 80288f0:	08028975 	.word	0x08028975
 80288f4:	08028885 	.word	0x08028885
 80288f8:	08028885 	.word	0x08028885
 80288fc:	08028885 	.word	0x08028885
 8028900:	08028885 	.word	0x08028885
 8028904:	080289e3 	.word	0x080289e3
 8028908:	080289b1 	.word	0x080289b1
 802890c:	08028957 	.word	0x08028957
 8028910:	08028885 	.word	0x08028885
 8028914:	08028885 	.word	0x08028885
 8028918:	080289df 	.word	0x080289df
 802891c:	08028885 	.word	0x08028885
 8028920:	080289b9 	.word	0x080289b9
 8028924:	08028885 	.word	0x08028885
 8028928:	08028885 	.word	0x08028885
 802892c:	0802895f 	.word	0x0802895f
 8028930:	3b45      	subs	r3, #69	; 0x45
 8028932:	2b02      	cmp	r3, #2
 8028934:	d8a6      	bhi.n	8028884 <__ssvfiscanf_r+0xec>
 8028936:	2305      	movs	r3, #5
 8028938:	e01f      	b.n	802897a <__ssvfiscanf_r+0x1e2>
 802893a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802893c:	4621      	mov	r1, r4
 802893e:	4630      	mov	r0, r6
 8028940:	4798      	blx	r3
 8028942:	2800      	cmp	r0, #0
 8028944:	f43f af68 	beq.w	8028818 <__ssvfiscanf_r+0x80>
 8028948:	9844      	ldr	r0, [sp, #272]	; 0x110
 802894a:	2800      	cmp	r0, #0
 802894c:	f040 808d 	bne.w	8028a6a <__ssvfiscanf_r+0x2d2>
 8028950:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028954:	e08f      	b.n	8028a76 <__ssvfiscanf_r+0x2de>
 8028956:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8028958:	f042 0220 	orr.w	r2, r2, #32
 802895c:	9241      	str	r2, [sp, #260]	; 0x104
 802895e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8028960:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8028964:	9241      	str	r2, [sp, #260]	; 0x104
 8028966:	2210      	movs	r2, #16
 8028968:	2b6f      	cmp	r3, #111	; 0x6f
 802896a:	9242      	str	r2, [sp, #264]	; 0x108
 802896c:	bf34      	ite	cc
 802896e:	2303      	movcc	r3, #3
 8028970:	2304      	movcs	r3, #4
 8028972:	e002      	b.n	802897a <__ssvfiscanf_r+0x1e2>
 8028974:	2300      	movs	r3, #0
 8028976:	9342      	str	r3, [sp, #264]	; 0x108
 8028978:	2303      	movs	r3, #3
 802897a:	9347      	str	r3, [sp, #284]	; 0x11c
 802897c:	6863      	ldr	r3, [r4, #4]
 802897e:	2b00      	cmp	r3, #0
 8028980:	dd3d      	ble.n	80289fe <__ssvfiscanf_r+0x266>
 8028982:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028984:	0659      	lsls	r1, r3, #25
 8028986:	d404      	bmi.n	8028992 <__ssvfiscanf_r+0x1fa>
 8028988:	6823      	ldr	r3, [r4, #0]
 802898a:	781a      	ldrb	r2, [r3, #0]
 802898c:	5cba      	ldrb	r2, [r7, r2]
 802898e:	0712      	lsls	r2, r2, #28
 8028990:	d43c      	bmi.n	8028a0c <__ssvfiscanf_r+0x274>
 8028992:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8028994:	2b02      	cmp	r3, #2
 8028996:	dc4b      	bgt.n	8028a30 <__ssvfiscanf_r+0x298>
 8028998:	466b      	mov	r3, sp
 802899a:	4622      	mov	r2, r4
 802899c:	a941      	add	r1, sp, #260	; 0x104
 802899e:	4630      	mov	r0, r6
 80289a0:	f000 f872 	bl	8028a88 <_scanf_chars>
 80289a4:	2801      	cmp	r0, #1
 80289a6:	d06a      	beq.n	8028a7e <__ssvfiscanf_r+0x2e6>
 80289a8:	2802      	cmp	r0, #2
 80289aa:	f47f af1c 	bne.w	80287e6 <__ssvfiscanf_r+0x4e>
 80289ae:	e7cb      	b.n	8028948 <__ssvfiscanf_r+0x1b0>
 80289b0:	2308      	movs	r3, #8
 80289b2:	9342      	str	r3, [sp, #264]	; 0x108
 80289b4:	2304      	movs	r3, #4
 80289b6:	e7e0      	b.n	802897a <__ssvfiscanf_r+0x1e2>
 80289b8:	220a      	movs	r2, #10
 80289ba:	e7d5      	b.n	8028968 <__ssvfiscanf_r+0x1d0>
 80289bc:	4629      	mov	r1, r5
 80289be:	4640      	mov	r0, r8
 80289c0:	f000 f9b0 	bl	8028d24 <__sccl>
 80289c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80289c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80289ca:	9341      	str	r3, [sp, #260]	; 0x104
 80289cc:	4605      	mov	r5, r0
 80289ce:	2301      	movs	r3, #1
 80289d0:	e7d3      	b.n	802897a <__ssvfiscanf_r+0x1e2>
 80289d2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80289d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80289d8:	9341      	str	r3, [sp, #260]	; 0x104
 80289da:	2300      	movs	r3, #0
 80289dc:	e7cd      	b.n	802897a <__ssvfiscanf_r+0x1e2>
 80289de:	2302      	movs	r3, #2
 80289e0:	e7cb      	b.n	802897a <__ssvfiscanf_r+0x1e2>
 80289e2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80289e4:	06c3      	lsls	r3, r0, #27
 80289e6:	f53f aefe 	bmi.w	80287e6 <__ssvfiscanf_r+0x4e>
 80289ea:	9b00      	ldr	r3, [sp, #0]
 80289ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80289ee:	1d19      	adds	r1, r3, #4
 80289f0:	9100      	str	r1, [sp, #0]
 80289f2:	681b      	ldr	r3, [r3, #0]
 80289f4:	07c0      	lsls	r0, r0, #31
 80289f6:	bf4c      	ite	mi
 80289f8:	801a      	strhmi	r2, [r3, #0]
 80289fa:	601a      	strpl	r2, [r3, #0]
 80289fc:	e6f3      	b.n	80287e6 <__ssvfiscanf_r+0x4e>
 80289fe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028a00:	4621      	mov	r1, r4
 8028a02:	4630      	mov	r0, r6
 8028a04:	4798      	blx	r3
 8028a06:	2800      	cmp	r0, #0
 8028a08:	d0bb      	beq.n	8028982 <__ssvfiscanf_r+0x1ea>
 8028a0a:	e79d      	b.n	8028948 <__ssvfiscanf_r+0x1b0>
 8028a0c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028a0e:	3201      	adds	r2, #1
 8028a10:	9245      	str	r2, [sp, #276]	; 0x114
 8028a12:	6862      	ldr	r2, [r4, #4]
 8028a14:	3a01      	subs	r2, #1
 8028a16:	2a00      	cmp	r2, #0
 8028a18:	6062      	str	r2, [r4, #4]
 8028a1a:	dd02      	ble.n	8028a22 <__ssvfiscanf_r+0x28a>
 8028a1c:	3301      	adds	r3, #1
 8028a1e:	6023      	str	r3, [r4, #0]
 8028a20:	e7b2      	b.n	8028988 <__ssvfiscanf_r+0x1f0>
 8028a22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028a24:	4621      	mov	r1, r4
 8028a26:	4630      	mov	r0, r6
 8028a28:	4798      	blx	r3
 8028a2a:	2800      	cmp	r0, #0
 8028a2c:	d0ac      	beq.n	8028988 <__ssvfiscanf_r+0x1f0>
 8028a2e:	e78b      	b.n	8028948 <__ssvfiscanf_r+0x1b0>
 8028a30:	2b04      	cmp	r3, #4
 8028a32:	dc0f      	bgt.n	8028a54 <__ssvfiscanf_r+0x2bc>
 8028a34:	466b      	mov	r3, sp
 8028a36:	4622      	mov	r2, r4
 8028a38:	a941      	add	r1, sp, #260	; 0x104
 8028a3a:	4630      	mov	r0, r6
 8028a3c:	f000 f87e 	bl	8028b3c <_scanf_i>
 8028a40:	e7b0      	b.n	80289a4 <__ssvfiscanf_r+0x20c>
 8028a42:	bf00      	nop
 8028a44:	080286e5 	.word	0x080286e5
 8028a48:	0802875f 	.word	0x0802875f
 8028a4c:	0802e5ec 	.word	0x0802e5ec
 8028a50:	0802ec22 	.word	0x0802ec22
 8028a54:	4b0b      	ldr	r3, [pc, #44]	; (8028a84 <__ssvfiscanf_r+0x2ec>)
 8028a56:	2b00      	cmp	r3, #0
 8028a58:	f43f aec5 	beq.w	80287e6 <__ssvfiscanf_r+0x4e>
 8028a5c:	466b      	mov	r3, sp
 8028a5e:	4622      	mov	r2, r4
 8028a60:	a941      	add	r1, sp, #260	; 0x104
 8028a62:	4630      	mov	r0, r6
 8028a64:	f3af 8000 	nop.w
 8028a68:	e79c      	b.n	80289a4 <__ssvfiscanf_r+0x20c>
 8028a6a:	89a3      	ldrh	r3, [r4, #12]
 8028a6c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8028a70:	bf18      	it	ne
 8028a72:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8028a76:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8028a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028a7e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8028a80:	e7f9      	b.n	8028a76 <__ssvfiscanf_r+0x2de>
 8028a82:	bf00      	nop
 8028a84:	00000000 	.word	0x00000000

08028a88 <_scanf_chars>:
 8028a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8028a8c:	4615      	mov	r5, r2
 8028a8e:	688a      	ldr	r2, [r1, #8]
 8028a90:	4680      	mov	r8, r0
 8028a92:	460c      	mov	r4, r1
 8028a94:	b932      	cbnz	r2, 8028aa4 <_scanf_chars+0x1c>
 8028a96:	698a      	ldr	r2, [r1, #24]
 8028a98:	2a00      	cmp	r2, #0
 8028a9a:	bf0c      	ite	eq
 8028a9c:	2201      	moveq	r2, #1
 8028a9e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8028aa2:	608a      	str	r2, [r1, #8]
 8028aa4:	6822      	ldr	r2, [r4, #0]
 8028aa6:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8028b38 <_scanf_chars+0xb0>
 8028aaa:	06d1      	lsls	r1, r2, #27
 8028aac:	bf5f      	itttt	pl
 8028aae:	681a      	ldrpl	r2, [r3, #0]
 8028ab0:	1d11      	addpl	r1, r2, #4
 8028ab2:	6019      	strpl	r1, [r3, #0]
 8028ab4:	6816      	ldrpl	r6, [r2, #0]
 8028ab6:	2700      	movs	r7, #0
 8028ab8:	69a0      	ldr	r0, [r4, #24]
 8028aba:	b188      	cbz	r0, 8028ae0 <_scanf_chars+0x58>
 8028abc:	2801      	cmp	r0, #1
 8028abe:	d107      	bne.n	8028ad0 <_scanf_chars+0x48>
 8028ac0:	682a      	ldr	r2, [r5, #0]
 8028ac2:	7811      	ldrb	r1, [r2, #0]
 8028ac4:	6962      	ldr	r2, [r4, #20]
 8028ac6:	5c52      	ldrb	r2, [r2, r1]
 8028ac8:	b952      	cbnz	r2, 8028ae0 <_scanf_chars+0x58>
 8028aca:	2f00      	cmp	r7, #0
 8028acc:	d031      	beq.n	8028b32 <_scanf_chars+0xaa>
 8028ace:	e022      	b.n	8028b16 <_scanf_chars+0x8e>
 8028ad0:	2802      	cmp	r0, #2
 8028ad2:	d120      	bne.n	8028b16 <_scanf_chars+0x8e>
 8028ad4:	682b      	ldr	r3, [r5, #0]
 8028ad6:	781b      	ldrb	r3, [r3, #0]
 8028ad8:	f819 3003 	ldrb.w	r3, [r9, r3]
 8028adc:	071b      	lsls	r3, r3, #28
 8028ade:	d41a      	bmi.n	8028b16 <_scanf_chars+0x8e>
 8028ae0:	6823      	ldr	r3, [r4, #0]
 8028ae2:	06da      	lsls	r2, r3, #27
 8028ae4:	bf5e      	ittt	pl
 8028ae6:	682b      	ldrpl	r3, [r5, #0]
 8028ae8:	781b      	ldrbpl	r3, [r3, #0]
 8028aea:	f806 3b01 	strbpl.w	r3, [r6], #1
 8028aee:	682a      	ldr	r2, [r5, #0]
 8028af0:	686b      	ldr	r3, [r5, #4]
 8028af2:	3201      	adds	r2, #1
 8028af4:	602a      	str	r2, [r5, #0]
 8028af6:	68a2      	ldr	r2, [r4, #8]
 8028af8:	3b01      	subs	r3, #1
 8028afa:	3a01      	subs	r2, #1
 8028afc:	606b      	str	r3, [r5, #4]
 8028afe:	3701      	adds	r7, #1
 8028b00:	60a2      	str	r2, [r4, #8]
 8028b02:	b142      	cbz	r2, 8028b16 <_scanf_chars+0x8e>
 8028b04:	2b00      	cmp	r3, #0
 8028b06:	dcd7      	bgt.n	8028ab8 <_scanf_chars+0x30>
 8028b08:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028b0c:	4629      	mov	r1, r5
 8028b0e:	4640      	mov	r0, r8
 8028b10:	4798      	blx	r3
 8028b12:	2800      	cmp	r0, #0
 8028b14:	d0d0      	beq.n	8028ab8 <_scanf_chars+0x30>
 8028b16:	6823      	ldr	r3, [r4, #0]
 8028b18:	f013 0310 	ands.w	r3, r3, #16
 8028b1c:	d105      	bne.n	8028b2a <_scanf_chars+0xa2>
 8028b1e:	68e2      	ldr	r2, [r4, #12]
 8028b20:	3201      	adds	r2, #1
 8028b22:	60e2      	str	r2, [r4, #12]
 8028b24:	69a2      	ldr	r2, [r4, #24]
 8028b26:	b102      	cbz	r2, 8028b2a <_scanf_chars+0xa2>
 8028b28:	7033      	strb	r3, [r6, #0]
 8028b2a:	6923      	ldr	r3, [r4, #16]
 8028b2c:	443b      	add	r3, r7
 8028b2e:	6123      	str	r3, [r4, #16]
 8028b30:	2000      	movs	r0, #0
 8028b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028b36:	bf00      	nop
 8028b38:	0802e5ec 	.word	0x0802e5ec

08028b3c <_scanf_i>:
 8028b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028b40:	4698      	mov	r8, r3
 8028b42:	4b74      	ldr	r3, [pc, #464]	; (8028d14 <_scanf_i+0x1d8>)
 8028b44:	460c      	mov	r4, r1
 8028b46:	4682      	mov	sl, r0
 8028b48:	4616      	mov	r6, r2
 8028b4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8028b4e:	b087      	sub	sp, #28
 8028b50:	ab03      	add	r3, sp, #12
 8028b52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8028b56:	4b70      	ldr	r3, [pc, #448]	; (8028d18 <_scanf_i+0x1dc>)
 8028b58:	69a1      	ldr	r1, [r4, #24]
 8028b5a:	4a70      	ldr	r2, [pc, #448]	; (8028d1c <_scanf_i+0x1e0>)
 8028b5c:	2903      	cmp	r1, #3
 8028b5e:	bf18      	it	ne
 8028b60:	461a      	movne	r2, r3
 8028b62:	68a3      	ldr	r3, [r4, #8]
 8028b64:	9201      	str	r2, [sp, #4]
 8028b66:	1e5a      	subs	r2, r3, #1
 8028b68:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8028b6c:	bf88      	it	hi
 8028b6e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8028b72:	4627      	mov	r7, r4
 8028b74:	bf82      	ittt	hi
 8028b76:	eb03 0905 	addhi.w	r9, r3, r5
 8028b7a:	f240 135d 	movwhi	r3, #349	; 0x15d
 8028b7e:	60a3      	strhi	r3, [r4, #8]
 8028b80:	f857 3b1c 	ldr.w	r3, [r7], #28
 8028b84:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8028b88:	bf98      	it	ls
 8028b8a:	f04f 0900 	movls.w	r9, #0
 8028b8e:	6023      	str	r3, [r4, #0]
 8028b90:	463d      	mov	r5, r7
 8028b92:	f04f 0b00 	mov.w	fp, #0
 8028b96:	6831      	ldr	r1, [r6, #0]
 8028b98:	ab03      	add	r3, sp, #12
 8028b9a:	7809      	ldrb	r1, [r1, #0]
 8028b9c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8028ba0:	2202      	movs	r2, #2
 8028ba2:	f7d7 fb25 	bl	80001f0 <memchr>
 8028ba6:	b328      	cbz	r0, 8028bf4 <_scanf_i+0xb8>
 8028ba8:	f1bb 0f01 	cmp.w	fp, #1
 8028bac:	d159      	bne.n	8028c62 <_scanf_i+0x126>
 8028bae:	6862      	ldr	r2, [r4, #4]
 8028bb0:	b92a      	cbnz	r2, 8028bbe <_scanf_i+0x82>
 8028bb2:	6822      	ldr	r2, [r4, #0]
 8028bb4:	2308      	movs	r3, #8
 8028bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8028bba:	6063      	str	r3, [r4, #4]
 8028bbc:	6022      	str	r2, [r4, #0]
 8028bbe:	6822      	ldr	r2, [r4, #0]
 8028bc0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8028bc4:	6022      	str	r2, [r4, #0]
 8028bc6:	68a2      	ldr	r2, [r4, #8]
 8028bc8:	1e51      	subs	r1, r2, #1
 8028bca:	60a1      	str	r1, [r4, #8]
 8028bcc:	b192      	cbz	r2, 8028bf4 <_scanf_i+0xb8>
 8028bce:	6832      	ldr	r2, [r6, #0]
 8028bd0:	1c51      	adds	r1, r2, #1
 8028bd2:	6031      	str	r1, [r6, #0]
 8028bd4:	7812      	ldrb	r2, [r2, #0]
 8028bd6:	f805 2b01 	strb.w	r2, [r5], #1
 8028bda:	6872      	ldr	r2, [r6, #4]
 8028bdc:	3a01      	subs	r2, #1
 8028bde:	2a00      	cmp	r2, #0
 8028be0:	6072      	str	r2, [r6, #4]
 8028be2:	dc07      	bgt.n	8028bf4 <_scanf_i+0xb8>
 8028be4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8028be8:	4631      	mov	r1, r6
 8028bea:	4650      	mov	r0, sl
 8028bec:	4790      	blx	r2
 8028bee:	2800      	cmp	r0, #0
 8028bf0:	f040 8085 	bne.w	8028cfe <_scanf_i+0x1c2>
 8028bf4:	f10b 0b01 	add.w	fp, fp, #1
 8028bf8:	f1bb 0f03 	cmp.w	fp, #3
 8028bfc:	d1cb      	bne.n	8028b96 <_scanf_i+0x5a>
 8028bfe:	6863      	ldr	r3, [r4, #4]
 8028c00:	b90b      	cbnz	r3, 8028c06 <_scanf_i+0xca>
 8028c02:	230a      	movs	r3, #10
 8028c04:	6063      	str	r3, [r4, #4]
 8028c06:	6863      	ldr	r3, [r4, #4]
 8028c08:	4945      	ldr	r1, [pc, #276]	; (8028d20 <_scanf_i+0x1e4>)
 8028c0a:	6960      	ldr	r0, [r4, #20]
 8028c0c:	1ac9      	subs	r1, r1, r3
 8028c0e:	f000 f889 	bl	8028d24 <__sccl>
 8028c12:	f04f 0b00 	mov.w	fp, #0
 8028c16:	68a3      	ldr	r3, [r4, #8]
 8028c18:	6822      	ldr	r2, [r4, #0]
 8028c1a:	2b00      	cmp	r3, #0
 8028c1c:	d03d      	beq.n	8028c9a <_scanf_i+0x15e>
 8028c1e:	6831      	ldr	r1, [r6, #0]
 8028c20:	6960      	ldr	r0, [r4, #20]
 8028c22:	f891 c000 	ldrb.w	ip, [r1]
 8028c26:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028c2a:	2800      	cmp	r0, #0
 8028c2c:	d035      	beq.n	8028c9a <_scanf_i+0x15e>
 8028c2e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8028c32:	d124      	bne.n	8028c7e <_scanf_i+0x142>
 8028c34:	0510      	lsls	r0, r2, #20
 8028c36:	d522      	bpl.n	8028c7e <_scanf_i+0x142>
 8028c38:	f10b 0b01 	add.w	fp, fp, #1
 8028c3c:	f1b9 0f00 	cmp.w	r9, #0
 8028c40:	d003      	beq.n	8028c4a <_scanf_i+0x10e>
 8028c42:	3301      	adds	r3, #1
 8028c44:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8028c48:	60a3      	str	r3, [r4, #8]
 8028c4a:	6873      	ldr	r3, [r6, #4]
 8028c4c:	3b01      	subs	r3, #1
 8028c4e:	2b00      	cmp	r3, #0
 8028c50:	6073      	str	r3, [r6, #4]
 8028c52:	dd1b      	ble.n	8028c8c <_scanf_i+0x150>
 8028c54:	6833      	ldr	r3, [r6, #0]
 8028c56:	3301      	adds	r3, #1
 8028c58:	6033      	str	r3, [r6, #0]
 8028c5a:	68a3      	ldr	r3, [r4, #8]
 8028c5c:	3b01      	subs	r3, #1
 8028c5e:	60a3      	str	r3, [r4, #8]
 8028c60:	e7d9      	b.n	8028c16 <_scanf_i+0xda>
 8028c62:	f1bb 0f02 	cmp.w	fp, #2
 8028c66:	d1ae      	bne.n	8028bc6 <_scanf_i+0x8a>
 8028c68:	6822      	ldr	r2, [r4, #0]
 8028c6a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8028c6e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8028c72:	d1bf      	bne.n	8028bf4 <_scanf_i+0xb8>
 8028c74:	2310      	movs	r3, #16
 8028c76:	6063      	str	r3, [r4, #4]
 8028c78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8028c7c:	e7a2      	b.n	8028bc4 <_scanf_i+0x88>
 8028c7e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8028c82:	6022      	str	r2, [r4, #0]
 8028c84:	780b      	ldrb	r3, [r1, #0]
 8028c86:	f805 3b01 	strb.w	r3, [r5], #1
 8028c8a:	e7de      	b.n	8028c4a <_scanf_i+0x10e>
 8028c8c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028c90:	4631      	mov	r1, r6
 8028c92:	4650      	mov	r0, sl
 8028c94:	4798      	blx	r3
 8028c96:	2800      	cmp	r0, #0
 8028c98:	d0df      	beq.n	8028c5a <_scanf_i+0x11e>
 8028c9a:	6823      	ldr	r3, [r4, #0]
 8028c9c:	05d9      	lsls	r1, r3, #23
 8028c9e:	d50d      	bpl.n	8028cbc <_scanf_i+0x180>
 8028ca0:	42bd      	cmp	r5, r7
 8028ca2:	d909      	bls.n	8028cb8 <_scanf_i+0x17c>
 8028ca4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8028ca8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8028cac:	4632      	mov	r2, r6
 8028cae:	4650      	mov	r0, sl
 8028cb0:	4798      	blx	r3
 8028cb2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8028cb6:	464d      	mov	r5, r9
 8028cb8:	42bd      	cmp	r5, r7
 8028cba:	d028      	beq.n	8028d0e <_scanf_i+0x1d2>
 8028cbc:	6822      	ldr	r2, [r4, #0]
 8028cbe:	f012 0210 	ands.w	r2, r2, #16
 8028cc2:	d113      	bne.n	8028cec <_scanf_i+0x1b0>
 8028cc4:	702a      	strb	r2, [r5, #0]
 8028cc6:	6863      	ldr	r3, [r4, #4]
 8028cc8:	9e01      	ldr	r6, [sp, #4]
 8028cca:	4639      	mov	r1, r7
 8028ccc:	4650      	mov	r0, sl
 8028cce:	47b0      	blx	r6
 8028cd0:	f8d8 3000 	ldr.w	r3, [r8]
 8028cd4:	6821      	ldr	r1, [r4, #0]
 8028cd6:	1d1a      	adds	r2, r3, #4
 8028cd8:	f8c8 2000 	str.w	r2, [r8]
 8028cdc:	f011 0f20 	tst.w	r1, #32
 8028ce0:	681b      	ldr	r3, [r3, #0]
 8028ce2:	d00f      	beq.n	8028d04 <_scanf_i+0x1c8>
 8028ce4:	6018      	str	r0, [r3, #0]
 8028ce6:	68e3      	ldr	r3, [r4, #12]
 8028ce8:	3301      	adds	r3, #1
 8028cea:	60e3      	str	r3, [r4, #12]
 8028cec:	6923      	ldr	r3, [r4, #16]
 8028cee:	1bed      	subs	r5, r5, r7
 8028cf0:	445d      	add	r5, fp
 8028cf2:	442b      	add	r3, r5
 8028cf4:	6123      	str	r3, [r4, #16]
 8028cf6:	2000      	movs	r0, #0
 8028cf8:	b007      	add	sp, #28
 8028cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028cfe:	f04f 0b00 	mov.w	fp, #0
 8028d02:	e7ca      	b.n	8028c9a <_scanf_i+0x15e>
 8028d04:	07ca      	lsls	r2, r1, #31
 8028d06:	bf4c      	ite	mi
 8028d08:	8018      	strhmi	r0, [r3, #0]
 8028d0a:	6018      	strpl	r0, [r3, #0]
 8028d0c:	e7eb      	b.n	8028ce6 <_scanf_i+0x1aa>
 8028d0e:	2001      	movs	r0, #1
 8028d10:	e7f2      	b.n	8028cf8 <_scanf_i+0x1bc>
 8028d12:	bf00      	nop
 8028d14:	0802dc10 	.word	0x0802dc10
 8028d18:	08027d69 	.word	0x08027d69
 8028d1c:	08024349 	.word	0x08024349
 8028d20:	0802ec47 	.word	0x0802ec47

08028d24 <__sccl>:
 8028d24:	b570      	push	{r4, r5, r6, lr}
 8028d26:	780b      	ldrb	r3, [r1, #0]
 8028d28:	4604      	mov	r4, r0
 8028d2a:	2b5e      	cmp	r3, #94	; 0x5e
 8028d2c:	bf0b      	itete	eq
 8028d2e:	784b      	ldrbeq	r3, [r1, #1]
 8028d30:	1c4a      	addne	r2, r1, #1
 8028d32:	1c8a      	addeq	r2, r1, #2
 8028d34:	2100      	movne	r1, #0
 8028d36:	bf08      	it	eq
 8028d38:	2101      	moveq	r1, #1
 8028d3a:	3801      	subs	r0, #1
 8028d3c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8028d40:	f800 1f01 	strb.w	r1, [r0, #1]!
 8028d44:	42a8      	cmp	r0, r5
 8028d46:	d1fb      	bne.n	8028d40 <__sccl+0x1c>
 8028d48:	b90b      	cbnz	r3, 8028d4e <__sccl+0x2a>
 8028d4a:	1e50      	subs	r0, r2, #1
 8028d4c:	bd70      	pop	{r4, r5, r6, pc}
 8028d4e:	f081 0101 	eor.w	r1, r1, #1
 8028d52:	54e1      	strb	r1, [r4, r3]
 8028d54:	4610      	mov	r0, r2
 8028d56:	4602      	mov	r2, r0
 8028d58:	f812 5b01 	ldrb.w	r5, [r2], #1
 8028d5c:	2d2d      	cmp	r5, #45	; 0x2d
 8028d5e:	d005      	beq.n	8028d6c <__sccl+0x48>
 8028d60:	2d5d      	cmp	r5, #93	; 0x5d
 8028d62:	d016      	beq.n	8028d92 <__sccl+0x6e>
 8028d64:	2d00      	cmp	r5, #0
 8028d66:	d0f1      	beq.n	8028d4c <__sccl+0x28>
 8028d68:	462b      	mov	r3, r5
 8028d6a:	e7f2      	b.n	8028d52 <__sccl+0x2e>
 8028d6c:	7846      	ldrb	r6, [r0, #1]
 8028d6e:	2e5d      	cmp	r6, #93	; 0x5d
 8028d70:	d0fa      	beq.n	8028d68 <__sccl+0x44>
 8028d72:	42b3      	cmp	r3, r6
 8028d74:	dcf8      	bgt.n	8028d68 <__sccl+0x44>
 8028d76:	3002      	adds	r0, #2
 8028d78:	461a      	mov	r2, r3
 8028d7a:	3201      	adds	r2, #1
 8028d7c:	4296      	cmp	r6, r2
 8028d7e:	54a1      	strb	r1, [r4, r2]
 8028d80:	dcfb      	bgt.n	8028d7a <__sccl+0x56>
 8028d82:	1af2      	subs	r2, r6, r3
 8028d84:	3a01      	subs	r2, #1
 8028d86:	1c5d      	adds	r5, r3, #1
 8028d88:	42b3      	cmp	r3, r6
 8028d8a:	bfa8      	it	ge
 8028d8c:	2200      	movge	r2, #0
 8028d8e:	18ab      	adds	r3, r5, r2
 8028d90:	e7e1      	b.n	8028d56 <__sccl+0x32>
 8028d92:	4610      	mov	r0, r2
 8028d94:	e7da      	b.n	8028d4c <__sccl+0x28>

08028d96 <__submore>:
 8028d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028d9a:	460c      	mov	r4, r1
 8028d9c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028d9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028da2:	4299      	cmp	r1, r3
 8028da4:	d11d      	bne.n	8028de2 <__submore+0x4c>
 8028da6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8028daa:	f7fb f981 	bl	80240b0 <_malloc_r>
 8028dae:	b918      	cbnz	r0, 8028db8 <__submore+0x22>
 8028db0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8028db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028db8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028dbc:	63a3      	str	r3, [r4, #56]	; 0x38
 8028dbe:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8028dc2:	6360      	str	r0, [r4, #52]	; 0x34
 8028dc4:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8028dc8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8028dcc:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8028dd0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8028dd4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8028dd8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8028ddc:	6020      	str	r0, [r4, #0]
 8028dde:	2000      	movs	r0, #0
 8028de0:	e7e8      	b.n	8028db4 <__submore+0x1e>
 8028de2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8028de4:	0077      	lsls	r7, r6, #1
 8028de6:	463a      	mov	r2, r7
 8028de8:	f7ff fc40 	bl	802866c <_realloc_r>
 8028dec:	4605      	mov	r5, r0
 8028dee:	2800      	cmp	r0, #0
 8028df0:	d0de      	beq.n	8028db0 <__submore+0x1a>
 8028df2:	eb00 0806 	add.w	r8, r0, r6
 8028df6:	4601      	mov	r1, r0
 8028df8:	4632      	mov	r2, r6
 8028dfa:	4640      	mov	r0, r8
 8028dfc:	f7fd fc9f 	bl	802673e <memcpy>
 8028e00:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8028e04:	f8c4 8000 	str.w	r8, [r4]
 8028e08:	e7e9      	b.n	8028dde <__submore+0x48>

08028e0a <_malloc_usable_size_r>:
 8028e0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028e0e:	1f18      	subs	r0, r3, #4
 8028e10:	2b00      	cmp	r3, #0
 8028e12:	bfbc      	itt	lt
 8028e14:	580b      	ldrlt	r3, [r1, r0]
 8028e16:	18c0      	addlt	r0, r0, r3
 8028e18:	4770      	bx	lr
	...

08028e1c <_init>:
 8028e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028e1e:	bf00      	nop
 8028e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028e22:	bc08      	pop	{r3}
 8028e24:	469e      	mov	lr, r3
 8028e26:	4770      	bx	lr

08028e28 <_fini>:
 8028e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028e2a:	bf00      	nop
 8028e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028e2e:	bc08      	pop	{r3}
 8028e30:	469e      	mov	lr, r3
 8028e32:	4770      	bx	lr
