
STM32F4_BOARD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000224f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000050dc  08022684  08022684  00032684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027760  08027760  00040098  2**0
                  CONTENTS
  4 .ARM          00000008  08027760  08027760  00037760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027768  08027768  00040098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027768  08027768  00037768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802776c  0802776c  0003776c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08027770  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040098  2**0
                  CONTENTS
 10 .bss          00012bd4  20000098  20000098  00040098  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012c6c  20012c6c  00040098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040098  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000400c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00046630  00000000  00000000  0004010b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a79e  00000000  00000000  0008673b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000033a0  00000000  00000000  00090ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002a11  00000000  00000000  00094280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00038b98  00000000  00000000  00096c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004c6f8  00000000  00000000  000cf829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fcdd2  00000000  00000000  0011bf21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000e2e0  00000000  00000000  00218cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00226fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000098 	.word	0x20000098
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0802266c 	.word	0x0802266c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000009c 	.word	0x2000009c
 80001cc:	0802266c 	.word	0x0802266c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b984 	b.w	80005a0 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f81a 	bl	80002d8 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__popcountsi2>:
 80002b0:	0843      	lsrs	r3, r0, #1
 80002b2:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	0883      	lsrs	r3, r0, #2
 80002ba:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
 80002be:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
 80002c2:	4418      	add	r0, r3
 80002c4:	eb00 1010 	add.w	r0, r0, r0, lsr #4
 80002c8:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
 80002cc:	eb00 2000 	add.w	r0, r0, r0, lsl #8
 80002d0:	eb00 4000 	add.w	r0, r0, r0, lsl #16
 80002d4:	0e00      	lsrs	r0, r0, #24
 80002d6:	4770      	bx	lr

080002d8 <__udivmoddi4>:
 80002d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002dc:	9e08      	ldr	r6, [sp, #32]
 80002de:	460d      	mov	r5, r1
 80002e0:	4604      	mov	r4, r0
 80002e2:	460f      	mov	r7, r1
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d14a      	bne.n	800037e <__udivmoddi4+0xa6>
 80002e8:	428a      	cmp	r2, r1
 80002ea:	4694      	mov	ip, r2
 80002ec:	d965      	bls.n	80003ba <__udivmoddi4+0xe2>
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	b143      	cbz	r3, 8000306 <__udivmoddi4+0x2e>
 80002f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002f8:	f1c3 0220 	rsb	r2, r3, #32
 80002fc:	409f      	lsls	r7, r3
 80002fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000302:	4317      	orrs	r7, r2
 8000304:	409c      	lsls	r4, r3
 8000306:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800030a:	fa1f f58c 	uxth.w	r5, ip
 800030e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000312:	0c22      	lsrs	r2, r4, #16
 8000314:	fb0e 7711 	mls	r7, lr, r1, r7
 8000318:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800031c:	fb01 f005 	mul.w	r0, r1, r5
 8000320:	4290      	cmp	r0, r2
 8000322:	d90a      	bls.n	800033a <__udivmoddi4+0x62>
 8000324:	eb1c 0202 	adds.w	r2, ip, r2
 8000328:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800032c:	f080 811c 	bcs.w	8000568 <__udivmoddi4+0x290>
 8000330:	4290      	cmp	r0, r2
 8000332:	f240 8119 	bls.w	8000568 <__udivmoddi4+0x290>
 8000336:	3902      	subs	r1, #2
 8000338:	4462      	add	r2, ip
 800033a:	1a12      	subs	r2, r2, r0
 800033c:	b2a4      	uxth	r4, r4
 800033e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000342:	fb0e 2210 	mls	r2, lr, r0, r2
 8000346:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800034a:	fb00 f505 	mul.w	r5, r0, r5
 800034e:	42a5      	cmp	r5, r4
 8000350:	d90a      	bls.n	8000368 <__udivmoddi4+0x90>
 8000352:	eb1c 0404 	adds.w	r4, ip, r4
 8000356:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800035a:	f080 8107 	bcs.w	800056c <__udivmoddi4+0x294>
 800035e:	42a5      	cmp	r5, r4
 8000360:	f240 8104 	bls.w	800056c <__udivmoddi4+0x294>
 8000364:	4464      	add	r4, ip
 8000366:	3802      	subs	r0, #2
 8000368:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800036c:	1b64      	subs	r4, r4, r5
 800036e:	2100      	movs	r1, #0
 8000370:	b11e      	cbz	r6, 800037a <__udivmoddi4+0xa2>
 8000372:	40dc      	lsrs	r4, r3
 8000374:	2300      	movs	r3, #0
 8000376:	e9c6 4300 	strd	r4, r3, [r6]
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	428b      	cmp	r3, r1
 8000380:	d908      	bls.n	8000394 <__udivmoddi4+0xbc>
 8000382:	2e00      	cmp	r6, #0
 8000384:	f000 80ed 	beq.w	8000562 <__udivmoddi4+0x28a>
 8000388:	2100      	movs	r1, #0
 800038a:	e9c6 0500 	strd	r0, r5, [r6]
 800038e:	4608      	mov	r0, r1
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	fab3 f183 	clz	r1, r3
 8000398:	2900      	cmp	r1, #0
 800039a:	d149      	bne.n	8000430 <__udivmoddi4+0x158>
 800039c:	42ab      	cmp	r3, r5
 800039e:	d302      	bcc.n	80003a6 <__udivmoddi4+0xce>
 80003a0:	4282      	cmp	r2, r0
 80003a2:	f200 80f8 	bhi.w	8000596 <__udivmoddi4+0x2be>
 80003a6:	1a84      	subs	r4, r0, r2
 80003a8:	eb65 0203 	sbc.w	r2, r5, r3
 80003ac:	2001      	movs	r0, #1
 80003ae:	4617      	mov	r7, r2
 80003b0:	2e00      	cmp	r6, #0
 80003b2:	d0e2      	beq.n	800037a <__udivmoddi4+0xa2>
 80003b4:	e9c6 4700 	strd	r4, r7, [r6]
 80003b8:	e7df      	b.n	800037a <__udivmoddi4+0xa2>
 80003ba:	b902      	cbnz	r2, 80003be <__udivmoddi4+0xe6>
 80003bc:	deff      	udf	#255	; 0xff
 80003be:	fab2 f382 	clz	r3, r2
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	f040 8090 	bne.w	80004e8 <__udivmoddi4+0x210>
 80003c8:	1a8a      	subs	r2, r1, r2
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2101      	movs	r1, #1
 80003d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80003d8:	fb07 2015 	mls	r0, r7, r5, r2
 80003dc:	0c22      	lsrs	r2, r4, #16
 80003de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003e2:	fb0e f005 	mul.w	r0, lr, r5
 80003e6:	4290      	cmp	r0, r2
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x124>
 80003ea:	eb1c 0202 	adds.w	r2, ip, r2
 80003ee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x122>
 80003f4:	4290      	cmp	r0, r2
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2b8>
 80003fa:	4645      	mov	r5, r8
 80003fc:	1a12      	subs	r2, r2, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb2 f0f7 	udiv	r0, r2, r7
 8000404:	fb07 2210 	mls	r2, r7, r0, r2
 8000408:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x14e>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x14c>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2c2>
 8000424:	4610      	mov	r0, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800042e:	e79f      	b.n	8000370 <__udivmoddi4+0x98>
 8000430:	f1c1 0720 	rsb	r7, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa05 f401 	lsl.w	r4, r5, r1
 8000442:	fa20 f307 	lsr.w	r3, r0, r7
 8000446:	40fd      	lsrs	r5, r7
 8000448:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044c:	4323      	orrs	r3, r4
 800044e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000452:	fa1f fe8c 	uxth.w	lr, ip
 8000456:	fb09 5518 	mls	r5, r9, r8, r5
 800045a:	0c1c      	lsrs	r4, r3, #16
 800045c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000460:	fb08 f50e 	mul.w	r5, r8, lr
 8000464:	42a5      	cmp	r5, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	fa00 f001 	lsl.w	r0, r0, r1
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b0>
 8000470:	eb1c 0404 	adds.w	r4, ip, r4
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2b4>
 800047c:	42a5      	cmp	r5, r4
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2b4>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4464      	add	r4, ip
 8000488:	1b64      	subs	r4, r4, r5
 800048a:	b29d      	uxth	r5, r3
 800048c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000490:	fb09 4413 	mls	r4, r9, r3, r4
 8000494:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000498:	fb03 fe0e 	mul.w	lr, r3, lr
 800049c:	45a6      	cmp	lr, r4
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1da>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2ac>
 80004aa:	45a6      	cmp	lr, r4
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2ac>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	4464      	add	r4, ip
 80004b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004b6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ba:	eba4 040e 	sub.w	r4, r4, lr
 80004be:	42ac      	cmp	r4, r5
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46ae      	mov	lr, r5
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x29c>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x298>
 80004c8:	b156      	cbz	r6, 80004e0 <__udivmoddi4+0x208>
 80004ca:	ebb0 0208 	subs.w	r2, r0, r8
 80004ce:	eb64 040e 	sbc.w	r4, r4, lr
 80004d2:	fa04 f707 	lsl.w	r7, r4, r7
 80004d6:	40ca      	lsrs	r2, r1
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	4317      	orrs	r7, r2
 80004dc:	e9c6 7400 	strd	r7, r4, [r6]
 80004e0:	4618      	mov	r0, r3
 80004e2:	2100      	movs	r1, #0
 80004e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e8:	f1c3 0120 	rsb	r1, r3, #32
 80004ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f0:	fa20 f201 	lsr.w	r2, r0, r1
 80004f4:	fa25 f101 	lsr.w	r1, r5, r1
 80004f8:	409d      	lsls	r5, r3
 80004fa:	432a      	orrs	r2, r5
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb1 f0f7 	udiv	r0, r1, r7
 8000508:	fb07 1510 	mls	r5, r7, r0, r1
 800050c:	0c11      	lsrs	r1, r2, #16
 800050e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000512:	fb00 f50e 	mul.w	r5, r0, lr
 8000516:	428d      	cmp	r5, r1
 8000518:	fa04 f403 	lsl.w	r4, r4, r3
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x258>
 800051e:	eb1c 0101 	adds.w	r1, ip, r1
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b0>
 8000528:	428d      	cmp	r5, r1
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b0>
 800052c:	3802      	subs	r0, #2
 800052e:	4461      	add	r1, ip
 8000530:	1b49      	subs	r1, r1, r5
 8000532:	b292      	uxth	r2, r2
 8000534:	fbb1 f5f7 	udiv	r5, r1, r7
 8000538:	fb07 1115 	mls	r1, r7, r5, r1
 800053c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000540:	fb05 f10e 	mul.w	r1, r5, lr
 8000544:	4291      	cmp	r1, r2
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x282>
 8000548:	eb1c 0202 	adds.w	r2, ip, r2
 800054c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2a8>
 8000552:	4291      	cmp	r1, r2
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2a8>
 8000556:	3d02      	subs	r5, #2
 8000558:	4462      	add	r2, ip
 800055a:	1a52      	subs	r2, r2, r1
 800055c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0xfc>
 8000562:	4631      	mov	r1, r6
 8000564:	4630      	mov	r0, r6
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xa2>
 8000568:	4639      	mov	r1, r7
 800056a:	e6e6      	b.n	800033a <__udivmoddi4+0x62>
 800056c:	4610      	mov	r0, r2
 800056e:	e6fb      	b.n	8000368 <__udivmoddi4+0x90>
 8000570:	4548      	cmp	r0, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f0>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb65 0e0c 	sbc.w	lr, r5, ip
 800057c:	3b01      	subs	r3, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f0>
 8000580:	4645      	mov	r5, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x282>
 8000584:	462b      	mov	r3, r5
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1da>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x258>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b0>
 8000590:	3d02      	subs	r5, #2
 8000592:	4462      	add	r2, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x124>
 8000596:	4608      	mov	r0, r1
 8000598:	e70a      	b.n	80003b0 <__udivmoddi4+0xd8>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x14e>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <AdapterDisplaySSD1306Init>:

void WriteMenuToSSD1306(const MenuData_t *menu_data);
void WriteLinetoSSD1306(const char *text, int line_number);

void AdapterDisplaySSD1306Init()
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	b0a0      	sub	sp, #128	; 0x80
 80005a8:	af00      	add	r7, sp, #0
	MenuData_t menu_data;
	ssd1306_Init();
 80005aa:	f01f fea7 	bl	80202fc <ssd1306_Init>
	ssd1306_Fill(Black);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f01f ff0c 	bl	80203cc <ssd1306_Fill>

	// Inicializa as informações do menu
	// Menu 1: IP, MASK, GATEWAY
	strcpy(menu_data.items[PAGE_0][LINE_0],"IPAD:0.0.0.0");
 80005b4:	463b      	mov	r3, r7
 80005b6:	3301      	adds	r3, #1
 80005b8:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <AdapterDisplaySSD1306Init+0x90>)
 80005ba:	461c      	mov	r4, r3
 80005bc:	4613      	mov	r3, r2
 80005be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005c0:	6020      	str	r0, [r4, #0]
 80005c2:	6061      	str	r1, [r4, #4]
 80005c4:	60a2      	str	r2, [r4, #8]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	7323      	strb	r3, [r4, #12]
	strcpy(menu_data.items[PAGE_0][LINE_1],"MASK:0.0.0.0");
 80005ca:	463b      	mov	r3, r7
 80005cc:	3316      	adds	r3, #22
 80005ce:	4a1a      	ldr	r2, [pc, #104]	; (8000638 <AdapterDisplaySSD1306Init+0x94>)
 80005d0:	461c      	mov	r4, r3
 80005d2:	4613      	mov	r3, r2
 80005d4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005d6:	6020      	str	r0, [r4, #0]
 80005d8:	6061      	str	r1, [r4, #4]
 80005da:	60a2      	str	r2, [r4, #8]
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	7323      	strb	r3, [r4, #12]
	strcpy(menu_data.items[PAGE_0][LINE_2],"GWAY:0.0.0.0");
 80005e0:	463b      	mov	r3, r7
 80005e2:	332b      	adds	r3, #43	; 0x2b
 80005e4:	4a15      	ldr	r2, [pc, #84]	; (800063c <AdapterDisplaySSD1306Init+0x98>)
 80005e6:	461c      	mov	r4, r3
 80005e8:	4613      	mov	r3, r2
 80005ea:	cb07      	ldmia	r3!, {r0, r1, r2}
 80005ec:	6020      	str	r0, [r4, #0]
 80005ee:	6061      	str	r1, [r4, #4]
 80005f0:	60a2      	str	r2, [r4, #8]
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	7323      	strb	r3, [r4, #12]


	// Menu 2: CFG, ROT
	strcpy(menu_data.items[1][0], "CFG:DC Port:0");
 80005f6:	463b      	mov	r3, r7
 80005f8:	3340      	adds	r3, #64	; 0x40
 80005fa:	4a11      	ldr	r2, [pc, #68]	; (8000640 <AdapterDisplaySSD1306Init+0x9c>)
 80005fc:	461c      	mov	r4, r3
 80005fe:	4613      	mov	r3, r2
 8000600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000602:	c407      	stmia	r4!, {r0, r1, r2}
 8000604:	8023      	strh	r3, [r4, #0]
    strcpy(menu_data.items[1][1], "ROT:DC SUP:DC FAB:DC");
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <AdapterDisplaySSD1306Init+0xa0>)
 8000608:	f107 0555 	add.w	r5, r7, #85	; 0x55
 800060c:	461c      	mov	r4, r3
 800060e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000610:	6028      	str	r0, [r5, #0]
 8000612:	6069      	str	r1, [r5, #4]
 8000614:	60aa      	str	r2, [r5, #8]
 8000616:	60eb      	str	r3, [r5, #12]
 8000618:	6820      	ldr	r0, [r4, #0]
 800061a:	6128      	str	r0, [r5, #16]
 800061c:	7923      	ldrb	r3, [r4, #4]
 800061e:	752b      	strb	r3, [r5, #20]

	// Escreve as informações do menu no display
	WriteMenuToSSD1306(&menu_data);
 8000620:	463b      	mov	r3, r7
 8000622:	4618      	mov	r0, r3
 8000624:	f000 f810 	bl	8000648 <WriteMenuToSSD1306>

	// Inicializa a tarefa de atualização do display
	AdapterDisplayInitUpdateTask();
 8000628:	f000 f898 	bl	800075c <AdapterDisplayInitUpdateTask>
}
 800062c:	bf00      	nop
 800062e:	3780      	adds	r7, #128	; 0x80
 8000630:	46bd      	mov	sp, r7
 8000632:	bdb0      	pop	{r4, r5, r7, pc}
 8000634:	08022684 	.word	0x08022684
 8000638:	08022694 	.word	0x08022694
 800063c:	080226a4 	.word	0x080226a4
 8000640:	080226b4 	.word	0x080226b4
 8000644:	080226c4 	.word	0x080226c4

08000648 <WriteMenuToSSD1306>:

void WriteMenuToSSD1306(const MenuData_t *menu_data)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	// Limpa o display antes de escrever as novas informações
	// clear_display();

	// Escreve cada linha do menu no display
	int start_index = current_page * MENU_ITEMS_PER_PAGE;
 8000650:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <WriteMenuToSSD1306+0x68>)
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	4613      	mov	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	4413      	add	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
	int end_index = start_index + MENU_ITEMS_PER_PAGE;
 800065c:	693b      	ldr	r3, [r7, #16]
 800065e:	3303      	adds	r3, #3
 8000660:	60fb      	str	r3, [r7, #12]

	for (int i = start_index; i < end_index; i++)
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	617b      	str	r3, [r7, #20]
 8000666:	e019      	b.n	800069c <WriteMenuToSSD1306+0x54>
	{
		WriteLinetoSSD1306(menu_data->items[current_page][i - start_index], i - start_index);
 8000668:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <WriteMenuToSSD1306+0x68>)
 800066a:	6819      	ldr	r1, [r3, #0]
 800066c:	697a      	ldr	r2, [r7, #20]
 800066e:	693b      	ldr	r3, [r7, #16]
 8000670:	1ad2      	subs	r2, r2, r3
 8000672:	4613      	mov	r3, r2
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	4413      	add	r3, r2
 8000678:	00da      	lsls	r2, r3, #3
 800067a:	1ad2      	subs	r2, r2, r3
 800067c:	460b      	mov	r3, r1
 800067e:	019b      	lsls	r3, r3, #6
 8000680:	1a5b      	subs	r3, r3, r1
 8000682:	4413      	add	r3, r2
 8000684:	687a      	ldr	r2, [r7, #4]
 8000686:	4413      	add	r3, r2
 8000688:	1c58      	adds	r0, r3, #1
 800068a:	697a      	ldr	r2, [r7, #20]
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	1ad3      	subs	r3, r2, r3
 8000690:	4619      	mov	r1, r3
 8000692:	f000 f80f 	bl	80006b4 <WriteLinetoSSD1306>
	for (int i = start_index; i < end_index; i++)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3301      	adds	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	697a      	ldr	r2, [r7, #20]
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dbe1      	blt.n	8000668 <WriteMenuToSSD1306+0x20>
	}

	// Atualiza o display
	//update_display();
}
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	200000b4 	.word	0x200000b4

080006b4 <WriteLinetoSSD1306>:
}


// Função para escrever uma linha do menu no display
void WriteLinetoSSD1306(const char *text, int line_number)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	// Define a posição vertical da linha baseada no número da linha
	int vertical_position = 2 + line_number * 10; // Ajuste conforme necessário
 80006be:	683a      	ldr	r2, [r7, #0]
 80006c0:	4613      	mov	r3, r2
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	4413      	add	r3, r2
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	3302      	adds	r3, #2
 80006ca:	60fb      	str	r3, [r7, #12]
	// Define as coordenadas para escrever a linha no display
	ssd1306_SetCursor(1, vertical_position);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	4619      	mov	r1, r3
 80006d2:	2001      	movs	r0, #1
 80006d4:	f01f ffbc 	bl	8020650 <ssd1306_SetCursor>
	ssd1306_WriteString(text, Font_6x8, White);
 80006d8:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <WriteLinetoSSD1306+0x3c>)
 80006da:	2301      	movs	r3, #1
 80006dc:	ca06      	ldmia	r2, {r1, r2}
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f01f ff90 	bl	8020604 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 80006e4:	f01f fe8a 	bl	80203fc <ssd1306_UpdateScreen>
}
 80006e8:	bf00      	nop
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000034 	.word	0x20000034

080006f4 <UpdateSSD1306Task>:

void UpdateSSD1306Task(void const *argument)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b0a2      	sub	sp, #136	; 0x88
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]

	MenuData_t menu_data;

	while (1)
	{
		if (xQueueReceive(menuQueueHandle, &menu_data, portMAX_DELAY) == pdPASS)
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <UpdateSSD1306Task+0x34>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f107 0108 	add.w	r1, r7, #8
 8000704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000708:	4618      	mov	r0, r3
 800070a:	f007 fa59 	bl	8007bc0 <xQueueReceive>
 800070e:	4603      	mov	r3, r0
 8000710:	2b01      	cmp	r3, #1
 8000712:	d104      	bne.n	800071e <UpdateSSD1306Task+0x2a>
		{
			WriteMenuToSSD1306(&menu_data);
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	4618      	mov	r0, r3
 800071a:	f7ff ff95 	bl	8000648 <WriteMenuToSSD1306>
		}
		osDelay(10);
 800071e:	200a      	movs	r0, #10
 8000720:	f006 fb6e 	bl	8006e00 <osDelay>
		if (xQueueReceive(menuQueueHandle, &menu_data, portMAX_DELAY) == pdPASS)
 8000724:	e7ea      	b.n	80006fc <UpdateSSD1306Task+0x8>
 8000726:	bf00      	nop
 8000728:	20000228 	.word	0x20000228

0800072c <SendDataToMenuQueueUpdate>:
    }
}

void SendDataToMenuQueueUpdate(const MenuData_t *menu_data)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
	// Tenta enviar os dados para a fila, aguardando até que haja espaço na fila
	if (xQueueSend(menuQueueHandle, menu_data, portMAX_DELAY) != pdPASS)
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <SendDataToMenuQueueUpdate+0x2c>)
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800073e:	6879      	ldr	r1, [r7, #4]
 8000740:	f007 f818 	bl	8007774 <xQueueGenericSend>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d002      	beq.n	8000750 <SendDataToMenuQueueUpdate+0x24>
	{
		vTaskDelay(pdMS_TO_TICKS(50));
 800074a:	2032      	movs	r0, #50	; 0x32
 800074c:	f008 f85e 	bl	800880c <vTaskDelay>
	}
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000228 	.word	0x20000228

0800075c <AdapterDisplayInitUpdateTask>:

void AdapterDisplayInitUpdateTask()
{
 800075c:	b5b0      	push	{r4, r5, r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
	/* definition and creation of tcpServerTask */
	osThreadDef(updateDisplayTask, UpdateSSD1306Task, osPriorityBelowNormal, 0, UPDATE_DISPLAY_TASK_STACK_SIZE);
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <AdapterDisplayInitUpdateTask+0x30>)
 8000764:	1d3c      	adds	r4, r7, #4
 8000766:	461d      	mov	r5, r3
 8000768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800076a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800076c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000770:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	updateDisplayTaskHandle = osThreadCreate(osThread(updateDisplayTask), NULL);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f006 faf5 	bl	8006d68 <osThreadCreate>
 800077e:	4603      	mov	r3, r0
 8000780:	4a03      	ldr	r2, [pc, #12]	; (8000790 <AdapterDisplayInitUpdateTask+0x34>)
 8000782:	6013      	str	r3, [r2, #0]
}
 8000784:	bf00      	nop
 8000786:	3720      	adds	r7, #32
 8000788:	46bd      	mov	sp, r7
 800078a:	bdb0      	pop	{r4, r5, r7, pc}
 800078c:	080226f0 	.word	0x080226f0
 8000790:	200000b8 	.word	0x200000b8

08000794 <FileSystemInit>:
 *         - Criação de diretórios;
 *         - Leitura do arquivo de configurações;
 * @retval Nonecfg
 */
int FileSystemInit()
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0

	  LOG2("Iniciando sistema de arquivos ... ");
 800079a:	4833      	ldr	r0, [pc, #204]	; (8000868 <FileSystemInit+0xd4>)
 800079c:	f020 fe72 	bl	8021484 <puts>

	  int status = lfs_storage_init(&cfg);
 80007a0:	4832      	ldr	r0, [pc, #200]	; (800086c <FileSystemInit+0xd8>)
 80007a2:	f000 fc71 	bl	8001088 <lfs_storage_init>
 80007a6:	6078      	str	r0, [r7, #4]

	  if (!status)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d105      	bne.n	80007ba <FileSystemInit+0x26>
	  {
		  LOG2( "erro: %i", status);
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	482f      	ldr	r0, [pc, #188]	; (8000870 <FileSystemInit+0xdc>)
 80007b2:	f020 fe01 	bl	80213b8 <iprintf>
	    return status;
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	e052      	b.n	8000860 <FileSystemInit+0xcc>
	  }

	  LOG2("OK");
 80007ba:	482e      	ldr	r0, [pc, #184]	; (8000874 <FileSystemInit+0xe0>)
 80007bc:	f020 fe62 	bl	8021484 <puts>

  lfs_get_default_config(&cfg);
 80007c0:	482a      	ldr	r0, [pc, #168]	; (800086c <FileSystemInit+0xd8>)
 80007c2:	f000 fc4b 	bl	800105c <lfs_get_default_config>

  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	e016      	b.n	80007fa <FileSystemInit+0x66>
  {
    openFile[i].number = 0;
 80007cc:	4a2a      	ldr	r2, [pc, #168]	; (8000878 <FileSystemInit+0xe4>)
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	2158      	movs	r1, #88	; 0x58
 80007d2:	fb01 f303 	mul.w	r3, r1, r3
 80007d6:	4413      	add	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
    memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	2258      	movs	r2, #88	; 0x58
 80007e0:	fb02 f303 	mul.w	r3, r2, r3
 80007e4:	4a24      	ldr	r2, [pc, #144]	; (8000878 <FileSystemInit+0xe4>)
 80007e6:	4413      	add	r3, r2
 80007e8:	3304      	adds	r3, #4
 80007ea:	2254      	movs	r2, #84	; 0x54
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f020 fff8 	bl	80217e4 <memset>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	3301      	adds	r3, #1
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	2b03      	cmp	r3, #3
 80007fe:	dde5      	ble.n	80007cc <FileSystemInit+0x38>
  }


  LOG2("Montando sistema de arquivos ... ");
 8000800:	481e      	ldr	r0, [pc, #120]	; (800087c <FileSystemInit+0xe8>)
 8000802:	f020 fe3f 	bl	8021484 <puts>

  status = lfs_mount(&lfs, &cfg);
 8000806:	4919      	ldr	r1, [pc, #100]	; (800086c <FileSystemInit+0xd8>)
 8000808:	481d      	ldr	r0, [pc, #116]	; (8000880 <FileSystemInit+0xec>)
 800080a:	f00f fcd4 	bl	80101b6 <lfs_mount>
 800080e:	6078      	str	r0, [r7, #4]
  if (status)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d016      	beq.n	8000844 <FileSystemInit+0xb0>
  {
	  LOG2("erro: %i", status);
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	4815      	ldr	r0, [pc, #84]	; (8000870 <FileSystemInit+0xdc>)
 800081a:	f020 fdcd 	bl	80213b8 <iprintf>
    // Se sistema de arquivos corrompido
    if (status == LFS_ERR_CORRUPT)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f113 0f54 	cmn.w	r3, #84	; 0x54
 8000824:	d10e      	bne.n	8000844 <FileSystemInit+0xb0>
    {
      // Formata o sistema de arquivos
    	LOG2("Formatando sistema de arquivos ... ");
 8000826:	4817      	ldr	r0, [pc, #92]	; (8000884 <FileSystemInit+0xf0>)
 8000828:	f020 fe2c 	bl	8021484 <puts>
      status = lfs_format(&lfs, &cfg);
 800082c:	490f      	ldr	r1, [pc, #60]	; (800086c <FileSystemInit+0xd8>)
 800082e:	4814      	ldr	r0, [pc, #80]	; (8000880 <FileSystemInit+0xec>)
 8000830:	f00f fca4 	bl	801017c <lfs_format>
 8000834:	6078      	str	r0, [r7, #4]
      if (status)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d003      	beq.n	8000844 <FileSystemInit+0xb0>
      {
    	  LOG2("erro: %d", status);
 800083c:	6879      	ldr	r1, [r7, #4]
 800083e:	4812      	ldr	r0, [pc, #72]	; (8000888 <FileSystemInit+0xf4>)
 8000840:	f020 fdba 	bl	80213b8 <iprintf>
      }
    }
  }

  if (status == LFS_ERR_OK)
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d109      	bne.n	800085e <FileSystemInit+0xca>
  {
	  LOG2("OK");
 800084a:	480a      	ldr	r0, [pc, #40]	; (8000874 <FileSystemInit+0xe0>)
 800084c:	f020 fe1a 	bl	8021484 <puts>
    lfs_mounted = 1;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <FileSystemInit+0xf8>)
 8000852:	2201      	movs	r2, #1
 8000854:	601a      	str	r2, [r3, #0]

    // Cria diretório de configurações
    lfs_mkdir(&lfs, FILESYSTEM_FOLDER_MAP);
 8000856:	490e      	ldr	r1, [pc, #56]	; (8000890 <FileSystemInit+0xfc>)
 8000858:	4809      	ldr	r0, [pc, #36]	; (8000880 <FileSystemInit+0xec>)
 800085a:	f00f fd43 	bl	80102e4 <lfs_mkdir>

  }

  return status;
 800085e:	687b      	ldr	r3, [r7, #4]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	0802270c 	.word	0x0802270c
 800086c:	2000eac0 	.word	0x2000eac0
 8000870:	08022730 	.word	0x08022730
 8000874:	0802273c 	.word	0x0802273c
 8000878:	200000bc 	.word	0x200000bc
 800087c:	08022740 	.word	0x08022740
 8000880:	2000ea48 	.word	0x2000ea48
 8000884:	08022764 	.word	0x08022764
 8000888:	0802278c 	.word	0x0802278c
 800088c:	2000ea44 	.word	0x2000ea44
 8000890:	08022798 	.word	0x08022798

08000894 <__sflags>:
 * Return the (stdio) flags for a given mode.
 * Based on https://android.googlesource.com/platform/bionic/+/ics-mr0/libc/stdio/flags.c
 * Return 0 on error.
 */
static int __sflags(const char *mode)
{
 8000894:	b480      	push	{r7}
 8000896:	b087      	sub	sp, #28
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  int ret, m, o;
  switch (*mode++)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	1c5a      	adds	r2, r3, #1
 80008a0:	607a      	str	r2, [r7, #4]
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b77      	cmp	r3, #119	; 0x77
 80008a6:	d00a      	beq.n	80008be <__sflags+0x2a>
 80008a8:	2b77      	cmp	r3, #119	; 0x77
 80008aa:	dc14      	bgt.n	80008d6 <__sflags+0x42>
 80008ac:	2b61      	cmp	r3, #97	; 0x61
 80008ae:	d00c      	beq.n	80008ca <__sflags+0x36>
 80008b0:	2b72      	cmp	r3, #114	; 0x72
 80008b2:	d110      	bne.n	80008d6 <__sflags+0x42>
  {
    case 'r': /* open for reading */
      m = LFS_O_RDONLY;
 80008b4:	2301      	movs	r3, #1
 80008b6:	617b      	str	r3, [r7, #20]
      o = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	613b      	str	r3, [r7, #16]
      break;
 80008bc:	e010      	b.n	80008e0 <__sflags+0x4c>
    case 'w': /* open for writing */
      m = LFS_O_WRONLY;
 80008be:	2302      	movs	r3, #2
 80008c0:	617b      	str	r3, [r7, #20]
      o = LFS_O_CREAT | LFS_O_TRUNC;
 80008c2:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80008c6:	613b      	str	r3, [r7, #16]
      break;
 80008c8:	e00a      	b.n	80008e0 <__sflags+0x4c>
    case 'a': /* open for appending */
      m = LFS_O_WRONLY;
 80008ca:	2302      	movs	r3, #2
 80008cc:	617b      	str	r3, [r7, #20]
      o = LFS_O_CREAT | LFS_O_APPEND;
 80008ce:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80008d2:	613b      	str	r3, [r7, #16]
      break;
 80008d4:	e004      	b.n	80008e0 <__sflags+0x4c>
    default: /* illegal mode */
      errno = EINVAL;
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <__sflags+0x80>)
 80008d8:	2216      	movs	r2, #22
 80008da:	601a      	str	r2, [r3, #0]
      return (0);
 80008dc:	2300      	movs	r3, #0
 80008de:	e013      	b.n	8000908 <__sflags+0x74>
  }
  /* [rwa]\+ or [rwa]b\+ means read and write */
  if (*mode == '+' || (*mode == 'b' && mode[1] == '+'))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b2b      	cmp	r3, #43	; 0x2b
 80008e6:	d008      	beq.n	80008fa <__sflags+0x66>
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	2b62      	cmp	r3, #98	; 0x62
 80008ee:	d106      	bne.n	80008fe <__sflags+0x6a>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	3301      	adds	r3, #1
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	2b2b      	cmp	r3, #43	; 0x2b
 80008f8:	d101      	bne.n	80008fe <__sflags+0x6a>
  {
    m = LFS_O_RDWR;
 80008fa:	2303      	movs	r3, #3
 80008fc:	617b      	str	r3, [r7, #20]
  }
  ret = m | o;
 80008fe:	697a      	ldr	r2, [r7, #20]
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	4313      	orrs	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
  return (ret);
 8000906:	68fb      	ldr	r3, [r7, #12]
}
 8000908:	4618      	mov	r0, r3
 800090a:	371c      	adds	r7, #28
 800090c:	46bd      	mov	sp, r7
 800090e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000912:	4770      	bx	lr
 8000914:	20012c64 	.word	0x20012c64

08000918 <file_open>:
 * @param  path  Ponteiro para a string contendo o path do arquivo
 * @param  mode  C string contendo o modo de acesso do arquivo
 * @retval file  Ponteiro para o struct de controle do arquivo
 */
FILE_POINTER file_open(const char *path, const char *mode)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  int flags;
  int count = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]

  if (openFilesCount >= MAX_OPEN_FILES)
 8000926:	4b3b      	ldr	r3, [pc, #236]	; (8000a14 <file_open+0xfc>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b03      	cmp	r3, #3
 800092c:	dd01      	ble.n	8000932 <file_open+0x1a>
    return NULL;
 800092e:	2300      	movs	r3, #0
 8000930:	e06c      	b.n	8000a0c <file_open+0xf4>

  if ((flags = __sflags(mode)) == 0)
 8000932:	6838      	ldr	r0, [r7, #0]
 8000934:	f7ff ffae 	bl	8000894 <__sflags>
 8000938:	60f8      	str	r0, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d101      	bne.n	8000944 <file_open+0x2c>
    return (NULL);
 8000940:	2300      	movs	r3, #0
 8000942:	e063      	b.n	8000a0c <file_open+0xf4>

  // Remove line feed and carriage return from path
  char *pchar = (char*)path;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	613b      	str	r3, [r7, #16]
  while (*pchar != 0)
 8000948:	e00d      	b.n	8000966 <file_open+0x4e>
  {
    if ((*pchar == '\r') || (*pchar == '\n'))
 800094a:	693b      	ldr	r3, [r7, #16]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b0d      	cmp	r3, #13
 8000950:	d003      	beq.n	800095a <file_open+0x42>
 8000952:	693b      	ldr	r3, [r7, #16]
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b0a      	cmp	r3, #10
 8000958:	d102      	bne.n	8000960 <file_open+0x48>
      *pchar = 0;
 800095a:	693b      	ldr	r3, [r7, #16]
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
    pchar++;
 8000960:	693b      	ldr	r3, [r7, #16]
 8000962:	3301      	adds	r3, #1
 8000964:	613b      	str	r3, [r7, #16]
  while (*pchar != 0)
 8000966:	693b      	ldr	r3, [r7, #16]
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1ed      	bne.n	800094a <file_open+0x32>
  }

  // Create a entry for the file in openFile structure
  for (count = 0; count < MAX_OPEN_FILES; ++count)
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	e018      	b.n	80009a6 <file_open+0x8e>
  {
    if (openFile[count].number == 0)
 8000974:	4a28      	ldr	r2, [pc, #160]	; (8000a18 <file_open+0x100>)
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	2158      	movs	r1, #88	; 0x58
 800097a:	fb01 f303 	mul.w	r3, r1, r3
 800097e:	4413      	add	r3, r2
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d10c      	bne.n	80009a0 <file_open+0x88>
    {
      openFile[count].number = openFilesCount++;
 8000986:	4b23      	ldr	r3, [pc, #140]	; (8000a14 <file_open+0xfc>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	1c5a      	adds	r2, r3, #1
 800098c:	4921      	ldr	r1, [pc, #132]	; (8000a14 <file_open+0xfc>)
 800098e:	600a      	str	r2, [r1, #0]
 8000990:	4921      	ldr	r1, [pc, #132]	; (8000a18 <file_open+0x100>)
 8000992:	697a      	ldr	r2, [r7, #20]
 8000994:	2058      	movs	r0, #88	; 0x58
 8000996:	fb00 f202 	mul.w	r2, r0, r2
 800099a:	440a      	add	r2, r1
 800099c:	6013      	str	r3, [r2, #0]
      break;
 800099e:	e005      	b.n	80009ac <file_open+0x94>
  for (count = 0; count < MAX_OPEN_FILES; ++count)
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	617b      	str	r3, [r7, #20]
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	2b03      	cmp	r3, #3
 80009aa:	dde3      	ble.n	8000974 <file_open+0x5c>
    }
  }

  int status = lfs_file_open(&lfs, &(openFile[count].file), path, flags);
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	2258      	movs	r2, #88	; 0x58
 80009b0:	fb02 f303 	mul.w	r3, r2, r3
 80009b4:	4a18      	ldr	r2, [pc, #96]	; (8000a18 <file_open+0x100>)
 80009b6:	4413      	add	r3, r2
 80009b8:	1d19      	adds	r1, r3, #4
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	4817      	ldr	r0, [pc, #92]	; (8000a1c <file_open+0x104>)
 80009c0:	f00f fc16 	bl	80101f0 <lfs_file_open>
 80009c4:	60b8      	str	r0, [r7, #8]

  if (status != LFS_ERR_OK)
 80009c6:	68bb      	ldr	r3, [r7, #8]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d013      	beq.n	80009f4 <file_open+0xdc>
  {
    openFile[count].number = 0;
 80009cc:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <file_open+0x100>)
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	2158      	movs	r1, #88	; 0x58
 80009d2:	fb01 f303 	mul.w	r3, r1, r3
 80009d6:	4413      	add	r3, r2
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
    openFilesCount--;
 80009dc:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <file_open+0xfc>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <file_open+0xfc>)
 80009e4:	6013      	str	r3, [r2, #0]
    LOG2("Error lfs_file_open - file %s - ret = %i", path, status);
 80009e6:	68ba      	ldr	r2, [r7, #8]
 80009e8:	6879      	ldr	r1, [r7, #4]
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <file_open+0x108>)
 80009ec:	f020 fce4 	bl	80213b8 <iprintf>
    return NULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	e00b      	b.n	8000a0c <file_open+0xf4>
  }

  LOG2("lfs_file_open - file %s - ret = %i", path, status);
 80009f4:	68ba      	ldr	r2, [r7, #8]
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	480a      	ldr	r0, [pc, #40]	; (8000a24 <file_open+0x10c>)
 80009fa:	f020 fcdd 	bl	80213b8 <iprintf>
  return &openFile[count].file;
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2258      	movs	r2, #88	; 0x58
 8000a02:	fb02 f303 	mul.w	r3, r2, r3
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <file_open+0x100>)
 8000a08:	4413      	add	r3, r2
 8000a0a:	3304      	adds	r3, #4
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	3718      	adds	r7, #24
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	2000021c 	.word	0x2000021c
 8000a18:	200000bc 	.word	0x200000bc
 8000a1c:	2000ea48 	.word	0x2000ea48
 8000a20:	080228d8 	.word	0x080228d8
 8000a24:	08022904 	.word	0x08022904

08000a28 <file_close>:
 * @brief  Função de fechamento do arquivo
 * @param  file Ponteiro para o struct de controle do arquivo
 * @retval int  Status da operação
 */
int file_close(FILE_POINTER file)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  //***FS_Flush(lfs, file);
  int status = lfs_file_close(&lfs, file);
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	4821      	ldr	r0, [pc, #132]	; (8000ab8 <file_close+0x90>)
 8000a34:	f00f fc1c 	bl	8010270 <lfs_file_close>
 8000a38:	60b8      	str	r0, [r7, #8]

  // Delete the entry assigned to file in openFile structure
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	e021      	b.n	8000a84 <file_close+0x5c>
  {
    if (&(openFile[i].file) == file)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2258      	movs	r2, #88	; 0x58
 8000a44:	fb02 f303 	mul.w	r3, r2, r3
 8000a48:	4a1c      	ldr	r2, [pc, #112]	; (8000abc <file_close+0x94>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	3304      	adds	r3, #4
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d114      	bne.n	8000a7e <file_close+0x56>
    {
      openFile[i].number = 0;
 8000a54:	4a19      	ldr	r2, [pc, #100]	; (8000abc <file_close+0x94>)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	2158      	movs	r1, #88	; 0x58
 8000a5a:	fb01 f303 	mul.w	r3, r1, r3
 8000a5e:	4413      	add	r3, r2
 8000a60:	2200      	movs	r2, #0
 8000a62:	601a      	str	r2, [r3, #0]
      memset(&openFile[i].file, 0, sizeof(openFile[i].file));
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	2258      	movs	r2, #88	; 0x58
 8000a68:	fb02 f303 	mul.w	r3, r2, r3
 8000a6c:	4a13      	ldr	r2, [pc, #76]	; (8000abc <file_close+0x94>)
 8000a6e:	4413      	add	r3, r2
 8000a70:	3304      	adds	r3, #4
 8000a72:	2254      	movs	r2, #84	; 0x54
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f020 feb4 	bl	80217e4 <memset>
      break;
 8000a7c:	e005      	b.n	8000a8a <file_close+0x62>
  for (int i = 0; i < MAX_OPEN_FILES; ++i)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b03      	cmp	r3, #3
 8000a88:	ddda      	ble.n	8000a40 <file_close+0x18>
    }
  }

  if (status != LFS_ERR_OK)
 8000a8a:	68bb      	ldr	r3, [r7, #8]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d005      	beq.n	8000a9c <file_close+0x74>
  {
	  LOG2("Erro lfs_file_close - ret = %i", status);
 8000a90:	68b9      	ldr	r1, [r7, #8]
 8000a92:	480b      	ldr	r0, [pc, #44]	; (8000ac0 <file_close+0x98>)
 8000a94:	f020 fc90 	bl	80213b8 <iprintf>
    return status;
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	e009      	b.n	8000ab0 <file_close+0x88>
  }

  openFilesCount--;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <file_close+0x9c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <file_close+0x9c>)
 8000aa4:	6013      	str	r3, [r2, #0]
  LOG2("lfs_file_close - ret = %i",
 8000aa6:	68b9      	ldr	r1, [r7, #8]
 8000aa8:	4807      	ldr	r0, [pc, #28]	; (8000ac8 <file_close+0xa0>)
 8000aaa:	f020 fc85 	bl	80213b8 <iprintf>
            status);
  return status;
 8000aae:	68bb      	ldr	r3, [r7, #8]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	2000ea48 	.word	0x2000ea48
 8000abc:	200000bc 	.word	0x200000bc
 8000ac0:	0802292c 	.word	0x0802292c
 8000ac4:	2000021c 	.word	0x2000021c
 8000ac8:	08022950 	.word	0x08022950

08000acc <open_modbus_file>:
#include "cfg_files.h"

#define MODBUS_MAP_FILE_PATH "modbus.map"


FILE *open_modbus_file(const char *mode) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]

    FILE *file = file_open((char*) MODBUS_MAP_FILE_PATH, "ab+");
 8000ad4:	4908      	ldr	r1, [pc, #32]	; (8000af8 <open_modbus_file+0x2c>)
 8000ad6:	4809      	ldr	r0, [pc, #36]	; (8000afc <open_modbus_file+0x30>)
 8000ad8:	f7ff ff1e 	bl	8000918 <file_open>
 8000adc:	60f8      	str	r0, [r7, #12]
    if (!file) {
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d103      	bne.n	8000aec <open_modbus_file+0x20>
        printf("Erro ao abrir o arquivo %s.\n", MODBUS_MAP_FILE_PATH);
 8000ae4:	4905      	ldr	r1, [pc, #20]	; (8000afc <open_modbus_file+0x30>)
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <open_modbus_file+0x34>)
 8000ae8:	f020 fc66 	bl	80213b8 <iprintf>
    }
    return file;
 8000aec:	68fb      	ldr	r3, [r7, #12]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3710      	adds	r7, #16
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	08022adc 	.word	0x08022adc
 8000afc:	08022ae0 	.word	0x08022ae0
 8000b00:	08022aec 	.word	0x08022aec

08000b04 <close_modbus_file>:

void close_modbus_file(FILE *file) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
    if (file) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <close_modbus_file+0x14>

    	file_close(file);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ff88 	bl	8000a28 <file_close>
    }
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <load_mb_from_file>:

    return CfgFiles_success;
}


cfg_file_status_t load_mb_from_file(MB *mb) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
    // Abra o arquivo para leitura binária
    FILE_POINTER file = open_modbus_file("rb");
 8000b28:	4814      	ldr	r0, [pc, #80]	; (8000b7c <load_mb_from_file+0x5c>)
 8000b2a:	f7ff ffcf 	bl	8000acc <open_modbus_file>
 8000b2e:	60f8      	str	r0, [r7, #12]
    if (!file) {
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d102      	bne.n	8000b3c <load_mb_from_file+0x1c>
        return CfgFiles_error_unknownError;
 8000b36:	f06f 0304 	mvn.w	r3, #4
 8000b3a:	e01a      	b.n	8000b72 <load_mb_from_file+0x52>
    }

    // Leia os dados do arquivo para a estrutura MB
    size_t bytes_read = fread(mb, sizeof(MB), 1, file);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f240 417a 	movw	r1, #1146	; 0x47a
 8000b44:	6878      	ldr	r0, [r7, #4]
 8000b46:	f020 fc0b 	bl	8021360 <fread>
 8000b4a:	60b8      	str	r0, [r7, #8]
    if (bytes_read != 1) {
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d008      	beq.n	8000b64 <load_mb_from_file+0x44>
        printf("Erro ao ler do arquivo.\n");
 8000b52:	480b      	ldr	r0, [pc, #44]	; (8000b80 <load_mb_from_file+0x60>)
 8000b54:	f020 fc96 	bl	8021484 <puts>
        close_modbus_file(file);
 8000b58:	68f8      	ldr	r0, [r7, #12]
 8000b5a:	f7ff ffd3 	bl	8000b04 <close_modbus_file>
        return CfgFiles_error_unknownError;
 8000b5e:	f06f 0304 	mvn.w	r3, #4
 8000b62:	e006      	b.n	8000b72 <load_mb_from_file+0x52>
    }

    // Feche o arquivo
    close_modbus_file(file);
 8000b64:	68f8      	ldr	r0, [r7, #12]
 8000b66:	f7ff ffcd 	bl	8000b04 <close_modbus_file>

    printf("Dados carregados com sucesso do arquivo modbus.map.\n");
 8000b6a:	4806      	ldr	r0, [pc, #24]	; (8000b84 <load_mb_from_file+0x64>)
 8000b6c:	f020 fc8a 	bl	8021484 <puts>

    return CfgFiles_success;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	08022b60 	.word	0x08022b60
 8000b80:	08022b64 	.word	0x08022b64
 8000b84:	08022b7c 	.word	0x08022b7c

08000b88 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000b98:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <vApplicationGetIdleTaskMemory+0x30>)
 8000b9e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2280      	movs	r2, #128	; 0x80
 8000ba4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	2000022c 	.word	0x2000022c
 8000bb8:	200002cc 	.word	0x200002cc

08000bbc <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <vApplicationGetTimerTaskMemory+0x2c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000bce:	68bb      	ldr	r3, [r7, #8]
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <vApplicationGetTimerTaskMemory+0x30>)
 8000bd2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bda:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000bdc:	bf00      	nop
 8000bde:	3714      	adds	r7, #20
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr
 8000be8:	200004cc 	.word	0x200004cc
 8000bec:	2000056c 	.word	0x2000056c

08000bf0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000bf0:	b5b0      	push	{r4, r5, r7, lr}
 8000bf2:	b092      	sub	sp, #72	; 0x48
 8000bf4:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of menuQueue */
  osMessageQDef(menuQueue, 6, MenuData_t);
 8000bf6:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <MX_FREERTOS_Init+0x74>)
 8000bf8:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000bfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bfe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  menuQueueHandle = osMessageCreate(osMessageQ(menuQueue), NULL);
 8000c02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f006 fa72 	bl	80070f2 <osMessageCreate>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <MX_FREERTOS_Init+0x78>)
 8000c12:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ethernetStatusT */
  osThreadDef(ethernetStatusT, EthernetStatusTask, osPriorityNormal, 0, 1024);
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_FREERTOS_Init+0x7c>)
 8000c16:	f107 041c 	add.w	r4, r7, #28
 8000c1a:	461d      	mov	r5, r3
 8000c1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ethernetStatusTHandle = osThreadCreate(osThread(ethernetStatusT), NULL);
 8000c28:	f107 031c 	add.w	r3, r7, #28
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f006 f89a 	bl	8006d68 <osThreadCreate>
 8000c34:	4603      	mov	r3, r0
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <MX_FREERTOS_Init+0x80>)
 8000c38:	6013      	str	r3, [r2, #0]

  /* definition and creation of buttonsTask */
  osThreadDef(buttonsTask, ButtonsTask, osPriorityBelowNormal, 0, 1024);
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_FREERTOS_Init+0x84>)
 8000c3c:	463c      	mov	r4, r7
 8000c3e:	461d      	mov	r5, r3
 8000c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  buttonsTaskHandle = osThreadCreate(osThread(buttonsTask), NULL);
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f006 f889 	bl	8006d68 <osThreadCreate>
 8000c56:	4603      	mov	r3, r0
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <MX_FREERTOS_Init+0x88>)
 8000c5a:	6013      	str	r3, [r2, #0]
  /* add threads, ... */


  /* USER CODE END RTOS_THREADS */

}
 8000c5c:	bf00      	nop
 8000c5e:	3748      	adds	r7, #72	; 0x48
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bdb0      	pop	{r4, r5, r7, pc}
 8000c64:	08022ca8 	.word	0x08022ca8
 8000c68:	20000228 	.word	0x20000228
 8000c6c:	08022cc8 	.word	0x08022cc8
 8000c70:	20000220 	.word	0x20000220
 8000c74:	08022cf0 	.word	0x08022cf0
 8000c78:	20000224 	.word	0x20000224

08000c7c <EthernetStatusTask>:
  * @param  argument: Not used
  * @retval None
 */
/* USER CODE END Header_EthernetStatusTask */
void EthernetStatusTask(void const * argument)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b0a2      	sub	sp, #136	; 0x88
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000c84:	f005 fb1c 	bl	80062c0 <MX_LWIP_Init>
  /* USER CODE BEGIN EthernetStatusTask */
	MenuData_t menu_data;
	/* Infinite loop */
	for (;;)
	{
		if (netif_is_up(&gnetif))
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <EthernetStatusTask+0x6c>)
 8000c8a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d0f7      	beq.n	8000c88 <EthernetStatusTask+0xc>
		{
			sprintf(menu_data.items[PAGE_0][LINE_0],"IPAD:%s", ip4addr_ntoa(netif_ip4_addr(&gnetif)));
 8000c98:	4814      	ldr	r0, [pc, #80]	; (8000cec <EthernetStatusTask+0x70>)
 8000c9a:	f01d fe87 	bl	801e9ac <ip4addr_ntoa>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	f107 0308 	add.w	r3, r7, #8
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	4912      	ldr	r1, [pc, #72]	; (8000cf0 <EthernetStatusTask+0x74>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f020 fc79 	bl	80215a0 <siprintf>
			sprintf(menu_data.items[PAGE_0][LINE_1],"MASK:%s", ip4addr_ntoa(netif_ip4_netmask(&gnetif)));
 8000cae:	4811      	ldr	r0, [pc, #68]	; (8000cf4 <EthernetStatusTask+0x78>)
 8000cb0:	f01d fe7c 	bl	801e9ac <ip4addr_ntoa>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	3316      	adds	r3, #22
 8000cbc:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <EthernetStatusTask+0x7c>)
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f020 fc6e 	bl	80215a0 <siprintf>
			sprintf(menu_data.items[PAGE_0][LINE_2],"GWAY:%s", ip4addr_ntoa(netif_ip4_gw(&gnetif)));
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <EthernetStatusTask+0x80>)
 8000cc6:	f01d fe71 	bl	801e9ac <ip4addr_ntoa>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	f107 0308 	add.w	r3, r7, #8
 8000cd0:	332b      	adds	r3, #43	; 0x2b
 8000cd2:	490b      	ldr	r1, [pc, #44]	; (8000d00 <EthernetStatusTask+0x84>)
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f020 fc63 	bl	80215a0 <siprintf>
			SendDataToMenuQueueUpdate(&menu_data);
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fd24 	bl	800072c <SendDataToMenuQueueUpdate>
		if (netif_is_up(&gnetif))
 8000ce4:	e7d0      	b.n	8000c88 <EthernetStatusTask+0xc>
 8000ce6:	bf00      	nop
 8000ce8:	20000b0c 	.word	0x20000b0c
 8000cec:	20000b10 	.word	0x20000b10
 8000cf0:	08022d0c 	.word	0x08022d0c
 8000cf4:	20000b14 	.word	0x20000b14
 8000cf8:	08022d14 	.word	0x08022d14
 8000cfc:	20000b18 	.word	0x20000b18
 8000d00:	08022d1c 	.word	0x08022d1c

08000d04 <ButtonsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ButtonsTask */
void ButtonsTask(void const * argument)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ButtonsTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f006 f877 	bl	8006e00 <osDelay>
 8000d12:	e7fb      	b.n	8000d0c <ButtonsTask+0x8>

08000d14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
 8000d22:	605a      	str	r2, [r3, #4]
 8000d24:	609a      	str	r2, [r3, #8]
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b3e      	ldr	r3, [pc, #248]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a3d      	ldr	r2, [pc, #244]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d34:	f043 0310 	orr.w	r3, r3, #16
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b3b      	ldr	r3, [pc, #236]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b37      	ldr	r3, [pc, #220]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a36      	ldr	r2, [pc, #216]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d50:	f043 0304 	orr.w	r3, r3, #4
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b34      	ldr	r3, [pc, #208]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0304 	and.w	r3, r3, #4
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	4b30      	ldr	r3, [pc, #192]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a2f      	ldr	r2, [pc, #188]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b2d      	ldr	r3, [pc, #180]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a28      	ldr	r2, [pc, #160]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]
 8000d9e:	4b22      	ldr	r3, [pc, #136]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	4a21      	ldr	r2, [pc, #132]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000da4:	f043 0302 	orr.w	r3, r3, #2
 8000da8:	6313      	str	r3, [r2, #48]	; 0x30
 8000daa:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <MX_GPIO_Init+0x114>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 8000db6:	2200      	movs	r2, #0
 8000db8:	f24e 1108 	movw	r1, #57608	; 0xe108
 8000dbc:	481b      	ldr	r0, [pc, #108]	; (8000e2c <MX_GPIO_Init+0x118>)
 8000dbe:	f002 fdf1 	bl	80039a4 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_DC_Pin|SPI1_RESET_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2119      	movs	r1, #25
 8000dc6:	481a      	ldr	r0, [pc, #104]	; (8000e30 <MX_GPIO_Init+0x11c>)
 8000dc8:	f002 fdec 	bl	80039a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = SPI2_FLASH_CS_Pin|SPI2_NRF_CS_Pin|LED1_Pin|LED2_Pin
 8000dcc:	f24e 1308 	movw	r3, #57608	; 0xe108
 8000dd0:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4811      	ldr	r0, [pc, #68]	; (8000e2c <MX_GPIO_Init+0x118>)
 8000de6:	f002 fc41 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin|SPI1_RESET_Pin|SPI1_CS_Pin;
 8000dea:	2319      	movs	r3, #25
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	2301      	movs	r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfa:	f107 0314 	add.w	r3, r7, #20
 8000dfe:	4619      	mov	r1, r3
 8000e00:	480b      	ldr	r0, [pc, #44]	; (8000e30 <MX_GPIO_Init+0x11c>)
 8000e02:	f002 fc33 	bl	800366c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = BT_SW1_Pin|BT_SW2_Pin|BT_SW3_Pin;
 8000e06:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_GPIO_Init+0x118>)
 8000e1c:	f002 fc26 	bl	800366c <HAL_GPIO_Init>

}
 8000e20:	bf00      	nop
 8000e22:	3728      	adds	r7, #40	; 0x28
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40020000 	.word	0x40020000

08000e34 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <MX_I2C1_Init+0x54>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MX_I2C1_Init+0x58>)
 8000e42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e44:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e58:	4b0a      	ldr	r3, [pc, #40]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <MX_I2C1_Init+0x50>)
 8000e72:	f002 fdb1 	bl	80039d8 <HAL_I2C_Init>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e7c:	f000 fa92 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000096c 	.word	0x2000096c
 8000e88:	40005400 	.word	0x40005400
 8000e8c:	00061a80 	.word	0x00061a80

08000e90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08a      	sub	sp, #40	; 0x28
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
 8000ea6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a19      	ldr	r2, [pc, #100]	; (8000f14 <HAL_I2C_MspInit+0x84>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d12c      	bne.n	8000f0c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	613b      	str	r3, [r7, #16]
 8000eb6:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <HAL_I2C_MspInit+0x88>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a17      	ldr	r2, [pc, #92]	; (8000f18 <HAL_I2C_MspInit+0x88>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <HAL_I2C_MspInit+0x88>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	613b      	str	r3, [r7, #16]
 8000ecc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ece:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ed2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ed4:	2312      	movs	r3, #18
 8000ed6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480c      	ldr	r0, [pc, #48]	; (8000f1c <HAL_I2C_MspInit+0x8c>)
 8000eec:	f002 fbbe 	bl	800366c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <HAL_I2C_MspInit+0x88>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	4a07      	ldr	r2, [pc, #28]	; (8000f18 <HAL_I2C_MspInit+0x88>)
 8000efa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000efe:	6413      	str	r3, [r2, #64]	; 0x40
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_I2C_MspInit+0x88>)
 8000f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3728      	adds	r7, #40	; 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40005400 	.word	0x40005400
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020400 	.word	0x40020400

08000f20 <lfs_w25qflash_config_init>:



void lfs_w25qflash_config_init ()

{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0

littlefs_config.read = lfs_w25qflash_read;
 8000f24:	4b19      	ldr	r3, [pc, #100]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f26:	4a1a      	ldr	r2, [pc, #104]	; (8000f90 <lfs_w25qflash_config_init+0x70>)
 8000f28:	605a      	str	r2, [r3, #4]
littlefs_config.prog = lfs_w25qflash_prog;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f2c:	4a19      	ldr	r2, [pc, #100]	; (8000f94 <lfs_w25qflash_config_init+0x74>)
 8000f2e:	609a      	str	r2, [r3, #8]
littlefs_config.erase = lfs_w25qflash_erase;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f32:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <lfs_w25qflash_config_init+0x78>)
 8000f34:	60da      	str	r2, [r3, #12]
littlefs_config.sync = lfs_w25qflash_sync;
 8000f36:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f38:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <lfs_w25qflash_config_init+0x7c>)
 8000f3a:	611a      	str	r2, [r3, #16]
#ifdef LFS_THREADSAFE
littlefs_config.lock = lfs_lock;
 8000f3c:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <lfs_w25qflash_config_init+0x80>)
 8000f40:	615a      	str	r2, [r3, #20]
littlefs_config.unlock = lfs_unlock;
 8000f42:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <lfs_w25qflash_config_init+0x84>)
 8000f46:	619a      	str	r2, [r3, #24]
#endif

 littlefs_config.read_size = w25qxx.PageSize;
 8000f48:	4b17      	ldr	r3, [pc, #92]	; (8000fa8 <lfs_w25qflash_config_init+0x88>)
 8000f4a:	895b      	ldrh	r3, [r3, #10]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f50:	61da      	str	r2, [r3, #28]
 littlefs_config.prog_size = w25qxx.PageSize;
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <lfs_w25qflash_config_init+0x88>)
 8000f54:	895b      	ldrh	r3, [r3, #10]
 8000f56:	461a      	mov	r2, r3
 8000f58:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f5a:	621a      	str	r2, [r3, #32]
 littlefs_config.block_size = w25qxx.SectorSize;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <lfs_w25qflash_config_init+0x88>)
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f62:	6253      	str	r3, [r2, #36]	; 0x24
 littlefs_config.block_count = w25qxx.SectorCount;
 8000f64:	4b10      	ldr	r3, [pc, #64]	; (8000fa8 <lfs_w25qflash_config_init+0x88>)
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f6a:	6293      	str	r3, [r2, #40]	; 0x28
 littlefs_config.block_cycles = 100;
 8000f6c:	4b07      	ldr	r3, [pc, #28]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f6e:	2264      	movs	r2, #100	; 0x64
 8000f70:	62da      	str	r2, [r3, #44]	; 0x2c
 littlefs_config.cache_size = LITTLEFS_CACHE_SIZE;
 8000f72:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f78:	631a      	str	r2, [r3, #48]	; 0x30
 littlefs_config.lookahead_size = LITTLEFS_LOOKAHEAD_SIZE;
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <lfs_w25qflash_config_init+0x6c>)
 8000f7c:	2210      	movs	r2, #16
 8000f7e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200009c0 	.word	0x200009c0
 8000f90:	08000fad 	.word	0x08000fad
 8000f94:	08000fed 	.word	0x08000fed
 8000f98:	0800102d 	.word	0x0800102d
 8000f9c:	08001047 	.word	0x08001047
 8000fa0:	08001191 	.word	0x08001191
 8000fa4:	080011d1 	.word	0x080011d1
 8000fa8:	20012af8 	.word	0x20012af8

08000fac <lfs_w25qflash_read>:


/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de leitura
 */
int lfs_w25qflash_read(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, void *buffer, lfs_size_t size) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	603b      	str	r3, [r7, #0]

	if (W25qxx_ReadSector((uint8_t*) buffer, block, off, size)) {
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	68b9      	ldr	r1, [r7, #8]
 8000fc0:	6838      	ldr	r0, [r7, #0]
 8000fc2:	f01f ff3f 	bl	8020e44 <W25qxx_ReadSector>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d007      	beq.n	8000fdc <lfs_w25qflash_read+0x30>

		LOG2("Leitura da flash no  - bloco %lu - off %lu - %lu bytes lidos\r\n", block, off, size);
 8000fcc:	69bb      	ldr	r3, [r7, #24]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <lfs_w25qflash_read+0x3c>)
 8000fd4:	f020 f9f0 	bl	80213b8 <iprintf>

		return LFS_ERR_OK;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e001      	b.n	8000fe0 <lfs_w25qflash_read+0x34>

	} else {

	  return LFS_ERR_CORRUPT;
 8000fdc:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3710      	adds	r7, #16
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	08022d24 	.word	0x08022d24

08000fec <lfs_w25qflash_prog>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de escrita
 */

int lfs_w25qflash_prog(const struct lfs_config *c, lfs_block_t block, lfs_off_t off, const void *buffer, lfs_size_t size) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
 8000ff8:	603b      	str	r3, [r7, #0]

	if (W25qxx_WriteSector((uint8_t*) buffer, block, off, size)) {
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	68b9      	ldr	r1, [r7, #8]
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f01f fe3d 	bl	8020c80 <W25qxx_WriteSector>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d007      	beq.n	800101c <lfs_w25qflash_prog+0x30>

		LOG2("Escrita da flash no - bloco %lu - off %lu  - %lu bytes escritos\r\n", block, off, size);
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <lfs_w25qflash_prog+0x3c>)
 8001014:	f020 f9d0 	bl	80213b8 <iprintf>

		return LFS_ERR_OK;
 8001018:	2300      	movs	r3, #0
 800101a:	e001      	b.n	8001020 <lfs_w25qflash_prog+0x34>

	} else {

		return LFS_ERR_CORRUPT;
 800101c:	f06f 0353 	mvn.w	r3, #83	; 0x53
	}
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08022d64 	.word	0x08022d64

0800102c <lfs_w25qflash_erase>:

/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de apagamento (erase)
 */
int lfs_w25qflash_erase(const struct lfs_config *c, lfs_block_t block) {
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]

  	 W25qxx_EraseSector(block);
 8001036:	6838      	ldr	r0, [r7, #0]
 8001038:	f01f fd2e 	bl	8020a98 <W25qxx_EraseSector>
	return LFS_ERR_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <lfs_w25qflash_sync>:
/**
 * @brief Função de interface do LittleFS com a biblioteca da memória Flash NAND para operação de sincronismo
 * 		  (para a Flash NAND esta função não é necessária, apenas retorna OK)
 */

int lfs_w25qflash_sync(const struct lfs_config *c) {
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]

	return LFS_ERR_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	4618      	mov	r0, r3
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <lfs_get_default_config>:


int lfs_get_default_config(struct lfs_config *lfsc)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

	lfs_w25qflash_config_init();
 8001064:	f7ff ff5c 	bl	8000f20 <lfs_w25qflash_config_init>

    *lfsc = littlefs_config; /* copy pre-initialized lfs config structure */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a06      	ldr	r2, [pc, #24]	; (8001084 <lfs_get_default_config+0x28>)
 800106c:	4618      	mov	r0, r3
 800106e:	4611      	mov	r1, r2
 8001070:	2354      	movs	r3, #84	; 0x54
 8001072:	461a      	mov	r2, r3
 8001074:	f020 fcbf 	bl	80219f6 <memcpy>
    return 0;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200009c0 	.word	0x200009c0

08001088 <lfs_storage_init>:

int lfs_storage_init(const struct lfs_config *lfsc)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    uint16_t status;

    /* initialize mflash */
    status = W25qxx_Init();
 8001090:	f01f fc30 	bl	80208f4 <W25qxx_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	81fb      	strh	r3, [r7, #14]

    return status;
 8001098:	89fb      	ldrh	r3, [r7, #14]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <osKernelGetState>:
//*** cmsis_os2.c
#define IS_IRQ_MODE()             (__get_IPSR() != 0U)
#define IS_IRQ()                  IS_IRQ_MODE()

//*** cmsis_os2.c
osKernelState_t osKernelGetState (void) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 80010a8:	f008 f84a 	bl	8009140 <xTaskGetSchedulerState>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <osKernelGetState+0x1a>
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d105      	bne.n	80010c2 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning_enum;
 80010b6:	2302      	movs	r3, #2
 80010b8:	607b      	str	r3, [r7, #4]
      break;
 80010ba:	e005      	b.n	80010c8 <osKernelGetState+0x26>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 80010bc:	2303      	movs	r3, #3
 80010be:	607b      	str	r3, [r7, #4]
      break;
 80010c0:	e002      	b.n	80010c8 <osKernelGetState+0x26>
    case taskSCHEDULER_NOT_STARTED:
    default:
      //if (KernelState == osKernelReady) {
      //  state = osKernelReady;
      //} else {
        state = osKernelInactive;
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
      //}
      break;
 80010c6:	bf00      	nop
  }

  return (state);
 80010c8:	687b      	ldr	r3, [r7, #4]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <osKernelLock>:

//*** cmsis_os2.c
int32_t osKernelLock (void) {
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80010d8:	f3ef 8305 	mrs	r3, IPSR
 80010dc:	603b      	str	r3, [r7, #0]
  return(result);
 80010de:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d002      	beq.n	80010ea <osKernelLock+0x18>
    lock = (int32_t)osErrorISR;
 80010e4:	2382      	movs	r3, #130	; 0x82
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	e013      	b.n	8001112 <osKernelLock+0x40>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 80010ea:	f008 f829 	bl	8009140 <xTaskGetSchedulerState>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d002      	beq.n	80010fa <osKernelLock+0x28>
 80010f4:	2b02      	cmp	r3, #2
 80010f6:	d003      	beq.n	8001100 <osKernelLock+0x2e>
 80010f8:	e007      	b.n	800110a <osKernelLock+0x38>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 80010fa:	2301      	movs	r3, #1
 80010fc:	607b      	str	r3, [r7, #4]
        break;
 80010fe:	e008      	b.n	8001112 <osKernelLock+0x40>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8001100:	f007 fc28 	bl	8008954 <vTaskSuspendAll>
        lock = 0;
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
        break;
 8001108:	e003      	b.n	8001112 <osKernelLock+0x40>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800110e:	607b      	str	r3, [r7, #4]
        break;
 8001110:	bf00      	nop
    }
  }

  return (lock);
 8001112:	687b      	ldr	r3, [r7, #4]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <osKernelRestoreLock>:

  return (lock);
}

//*** cmsis_os2.c
int32_t osKernelRestoreLock (int32_t lock) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001124:	f3ef 8305 	mrs	r3, IPSR
 8001128:	60fb      	str	r3, [r7, #12]
  return(result);
 800112a:	68fb      	ldr	r3, [r7, #12]

  if (IS_IRQ()) {
 800112c:	2b00      	cmp	r3, #0
 800112e:	d002      	beq.n	8001136 <osKernelRestoreLock+0x1a>
    lock = (int32_t)osErrorISR;
 8001130:	2382      	movs	r3, #130	; 0x82
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	e026      	b.n	8001184 <osKernelRestoreLock+0x68>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8001136:	f008 f803 	bl	8009140 <xTaskGetSchedulerState>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <osKernelRestoreLock+0x28>
 8001140:	2b02      	cmp	r3, #2
 8001142:	d11a      	bne.n	800117a <osKernelRestoreLock+0x5e>
      case taskSCHEDULER_SUSPENDED:
      case taskSCHEDULER_RUNNING:
        if (lock == 1) {
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d102      	bne.n	8001150 <osKernelRestoreLock+0x34>
          vTaskSuspendAll();
 800114a:	f007 fc03 	bl	8008954 <vTaskSuspendAll>
                lock = (int32_t)osError;
              }
            }
          }
        }
        break;
 800114e:	e018      	b.n	8001182 <osKernelRestoreLock+0x66>
          if (lock != 0) {
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <osKernelRestoreLock+0x42>
            lock = (int32_t)osError;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115a:	607b      	str	r3, [r7, #4]
        break;
 800115c:	e011      	b.n	8001182 <osKernelRestoreLock+0x66>
            if (xTaskResumeAll() != pdTRUE) {
 800115e:	f007 fc07 	bl	8008970 <xTaskResumeAll>
 8001162:	4603      	mov	r3, r0
 8001164:	2b01      	cmp	r3, #1
 8001166:	d00c      	beq.n	8001182 <osKernelRestoreLock+0x66>
              if (xTaskGetSchedulerState() != taskSCHEDULER_RUNNING) {
 8001168:	f007 ffea 	bl	8009140 <xTaskGetSchedulerState>
 800116c:	4603      	mov	r3, r0
 800116e:	2b02      	cmp	r3, #2
 8001170:	d007      	beq.n	8001182 <osKernelRestoreLock+0x66>
                lock = (int32_t)osError;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001176:	607b      	str	r3, [r7, #4]
        break;
 8001178:	e003      	b.n	8001182 <osKernelRestoreLock+0x66>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800117e:	607b      	str	r3, [r7, #4]
        break;
 8001180:	e000      	b.n	8001184 <osKernelRestoreLock+0x68>
        break;
 8001182:	bf00      	nop
    }
  }

  return (lock);
 8001184:	687b      	ldr	r3, [r7, #4]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
	...

08001190 <lfs_lock>:

/**
 * @brief Função de interface THREADSAFE do LittleFS com o RTOS para função de LOCK
 */
int lfs_lock(const struct lfs_config *c)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	if(osKernelGetState() == osKernelInactive)
 8001198:	f7ff ff83 	bl	80010a2 <osKernelGetState>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <lfs_lock+0x16>
	{
		// RTOS ainda não inicializou
		return  LFS_ERR_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	e00e      	b.n	80011c4 <lfs_lock+0x34>
	}

	rtos_lockState = osKernelLock();
 80011a6:	f7ff ff94 	bl	80010d2 <osKernelLock>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a07      	ldr	r2, [pc, #28]	; (80011cc <lfs_lock+0x3c>)
 80011ae:	6013      	str	r3, [r2, #0]
	int ret = LFS_ERR_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]

	if (rtos_lockState < 0)
 80011b4:	4b05      	ldr	r3, [pc, #20]	; (80011cc <lfs_lock+0x3c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	da02      	bge.n	80011c2 <lfs_lock+0x32>
	{
		ret = LFS_ERR_IO;
 80011bc:	f06f 0304 	mvn.w	r3, #4
 80011c0:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000a14 	.word	0x20000a14

080011d0 <lfs_unlock>:
/**
 * @brief Função de interface THREADSAFE do LittleFS com o RTOS para função de UNLOCK
 */
int lfs_unlock(const struct lfs_config *c)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	if(osKernelGetState() == osKernelInactive)
 80011d8:	f7ff ff63 	bl	80010a2 <osKernelGetState>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <lfs_unlock+0x16>
	{
		// RTOS ainda não inicializou
		return  LFS_ERR_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e00e      	b.n	8001204 <lfs_unlock+0x34>
	}

	//int state = osKernelUnlock();
	int newLockState = osKernelRestoreLock(rtos_lockState);
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <lfs_unlock+0x3c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff96 	bl	800111c <osKernelRestoreLock>
 80011f0:	60b8      	str	r0, [r7, #8]
	int ret = LFS_ERR_OK;
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]

	if (newLockState < 0)
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da02      	bge.n	8001202 <lfs_unlock+0x32>
	{
		ret = LFS_ERR_IO;
 80011fc:	f06f 0304 	mvn.w	r3, #4
 8001200:	60fb      	str	r3, [r7, #12]
	}
	return ret;
 8001202:	68fb      	ldr	r3, [r7, #12]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3710      	adds	r7, #16
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000a14 	.word	0x20000a14

08001210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001214:	f000 fe86 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001218:	f000 f848 	bl	80012ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121c:	f7ff fd7a 	bl	8000d14 <MX_GPIO_Init>
  MX_SPI2_Init();
 8001220:	f000 fa38 	bl	8001694 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8001224:	f000 fc82 	bl	8001b2c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001228:	f7ff fe04 	bl	8000e34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001232:	481d      	ldr	r0, [pc, #116]	; (80012a8 <main+0x98>)
 8001234:	f002 fbb6 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001238:	2032      	movs	r0, #50	; 0x32
 800123a:	f000 feb5 	bl	8001fa8 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 800123e:	2200      	movs	r2, #0
 8001240:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001244:	4818      	ldr	r0, [pc, #96]	; (80012a8 <main+0x98>)
 8001246:	f002 fbad 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800124a:	2032      	movs	r0, #50	; 0x32
 800124c:	f000 feac 	bl	8001fa8 <HAL_Delay>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001256:	4814      	ldr	r0, [pc, #80]	; (80012a8 <main+0x98>)
 8001258:	f002 fba4 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800125c:	2032      	movs	r0, #50	; 0x32
 800125e:	f000 fea3 	bl	8001fa8 <HAL_Delay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8001262:	2201      	movs	r2, #1
 8001264:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001268:	480f      	ldr	r0, [pc, #60]	; (80012a8 <main+0x98>)
 800126a:	f002 fb9b 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 800126e:	2032      	movs	r0, #50	; 0x32
 8001270:	f000 fe9a 	bl	8001fa8 <HAL_Delay>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8001274:	2201      	movs	r2, #1
 8001276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800127a:	480b      	ldr	r0, [pc, #44]	; (80012a8 <main+0x98>)
 800127c:	f002 fb92 	bl	80039a4 <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001280:	2032      	movs	r0, #50	; 0x32
 8001282:	f000 fe91 	bl	8001fa8 <HAL_Delay>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8001286:	2201      	movs	r2, #1
 8001288:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800128c:	4806      	ldr	r0, [pc, #24]	; (80012a8 <main+0x98>)
 800128e:	f002 fb89 	bl	80039a4 <HAL_GPIO_WritePin>

	FileSystemInit();
 8001292:	f7ff fa7f 	bl	8000794 <FileSystemInit>
	ModbusServerInit();
 8001296:	f000 f9df 	bl	8001658 <ModbusServerInit>
	AdapterDisplaySSD1306Init();
 800129a:	f7ff f983 	bl	80005a4 <AdapterDisplaySSD1306Init>


  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800129e:	f7ff fca7 	bl	8000bf0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012a2:	f005 fd4a 	bl	8006d3a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <main+0x96>
 80012a8:	40021000 	.word	0x40021000

080012ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b094      	sub	sp, #80	; 0x50
 80012b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012b2:	f107 0320 	add.w	r3, r7, #32
 80012b6:	2230      	movs	r2, #48	; 0x30
 80012b8:	2100      	movs	r1, #0
 80012ba:	4618      	mov	r0, r3
 80012bc:	f020 fa92 	bl	80217e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	2300      	movs	r3, #0
 80012d2:	60bb      	str	r3, [r7, #8]
 80012d4:	4b28      	ldr	r3, [pc, #160]	; (8001378 <SystemClock_Config+0xcc>)
 80012d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d8:	4a27      	ldr	r2, [pc, #156]	; (8001378 <SystemClock_Config+0xcc>)
 80012da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012de:	6413      	str	r3, [r2, #64]	; 0x40
 80012e0:	4b25      	ldr	r3, [pc, #148]	; (8001378 <SystemClock_Config+0xcc>)
 80012e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ec:	2300      	movs	r3, #0
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <SystemClock_Config+0xd0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a21      	ldr	r2, [pc, #132]	; (800137c <SystemClock_Config+0xd0>)
 80012f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012fa:	6013      	str	r3, [r2, #0]
 80012fc:	4b1f      	ldr	r3, [pc, #124]	; (800137c <SystemClock_Config+0xd0>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001308:	2301      	movs	r3, #1
 800130a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800130c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001310:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	2302      	movs	r3, #2
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001316:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800131c:	2319      	movs	r3, #25
 800131e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001320:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001324:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001326:	2302      	movs	r3, #2
 8001328:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800132a:	2304      	movs	r3, #4
 800132c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	4618      	mov	r0, r3
 8001334:	f002 fffe 	bl	8004334 <HAL_RCC_OscConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800133e:	f000 f831 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001342:	230f      	movs	r3, #15
 8001344:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001346:	2302      	movs	r3, #2
 8001348:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800134e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001352:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001358:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	2105      	movs	r1, #5
 8001360:	4618      	mov	r0, r3
 8001362:	f003 fa5f 	bl	8004824 <HAL_RCC_ClockConfig>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800136c:	f000 f81a 	bl	80013a4 <Error_Handler>
  }
}
 8001370:	bf00      	nop
 8001372:	3750      	adds	r7, #80	; 0x50
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	40023800 	.word	0x40023800
 800137c:	40007000 	.word	0x40007000

08001380 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001392:	f000 fde9 	bl	8001f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40002000 	.word	0x40002000

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x8>

080013ae <ModbusHandleConnection>:



static uint8_t ModbusHandleConnection(struct netconn *connfd)

{
 80013ae:	b580      	push	{r7, lr}
 80013b0:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80013ba:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80013be:	6018      	str	r0, [r3, #0]
	unsigned char recvBuffer[MODBUS_SERVER_BUF_SIZE];
	const int RECEIVE_TIMEOUT_MS = 1; // 1 segundo
 80013c0:	2301      	movs	r3, #1
 80013c2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
	netconn_set_recvtimeout(connfd, RECEIVE_TIMEOUT_MS);
 80013c6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80013ca:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80013ce:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61da      	str	r2, [r3, #28]
	do
	{
		// Receber dados do cliente com um tempo limite
		struct netbuf *inbuf;

		err_t err = netconn_recv(connfd, &inbuf);
 80013d6:	f107 0208 	add.w	r2, r7, #8
 80013da:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80013de:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 80013e2:	4611      	mov	r1, r2
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	f00f fb3f 	bl	8010a68 <netconn_recv>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f887 3213 	strb.w	r3, [r7, #531]	; 0x213

		if (err == ERR_OK)
 80013f0:	f997 3213 	ldrsb.w	r3, [r7, #531]	; 0x213
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d141      	bne.n	800147c <ModbusHandleConnection+0xce>
		{
			if (netconn_err(connfd) == ERR_OK)
 80013f8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80013fc:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8001400:	6818      	ldr	r0, [r3, #0]
 8001402:	f00f fcba 	bl	8010d7a <netconn_err>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d13e      	bne.n	800148a <ModbusHandleConnection+0xdc>
			{
				/* Process received data */
				netbuf_copy(inbuf, recvBuffer, sizeof(recvBuffer));
 800140c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8001410:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	f107 010c 	add.w	r1, r7, #12
 800141c:	2300      	movs	r3, #0
 800141e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001422:	f013 f88b 	bl	801453c <pbuf_copy_partial>
				uint16_t buffer_len = netbuf_len(inbuf);
 8001426:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800142a:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	891b      	ldrh	r3, [r3, #8]
 8001434:	f8a7 3210 	strh.w	r3, [r7, #528]	; 0x210
				uint16_t response_len = InterpreterMODBUS(recvBuffer, buffer_len);
 8001438:	f8b7 2210 	ldrh.w	r2, [r7, #528]	; 0x210
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f01e fdc0 	bl	801ffc8 <InterpreterMODBUS>
 8001448:	4603      	mov	r3, r0
 800144a:	f8a7 320e 	strh.w	r3, [r7, #526]	; 0x20e
				netconn_write(connfd, recvBuffer, response_len, NETCONN_COPY);
 800144e:	f8b7 220e 	ldrh.w	r2, [r7, #526]	; 0x20e
 8001452:	f107 010c 	add.w	r1, r7, #12
 8001456:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800145a:	f5a3 7005 	sub.w	r0, r3, #532	; 0x214
 800145e:	2300      	movs	r3, #0
 8001460:	9300      	str	r3, [sp, #0]
 8001462:	2301      	movs	r3, #1
 8001464:	6800      	ldr	r0, [r0, #0]
 8001466:	f00f fb79 	bl	8010b5c <netconn_write_partly>
				netbuf_delete(inbuf);
 800146a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800146e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f011 f885 	bl	8012584 <netbuf_delete>
				continue;
 800147a:	e00b      	b.n	8001494 <ModbusHandleConnection+0xe6>
			}
		}
		else if(err == ERR_TIMEOUT)
 800147c:	f997 3213 	ldrsb.w	r3, [r7, #531]	; 0x213
 8001480:	f113 0f03 	cmn.w	r3, #3
 8001484:	d005      	beq.n	8001492 <ModbusHandleConnection+0xe4>

		osDelay(1);

	} while (1);

	return 1;
 8001486:	2301      	movs	r3, #1
 8001488:	e005      	b.n	8001496 <ModbusHandleConnection+0xe8>
		osDelay(1);
 800148a:	2001      	movs	r0, #1
 800148c:	f005 fcb8 	bl	8006e00 <osDelay>
 8001490:	e7a1      	b.n	80013d6 <ModbusHandleConnection+0x28>
			continue;
 8001492:	bf00      	nop
	{
 8001494:	e79f      	b.n	80013d6 <ModbusHandleConnection+0x28>
}
 8001496:	4618      	mov	r0, r3
 8001498:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <Modbus_activateTcpKeepAlive>:


void Modbus_activateTcpKeepAlive(struct netconn *connfd, int idleTime, int interval, int count) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b086      	sub	sp, #24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
 80014ac:	603b      	str	r3, [r7, #0]

    if (connfd == NULL || connfd->type != NETCONN_TCP || connfd->pcb.tcp == NULL) {
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d030      	beq.n	8001516 <Modbus_activateTcpKeepAlive+0x76>
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b10      	cmp	r3, #16
 80014ba:	d12c      	bne.n	8001516 <Modbus_activateTcpKeepAlive+0x76>
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d028      	beq.n	8001516 <Modbus_activateTcpKeepAlive+0x76>
        return;
    }
    struct tcp_pcb *pcb = connfd->pcb.tcp;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	617b      	str	r3, [r7, #20]

    LOCK_TCPIP_CORE();
 80014ca:	4815      	ldr	r0, [pc, #84]	; (8001520 <Modbus_activateTcpKeepAlive+0x80>)
 80014cc:	f01e fb94 	bl	801fbf8 <sys_mutex_lock>
    ip_set_option(connfd->pcb.ip, SO_KEEPALIVE);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	7a5a      	ldrb	r2, [r3, #9]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f042 0208 	orr.w	r2, r2, #8
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	725a      	strb	r2, [r3, #9]
    pcb->keep_idle = idleTime * 1000;    // Tempo de ociosidade em milissegundos
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_intvl = interval * 1000;   // Intervalo entre as tentativas em milissegundos
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80014fa:	fb02 f303 	mul.w	r3, r2, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    pcb->keep_cnt = count;               // Número de tentativas
 8001506:	683a      	ldr	r2, [r7, #0]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    UNLOCK_TCPIP_CORE();
 800150e:	4804      	ldr	r0, [pc, #16]	; (8001520 <Modbus_activateTcpKeepAlive+0x80>)
 8001510:	f01e fb81 	bl	801fc16 <sys_mutex_unlock>
 8001514:	e000      	b.n	8001518 <Modbus_activateTcpKeepAlive+0x78>
        return;
 8001516:	bf00      	nop
}
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	2000eb20 	.word	0x2000eb20

08001524 <ModbusTcpSeverTask>:

void ModbusTcpSeverTask(void const *argument)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b0a6      	sub	sp, #152	; 0x98
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN TcpSeverTask */
	struct netconn *conn, *newconn;
	uint8_t i = MODBUS_CLOSED;
 800152c:	2300      	movs	r3, #0
 800152e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	MenuData_t menu_data;

	/* Create a new TCP connection handle. */
	conn = netconn_new(NETCONN_TCP);
 8001532:	2200      	movs	r2, #0
 8001534:	2100      	movs	r1, #0
 8001536:	2010      	movs	r0, #16
 8001538:	f00e ff54 	bl	80103e4 <netconn_new_with_proto_and_callback>
 800153c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	/* Check if the connection handle was created successfully */
	if (conn == NULL)
 8001540:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001544:	2b00      	cmp	r3, #0
 8001546:	d103      	bne.n	8001550 <ModbusTcpSeverTask+0x2c>
	{
		/* Handle error */
		printf("Failed to create TCP connection handle\r\n");
 8001548:	483d      	ldr	r0, [pc, #244]	; (8001640 <ModbusTcpSeverTask+0x11c>)
 800154a:	f01f ff9b 	bl	8021484 <puts>
		return;
 800154e:	e074      	b.n	800163a <ModbusTcpSeverTask+0x116>
	}

	/* Bind the connection to the specified port. */
	if (netconn_bind(conn, IP_ADDR_ANY, MODBUS_SERVER_TCP_PORT) != ERR_OK)
 8001550:	f245 52f0 	movw	r2, #22000	; 0x55f0
 8001554:	493b      	ldr	r1, [pc, #236]	; (8001644 <ModbusTcpSeverTask+0x120>)
 8001556:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800155a:	f00e fffd 	bl	8010558 <netconn_bind>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d009      	beq.n	8001578 <ModbusTcpSeverTask+0x54>
	{
		/* Handle error */
		printf("Failed to bind to port %d\r\n", MODBUS_SERVER_TCP_PORT);
 8001564:	f245 51f0 	movw	r1, #22000	; 0x55f0
 8001568:	4837      	ldr	r0, [pc, #220]	; (8001648 <ModbusTcpSeverTask+0x124>)
 800156a:	f01f ff25 	bl	80213b8 <iprintf>
		netconn_delete(conn);
 800156e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001572:	f00e ffd5 	bl	8010520 <netconn_delete>
		return;
 8001576:	e060      	b.n	800163a <ModbusTcpSeverTask+0x116>
	}

	/* Put the connection into LISTEN state. */
	if (netconn_listen(conn) != ERR_OK)
 8001578:	21ff      	movs	r1, #255	; 0xff
 800157a:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 800157e:	f00f f823 	bl	80105c8 <netconn_listen_with_backlog>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d007      	beq.n	8001598 <ModbusTcpSeverTask+0x74>
	{
		/* Handle error */
		printf("Failed to put the connection into LISTEN state \r\n");
 8001588:	4830      	ldr	r0, [pc, #192]	; (800164c <ModbusTcpSeverTask+0x128>)
 800158a:	f01f ff7b 	bl	8021484 <puts>
		netconn_delete(conn);
 800158e:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8001592:	f00e ffc5 	bl	8010520 <netconn_delete>
		return;
 8001596:	e050      	b.n	800163a <ModbusTcpSeverTask+0x116>
	}

	printf("TCP server listening on port %d \r\n", MODBUS_SERVER_TCP_PORT);
 8001598:	f245 51f0 	movw	r1, #22000	; 0x55f0
 800159c:	482c      	ldr	r0, [pc, #176]	; (8001650 <ModbusTcpSeverTask+0x12c>)
 800159e:	f01f ff0b 	bl	80213b8 <iprintf>
	//snprintf(menu_data.cfg_info, sizeof(menu_data.cfg_info), "CFG:DC Port:%d",MODBUS_SERVER_TCP_PORT);
	SendDataToMenuQueueUpdate(&menu_data);
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff f8c0 	bl	800072c <SendDataToMenuQueueUpdate>

	/* Infinite loop */
	for (;;)
	{
		if (i == MODBUS_CLOSED)
 80015ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d11d      	bne.n	80015f0 <ModbusTcpSeverTask+0xcc>
		{
			if (netconn_accept(conn, &newconn) == ERR_OK)
 80015b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80015b8:	4619      	mov	r1, r3
 80015ba:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80015be:	f00f f82f 	bl	8010620 <netconn_accept>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d134      	bne.n	8001632 <ModbusTcpSeverTask+0x10e>
			{
				if (newconn != NULL)
 80015c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d030      	beq.n	8001632 <ModbusTcpSeverTask+0x10e>
				{
					i = MODBUS_OPEN;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

					//snprintf(menu_data.cfg_info, sizeof(menu_data.cfg_info),	"CFG:CN Port:%d", MODBUS_SERVER_TCP_PORT);
					SendDataToMenuQueueUpdate(&menu_data);
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f8a6 	bl	800072c <SendDataToMenuQueueUpdate>

					/* Set keepalive options if enabled */
					if (MODBUS_SERVER_KEEP_ALIVE)
					{
						Modbus_activateTcpKeepAlive(newconn, keepidle,
 80015e0:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80015e4:	2305      	movs	r3, #5
 80015e6:	2205      	movs	r2, #5
 80015e8:	2105      	movs	r1, #5
 80015ea:	f7ff ff59 	bl	80014a0 <Modbus_activateTcpKeepAlive>
 80015ee:	e020      	b.n	8001632 <ModbusTcpSeverTask+0x10e>
				}
			}
		}
		else
		{
			if (newconn != NULL && ModbusHandleConnection(newconn))
 80015f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d01c      	beq.n	8001632 <ModbusTcpSeverTask+0x10e>
 80015f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fed6 	bl	80013ae <ModbusHandleConnection>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d014      	beq.n	8001632 <ModbusTcpSeverTask+0x10e>
			{
				i = MODBUS_CLOSED;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
				netconn_close(newconn);
 800160e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001612:	4618      	mov	r0, r3
 8001614:	f00f fba4 	bl	8010d60 <netconn_close>
				netconn_delete(newconn);
 8001618:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800161c:	4618      	mov	r0, r3
 800161e:	f00e ff7f 	bl	8010520 <netconn_delete>
				//snprintf(menu_data.cfg_info, sizeof(menu_data.cfg_info),"CFG:DC Port:%d", MODBUS_SERVER_TCP_PORT);
				SendDataToMenuQueueUpdate(&menu_data);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f880 	bl	800072c <SendDataToMenuQueueUpdate>
				printf("Connection closed \r\n");
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <ModbusTcpSeverTask+0x130>)
 800162e:	f01f ff29 	bl	8021484 <puts>
			}
		}

		/* Delay for a short period */
		osDelay(100);
 8001632:	2064      	movs	r0, #100	; 0x64
 8001634:	f005 fbe4 	bl	8006e00 <osDelay>
		if (i == MODBUS_CLOSED)
 8001638:	e7b8      	b.n	80015ac <ModbusTcpSeverTask+0x88>
	}
}
 800163a:	3798      	adds	r7, #152	; 0x98
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	08022da8 	.word	0x08022da8
 8001644:	08027070 	.word	0x08027070
 8001648:	08022dd0 	.word	0x08022dd0
 800164c:	08022dec 	.word	0x08022dec
 8001650:	08022e20 	.word	0x08022e20
 8001654:	08022e44 	.word	0x08022e44

08001658 <ModbusServerInit>:



void ModbusServerInit()
{
 8001658:	b5b0      	push	{r4, r5, r7, lr}
 800165a:	b088      	sub	sp, #32
 800165c:	af00      	add	r7, sp, #0
	/* definition and creation of tcpServerTask */
	LoadMapFromFile();
 800165e:	f01e fe09 	bl	8020274 <LoadMapFromFile>
	osThreadDef(tcpServerTask, ModbusTcpSeverTask, osPriorityBelowNormal, 0, MODBUS_SERVER_TASK_STACK_SIZE);
 8001662:	4b0a      	ldr	r3, [pc, #40]	; (800168c <ModbusServerInit+0x34>)
 8001664:	1d3c      	adds	r4, r7, #4
 8001666:	461d      	mov	r5, r3
 8001668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800166a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800166c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001670:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	modbusTcpServerTaskHandle = osThreadCreate(osThread(tcpServerTask), NULL);
 8001674:	1d3b      	adds	r3, r7, #4
 8001676:	2100      	movs	r1, #0
 8001678:	4618      	mov	r0, r3
 800167a:	f005 fb75 	bl	8006d68 <osThreadCreate>
 800167e:	4603      	mov	r3, r0
 8001680:	4a03      	ldr	r2, [pc, #12]	; (8001690 <ModbusServerInit+0x38>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	3720      	adds	r7, #32
 8001688:	46bd      	mov	sp, r7
 800168a:	bdb0      	pop	{r4, r5, r7, pc}
 800168c:	08022e68 	.word	0x08022e68
 8001690:	20000a18 	.word	0x20000a18

08001694 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_SPI2_Init+0x64>)
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <MX_SPI2_Init+0x68>)
 800169c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ac:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016be:	4b0e      	ldr	r3, [pc, #56]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016da:	2200      	movs	r2, #0
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016e0:	220a      	movs	r2, #10
 80016e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_SPI2_Init+0x64>)
 80016e6:	f003 faaf 	bl	8004c48 <HAL_SPI_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80016f0:	f7ff fe58 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	20000a1c 	.word	0x20000a1c
 80016fc:	40003800 	.word	0x40003800

08001700 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b08a      	sub	sp, #40	; 0x28
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a28      	ldr	r2, [pc, #160]	; (80017c0 <HAL_SPI_MspInit+0xc0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d14a      	bne.n	80017b8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b27      	ldr	r3, [pc, #156]	; (80017c4 <HAL_SPI_MspInit+0xc4>)
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	4a26      	ldr	r2, [pc, #152]	; (80017c4 <HAL_SPI_MspInit+0xc4>)
 800172c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001730:	6413      	str	r3, [r2, #64]	; 0x40
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <HAL_SPI_MspInit+0xc4>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	613b      	str	r3, [r7, #16]
 800173c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	60fb      	str	r3, [r7, #12]
 8001742:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_SPI_MspInit+0xc4>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a1f      	ldr	r2, [pc, #124]	; (80017c4 <HAL_SPI_MspInit+0xc4>)
 8001748:	f043 0304 	orr.w	r3, r3, #4
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b1d      	ldr	r3, [pc, #116]	; (80017c4 <HAL_SPI_MspInit+0xc4>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	60fb      	str	r3, [r7, #12]
 8001758:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	4b19      	ldr	r3, [pc, #100]	; (80017c4 <HAL_SPI_MspInit+0xc4>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a18      	ldr	r2, [pc, #96]	; (80017c4 <HAL_SPI_MspInit+0xc4>)
 8001764:	f043 0302 	orr.w	r3, r3, #2
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <HAL_SPI_MspInit+0xc4>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001776:	230c      	movs	r3, #12
 8001778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177a:	2302      	movs	r3, #2
 800177c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001786:	2305      	movs	r3, #5
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <HAL_SPI_MspInit+0xc8>)
 8001792:	f001 ff6b 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800179a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179c:	2302      	movs	r3, #2
 800179e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a4:	2303      	movs	r3, #3
 80017a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017a8:	2305      	movs	r3, #5
 80017aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	4619      	mov	r1, r3
 80017b2:	4806      	ldr	r0, [pc, #24]	; (80017cc <HAL_SPI_MspInit+0xcc>)
 80017b4:	f001 ff5a 	bl	800366c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80017b8:	bf00      	nop
 80017ba:	3728      	adds	r7, #40	; 0x28
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40003800 	.word	0x40003800
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020800 	.word	0x40020800
 80017cc:	40020400 	.word	0x40020400

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_MspInit+0x54>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_MspInit+0x54>)
 80017e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017e4:	6453      	str	r3, [r2, #68]	; 0x44
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_MspInit+0x54>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	603b      	str	r3, [r7, #0]
 80017f6:	4b0b      	ldr	r3, [pc, #44]	; (8001824 <HAL_MspInit+0x54>)
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_MspInit+0x54>)
 80017fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001800:	6413      	str	r3, [r2, #64]	; 0x40
 8001802:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_MspInit+0x54>)
 8001804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	210f      	movs	r1, #15
 8001812:	f06f 0001 	mvn.w	r0, #1
 8001816:	f000 fca3 	bl	8002160 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800

08001828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08e      	sub	sp, #56	; 0x38
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	4b33      	ldr	r3, [pc, #204]	; (800190c <HAL_InitTick+0xe4>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a32      	ldr	r2, [pc, #200]	; (800190c <HAL_InitTick+0xe4>)
 8001842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <HAL_InitTick+0xe4>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001854:	f107 0210 	add.w	r2, r7, #16
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4611      	mov	r1, r2
 800185e:	4618      	mov	r0, r3
 8001860:	f003 f9c0 	bl	8004be4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186a:	2b00      	cmp	r3, #0
 800186c:	d103      	bne.n	8001876 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800186e:	f003 f991 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8001872:	6378      	str	r0, [r7, #52]	; 0x34
 8001874:	e004      	b.n	8001880 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001876:	f003 f98d 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 800187a:	4603      	mov	r3, r0
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001882:	4a23      	ldr	r2, [pc, #140]	; (8001910 <HAL_InitTick+0xe8>)
 8001884:	fba2 2303 	umull	r2, r3, r2, r3
 8001888:	0c9b      	lsrs	r3, r3, #18
 800188a:	3b01      	subs	r3, #1
 800188c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 800188e:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_InitTick+0xec>)
 8001890:	4a21      	ldr	r2, [pc, #132]	; (8001918 <HAL_InitTick+0xf0>)
 8001892:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8001894:	4b1f      	ldr	r3, [pc, #124]	; (8001914 <HAL_InitTick+0xec>)
 8001896:	f240 32e7 	movw	r2, #999	; 0x3e7
 800189a:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 800189c:	4a1d      	ldr	r2, [pc, #116]	; (8001914 <HAL_InitTick+0xec>)
 800189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018a0:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_InitTick+0xec>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <HAL_InitTick+0xec>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_InitTick+0xec>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80018b4:	4817      	ldr	r0, [pc, #92]	; (8001914 <HAL_InitTick+0xec>)
 80018b6:	f003 ff9d 	bl	80057f4 <HAL_TIM_Base_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d11b      	bne.n	8001900 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80018c8:	4812      	ldr	r0, [pc, #72]	; (8001914 <HAL_InitTick+0xec>)
 80018ca:	f003 ffed 	bl	80058a8 <HAL_TIM_Base_Start_IT>
 80018ce:	4603      	mov	r3, r0
 80018d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d111      	bne.n	8001900 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80018dc:	202d      	movs	r0, #45	; 0x2d
 80018de:	f000 fc5b 	bl	8002198 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b0f      	cmp	r3, #15
 80018e6:	d808      	bhi.n	80018fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80018e8:	2200      	movs	r2, #0
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	202d      	movs	r0, #45	; 0x2d
 80018ee:	f000 fc37 	bl	8002160 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <HAL_InitTick+0xf4>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e002      	b.n	8001900 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001900:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001904:	4618      	mov	r0, r3
 8001906:	3738      	adds	r7, #56	; 0x38
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800
 8001910:	431bde83 	.word	0x431bde83
 8001914:	20000a74 	.word	0x20000a74
 8001918:	40002000 	.word	0x40002000
 800191c:	20000004 	.word	0x20000004

08001920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001924:	e7fe      	b.n	8001924 <NMI_Handler+0x4>

08001926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800192a:	e7fe      	b.n	800192a <HardFault_Handler+0x4>

0800192c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001930:	e7fe      	b.n	8001930 <MemManage_Handler+0x4>

08001932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <BusFault_Handler+0x4>

08001938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <UsageFault_Handler+0x4>

0800193e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001950:	4802      	ldr	r0, [pc, #8]	; (800195c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001952:	f004 f819 	bl	8005988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000a74 	.word	0x20000a74

08001960 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001964:	4802      	ldr	r0, [pc, #8]	; (8001970 <ETH_IRQHandler+0x10>)
 8001966:	f000 ffab 	bl	80028c0 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20005624 	.word	0x20005624

08001974 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return 1;
 8001978:	2301      	movs	r3, #1
}
 800197a:	4618      	mov	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <_kill>:

int _kill(int pid, int sig)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <_kill+0x20>)
 8001990:	2216      	movs	r2, #22
 8001992:	601a      	str	r2, [r3, #0]
  return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	20012c64 	.word	0x20012c64

080019a8 <_exit>:

void _exit (int status)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffe5 	bl	8001984 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019ba:	e7fe      	b.n	80019ba <_exit+0x12>

080019bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	617b      	str	r3, [r7, #20]
 80019cc:	e00a      	b.n	80019e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ce:	f3af 8000 	nop.w
 80019d2:	4601      	mov	r1, r0
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	1c5a      	adds	r2, r3, #1
 80019d8:	60ba      	str	r2, [r7, #8]
 80019da:	b2ca      	uxtb	r2, r1
 80019dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	3301      	adds	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
 80019e4:	697a      	ldr	r2, [r7, #20]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	dbf0      	blt.n	80019ce <_read+0x12>
  }

  return len;
 80019ec:	687b      	ldr	r3, [r7, #4]
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	617b      	str	r3, [r7, #20]
 8001a06:	e009      	b.n	8001a1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	1c5a      	adds	r2, r3, #1
 8001a0c:	60ba      	str	r2, [r7, #8]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	617b      	str	r3, [r7, #20]
 8001a1c:	697a      	ldr	r2, [r7, #20]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	dbf1      	blt.n	8001a08 <_write+0x12>
  }
  return len;
 8001a24:	687b      	ldr	r3, [r7, #4]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <_close>:

int _close(int file)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
 8001a4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a56:	605a      	str	r2, [r3, #4]
  return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <_isatty>:

int _isatty(int file)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a6e:	2301      	movs	r3, #1
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b087      	sub	sp, #28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001aa0:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <_sbrk+0x5c>)
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <_sbrk+0x60>)
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aac:	4b13      	ldr	r3, [pc, #76]	; (8001afc <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <_sbrk+0x64>)
 8001ab6:	4a12      	ldr	r2, [pc, #72]	; (8001b00 <_sbrk+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <_sbrk+0x64>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	693a      	ldr	r2, [r7, #16]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d205      	bcs.n	8001ad4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <_sbrk+0x6c>)
 8001aca:	220c      	movs	r2, #12
 8001acc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ad2:	e009      	b.n	8001ae8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad4:	4b09      	ldr	r3, [pc, #36]	; (8001afc <_sbrk+0x64>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ada:	4b08      	ldr	r3, [pc, #32]	; (8001afc <_sbrk+0x64>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a06      	ldr	r2, [pc, #24]	; (8001afc <_sbrk+0x64>)
 8001ae4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	371c      	adds	r7, #28
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr
 8001af4:	20020000 	.word	0x20020000
 8001af8:	00000400 	.word	0x00000400
 8001afc:	20000abc 	.word	0x20000abc
 8001b00:	20012c70 	.word	0x20012c70
 8001b04:	20012c64 	.word	0x20012c64

08001b08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <SystemInit+0x20>)
 8001b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <SystemInit+0x20>)
 8001b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b30:	4b11      	ldr	r3, [pc, #68]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_USART1_UART_Init+0x50>)
 8001b34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3e:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b4a:	4b0b      	ldr	r3, [pc, #44]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b50:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b52:	220c      	movs	r2, #12
 8001b54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b56:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b5c:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b62:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_USART1_UART_Init+0x4c>)
 8001b64:	f004 f8e8 	bl	8005d38 <HAL_UART_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b6e:	f7ff fc19 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	20000ac0 	.word	0x20000ac0
 8001b7c:	40011000 	.word	0x40011000

08001b80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08a      	sub	sp, #40	; 0x28
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a19      	ldr	r2, [pc, #100]	; (8001c04 <HAL_UART_MspInit+0x84>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d12c      	bne.n	8001bfc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b18      	ldr	r3, [pc, #96]	; (8001c08 <HAL_UART_MspInit+0x88>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a17      	ldr	r2, [pc, #92]	; (8001c08 <HAL_UART_MspInit+0x88>)
 8001bac:	f043 0310 	orr.w	r3, r3, #16
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <HAL_UART_MspInit+0x88>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f003 0310 	and.w	r3, r3, #16
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_UART_MspInit+0x88>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <HAL_UART_MspInit+0x88>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_UART_MspInit+0x88>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001bda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001bde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be8:	2303      	movs	r3, #3
 8001bea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bec:	2307      	movs	r3, #7
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4805      	ldr	r0, [pc, #20]	; (8001c0c <HAL_UART_MspInit+0x8c>)
 8001bf8:	f001 fd38 	bl	800366c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3728      	adds	r7, #40	; 0x28
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40011000 	.word	0x40011000
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020000 	.word	0x40020000

08001c10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c48 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c14:	f7ff ff78 	bl	8001b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c1a:	490d      	ldr	r1, [pc, #52]	; (8001c50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c30:	4c0a      	ldr	r4, [pc, #40]	; (8001c5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c3e:	f01f feb3 	bl	80219a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c42:	f7ff fae5 	bl	8001210 <main>
  bx  lr    
 8001c46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c50:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001c54:	08027770 	.word	0x08027770
  ldr r2, =_sbss
 8001c58:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001c5c:	20012c6c 	.word	0x20012c6c

08001c60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c60:	e7fe      	b.n	8001c60 <ADC_IRQHandler>

08001c62 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001c62:	b480      	push	{r7}
 8001c64:	b083      	sub	sp, #12
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	6078      	str	r0, [r7, #4]
 8001c6a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00b      	beq.n	8001c8a <DP83848_RegisterBusIO+0x28>
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <DP83848_RegisterBusIO+0x28>
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <DP83848_RegisterBusIO+0x28>
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c8e:	e014      	b.n	8001cba <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689a      	ldr	r2, [r3, #8]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d17c      	bne.n	8001de0 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	e01c      	b.n	8001d3a <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	695b      	ldr	r3, [r3, #20]
 8001d04:	f107 0208 	add.w	r2, r7, #8
 8001d08:	2119      	movs	r1, #25
 8001d0a:	6978      	ldr	r0, [r7, #20]
 8001d0c:	4798      	blx	r3
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	da03      	bge.n	8001d1c <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8001d14:	f06f 0304 	mvn.w	r3, #4
 8001d18:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001d1a:	e00b      	b.n	8001d34 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 031f 	and.w	r3, r3, #31
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d105      	bne.n	8001d34 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
         break;
 8001d32:	e005      	b.n	8001d40 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	3301      	adds	r3, #1
 8001d38:	617b      	str	r3, [r7, #20]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b1f      	cmp	r3, #31
 8001d3e:	d9df      	bls.n	8001d00 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2b1f      	cmp	r3, #31
 8001d46:	d902      	bls.n	8001d4e <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001d48:	f06f 0302 	mvn.w	r3, #2
 8001d4c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d145      	bne.n	8001de0 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6810      	ldr	r0, [r2, #0]
 8001d5c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d60:	2100      	movs	r1, #0
 8001d62:	4798      	blx	r3
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	db37      	blt.n	8001dda <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6810      	ldr	r0, [r2, #0]
 8001d72:	f107 0208 	add.w	r2, r7, #8
 8001d76:	2100      	movs	r1, #0
 8001d78:	4798      	blx	r3
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db28      	blt.n	8001dd2 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4798      	blx	r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8001d8a:	e01c      	b.n	8001dc6 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	4798      	blx	r3
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d9e:	d80e      	bhi.n	8001dbe <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6810      	ldr	r0, [r2, #0]
 8001da8:	f107 0208 	add.w	r2, r7, #8
 8001dac:	2100      	movs	r1, #0
 8001dae:	4798      	blx	r3
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	da07      	bge.n	8001dc6 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8001db6:	f06f 0304 	mvn.w	r3, #4
 8001dba:	613b      	str	r3, [r7, #16]
                 break;
 8001dbc:	e010      	b.n	8001de0 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8001dbe:	f06f 0301 	mvn.w	r3, #1
 8001dc2:	613b      	str	r3, [r7, #16]
               break;
 8001dc4:	e00c      	b.n	8001de0 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1dd      	bne.n	8001d8c <DP83848_Init+0xc6>
 8001dd0:	e006      	b.n	8001de0 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8001dd2:	f06f 0304 	mvn.w	r3, #4
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	e002      	b.n	8001de0 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8001dda:	f06f 0303 	mvn.w	r3, #3
 8001dde:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d112      	bne.n	8001e0c <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	4798      	blx	r3
 8001dec:	4603      	mov	r3, r0
 8001dee:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8001df0:	bf00      	nop
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	4798      	blx	r3
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e04:	d9f5      	bls.n	8001df2 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	605a      	str	r2, [r3, #4]
   }

   return status;
 8001e0c:	693b      	ldr	r3, [r7, #16]
 }
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6810      	ldr	r0, [r2, #0]
 8001e2a:	f107 020c 	add.w	r2, r7, #12
 8001e2e:	2101      	movs	r1, #1
 8001e30:	4798      	blx	r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	da02      	bge.n	8001e3e <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8001e38:	f06f 0304 	mvn.w	r3, #4
 8001e3c:	e06e      	b.n	8001f1c <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	6810      	ldr	r0, [r2, #0]
 8001e46:	f107 020c 	add.w	r2, r7, #12
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4798      	blx	r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	da02      	bge.n	8001e5a <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001e54:	f06f 0304 	mvn.w	r3, #4
 8001e58:	e060      	b.n	8001f1c <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e059      	b.n	8001f1c <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	6810      	ldr	r0, [r2, #0]
 8001e70:	f107 020c 	add.w	r2, r7, #12
 8001e74:	2100      	movs	r1, #0
 8001e76:	4798      	blx	r3
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da02      	bge.n	8001e84 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001e7e:	f06f 0304 	mvn.w	r3, #4
 8001e82:	e04b      	b.n	8001f1c <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d11b      	bne.n	8001ec6 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d006      	beq.n	8001ea6 <DP83848_GetLinkState+0x90>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	e03a      	b.n	8001f1c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e033      	b.n	8001f1c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	e02c      	b.n	8001f1c <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001ec2:	2305      	movs	r3, #5
 8001ec4:	e02a      	b.n	8001f1c <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6810      	ldr	r0, [r2, #0]
 8001ece:	f107 020c 	add.w	r2, r7, #12
 8001ed2:	2110      	movs	r1, #16
 8001ed4:	4798      	blx	r3
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	da02      	bge.n	8001ee2 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8001edc:	f06f 0304 	mvn.w	r3, #4
 8001ee0:	e01c      	b.n	8001f1c <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001eec:	2306      	movs	r3, #6
 8001eee:	e015      	b.n	8001f1c <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f003 0306 	and.w	r3, r3, #6
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	d101      	bne.n	8001efe <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001efa:	2302      	movs	r3, #2
 8001efc:	e00e      	b.n	8001f1c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 0306 	and.w	r3, r3, #6
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e007      	b.n	8001f1c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	f003 0306 	and.w	r3, r3, #6
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d101      	bne.n	8001f1a <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001f16:	2304      	movs	r3, #4
 8001f18:	e000      	b.n	8001f1c <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001f1a:	2305      	movs	r3, #5
    }
  }
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3710      	adds	r7, #16
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_Init+0x40>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_Init+0x40>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_Init+0x40>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f8fc 	bl	800214a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	200f      	movs	r0, #15
 8001f54:	f7ff fc68 	bl	8001828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fc3a 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000b08 	.word	0x20000b08

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000b08 	.word	0x20000b08

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4907      	ldr	r1, [pc, #28]	; (800208c <__NVIC_EnableIRQ+0x38>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000e100 	.word	0xe000e100

08002090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800209c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	db0a      	blt.n	80020ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <__NVIC_SetPriority+0x4c>)
 80020aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ae:	0112      	lsls	r2, r2, #4
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	440b      	add	r3, r1
 80020b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b8:	e00a      	b.n	80020d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	4908      	ldr	r1, [pc, #32]	; (80020e0 <__NVIC_SetPriority+0x50>)
 80020c0:	79fb      	ldrb	r3, [r7, #7]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	3b04      	subs	r3, #4
 80020c8:	0112      	lsls	r2, r2, #4
 80020ca:	b2d2      	uxtb	r2, r2
 80020cc:	440b      	add	r3, r1
 80020ce:	761a      	strb	r2, [r3, #24]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	e000e100 	.word	0xe000e100
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f1c3 0307 	rsb	r3, r3, #7
 80020fe:	2b04      	cmp	r3, #4
 8002100:	bf28      	it	cs
 8002102:	2304      	movcs	r3, #4
 8002104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3304      	adds	r3, #4
 800210a:	2b06      	cmp	r3, #6
 800210c:	d902      	bls.n	8002114 <NVIC_EncodePriority+0x30>
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3b03      	subs	r3, #3
 8002112:	e000      	b.n	8002116 <NVIC_EncodePriority+0x32>
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	43da      	mvns	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	401a      	ands	r2, r3
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800212c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	fa01 f303 	lsl.w	r3, r1, r3
 8002136:	43d9      	mvns	r1, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800213c:	4313      	orrs	r3, r2
         );
}
 800213e:	4618      	mov	r0, r3
 8002140:	3724      	adds	r7, #36	; 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff ff4c 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
 800216c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002172:	f7ff ff61 	bl	8002038 <__NVIC_GetPriorityGrouping>
 8002176:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	68b9      	ldr	r1, [r7, #8]
 800217c:	6978      	ldr	r0, [r7, #20]
 800217e:	f7ff ffb1 	bl	80020e4 <NVIC_EncodePriority>
 8002182:	4602      	mov	r2, r0
 8002184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002188:	4611      	mov	r1, r2
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff ff80 	bl	8002090 <__NVIC_SetPriority>
}
 8002190:	bf00      	nop
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff ff54 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06c      	b.n	80022a0 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2223      	movs	r2, #35	; 0x23
 80021d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f004 fb7f 	bl	80068dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <HAL_ETH_Init+0xf4>)
 80021e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e6:	4a30      	ldr	r2, [pc, #192]	; (80022a8 <HAL_ETH_Init+0xf4>)
 80021e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ec:	6453      	str	r3, [r2, #68]	; 0x44
 80021ee:	4b2e      	ldr	r3, [pc, #184]	; (80022a8 <HAL_ETH_Init+0xf4>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f6:	60bb      	str	r3, [r7, #8]
 80021f8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80021fa:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_ETH_Init+0xf8>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4a2b      	ldr	r2, [pc, #172]	; (80022ac <HAL_ETH_Init+0xf8>)
 8002200:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002204:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002206:	4b29      	ldr	r3, [pc, #164]	; (80022ac <HAL_ETH_Init+0xf8>)
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	4927      	ldr	r1, [pc, #156]	; (80022ac <HAL_ETH_Init+0xf8>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <HAL_ETH_Init+0xf8>)
 8002216:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	f043 0301 	orr.w	r3, r3, #1
 800222a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800222e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002230:	f7ff feae 	bl	8001f90 <HAL_GetTick>
 8002234:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002236:	e011      	b.n	800225c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002238:	f7ff feaa 	bl	8001f90 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002246:	d909      	bls.n	800225c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2204      	movs	r2, #4
 800224c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	22e0      	movs	r2, #224	; 0xe0
 8002254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e021      	b.n	80022a0 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1e4      	bne.n	8002238 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 ff56 	bl	8003120 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f000 fffd 	bl	8003274 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f001 f853 	bl	8003326 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	461a      	mov	r2, r3
 8002286:	2100      	movs	r1, #0
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f000 ffbb 	bl	8003204 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2210      	movs	r2, #16
 800229a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40013800 	.word	0x40013800

080022b0 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d17f      	bne.n	80023c2 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2223      	movs	r2, #35	; 0x23
 80022c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80022de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022f0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022f4:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8002308:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2204      	movs	r2, #4
 8002310:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f9f8 	bl	8002708 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0208 	orr.w	r2, r2, #8
 8002326:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002330:	2001      	movs	r0, #1
 8002332:	f7ff fe39 	bl	8001fa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68fa      	ldr	r2, [r7, #12]
 800233c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f042 0204 	orr.w	r2, r2, #4
 800234c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002356:	2001      	movs	r0, #1
 8002358:	f7ff fe26 	bl	8001fa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fd7c 	bl	8002e62 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800237c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002380:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002398:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6812      	ldr	r2, [r2, #0]
 80023a8:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 80023ac:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 80023b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80023b4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2223      	movs	r2, #35	; 0x23
 80023ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	e000      	b.n	80023c4 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
  }
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023da:	2b23      	cmp	r3, #35	; 0x23
 80023dc:	d170      	bne.n	80024c0 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2223      	movs	r2, #35	; 0x23
 80023e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ee:	69db      	ldr	r3, [r3, #28]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6812      	ldr	r2, [r2, #0]
 80023f4:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 80023f8:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 80023fc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002400:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6812      	ldr	r2, [r2, #0]
 8002410:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002414:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002418:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6812      	ldr	r2, [r2, #0]
 8002428:	f023 0302 	bic.w	r3, r3, #2
 800242c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002430:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0204 	bic.w	r2, r2, #4
 8002440:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800244a:	2001      	movs	r0, #1
 800244c:	f7ff fdac 	bl	8001fa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	693a      	ldr	r2, [r7, #16]
 8002456:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002458:	6878      	ldr	r0, [r7, #4]
 800245a:	f000 fd02 	bl	8002e62 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0208 	bic.w	r2, r2, #8
 800246c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002476:	2001      	movs	r0, #1
 8002478:	f7ff fd96 	bl	8001fa8 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e00e      	b.n	80024a8 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	3212      	adds	r2, #18
 8002490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002494:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3301      	adds	r3, #1
 80024a6:	617b      	str	r3, [r7, #20]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2b03      	cmp	r3, #3
 80024ac:	d9ed      	bls.n	800248a <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2210      	movs	r2, #16
 80024b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e000      	b.n	80024c2 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
  }
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	6078      	str	r0, [r7, #4]
 80024d2:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d109      	bne.n	80024ee <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e0:	f043 0201 	orr.w	r2, r3, #1
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e045      	b.n	800257a <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f4:	2b23      	cmp	r3, #35	; 0x23
 80024f6:	d13f      	bne.n	8002578 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002500:	2201      	movs	r2, #1
 8002502:	6839      	ldr	r1, [r7, #0]
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 ff7b 	bl	8003400 <ETH_Prepare_Tx_Descriptors>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d009      	beq.n	8002524 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	f043 0202 	orr.w	r2, r3, #2
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e02a      	b.n	800257a <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002524:	f3bf 8f4f 	dsb	sy
}
 8002528:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	629a      	str	r2, [r3, #40]	; 0x28
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	2b03      	cmp	r3, #3
 800253a:	d904      	bls.n	8002546 <HAL_ETH_Transmit_IT+0x7c>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002540:	1f1a      	subs	r2, r3, #4
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800254e:	695b      	ldr	r3, [r3, #20]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00d      	beq.n	8002574 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002560:	461a      	mov	r2, r3
 8002562:	2304      	movs	r3, #4
 8002564:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800256e:	461a      	mov	r2, r3
 8002570:	2300      	movs	r3, #0
 8002572:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002574:	2300      	movs	r3, #0
 8002576:	e000      	b.n	800257a <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
  }
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b088      	sub	sp, #32
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
 800258a:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002590:	2300      	movs	r3, #0
 8002592:	73fb      	strb	r3, [r7, #15]

  if (pAppBuff == NULL)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a0:	f043 0201 	orr.w	r2, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e0a8      	b.n	8002700 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025b4:	2b23      	cmp	r3, #35	; 0x23
 80025b6:	d001      	beq.n	80025bc <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0a1      	b.n	8002700 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	3212      	adds	r2, #18
 80025c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025cc:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025d2:	f1c3 0304 	rsb	r3, r3, #4
 80025d6:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80025d8:	e06a      	b.n	80026b0 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	69da      	ldr	r2, [r3, #28]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <HAL_ETH_ReadData+0x88>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002606:	2b00      	cmp	r3, #0
 8002608:	d040      	beq.n	800268c <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002612:	2b00      	cmp	r3, #0
 8002614:	d005      	beq.n	8002622 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00c      	beq.n	800264e <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800263e:	3b04      	subs	r3, #4
 8002640:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002642:	69bb      	ldr	r3, [r7, #24]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800264a:	2301      	movs	r3, #1
 800264c:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	689a      	ldr	r2, [r3, #8]
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002666:	461a      	mov	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	b29b      	uxth	r3, r3
 800266c:	f004 faf0 	bl	8006c50 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	441a      	add	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	2200      	movs	r2, #0
 800268a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	3301      	adds	r3, #1
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d902      	bls.n	800269e <HAL_ETH_ReadData+0x11c>
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	3b04      	subs	r3, #4
 800269c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	3212      	adds	r2, #18
 80026a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026a8:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	3301      	adds	r3, #1
 80026ae:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	db06      	blt.n	80026c6 <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	429a      	cmp	r2, r3
 80026be:	d202      	bcs.n	80026c6 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d089      	beq.n	80025da <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	441a      	add	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d002      	beq.n	80026e0 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f814 	bl	8002708 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69fa      	ldr	r2, [r7, #28]
 80026e4:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d108      	bne.n	80026fe <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
}
 8002700:	4618      	mov	r0, r3
 8002702:	3720      	adds	r7, #32
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  uint32_t tailidx;
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002714:	2301      	movs	r3, #1
 8002716:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800271c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69fa      	ldr	r2, [r7, #28]
 8002722:	3212      	adds	r2, #18
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800272e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002730:	e03d      	b.n	80027ae <ETH_UpdateDescriptor+0xa6>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d112      	bne.n	8002760 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800273a:	f107 0308 	add.w	r3, r7, #8
 800273e:	4618      	mov	r0, r3
 8002740:	f004 fa56 	bl	8006bf0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800274a:	2300      	movs	r3, #0
 800274c:	74fb      	strb	r3, [r7, #19]
 800274e:	e007      	b.n	8002760 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	461a      	mov	r2, r3
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	461a      	mov	r2, r3
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d023      	beq.n	80027ae <ETH_UpdateDescriptor+0xa6>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276a:	2b00      	cmp	r3, #0
 800276c:	d103      	bne.n	8002776 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	4a24      	ldr	r2, [pc, #144]	; (8002804 <ETH_UpdateDescriptor+0xfc>)
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	e003      	b.n	800277e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800277c:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b03      	cmp	r3, #3
 8002794:	d902      	bls.n	800279c <ETH_UpdateDescriptor+0x94>
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3b04      	subs	r3, #4
 800279a:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69fa      	ldr	r2, [r7, #28]
 80027a0:	3212      	adds	r2, #18
 80027a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a6:	617b      	str	r3, [r7, #20]
      desccount--;
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d002      	beq.n	80027ba <ETH_UpdateDescriptor+0xb2>
 80027b4:	7cfb      	ldrb	r3, [r7, #19]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1bb      	bne.n	8002732 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d01a      	beq.n	80027fa <ETH_UpdateDescriptor+0xf2>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	3301      	adds	r3, #1
 80027c8:	f003 0303 	and.w	r3, r3, #3
 80027cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80027ce:	f3bf 8f5f 	dmb	sy
}
 80027d2:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6919      	ldr	r1, [r3, #16]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	4613      	mov	r3, r2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	4413      	add	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	18ca      	adds	r2, r1, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ec:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69fa      	ldr	r2, [r7, #28]
 80027f2:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	69ba      	ldr	r2, [r7, #24]
 80027f8:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80027fa:	bf00      	nop
 80027fc:	3720      	adds	r7, #32
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	80004600 	.word	0x80004600

08002808 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3318      	adds	r3, #24
 8002814:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002826:	e03f      	b.n	80028a8 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8002828:	2301      	movs	r3, #1
 800282a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	3b01      	subs	r3, #1
 8002830:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	3304      	adds	r3, #4
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	4413      	add	r3, r2
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d106      	bne.n	8002850 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	3301      	adds	r3, #1
 8002846:	f003 0303 	and.w	r3, r3, #3
 800284a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002850:	7bbb      	ldrb	r3, [r7, #14]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d028      	beq.n	80028a8 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68d9      	ldr	r1, [r3, #12]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	440b      	add	r3, r1
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b00      	cmp	r3, #0
 800286a:	db1b      	blt.n	80028a4 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800286c:	68ba      	ldr	r2, [r7, #8]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	3304      	adds	r3, #4
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4618      	mov	r0, r3
 800287a:	f004 fa29 	bl	8006cd0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	3304      	adds	r3, #4
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	2200      	movs	r2, #0
 800288a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	3301      	adds	r3, #1
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	62da      	str	r2, [r3, #44]	; 0x2c
 80028a2:	e001      	b.n	80028a8 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d002      	beq.n	80028b4 <HAL_ETH_ReleaseTxPacket+0xac>
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1b9      	bne.n	8002828 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80028b4:	2300      	movs	r3, #0
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d112      	bne.n	8002900 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e8:	2b40      	cmp	r3, #64	; 0x40
 80028ea:	d109      	bne.n	8002900 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028f4:	461a      	mov	r2, r3
 80028f6:	4b50      	ldr	r3, [pc, #320]	; (8002a38 <HAL_ETH_IRQHandler+0x178>)
 80028f8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f003 fd36 	bl	800636c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b01      	cmp	r3, #1
 8002910:	d113      	bne.n	800293a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b01      	cmp	r3, #1
 8002922:	d10a      	bne.n	800293a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800292c:	461a      	mov	r2, r3
 800292e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8002932:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f003 fd29 	bl	800638c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002948:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800294c:	d14c      	bne.n	80029e8 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800295c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002960:	d142      	bne.n	80029e8 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002968:	f043 0208 	orr.w	r2, r3, #8
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002980:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002984:	d11a      	bne.n	80029bc <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800298e:	695a      	ldr	r2, [r3, #20]
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_ETH_IRQHandler+0x17c>)
 8002992:	4013      	ands	r3, r2
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6812      	ldr	r2, [r2, #0]
 80029a8:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 80029ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029b0:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	22e0      	movs	r2, #224	; 0xe0
 80029b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 80029ba:	e012      	b.n	80029e2 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029c4:	695a      	ldr	r2, [r3, #20]
 80029c6:	f248 6380 	movw	r3, #34432	; 0x8680
 80029ca:	4013      	ands	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029da:	461a      	mov	r2, r3
 80029dc:	f248 6380 	movw	r3, #34432	; 0x8680
 80029e0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f003 fce2 	bl	80063ac <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ee:	f003 0308 	and.w	r3, r3, #8
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d10e      	bne.n	8002a14 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f81c 	bl	8002a44 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <HAL_ETH_IRQHandler+0x180>)
 8002a16:	695b      	ldr	r3, [r3, #20]
 8002a18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d006      	beq.n	8002a2e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002a20:	4b07      	ldr	r3, [pc, #28]	; (8002a40 <HAL_ETH_IRQHandler+0x180>)
 8002a22:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002a26:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f000 f815 	bl	8002a58 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002a2e:	bf00      	nop
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	00010040 	.word	0x00010040
 8002a3c:	007e2000 	.word	0x007e2000
 8002a40:	40013c00 	.word	0x40013c00

08002a44 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	f003 031c 	and.w	r3, r3, #28
 8002a88:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	02db      	lsls	r3, r3, #11
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	019b      	lsls	r3, r3, #6
 8002a9a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f023 0302 	bic.w	r3, r3, #2
 8002aaa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002abc:	f7ff fa68 	bl	8001f90 <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ac2:	e00d      	b.n	8002ae0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002ac4:	f7ff fa64 	bl	8001f90 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ad2:	d301      	bcc.n	8002ad8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e010      	b.n	8002afa <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d1ec      	bne.n	8002ac4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	461a      	mov	r2, r3
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3718      	adds	r7, #24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f003 031c 	and.w	r3, r3, #28
 8002b1e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	02db      	lsls	r3, r3, #11
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	019b      	lsls	r3, r3, #6
 8002b30:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f043 0302 	orr.w	r3, r3, #2
 8002b40:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b5c:	f7ff fa18 	bl	8001f90 <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b62:	e00d      	b.n	8002b80 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002b64:	f7ff fa14 	bl	8001f90 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b72:	d301      	bcc.n	8002b78 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e009      	b.n	8002b8c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1ec      	bne.n	8002b64 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0d9      	b.n	8002d5c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	bf14      	ite	ne
 8002bb6:	2301      	movne	r3, #1
 8002bb8:	2300      	moveq	r3, #0
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bf0c      	ite	eq
 8002be0:	2301      	moveq	r3, #1
 8002be2:	2300      	movne	r3, #0
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	461a      	mov	r2, r3
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	bf0c      	ite	eq
 8002c16:	2301      	moveq	r3, #1
 8002c18:	2300      	movne	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	bf14      	ite	ne
 8002c30:	2301      	movne	r3, #1
 8002c32:	2300      	moveq	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	bf0c      	ite	eq
 8002c66:	2301      	moveq	r3, #1
 8002c68:	2300      	movne	r3, #0
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	bf14      	ite	ne
 8002c9a:	2301      	movne	r3, #1
 8002c9c:	2300      	moveq	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bf14      	ite	ne
 8002cc2:	2301      	movne	r3, #1
 8002cc4:	2300      	moveq	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	bf0c      	ite	eq
 8002cf8:	2301      	moveq	r3, #1
 8002cfa:	2300      	movne	r3, #0
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	461a      	mov	r2, r3
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	bf14      	ite	ne
 8002d30:	2301      	movne	r3, #1
 8002d32:	2300      	moveq	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	461a      	mov	r2, r3
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bf14      	ite	ne
 8002d4c:	2301      	movne	r3, #1
 8002d4e:	2300      	moveq	r3, #0
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d101      	bne.n	8002d7c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e00b      	b.n	8002d94 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d82:	2b10      	cmp	r3, #16
 8002d84:	d105      	bne.n	8002d92 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002d86:	6839      	ldr	r1, [r7, #0]
 8002d88:	6878      	ldr	r0, [r7, #4]
 8002d8a:	f000 f88f 	bl	8002eac <ETH_SetMACConfig>

    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 031c 	bic.w	r3, r3, #28
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002db4:	f001 fee2 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8002db8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <HAL_ETH_SetMDIOClockRange+0x98>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d908      	bls.n	8002dd4 <HAL_ETH_SetMDIOClockRange+0x38>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	4a1c      	ldr	r2, [pc, #112]	; (8002e38 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d804      	bhi.n	8002dd4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f043 0308 	orr.w	r3, r3, #8
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	e027      	b.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d908      	bls.n	8002dee <HAL_ETH_SetMDIOClockRange+0x52>
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	4a17      	ldr	r2, [pc, #92]	; (8002e3c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d204      	bcs.n	8002dee <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f043 030c 	orr.w	r3, r3, #12
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	e01a      	b.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	4a12      	ldr	r2, [pc, #72]	; (8002e3c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d303      	bcc.n	8002dfe <HAL_ETH_SetMDIOClockRange+0x62>
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d911      	bls.n	8002e22 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4a0f      	ldr	r2, [pc, #60]	; (8002e40 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d908      	bls.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x7c>
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4a0e      	ldr	r2, [pc, #56]	; (8002e44 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d804      	bhi.n	8002e18 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	e005      	b.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	e000      	b.n	8002e24 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002e22:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	611a      	str	r2, [r3, #16]
}
 8002e2c:	bf00      	nop
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	01312cff 	.word	0x01312cff
 8002e38:	02160ebf 	.word	0x02160ebf
 8002e3c:	03938700 	.word	0x03938700
 8002e40:	05f5e0ff 	.word	0x05f5e0ff
 8002e44:	08f0d17f 	.word	0x08f0d17f

08002e48 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b084      	sub	sp, #16
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e80:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002e84:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f7ff f888 	bl	8001fa8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002ea2:	6193      	str	r3, [r2, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4b51      	ldr	r3, [pc, #324]	; (8003008 <ETH_SetMACConfig+0x15c>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	7c1b      	ldrb	r3, [r3, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d102      	bne.n	8002ed4 <ETH_SetMACConfig+0x28>
 8002ece:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ed2:	e000      	b.n	8002ed6 <ETH_SetMACConfig+0x2a>
 8002ed4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	7c5b      	ldrb	r3, [r3, #17]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <ETH_SetMACConfig+0x38>
 8002ede:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ee2:	e000      	b.n	8002ee6 <ETH_SetMACConfig+0x3a>
 8002ee4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ee6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002eec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	7fdb      	ldrb	r3, [r3, #31]
 8002ef2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002ef4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002efa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	7f92      	ldrb	r2, [r2, #30]
 8002f00:	2a00      	cmp	r2, #0
 8002f02:	d102      	bne.n	8002f0a <ETH_SetMACConfig+0x5e>
 8002f04:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f08:	e000      	b.n	8002f0c <ETH_SetMACConfig+0x60>
 8002f0a:	2200      	movs	r2, #0
                        macconf->Speed |
 8002f0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	7f1b      	ldrb	r3, [r3, #28]
 8002f12:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002f14:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002f1a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	791b      	ldrb	r3, [r3, #4]
 8002f20:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002f22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002f2a:	2a00      	cmp	r2, #0
 8002f2c:	d102      	bne.n	8002f34 <ETH_SetMACConfig+0x88>
 8002f2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f32:	e000      	b.n	8002f36 <ETH_SetMACConfig+0x8a>
 8002f34:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002f36:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	7bdb      	ldrb	r3, [r3, #15]
 8002f3c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f3e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f44:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f4c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68fa      	ldr	r2, [r7, #12]
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f66:	2001      	movs	r0, #1
 8002f68:	f7ff f81e 	bl	8001fa8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f82:	4013      	ands	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f92:	2a00      	cmp	r2, #0
 8002f94:	d101      	bne.n	8002f9a <ETH_SetMACConfig+0xee>
 8002f96:	2280      	movs	r2, #128	; 0x80
 8002f98:	e000      	b.n	8002f9c <ETH_SetMACConfig+0xf0>
 8002f9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f9c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002fa2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002faa:	2a01      	cmp	r2, #1
 8002fac:	d101      	bne.n	8002fb2 <ETH_SetMACConfig+0x106>
 8002fae:	2208      	movs	r2, #8
 8002fb0:	e000      	b.n	8002fb4 <ETH_SetMACConfig+0x108>
 8002fb2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002fb4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002fbc:	2a01      	cmp	r2, #1
 8002fbe:	d101      	bne.n	8002fc4 <ETH_SetMACConfig+0x118>
 8002fc0:	2204      	movs	r2, #4
 8002fc2:	e000      	b.n	8002fc6 <ETH_SetMACConfig+0x11a>
 8002fc4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002fc6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002fce:	2a01      	cmp	r2, #1
 8002fd0:	d101      	bne.n	8002fd6 <ETH_SetMACConfig+0x12a>
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	e000      	b.n	8002fd8 <ETH_SetMACConfig+0x12c>
 8002fd6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	f7fe ffd9 	bl	8001fa8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	619a      	str	r2, [r3, #24]
}
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	ff20810f 	.word	0xff20810f

0800300c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003022:	68fa      	ldr	r2, [r7, #12]
 8003024:	4b3d      	ldr	r3, [pc, #244]	; (800311c <ETH_SetDMAConfig+0x110>)
 8003026:	4013      	ands	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	7b1b      	ldrb	r3, [r3, #12]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d102      	bne.n	8003038 <ETH_SetDMAConfig+0x2c>
 8003032:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003036:	e000      	b.n	800303a <ETH_SetDMAConfig+0x2e>
 8003038:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	7b5b      	ldrb	r3, [r3, #13]
 800303e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003040:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	7f52      	ldrb	r2, [r2, #29]
 8003046:	2a00      	cmp	r2, #0
 8003048:	d102      	bne.n	8003050 <ETH_SetDMAConfig+0x44>
 800304a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800304e:	e000      	b.n	8003052 <ETH_SetDMAConfig+0x46>
 8003050:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003052:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	7b9b      	ldrb	r3, [r3, #14]
 8003058:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800305a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003060:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	7f1b      	ldrb	r3, [r3, #28]
 8003066:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003068:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	7f9b      	ldrb	r3, [r3, #30]
 800306e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003070:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003076:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800307e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003080:	4313      	orrs	r3, r2
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4313      	orrs	r3, r2
 8003086:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003090:	461a      	mov	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800309e:	699b      	ldr	r3, [r3, #24]
 80030a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030a2:	2001      	movs	r0, #1
 80030a4:	f7fe ff80 	bl	8001fa8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030b0:	461a      	mov	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	791b      	ldrb	r3, [r3, #4]
 80030ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80030c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80030cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80030d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003100:	2001      	movs	r0, #1
 8003102:	f7fe ff51 	bl	8001fa8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6013      	str	r3, [r2, #0]
}
 8003114:	bf00      	nop
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	f8de3f23 	.word	0xf8de3f23

08003120 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b0a6      	sub	sp, #152	; 0x98
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003128:	2301      	movs	r3, #1
 800312a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003134:	2300      	movs	r3, #0
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003138:	2300      	movs	r3, #0
 800313a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003144:	2300      	movs	r3, #0
 8003146:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800314a:	2301      	movs	r3, #1
 800314c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8003156:	2300      	movs	r3, #0
 8003158:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800315c:	2300      	movs	r3, #0
 800315e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003160:	2300      	movs	r3, #0
 8003162:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8003166:	2300      	movs	r3, #0
 8003168:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800316a:	2300      	movs	r3, #0
 800316c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003170:	2300      	movs	r3, #0
 8003172:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8003176:	2300      	movs	r3, #0
 8003178:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003182:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003186:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800318c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800318e:	2300      	movs	r3, #0
 8003190:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003194:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003198:	4619      	mov	r1, r3
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff fe86 	bl	8002eac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80031a4:	2301      	movs	r3, #1
 80031a6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80031a8:	2301      	movs	r3, #1
 80031aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80031ae:	2301      	movs	r3, #1
 80031b0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80031b6:	2300      	movs	r3, #0
 80031b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80031bc:	2300      	movs	r3, #0
 80031be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80031c2:	2300      	movs	r3, #0
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80031c6:	2301      	movs	r3, #1
 80031c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80031cc:	2301      	movs	r3, #1
 80031ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80031d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031d4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80031d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80031dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80031ec:	2300      	movs	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031f0:	f107 0308 	add.w	r3, r7, #8
 80031f4:	4619      	mov	r1, r3
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ff08 	bl	800300c <ETH_SetDMAConfig>
}
 80031fc:	bf00      	nop
 80031fe:	3798      	adds	r7, #152	; 0x98
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3305      	adds	r3, #5
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	021b      	lsls	r3, r3, #8
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	3204      	adds	r2, #4
 800321c:	7812      	ldrb	r2, [r2, #0]
 800321e:	4313      	orrs	r3, r2
 8003220:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003222:	68ba      	ldr	r2, [r7, #8]
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <ETH_MACAddressConfig+0x68>)
 8003226:	4413      	add	r3, r2
 8003228:	461a      	mov	r2, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3303      	adds	r3, #3
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	061a      	lsls	r2, r3, #24
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3302      	adds	r3, #2
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	041b      	lsls	r3, r3, #16
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3301      	adds	r3, #1
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	021b      	lsls	r3, r3, #8
 8003248:	4313      	orrs	r3, r2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	7812      	ldrb	r2, [r2, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <ETH_MACAddressConfig+0x6c>)
 8003256:	4413      	add	r3, r2
 8003258:	461a      	mov	r2, r3
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	6013      	str	r3, [r2, #0]
}
 800325e:	bf00      	nop
 8003260:	371c      	adds	r7, #28
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
 800326a:	bf00      	nop
 800326c:	40028040 	.word	0x40028040
 8003270:	40028044 	.word	0x40028044

08003274 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	e03e      	b.n	8003300 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	68d9      	ldr	r1, [r3, #12]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	2200      	movs	r2, #0
 800329e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2200      	movs	r2, #0
 80032a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2200      	movs	r2, #0
 80032aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	3206      	adds	r2, #6
 80032b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d80c      	bhi.n	80032e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68d9      	ldr	r1, [r3, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	1c5a      	adds	r2, r3, #1
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	461a      	mov	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	e004      	b.n	80032ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	461a      	mov	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	3301      	adds	r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b03      	cmp	r3, #3
 8003304:	d9bd      	bls.n	8003282 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003318:	611a      	str	r2, [r3, #16]
}
 800331a:	bf00      	nop
 800331c:	3714      	adds	r7, #20
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	e046      	b.n	80033c2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6919      	ldr	r1, [r3, #16]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	00db      	lsls	r3, r3, #3
 8003342:	440b      	add	r3, r1
 8003344:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2200      	movs	r2, #0
 8003350:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2200      	movs	r2, #0
 8003356:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2200      	movs	r2, #0
 800335c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2200      	movs	r2, #0
 8003362:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2200      	movs	r2, #0
 8003368:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003370:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8003378:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	3212      	adds	r2, #18
 800338e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d80c      	bhi.n	80033b2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6919      	ldr	r1, [r3, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	440b      	add	r3, r1
 80033aa:	461a      	mov	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	e004      	b.n	80033bc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	3301      	adds	r3, #1
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b03      	cmp	r3, #3
 80033c6:	d9b5      	bls.n	8003334 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	691a      	ldr	r2, [r3, #16]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f2:	60da      	str	r2, [r3, #12]
}
 80033f4:	bf00      	nop
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8003400:	b480      	push	{r7}
 8003402:	b08d      	sub	sp, #52	; 0x34
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	3318      	adds	r3, #24
 8003410:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800341e:	2300      	movs	r3, #0
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800343e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003442:	d007      	beq.n	8003454 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	3304      	adds	r3, #4
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003454:	2302      	movs	r3, #2
 8003456:	e103      	b.n	8003660 <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	3301      	adds	r3, #1
 800345c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	461a      	mov	r2, r3
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8003470:	f023 031f 	bic.w	r3, r3, #31
 8003474:	69fa      	ldr	r2, [r7, #28]
 8003476:	6852      	ldr	r2, [r2, #4]
 8003478:	431a      	orrs	r2, r3
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0301 	and.w	r3, r3, #1
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	431a      	orrs	r2, r3
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d008      	beq.n	80034ba <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	431a      	orrs	r2, r3
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0304 	and.w	r3, r3, #4
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d005      	beq.n	80034d2 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80034da:	6a3b      	ldr	r3, [r7, #32]
 80034dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80034de:	f3bf 8f5f 	dmb	sy
}
 80034e2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80034f0:	e084      	b.n	80035fc <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80034f2:	6a3b      	ldr	r3, [r7, #32]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80034fa:	6a3b      	ldr	r3, [r7, #32]
 80034fc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d006      	beq.n	8003512 <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800350c:	6a3b      	ldr	r3, [r7, #32]
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	e005      	b.n	800351e <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800351a:	6a3b      	ldr	r3, [r7, #32]
 800351c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	3301      	adds	r3, #1
 8003522:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	2b03      	cmp	r3, #3
 8003528:	d902      	bls.n	8003530 <ETH_Prepare_Tx_Descriptors+0x130>
 800352a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800352c:	3b04      	subs	r3, #4
 800352e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003538:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800354e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003552:	d007      	beq.n	8003564 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003558:	3304      	adds	r3, #4
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4413      	add	r3, r2
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d029      	beq.n	80035b8 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800356c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003570:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003572:	2300      	movs	r3, #0
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
 8003576:	e019      	b.n	80035ac <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8003578:	f3bf 8f5f 	dmb	sy
}
 800357c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800358a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800358c:	3301      	adds	r3, #1
 800358e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003592:	2b03      	cmp	r3, #3
 8003594:	d902      	bls.n	800359c <ETH_Prepare_Tx_Descriptors+0x19c>
 8003596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003598:	3b04      	subs	r3, #4
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a4:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	3301      	adds	r3, #1
 80035aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80035ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d3e1      	bcc.n	8003578 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 80035b4:	2302      	movs	r3, #2
 80035b6:	e053      	b.n	8003660 <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	3301      	adds	r3, #1
 80035bc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	6a3b      	ldr	r3, [r7, #32]
 80035cc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80035ce:	6a3b      	ldr	r3, [r7, #32]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 80035d6:	f023 031f 	bic.w	r3, r3, #31
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	6852      	ldr	r2, [r2, #4]
 80035de:	431a      	orrs	r2, r3
 80035e0:	6a3b      	ldr	r3, [r7, #32]
 80035e2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	3301      	adds	r3, #1
 80035e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80035ea:	f3bf 8f5f 	dmb	sy
}
 80035ee:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f af76 	bne.w	80034f2 <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d006      	beq.n	800361a <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800360c:	6a3b      	ldr	r3, [r7, #32]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	e005      	b.n	8003626 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800361a:	6a3b      	ldr	r3, [r7, #32]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003636:	6979      	ldr	r1, [r7, #20]
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	3304      	adds	r3, #4
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003646:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003648:	b672      	cpsid	i
}
 800364a:	bf00      	nop
  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	4413      	add	r3, r2
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800365a:	b662      	cpsie	i
}
 800365c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3734      	adds	r7, #52	; 0x34
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800366c:	b480      	push	{r7}
 800366e:	b089      	sub	sp, #36	; 0x24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800367a:	2300      	movs	r3, #0
 800367c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800367e:	2300      	movs	r3, #0
 8003680:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	e16b      	b.n	8003960 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003688:	2201      	movs	r2, #1
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	4013      	ands	r3, r2
 800369a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800369c:	693a      	ldr	r2, [r7, #16]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	f040 815a 	bne.w	800395a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f003 0303 	and.w	r3, r3, #3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d005      	beq.n	80036be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d130      	bne.n	8003720 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2203      	movs	r2, #3
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	68da      	ldr	r2, [r3, #12]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	005b      	lsls	r3, r3, #1
 80036de:	fa02 f303 	lsl.w	r3, r2, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f003 0201 	and.w	r2, r3, #1
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f003 0303 	and.w	r3, r3, #3
 8003728:	2b03      	cmp	r3, #3
 800372a:	d017      	beq.n	800375c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	2203      	movs	r2, #3
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	fa02 f303 	lsl.w	r3, r2, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4313      	orrs	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f003 0303 	and.w	r3, r3, #3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d123      	bne.n	80037b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	08da      	lsrs	r2, r3, #3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3208      	adds	r2, #8
 8003770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	f003 0307 	and.w	r3, r3, #7
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	220f      	movs	r2, #15
 8003780:	fa02 f303 	lsl.w	r3, r2, r3
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	691a      	ldr	r2, [r3, #16]
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	4313      	orrs	r3, r2
 80037a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	08da      	lsrs	r2, r3, #3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3208      	adds	r2, #8
 80037aa:	69b9      	ldr	r1, [r7, #24]
 80037ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	2203      	movs	r2, #3
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	43db      	mvns	r3, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4013      	ands	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0203 	and.w	r2, r3, #3
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4313      	orrs	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	f000 80b4 	beq.w	800395a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	4b60      	ldr	r3, [pc, #384]	; (8003978 <HAL_GPIO_Init+0x30c>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4a5f      	ldr	r2, [pc, #380]	; (8003978 <HAL_GPIO_Init+0x30c>)
 80037fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003800:	6453      	str	r3, [r2, #68]	; 0x44
 8003802:	4b5d      	ldr	r3, [pc, #372]	; (8003978 <HAL_GPIO_Init+0x30c>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380a:	60fb      	str	r3, [r7, #12]
 800380c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800380e:	4a5b      	ldr	r2, [pc, #364]	; (800397c <HAL_GPIO_Init+0x310>)
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	089b      	lsrs	r3, r3, #2
 8003814:	3302      	adds	r3, #2
 8003816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	f003 0303 	and.w	r3, r3, #3
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	220f      	movs	r2, #15
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	4a52      	ldr	r2, [pc, #328]	; (8003980 <HAL_GPIO_Init+0x314>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d02b      	beq.n	8003892 <HAL_GPIO_Init+0x226>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a51      	ldr	r2, [pc, #324]	; (8003984 <HAL_GPIO_Init+0x318>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d025      	beq.n	800388e <HAL_GPIO_Init+0x222>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a50      	ldr	r2, [pc, #320]	; (8003988 <HAL_GPIO_Init+0x31c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d01f      	beq.n	800388a <HAL_GPIO_Init+0x21e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a4f      	ldr	r2, [pc, #316]	; (800398c <HAL_GPIO_Init+0x320>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d019      	beq.n	8003886 <HAL_GPIO_Init+0x21a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a4e      	ldr	r2, [pc, #312]	; (8003990 <HAL_GPIO_Init+0x324>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d013      	beq.n	8003882 <HAL_GPIO_Init+0x216>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a4d      	ldr	r2, [pc, #308]	; (8003994 <HAL_GPIO_Init+0x328>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d00d      	beq.n	800387e <HAL_GPIO_Init+0x212>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a4c      	ldr	r2, [pc, #304]	; (8003998 <HAL_GPIO_Init+0x32c>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d007      	beq.n	800387a <HAL_GPIO_Init+0x20e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a4b      	ldr	r2, [pc, #300]	; (800399c <HAL_GPIO_Init+0x330>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d101      	bne.n	8003876 <HAL_GPIO_Init+0x20a>
 8003872:	2307      	movs	r3, #7
 8003874:	e00e      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003876:	2308      	movs	r3, #8
 8003878:	e00c      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800387a:	2306      	movs	r3, #6
 800387c:	e00a      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800387e:	2305      	movs	r3, #5
 8003880:	e008      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003882:	2304      	movs	r3, #4
 8003884:	e006      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003886:	2303      	movs	r3, #3
 8003888:	e004      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800388a:	2302      	movs	r3, #2
 800388c:	e002      	b.n	8003894 <HAL_GPIO_Init+0x228>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <HAL_GPIO_Init+0x228>
 8003892:	2300      	movs	r3, #0
 8003894:	69fa      	ldr	r2, [r7, #28]
 8003896:	f002 0203 	and.w	r2, r2, #3
 800389a:	0092      	lsls	r2, r2, #2
 800389c:	4093      	lsls	r3, r2
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038a4:	4935      	ldr	r1, [pc, #212]	; (800397c <HAL_GPIO_Init+0x310>)
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	089b      	lsrs	r3, r3, #2
 80038aa:	3302      	adds	r3, #2
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038b2:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <HAL_GPIO_Init+0x334>)
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d003      	beq.n	80038d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038d6:	4a32      	ldr	r2, [pc, #200]	; (80039a0 <HAL_GPIO_Init+0x334>)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038dc:	4b30      	ldr	r3, [pc, #192]	; (80039a0 <HAL_GPIO_Init+0x334>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	43db      	mvns	r3, r3
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4013      	ands	r3, r2
 80038ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003900:	4a27      	ldr	r2, [pc, #156]	; (80039a0 <HAL_GPIO_Init+0x334>)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003906:	4b26      	ldr	r3, [pc, #152]	; (80039a0 <HAL_GPIO_Init+0x334>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	43db      	mvns	r3, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4013      	ands	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d003      	beq.n	800392a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800392a:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_GPIO_Init+0x334>)
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_GPIO_Init+0x334>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	43db      	mvns	r3, r3
 800393a:	69ba      	ldr	r2, [r7, #24]
 800393c:	4013      	ands	r3, r2
 800393e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003954:	4a12      	ldr	r2, [pc, #72]	; (80039a0 <HAL_GPIO_Init+0x334>)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	3301      	adds	r3, #1
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	2b0f      	cmp	r3, #15
 8003964:	f67f ae90 	bls.w	8003688 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	3724      	adds	r7, #36	; 0x24
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	40023800 	.word	0x40023800
 800397c:	40013800 	.word	0x40013800
 8003980:	40020000 	.word	0x40020000
 8003984:	40020400 	.word	0x40020400
 8003988:	40020800 	.word	0x40020800
 800398c:	40020c00 	.word	0x40020c00
 8003990:	40021000 	.word	0x40021000
 8003994:	40021400 	.word	0x40021400
 8003998:	40021800 	.word	0x40021800
 800399c:	40021c00 	.word	0x40021c00
 80039a0:	40013c00 	.word	0x40013c00

080039a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	460b      	mov	r3, r1
 80039ae:	807b      	strh	r3, [r7, #2]
 80039b0:	4613      	mov	r3, r2
 80039b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039b4:	787b      	ldrb	r3, [r7, #1]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039ba:	887a      	ldrh	r2, [r7, #2]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039c0:	e003      	b.n	80039ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039c2:	887b      	ldrh	r3, [r7, #2]
 80039c4:	041a      	lsls	r2, r3, #16
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	619a      	str	r2, [r3, #24]
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
	...

080039d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e12b      	b.n	8003c42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d106      	bne.n	8003a04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fd fa46 	bl	8000e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2224      	movs	r2, #36	; 0x24
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0201 	bic.w	r2, r2, #1
 8003a1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a3c:	f001 f8aa 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8003a40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	4a81      	ldr	r2, [pc, #516]	; (8003c4c <HAL_I2C_Init+0x274>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d807      	bhi.n	8003a5c <HAL_I2C_Init+0x84>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4a80      	ldr	r2, [pc, #512]	; (8003c50 <HAL_I2C_Init+0x278>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	bf94      	ite	ls
 8003a54:	2301      	movls	r3, #1
 8003a56:	2300      	movhi	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e006      	b.n	8003a6a <HAL_I2C_Init+0x92>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a7d      	ldr	r2, [pc, #500]	; (8003c54 <HAL_I2C_Init+0x27c>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	bf94      	ite	ls
 8003a64:	2301      	movls	r3, #1
 8003a66:	2300      	movhi	r3, #0
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0e7      	b.n	8003c42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4a78      	ldr	r2, [pc, #480]	; (8003c58 <HAL_I2C_Init+0x280>)
 8003a76:	fba2 2303 	umull	r2, r3, r2, r3
 8003a7a:	0c9b      	lsrs	r3, r3, #18
 8003a7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a6a      	ldr	r2, [pc, #424]	; (8003c4c <HAL_I2C_Init+0x274>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d802      	bhi.n	8003aac <HAL_I2C_Init+0xd4>
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	e009      	b.n	8003ac0 <HAL_I2C_Init+0xe8>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	4a69      	ldr	r2, [pc, #420]	; (8003c5c <HAL_I2C_Init+0x284>)
 8003ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8003abc:	099b      	lsrs	r3, r3, #6
 8003abe:	3301      	adds	r3, #1
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6812      	ldr	r2, [r2, #0]
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ad2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	495c      	ldr	r1, [pc, #368]	; (8003c4c <HAL_I2C_Init+0x274>)
 8003adc:	428b      	cmp	r3, r1
 8003ade:	d819      	bhi.n	8003b14 <HAL_I2C_Init+0x13c>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	1e59      	subs	r1, r3, #1
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aee:	1c59      	adds	r1, r3, #1
 8003af0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003af4:	400b      	ands	r3, r1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_I2C_Init+0x138>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1e59      	subs	r1, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0e:	e051      	b.n	8003bb4 <HAL_I2C_Init+0x1dc>
 8003b10:	2304      	movs	r3, #4
 8003b12:	e04f      	b.n	8003bb4 <HAL_I2C_Init+0x1dc>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d111      	bne.n	8003b40 <HAL_I2C_Init+0x168>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1e58      	subs	r0, r3, #1
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6859      	ldr	r1, [r3, #4]
 8003b24:	460b      	mov	r3, r1
 8003b26:	005b      	lsls	r3, r3, #1
 8003b28:	440b      	add	r3, r1
 8003b2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b2e:	3301      	adds	r3, #1
 8003b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bf0c      	ite	eq
 8003b38:	2301      	moveq	r3, #1
 8003b3a:	2300      	movne	r3, #0
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	e012      	b.n	8003b66 <HAL_I2C_Init+0x18e>
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	1e58      	subs	r0, r3, #1
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	440b      	add	r3, r1
 8003b4e:	0099      	lsls	r1, r3, #2
 8003b50:	440b      	add	r3, r1
 8003b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b56:	3301      	adds	r3, #1
 8003b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <HAL_I2C_Init+0x196>
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e022      	b.n	8003bb4 <HAL_I2C_Init+0x1dc>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10e      	bne.n	8003b94 <HAL_I2C_Init+0x1bc>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	1e58      	subs	r0, r3, #1
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6859      	ldr	r1, [r3, #4]
 8003b7e:	460b      	mov	r3, r1
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	440b      	add	r3, r1
 8003b84:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b88:	3301      	adds	r3, #1
 8003b8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b92:	e00f      	b.n	8003bb4 <HAL_I2C_Init+0x1dc>
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	1e58      	subs	r0, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	0099      	lsls	r1, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003baa:	3301      	adds	r3, #1
 8003bac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	6809      	ldr	r1, [r1, #0]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	69da      	ldr	r2, [r3, #28]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003be2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6911      	ldr	r1, [r2, #16]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	68d2      	ldr	r2, [r2, #12]
 8003bee:	4311      	orrs	r1, r2
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	6812      	ldr	r2, [r2, #0]
 8003bf4:	430b      	orrs	r3, r1
 8003bf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68db      	ldr	r3, [r3, #12]
 8003bfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	695a      	ldr	r2, [r3, #20]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0201 	orr.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2220      	movs	r2, #32
 8003c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	000186a0 	.word	0x000186a0
 8003c50:	001e847f 	.word	0x001e847f
 8003c54:	003d08ff 	.word	0x003d08ff
 8003c58:	431bde83 	.word	0x431bde83
 8003c5c:	10624dd3 	.word	0x10624dd3

08003c60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b088      	sub	sp, #32
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	4608      	mov	r0, r1
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4603      	mov	r3, r0
 8003c70:	817b      	strh	r3, [r7, #10]
 8003c72:	460b      	mov	r3, r1
 8003c74:	813b      	strh	r3, [r7, #8]
 8003c76:	4613      	mov	r3, r2
 8003c78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c7a:	f7fe f989 	bl	8001f90 <HAL_GetTick>
 8003c7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b20      	cmp	r3, #32
 8003c8a:	f040 80d9 	bne.w	8003e40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	9300      	str	r3, [sp, #0]
 8003c92:	2319      	movs	r3, #25
 8003c94:	2201      	movs	r2, #1
 8003c96:	496d      	ldr	r1, [pc, #436]	; (8003e4c <HAL_I2C_Mem_Write+0x1ec>)
 8003c98:	68f8      	ldr	r0, [r7, #12]
 8003c9a:	f000 f971 	bl	8003f80 <I2C_WaitOnFlagUntilTimeout>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e0cc      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_I2C_Mem_Write+0x56>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e0c5      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d007      	beq.n	8003cdc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f042 0201 	orr.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2221      	movs	r2, #33	; 0x21
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4a4d      	ldr	r2, [pc, #308]	; (8003e50 <HAL_I2C_Mem_Write+0x1f0>)
 8003d1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d1e:	88f8      	ldrh	r0, [r7, #6]
 8003d20:	893a      	ldrh	r2, [r7, #8]
 8003d22:	8979      	ldrh	r1, [r7, #10]
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	9301      	str	r3, [sp, #4]
 8003d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f890 	bl	8003e54 <I2C_RequestMemoryWrite>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d052      	beq.n	8003de0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e081      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 fa36 	bl	80041b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00d      	beq.n	8003d6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	2b04      	cmp	r3, #4
 8003d54:	d107      	bne.n	8003d66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e06b      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	781a      	ldrb	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	3b01      	subs	r3, #1
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b04      	cmp	r3, #4
 8003da6:	d11b      	bne.n	8003de0 <HAL_I2C_Mem_Write+0x180>
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d017      	beq.n	8003de0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db4:	781a      	ldrb	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1aa      	bne.n	8003d3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fa29 	bl	8004244 <I2C_WaitOnBTFFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00d      	beq.n	8003e14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d107      	bne.n	8003e10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e016      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2220      	movs	r2, #32
 8003e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	00100002 	.word	0x00100002
 8003e50:	ffff0000 	.word	0xffff0000

08003e54 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	4608      	mov	r0, r1
 8003e5e:	4611      	mov	r1, r2
 8003e60:	461a      	mov	r2, r3
 8003e62:	4603      	mov	r3, r0
 8003e64:	817b      	strh	r3, [r7, #10]
 8003e66:	460b      	mov	r3, r1
 8003e68:	813b      	strh	r3, [r7, #8]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	6a3b      	ldr	r3, [r7, #32]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f878 	bl	8003f80 <I2C_WaitOnFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea4:	d103      	bne.n	8003eae <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e05f      	b.n	8003f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eb2:	897b      	ldrh	r3, [r7, #10]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ec0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	6a3a      	ldr	r2, [r7, #32]
 8003ec6:	492d      	ldr	r1, [pc, #180]	; (8003f7c <I2C_RequestMemoryWrite+0x128>)
 8003ec8:	68f8      	ldr	r0, [r7, #12]
 8003eca:	f000 f8d3 	bl	8004074 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e04c      	b.n	8003f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	617b      	str	r3, [r7, #20]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef0:	6a39      	ldr	r1, [r7, #32]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f95e 	bl	80041b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00d      	beq.n	8003f1a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d107      	bne.n	8003f16 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f14:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e02b      	b.n	8003f72 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d105      	bne.n	8003f2c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f20:	893b      	ldrh	r3, [r7, #8]
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	611a      	str	r2, [r3, #16]
 8003f2a:	e021      	b.n	8003f70 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f2c:	893b      	ldrh	r3, [r7, #8]
 8003f2e:	0a1b      	lsrs	r3, r3, #8
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3c:	6a39      	ldr	r1, [r7, #32]
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 f938 	bl	80041b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00d      	beq.n	8003f66 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	2b04      	cmp	r3, #4
 8003f50:	d107      	bne.n	8003f62 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f60:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e005      	b.n	8003f72 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f66:	893b      	ldrh	r3, [r7, #8]
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	00010002 	.word	0x00010002

08003f80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f90:	e048      	b.n	8004024 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f98:	d044      	beq.n	8004024 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9a:	f7fd fff9 	bl	8001f90 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d302      	bcc.n	8003fb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d139      	bne.n	8004024 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	0c1b      	lsrs	r3, r3, #16
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d10d      	bne.n	8003fd6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	695b      	ldr	r3, [r3, #20]
 8003fc0:	43da      	mvns	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	e00c      	b.n	8003ff0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	461a      	mov	r2, r3
 8003ff0:	79fb      	ldrb	r3, [r7, #7]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d116      	bne.n	8004024 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004010:	f043 0220 	orr.w	r2, r3, #32
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e023      	b.n	800406c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	0c1b      	lsrs	r3, r3, #16
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b01      	cmp	r3, #1
 800402c:	d10d      	bne.n	800404a <I2C_WaitOnFlagUntilTimeout+0xca>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	43da      	mvns	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	e00c      	b.n	8004064 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	43da      	mvns	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	4013      	ands	r3, r2
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	bf0c      	ite	eq
 800405c:	2301      	moveq	r3, #1
 800405e:	2300      	movne	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	461a      	mov	r2, r3
 8004064:	79fb      	ldrb	r3, [r7, #7]
 8004066:	429a      	cmp	r2, r3
 8004068:	d093      	beq.n	8003f92 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004082:	e071      	b.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004092:	d123      	bne.n	80040dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	f043 0204 	orr.w	r2, r3, #4
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e067      	b.n	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040e2:	d041      	beq.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e4:	f7fd ff54 	bl	8001f90 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d136      	bne.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b01      	cmp	r3, #1
 8004102:	d10c      	bne.n	800411e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	43da      	mvns	r2, r3
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	4013      	ands	r3, r2
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	bf14      	ite	ne
 8004116:	2301      	movne	r3, #1
 8004118:	2300      	moveq	r3, #0
 800411a:	b2db      	uxtb	r3, r3
 800411c:	e00b      	b.n	8004136 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	43da      	mvns	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	4013      	ands	r3, r2
 800412a:	b29b      	uxth	r3, r3
 800412c:	2b00      	cmp	r3, #0
 800412e:	bf14      	ite	ne
 8004130:	2301      	movne	r3, #1
 8004132:	2300      	moveq	r3, #0
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	f043 0220 	orr.w	r2, r3, #32
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e021      	b.n	80041ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	0c1b      	lsrs	r3, r3, #16
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b01      	cmp	r3, #1
 8004170:	d10c      	bne.n	800418c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	43da      	mvns	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf14      	ite	ne
 8004184:	2301      	movne	r3, #1
 8004186:	2300      	moveq	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e00b      	b.n	80041a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	43da      	mvns	r2, r3
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	4013      	ands	r3, r2
 8004198:	b29b      	uxth	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f47f af6d 	bne.w	8004084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80041aa:	2300      	movs	r3, #0
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3710      	adds	r7, #16
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041c0:	e034      	b.n	800422c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f886 	bl	80042d4 <I2C_IsAcknowledgeFailed>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e034      	b.n	800423c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d8:	d028      	beq.n	800422c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fd fed9 	bl	8001f90 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d11d      	bne.n	800422c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b80      	cmp	r3, #128	; 0x80
 80041fc:	d016      	beq.n	800422c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e007      	b.n	800423c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d1c3      	bne.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004250:	e034      	b.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f83e 	bl	80042d4 <I2C_IsAcknowledgeFailed>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e034      	b.n	80042cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004268:	d028      	beq.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800426a:	f7fd fe91 	bl	8001f90 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	68ba      	ldr	r2, [r7, #8]
 8004276:	429a      	cmp	r2, r3
 8004278:	d302      	bcc.n	8004280 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d11d      	bne.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b04      	cmp	r3, #4
 800428c:	d016      	beq.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	f043 0220 	orr.w	r2, r3, #32
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e007      	b.n	80042cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	d1c3      	bne.n	8004252 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042ca:	2300      	movs	r3, #0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042ea:	d11b      	bne.n	8004324 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042f4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	f043 0204 	orr.w	r2, r3, #4
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2200      	movs	r2, #0
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
	...

08004334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b086      	sub	sp, #24
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e267      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 0301 	and.w	r3, r3, #1
 800434e:	2b00      	cmp	r3, #0
 8004350:	d075      	beq.n	800443e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004352:	4b88      	ldr	r3, [pc, #544]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
 800435a:	2b04      	cmp	r3, #4
 800435c:	d00c      	beq.n	8004378 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435e:	4b85      	ldr	r3, [pc, #532]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004366:	2b08      	cmp	r3, #8
 8004368:	d112      	bne.n	8004390 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800436a:	4b82      	ldr	r3, [pc, #520]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004376:	d10b      	bne.n	8004390 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	4b7e      	ldr	r3, [pc, #504]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d05b      	beq.n	800443c <HAL_RCC_OscConfig+0x108>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d157      	bne.n	800443c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e242      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d106      	bne.n	80043a8 <HAL_RCC_OscConfig+0x74>
 800439a:	4b76      	ldr	r3, [pc, #472]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a75      	ldr	r2, [pc, #468]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e01d      	b.n	80043e4 <HAL_RCC_OscConfig+0xb0>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043b0:	d10c      	bne.n	80043cc <HAL_RCC_OscConfig+0x98>
 80043b2:	4b70      	ldr	r3, [pc, #448]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a6f      	ldr	r2, [pc, #444]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043bc:	6013      	str	r3, [r2, #0]
 80043be:	4b6d      	ldr	r3, [pc, #436]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a6c      	ldr	r2, [pc, #432]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	e00b      	b.n	80043e4 <HAL_RCC_OscConfig+0xb0>
 80043cc:	4b69      	ldr	r3, [pc, #420]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a68      	ldr	r2, [pc, #416]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	4b66      	ldr	r3, [pc, #408]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a65      	ldr	r2, [pc, #404]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80043de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d013      	beq.n	8004414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ec:	f7fd fdd0 	bl	8001f90 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f2:	e008      	b.n	8004406 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f4:	f7fd fdcc 	bl	8001f90 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b64      	cmp	r3, #100	; 0x64
 8004400:	d901      	bls.n	8004406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e207      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004406:	4b5b      	ldr	r3, [pc, #364]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d0f0      	beq.n	80043f4 <HAL_RCC_OscConfig+0xc0>
 8004412:	e014      	b.n	800443e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004414:	f7fd fdbc 	bl	8001f90 <HAL_GetTick>
 8004418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441a:	e008      	b.n	800442e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800441c:	f7fd fdb8 	bl	8001f90 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	2b64      	cmp	r3, #100	; 0x64
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e1f3      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800442e:	4b51      	ldr	r3, [pc, #324]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f0      	bne.n	800441c <HAL_RCC_OscConfig+0xe8>
 800443a:	e000      	b.n	800443e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d063      	beq.n	8004512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800444a:	4b4a      	ldr	r3, [pc, #296]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00b      	beq.n	800446e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004456:	4b47      	ldr	r3, [pc, #284]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800445e:	2b08      	cmp	r3, #8
 8004460:	d11c      	bne.n	800449c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004462:	4b44      	ldr	r3, [pc, #272]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d116      	bne.n	800449c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800446e:	4b41      	ldr	r3, [pc, #260]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0302 	and.w	r3, r3, #2
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_RCC_OscConfig+0x152>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d001      	beq.n	8004486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e1c7      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004486:	4b3b      	ldr	r3, [pc, #236]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4937      	ldr	r1, [pc, #220]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004496:	4313      	orrs	r3, r2
 8004498:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800449a:	e03a      	b.n	8004512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d020      	beq.n	80044e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044a4:	4b34      	ldr	r3, [pc, #208]	; (8004578 <HAL_RCC_OscConfig+0x244>)
 80044a6:	2201      	movs	r2, #1
 80044a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044aa:	f7fd fd71 	bl	8001f90 <HAL_GetTick>
 80044ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b0:	e008      	b.n	80044c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044b2:	f7fd fd6d 	bl	8001f90 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d901      	bls.n	80044c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e1a8      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c4:	4b2b      	ldr	r3, [pc, #172]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0f0      	beq.n	80044b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044d0:	4b28      	ldr	r3, [pc, #160]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	4925      	ldr	r1, [pc, #148]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 80044e0:	4313      	orrs	r3, r2
 80044e2:	600b      	str	r3, [r1, #0]
 80044e4:	e015      	b.n	8004512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044e6:	4b24      	ldr	r3, [pc, #144]	; (8004578 <HAL_RCC_OscConfig+0x244>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fd50 	bl	8001f90 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044f4:	f7fd fd4c 	bl	8001f90 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e187      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004506:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d036      	beq.n	800458c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d016      	beq.n	8004554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <HAL_RCC_OscConfig+0x248>)
 8004528:	2201      	movs	r2, #1
 800452a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800452c:	f7fd fd30 	bl	8001f90 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004534:	f7fd fd2c 	bl	8001f90 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e167      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004546:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_RCC_OscConfig+0x240>)
 8004548:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x200>
 8004552:	e01b      	b.n	800458c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004554:	4b09      	ldr	r3, [pc, #36]	; (800457c <HAL_RCC_OscConfig+0x248>)
 8004556:	2200      	movs	r2, #0
 8004558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800455a:	f7fd fd19 	bl	8001f90 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004560:	e00e      	b.n	8004580 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004562:	f7fd fd15 	bl	8001f90 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d907      	bls.n	8004580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e150      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
 8004574:	40023800 	.word	0x40023800
 8004578:	42470000 	.word	0x42470000
 800457c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004580:	4b88      	ldr	r3, [pc, #544]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ea      	bne.n	8004562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 8097 	beq.w	80046c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800459e:	4b81      	ldr	r3, [pc, #516]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10f      	bne.n	80045ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	4b7d      	ldr	r3, [pc, #500]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80045b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b2:	4a7c      	ldr	r2, [pc, #496]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80045b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045b8:	6413      	str	r3, [r2, #64]	; 0x40
 80045ba:	4b7a      	ldr	r3, [pc, #488]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80045bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045c6:	2301      	movs	r3, #1
 80045c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ca:	4b77      	ldr	r3, [pc, #476]	; (80047a8 <HAL_RCC_OscConfig+0x474>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d118      	bne.n	8004608 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045d6:	4b74      	ldr	r3, [pc, #464]	; (80047a8 <HAL_RCC_OscConfig+0x474>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a73      	ldr	r2, [pc, #460]	; (80047a8 <HAL_RCC_OscConfig+0x474>)
 80045dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045e2:	f7fd fcd5 	bl	8001f90 <HAL_GetTick>
 80045e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045e8:	e008      	b.n	80045fc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045ea:	f7fd fcd1 	bl	8001f90 <HAL_GetTick>
 80045ee:	4602      	mov	r2, r0
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d901      	bls.n	80045fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045f8:	2303      	movs	r3, #3
 80045fa:	e10c      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045fc:	4b6a      	ldr	r3, [pc, #424]	; (80047a8 <HAL_RCC_OscConfig+0x474>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0f0      	beq.n	80045ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d106      	bne.n	800461e <HAL_RCC_OscConfig+0x2ea>
 8004610:	4b64      	ldr	r3, [pc, #400]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004614:	4a63      	ldr	r2, [pc, #396]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004616:	f043 0301 	orr.w	r3, r3, #1
 800461a:	6713      	str	r3, [r2, #112]	; 0x70
 800461c:	e01c      	b.n	8004658 <HAL_RCC_OscConfig+0x324>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b05      	cmp	r3, #5
 8004624:	d10c      	bne.n	8004640 <HAL_RCC_OscConfig+0x30c>
 8004626:	4b5f      	ldr	r3, [pc, #380]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	4a5e      	ldr	r2, [pc, #376]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 800462c:	f043 0304 	orr.w	r3, r3, #4
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
 8004632:	4b5c      	ldr	r3, [pc, #368]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004636:	4a5b      	ldr	r2, [pc, #364]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	6713      	str	r3, [r2, #112]	; 0x70
 800463e:	e00b      	b.n	8004658 <HAL_RCC_OscConfig+0x324>
 8004640:	4b58      	ldr	r3, [pc, #352]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	4a57      	ldr	r2, [pc, #348]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004646:	f023 0301 	bic.w	r3, r3, #1
 800464a:	6713      	str	r3, [r2, #112]	; 0x70
 800464c:	4b55      	ldr	r3, [pc, #340]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 800464e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004650:	4a54      	ldr	r2, [pc, #336]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004652:	f023 0304 	bic.w	r3, r3, #4
 8004656:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d015      	beq.n	800468c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004660:	f7fd fc96 	bl	8001f90 <HAL_GetTick>
 8004664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004666:	e00a      	b.n	800467e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f7fd fc92 	bl	8001f90 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e0cb      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467e:	4b49      	ldr	r3, [pc, #292]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0ee      	beq.n	8004668 <HAL_RCC_OscConfig+0x334>
 800468a:	e014      	b.n	80046b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800468c:	f7fd fc80 	bl	8001f90 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004692:	e00a      	b.n	80046aa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004694:	f7fd fc7c 	bl	8001f90 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d901      	bls.n	80046aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e0b5      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046aa:	4b3e      	ldr	r3, [pc, #248]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1ee      	bne.n	8004694 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046b6:	7dfb      	ldrb	r3, [r7, #23]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d105      	bne.n	80046c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046bc:	4b39      	ldr	r3, [pc, #228]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	4a38      	ldr	r2, [pc, #224]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80046c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046c6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	f000 80a1 	beq.w	8004814 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046d2:	4b34      	ldr	r3, [pc, #208]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 030c 	and.w	r3, r3, #12
 80046da:	2b08      	cmp	r3, #8
 80046dc:	d05c      	beq.n	8004798 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d141      	bne.n	800476a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e6:	4b31      	ldr	r3, [pc, #196]	; (80047ac <HAL_RCC_OscConfig+0x478>)
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fd fc50 	bl	8001f90 <HAL_GetTick>
 80046f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f2:	e008      	b.n	8004706 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046f4:	f7fd fc4c 	bl	8001f90 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e087      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004706:	4b27      	ldr	r3, [pc, #156]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1f0      	bne.n	80046f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004720:	019b      	lsls	r3, r3, #6
 8004722:	431a      	orrs	r2, r3
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	085b      	lsrs	r3, r3, #1
 800472a:	3b01      	subs	r3, #1
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004734:	061b      	lsls	r3, r3, #24
 8004736:	491b      	ldr	r1, [pc, #108]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 8004738:	4313      	orrs	r3, r2
 800473a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800473c:	4b1b      	ldr	r3, [pc, #108]	; (80047ac <HAL_RCC_OscConfig+0x478>)
 800473e:	2201      	movs	r2, #1
 8004740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004742:	f7fd fc25 	bl	8001f90 <HAL_GetTick>
 8004746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800474a:	f7fd fc21 	bl	8001f90 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e05c      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475c:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x416>
 8004768:	e054      	b.n	8004814 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476a:	4b10      	ldr	r3, [pc, #64]	; (80047ac <HAL_RCC_OscConfig+0x478>)
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004770:	f7fd fc0e 	bl	8001f90 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004778:	f7fd fc0a 	bl	8001f90 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e045      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800478a:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <HAL_RCC_OscConfig+0x470>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f0      	bne.n	8004778 <HAL_RCC_OscConfig+0x444>
 8004796:	e03d      	b.n	8004814 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d107      	bne.n	80047b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e038      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
 80047a4:	40023800 	.word	0x40023800
 80047a8:	40007000 	.word	0x40007000
 80047ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047b0:	4b1b      	ldr	r3, [pc, #108]	; (8004820 <HAL_RCC_OscConfig+0x4ec>)
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d028      	beq.n	8004810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d121      	bne.n	8004810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d11a      	bne.n	8004810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047e0:	4013      	ands	r3, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d111      	bne.n	8004810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	3b01      	subs	r3, #1
 80047fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d107      	bne.n	8004810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800480a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800480c:	429a      	cmp	r2, r3
 800480e:	d001      	beq.n	8004814 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800

08004824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e0cc      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004838:	4b68      	ldr	r3, [pc, #416]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d90c      	bls.n	8004860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b65      	ldr	r3, [pc, #404]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	b2d2      	uxtb	r2, r2
 800484c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800484e:	4b63      	ldr	r3, [pc, #396]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0307 	and.w	r3, r3, #7
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0b8      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d020      	beq.n	80048ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 0304 	and.w	r3, r3, #4
 8004874:	2b00      	cmp	r3, #0
 8004876:	d005      	beq.n	8004884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004878:	4b59      	ldr	r3, [pc, #356]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	4a58      	ldr	r2, [pc, #352]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800487e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004882:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0308 	and.w	r3, r3, #8
 800488c:	2b00      	cmp	r3, #0
 800488e:	d005      	beq.n	800489c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004890:	4b53      	ldr	r3, [pc, #332]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	4a52      	ldr	r2, [pc, #328]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800489a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800489c:	4b50      	ldr	r3, [pc, #320]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	494d      	ldr	r1, [pc, #308]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048aa:	4313      	orrs	r3, r2
 80048ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d044      	beq.n	8004944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d107      	bne.n	80048d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	4b47      	ldr	r3, [pc, #284]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d119      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e07f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d003      	beq.n	80048e2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d107      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e2:	4b3f      	ldr	r3, [pc, #252]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e06f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e067      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004902:	4b37      	ldr	r3, [pc, #220]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f023 0203 	bic.w	r2, r3, #3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4934      	ldr	r1, [pc, #208]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	4313      	orrs	r3, r2
 8004912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004914:	f7fd fb3c 	bl	8001f90 <HAL_GetTick>
 8004918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800491a:	e00a      	b.n	8004932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800491c:	f7fd fb38 	bl	8001f90 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	f241 3288 	movw	r2, #5000	; 0x1388
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e04f      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004932:	4b2b      	ldr	r3, [pc, #172]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	f003 020c 	and.w	r2, r3, #12
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	429a      	cmp	r2, r3
 8004942:	d1eb      	bne.n	800491c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004944:	4b25      	ldr	r3, [pc, #148]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0307 	and.w	r3, r3, #7
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d20c      	bcs.n	800496c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004952:	4b22      	ldr	r3, [pc, #136]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495a:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_RCC_ClockConfig+0x1b8>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0307 	and.w	r3, r3, #7
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	429a      	cmp	r2, r3
 8004966:	d001      	beq.n	800496c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e032      	b.n	80049d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0304 	and.w	r3, r3, #4
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004978:	4b19      	ldr	r3, [pc, #100]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4916      	ldr	r1, [pc, #88]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004986:	4313      	orrs	r3, r2
 8004988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0308 	and.w	r3, r3, #8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d009      	beq.n	80049aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004996:	4b12      	ldr	r3, [pc, #72]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	490e      	ldr	r1, [pc, #56]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049aa:	f000 f821 	bl	80049f0 <HAL_RCC_GetSysClockFreq>
 80049ae:	4602      	mov	r2, r0
 80049b0:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <HAL_RCC_ClockConfig+0x1bc>)
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	490a      	ldr	r1, [pc, #40]	; (80049e4 <HAL_RCC_ClockConfig+0x1c0>)
 80049bc:	5ccb      	ldrb	r3, [r1, r3]
 80049be:	fa22 f303 	lsr.w	r3, r2, r3
 80049c2:	4a09      	ldr	r2, [pc, #36]	; (80049e8 <HAL_RCC_ClockConfig+0x1c4>)
 80049c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049c6:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_RCC_ClockConfig+0x1c8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fc ff2c 	bl	8001828 <HAL_InitTick>

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3710      	adds	r7, #16
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023c00 	.word	0x40023c00
 80049e0:	40023800 	.word	0x40023800
 80049e4:	08026e10 	.word	0x08026e10
 80049e8:	20000000 	.word	0x20000000
 80049ec:	20000004 	.word	0x20000004

080049f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049f4:	b090      	sub	sp, #64	; 0x40
 80049f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049f8:	2300      	movs	r3, #0
 80049fa:	637b      	str	r3, [r7, #52]	; 0x34
 80049fc:	2300      	movs	r3, #0
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a00:	2300      	movs	r3, #0
 8004a02:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004a04:	2300      	movs	r3, #0
 8004a06:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a08:	4b59      	ldr	r3, [pc, #356]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 030c 	and.w	r3, r3, #12
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d00d      	beq.n	8004a30 <HAL_RCC_GetSysClockFreq+0x40>
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	f200 80a1 	bhi.w	8004b5c <HAL_RCC_GetSysClockFreq+0x16c>
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <HAL_RCC_GetSysClockFreq+0x34>
 8004a1e:	2b04      	cmp	r3, #4
 8004a20:	d003      	beq.n	8004a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a22:	e09b      	b.n	8004b5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a24:	4b53      	ldr	r3, [pc, #332]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a26:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a28:	e09b      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a2a:	4b53      	ldr	r3, [pc, #332]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a2c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a2e:	e098      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a30:	4b4f      	ldr	r3, [pc, #316]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a38:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a3a:	4b4d      	ldr	r3, [pc, #308]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d028      	beq.n	8004a98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a46:	4b4a      	ldr	r3, [pc, #296]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	099b      	lsrs	r3, r3, #6
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	627a      	str	r2, [r7, #36]	; 0x24
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4b47      	ldr	r3, [pc, #284]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a5c:	fb03 f201 	mul.w	r2, r3, r1
 8004a60:	2300      	movs	r3, #0
 8004a62:	fb00 f303 	mul.w	r3, r0, r3
 8004a66:	4413      	add	r3, r2
 8004a68:	4a43      	ldr	r2, [pc, #268]	; (8004b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a6a:	fba0 1202 	umull	r1, r2, r0, r2
 8004a6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a70:	460a      	mov	r2, r1
 8004a72:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a76:	4413      	add	r3, r2
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	61bb      	str	r3, [r7, #24]
 8004a80:	61fa      	str	r2, [r7, #28]
 8004a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a8a:	f7fb fbf9 	bl	8000280 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4613      	mov	r3, r2
 8004a94:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a96:	e053      	b.n	8004b40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a98:	4b35      	ldr	r3, [pc, #212]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	099b      	lsrs	r3, r3, #6
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	613b      	str	r3, [r7, #16]
 8004aa2:	617a      	str	r2, [r7, #20]
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004aaa:	f04f 0b00 	mov.w	fp, #0
 8004aae:	4652      	mov	r2, sl
 8004ab0:	465b      	mov	r3, fp
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f04f 0100 	mov.w	r1, #0
 8004aba:	0159      	lsls	r1, r3, #5
 8004abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ac0:	0150      	lsls	r0, r2, #5
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	ebb2 080a 	subs.w	r8, r2, sl
 8004aca:	eb63 090b 	sbc.w	r9, r3, fp
 8004ace:	f04f 0200 	mov.w	r2, #0
 8004ad2:	f04f 0300 	mov.w	r3, #0
 8004ad6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ada:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ade:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ae2:	ebb2 0408 	subs.w	r4, r2, r8
 8004ae6:	eb63 0509 	sbc.w	r5, r3, r9
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	00eb      	lsls	r3, r5, #3
 8004af4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004af8:	00e2      	lsls	r2, r4, #3
 8004afa:	4614      	mov	r4, r2
 8004afc:	461d      	mov	r5, r3
 8004afe:	eb14 030a 	adds.w	r3, r4, sl
 8004b02:	603b      	str	r3, [r7, #0]
 8004b04:	eb45 030b 	adc.w	r3, r5, fp
 8004b08:	607b      	str	r3, [r7, #4]
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b16:	4629      	mov	r1, r5
 8004b18:	028b      	lsls	r3, r1, #10
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b20:	4621      	mov	r1, r4
 8004b22:	028a      	lsls	r2, r1, #10
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	60fa      	str	r2, [r7, #12]
 8004b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b34:	f7fb fba4 	bl	8000280 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b40:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	0c1b      	lsrs	r3, r3, #16
 8004b46:	f003 0303 	and.w	r3, r3, #3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	005b      	lsls	r3, r3, #1
 8004b4e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b5a:	e002      	b.n	8004b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b5c:	4b05      	ldr	r3, [pc, #20]	; (8004b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3740      	adds	r7, #64	; 0x40
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6e:	bf00      	nop
 8004b70:	40023800 	.word	0x40023800
 8004b74:	00f42400 	.word	0x00f42400
 8004b78:	017d7840 	.word	0x017d7840

08004b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b80:	4b03      	ldr	r3, [pc, #12]	; (8004b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b82:	681b      	ldr	r3, [r3, #0]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	20000000 	.word	0x20000000

08004b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b98:	f7ff fff0 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0a9b      	lsrs	r3, r3, #10
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4903      	ldr	r1, [pc, #12]	; (8004bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004baa:	5ccb      	ldrb	r3, [r1, r3]
 8004bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	08026e20 	.word	0x08026e20

08004bbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bc0:	f7ff ffdc 	bl	8004b7c <HAL_RCC_GetHCLKFreq>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	4b05      	ldr	r3, [pc, #20]	; (8004bdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	0b5b      	lsrs	r3, r3, #13
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	4903      	ldr	r1, [pc, #12]	; (8004be0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bd2:	5ccb      	ldrb	r3, [r1, r3]
 8004bd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	08026e20 	.word	0x08026e20

08004be4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	220f      	movs	r2, #15
 8004bf2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004bf4:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <HAL_RCC_GetClockConfig+0x5c>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	f003 0203 	and.w	r2, r3, #3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004c00:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <HAL_RCC_GetClockConfig+0x5c>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <HAL_RCC_GetClockConfig+0x5c>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <HAL_RCC_GetClockConfig+0x5c>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	08db      	lsrs	r3, r3, #3
 8004c1e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <HAL_RCC_GetClockConfig+0x60>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0207 	and.w	r2, r3, #7
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	601a      	str	r2, [r3, #0]
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	40023800 	.word	0x40023800
 8004c44:	40023c00 	.word	0x40023c00

08004c48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e07b      	b.n	8004d52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d108      	bne.n	8004c74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c6a:	d009      	beq.n	8004c80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	61da      	str	r2, [r3, #28]
 8004c72:	e005      	b.n	8004c80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d106      	bne.n	8004ca0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f7fc fd30 	bl	8001700 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	691b      	ldr	r3, [r3, #16]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	695b      	ldr	r3, [r3, #20]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	431a      	orrs	r2, r3
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d04:	ea42 0103 	orr.w	r1, r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	f003 0104 	and.w	r1, r3, #4
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	f003 0210 	and.w	r2, r3, #16
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69da      	ldr	r2, [r3, #28]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b088      	sub	sp, #32
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	60f8      	str	r0, [r7, #12]
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	603b      	str	r3, [r7, #0]
 8004d66:	4613      	mov	r3, r2
 8004d68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d101      	bne.n	8004d7c <HAL_SPI_Transmit+0x22>
 8004d78:	2302      	movs	r3, #2
 8004d7a:	e12d      	b.n	8004fd8 <HAL_SPI_Transmit+0x27e>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d84:	f7fd f904 	bl	8001f90 <HAL_GetTick>
 8004d88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d002      	beq.n	8004da0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d9e:	e116      	b.n	8004fce <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d002      	beq.n	8004dac <HAL_SPI_Transmit+0x52>
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004db0:	e10d      	b.n	8004fce <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2203      	movs	r2, #3
 8004db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	88fa      	ldrh	r2, [r7, #6]
 8004dca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	88fa      	ldrh	r2, [r7, #6]
 8004dd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df8:	d10f      	bne.n	8004e1a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e24:	2b40      	cmp	r3, #64	; 0x40
 8004e26:	d007      	beq.n	8004e38 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e40:	d14f      	bne.n	8004ee2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d002      	beq.n	8004e50 <HAL_SPI_Transmit+0xf6>
 8004e4a:	8afb      	ldrh	r3, [r7, #22]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d142      	bne.n	8004ed6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e54:	881a      	ldrh	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e60:	1c9a      	adds	r2, r3, #2
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e6a:	b29b      	uxth	r3, r3
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	b29a      	uxth	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004e74:	e02f      	b.n	8004ed6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d112      	bne.n	8004eaa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e88:	881a      	ldrh	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e94:	1c9a      	adds	r2, r3, #2
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ea8:	e015      	b.n	8004ed6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004eaa:	f7fd f871 	bl	8001f90 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d803      	bhi.n	8004ec2 <HAL_SPI_Transmit+0x168>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ec0:	d102      	bne.n	8004ec8 <HAL_SPI_Transmit+0x16e>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d106      	bne.n	8004ed6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ed4:	e07b      	b.n	8004fce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eda:	b29b      	uxth	r3, r3
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1ca      	bne.n	8004e76 <HAL_SPI_Transmit+0x11c>
 8004ee0:	e050      	b.n	8004f84 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d002      	beq.n	8004ef0 <HAL_SPI_Transmit+0x196>
 8004eea:	8afb      	ldrh	r3, [r7, #22]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d144      	bne.n	8004f7a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	330c      	adds	r3, #12
 8004efa:	7812      	ldrb	r2, [r2, #0]
 8004efc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	1c5a      	adds	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004f16:	e030      	b.n	8004f7a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d113      	bne.n	8004f4e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	330c      	adds	r3, #12
 8004f30:	7812      	ldrb	r2, [r2, #0]
 8004f32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29a      	uxth	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8004f4c:	e015      	b.n	8004f7a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f4e:	f7fd f81f 	bl	8001f90 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d803      	bhi.n	8004f66 <HAL_SPI_Transmit+0x20c>
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f64:	d102      	bne.n	8004f6c <HAL_SPI_Transmit+0x212>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d106      	bne.n	8004f7a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f78:	e029      	b.n	8004fce <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1c9      	bne.n	8004f18 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 fbdf 	bl	800574c <SPI_EndRxTxTransaction>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d002      	beq.n	8004f9a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2220      	movs	r2, #32
 8004f98:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	613b      	str	r3, [r7, #16]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	613b      	str	r3, [r7, #16]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	613b      	str	r3, [r7, #16]
 8004fb6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e003      	b.n	8004fce <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2201      	movs	r2, #1
 8004fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fd6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af02      	add	r7, sp, #8
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	603b      	str	r3, [r7, #0]
 8004fec:	4613      	mov	r3, r2
 8004fee:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d002      	beq.n	8005006 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005000:	2302      	movs	r3, #2
 8005002:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005004:	e0fb      	b.n	80051fe <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800500e:	d112      	bne.n	8005036 <HAL_SPI_Receive+0x56>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10e      	bne.n	8005036 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2204      	movs	r2, #4
 800501c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005020:	88fa      	ldrh	r2, [r7, #6]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	4613      	mov	r3, r2
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f8ef 	bl	8005210 <HAL_SPI_TransmitReceive>
 8005032:	4603      	mov	r3, r0
 8005034:	e0e8      	b.n	8005208 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_SPI_Receive+0x64>
 8005040:	2302      	movs	r3, #2
 8005042:	e0e1      	b.n	8005208 <HAL_SPI_Receive+0x228>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800504c:	f7fc ffa0 	bl	8001f90 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d002      	beq.n	800505e <HAL_SPI_Receive+0x7e>
 8005058:	88fb      	ldrh	r3, [r7, #6]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005062:	e0cc      	b.n	80051fe <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2204      	movs	r2, #4
 8005068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2200      	movs	r2, #0
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	88fa      	ldrh	r2, [r7, #6]
 800507c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	88fa      	ldrh	r2, [r7, #6]
 8005082:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2200      	movs	r2, #0
 8005088:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2200      	movs	r2, #0
 800508e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2200      	movs	r2, #0
 8005094:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050aa:	d10f      	bne.n	80050cc <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80050ca:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b40      	cmp	r3, #64	; 0x40
 80050d8:	d007      	beq.n	80050ea <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050e8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d16a      	bne.n	80051c8 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80050f2:	e032      	b.n	800515a <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d115      	bne.n	800512e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f103 020c 	add.w	r2, r3, #12
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800510e:	7812      	ldrb	r2, [r2, #0]
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800512c:	e015      	b.n	800515a <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800512e:	f7fc ff2f 	bl	8001f90 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d803      	bhi.n	8005146 <HAL_SPI_Receive+0x166>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005144:	d102      	bne.n	800514c <HAL_SPI_Receive+0x16c>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d106      	bne.n	800515a <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005158:	e051      	b.n	80051fe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1c7      	bne.n	80050f4 <HAL_SPI_Receive+0x114>
 8005164:	e035      	b.n	80051d2 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0301 	and.w	r3, r3, #1
 8005170:	2b01      	cmp	r3, #1
 8005172:	d113      	bne.n	800519c <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517e:	b292      	uxth	r2, r2
 8005180:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005186:	1c9a      	adds	r2, r3, #2
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005190:	b29b      	uxth	r3, r3
 8005192:	3b01      	subs	r3, #1
 8005194:	b29a      	uxth	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	87da      	strh	r2, [r3, #62]	; 0x3e
 800519a:	e015      	b.n	80051c8 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800519c:	f7fc fef8 	bl	8001f90 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d803      	bhi.n	80051b4 <HAL_SPI_Receive+0x1d4>
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051b2:	d102      	bne.n	80051ba <HAL_SPI_Receive+0x1da>
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2201      	movs	r2, #1
 80051c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80051c6:	e01a      	b.n	80051fe <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1c9      	bne.n	8005166 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 fa52 	bl	8005680 <SPI_EndRxTransaction>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2220      	movs	r2, #32
 80051e6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d002      	beq.n	80051f6 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	75fb      	strb	r3, [r7, #23]
 80051f4:	e003      	b.n	80051fe <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005206:	7dfb      	ldrb	r3, [r7, #23]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08c      	sub	sp, #48	; 0x30
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
 800521c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800521e:	2301      	movs	r3, #1
 8005220:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_SPI_TransmitReceive+0x26>
 8005232:	2302      	movs	r3, #2
 8005234:	e198      	b.n	8005568 <HAL_SPI_TransmitReceive+0x358>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800523e:	f7fc fea7 	bl	8001f90 <HAL_GetTick>
 8005242:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800524a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005254:	887b      	ldrh	r3, [r7, #2]
 8005256:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005258:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800525c:	2b01      	cmp	r3, #1
 800525e:	d00f      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x70>
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005266:	d107      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d103      	bne.n	8005278 <HAL_SPI_TransmitReceive+0x68>
 8005270:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005274:	2b04      	cmp	r3, #4
 8005276:	d003      	beq.n	8005280 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005278:	2302      	movs	r3, #2
 800527a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800527e:	e16d      	b.n	800555c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_SPI_TransmitReceive+0x82>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <HAL_SPI_TransmitReceive+0x82>
 800528c:	887b      	ldrh	r3, [r7, #2]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d103      	bne.n	800529a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005298:	e160      	b.n	800555c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d003      	beq.n	80052ae <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2205      	movs	r2, #5
 80052aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	887a      	ldrh	r2, [r7, #2]
 80052be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	887a      	ldrh	r2, [r7, #2]
 80052c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	68ba      	ldr	r2, [r7, #8]
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	887a      	ldrh	r2, [r7, #2]
 80052d0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	887a      	ldrh	r2, [r7, #2]
 80052d6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2200      	movs	r2, #0
 80052dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2200      	movs	r2, #0
 80052e2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052ee:	2b40      	cmp	r3, #64	; 0x40
 80052f0:	d007      	beq.n	8005302 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005300:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800530a:	d17c      	bne.n	8005406 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <HAL_SPI_TransmitReceive+0x10a>
 8005314:	8b7b      	ldrh	r3, [r7, #26]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d16a      	bne.n	80053f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	881a      	ldrh	r2, [r3, #0]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	1c9a      	adds	r2, r3, #2
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005334:	b29b      	uxth	r3, r3
 8005336:	3b01      	subs	r3, #1
 8005338:	b29a      	uxth	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800533e:	e057      	b.n	80053f0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 0302 	and.w	r3, r3, #2
 800534a:	2b02      	cmp	r3, #2
 800534c:	d11b      	bne.n	8005386 <HAL_SPI_TransmitReceive+0x176>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005352:	b29b      	uxth	r3, r3
 8005354:	2b00      	cmp	r3, #0
 8005356:	d016      	beq.n	8005386 <HAL_SPI_TransmitReceive+0x176>
 8005358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535a:	2b01      	cmp	r3, #1
 800535c:	d113      	bne.n	8005386 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	881a      	ldrh	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	1c9a      	adds	r2, r3, #2
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005378:	b29b      	uxth	r3, r3
 800537a:	3b01      	subs	r3, #1
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0301 	and.w	r3, r3, #1
 8005390:	2b01      	cmp	r3, #1
 8005392:	d119      	bne.n	80053c8 <HAL_SPI_TransmitReceive+0x1b8>
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d014      	beq.n	80053c8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a8:	b292      	uxth	r2, r2
 80053aa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	1c9a      	adds	r2, r3, #2
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053c4:	2301      	movs	r3, #1
 80053c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053c8:	f7fc fde2 	bl	8001f90 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d80b      	bhi.n	80053f0 <HAL_SPI_TransmitReceive+0x1e0>
 80053d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053de:	d007      	beq.n	80053f0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80053ee:	e0b5      	b.n	800555c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1a2      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x130>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fe:	b29b      	uxth	r3, r3
 8005400:	2b00      	cmp	r3, #0
 8005402:	d19d      	bne.n	8005340 <HAL_SPI_TransmitReceive+0x130>
 8005404:	e080      	b.n	8005508 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_SPI_TransmitReceive+0x204>
 800540e:	8b7b      	ldrh	r3, [r7, #26]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d16f      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	330c      	adds	r3, #12
 800541e:	7812      	ldrb	r2, [r2, #0]
 8005420:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005426:	1c5a      	adds	r2, r3, #1
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800543a:	e05b      	b.n	80054f4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b02      	cmp	r3, #2
 8005448:	d11c      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x274>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800544e:	b29b      	uxth	r3, r3
 8005450:	2b00      	cmp	r3, #0
 8005452:	d017      	beq.n	8005484 <HAL_SPI_TransmitReceive+0x274>
 8005454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d114      	bne.n	8005484 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	330c      	adds	r3, #12
 8005464:	7812      	ldrb	r2, [r2, #0]
 8005466:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800546c:	1c5a      	adds	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005476:	b29b      	uxth	r3, r3
 8005478:	3b01      	subs	r3, #1
 800547a:	b29a      	uxth	r2, r3
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005480:	2300      	movs	r3, #0
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f003 0301 	and.w	r3, r3, #1
 800548e:	2b01      	cmp	r3, #1
 8005490:	d119      	bne.n	80054c6 <HAL_SPI_TransmitReceive+0x2b6>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005496:	b29b      	uxth	r3, r3
 8005498:	2b00      	cmp	r3, #0
 800549a:	d014      	beq.n	80054c6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054b8:	b29b      	uxth	r3, r3
 80054ba:	3b01      	subs	r3, #1
 80054bc:	b29a      	uxth	r2, r3
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054c2:	2301      	movs	r3, #1
 80054c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054c6:	f7fc fd63 	bl	8001f90 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d803      	bhi.n	80054de <HAL_SPI_TransmitReceive+0x2ce>
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054dc:	d102      	bne.n	80054e4 <HAL_SPI_TransmitReceive+0x2d4>
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d107      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2201      	movs	r2, #1
 80054ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80054f2:	e033      	b.n	800555c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d19e      	bne.n	800543c <HAL_SPI_TransmitReceive+0x22c>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005502:	b29b      	uxth	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d199      	bne.n	800543c <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800550a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 f91d 	bl	800574c <SPI_EndRxTxTransaction>
 8005512:	4603      	mov	r3, r0
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005524:	e01a      	b.n	800555c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	689b      	ldr	r3, [r3, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10a      	bne.n	8005544 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800552e:	2300      	movs	r3, #0
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005548:	2b00      	cmp	r3, #0
 800554a:	d003      	beq.n	8005554 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005552:	e003      	b.n	800555c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005568:	4618      	mov	r0, r3
 800556a:	3730      	adds	r7, #48	; 0x30
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}

08005570 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b088      	sub	sp, #32
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	603b      	str	r3, [r7, #0]
 800557c:	4613      	mov	r3, r2
 800557e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005580:	f7fc fd06 	bl	8001f90 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	4413      	add	r3, r2
 800558e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005590:	f7fc fcfe 	bl	8001f90 <HAL_GetTick>
 8005594:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005596:	4b39      	ldr	r3, [pc, #228]	; (800567c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	015b      	lsls	r3, r3, #5
 800559c:	0d1b      	lsrs	r3, r3, #20
 800559e:	69fa      	ldr	r2, [r7, #28]
 80055a0:	fb02 f303 	mul.w	r3, r2, r3
 80055a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055a6:	e054      	b.n	8005652 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ae:	d050      	beq.n	8005652 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055b0:	f7fc fcee 	bl	8001f90 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d902      	bls.n	80055c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d13d      	bne.n	8005642 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055de:	d111      	bne.n	8005604 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e8:	d004      	beq.n	80055f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055f2:	d107      	bne.n	8005604 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005602:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800560c:	d10f      	bne.n	800562e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800561c:	601a      	str	r2, [r3, #0]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800562c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800563e:	2303      	movs	r3, #3
 8005640:	e017      	b.n	8005672 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005648:	2300      	movs	r3, #0
 800564a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	3b01      	subs	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	4013      	ands	r3, r2
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	429a      	cmp	r2, r3
 8005660:	bf0c      	ite	eq
 8005662:	2301      	moveq	r3, #1
 8005664:	2300      	movne	r3, #0
 8005666:	b2db      	uxtb	r3, r3
 8005668:	461a      	mov	r2, r3
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	429a      	cmp	r2, r3
 800566e:	d19b      	bne.n	80055a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3720      	adds	r7, #32
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	20000000 	.word	0x20000000

08005680 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b086      	sub	sp, #24
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	60b9      	str	r1, [r7, #8]
 800568a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005694:	d111      	bne.n	80056ba <SPI_EndRxTransaction+0x3a>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800569e:	d004      	beq.n	80056aa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056a8:	d107      	bne.n	80056ba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056b8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056c2:	d12a      	bne.n	800571a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056cc:	d012      	beq.n	80056f4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2200      	movs	r2, #0
 80056d6:	2180      	movs	r1, #128	; 0x80
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f7ff ff49 	bl	8005570 <SPI_WaitFlagStateUntilTimeout>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d02d      	beq.n	8005740 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056e8:	f043 0220 	orr.w	r2, r3, #32
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e026      	b.n	8005742 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2200      	movs	r2, #0
 80056fc:	2101      	movs	r1, #1
 80056fe:	68f8      	ldr	r0, [r7, #12]
 8005700:	f7ff ff36 	bl	8005570 <SPI_WaitFlagStateUntilTimeout>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d01a      	beq.n	8005740 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570e:	f043 0220 	orr.w	r2, r3, #32
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e013      	b.n	8005742 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	9300      	str	r3, [sp, #0]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2200      	movs	r2, #0
 8005722:	2101      	movs	r1, #1
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f7ff ff23 	bl	8005570 <SPI_WaitFlagStateUntilTimeout>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d007      	beq.n	8005740 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005734:	f043 0220 	orr.w	r2, r3, #32
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e000      	b.n	8005742 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
	...

0800574c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b088      	sub	sp, #32
 8005750:	af02      	add	r7, sp, #8
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	9300      	str	r3, [sp, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	2201      	movs	r2, #1
 8005760:	2102      	movs	r1, #2
 8005762:	68f8      	ldr	r0, [r7, #12]
 8005764:	f7ff ff04 	bl	8005570 <SPI_WaitFlagStateUntilTimeout>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005772:	f043 0220 	orr.w	r2, r3, #32
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e032      	b.n	80057e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800577e:	4b1b      	ldr	r3, [pc, #108]	; (80057ec <SPI_EndRxTxTransaction+0xa0>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1b      	ldr	r2, [pc, #108]	; (80057f0 <SPI_EndRxTxTransaction+0xa4>)
 8005784:	fba2 2303 	umull	r2, r3, r2, r3
 8005788:	0d5b      	lsrs	r3, r3, #21
 800578a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800578e:	fb02 f303 	mul.w	r3, r2, r3
 8005792:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800579c:	d112      	bne.n	80057c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	9300      	str	r3, [sp, #0]
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	2200      	movs	r2, #0
 80057a6:	2180      	movs	r1, #128	; 0x80
 80057a8:	68f8      	ldr	r0, [r7, #12]
 80057aa:	f7ff fee1 	bl	8005570 <SPI_WaitFlagStateUntilTimeout>
 80057ae:	4603      	mov	r3, r0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d016      	beq.n	80057e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057b8:	f043 0220 	orr.w	r2, r3, #32
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e00f      	b.n	80057e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00a      	beq.n	80057e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	3b01      	subs	r3, #1
 80057ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057da:	2b80      	cmp	r3, #128	; 0x80
 80057dc:	d0f2      	beq.n	80057c4 <SPI_EndRxTxTransaction+0x78>
 80057de:	e000      	b.n	80057e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80057e0:	bf00      	nop
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	20000000 	.word	0x20000000
 80057f0:	165e9f81 	.word	0x165e9f81

080057f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b082      	sub	sp, #8
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e041      	b.n	800588a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d106      	bne.n	8005820 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f839 	bl	8005892 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	3304      	adds	r3, #4
 8005830:	4619      	mov	r1, r3
 8005832:	4610      	mov	r0, r2
 8005834:	f000 f9c0 	bl	8005bb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d001      	beq.n	80058c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e04e      	b.n	800595e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f042 0201 	orr.w	r2, r2, #1
 80058d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a23      	ldr	r2, [pc, #140]	; (800596c <HAL_TIM_Base_Start_IT+0xc4>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d022      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ea:	d01d      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <HAL_TIM_Base_Start_IT+0xc8>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d018      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_TIM_Base_Start_IT+0xcc>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d013      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a1c      	ldr	r2, [pc, #112]	; (8005978 <HAL_TIM_Base_Start_IT+0xd0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00e      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a1b      	ldr	r2, [pc, #108]	; (800597c <HAL_TIM_Base_Start_IT+0xd4>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d009      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a19      	ldr	r2, [pc, #100]	; (8005980 <HAL_TIM_Base_Start_IT+0xd8>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d004      	beq.n	8005928 <HAL_TIM_Base_Start_IT+0x80>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a18      	ldr	r2, [pc, #96]	; (8005984 <HAL_TIM_Base_Start_IT+0xdc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d111      	bne.n	800594c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f003 0307 	and.w	r3, r3, #7
 8005932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2b06      	cmp	r3, #6
 8005938:	d010      	beq.n	800595c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f042 0201 	orr.w	r2, r2, #1
 8005948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594a:	e007      	b.n	800595c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f042 0201 	orr.w	r2, r2, #1
 800595a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800595c:	2300      	movs	r3, #0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3714      	adds	r7, #20
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr
 800596a:	bf00      	nop
 800596c:	40010000 	.word	0x40010000
 8005970:	40000400 	.word	0x40000400
 8005974:	40000800 	.word	0x40000800
 8005978:	40000c00 	.word	0x40000c00
 800597c:	40010400 	.word	0x40010400
 8005980:	40014000 	.word	0x40014000
 8005984:	40001800 	.word	0x40001800

08005988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d020      	beq.n	80059ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f003 0302 	and.w	r3, r3, #2
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d01b      	beq.n	80059ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f06f 0202 	mvn.w	r2, #2
 80059bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	f003 0303 	and.w	r3, r3, #3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d003      	beq.n	80059da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8d2 	bl	8005b7c <HAL_TIM_IC_CaptureCallback>
 80059d8:	e005      	b.n	80059e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f000 f8c4 	bl	8005b68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f8d5 	bl	8005b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d020      	beq.n	8005a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d01b      	beq.n	8005a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f06f 0204 	mvn.w	r2, #4
 8005a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2202      	movs	r2, #2
 8005a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f000 f8ac 	bl	8005b7c <HAL_TIM_IC_CaptureCallback>
 8005a24:	e005      	b.n	8005a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f89e 	bl	8005b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f8af 	bl	8005b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d020      	beq.n	8005a84 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f003 0308 	and.w	r3, r3, #8
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d01b      	beq.n	8005a84 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f06f 0208 	mvn.w	r2, #8
 8005a54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2204      	movs	r2, #4
 8005a5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	69db      	ldr	r3, [r3, #28]
 8005a62:	f003 0303 	and.w	r3, r3, #3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f886 	bl	8005b7c <HAL_TIM_IC_CaptureCallback>
 8005a70:	e005      	b.n	8005a7e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 f878 	bl	8005b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f889 	bl	8005b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 0310 	and.w	r3, r3, #16
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d020      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d01b      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0210 	mvn.w	r2, #16
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2208      	movs	r2, #8
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f860 	bl	8005b7c <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f852 	bl	8005b68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f863 	bl	8005b90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	f003 0301 	and.w	r3, r3, #1
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d007      	beq.n	8005af4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f06f 0201 	mvn.w	r2, #1
 8005aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7fb fc46 	bl	8001380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00c      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d007      	beq.n	8005b18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f906 	bl	8005d24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00c      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d007      	beq.n	8005b3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f834 	bl	8005ba4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d00c      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0220 	mvn.w	r2, #32
 8005b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f8d8 	bl	8005d10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b70:	bf00      	nop
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b84:	bf00      	nop
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	4a46      	ldr	r2, [pc, #280]	; (8005ce4 <TIM_Base_SetConfig+0x12c>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d013      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bd6:	d00f      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a43      	ldr	r2, [pc, #268]	; (8005ce8 <TIM_Base_SetConfig+0x130>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d00b      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a42      	ldr	r2, [pc, #264]	; (8005cec <TIM_Base_SetConfig+0x134>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d007      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a41      	ldr	r2, [pc, #260]	; (8005cf0 <TIM_Base_SetConfig+0x138>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d003      	beq.n	8005bf8 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a40      	ldr	r2, [pc, #256]	; (8005cf4 <TIM_Base_SetConfig+0x13c>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d108      	bne.n	8005c0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	4a35      	ldr	r2, [pc, #212]	; (8005ce4 <TIM_Base_SetConfig+0x12c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d02b      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c18:	d027      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	4a32      	ldr	r2, [pc, #200]	; (8005ce8 <TIM_Base_SetConfig+0x130>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d023      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a31      	ldr	r2, [pc, #196]	; (8005cec <TIM_Base_SetConfig+0x134>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d01f      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a30      	ldr	r2, [pc, #192]	; (8005cf0 <TIM_Base_SetConfig+0x138>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d01b      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2f      	ldr	r2, [pc, #188]	; (8005cf4 <TIM_Base_SetConfig+0x13c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d017      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2e      	ldr	r2, [pc, #184]	; (8005cf8 <TIM_Base_SetConfig+0x140>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d013      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a2d      	ldr	r2, [pc, #180]	; (8005cfc <TIM_Base_SetConfig+0x144>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d00f      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a2c      	ldr	r2, [pc, #176]	; (8005d00 <TIM_Base_SetConfig+0x148>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d00b      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a2b      	ldr	r2, [pc, #172]	; (8005d04 <TIM_Base_SetConfig+0x14c>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d007      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a2a      	ldr	r2, [pc, #168]	; (8005d08 <TIM_Base_SetConfig+0x150>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d003      	beq.n	8005c6a <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a29      	ldr	r2, [pc, #164]	; (8005d0c <TIM_Base_SetConfig+0x154>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d108      	bne.n	8005c7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a10      	ldr	r2, [pc, #64]	; (8005ce4 <TIM_Base_SetConfig+0x12c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_Base_SetConfig+0xf8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a12      	ldr	r2, [pc, #72]	; (8005cf4 <TIM_Base_SetConfig+0x13c>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d103      	bne.n	8005cb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	691a      	ldr	r2, [r3, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d105      	bne.n	8005cd6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f023 0201 	bic.w	r2, r3, #1
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	611a      	str	r2, [r3, #16]
  }
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	40010400 	.word	0x40010400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800
 8005d04:	40001800 	.word	0x40001800
 8005d08:	40001c00 	.word	0x40001c00
 8005d0c:	40002000 	.word	0x40002000

08005d10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e042      	b.n	8005dd0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7fb ff0e 	bl	8001b80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2224      	movs	r2, #36	; 0x24
 8005d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68da      	ldr	r2, [r3, #12]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f82b 	bl	8005dd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691a      	ldr	r2, [r3, #16]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	695a      	ldr	r2, [r3, #20]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005da0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68da      	ldr	r2, [r3, #12]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005db0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2220      	movs	r2, #32
 8005dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ddc:	b0c0      	sub	sp, #256	; 0x100
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df4:	68d9      	ldr	r1, [r3, #12]
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	ea40 0301 	orr.w	r3, r0, r1
 8005e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e30:	f021 010c 	bic.w	r1, r1, #12
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e52:	6999      	ldr	r1, [r3, #24]
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	ea40 0301 	orr.w	r3, r0, r1
 8005e5e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	4b8f      	ldr	r3, [pc, #572]	; (80060a4 <UART_SetConfig+0x2cc>)
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d005      	beq.n	8005e78 <UART_SetConfig+0xa0>
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	4b8d      	ldr	r3, [pc, #564]	; (80060a8 <UART_SetConfig+0x2d0>)
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d104      	bne.n	8005e82 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e78:	f7fe fea0 	bl	8004bbc <HAL_RCC_GetPCLK2Freq>
 8005e7c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e80:	e003      	b.n	8005e8a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e82:	f7fe fe87 	bl	8004b94 <HAL_RCC_GetPCLK1Freq>
 8005e86:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8e:	69db      	ldr	r3, [r3, #28]
 8005e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e94:	f040 810c 	bne.w	80060b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ea2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ea6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005eaa:	4622      	mov	r2, r4
 8005eac:	462b      	mov	r3, r5
 8005eae:	1891      	adds	r1, r2, r2
 8005eb0:	65b9      	str	r1, [r7, #88]	; 0x58
 8005eb2:	415b      	adcs	r3, r3
 8005eb4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005eb6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005eba:	4621      	mov	r1, r4
 8005ebc:	eb12 0801 	adds.w	r8, r2, r1
 8005ec0:	4629      	mov	r1, r5
 8005ec2:	eb43 0901 	adc.w	r9, r3, r1
 8005ec6:	f04f 0200 	mov.w	r2, #0
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ed2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ed6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005eda:	4690      	mov	r8, r2
 8005edc:	4699      	mov	r9, r3
 8005ede:	4623      	mov	r3, r4
 8005ee0:	eb18 0303 	adds.w	r3, r8, r3
 8005ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005ee8:	462b      	mov	r3, r5
 8005eea:	eb49 0303 	adc.w	r3, r9, r3
 8005eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005efe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f06:	460b      	mov	r3, r1
 8005f08:	18db      	adds	r3, r3, r3
 8005f0a:	653b      	str	r3, [r7, #80]	; 0x50
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	eb42 0303 	adc.w	r3, r2, r3
 8005f12:	657b      	str	r3, [r7, #84]	; 0x54
 8005f14:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f18:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f1c:	f7fa f9b0 	bl	8000280 <__aeabi_uldivmod>
 8005f20:	4602      	mov	r2, r0
 8005f22:	460b      	mov	r3, r1
 8005f24:	4b61      	ldr	r3, [pc, #388]	; (80060ac <UART_SetConfig+0x2d4>)
 8005f26:	fba3 2302 	umull	r2, r3, r3, r2
 8005f2a:	095b      	lsrs	r3, r3, #5
 8005f2c:	011c      	lsls	r4, r3, #4
 8005f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f32:	2200      	movs	r2, #0
 8005f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f38:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f3c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f40:	4642      	mov	r2, r8
 8005f42:	464b      	mov	r3, r9
 8005f44:	1891      	adds	r1, r2, r2
 8005f46:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f48:	415b      	adcs	r3, r3
 8005f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f4c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f50:	4641      	mov	r1, r8
 8005f52:	eb12 0a01 	adds.w	sl, r2, r1
 8005f56:	4649      	mov	r1, r9
 8005f58:	eb43 0b01 	adc.w	fp, r3, r1
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f68:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f6c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f70:	4692      	mov	sl, r2
 8005f72:	469b      	mov	fp, r3
 8005f74:	4643      	mov	r3, r8
 8005f76:	eb1a 0303 	adds.w	r3, sl, r3
 8005f7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f7e:	464b      	mov	r3, r9
 8005f80:	eb4b 0303 	adc.w	r3, fp, r3
 8005f84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f94:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f98:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	18db      	adds	r3, r3, r3
 8005fa0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	eb42 0303 	adc.w	r3, r2, r3
 8005fa8:	647b      	str	r3, [r7, #68]	; 0x44
 8005faa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005fae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005fb2:	f7fa f965 	bl	8000280 <__aeabi_uldivmod>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4611      	mov	r1, r2
 8005fbc:	4b3b      	ldr	r3, [pc, #236]	; (80060ac <UART_SetConfig+0x2d4>)
 8005fbe:	fba3 2301 	umull	r2, r3, r3, r1
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	2264      	movs	r2, #100	; 0x64
 8005fc6:	fb02 f303 	mul.w	r3, r2, r3
 8005fca:	1acb      	subs	r3, r1, r3
 8005fcc:	00db      	lsls	r3, r3, #3
 8005fce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005fd2:	4b36      	ldr	r3, [pc, #216]	; (80060ac <UART_SetConfig+0x2d4>)
 8005fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8005fd8:	095b      	lsrs	r3, r3, #5
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005fe0:	441c      	add	r4, r3
 8005fe2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ff0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	464b      	mov	r3, r9
 8005ff8:	1891      	adds	r1, r2, r2
 8005ffa:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ffc:	415b      	adcs	r3, r3
 8005ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006000:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006004:	4641      	mov	r1, r8
 8006006:	1851      	adds	r1, r2, r1
 8006008:	6339      	str	r1, [r7, #48]	; 0x30
 800600a:	4649      	mov	r1, r9
 800600c:	414b      	adcs	r3, r1
 800600e:	637b      	str	r3, [r7, #52]	; 0x34
 8006010:	f04f 0200 	mov.w	r2, #0
 8006014:	f04f 0300 	mov.w	r3, #0
 8006018:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800601c:	4659      	mov	r1, fp
 800601e:	00cb      	lsls	r3, r1, #3
 8006020:	4651      	mov	r1, sl
 8006022:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006026:	4651      	mov	r1, sl
 8006028:	00ca      	lsls	r2, r1, #3
 800602a:	4610      	mov	r0, r2
 800602c:	4619      	mov	r1, r3
 800602e:	4603      	mov	r3, r0
 8006030:	4642      	mov	r2, r8
 8006032:	189b      	adds	r3, r3, r2
 8006034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006038:	464b      	mov	r3, r9
 800603a:	460a      	mov	r2, r1
 800603c:	eb42 0303 	adc.w	r3, r2, r3
 8006040:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006050:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006054:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006058:	460b      	mov	r3, r1
 800605a:	18db      	adds	r3, r3, r3
 800605c:	62bb      	str	r3, [r7, #40]	; 0x28
 800605e:	4613      	mov	r3, r2
 8006060:	eb42 0303 	adc.w	r3, r2, r3
 8006064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006066:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800606a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800606e:	f7fa f907 	bl	8000280 <__aeabi_uldivmod>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <UART_SetConfig+0x2d4>)
 8006078:	fba3 1302 	umull	r1, r3, r3, r2
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	2164      	movs	r1, #100	; 0x64
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	3332      	adds	r3, #50	; 0x32
 800608a:	4a08      	ldr	r2, [pc, #32]	; (80060ac <UART_SetConfig+0x2d4>)
 800608c:	fba2 2303 	umull	r2, r3, r2, r3
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	f003 0207 	and.w	r2, r3, #7
 8006096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4422      	add	r2, r4
 800609e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060a0:	e106      	b.n	80062b0 <UART_SetConfig+0x4d8>
 80060a2:	bf00      	nop
 80060a4:	40011000 	.word	0x40011000
 80060a8:	40011400 	.word	0x40011400
 80060ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060b4:	2200      	movs	r2, #0
 80060b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80060be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80060c2:	4642      	mov	r2, r8
 80060c4:	464b      	mov	r3, r9
 80060c6:	1891      	adds	r1, r2, r2
 80060c8:	6239      	str	r1, [r7, #32]
 80060ca:	415b      	adcs	r3, r3
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
 80060ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060d2:	4641      	mov	r1, r8
 80060d4:	1854      	adds	r4, r2, r1
 80060d6:	4649      	mov	r1, r9
 80060d8:	eb43 0501 	adc.w	r5, r3, r1
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	00eb      	lsls	r3, r5, #3
 80060e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ea:	00e2      	lsls	r2, r4, #3
 80060ec:	4614      	mov	r4, r2
 80060ee:	461d      	mov	r5, r3
 80060f0:	4643      	mov	r3, r8
 80060f2:	18e3      	adds	r3, r4, r3
 80060f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060f8:	464b      	mov	r3, r9
 80060fa:	eb45 0303 	adc.w	r3, r5, r3
 80060fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800610e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006112:	f04f 0200 	mov.w	r2, #0
 8006116:	f04f 0300 	mov.w	r3, #0
 800611a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800611e:	4629      	mov	r1, r5
 8006120:	008b      	lsls	r3, r1, #2
 8006122:	4621      	mov	r1, r4
 8006124:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006128:	4621      	mov	r1, r4
 800612a:	008a      	lsls	r2, r1, #2
 800612c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006130:	f7fa f8a6 	bl	8000280 <__aeabi_uldivmod>
 8006134:	4602      	mov	r2, r0
 8006136:	460b      	mov	r3, r1
 8006138:	4b60      	ldr	r3, [pc, #384]	; (80062bc <UART_SetConfig+0x4e4>)
 800613a:	fba3 2302 	umull	r2, r3, r3, r2
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	011c      	lsls	r4, r3, #4
 8006142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006146:	2200      	movs	r2, #0
 8006148:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800614c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006150:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006154:	4642      	mov	r2, r8
 8006156:	464b      	mov	r3, r9
 8006158:	1891      	adds	r1, r2, r2
 800615a:	61b9      	str	r1, [r7, #24]
 800615c:	415b      	adcs	r3, r3
 800615e:	61fb      	str	r3, [r7, #28]
 8006160:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006164:	4641      	mov	r1, r8
 8006166:	1851      	adds	r1, r2, r1
 8006168:	6139      	str	r1, [r7, #16]
 800616a:	4649      	mov	r1, r9
 800616c:	414b      	adcs	r3, r1
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800617c:	4659      	mov	r1, fp
 800617e:	00cb      	lsls	r3, r1, #3
 8006180:	4651      	mov	r1, sl
 8006182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006186:	4651      	mov	r1, sl
 8006188:	00ca      	lsls	r2, r1, #3
 800618a:	4610      	mov	r0, r2
 800618c:	4619      	mov	r1, r3
 800618e:	4603      	mov	r3, r0
 8006190:	4642      	mov	r2, r8
 8006192:	189b      	adds	r3, r3, r2
 8006194:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006198:	464b      	mov	r3, r9
 800619a:	460a      	mov	r2, r1
 800619c:	eb42 0303 	adc.w	r3, r2, r3
 80061a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	67bb      	str	r3, [r7, #120]	; 0x78
 80061ae:	67fa      	str	r2, [r7, #124]	; 0x7c
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	f04f 0300 	mov.w	r3, #0
 80061b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80061bc:	4649      	mov	r1, r9
 80061be:	008b      	lsls	r3, r1, #2
 80061c0:	4641      	mov	r1, r8
 80061c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061c6:	4641      	mov	r1, r8
 80061c8:	008a      	lsls	r2, r1, #2
 80061ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80061ce:	f7fa f857 	bl	8000280 <__aeabi_uldivmod>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4611      	mov	r1, r2
 80061d8:	4b38      	ldr	r3, [pc, #224]	; (80062bc <UART_SetConfig+0x4e4>)
 80061da:	fba3 2301 	umull	r2, r3, r3, r1
 80061de:	095b      	lsrs	r3, r3, #5
 80061e0:	2264      	movs	r2, #100	; 0x64
 80061e2:	fb02 f303 	mul.w	r3, r2, r3
 80061e6:	1acb      	subs	r3, r1, r3
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	3332      	adds	r3, #50	; 0x32
 80061ec:	4a33      	ldr	r2, [pc, #204]	; (80062bc <UART_SetConfig+0x4e4>)
 80061ee:	fba2 2303 	umull	r2, r3, r2, r3
 80061f2:	095b      	lsrs	r3, r3, #5
 80061f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061f8:	441c      	add	r4, r3
 80061fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061fe:	2200      	movs	r2, #0
 8006200:	673b      	str	r3, [r7, #112]	; 0x70
 8006202:	677a      	str	r2, [r7, #116]	; 0x74
 8006204:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006208:	4642      	mov	r2, r8
 800620a:	464b      	mov	r3, r9
 800620c:	1891      	adds	r1, r2, r2
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	415b      	adcs	r3, r3
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006218:	4641      	mov	r1, r8
 800621a:	1851      	adds	r1, r2, r1
 800621c:	6039      	str	r1, [r7, #0]
 800621e:	4649      	mov	r1, r9
 8006220:	414b      	adcs	r3, r1
 8006222:	607b      	str	r3, [r7, #4]
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006230:	4659      	mov	r1, fp
 8006232:	00cb      	lsls	r3, r1, #3
 8006234:	4651      	mov	r1, sl
 8006236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800623a:	4651      	mov	r1, sl
 800623c:	00ca      	lsls	r2, r1, #3
 800623e:	4610      	mov	r0, r2
 8006240:	4619      	mov	r1, r3
 8006242:	4603      	mov	r3, r0
 8006244:	4642      	mov	r2, r8
 8006246:	189b      	adds	r3, r3, r2
 8006248:	66bb      	str	r3, [r7, #104]	; 0x68
 800624a:	464b      	mov	r3, r9
 800624c:	460a      	mov	r2, r1
 800624e:	eb42 0303 	adc.w	r3, r2, r3
 8006252:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	663b      	str	r3, [r7, #96]	; 0x60
 800625e:	667a      	str	r2, [r7, #100]	; 0x64
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800626c:	4649      	mov	r1, r9
 800626e:	008b      	lsls	r3, r1, #2
 8006270:	4641      	mov	r1, r8
 8006272:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006276:	4641      	mov	r1, r8
 8006278:	008a      	lsls	r2, r1, #2
 800627a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800627e:	f7f9 ffff 	bl	8000280 <__aeabi_uldivmod>
 8006282:	4602      	mov	r2, r0
 8006284:	460b      	mov	r3, r1
 8006286:	4b0d      	ldr	r3, [pc, #52]	; (80062bc <UART_SetConfig+0x4e4>)
 8006288:	fba3 1302 	umull	r1, r3, r3, r2
 800628c:	095b      	lsrs	r3, r3, #5
 800628e:	2164      	movs	r1, #100	; 0x64
 8006290:	fb01 f303 	mul.w	r3, r1, r3
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	3332      	adds	r3, #50	; 0x32
 800629a:	4a08      	ldr	r2, [pc, #32]	; (80062bc <UART_SetConfig+0x4e4>)
 800629c:	fba2 2303 	umull	r2, r3, r2, r3
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	f003 020f 	and.w	r2, r3, #15
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4422      	add	r2, r4
 80062ae:	609a      	str	r2, [r3, #8]
}
 80062b0:	bf00      	nop
 80062b2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80062b6:	46bd      	mov	sp, r7
 80062b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062bc:	51eb851f 	.word	0x51eb851f

080062c0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80062c0:	b5b0      	push	{r4, r5, r7, lr}
 80062c2:	b08c      	sub	sp, #48	; 0x30
 80062c4:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80062c6:	2100      	movs	r1, #0
 80062c8:	2000      	movs	r0, #0
 80062ca:	f00c fae9 	bl	80128a0 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80062ce:	4b1a      	ldr	r3, [pc, #104]	; (8006338 <MX_LWIP_Init+0x78>)
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80062d4:	4b19      	ldr	r3, [pc, #100]	; (800633c <MX_LWIP_Init+0x7c>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80062da:	4b19      	ldr	r3, [pc, #100]	; (8006340 <MX_LWIP_Init+0x80>)
 80062dc:	2200      	movs	r2, #0
 80062de:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80062e0:	4b18      	ldr	r3, [pc, #96]	; (8006344 <MX_LWIP_Init+0x84>)
 80062e2:	9302      	str	r3, [sp, #8]
 80062e4:	4b18      	ldr	r3, [pc, #96]	; (8006348 <MX_LWIP_Init+0x88>)
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	2300      	movs	r3, #0
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	4b14      	ldr	r3, [pc, #80]	; (8006340 <MX_LWIP_Init+0x80>)
 80062ee:	4a13      	ldr	r2, [pc, #76]	; (800633c <MX_LWIP_Init+0x7c>)
 80062f0:	4911      	ldr	r1, [pc, #68]	; (8006338 <MX_LWIP_Init+0x78>)
 80062f2:	4816      	ldr	r0, [pc, #88]	; (800634c <MX_LWIP_Init+0x8c>)
 80062f4:	f00d f89e 	bl	8013434 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80062f8:	4814      	ldr	r0, [pc, #80]	; (800634c <MX_LWIP_Init+0x8c>)
 80062fa:	f00d fa55 	bl	80137a8 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80062fe:	4813      	ldr	r0, [pc, #76]	; (800634c <MX_LWIP_Init+0x8c>)
 8006300:	f00d fa62 	bl	80137c8 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006304:	4912      	ldr	r1, [pc, #72]	; (8006350 <MX_LWIP_Init+0x90>)
 8006306:	4811      	ldr	r0, [pc, #68]	; (800634c <MX_LWIP_Init+0x8c>)
 8006308:	f00d fb64 	bl	80139d4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, 2048);
 800630c:	4b11      	ldr	r3, [pc, #68]	; (8006354 <MX_LWIP_Init+0x94>)
 800630e:	1d3c      	adds	r4, r7, #4
 8006310:	461d      	mov	r5, r3
 8006312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006316:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800631a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800631e:	1d3b      	adds	r3, r7, #4
 8006320:	490a      	ldr	r1, [pc, #40]	; (800634c <MX_LWIP_Init+0x8c>)
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fd20 	bl	8006d68 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8006328:	4808      	ldr	r0, [pc, #32]	; (800634c <MX_LWIP_Init+0x8c>)
 800632a:	f015 fc55 	bl	801bbd8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800632e:	bf00      	nop
 8006330:	3720      	adds	r7, #32
 8006332:	46bd      	mov	sp, r7
 8006334:	bdb0      	pop	{r4, r5, r7, pc}
 8006336:	bf00      	nop
 8006338:	20000b44 	.word	0x20000b44
 800633c:	20000b48 	.word	0x20000b48
 8006340:	20000b4c 	.word	0x20000b4c
 8006344:	080127b1 	.word	0x080127b1
 8006348:	08006831 	.word	0x08006831
 800634c:	20000b0c 	.word	0x20000b0c
 8006350:	08006359 	.word	0x08006359
 8006354:	08022e8c 	.word	0x08022e8c

08006358 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8006374:	4b04      	ldr	r3, [pc, #16]	; (8006388 <HAL_ETH_RxCpltCallback+0x1c>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4618      	mov	r0, r3
 800637a:	f000 fe71 	bl	8007060 <osSemaphoreRelease>
}
 800637e:	bf00      	nop
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	2000561c 	.word	0x2000561c

0800638c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8006394:	4b04      	ldr	r3, [pc, #16]	; (80063a8 <HAL_ETH_TxCpltCallback+0x1c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4618      	mov	r0, r3
 800639a:	f000 fe61 	bl	8007060 <osSemaphoreRelease>
}
 800639e:	bf00      	nop
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20005620 	.word	0x20005620

080063ac <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7fc fd47 	bl	8002e48 <HAL_ETH_GetDMAError>
 80063ba:	4603      	mov	r3, r0
 80063bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c0:	2b80      	cmp	r3, #128	; 0x80
 80063c2:	d104      	bne.n	80063ce <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80063c4:	4b04      	ldr	r3, [pc, #16]	; (80063d8 <HAL_ETH_ErrorCallback+0x2c>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f000 fe49 	bl	8007060 <osSemaphoreRelease>
  }
}
 80063ce:	bf00      	nop
 80063d0:	3708      	adds	r7, #8
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	2000561c 	.word	0x2000561c

080063dc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80063dc:	b5b0      	push	{r4, r5, r7, lr}
 80063de:	b0ac      	sub	sp, #176	; 0xb0
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80063e4:	2300      	movs	r3, #0
 80063e6:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
  uint32_t duplex, speed = 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  int32_t PHYLinkState = 0;
 80063f0:	2300      	movs	r3, #0
 80063f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  ETH_MACConfigTypeDef MACConf = {0};
 80063f6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80063fa:	2264      	movs	r2, #100	; 0x64
 80063fc:	2100      	movs	r1, #0
 80063fe:	4618      	mov	r0, r3
 8006400:	f01b f9f0 	bl	80217e4 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006404:	4b90      	ldr	r3, [pc, #576]	; (8006648 <low_level_init+0x26c>)
 8006406:	4a91      	ldr	r2, [pc, #580]	; (800664c <low_level_init+0x270>)
 8006408:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0xAE;
 800640a:	23ae      	movs	r3, #174	; 0xae
 800640c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[1] = 0x04;
 8006410:	2304      	movs	r3, #4
 8006412:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  MACAddr[2] = 0x65;
 8006416:	2365      	movs	r3, #101	; 0x65
 8006418:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  MACAddr[3] = 0x11;
 800641c:	2311      	movs	r3, #17
 800641e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  MACAddr[4] = 0xC2;
 8006422:	23c2      	movs	r3, #194	; 0xc2
 8006424:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  MACAddr[5] = 0xD9;
 8006428:	23d9      	movs	r3, #217	; 0xd9
 800642a:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  heth.Init.MACAddr = &MACAddr[0];
 800642e:	4a86      	ldr	r2, [pc, #536]	; (8006648 <low_level_init+0x26c>)
 8006430:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006434:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8006436:	4b84      	ldr	r3, [pc, #528]	; (8006648 <low_level_init+0x26c>)
 8006438:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800643c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800643e:	4b82      	ldr	r3, [pc, #520]	; (8006648 <low_level_init+0x26c>)
 8006440:	4a83      	ldr	r2, [pc, #524]	; (8006650 <low_level_init+0x274>)
 8006442:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006444:	4b80      	ldr	r3, [pc, #512]	; (8006648 <low_level_init+0x26c>)
 8006446:	4a83      	ldr	r2, [pc, #524]	; (8006654 <low_level_init+0x278>)
 8006448:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800644a:	4b7f      	ldr	r3, [pc, #508]	; (8006648 <low_level_init+0x26c>)
 800644c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006450:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006452:	487d      	ldr	r0, [pc, #500]	; (8006648 <low_level_init+0x26c>)
 8006454:	f7fb feae 	bl	80021b4 <HAL_ETH_Init>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800645e:	2238      	movs	r2, #56	; 0x38
 8006460:	2100      	movs	r1, #0
 8006462:	487d      	ldr	r0, [pc, #500]	; (8006658 <low_level_init+0x27c>)
 8006464:	f01b f9be 	bl	80217e4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006468:	4b7b      	ldr	r3, [pc, #492]	; (8006658 <low_level_init+0x27c>)
 800646a:	2221      	movs	r2, #33	; 0x21
 800646c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800646e:	4b7a      	ldr	r3, [pc, #488]	; (8006658 <low_level_init+0x27c>)
 8006470:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8006474:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8006476:	4b78      	ldr	r3, [pc, #480]	; (8006658 <low_level_init+0x27c>)
 8006478:	2200      	movs	r2, #0
 800647a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800647c:	4877      	ldr	r0, [pc, #476]	; (800665c <low_level_init+0x280>)
 800647e:	f00c fe93 	bl	80131a8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2206      	movs	r2, #6
 8006486:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800648a:	4b6f      	ldr	r3, [pc, #444]	; (8006648 <low_level_init+0x26c>)
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	781a      	ldrb	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006496:	4b6c      	ldr	r3, [pc, #432]	; (8006648 <low_level_init+0x26c>)
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	785a      	ldrb	r2, [r3, #1]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80064a2:	4b69      	ldr	r3, [pc, #420]	; (8006648 <low_level_init+0x26c>)
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	789a      	ldrb	r2, [r3, #2]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80064ae:	4b66      	ldr	r3, [pc, #408]	; (8006648 <low_level_init+0x26c>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	78da      	ldrb	r2, [r3, #3]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80064ba:	4b63      	ldr	r3, [pc, #396]	; (8006648 <low_level_init+0x26c>)
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	791a      	ldrb	r2, [r3, #4]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80064c6:	4b60      	ldr	r3, [pc, #384]	; (8006648 <low_level_init+0x26c>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	795a      	ldrb	r2, [r3, #5]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80064d8:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80064e0:	f043 030a 	orr.w	r3, r3, #10
 80064e4:	b2da      	uxtb	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 80064ec:	2300      	movs	r3, #0
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064f0:	2300      	movs	r3, #0
 80064f2:	633b      	str	r3, [r7, #48]	; 0x30
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 80064f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064f8:	2101      	movs	r1, #1
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fd30 	bl	8006f60 <osSemaphoreCreate>
 8006500:	4603      	mov	r3, r0
 8006502:	4a57      	ldr	r2, [pc, #348]	; (8006660 <low_level_init+0x284>)
 8006504:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 8006506:	2300      	movs	r3, #0
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
 800650a:	2300      	movs	r3, #0
 800650c:	62bb      	str	r3, [r7, #40]	; 0x28
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800650e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006512:	2101      	movs	r1, #1
 8006514:	4618      	mov	r0, r3
 8006516:	f000 fd23 	bl	8006f60 <osSemaphoreCreate>
 800651a:	4603      	mov	r3, r0
 800651c:	4a51      	ldr	r2, [pc, #324]	; (8006664 <low_level_init+0x288>)
 800651e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 8006520:	4b4f      	ldr	r3, [pc, #316]	; (8006660 <low_level_init+0x284>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2100      	movs	r1, #0
 8006526:	4618      	mov	r0, r3
 8006528:	f000 fd4c 	bl	8006fc4 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800652c:	4b4d      	ldr	r3, [pc, #308]	; (8006664 <low_level_init+0x288>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f000 fd46 	bl	8006fc4 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8006538:	4b4b      	ldr	r3, [pc, #300]	; (8006668 <low_level_init+0x28c>)
 800653a:	f107 0408 	add.w	r4, r7, #8
 800653e:	461d      	mov	r5, r3
 8006540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006548:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800654c:	f107 0308 	add.w	r3, r7, #8
 8006550:	6879      	ldr	r1, [r7, #4]
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fc08 	bl	8006d68 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8006558:	4944      	ldr	r1, [pc, #272]	; (800666c <low_level_init+0x290>)
 800655a:	4845      	ldr	r0, [pc, #276]	; (8006670 <low_level_init+0x294>)
 800655c:	f7fb fb81 	bl	8001c62 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 8006560:	4843      	ldr	r0, [pc, #268]	; (8006670 <low_level_init+0x294>)
 8006562:	f7fb fbb0 	bl	8001cc6 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8006566:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800656a:	2b00      	cmp	r3, #0
 800656c:	d165      	bne.n	800663a <low_level_init+0x25e>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 800656e:	4840      	ldr	r0, [pc, #256]	; (8006670 <low_level_init+0x294>)
 8006570:	f7fb fc51 	bl	8001e16 <DP83848_GetLinkState>
 8006574:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 8006578:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800657c:	2b01      	cmp	r3, #1
 800657e:	dc06      	bgt.n	800658e <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f00d f9f7 	bl	8013974 <netif_set_link_down>
      netif_set_down(netif);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f00d f98a 	bl	80138a0 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800658c:	e057      	b.n	800663e <low_level_init+0x262>
      switch (PHYLinkState)
 800658e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006592:	3b02      	subs	r3, #2
 8006594:	2b03      	cmp	r3, #3
 8006596:	d82b      	bhi.n	80065f0 <low_level_init+0x214>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <low_level_init+0x1c4>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	080065b1 	.word	0x080065b1
 80065a4:	080065c3 	.word	0x080065c3
 80065a8:	080065d3 	.word	0x080065d3
 80065ac:	080065e3 	.word	0x080065e3
        duplex = ETH_FULLDUPLEX_MODE;
 80065b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80065b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80065c0:	e01f      	b.n	8006602 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 80065c2:	2300      	movs	r3, #0
 80065c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80065c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80065d0:	e017      	b.n	8006602 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 80065d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 80065da:	2300      	movs	r3, #0
 80065dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80065e0:	e00f      	b.n	8006602 <low_level_init+0x226>
        duplex = ETH_HALFDUPLEX_MODE;
 80065e2:	2300      	movs	r3, #0
 80065e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_10M;
 80065e8:	2300      	movs	r3, #0
 80065ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 80065ee:	e008      	b.n	8006602 <low_level_init+0x226>
        duplex = ETH_FULLDUPLEX_MODE;
 80065f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80065f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
        speed = ETH_SPEED_100M;
 80065f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80065fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        break;
 8006600:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006602:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006606:	4619      	mov	r1, r3
 8006608:	480f      	ldr	r0, [pc, #60]	; (8006648 <low_level_init+0x26c>)
 800660a:	f7fc fac3 	bl	8002b94 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800660e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006612:	657b      	str	r3, [r7, #84]	; 0x54
    MACConf.Speed = speed;
 8006614:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006618:	653b      	str	r3, [r7, #80]	; 0x50
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800661a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800661e:	4619      	mov	r1, r3
 8006620:	4809      	ldr	r0, [pc, #36]	; (8006648 <low_level_init+0x26c>)
 8006622:	f7fc fba1 	bl	8002d68 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8006626:	4808      	ldr	r0, [pc, #32]	; (8006648 <low_level_init+0x26c>)
 8006628:	f7fb fe42 	bl	80022b0 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f00d f8cb 	bl	80137c8 <netif_set_up>
    netif_set_link_up(netif);
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f00d f966 	bl	8013904 <netif_set_link_up>
}
 8006638:	e001      	b.n	800663e <low_level_init+0x262>
    Error_Handler();
 800663a:	f7fa feb3 	bl	80013a4 <Error_Handler>
}
 800663e:	bf00      	nop
 8006640:	37b0      	adds	r7, #176	; 0xb0
 8006642:	46bd      	mov	sp, r7
 8006644:	bdb0      	pop	{r4, r5, r7, pc}
 8006646:	bf00      	nop
 8006648:	20005624 	.word	0x20005624
 800664c:	40028000 	.word	0x40028000
 8006650:	2000557c 	.word	0x2000557c
 8006654:	200054dc 	.word	0x200054dc
 8006658:	200056d4 	.word	0x200056d4
 800665c:	08026e28 	.word	0x08026e28
 8006660:	2000561c 	.word	0x2000561c
 8006664:	20005620 	.word	0x20005620
 8006668:	08022eb0 	.word	0x08022eb0
 800666c:	2000000c 	.word	0x2000000c
 8006670:	2000570c 	.word	0x2000570c

08006674 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b092      	sub	sp, #72	; 0x48
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800667e:	2300      	movs	r3, #0
 8006680:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8006686:	2300      	movs	r3, #0
 8006688:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800668c:	f107 030c 	add.w	r3, r7, #12
 8006690:	2230      	movs	r2, #48	; 0x30
 8006692:	2100      	movs	r1, #0
 8006694:	4618      	mov	r0, r3
 8006696:	f01b f8a5 	bl	80217e4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800669a:	f107 030c 	add.w	r3, r7, #12
 800669e:	2230      	movs	r2, #48	; 0x30
 80066a0:	2100      	movs	r1, #0
 80066a2:	4618      	mov	r0, r3
 80066a4:	f01b f89e 	bl	80217e4 <memset>

  for(q = p; q != NULL; q = q->next)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	643b      	str	r3, [r7, #64]	; 0x40
 80066ac:	e045      	b.n	800673a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80066ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066b0:	2b03      	cmp	r3, #3
 80066b2:	d902      	bls.n	80066ba <low_level_output+0x46>
      return ERR_IF;
 80066b4:	f06f 030b 	mvn.w	r3, #11
 80066b8:	e06c      	b.n	8006794 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 80066ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066bc:	6859      	ldr	r1, [r3, #4]
 80066be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066c0:	4613      	mov	r3, r2
 80066c2:	005b      	lsls	r3, r3, #1
 80066c4:	4413      	add	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	3348      	adds	r3, #72	; 0x48
 80066ca:	443b      	add	r3, r7
 80066cc:	3b3c      	subs	r3, #60	; 0x3c
 80066ce:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80066d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d2:	895b      	ldrh	r3, [r3, #10]
 80066d4:	4619      	mov	r1, r3
 80066d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066d8:	4613      	mov	r3, r2
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	4413      	add	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	3348      	adds	r3, #72	; 0x48
 80066e2:	443b      	add	r3, r7
 80066e4:	3b38      	subs	r3, #56	; 0x38
 80066e6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80066e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d011      	beq.n	8006712 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80066ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066f0:	1e5a      	subs	r2, r3, #1
 80066f2:	f107 000c 	add.w	r0, r7, #12
 80066f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80066f8:	460b      	mov	r3, r1
 80066fa:	005b      	lsls	r3, r3, #1
 80066fc:	440b      	add	r3, r1
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	18c1      	adds	r1, r0, r3
 8006702:	4613      	mov	r3, r2
 8006704:	005b      	lsls	r3, r3, #1
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	3348      	adds	r3, #72	; 0x48
 800670c:	443b      	add	r3, r7
 800670e:	3b34      	subs	r3, #52	; 0x34
 8006710:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8006712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d109      	bne.n	800672e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800671a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800671c:	4613      	mov	r3, r2
 800671e:	005b      	lsls	r3, r3, #1
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	3348      	adds	r3, #72	; 0x48
 8006726:	443b      	add	r3, r7
 8006728:	3b34      	subs	r3, #52	; 0x34
 800672a:	2200      	movs	r2, #0
 800672c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800672e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006730:	3301      	adds	r3, #1
 8006732:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8006734:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	643b      	str	r3, [r7, #64]	; 0x40
 800673a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800673c:	2b00      	cmp	r3, #0
 800673e:	d1b6      	bne.n	80066ae <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	891b      	ldrh	r3, [r3, #8]
 8006744:	461a      	mov	r2, r3
 8006746:	4b15      	ldr	r3, [pc, #84]	; (800679c <low_level_output+0x128>)
 8006748:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800674a:	4a14      	ldr	r2, [pc, #80]	; (800679c <low_level_output+0x128>)
 800674c:	f107 030c 	add.w	r3, r7, #12
 8006750:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8006752:	4a12      	ldr	r2, [pc, #72]	; (800679c <low_level_output+0x128>)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8006758:	6838      	ldr	r0, [r7, #0]
 800675a:	f00d fd8f 	bl	801427c <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800675e:	490f      	ldr	r1, [pc, #60]	; (800679c <low_level_output+0x128>)
 8006760:	480f      	ldr	r0, [pc, #60]	; (80067a0 <low_level_output+0x12c>)
 8006762:	f7fb feb2 	bl	80024ca <HAL_ETH_Transmit_IT>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10e      	bne.n	800678a <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800676c:	bf00      	nop
 800676e:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <low_level_output+0x130>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006776:	4618      	mov	r0, r3
 8006778:	f000 fc24 	bl	8006fc4 <osSemaphoreWait>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1f5      	bne.n	800676e <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 8006782:	4807      	ldr	r0, [pc, #28]	; (80067a0 <low_level_output+0x12c>)
 8006784:	f7fc f840 	bl	8002808 <HAL_ETH_ReleaseTxPacket>
 8006788:	e002      	b.n	8006790 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800678a:	6838      	ldr	r0, [r7, #0]
 800678c:	f00d fcd0 	bl	8014130 <pbuf_free>
  }

  return errval;
 8006790:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006794:	4618      	mov	r0, r3
 8006796:	3748      	adds	r7, #72	; 0x48
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	200056d4 	.word	0x200056d4
 80067a0:	20005624 	.word	0x20005624
 80067a4:	20005620 	.word	0x20005620

080067a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80067b4:	4b07      	ldr	r3, [pc, #28]	; (80067d4 <low_level_input+0x2c>)
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d105      	bne.n	80067c8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80067bc:	f107 030c 	add.w	r3, r7, #12
 80067c0:	4619      	mov	r1, r3
 80067c2:	4805      	ldr	r0, [pc, #20]	; (80067d8 <low_level_input+0x30>)
 80067c4:	f7fb fedd 	bl	8002582 <HAL_ETH_ReadData>
  }

  return p;
 80067c8:	68fb      	ldr	r3, [r7, #12]
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	200054d8 	.word	0x200054d8
 80067d8:	20005624 	.word	0x20005624

080067dc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80067ec:	4b0f      	ldr	r3, [pc, #60]	; (800682c <ethernetif_input+0x50>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 fbe5 	bl	8006fc4 <osSemaphoreWait>
 80067fa:	4603      	mov	r3, r0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1f5      	bne.n	80067ec <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8006800:	68b8      	ldr	r0, [r7, #8]
 8006802:	f7ff ffd1 	bl	80067a8 <low_level_input>
 8006806:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	68b9      	ldr	r1, [r7, #8]
 8006814:	68f8      	ldr	r0, [r7, #12]
 8006816:	4798      	blx	r3
 8006818:	4603      	mov	r3, r0
 800681a:	2b00      	cmp	r3, #0
 800681c:	d002      	beq.n	8006824 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f00d fc86 	bl	8014130 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1ea      	bne.n	8006800 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800682a:	e7df      	b.n	80067ec <ethernetif_input+0x10>
 800682c:	2000561c 	.word	0x2000561c

08006830 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b082      	sub	sp, #8
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d106      	bne.n	800684c <ethernetif_init+0x1c>
 800683e:	4b0e      	ldr	r3, [pc, #56]	; (8006878 <ethernetif_init+0x48>)
 8006840:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8006844:	490d      	ldr	r1, [pc, #52]	; (800687c <ethernetif_init+0x4c>)
 8006846:	480e      	ldr	r0, [pc, #56]	; (8006880 <ethernetif_init+0x50>)
 8006848:	f01a fdb6 	bl	80213b8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2273      	movs	r2, #115	; 0x73
 8006850:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2274      	movs	r2, #116	; 0x74
 8006858:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a09      	ldr	r2, [pc, #36]	; (8006884 <ethernetif_init+0x54>)
 8006860:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4a08      	ldr	r2, [pc, #32]	; (8006888 <ethernetif_init+0x58>)
 8006866:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f7ff fdb7 	bl	80063dc <low_level_init>

  return ERR_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3708      	adds	r7, #8
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	08022ecc 	.word	0x08022ecc
 800687c:	08022ee8 	.word	0x08022ee8
 8006880:	08022ef8 	.word	0x08022ef8
 8006884:	0801daa5 	.word	0x0801daa5
 8006888:	08006675 	.word	0x08006675

0800688c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8006898:	68f9      	ldr	r1, [r7, #12]
 800689a:	4809      	ldr	r0, [pc, #36]	; (80068c0 <pbuf_free_custom+0x34>)
 800689c:	f00c fd74 	bl	8013388 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80068a0:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <pbuf_free_custom+0x38>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d107      	bne.n	80068b8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <pbuf_free_custom+0x38>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80068ae:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <pbuf_free_custom+0x3c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fbd4 	bl	8007060 <osSemaphoreRelease>
  }
}
 80068b8:	bf00      	nop
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	08026e28 	.word	0x08026e28
 80068c4:	200054d8 	.word	0x200054d8
 80068c8:	2000561c 	.word	0x2000561c

080068cc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80068d0:	f7fb fb5e 	bl	8001f90 <HAL_GetTick>
 80068d4:	4603      	mov	r3, r0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08e      	sub	sp, #56	; 0x38
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068e8:	2200      	movs	r2, #0
 80068ea:	601a      	str	r2, [r3, #0]
 80068ec:	605a      	str	r2, [r3, #4]
 80068ee:	609a      	str	r2, [r3, #8]
 80068f0:	60da      	str	r2, [r3, #12]
 80068f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a4a      	ldr	r2, [pc, #296]	; (8006a24 <HAL_ETH_MspInit+0x148>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	f040 808d 	bne.w	8006a1a <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006900:	2300      	movs	r3, #0
 8006902:	623b      	str	r3, [r7, #32]
 8006904:	4b48      	ldr	r3, [pc, #288]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	4a47      	ldr	r2, [pc, #284]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 800690a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800690e:	6313      	str	r3, [r2, #48]	; 0x30
 8006910:	4b45      	ldr	r3, [pc, #276]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006918:	623b      	str	r3, [r7, #32]
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	2300      	movs	r3, #0
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	4b41      	ldr	r3, [pc, #260]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	4a40      	ldr	r2, [pc, #256]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 8006926:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800692a:	6313      	str	r3, [r2, #48]	; 0x30
 800692c:	4b3e      	ldr	r3, [pc, #248]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006934:	61fb      	str	r3, [r7, #28]
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	2300      	movs	r3, #0
 800693a:	61bb      	str	r3, [r7, #24]
 800693c:	4b3a      	ldr	r3, [pc, #232]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 800693e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006940:	4a39      	ldr	r2, [pc, #228]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 8006942:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006946:	6313      	str	r3, [r2, #48]	; 0x30
 8006948:	4b37      	ldr	r3, [pc, #220]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 800694a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	4b33      	ldr	r3, [pc, #204]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 800695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695c:	4a32      	ldr	r2, [pc, #200]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 800695e:	f043 0304 	orr.w	r3, r3, #4
 8006962:	6313      	str	r3, [r2, #48]	; 0x30
 8006964:	4b30      	ldr	r3, [pc, #192]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 8006966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006968:	f003 0304 	and.w	r3, r3, #4
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006970:	2300      	movs	r3, #0
 8006972:	613b      	str	r3, [r7, #16]
 8006974:	4b2c      	ldr	r3, [pc, #176]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 8006976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006978:	4a2b      	ldr	r2, [pc, #172]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	6313      	str	r3, [r2, #48]	; 0x30
 8006980:	4b29      	ldr	r3, [pc, #164]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800698c:	2300      	movs	r3, #0
 800698e:	60fb      	str	r3, [r7, #12]
 8006990:	4b25      	ldr	r3, [pc, #148]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 8006992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006994:	4a24      	ldr	r2, [pc, #144]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 8006996:	f043 0302 	orr.w	r3, r3, #2
 800699a:	6313      	str	r3, [r2, #48]	; 0x30
 800699c:	4b22      	ldr	r3, [pc, #136]	; (8006a28 <HAL_ETH_MspInit+0x14c>)
 800699e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a0:	f003 0302 	and.w	r3, r3, #2
 80069a4:	60fb      	str	r3, [r7, #12]
 80069a6:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80069a8:	2332      	movs	r3, #50	; 0x32
 80069aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ac:	2302      	movs	r3, #2
 80069ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069b0:	2300      	movs	r3, #0
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069b4:	2303      	movs	r3, #3
 80069b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069b8:	230b      	movs	r3, #11
 80069ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069c0:	4619      	mov	r1, r3
 80069c2:	481a      	ldr	r0, [pc, #104]	; (8006a2c <HAL_ETH_MspInit+0x150>)
 80069c4:	f7fc fe52 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80069c8:	2386      	movs	r3, #134	; 0x86
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069cc:	2302      	movs	r3, #2
 80069ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069d4:	2303      	movs	r3, #3
 80069d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069d8:	230b      	movs	r3, #11
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069e0:	4619      	mov	r1, r3
 80069e2:	4813      	ldr	r0, [pc, #76]	; (8006a30 <HAL_ETH_MspInit+0x154>)
 80069e4:	f7fc fe42 	bl	800366c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80069e8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80069ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ee:	2302      	movs	r3, #2
 80069f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069f2:	2300      	movs	r3, #0
 80069f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069f6:	2303      	movs	r3, #3
 80069f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069fa:	230b      	movs	r3, #11
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a02:	4619      	mov	r1, r3
 8006a04:	480b      	ldr	r0, [pc, #44]	; (8006a34 <HAL_ETH_MspInit+0x158>)
 8006a06:	f7fc fe31 	bl	800366c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2105      	movs	r1, #5
 8006a0e:	203d      	movs	r0, #61	; 0x3d
 8006a10:	f7fb fba6 	bl	8002160 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006a14:	203d      	movs	r0, #61	; 0x3d
 8006a16:	f7fb fbbf 	bl	8002198 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006a1a:	bf00      	nop
 8006a1c:	3738      	adds	r7, #56	; 0x38
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	bd80      	pop	{r7, pc}
 8006a22:	bf00      	nop
 8006a24:	40028000 	.word	0x40028000
 8006a28:	40023800 	.word	0x40023800
 8006a2c:	40020800 	.word	0x40020800
 8006a30:	40020000 	.word	0x40020000
 8006a34:	40020400 	.word	0x40020400

08006a38 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006a3c:	4802      	ldr	r0, [pc, #8]	; (8006a48 <ETH_PHY_IO_Init+0x10>)
 8006a3e:	f7fc f9ad 	bl	8002d9c <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006a42:	2300      	movs	r3, #0
}
 8006a44:	4618      	mov	r0, r3
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	20005624 	.word	0x20005624

08006a4c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	af00      	add	r7, sp, #0
  return 0;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	68f9      	ldr	r1, [r7, #12]
 8006a6e:	4807      	ldr	r0, [pc, #28]	; (8006a8c <ETH_PHY_IO_ReadReg+0x30>)
 8006a70:	f7fb fffc 	bl	8002a6c <HAL_ETH_ReadPHYRegister>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d002      	beq.n	8006a80 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006a7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a7e:	e000      	b.n	8006a82 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	20005624 	.word	0x20005624

08006a90 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68ba      	ldr	r2, [r7, #8]
 8006aa0:	68f9      	ldr	r1, [r7, #12]
 8006aa2:	4807      	ldr	r0, [pc, #28]	; (8006ac0 <ETH_PHY_IO_WriteReg+0x30>)
 8006aa4:	f7fc f82d 	bl	8002b02 <HAL_ETH_WritePHYRegister>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ab2:	e000      	b.n	8006ab6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	20005624 	.word	0x20005624

08006ac4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006ac8:	f7fb fa62 	bl	8001f90 <HAL_GetTick>
 8006acc:	4603      	mov	r3, r0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	bd80      	pop	{r7, pc}
	...

08006ad4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b0a0      	sub	sp, #128	; 0x80
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006adc:	f107 0308 	add.w	r3, r7, #8
 8006ae0:	2264      	movs	r2, #100	; 0x64
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f01a fe7d 	bl	80217e4 <memset>
  int32_t PHYLinkState = 0;
 8006aea:	2300      	movs	r3, #0
 8006aec:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006aee:	2300      	movs	r3, #0
 8006af0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006af2:	2300      	movs	r3, #0
 8006af4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006af6:	2300      	movs	r3, #0
 8006af8:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8006afe:	483a      	ldr	r0, [pc, #232]	; (8006be8 <ethernet_link_thread+0x114>)
 8006b00:	f7fb f989 	bl	8001e16 <DP83848_GetLinkState>
 8006b04:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8006b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b0c:	089b      	lsrs	r3, r3, #2
 8006b0e:	f003 0301 	and.w	r3, r3, #1
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d00c      	beq.n	8006b32 <ethernet_link_thread+0x5e>
 8006b18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	dc09      	bgt.n	8006b32 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006b1e:	4833      	ldr	r0, [pc, #204]	; (8006bec <ethernet_link_thread+0x118>)
 8006b20:	f7fb fc54 	bl	80023cc <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006b24:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b26:	f00c febb 	bl	80138a0 <netif_set_down>
    netif_set_link_down(netif);
 8006b2a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006b2c:	f00c ff22 	bl	8013974 <netif_set_link_down>
 8006b30:	e055      	b.n	8006bde <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8006b32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d14e      	bne.n	8006bde <ethernet_link_thread+0x10a>
 8006b40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	dd4b      	ble.n	8006bde <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006b46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b48:	3b02      	subs	r3, #2
 8006b4a:	2b03      	cmp	r3, #3
 8006b4c:	d82a      	bhi.n	8006ba4 <ethernet_link_thread+0xd0>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <ethernet_link_thread+0x80>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006b65 	.word	0x08006b65
 8006b58:	08006b77 	.word	0x08006b77
 8006b5c:	08006b87 	.word	0x08006b87
 8006b60:	08006b97 	.word	0x08006b97
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b68:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006b6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b6e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006b70:	2301      	movs	r3, #1
 8006b72:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006b74:	e017      	b.n	8006ba6 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006b76:	2300      	movs	r3, #0
 8006b78:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8006b7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b7e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006b80:	2301      	movs	r3, #1
 8006b82:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006b84:	e00f      	b.n	8006ba6 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8006b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b8a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006b90:	2301      	movs	r3, #1
 8006b92:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006b94:	e007      	b.n	8006ba6 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006ba2:	e000      	b.n	8006ba6 <ethernet_link_thread+0xd2>
    default:
      break;
 8006ba4:	bf00      	nop
    }

    if(linkchanged)
 8006ba6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d018      	beq.n	8006bde <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006bac:	f107 0308 	add.w	r3, r7, #8
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	480e      	ldr	r0, [pc, #56]	; (8006bec <ethernet_link_thread+0x118>)
 8006bb4:	f7fb ffee 	bl	8002b94 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006bb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006bba:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8006bbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bbe:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006bc0:	f107 0308 	add.w	r3, r7, #8
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	4809      	ldr	r0, [pc, #36]	; (8006bec <ethernet_link_thread+0x118>)
 8006bc8:	f7fc f8ce 	bl	8002d68 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8006bcc:	4807      	ldr	r0, [pc, #28]	; (8006bec <ethernet_link_thread+0x118>)
 8006bce:	f7fb fb6f 	bl	80022b0 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8006bd2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006bd4:	f00c fdf8 	bl	80137c8 <netif_set_up>
      netif_set_link_up(netif);
 8006bd8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006bda:	f00c fe93 	bl	8013904 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006bde:	2064      	movs	r0, #100	; 0x64
 8006be0:	f000 f90e 	bl	8006e00 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8006be4:	e78b      	b.n	8006afe <ethernet_link_thread+0x2a>
 8006be6:	bf00      	nop
 8006be8:	2000570c 	.word	0x2000570c
 8006bec:	20005624 	.word	0x20005624

08006bf0 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006bf8:	4812      	ldr	r0, [pc, #72]	; (8006c44 <HAL_ETH_RxAllocateCallback+0x54>)
 8006bfa:	f00c fb51 	bl	80132a0 <memp_malloc_pool>
 8006bfe:	60f8      	str	r0, [r7, #12]
  if (p)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d014      	beq.n	8006c30 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f103 0220 	add.w	r2, r3, #32
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	4a0d      	ldr	r2, [pc, #52]	; (8006c48 <HAL_ETH_RxAllocateCallback+0x58>)
 8006c14:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006c1e:	9201      	str	r2, [sp, #4]
 8006c20:	9300      	str	r3, [sp, #0]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2241      	movs	r2, #65	; 0x41
 8006c26:	2100      	movs	r1, #0
 8006c28:	2000      	movs	r0, #0
 8006c2a:	f00d f8c7 	bl	8013dbc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006c2e:	e005      	b.n	8006c3c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006c30:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <HAL_ETH_RxAllocateCallback+0x5c>)
 8006c32:	2201      	movs	r2, #1
 8006c34:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	601a      	str	r2, [r3, #0]
}
 8006c3c:	bf00      	nop
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	08026e28 	.word	0x08026e28
 8006c48:	0800688d 	.word	0x0800688d
 8006c4c:	200054d8 	.word	0x200054d8

08006c50 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b089      	sub	sp, #36	; 0x24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
 8006c5c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8006c66:	2300      	movs	r3, #0
 8006c68:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	3b20      	subs	r3, #32
 8006c6e:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	2200      	movs	r2, #0
 8006c74:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	887a      	ldrh	r2, [r7, #2]
 8006c80:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d103      	bne.n	8006c92 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	69fa      	ldr	r2, [r7, #28]
 8006c8e:	601a      	str	r2, [r3, #0]
 8006c90:	e003      	b.n	8006c9a <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69fa      	ldr	r2, [r7, #28]
 8006c98:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	61fb      	str	r3, [r7, #28]
 8006ca6:	e009      	b.n	8006cbc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	891a      	ldrh	r2, [r3, #8]
 8006cac:	887b      	ldrh	r3, [r7, #2]
 8006cae:	4413      	add	r3, r2
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	69fb      	ldr	r3, [r7, #28]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1f2      	bne.n	8006ca8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006cc2:	bf00      	nop
 8006cc4:	bf00      	nop
 8006cc6:	3724      	adds	r7, #36	; 0x24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f00d fa29 	bl	8014130 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006cde:	bf00      	nop
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	4603      	mov	r3, r0
 8006cee:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006cf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006cf8:	2b84      	cmp	r3, #132	; 0x84
 8006cfa:	d005      	beq.n	8006d08 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006cfc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	3303      	adds	r3, #3
 8006d06:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006d08:	68fb      	ldr	r3, [r7, #12]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d1c:	f3ef 8305 	mrs	r3, IPSR
 8006d20:	607b      	str	r3, [r7, #4]
  return(result);
 8006d22:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	bf14      	ite	ne
 8006d28:	2301      	movne	r3, #1
 8006d2a:	2300      	moveq	r3, #0
 8006d2c:	b2db      	uxtb	r3, r3
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006d3e:	f001 fd99 	bl	8008874 <vTaskStartScheduler>
  
  return osOK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8006d4c:	f7ff ffe3 	bl	8006d16 <inHandlerMode>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8006d56:	f001 feb7 	bl	8008ac8 <xTaskGetTickCountFromISR>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	e002      	b.n	8006d64 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8006d5e:	f001 fea3 	bl	8008aa8 <xTaskGetTickCount>
 8006d62:	4603      	mov	r3, r0
  }
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d6a:	b089      	sub	sp, #36	; 0x24
 8006d6c:	af04      	add	r7, sp, #16
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	695b      	ldr	r3, [r3, #20]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d020      	beq.n	8006dbc <osThreadCreate+0x54>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	699b      	ldr	r3, [r3, #24]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d01c      	beq.n	8006dbc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	685c      	ldr	r4, [r3, #4]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	691e      	ldr	r6, [r3, #16]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7ff ffa6 	bl	8006ce6 <makeFreeRtosPriority>
 8006d9a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006da4:	9202      	str	r2, [sp, #8]
 8006da6:	9301      	str	r3, [sp, #4]
 8006da8:	9100      	str	r1, [sp, #0]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	4632      	mov	r2, r6
 8006dae:	4629      	mov	r1, r5
 8006db0:	4620      	mov	r0, r4
 8006db2:	f001 fb81 	bl	80084b8 <xTaskCreateStatic>
 8006db6:	4603      	mov	r3, r0
 8006db8:	60fb      	str	r3, [r7, #12]
 8006dba:	e01c      	b.n	8006df6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685c      	ldr	r4, [r3, #4]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dc8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff ff88 	bl	8006ce6 <makeFreeRtosPriority>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	f107 030c 	add.w	r3, r7, #12
 8006ddc:	9301      	str	r3, [sp, #4]
 8006dde:	9200      	str	r2, [sp, #0]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	4632      	mov	r2, r6
 8006de4:	4629      	mov	r1, r5
 8006de6:	4620      	mov	r0, r4
 8006de8:	f001 fbc3 	bl	8008572 <xTaskCreate>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d001      	beq.n	8006df6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	e000      	b.n	8006df8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006df6:	68fb      	ldr	r3, [r7, #12]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3714      	adds	r7, #20
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e00 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <osDelay+0x16>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	e000      	b.n	8006e18 <osDelay+0x18>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f001 fcf7 	bl	800880c <vTaskDelay>
  
  return osOK;
 8006e1e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	2001      	movs	r0, #1
 8006e40:	f000 fc7d 	bl	800773e <xQueueCreateMutexStatic>
 8006e44:	4603      	mov	r3, r0
 8006e46:	e003      	b.n	8006e50 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006e48:	2001      	movs	r0, #1
 8006e4a:	f000 fc60 	bl	800770e <xQueueCreateMutex>
 8006e4e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}

08006e58 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b084      	sub	sp, #16
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006e62:	2300      	movs	r3, #0
 8006e64:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <osMutexWait+0x18>
    return osErrorParameter;
 8006e6c:	2380      	movs	r3, #128	; 0x80
 8006e6e:	e03a      	b.n	8006ee6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8006e70:	2300      	movs	r3, #0
 8006e72:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e7a:	d103      	bne.n	8006e84 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8006e7c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e80:	60fb      	str	r3, [r7, #12]
 8006e82:	e009      	b.n	8006e98 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d006      	beq.n	8006e98 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d101      	bne.n	8006e98 <osMutexWait+0x40>
      ticks = 1;
 8006e94:	2301      	movs	r3, #1
 8006e96:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8006e98:	f7ff ff3d 	bl	8006d16 <inHandlerMode>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d017      	beq.n	8006ed2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006ea2:	f107 0308 	add.w	r3, r7, #8
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	2100      	movs	r1, #0
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f001 f874 	bl	8007f98 <xQueueReceiveFromISR>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d001      	beq.n	8006eba <osMutexWait+0x62>
      return osErrorOS;
 8006eb6:	23ff      	movs	r3, #255	; 0xff
 8006eb8:	e015      	b.n	8006ee6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d011      	beq.n	8006ee4 <osMutexWait+0x8c>
 8006ec0:	4b0b      	ldr	r3, [pc, #44]	; (8006ef0 <osMutexWait+0x98>)
 8006ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	e008      	b.n	8006ee4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 ff53 	bl	8007d80 <xQueueSemaphoreTake>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d001      	beq.n	8006ee4 <osMutexWait+0x8c>
    return osErrorOS;
 8006ee0:	23ff      	movs	r3, #255	; 0xff
 8006ee2:	e000      	b.n	8006ee6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3710      	adds	r7, #16
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	e000ed04 	.word	0xe000ed04

08006ef4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8006f00:	2300      	movs	r3, #0
 8006f02:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8006f04:	f7ff ff07 	bl	8006d16 <inHandlerMode>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d016      	beq.n	8006f3c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8006f0e:	f107 0308 	add.w	r3, r7, #8
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fdc6 	bl	8007aa6 <xQueueGiveFromISR>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d001      	beq.n	8006f24 <osMutexRelease+0x30>
      return osErrorOS;
 8006f20:	23ff      	movs	r3, #255	; 0xff
 8006f22:	e017      	b.n	8006f54 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d013      	beq.n	8006f52 <osMutexRelease+0x5e>
 8006f2a:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <osMutexRelease+0x68>)
 8006f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f30:	601a      	str	r2, [r3, #0]
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	e00a      	b.n	8006f52 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	2200      	movs	r2, #0
 8006f40:	2100      	movs	r1, #0
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fc16 	bl	8007774 <xQueueGenericSend>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d001      	beq.n	8006f52 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8006f4e:	23ff      	movs	r3, #255	; 0xff
 8006f50:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8006f52:	68fb      	ldr	r3, [r7, #12]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	e000ed04 	.word	0xe000ed04

08006f60 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00f      	beq.n	8006f92 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d10a      	bne.n	8006f8e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	2203      	movs	r2, #3
 8006f7e:	9200      	str	r2, [sp, #0]
 8006f80:	2200      	movs	r2, #0
 8006f82:	2100      	movs	r1, #0
 8006f84:	2001      	movs	r0, #1
 8006f86:	f000 fad7 	bl	8007538 <xQueueGenericCreateStatic>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	e016      	b.n	8006fbc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e014      	b.n	8006fbc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d110      	bne.n	8006fba <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8006f98:	2203      	movs	r2, #3
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	2001      	movs	r0, #1
 8006f9e:	f000 fb43 	bl	8007628 <xQueueGenericCreate>
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <osSemaphoreCreate+0x56>
 8006faa:	2300      	movs	r3, #0
 8006fac:	2200      	movs	r2, #0
 8006fae:	2100      	movs	r1, #0
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 fbdf 	bl	8007774 <xQueueGenericSend>
      return sema;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	e000      	b.n	8006fbc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8006fba:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8006fd8:	2380      	movs	r3, #128	; 0x80
 8006fda:	e03a      	b.n	8007052 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006fe6:	d103      	bne.n	8006ff0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8006fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fec:	60fb      	str	r3, [r7, #12]
 8006fee:	e009      	b.n	8007004 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d006      	beq.n	8007004 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d101      	bne.n	8007004 <osSemaphoreWait+0x40>
      ticks = 1;
 8007000:	2301      	movs	r3, #1
 8007002:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8007004:	f7ff fe87 	bl	8006d16 <inHandlerMode>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d017      	beq.n	800703e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800700e:	f107 0308 	add.w	r3, r7, #8
 8007012:	461a      	mov	r2, r3
 8007014:	2100      	movs	r1, #0
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 ffbe 	bl	8007f98 <xQueueReceiveFromISR>
 800701c:	4603      	mov	r3, r0
 800701e:	2b01      	cmp	r3, #1
 8007020:	d001      	beq.n	8007026 <osSemaphoreWait+0x62>
      return osErrorOS;
 8007022:	23ff      	movs	r3, #255	; 0xff
 8007024:	e015      	b.n	8007052 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d011      	beq.n	8007050 <osSemaphoreWait+0x8c>
 800702c:	4b0b      	ldr	r3, [pc, #44]	; (800705c <osSemaphoreWait+0x98>)
 800702e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007032:	601a      	str	r2, [r3, #0]
 8007034:	f3bf 8f4f 	dsb	sy
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	e008      	b.n	8007050 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800703e:	68f9      	ldr	r1, [r7, #12]
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 fe9d 	bl	8007d80 <xQueueSemaphoreTake>
 8007046:	4603      	mov	r3, r0
 8007048:	2b01      	cmp	r3, #1
 800704a:	d001      	beq.n	8007050 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800704c:	23ff      	movs	r3, #255	; 0xff
 800704e:	e000      	b.n	8007052 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3710      	adds	r7, #16
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	e000ed04 	.word	0xe000ed04

08007060 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800706c:	2300      	movs	r3, #0
 800706e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8007070:	f7ff fe51 	bl	8006d16 <inHandlerMode>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d016      	beq.n	80070a8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800707a:	f107 0308 	add.w	r3, r7, #8
 800707e:	4619      	mov	r1, r3
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fd10 	bl	8007aa6 <xQueueGiveFromISR>
 8007086:	4603      	mov	r3, r0
 8007088:	2b01      	cmp	r3, #1
 800708a:	d001      	beq.n	8007090 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800708c:	23ff      	movs	r3, #255	; 0xff
 800708e:	e017      	b.n	80070c0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d013      	beq.n	80070be <osSemaphoreRelease+0x5e>
 8007096:	4b0c      	ldr	r3, [pc, #48]	; (80070c8 <osSemaphoreRelease+0x68>)
 8007098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800709c:	601a      	str	r2, [r3, #0]
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	e00a      	b.n	80070be <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80070a8:	2300      	movs	r3, #0
 80070aa:	2200      	movs	r2, #0
 80070ac:	2100      	movs	r1, #0
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 fb60 	bl	8007774 <xQueueGenericSend>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d001      	beq.n	80070be <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80070ba:	23ff      	movs	r3, #255	; 0xff
 80070bc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80070be:	68fb      	ldr	r3, [r7, #12]
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3710      	adds	r7, #16
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80070d4:	f7ff fe1f 	bl	8006d16 <inHandlerMode>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80070de:	2382      	movs	r3, #130	; 0x82
 80070e0:	e003      	b.n	80070ea <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f001 f814 	bl	8008110 <vQueueDelete>

  return osOK; 
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80070f2:	b590      	push	{r4, r7, lr}
 80070f4:	b085      	sub	sp, #20
 80070f6:	af02      	add	r7, sp, #8
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d011      	beq.n	8007128 <osMessageCreate+0x36>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00d      	beq.n	8007128 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6859      	ldr	r1, [r3, #4]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	689a      	ldr	r2, [r3, #8]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	2400      	movs	r4, #0
 800711e:	9400      	str	r4, [sp, #0]
 8007120:	f000 fa0a 	bl	8007538 <xQueueGenericCreateStatic>
 8007124:	4603      	mov	r3, r0
 8007126:	e008      	b.n	800713a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	4619      	mov	r1, r3
 8007134:	f000 fa78 	bl	8007628 <xQueueGenericCreate>
 8007138:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800713a:	4618      	mov	r0, r3
 800713c:	370c      	adds	r7, #12
 800713e:	46bd      	mov	sp, r7
 8007140:	bd90      	pop	{r4, r7, pc}
	...

08007144 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b086      	sub	sp, #24
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007150:	2300      	movs	r3, #0
 8007152:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d101      	bne.n	8007162 <osMessagePut+0x1e>
    ticks = 1;
 800715e:	2301      	movs	r3, #1
 8007160:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007162:	f7ff fdd8 	bl	8006d16 <inHandlerMode>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d018      	beq.n	800719e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800716c:	f107 0210 	add.w	r2, r7, #16
 8007170:	f107 0108 	add.w	r1, r7, #8
 8007174:	2300      	movs	r3, #0
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f000 fbfa 	bl	8007970 <xQueueGenericSendFromISR>
 800717c:	4603      	mov	r3, r0
 800717e:	2b01      	cmp	r3, #1
 8007180:	d001      	beq.n	8007186 <osMessagePut+0x42>
      return osErrorOS;
 8007182:	23ff      	movs	r3, #255	; 0xff
 8007184:	e018      	b.n	80071b8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d014      	beq.n	80071b6 <osMessagePut+0x72>
 800718c:	4b0c      	ldr	r3, [pc, #48]	; (80071c0 <osMessagePut+0x7c>)
 800718e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007192:	601a      	str	r2, [r3, #0]
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	e00b      	b.n	80071b6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800719e:	f107 0108 	add.w	r1, r7, #8
 80071a2:	2300      	movs	r3, #0
 80071a4:	697a      	ldr	r2, [r7, #20]
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	f000 fae4 	bl	8007774 <xQueueGenericSend>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d001      	beq.n	80071b6 <osMessagePut+0x72>
      return osErrorOS;
 80071b2:	23ff      	movs	r3, #255	; 0xff
 80071b4:	e000      	b.n	80071b8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3718      	adds	r7, #24
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80071c4:	b590      	push	{r4, r7, lr}
 80071c6:	b08b      	sub	sp, #44	; 0x2c
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80071de:	2380      	movs	r3, #128	; 0x80
 80071e0:	617b      	str	r3, [r7, #20]
    return event;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	461c      	mov	r4, r3
 80071e6:	f107 0314 	add.w	r3, r7, #20
 80071ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80071ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80071f2:	e054      	b.n	800729e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80071f4:	2300      	movs	r3, #0
 80071f6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80071f8:	2300      	movs	r3, #0
 80071fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007202:	d103      	bne.n	800720c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007204:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007208:	627b      	str	r3, [r7, #36]	; 0x24
 800720a:	e009      	b.n	8007220 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d006      	beq.n	8007220 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007218:	2b00      	cmp	r3, #0
 800721a:	d101      	bne.n	8007220 <osMessageGet+0x5c>
      ticks = 1;
 800721c:	2301      	movs	r3, #1
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007220:	f7ff fd79 	bl	8006d16 <inHandlerMode>
 8007224:	4603      	mov	r3, r0
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01c      	beq.n	8007264 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800722a:	f107 0220 	add.w	r2, r7, #32
 800722e:	f107 0314 	add.w	r3, r7, #20
 8007232:	3304      	adds	r3, #4
 8007234:	4619      	mov	r1, r3
 8007236:	68b8      	ldr	r0, [r7, #8]
 8007238:	f000 feae 	bl	8007f98 <xQueueReceiveFromISR>
 800723c:	4603      	mov	r3, r0
 800723e:	2b01      	cmp	r3, #1
 8007240:	d102      	bne.n	8007248 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007242:	2310      	movs	r3, #16
 8007244:	617b      	str	r3, [r7, #20]
 8007246:	e001      	b.n	800724c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007248:	2300      	movs	r3, #0
 800724a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01d      	beq.n	800728e <osMessageGet+0xca>
 8007252:	4b15      	ldr	r3, [pc, #84]	; (80072a8 <osMessageGet+0xe4>)
 8007254:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007258:	601a      	str	r2, [r3, #0]
 800725a:	f3bf 8f4f 	dsb	sy
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	e014      	b.n	800728e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007264:	f107 0314 	add.w	r3, r7, #20
 8007268:	3304      	adds	r3, #4
 800726a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800726c:	4619      	mov	r1, r3
 800726e:	68b8      	ldr	r0, [r7, #8]
 8007270:	f000 fca6 	bl	8007bc0 <xQueueReceive>
 8007274:	4603      	mov	r3, r0
 8007276:	2b01      	cmp	r3, #1
 8007278:	d102      	bne.n	8007280 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800727a:	2310      	movs	r3, #16
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	e006      	b.n	800728e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	2b00      	cmp	r3, #0
 8007284:	d101      	bne.n	800728a <osMessageGet+0xc6>
 8007286:	2300      	movs	r3, #0
 8007288:	e000      	b.n	800728c <osMessageGet+0xc8>
 800728a:	2340      	movs	r3, #64	; 0x40
 800728c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	461c      	mov	r4, r3
 8007292:	f107 0314 	add.w	r3, r7, #20
 8007296:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800729a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	372c      	adds	r7, #44	; 0x2c
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd90      	pop	{r4, r7, pc}
 80072a6:	bf00      	nop
 80072a8:	e000ed04 	.word	0xe000ed04

080072ac <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80072b4:	f7ff fd2f 	bl	8006d16 <inHandlerMode>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d004      	beq.n	80072c8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 ff08 	bl	80080d4 <uxQueueMessagesWaitingFromISR>
 80072c4:	4603      	mov	r3, r0
 80072c6:	e003      	b.n	80072d0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fee5 	bl	8008098 <uxQueueMessagesWaiting>
 80072ce:	4603      	mov	r3, r0
  }
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80072e0:	f7ff fd19 	bl	8006d16 <inHandlerMode>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d001      	beq.n	80072ee <osMessageDelete+0x16>
    return osErrorISR;
 80072ea:	2382      	movs	r3, #130	; 0x82
 80072ec:	e003      	b.n	80072f6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 ff0e 	bl	8008110 <vQueueDelete>

  return osOK; 
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f103 0208 	add.w	r2, r3, #8
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007316:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f103 0208 	add.w	r2, r3, #8
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f103 0208 	add.w	r2, r3, #8
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	689a      	ldr	r2, [r3, #8]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	683a      	ldr	r2, [r7, #0]
 800737c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	683a      	ldr	r2, [r7, #0]
 8007382:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	687a      	ldr	r2, [r7, #4]
 8007388:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
}
 8007394:	bf00      	nop
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073b6:	d103      	bne.n	80073c0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	e00c      	b.n	80073da <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3308      	adds	r3, #8
 80073c4:	60fb      	str	r3, [r7, #12]
 80073c6:	e002      	b.n	80073ce <vListInsert+0x2e>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	60fb      	str	r3, [r7, #12]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	68ba      	ldr	r2, [r7, #8]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d2f6      	bcs.n	80073c8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	685a      	ldr	r2, [r3, #4]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	68fa      	ldr	r2, [r7, #12]
 80073ee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	683a      	ldr	r2, [r7, #0]
 80073f4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	601a      	str	r2, [r3, #0]
}
 8007406:	bf00      	nop
 8007408:	3714      	adds	r7, #20
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr

08007412 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007412:	b480      	push	{r7}
 8007414:	b085      	sub	sp, #20
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	6892      	ldr	r2, [r2, #8]
 8007428:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	6852      	ldr	r2, [r2, #4]
 8007432:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	429a      	cmp	r2, r3
 800743c:	d103      	bne.n	8007446 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	1e5a      	subs	r2, r3, #1
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
	...

08007468 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d10a      	bne.n	8007492 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800747c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007480:	f383 8811 	msr	BASEPRI, r3
 8007484:	f3bf 8f6f 	isb	sy
 8007488:	f3bf 8f4f 	dsb	sy
 800748c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800748e:	bf00      	nop
 8007490:	e7fe      	b.n	8007490 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007492:	f002 fcd7 	bl	8009e44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800749e:	68f9      	ldr	r1, [r7, #12]
 80074a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074a2:	fb01 f303 	mul.w	r3, r1, r3
 80074a6:	441a      	add	r2, r3
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2200      	movs	r2, #0
 80074b0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c2:	3b01      	subs	r3, #1
 80074c4:	68f9      	ldr	r1, [r7, #12]
 80074c6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80074c8:	fb01 f303 	mul.w	r3, r1, r3
 80074cc:	441a      	add	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	22ff      	movs	r2, #255	; 0xff
 80074d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	22ff      	movs	r2, #255	; 0xff
 80074de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d114      	bne.n	8007512 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d01a      	beq.n	8007526 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3310      	adds	r3, #16
 80074f4:	4618      	mov	r0, r3
 80074f6:	f001 fc63 	bl	8008dc0 <xTaskRemoveFromEventList>
 80074fa:	4603      	mov	r3, r0
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d012      	beq.n	8007526 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007500:	4b0c      	ldr	r3, [pc, #48]	; (8007534 <xQueueGenericReset+0xcc>)
 8007502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	e009      	b.n	8007526 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3310      	adds	r3, #16
 8007516:	4618      	mov	r0, r3
 8007518:	f7ff fef1 	bl	80072fe <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	3324      	adds	r3, #36	; 0x24
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff feec 	bl	80072fe <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007526:	f002 fcbd 	bl	8009ea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800752a:	2301      	movs	r3, #1
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	e000ed04 	.word	0xe000ed04

08007538 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007538:	b580      	push	{r7, lr}
 800753a:	b08e      	sub	sp, #56	; 0x38
 800753c:	af02      	add	r7, sp, #8
 800753e:	60f8      	str	r0, [r7, #12]
 8007540:	60b9      	str	r1, [r7, #8]
 8007542:	607a      	str	r2, [r7, #4]
 8007544:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10a      	bne.n	8007562 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800754c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007550:	f383 8811 	msr	BASEPRI, r3
 8007554:	f3bf 8f6f 	isb	sy
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800755e:	bf00      	nop
 8007560:	e7fe      	b.n	8007560 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d10a      	bne.n	800757e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007568:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756c:	f383 8811 	msr	BASEPRI, r3
 8007570:	f3bf 8f6f 	isb	sy
 8007574:	f3bf 8f4f 	dsb	sy
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <xQueueGenericCreateStatic+0x52>
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d001      	beq.n	800758e <xQueueGenericCreateStatic+0x56>
 800758a:	2301      	movs	r3, #1
 800758c:	e000      	b.n	8007590 <xQueueGenericCreateStatic+0x58>
 800758e:	2300      	movs	r3, #0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10a      	bne.n	80075aa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	f383 8811 	msr	BASEPRI, r3
 800759c:	f3bf 8f6f 	isb	sy
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	623b      	str	r3, [r7, #32]
}
 80075a6:	bf00      	nop
 80075a8:	e7fe      	b.n	80075a8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d102      	bne.n	80075b6 <xQueueGenericCreateStatic+0x7e>
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <xQueueGenericCreateStatic+0x82>
 80075b6:	2301      	movs	r3, #1
 80075b8:	e000      	b.n	80075bc <xQueueGenericCreateStatic+0x84>
 80075ba:	2300      	movs	r3, #0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	61fb      	str	r3, [r7, #28]
}
 80075d2:	bf00      	nop
 80075d4:	e7fe      	b.n	80075d4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80075d6:	2348      	movs	r3, #72	; 0x48
 80075d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	2b48      	cmp	r3, #72	; 0x48
 80075de:	d00a      	beq.n	80075f6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	61bb      	str	r3, [r7, #24]
}
 80075f2:	bf00      	nop
 80075f4:	e7fe      	b.n	80075f4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80075f6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80075fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d00d      	beq.n	800761e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800760a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800760e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007610:	9300      	str	r3, [sp, #0]
 8007612:	4613      	mov	r3, r2
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	68f8      	ldr	r0, [r7, #12]
 800761a:	f000 f83f 	bl	800769c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800761e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007620:	4618      	mov	r0, r3
 8007622:	3730      	adds	r7, #48	; 0x30
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08a      	sub	sp, #40	; 0x28
 800762c:	af02      	add	r7, sp, #8
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <xQueueGenericCreate+0x2a>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	613b      	str	r3, [r7, #16]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	fb02 f303 	mul.w	r3, r2, r3
 800765a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	3348      	adds	r3, #72	; 0x48
 8007660:	4618      	mov	r0, r3
 8007662:	f002 fd11 	bl	800a088 <pvPortMalloc>
 8007666:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d011      	beq.n	8007692 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800766e:	69bb      	ldr	r3, [r7, #24]
 8007670:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	3348      	adds	r3, #72	; 0x48
 8007676:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007680:	79fa      	ldrb	r2, [r7, #7]
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	9300      	str	r3, [sp, #0]
 8007686:	4613      	mov	r3, r2
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	68b9      	ldr	r1, [r7, #8]
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f805 	bl	800769c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007692:	69bb      	ldr	r3, [r7, #24]
	}
 8007694:	4618      	mov	r0, r3
 8007696:	3720      	adds	r7, #32
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d103      	bne.n	80076b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	e002      	b.n	80076be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80076be:	69bb      	ldr	r3, [r7, #24]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	68ba      	ldr	r2, [r7, #8]
 80076c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80076ca:	2101      	movs	r1, #1
 80076cc:	69b8      	ldr	r0, [r7, #24]
 80076ce:	f7ff fecb 	bl	8007468 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80076d2:	bf00      	nop
 80076d4:	3710      	adds	r7, #16
 80076d6:	46bd      	mov	sp, r7
 80076d8:	bd80      	pop	{r7, pc}

080076da <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80076da:	b580      	push	{r7, lr}
 80076dc:	b082      	sub	sp, #8
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d00e      	beq.n	8007706 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80076fa:	2300      	movs	r3, #0
 80076fc:	2200      	movs	r2, #0
 80076fe:	2100      	movs	r1, #0
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f837 	bl	8007774 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007706:	bf00      	nop
 8007708:	3708      	adds	r7, #8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800770e:	b580      	push	{r7, lr}
 8007710:	b086      	sub	sp, #24
 8007712:	af00      	add	r7, sp, #0
 8007714:	4603      	mov	r3, r0
 8007716:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007718:	2301      	movs	r3, #1
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	2300      	movs	r3, #0
 800771e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007720:	79fb      	ldrb	r3, [r7, #7]
 8007722:	461a      	mov	r2, r3
 8007724:	6939      	ldr	r1, [r7, #16]
 8007726:	6978      	ldr	r0, [r7, #20]
 8007728:	f7ff ff7e 	bl	8007628 <xQueueGenericCreate>
 800772c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7ff ffd3 	bl	80076da <prvInitialiseMutex>

		return xNewQueue;
 8007734:	68fb      	ldr	r3, [r7, #12]
	}
 8007736:	4618      	mov	r0, r3
 8007738:	3718      	adds	r7, #24
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}

0800773e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800773e:	b580      	push	{r7, lr}
 8007740:	b088      	sub	sp, #32
 8007742:	af02      	add	r7, sp, #8
 8007744:	4603      	mov	r3, r0
 8007746:	6039      	str	r1, [r7, #0]
 8007748:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800774a:	2301      	movs	r3, #1
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	2300      	movs	r3, #0
 8007750:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007752:	79fb      	ldrb	r3, [r7, #7]
 8007754:	9300      	str	r3, [sp, #0]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2200      	movs	r2, #0
 800775a:	6939      	ldr	r1, [r7, #16]
 800775c:	6978      	ldr	r0, [r7, #20]
 800775e:	f7ff feeb 	bl	8007538 <xQueueGenericCreateStatic>
 8007762:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007764:	68f8      	ldr	r0, [r7, #12]
 8007766:	f7ff ffb8 	bl	80076da <prvInitialiseMutex>

		return xNewQueue;
 800776a:	68fb      	ldr	r3, [r7, #12]
	}
 800776c:	4618      	mov	r0, r3
 800776e:	3718      	adds	r7, #24
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b08e      	sub	sp, #56	; 0x38
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
 8007780:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007782:	2300      	movs	r3, #0
 8007784:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10a      	bne.n	80077a6 <xQueueGenericSend+0x32>
	__asm volatile
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077a2:	bf00      	nop
 80077a4:	e7fe      	b.n	80077a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d103      	bne.n	80077b4 <xQueueGenericSend+0x40>
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <xQueueGenericSend+0x44>
 80077b4:	2301      	movs	r3, #1
 80077b6:	e000      	b.n	80077ba <xQueueGenericSend+0x46>
 80077b8:	2300      	movs	r3, #0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10a      	bne.n	80077d4 <xQueueGenericSend+0x60>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077d0:	bf00      	nop
 80077d2:	e7fe      	b.n	80077d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d103      	bne.n	80077e2 <xQueueGenericSend+0x6e>
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d101      	bne.n	80077e6 <xQueueGenericSend+0x72>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <xQueueGenericSend+0x74>
 80077e6:	2300      	movs	r3, #0
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xQueueGenericSend+0x8e>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	623b      	str	r3, [r7, #32]
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007802:	f001 fc9d 	bl	8009140 <xTaskGetSchedulerState>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d102      	bne.n	8007812 <xQueueGenericSend+0x9e>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <xQueueGenericSend+0xa2>
 8007812:	2301      	movs	r3, #1
 8007814:	e000      	b.n	8007818 <xQueueGenericSend+0xa4>
 8007816:	2300      	movs	r3, #0
 8007818:	2b00      	cmp	r3, #0
 800781a:	d10a      	bne.n	8007832 <xQueueGenericSend+0xbe>
	__asm volatile
 800781c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007820:	f383 8811 	msr	BASEPRI, r3
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	f3bf 8f4f 	dsb	sy
 800782c:	61fb      	str	r3, [r7, #28]
}
 800782e:	bf00      	nop
 8007830:	e7fe      	b.n	8007830 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007832:	f002 fb07 	bl	8009e44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783e:	429a      	cmp	r2, r3
 8007840:	d302      	bcc.n	8007848 <xQueueGenericSend+0xd4>
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d129      	bne.n	800789c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800784e:	f000 fc9a 	bl	8008186 <prvCopyDataToQueue>
 8007852:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007858:	2b00      	cmp	r3, #0
 800785a:	d010      	beq.n	800787e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800785c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785e:	3324      	adds	r3, #36	; 0x24
 8007860:	4618      	mov	r0, r3
 8007862:	f001 faad 	bl	8008dc0 <xTaskRemoveFromEventList>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d013      	beq.n	8007894 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800786c:	4b3f      	ldr	r3, [pc, #252]	; (800796c <xQueueGenericSend+0x1f8>)
 800786e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	e00a      	b.n	8007894 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800787e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007880:	2b00      	cmp	r3, #0
 8007882:	d007      	beq.n	8007894 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007884:	4b39      	ldr	r3, [pc, #228]	; (800796c <xQueueGenericSend+0x1f8>)
 8007886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800788a:	601a      	str	r2, [r3, #0]
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007894:	f002 fb06 	bl	8009ea4 <vPortExitCritical>
				return pdPASS;
 8007898:	2301      	movs	r3, #1
 800789a:	e063      	b.n	8007964 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d103      	bne.n	80078aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078a2:	f002 faff 	bl	8009ea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	e05c      	b.n	8007964 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d106      	bne.n	80078be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078b0:	f107 0314 	add.w	r3, r7, #20
 80078b4:	4618      	mov	r0, r3
 80078b6:	f001 fae5 	bl	8008e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078ba:	2301      	movs	r3, #1
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078be:	f002 faf1 	bl	8009ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078c2:	f001 f847 	bl	8008954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078c6:	f002 fabd 	bl	8009e44 <vPortEnterCritical>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078d0:	b25b      	sxtb	r3, r3
 80078d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078d6:	d103      	bne.n	80078e0 <xQueueGenericSend+0x16c>
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078e6:	b25b      	sxtb	r3, r3
 80078e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078ec:	d103      	bne.n	80078f6 <xQueueGenericSend+0x182>
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078f6:	f002 fad5 	bl	8009ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078fa:	1d3a      	adds	r2, r7, #4
 80078fc:	f107 0314 	add.w	r3, r7, #20
 8007900:	4611      	mov	r1, r2
 8007902:	4618      	mov	r0, r3
 8007904:	f001 fad4 	bl	8008eb0 <xTaskCheckForTimeOut>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d124      	bne.n	8007958 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800790e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007910:	f000 fd31 	bl	8008376 <prvIsQueueFull>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d018      	beq.n	800794c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	3310      	adds	r3, #16
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	4611      	mov	r1, r2
 8007922:	4618      	mov	r0, r3
 8007924:	f001 f9fc 	bl	8008d20 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800792a:	f000 fcbc 	bl	80082a6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800792e:	f001 f81f 	bl	8008970 <xTaskResumeAll>
 8007932:	4603      	mov	r3, r0
 8007934:	2b00      	cmp	r3, #0
 8007936:	f47f af7c 	bne.w	8007832 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800793a:	4b0c      	ldr	r3, [pc, #48]	; (800796c <xQueueGenericSend+0x1f8>)
 800793c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007940:	601a      	str	r2, [r3, #0]
 8007942:	f3bf 8f4f 	dsb	sy
 8007946:	f3bf 8f6f 	isb	sy
 800794a:	e772      	b.n	8007832 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800794c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800794e:	f000 fcaa 	bl	80082a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007952:	f001 f80d 	bl	8008970 <xTaskResumeAll>
 8007956:	e76c      	b.n	8007832 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007958:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800795a:	f000 fca4 	bl	80082a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800795e:	f001 f807 	bl	8008970 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007962:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007964:	4618      	mov	r0, r3
 8007966:	3738      	adds	r7, #56	; 0x38
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	e000ed04 	.word	0xe000ed04

08007970 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b090      	sub	sp, #64	; 0x40
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
 800797c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10a      	bne.n	800799e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d103      	bne.n	80079ac <xQueueGenericSendFromISR+0x3c>
 80079a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d101      	bne.n	80079b0 <xQueueGenericSendFromISR+0x40>
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <xQueueGenericSendFromISR+0x42>
 80079b0:	2300      	movs	r3, #0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80079b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079c8:	bf00      	nop
 80079ca:	e7fe      	b.n	80079ca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d103      	bne.n	80079da <xQueueGenericSendFromISR+0x6a>
 80079d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d101      	bne.n	80079de <xQueueGenericSendFromISR+0x6e>
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <xQueueGenericSendFromISR+0x70>
 80079de:	2300      	movs	r3, #0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	623b      	str	r3, [r7, #32]
}
 80079f6:	bf00      	nop
 80079f8:	e7fe      	b.n	80079f8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079fa:	f002 fb05 	bl	800a008 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a06:	f383 8811 	msr	BASEPRI, r3
 8007a0a:	f3bf 8f6f 	isb	sy
 8007a0e:	f3bf 8f4f 	dsb	sy
 8007a12:	61fa      	str	r2, [r7, #28]
 8007a14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d302      	bcc.n	8007a2c <xQueueGenericSendFromISR+0xbc>
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d12f      	bne.n	8007a8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a3c:	683a      	ldr	r2, [r7, #0]
 8007a3e:	68b9      	ldr	r1, [r7, #8]
 8007a40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a42:	f000 fba0 	bl	8008186 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a4e:	d112      	bne.n	8007a76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d016      	beq.n	8007a86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	3324      	adds	r3, #36	; 0x24
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f001 f9af 	bl	8008dc0 <xTaskRemoveFromEventList>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00e      	beq.n	8007a86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00b      	beq.n	8007a86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	e007      	b.n	8007a86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	b25a      	sxtb	r2, r3
 8007a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007a86:	2301      	movs	r3, #1
 8007a88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007a8a:	e001      	b.n	8007a90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3740      	adds	r7, #64	; 0x40
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}

08007aa6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007aa6:	b580      	push	{r7, lr}
 8007aa8:	b08e      	sub	sp, #56	; 0x38
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
 8007aae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10a      	bne.n	8007ad0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	623b      	str	r3, [r7, #32]
}
 8007acc:	bf00      	nop
 8007ace:	e7fe      	b.n	8007ace <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <xQueueGiveFromISR+0x48>
	__asm volatile
 8007ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007adc:	f383 8811 	msr	BASEPRI, r3
 8007ae0:	f3bf 8f6f 	isb	sy
 8007ae4:	f3bf 8f4f 	dsb	sy
 8007ae8:	61fb      	str	r3, [r7, #28]
}
 8007aea:	bf00      	nop
 8007aec:	e7fe      	b.n	8007aec <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d103      	bne.n	8007afe <xQueueGiveFromISR+0x58>
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <xQueueGiveFromISR+0x5c>
 8007afe:	2301      	movs	r3, #1
 8007b00:	e000      	b.n	8007b04 <xQueueGiveFromISR+0x5e>
 8007b02:	2300      	movs	r3, #0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d10a      	bne.n	8007b1e <xQueueGiveFromISR+0x78>
	__asm volatile
 8007b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0c:	f383 8811 	msr	BASEPRI, r3
 8007b10:	f3bf 8f6f 	isb	sy
 8007b14:	f3bf 8f4f 	dsb	sy
 8007b18:	61bb      	str	r3, [r7, #24]
}
 8007b1a:	bf00      	nop
 8007b1c:	e7fe      	b.n	8007b1c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007b1e:	f002 fa73 	bl	800a008 <vPortValidateInterruptPriority>
	__asm volatile
 8007b22:	f3ef 8211 	mrs	r2, BASEPRI
 8007b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	617a      	str	r2, [r7, #20]
 8007b38:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8007b3a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d22b      	bcs.n	8007ba6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5a:	1c5a      	adds	r2, r3, #1
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007b60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b68:	d112      	bne.n	8007b90 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d016      	beq.n	8007ba0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b74:	3324      	adds	r3, #36	; 0x24
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 f922 	bl	8008dc0 <xTaskRemoveFromEventList>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00e      	beq.n	8007ba0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d00b      	beq.n	8007ba0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	e007      	b.n	8007ba0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b94:	3301      	adds	r3, #1
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	b25a      	sxtb	r2, r3
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ba4:	e001      	b.n	8007baa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8007baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f383 8811 	msr	BASEPRI, r3
}
 8007bb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3738      	adds	r7, #56	; 0x38
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08c      	sub	sp, #48	; 0x30
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <xQueueReceive+0x30>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	623b      	str	r3, [r7, #32]
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d103      	bne.n	8007bfe <xQueueReceive+0x3e>
 8007bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d101      	bne.n	8007c02 <xQueueReceive+0x42>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <xQueueReceive+0x44>
 8007c02:	2300      	movs	r3, #0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <xQueueReceive+0x5e>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	61fb      	str	r3, [r7, #28]
}
 8007c1a:	bf00      	nop
 8007c1c:	e7fe      	b.n	8007c1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c1e:	f001 fa8f 	bl	8009140 <xTaskGetSchedulerState>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <xQueueReceive+0x6e>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <xQueueReceive+0x72>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <xQueueReceive+0x74>
 8007c32:	2300      	movs	r3, #0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10a      	bne.n	8007c4e <xQueueReceive+0x8e>
	__asm volatile
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	61bb      	str	r3, [r7, #24]
}
 8007c4a:	bf00      	nop
 8007c4c:	e7fe      	b.n	8007c4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c4e:	f002 f8f9 	bl	8009e44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d01f      	beq.n	8007c9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c5e:	68b9      	ldr	r1, [r7, #8]
 8007c60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c62:	f000 fafa 	bl	800825a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c68:	1e5a      	subs	r2, r3, #1
 8007c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00f      	beq.n	8007c96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	3310      	adds	r3, #16
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f001 f8a0 	bl	8008dc0 <xTaskRemoveFromEventList>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d007      	beq.n	8007c96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c86:	4b3d      	ldr	r3, [pc, #244]	; (8007d7c <xQueueReceive+0x1bc>)
 8007c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c96:	f002 f905 	bl	8009ea4 <vPortExitCritical>
				return pdPASS;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e069      	b.n	8007d72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d103      	bne.n	8007cac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ca4:	f002 f8fe 	bl	8009ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	e062      	b.n	8007d72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d106      	bne.n	8007cc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cb2:	f107 0310 	add.w	r3, r7, #16
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f001 f8e4 	bl	8008e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cc0:	f002 f8f0 	bl	8009ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cc4:	f000 fe46 	bl	8008954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cc8:	f002 f8bc 	bl	8009e44 <vPortEnterCritical>
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cd2:	b25b      	sxtb	r3, r3
 8007cd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cd8:	d103      	bne.n	8007ce2 <xQueueReceive+0x122>
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ce8:	b25b      	sxtb	r3, r3
 8007cea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cee:	d103      	bne.n	8007cf8 <xQueueReceive+0x138>
 8007cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cf8:	f002 f8d4 	bl	8009ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cfc:	1d3a      	adds	r2, r7, #4
 8007cfe:	f107 0310 	add.w	r3, r7, #16
 8007d02:	4611      	mov	r1, r2
 8007d04:	4618      	mov	r0, r3
 8007d06:	f001 f8d3 	bl	8008eb0 <xTaskCheckForTimeOut>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d123      	bne.n	8007d58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d12:	f000 fb1a 	bl	800834a <prvIsQueueEmpty>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d017      	beq.n	8007d4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	3324      	adds	r3, #36	; 0x24
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	4611      	mov	r1, r2
 8007d24:	4618      	mov	r0, r3
 8007d26:	f000 fffb 	bl	8008d20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d2c:	f000 fabb 	bl	80082a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d30:	f000 fe1e 	bl	8008970 <xTaskResumeAll>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d189      	bne.n	8007c4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007d3a:	4b10      	ldr	r3, [pc, #64]	; (8007d7c <xQueueReceive+0x1bc>)
 8007d3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	e780      	b.n	8007c4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007d4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d4e:	f000 faaa 	bl	80082a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d52:	f000 fe0d 	bl	8008970 <xTaskResumeAll>
 8007d56:	e77a      	b.n	8007c4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007d58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d5a:	f000 faa4 	bl	80082a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d5e:	f000 fe07 	bl	8008970 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d64:	f000 faf1 	bl	800834a <prvIsQueueEmpty>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f43f af6f 	beq.w	8007c4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3730      	adds	r7, #48	; 0x30
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	e000ed04 	.word	0xe000ed04

08007d80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b08e      	sub	sp, #56	; 0x38
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007d92:	2300      	movs	r3, #0
 8007d94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	623b      	str	r3, [r7, #32]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d00a      	beq.n	8007dd0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	f383 8811 	msr	BASEPRI, r3
 8007dc2:	f3bf 8f6f 	isb	sy
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	61fb      	str	r3, [r7, #28]
}
 8007dcc:	bf00      	nop
 8007dce:	e7fe      	b.n	8007dce <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007dd0:	f001 f9b6 	bl	8009140 <xTaskGetSchedulerState>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <xQueueSemaphoreTake+0x60>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d101      	bne.n	8007de4 <xQueueSemaphoreTake+0x64>
 8007de0:	2301      	movs	r3, #1
 8007de2:	e000      	b.n	8007de6 <xQueueSemaphoreTake+0x66>
 8007de4:	2300      	movs	r3, #0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d10a      	bne.n	8007e00 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8007dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dee:	f383 8811 	msr	BASEPRI, r3
 8007df2:	f3bf 8f6f 	isb	sy
 8007df6:	f3bf 8f4f 	dsb	sy
 8007dfa:	61bb      	str	r3, [r7, #24]
}
 8007dfc:	bf00      	nop
 8007dfe:	e7fe      	b.n	8007dfe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007e00:	f002 f820 	bl	8009e44 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e08:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d024      	beq.n	8007e5a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e12:	1e5a      	subs	r2, r3, #1
 8007e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e16:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d104      	bne.n	8007e2a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007e20:	f001 fb36 	bl	8009490 <pvTaskIncrementMutexHeldCount>
 8007e24:	4602      	mov	r2, r0
 8007e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e28:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e2c:	691b      	ldr	r3, [r3, #16]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00f      	beq.n	8007e52 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e34:	3310      	adds	r3, #16
 8007e36:	4618      	mov	r0, r3
 8007e38:	f000 ffc2 	bl	8008dc0 <xTaskRemoveFromEventList>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d007      	beq.n	8007e52 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007e42:	4b54      	ldr	r3, [pc, #336]	; (8007f94 <xQueueSemaphoreTake+0x214>)
 8007e44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e48:	601a      	str	r2, [r3, #0]
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007e52:	f002 f827 	bl	8009ea4 <vPortExitCritical>
				return pdPASS;
 8007e56:	2301      	movs	r3, #1
 8007e58:	e097      	b.n	8007f8a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d111      	bne.n	8007e84 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00a      	beq.n	8007e7c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8007e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6a:	f383 8811 	msr	BASEPRI, r3
 8007e6e:	f3bf 8f6f 	isb	sy
 8007e72:	f3bf 8f4f 	dsb	sy
 8007e76:	617b      	str	r3, [r7, #20]
}
 8007e78:	bf00      	nop
 8007e7a:	e7fe      	b.n	8007e7a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007e7c:	f002 f812 	bl	8009ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007e80:	2300      	movs	r3, #0
 8007e82:	e082      	b.n	8007f8a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d106      	bne.n	8007e98 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007e8a:	f107 030c 	add.w	r3, r7, #12
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fff8 	bl	8008e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007e94:	2301      	movs	r3, #1
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007e98:	f002 f804 	bl	8009ea4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007e9c:	f000 fd5a 	bl	8008954 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ea0:	f001 ffd0 	bl	8009e44 <vPortEnterCritical>
 8007ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007eaa:	b25b      	sxtb	r3, r3
 8007eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007eb0:	d103      	bne.n	8007eba <xQueueSemaphoreTake+0x13a>
 8007eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ec0:	b25b      	sxtb	r3, r3
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007ec6:	d103      	bne.n	8007ed0 <xQueueSemaphoreTake+0x150>
 8007ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ed0:	f001 ffe8 	bl	8009ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ed4:	463a      	mov	r2, r7
 8007ed6:	f107 030c 	add.w	r3, r7, #12
 8007eda:	4611      	mov	r1, r2
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 ffe7 	bl	8008eb0 <xTaskCheckForTimeOut>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d132      	bne.n	8007f4e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007eea:	f000 fa2e 	bl	800834a <prvIsQueueEmpty>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d026      	beq.n	8007f42 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d109      	bne.n	8007f10 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8007efc:	f001 ffa2 	bl	8009e44 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f001 f939 	bl	800917c <xTaskPriorityInherit>
 8007f0a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007f0c:	f001 ffca 	bl	8009ea4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f12:	3324      	adds	r3, #36	; 0x24
 8007f14:	683a      	ldr	r2, [r7, #0]
 8007f16:	4611      	mov	r1, r2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 ff01 	bl	8008d20 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007f1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f20:	f000 f9c1 	bl	80082a6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007f24:	f000 fd24 	bl	8008970 <xTaskResumeAll>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f47f af68 	bne.w	8007e00 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8007f30:	4b18      	ldr	r3, [pc, #96]	; (8007f94 <xQueueSemaphoreTake+0x214>)
 8007f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	f3bf 8f4f 	dsb	sy
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	e75e      	b.n	8007e00 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f44:	f000 f9af 	bl	80082a6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007f48:	f000 fd12 	bl	8008970 <xTaskResumeAll>
 8007f4c:	e758      	b.n	8007e00 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007f4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f50:	f000 f9a9 	bl	80082a6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007f54:	f000 fd0c 	bl	8008970 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007f58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f5a:	f000 f9f6 	bl	800834a <prvIsQueueEmpty>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	f43f af4d 	beq.w	8007e00 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00d      	beq.n	8007f88 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8007f6c:	f001 ff6a 	bl	8009e44 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007f70:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007f72:	f000 f8f0 	bl	8008156 <prvGetDisinheritPriorityAfterTimeout>
 8007f76:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7a:	689b      	ldr	r3, [r3, #8]
 8007f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f001 f9f8 	bl	8009374 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007f84:	f001 ff8e 	bl	8009ea4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007f88:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3738      	adds	r7, #56	; 0x38
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	e000ed04 	.word	0xe000ed04

08007f98 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08e      	sub	sp, #56	; 0x38
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10a      	bne.n	8007fc4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	623b      	str	r3, [r7, #32]
}
 8007fc0:	bf00      	nop
 8007fc2:	e7fe      	b.n	8007fc2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d103      	bne.n	8007fd2 <xQueueReceiveFromISR+0x3a>
 8007fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d101      	bne.n	8007fd6 <xQueueReceiveFromISR+0x3e>
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e000      	b.n	8007fd8 <xQueueReceiveFromISR+0x40>
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	61fb      	str	r3, [r7, #28]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007ff2:	f002 f809 	bl	800a008 <vPortValidateInterruptPriority>
	__asm volatile
 8007ff6:	f3ef 8211 	mrs	r2, BASEPRI
 8007ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffe:	f383 8811 	msr	BASEPRI, r3
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	f3bf 8f4f 	dsb	sy
 800800a:	61ba      	str	r2, [r7, #24]
 800800c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800800e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008010:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008016:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	2b00      	cmp	r3, #0
 800801c:	d02f      	beq.n	800807e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800801e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008028:	68b9      	ldr	r1, [r7, #8]
 800802a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800802c:	f000 f915 	bl	800825a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008032:	1e5a      	subs	r2, r3, #1
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008038:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800803c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008040:	d112      	bne.n	8008068 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d016      	beq.n	8008078 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	3310      	adds	r3, #16
 800804e:	4618      	mov	r0, r3
 8008050:	f000 feb6 	bl	8008dc0 <xTaskRemoveFromEventList>
 8008054:	4603      	mov	r3, r0
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00e      	beq.n	8008078 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00b      	beq.n	8008078 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	601a      	str	r2, [r3, #0]
 8008066:	e007      	b.n	8008078 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800806c:	3301      	adds	r3, #1
 800806e:	b2db      	uxtb	r3, r3
 8008070:	b25a      	sxtb	r2, r3
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008078:	2301      	movs	r3, #1
 800807a:	637b      	str	r3, [r7, #52]	; 0x34
 800807c:	e001      	b.n	8008082 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800807e:	2300      	movs	r3, #0
 8008080:	637b      	str	r3, [r7, #52]	; 0x34
 8008082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008084:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f383 8811 	msr	BASEPRI, r3
}
 800808c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800808e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008090:	4618      	mov	r0, r3
 8008092:	3738      	adds	r7, #56	; 0x38
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10a      	bne.n	80080bc <uxQueueMessagesWaiting+0x24>
	__asm volatile
 80080a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080aa:	f383 8811 	msr	BASEPRI, r3
 80080ae:	f3bf 8f6f 	isb	sy
 80080b2:	f3bf 8f4f 	dsb	sy
 80080b6:	60bb      	str	r3, [r7, #8]
}
 80080b8:	bf00      	nop
 80080ba:	e7fe      	b.n	80080ba <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 80080bc:	f001 fec2 	bl	8009e44 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80080c6:	f001 feed 	bl	8009ea4 <vPortExitCritical>

	return uxReturn;
 80080ca:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80080cc:	4618      	mov	r0, r3
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}

080080d4 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80080d4:	b480      	push	{r7}
 80080d6:	b087      	sub	sp, #28
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d10a      	bne.n	80080fc <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	60fb      	str	r3, [r7, #12]
}
 80080f8:	bf00      	nop
 80080fa:	e7fe      	b.n	80080fa <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8008102:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008104:	4618      	mov	r0, r3
 8008106:	371c      	adds	r7, #28
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10a      	bne.n	8008138 <vQueueDelete+0x28>
	__asm volatile
 8008122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008126:	f383 8811 	msr	BASEPRI, r3
 800812a:	f3bf 8f6f 	isb	sy
 800812e:	f3bf 8f4f 	dsb	sy
 8008132:	60bb      	str	r3, [r7, #8]
}
 8008134:	bf00      	nop
 8008136:	e7fe      	b.n	8008136 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f000 f95f 	bl	80083fc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f002 f869 	bl	800a220 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800814e:	bf00      	nop
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008156:	b480      	push	{r7}
 8008158:	b085      	sub	sp, #20
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	2b00      	cmp	r3, #0
 8008164:	d006      	beq.n	8008174 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f1c3 0307 	rsb	r3, r3, #7
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	e001      	b.n	8008178 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008178:	68fb      	ldr	r3, [r7, #12]
	}
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008186:	b580      	push	{r7, lr}
 8008188:	b086      	sub	sp, #24
 800818a:	af00      	add	r7, sp, #0
 800818c:	60f8      	str	r0, [r7, #12]
 800818e:	60b9      	str	r1, [r7, #8]
 8008190:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008192:	2300      	movs	r3, #0
 8008194:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d10d      	bne.n	80081c0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d14d      	bne.n	8008248 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 f859 	bl	8009268 <xTaskPriorityDisinherit>
 80081b6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	2200      	movs	r2, #0
 80081bc:	609a      	str	r2, [r3, #8]
 80081be:	e043      	b.n	8008248 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d119      	bne.n	80081fa <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6858      	ldr	r0, [r3, #4]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	461a      	mov	r2, r3
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	f019 fc10 	bl	80219f6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	685a      	ldr	r2, [r3, #4]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	441a      	add	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d32b      	bcc.n	8008248 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	605a      	str	r2, [r3, #4]
 80081f8:	e026      	b.n	8008248 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	68d8      	ldr	r0, [r3, #12]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008202:	461a      	mov	r2, r3
 8008204:	68b9      	ldr	r1, [r7, #8]
 8008206:	f019 fbf6 	bl	80219f6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008212:	425b      	negs	r3, r3
 8008214:	441a      	add	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	68da      	ldr	r2, [r3, #12]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	429a      	cmp	r2, r3
 8008224:	d207      	bcs.n	8008236 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	425b      	negs	r3, r3
 8008230:	441a      	add	r2, r3
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2b02      	cmp	r3, #2
 800823a:	d105      	bne.n	8008248 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d002      	beq.n	8008248 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	3b01      	subs	r3, #1
 8008246:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	1c5a      	adds	r2, r3, #1
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008250:	697b      	ldr	r3, [r7, #20]
}
 8008252:	4618      	mov	r0, r3
 8008254:	3718      	adds	r7, #24
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}

0800825a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800825a:	b580      	push	{r7, lr}
 800825c:	b082      	sub	sp, #8
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008268:	2b00      	cmp	r3, #0
 800826a:	d018      	beq.n	800829e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008274:	441a      	add	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68da      	ldr	r2, [r3, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	429a      	cmp	r2, r3
 8008284:	d303      	bcc.n	800828e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68d9      	ldr	r1, [r3, #12]
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008296:	461a      	mov	r2, r3
 8008298:	6838      	ldr	r0, [r7, #0]
 800829a:	f019 fbac 	bl	80219f6 <memcpy>
	}
}
 800829e:	bf00      	nop
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80082ae:	f001 fdc9 	bl	8009e44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082b8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082ba:	e011      	b.n	80082e0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d012      	beq.n	80082ea <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	3324      	adds	r3, #36	; 0x24
 80082c8:	4618      	mov	r0, r3
 80082ca:	f000 fd79 	bl	8008dc0 <xTaskRemoveFromEventList>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d001      	beq.n	80082d8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082d4:	f000 fe4e 	bl	8008f74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	3b01      	subs	r3, #1
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	dce9      	bgt.n	80082bc <prvUnlockQueue+0x16>
 80082e8:	e000      	b.n	80082ec <prvUnlockQueue+0x46>
					break;
 80082ea:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	22ff      	movs	r2, #255	; 0xff
 80082f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082f4:	f001 fdd6 	bl	8009ea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082f8:	f001 fda4 	bl	8009e44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008302:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008304:	e011      	b.n	800832a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	691b      	ldr	r3, [r3, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d012      	beq.n	8008334 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	3310      	adds	r3, #16
 8008312:	4618      	mov	r0, r3
 8008314:	f000 fd54 	bl	8008dc0 <xTaskRemoveFromEventList>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800831e:	f000 fe29 	bl	8008f74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008322:	7bbb      	ldrb	r3, [r7, #14]
 8008324:	3b01      	subs	r3, #1
 8008326:	b2db      	uxtb	r3, r3
 8008328:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800832a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800832e:	2b00      	cmp	r3, #0
 8008330:	dce9      	bgt.n	8008306 <prvUnlockQueue+0x60>
 8008332:	e000      	b.n	8008336 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008334:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	22ff      	movs	r2, #255	; 0xff
 800833a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800833e:	f001 fdb1 	bl	8009ea4 <vPortExitCritical>
}
 8008342:	bf00      	nop
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b084      	sub	sp, #16
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008352:	f001 fd77 	bl	8009e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800835a:	2b00      	cmp	r3, #0
 800835c:	d102      	bne.n	8008364 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800835e:	2301      	movs	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
 8008362:	e001      	b.n	8008368 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008364:	2300      	movs	r3, #0
 8008366:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008368:	f001 fd9c 	bl	8009ea4 <vPortExitCritical>

	return xReturn;
 800836c:	68fb      	ldr	r3, [r7, #12]
}
 800836e:	4618      	mov	r0, r3
 8008370:	3710      	adds	r7, #16
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}

08008376 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b084      	sub	sp, #16
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800837e:	f001 fd61 	bl	8009e44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800838a:	429a      	cmp	r2, r3
 800838c:	d102      	bne.n	8008394 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800838e:	2301      	movs	r3, #1
 8008390:	60fb      	str	r3, [r7, #12]
 8008392:	e001      	b.n	8008398 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008394:	2300      	movs	r3, #0
 8008396:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008398:	f001 fd84 	bl	8009ea4 <vPortExitCritical>

	return xReturn;
 800839c:	68fb      	ldr	r3, [r7, #12]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80083a8:	b480      	push	{r7}
 80083aa:	b085      	sub	sp, #20
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	e014      	b.n	80083e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80083b8:	4a0f      	ldr	r2, [pc, #60]	; (80083f8 <vQueueAddToRegistry+0x50>)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d10b      	bne.n	80083dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083c4:	490c      	ldr	r1, [pc, #48]	; (80083f8 <vQueueAddToRegistry+0x50>)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083ce:	4a0a      	ldr	r2, [pc, #40]	; (80083f8 <vQueueAddToRegistry+0x50>)
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	00db      	lsls	r3, r3, #3
 80083d4:	4413      	add	r3, r2
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083da:	e006      	b.n	80083ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3301      	adds	r3, #1
 80083e0:	60fb      	str	r3, [r7, #12]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b07      	cmp	r3, #7
 80083e6:	d9e7      	bls.n	80083b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083e8:	bf00      	nop
 80083ea:	bf00      	nop
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	2000572c 	.word	0x2000572c

080083fc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80083fc:	b480      	push	{r7}
 80083fe:	b085      	sub	sp, #20
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008404:	2300      	movs	r3, #0
 8008406:	60fb      	str	r3, [r7, #12]
 8008408:	e016      	b.n	8008438 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800840a:	4a10      	ldr	r2, [pc, #64]	; (800844c <vQueueUnregisterQueue+0x50>)
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	4413      	add	r3, r2
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	429a      	cmp	r2, r3
 8008418:	d10b      	bne.n	8008432 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800841a:	4a0c      	ldr	r2, [pc, #48]	; (800844c <vQueueUnregisterQueue+0x50>)
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	2100      	movs	r1, #0
 8008420:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008424:	4a09      	ldr	r2, [pc, #36]	; (800844c <vQueueUnregisterQueue+0x50>)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	00db      	lsls	r3, r3, #3
 800842a:	4413      	add	r3, r2
 800842c:	2200      	movs	r2, #0
 800842e:	605a      	str	r2, [r3, #4]
				break;
 8008430:	e006      	b.n	8008440 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3301      	adds	r3, #1
 8008436:	60fb      	str	r3, [r7, #12]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2b07      	cmp	r3, #7
 800843c:	d9e5      	bls.n	800840a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800843e:	bf00      	nop
 8008440:	bf00      	nop
 8008442:	3714      	adds	r7, #20
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr
 800844c:	2000572c 	.word	0x2000572c

08008450 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008450:	b580      	push	{r7, lr}
 8008452:	b086      	sub	sp, #24
 8008454:	af00      	add	r7, sp, #0
 8008456:	60f8      	str	r0, [r7, #12]
 8008458:	60b9      	str	r1, [r7, #8]
 800845a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008460:	f001 fcf0 	bl	8009e44 <vPortEnterCritical>
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800846a:	b25b      	sxtb	r3, r3
 800846c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008470:	d103      	bne.n	800847a <vQueueWaitForMessageRestricted+0x2a>
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008480:	b25b      	sxtb	r3, r3
 8008482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008486:	d103      	bne.n	8008490 <vQueueWaitForMessageRestricted+0x40>
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008490:	f001 fd08 	bl	8009ea4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	2b00      	cmp	r3, #0
 800849a:	d106      	bne.n	80084aa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	3324      	adds	r3, #36	; 0x24
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	68b9      	ldr	r1, [r7, #8]
 80084a4:	4618      	mov	r0, r3
 80084a6:	f000 fc5f 	bl	8008d68 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80084aa:	6978      	ldr	r0, [r7, #20]
 80084ac:	f7ff fefb 	bl	80082a6 <prvUnlockQueue>
	}
 80084b0:	bf00      	nop
 80084b2:	3718      	adds	r7, #24
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b08e      	sub	sp, #56	; 0x38
 80084bc:	af04      	add	r7, sp, #16
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
 80084c4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80084c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	623b      	str	r3, [r7, #32]
}
 80084de:	bf00      	nop
 80084e0:	e7fe      	b.n	80084e0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80084e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10a      	bne.n	80084fe <xTaskCreateStatic+0x46>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	61fb      	str	r3, [r7, #28]
}
 80084fa:	bf00      	nop
 80084fc:	e7fe      	b.n	80084fc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80084fe:	23a0      	movs	r3, #160	; 0xa0
 8008500:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	2ba0      	cmp	r3, #160	; 0xa0
 8008506:	d00a      	beq.n	800851e <xTaskCreateStatic+0x66>
	__asm volatile
 8008508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	61bb      	str	r3, [r7, #24]
}
 800851a:	bf00      	nop
 800851c:	e7fe      	b.n	800851c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800851e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	2b00      	cmp	r3, #0
 8008524:	d01e      	beq.n	8008564 <xTaskCreateStatic+0xac>
 8008526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01b      	beq.n	8008564 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800852c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800852e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008532:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008534:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	2202      	movs	r2, #2
 800853a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800853e:	2300      	movs	r3, #0
 8008540:	9303      	str	r3, [sp, #12]
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	9302      	str	r3, [sp, #8]
 8008546:	f107 0314 	add.w	r3, r7, #20
 800854a:	9301      	str	r3, [sp, #4]
 800854c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854e:	9300      	str	r3, [sp, #0]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	687a      	ldr	r2, [r7, #4]
 8008554:	68b9      	ldr	r1, [r7, #8]
 8008556:	68f8      	ldr	r0, [r7, #12]
 8008558:	f000 f850 	bl	80085fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800855c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800855e:	f000 f8eb 	bl	8008738 <prvAddNewTaskToReadyList>
 8008562:	e001      	b.n	8008568 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008564:	2300      	movs	r3, #0
 8008566:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008568:	697b      	ldr	r3, [r7, #20]
	}
 800856a:	4618      	mov	r0, r3
 800856c:	3728      	adds	r7, #40	; 0x28
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008572:	b580      	push	{r7, lr}
 8008574:	b08c      	sub	sp, #48	; 0x30
 8008576:	af04      	add	r7, sp, #16
 8008578:	60f8      	str	r0, [r7, #12]
 800857a:	60b9      	str	r1, [r7, #8]
 800857c:	603b      	str	r3, [r7, #0]
 800857e:	4613      	mov	r3, r2
 8008580:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008582:	88fb      	ldrh	r3, [r7, #6]
 8008584:	009b      	lsls	r3, r3, #2
 8008586:	4618      	mov	r0, r3
 8008588:	f001 fd7e 	bl	800a088 <pvPortMalloc>
 800858c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d00e      	beq.n	80085b2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008594:	20a0      	movs	r0, #160	; 0xa0
 8008596:	f001 fd77 	bl	800a088 <pvPortMalloc>
 800859a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	631a      	str	r2, [r3, #48]	; 0x30
 80085a8:	e005      	b.n	80085b6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80085aa:	6978      	ldr	r0, [r7, #20]
 80085ac:	f001 fe38 	bl	800a220 <vPortFree>
 80085b0:	e001      	b.n	80085b6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80085b2:	2300      	movs	r3, #0
 80085b4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d017      	beq.n	80085ec <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80085bc:	69fb      	ldr	r3, [r7, #28]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085c4:	88fa      	ldrh	r2, [r7, #6]
 80085c6:	2300      	movs	r3, #0
 80085c8:	9303      	str	r3, [sp, #12]
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	9302      	str	r3, [sp, #8]
 80085ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d0:	9301      	str	r3, [sp, #4]
 80085d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	68b9      	ldr	r1, [r7, #8]
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 f80e 	bl	80085fc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80085e0:	69f8      	ldr	r0, [r7, #28]
 80085e2:	f000 f8a9 	bl	8008738 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80085e6:	2301      	movs	r3, #1
 80085e8:	61bb      	str	r3, [r7, #24]
 80085ea:	e002      	b.n	80085f2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085f0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80085f2:	69bb      	ldr	r3, [r7, #24]
	}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3720      	adds	r7, #32
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b088      	sub	sp, #32
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	607a      	str	r2, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008614:	3b01      	subs	r3, #1
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	f023 0307 	bic.w	r3, r3, #7
 8008622:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00a      	beq.n	8008644 <prvInitialiseNewTask+0x48>
	__asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	617b      	str	r3, [r7, #20]
}
 8008640:	bf00      	nop
 8008642:	e7fe      	b.n	8008642 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d01f      	beq.n	800868a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800864a:	2300      	movs	r3, #0
 800864c:	61fb      	str	r3, [r7, #28]
 800864e:	e012      	b.n	8008676 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008650:	68ba      	ldr	r2, [r7, #8]
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	4413      	add	r3, r2
 8008656:	7819      	ldrb	r1, [r3, #0]
 8008658:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	4413      	add	r3, r2
 800865e:	3334      	adds	r3, #52	; 0x34
 8008660:	460a      	mov	r2, r1
 8008662:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008664:	68ba      	ldr	r2, [r7, #8]
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	4413      	add	r3, r2
 800866a:	781b      	ldrb	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d006      	beq.n	800867e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	3301      	adds	r3, #1
 8008674:	61fb      	str	r3, [r7, #28]
 8008676:	69fb      	ldr	r3, [r7, #28]
 8008678:	2b0f      	cmp	r3, #15
 800867a:	d9e9      	bls.n	8008650 <prvInitialiseNewTask+0x54>
 800867c:	e000      	b.n	8008680 <prvInitialiseNewTask+0x84>
			{
				break;
 800867e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	2200      	movs	r2, #0
 8008684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008688:	e003      	b.n	8008692 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	2200      	movs	r2, #0
 800868e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008694:	2b06      	cmp	r3, #6
 8008696:	d901      	bls.n	800869c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008698:	2306      	movs	r3, #6
 800869a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800869c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086a6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80086a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086aa:	2200      	movs	r2, #0
 80086ac:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	3304      	adds	r3, #4
 80086b2:	4618      	mov	r0, r3
 80086b4:	f7fe fe43 	bl	800733e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ba:	3318      	adds	r3, #24
 80086bc:	4618      	mov	r0, r3
 80086be:	f7fe fe3e 	bl	800733e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ca:	f1c3 0207 	rsb	r2, r3, #7
 80086ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80086d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80086e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e2:	2200      	movs	r2, #0
 80086e4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80086e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ea:	334c      	adds	r3, #76	; 0x4c
 80086ec:	224c      	movs	r2, #76	; 0x4c
 80086ee:	2100      	movs	r1, #0
 80086f0:	4618      	mov	r0, r3
 80086f2:	f019 f877 	bl	80217e4 <memset>
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	4a0c      	ldr	r2, [pc, #48]	; (800872c <prvInitialiseNewTask+0x130>)
 80086fa:	651a      	str	r2, [r3, #80]	; 0x50
 80086fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fe:	4a0c      	ldr	r2, [pc, #48]	; (8008730 <prvInitialiseNewTask+0x134>)
 8008700:	655a      	str	r2, [r3, #84]	; 0x54
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008704:	4a0b      	ldr	r2, [pc, #44]	; (8008734 <prvInitialiseNewTask+0x138>)
 8008706:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008708:	683a      	ldr	r2, [r7, #0]
 800870a:	68f9      	ldr	r1, [r7, #12]
 800870c:	69b8      	ldr	r0, [r7, #24]
 800870e:	f001 fa6b 	bl	8009be8 <pxPortInitialiseStack>
 8008712:	4602      	mov	r2, r0
 8008714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008716:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800871a:	2b00      	cmp	r3, #0
 800871c:	d002      	beq.n	8008724 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800871e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008722:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008724:	bf00      	nop
 8008726:	3720      	adds	r7, #32
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}
 800872c:	20012b28 	.word	0x20012b28
 8008730:	20012b90 	.word	0x20012b90
 8008734:	20012bf8 	.word	0x20012bf8

08008738 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b082      	sub	sp, #8
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008740:	f001 fb80 	bl	8009e44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008744:	4b2a      	ldr	r3, [pc, #168]	; (80087f0 <prvAddNewTaskToReadyList+0xb8>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3301      	adds	r3, #1
 800874a:	4a29      	ldr	r2, [pc, #164]	; (80087f0 <prvAddNewTaskToReadyList+0xb8>)
 800874c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800874e:	4b29      	ldr	r3, [pc, #164]	; (80087f4 <prvAddNewTaskToReadyList+0xbc>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d109      	bne.n	800876a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008756:	4a27      	ldr	r2, [pc, #156]	; (80087f4 <prvAddNewTaskToReadyList+0xbc>)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800875c:	4b24      	ldr	r3, [pc, #144]	; (80087f0 <prvAddNewTaskToReadyList+0xb8>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d110      	bne.n	8008786 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008764:	f000 fc2a 	bl	8008fbc <prvInitialiseTaskLists>
 8008768:	e00d      	b.n	8008786 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800876a:	4b23      	ldr	r3, [pc, #140]	; (80087f8 <prvAddNewTaskToReadyList+0xc0>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d109      	bne.n	8008786 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008772:	4b20      	ldr	r3, [pc, #128]	; (80087f4 <prvAddNewTaskToReadyList+0xbc>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	429a      	cmp	r2, r3
 800877e:	d802      	bhi.n	8008786 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008780:	4a1c      	ldr	r2, [pc, #112]	; (80087f4 <prvAddNewTaskToReadyList+0xbc>)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008786:	4b1d      	ldr	r3, [pc, #116]	; (80087fc <prvAddNewTaskToReadyList+0xc4>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	3301      	adds	r3, #1
 800878c:	4a1b      	ldr	r2, [pc, #108]	; (80087fc <prvAddNewTaskToReadyList+0xc4>)
 800878e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008794:	2201      	movs	r2, #1
 8008796:	409a      	lsls	r2, r3
 8008798:	4b19      	ldr	r3, [pc, #100]	; (8008800 <prvAddNewTaskToReadyList+0xc8>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4313      	orrs	r3, r2
 800879e:	4a18      	ldr	r2, [pc, #96]	; (8008800 <prvAddNewTaskToReadyList+0xc8>)
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a6:	4613      	mov	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	4413      	add	r3, r2
 80087ac:	009b      	lsls	r3, r3, #2
 80087ae:	4a15      	ldr	r2, [pc, #84]	; (8008804 <prvAddNewTaskToReadyList+0xcc>)
 80087b0:	441a      	add	r2, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	3304      	adds	r3, #4
 80087b6:	4619      	mov	r1, r3
 80087b8:	4610      	mov	r0, r2
 80087ba:	f7fe fdcd 	bl	8007358 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80087be:	f001 fb71 	bl	8009ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80087c2:	4b0d      	ldr	r3, [pc, #52]	; (80087f8 <prvAddNewTaskToReadyList+0xc0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00e      	beq.n	80087e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80087ca:	4b0a      	ldr	r3, [pc, #40]	; (80087f4 <prvAddNewTaskToReadyList+0xbc>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d207      	bcs.n	80087e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80087d8:	4b0b      	ldr	r3, [pc, #44]	; (8008808 <prvAddNewTaskToReadyList+0xd0>)
 80087da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80087e8:	bf00      	nop
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}
 80087f0:	2000586c 	.word	0x2000586c
 80087f4:	2000576c 	.word	0x2000576c
 80087f8:	20005878 	.word	0x20005878
 80087fc:	20005888 	.word	0x20005888
 8008800:	20005874 	.word	0x20005874
 8008804:	20005770 	.word	0x20005770
 8008808:	e000ed04 	.word	0xe000ed04

0800880c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008814:	2300      	movs	r3, #0
 8008816:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d017      	beq.n	800884e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800881e:	4b13      	ldr	r3, [pc, #76]	; (800886c <vTaskDelay+0x60>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00a      	beq.n	800883c <vTaskDelay+0x30>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	60bb      	str	r3, [r7, #8]
}
 8008838:	bf00      	nop
 800883a:	e7fe      	b.n	800883a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800883c:	f000 f88a 	bl	8008954 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008840:	2100      	movs	r1, #0
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fe38 	bl	80094b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008848:	f000 f892 	bl	8008970 <xTaskResumeAll>
 800884c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d107      	bne.n	8008864 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008854:	4b06      	ldr	r3, [pc, #24]	; (8008870 <vTaskDelay+0x64>)
 8008856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008864:	bf00      	nop
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	20005894 	.word	0x20005894
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b08a      	sub	sp, #40	; 0x28
 8008878:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800887a:	2300      	movs	r3, #0
 800887c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800887e:	2300      	movs	r3, #0
 8008880:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008882:	463a      	mov	r2, r7
 8008884:	1d39      	adds	r1, r7, #4
 8008886:	f107 0308 	add.w	r3, r7, #8
 800888a:	4618      	mov	r0, r3
 800888c:	f7f8 f97c 	bl	8000b88 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008890:	6839      	ldr	r1, [r7, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	68ba      	ldr	r2, [r7, #8]
 8008896:	9202      	str	r2, [sp, #8]
 8008898:	9301      	str	r3, [sp, #4]
 800889a:	2300      	movs	r3, #0
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	2300      	movs	r3, #0
 80088a0:	460a      	mov	r2, r1
 80088a2:	4924      	ldr	r1, [pc, #144]	; (8008934 <vTaskStartScheduler+0xc0>)
 80088a4:	4824      	ldr	r0, [pc, #144]	; (8008938 <vTaskStartScheduler+0xc4>)
 80088a6:	f7ff fe07 	bl	80084b8 <xTaskCreateStatic>
 80088aa:	4603      	mov	r3, r0
 80088ac:	4a23      	ldr	r2, [pc, #140]	; (800893c <vTaskStartScheduler+0xc8>)
 80088ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80088b0:	4b22      	ldr	r3, [pc, #136]	; (800893c <vTaskStartScheduler+0xc8>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d002      	beq.n	80088be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80088b8:	2301      	movs	r3, #1
 80088ba:	617b      	str	r3, [r7, #20]
 80088bc:	e001      	b.n	80088c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d102      	bne.n	80088ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80088c8:	f000 fe5c 	bl	8009584 <xTimerCreateTimerTask>
 80088cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d11b      	bne.n	800890c <vTaskStartScheduler+0x98>
	__asm volatile
 80088d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d8:	f383 8811 	msr	BASEPRI, r3
 80088dc:	f3bf 8f6f 	isb	sy
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	613b      	str	r3, [r7, #16]
}
 80088e6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088e8:	4b15      	ldr	r3, [pc, #84]	; (8008940 <vTaskStartScheduler+0xcc>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	334c      	adds	r3, #76	; 0x4c
 80088ee:	4a15      	ldr	r2, [pc, #84]	; (8008944 <vTaskStartScheduler+0xd0>)
 80088f0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088f2:	4b15      	ldr	r3, [pc, #84]	; (8008948 <vTaskStartScheduler+0xd4>)
 80088f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80088f8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088fa:	4b14      	ldr	r3, [pc, #80]	; (800894c <vTaskStartScheduler+0xd8>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008900:	4b13      	ldr	r3, [pc, #76]	; (8008950 <vTaskStartScheduler+0xdc>)
 8008902:	2200      	movs	r2, #0
 8008904:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008906:	f001 f9fb 	bl	8009d00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800890a:	e00e      	b.n	800892a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008912:	d10a      	bne.n	800892a <vTaskStartScheduler+0xb6>
	__asm volatile
 8008914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008918:	f383 8811 	msr	BASEPRI, r3
 800891c:	f3bf 8f6f 	isb	sy
 8008920:	f3bf 8f4f 	dsb	sy
 8008924:	60fb      	str	r3, [r7, #12]
}
 8008926:	bf00      	nop
 8008928:	e7fe      	b.n	8008928 <vTaskStartScheduler+0xb4>
}
 800892a:	bf00      	nop
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	08022f20 	.word	0x08022f20
 8008938:	08008f8d 	.word	0x08008f8d
 800893c:	20005890 	.word	0x20005890
 8008940:	2000576c 	.word	0x2000576c
 8008944:	20000094 	.word	0x20000094
 8008948:	2000588c 	.word	0x2000588c
 800894c:	20005878 	.word	0x20005878
 8008950:	20005870 	.word	0x20005870

08008954 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008954:	b480      	push	{r7}
 8008956:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008958:	4b04      	ldr	r3, [pc, #16]	; (800896c <vTaskSuspendAll+0x18>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3301      	adds	r3, #1
 800895e:	4a03      	ldr	r2, [pc, #12]	; (800896c <vTaskSuspendAll+0x18>)
 8008960:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008962:	bf00      	nop
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	20005894 	.word	0x20005894

08008970 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008976:	2300      	movs	r3, #0
 8008978:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800897a:	2300      	movs	r3, #0
 800897c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800897e:	4b41      	ldr	r3, [pc, #260]	; (8008a84 <xTaskResumeAll+0x114>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10a      	bne.n	800899c <xTaskResumeAll+0x2c>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	603b      	str	r3, [r7, #0]
}
 8008998:	bf00      	nop
 800899a:	e7fe      	b.n	800899a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800899c:	f001 fa52 	bl	8009e44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80089a0:	4b38      	ldr	r3, [pc, #224]	; (8008a84 <xTaskResumeAll+0x114>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	3b01      	subs	r3, #1
 80089a6:	4a37      	ldr	r2, [pc, #220]	; (8008a84 <xTaskResumeAll+0x114>)
 80089a8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089aa:	4b36      	ldr	r3, [pc, #216]	; (8008a84 <xTaskResumeAll+0x114>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d161      	bne.n	8008a76 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089b2:	4b35      	ldr	r3, [pc, #212]	; (8008a88 <xTaskResumeAll+0x118>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d05d      	beq.n	8008a76 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089ba:	e02e      	b.n	8008a1a <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089bc:	4b33      	ldr	r3, [pc, #204]	; (8008a8c <xTaskResumeAll+0x11c>)
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	3318      	adds	r3, #24
 80089c8:	4618      	mov	r0, r3
 80089ca:	f7fe fd22 	bl	8007412 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	3304      	adds	r3, #4
 80089d2:	4618      	mov	r0, r3
 80089d4:	f7fe fd1d 	bl	8007412 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089dc:	2201      	movs	r2, #1
 80089de:	409a      	lsls	r2, r3
 80089e0:	4b2b      	ldr	r3, [pc, #172]	; (8008a90 <xTaskResumeAll+0x120>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	4a2a      	ldr	r2, [pc, #168]	; (8008a90 <xTaskResumeAll+0x120>)
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ee:	4613      	mov	r3, r2
 80089f0:	009b      	lsls	r3, r3, #2
 80089f2:	4413      	add	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4a27      	ldr	r2, [pc, #156]	; (8008a94 <xTaskResumeAll+0x124>)
 80089f8:	441a      	add	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	3304      	adds	r3, #4
 80089fe:	4619      	mov	r1, r3
 8008a00:	4610      	mov	r0, r2
 8008a02:	f7fe fca9 	bl	8007358 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a0a:	4b23      	ldr	r3, [pc, #140]	; (8008a98 <xTaskResumeAll+0x128>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d302      	bcc.n	8008a1a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008a14:	4b21      	ldr	r3, [pc, #132]	; (8008a9c <xTaskResumeAll+0x12c>)
 8008a16:	2201      	movs	r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a1a:	4b1c      	ldr	r3, [pc, #112]	; (8008a8c <xTaskResumeAll+0x11c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1cc      	bne.n	80089bc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a28:	f000 fb6a 	bl	8009100 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008a2c:	4b1c      	ldr	r3, [pc, #112]	; (8008aa0 <xTaskResumeAll+0x130>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d010      	beq.n	8008a5a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a38:	f000 f858 	bl	8008aec <xTaskIncrementTick>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d002      	beq.n	8008a48 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008a42:	4b16      	ldr	r3, [pc, #88]	; (8008a9c <xTaskResumeAll+0x12c>)
 8008a44:	2201      	movs	r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3b01      	subs	r3, #1
 8008a4c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1f1      	bne.n	8008a38 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008a54:	4b12      	ldr	r3, [pc, #72]	; (8008aa0 <xTaskResumeAll+0x130>)
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a5a:	4b10      	ldr	r3, [pc, #64]	; (8008a9c <xTaskResumeAll+0x12c>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d009      	beq.n	8008a76 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a62:	2301      	movs	r3, #1
 8008a64:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a66:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <xTaskResumeAll+0x134>)
 8008a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a6c:	601a      	str	r2, [r3, #0]
 8008a6e:	f3bf 8f4f 	dsb	sy
 8008a72:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a76:	f001 fa15 	bl	8009ea4 <vPortExitCritical>

	return xAlreadyYielded;
 8008a7a:	68bb      	ldr	r3, [r7, #8]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	20005894 	.word	0x20005894
 8008a88:	2000586c 	.word	0x2000586c
 8008a8c:	2000582c 	.word	0x2000582c
 8008a90:	20005874 	.word	0x20005874
 8008a94:	20005770 	.word	0x20005770
 8008a98:	2000576c 	.word	0x2000576c
 8008a9c:	20005880 	.word	0x20005880
 8008aa0:	2000587c 	.word	0x2000587c
 8008aa4:	e000ed04 	.word	0xe000ed04

08008aa8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008aae:	4b05      	ldr	r3, [pc, #20]	; (8008ac4 <xTaskGetTickCount+0x1c>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008ab4:	687b      	ldr	r3, [r7, #4]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	370c      	adds	r7, #12
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	20005870 	.word	0x20005870

08008ac8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008ace:	f001 fa9b 	bl	800a008 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008ad6:	4b04      	ldr	r3, [pc, #16]	; (8008ae8 <xTaskGetTickCountFromISR+0x20>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008adc:	683b      	ldr	r3, [r7, #0]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	20005870 	.word	0x20005870

08008aec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b086      	sub	sp, #24
 8008af0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008af2:	2300      	movs	r3, #0
 8008af4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008af6:	4b4e      	ldr	r3, [pc, #312]	; (8008c30 <xTaskIncrementTick+0x144>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f040 808e 	bne.w	8008c1c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008b00:	4b4c      	ldr	r3, [pc, #304]	; (8008c34 <xTaskIncrementTick+0x148>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3301      	adds	r3, #1
 8008b06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008b08:	4a4a      	ldr	r2, [pc, #296]	; (8008c34 <xTaskIncrementTick+0x148>)
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d120      	bne.n	8008b56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008b14:	4b48      	ldr	r3, [pc, #288]	; (8008c38 <xTaskIncrementTick+0x14c>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d00a      	beq.n	8008b34 <xTaskIncrementTick+0x48>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	f383 8811 	msr	BASEPRI, r3
 8008b26:	f3bf 8f6f 	isb	sy
 8008b2a:	f3bf 8f4f 	dsb	sy
 8008b2e:	603b      	str	r3, [r7, #0]
}
 8008b30:	bf00      	nop
 8008b32:	e7fe      	b.n	8008b32 <xTaskIncrementTick+0x46>
 8008b34:	4b40      	ldr	r3, [pc, #256]	; (8008c38 <xTaskIncrementTick+0x14c>)
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	60fb      	str	r3, [r7, #12]
 8008b3a:	4b40      	ldr	r3, [pc, #256]	; (8008c3c <xTaskIncrementTick+0x150>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a3e      	ldr	r2, [pc, #248]	; (8008c38 <xTaskIncrementTick+0x14c>)
 8008b40:	6013      	str	r3, [r2, #0]
 8008b42:	4a3e      	ldr	r2, [pc, #248]	; (8008c3c <xTaskIncrementTick+0x150>)
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	4b3d      	ldr	r3, [pc, #244]	; (8008c40 <xTaskIncrementTick+0x154>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	4a3c      	ldr	r2, [pc, #240]	; (8008c40 <xTaskIncrementTick+0x154>)
 8008b50:	6013      	str	r3, [r2, #0]
 8008b52:	f000 fad5 	bl	8009100 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b56:	4b3b      	ldr	r3, [pc, #236]	; (8008c44 <xTaskIncrementTick+0x158>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d348      	bcc.n	8008bf2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b60:	4b35      	ldr	r3, [pc, #212]	; (8008c38 <xTaskIncrementTick+0x14c>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d104      	bne.n	8008b74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b6a:	4b36      	ldr	r3, [pc, #216]	; (8008c44 <xTaskIncrementTick+0x158>)
 8008b6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b70:	601a      	str	r2, [r3, #0]
					break;
 8008b72:	e03e      	b.n	8008bf2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b74:	4b30      	ldr	r3, [pc, #192]	; (8008c38 <xTaskIncrementTick+0x14c>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	68db      	ldr	r3, [r3, #12]
 8008b7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d203      	bcs.n	8008b94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b8c:	4a2d      	ldr	r2, [pc, #180]	; (8008c44 <xTaskIncrementTick+0x158>)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b92:	e02e      	b.n	8008bf2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	3304      	adds	r3, #4
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f7fe fc3a 	bl	8007412 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d004      	beq.n	8008bb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	3318      	adds	r3, #24
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fc31 	bl	8007412 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb4:	2201      	movs	r2, #1
 8008bb6:	409a      	lsls	r2, r3
 8008bb8:	4b23      	ldr	r3, [pc, #140]	; (8008c48 <xTaskIncrementTick+0x15c>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	4a22      	ldr	r2, [pc, #136]	; (8008c48 <xTaskIncrementTick+0x15c>)
 8008bc0:	6013      	str	r3, [r2, #0]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4a1f      	ldr	r2, [pc, #124]	; (8008c4c <xTaskIncrementTick+0x160>)
 8008bd0:	441a      	add	r2, r3
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	3304      	adds	r3, #4
 8008bd6:	4619      	mov	r1, r3
 8008bd8:	4610      	mov	r0, r2
 8008bda:	f7fe fbbd 	bl	8007358 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008be2:	4b1b      	ldr	r3, [pc, #108]	; (8008c50 <xTaskIncrementTick+0x164>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be8:	429a      	cmp	r2, r3
 8008bea:	d3b9      	bcc.n	8008b60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008bec:	2301      	movs	r3, #1
 8008bee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bf0:	e7b6      	b.n	8008b60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bf2:	4b17      	ldr	r3, [pc, #92]	; (8008c50 <xTaskIncrementTick+0x164>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf8:	4914      	ldr	r1, [pc, #80]	; (8008c4c <xTaskIncrementTick+0x160>)
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	440b      	add	r3, r1
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b01      	cmp	r3, #1
 8008c08:	d901      	bls.n	8008c0e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008c0e:	4b11      	ldr	r3, [pc, #68]	; (8008c54 <xTaskIncrementTick+0x168>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d007      	beq.n	8008c26 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008c16:	2301      	movs	r3, #1
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	e004      	b.n	8008c26 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008c1c:	4b0e      	ldr	r3, [pc, #56]	; (8008c58 <xTaskIncrementTick+0x16c>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3301      	adds	r3, #1
 8008c22:	4a0d      	ldr	r2, [pc, #52]	; (8008c58 <xTaskIncrementTick+0x16c>)
 8008c24:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008c26:	697b      	ldr	r3, [r7, #20]
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3718      	adds	r7, #24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	bd80      	pop	{r7, pc}
 8008c30:	20005894 	.word	0x20005894
 8008c34:	20005870 	.word	0x20005870
 8008c38:	20005824 	.word	0x20005824
 8008c3c:	20005828 	.word	0x20005828
 8008c40:	20005884 	.word	0x20005884
 8008c44:	2000588c 	.word	0x2000588c
 8008c48:	20005874 	.word	0x20005874
 8008c4c:	20005770 	.word	0x20005770
 8008c50:	2000576c 	.word	0x2000576c
 8008c54:	20005880 	.word	0x20005880
 8008c58:	2000587c 	.word	0x2000587c

08008c5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b087      	sub	sp, #28
 8008c60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c62:	4b29      	ldr	r3, [pc, #164]	; (8008d08 <vTaskSwitchContext+0xac>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d003      	beq.n	8008c72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c6a:	4b28      	ldr	r3, [pc, #160]	; (8008d0c <vTaskSwitchContext+0xb0>)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c70:	e044      	b.n	8008cfc <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008c72:	4b26      	ldr	r3, [pc, #152]	; (8008d0c <vTaskSwitchContext+0xb0>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c78:	4b25      	ldr	r3, [pc, #148]	; (8008d10 <vTaskSwitchContext+0xb4>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	fab3 f383 	clz	r3, r3
 8008c84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008c86:	7afb      	ldrb	r3, [r7, #11]
 8008c88:	f1c3 031f 	rsb	r3, r3, #31
 8008c8c:	617b      	str	r3, [r7, #20]
 8008c8e:	4921      	ldr	r1, [pc, #132]	; (8008d14 <vTaskSwitchContext+0xb8>)
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10a      	bne.n	8008cb8 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	607b      	str	r3, [r7, #4]
}
 8008cb4:	bf00      	nop
 8008cb6:	e7fe      	b.n	8008cb6 <vTaskSwitchContext+0x5a>
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	4613      	mov	r3, r2
 8008cbc:	009b      	lsls	r3, r3, #2
 8008cbe:	4413      	add	r3, r2
 8008cc0:	009b      	lsls	r3, r3, #2
 8008cc2:	4a14      	ldr	r2, [pc, #80]	; (8008d14 <vTaskSwitchContext+0xb8>)
 8008cc4:	4413      	add	r3, r2
 8008cc6:	613b      	str	r3, [r7, #16]
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	693b      	ldr	r3, [r7, #16]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d104      	bne.n	8008ce8 <vTaskSwitchContext+0x8c>
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	605a      	str	r2, [r3, #4]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	4a0a      	ldr	r2, [pc, #40]	; (8008d18 <vTaskSwitchContext+0xbc>)
 8008cf0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008cf2:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <vTaskSwitchContext+0xbc>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	334c      	adds	r3, #76	; 0x4c
 8008cf8:	4a08      	ldr	r2, [pc, #32]	; (8008d1c <vTaskSwitchContext+0xc0>)
 8008cfa:	6013      	str	r3, [r2, #0]
}
 8008cfc:	bf00      	nop
 8008cfe:	371c      	adds	r7, #28
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr
 8008d08:	20005894 	.word	0x20005894
 8008d0c:	20005880 	.word	0x20005880
 8008d10:	20005874 	.word	0x20005874
 8008d14:	20005770 	.word	0x20005770
 8008d18:	2000576c 	.word	0x2000576c
 8008d1c:	20000094 	.word	0x20000094

08008d20 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b084      	sub	sp, #16
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
 8008d28:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10a      	bne.n	8008d46 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	60fb      	str	r3, [r7, #12]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d46:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <vTaskPlaceOnEventList+0x44>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3318      	adds	r3, #24
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7fe fb26 	bl	80073a0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d54:	2101      	movs	r1, #1
 8008d56:	6838      	ldr	r0, [r7, #0]
 8008d58:	f000 fbae 	bl	80094b8 <prvAddCurrentTaskToDelayedList>
}
 8008d5c:	bf00      	nop
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	2000576c 	.word	0x2000576c

08008d68 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10a      	bne.n	8008d90 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	617b      	str	r3, [r7, #20]
}
 8008d8c:	bf00      	nop
 8008d8e:	e7fe      	b.n	8008d8e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d90:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <vTaskPlaceOnEventListRestricted+0x54>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3318      	adds	r3, #24
 8008d96:	4619      	mov	r1, r3
 8008d98:	68f8      	ldr	r0, [r7, #12]
 8008d9a:	f7fe fadd 	bl	8007358 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008da4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008da8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008daa:	6879      	ldr	r1, [r7, #4]
 8008dac:	68b8      	ldr	r0, [r7, #8]
 8008dae:	f000 fb83 	bl	80094b8 <prvAddCurrentTaskToDelayedList>
	}
 8008db2:	bf00      	nop
 8008db4:	3718      	adds	r7, #24
 8008db6:	46bd      	mov	sp, r7
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	2000576c 	.word	0x2000576c

08008dc0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008dd0:	693b      	ldr	r3, [r7, #16]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d10a      	bne.n	8008dec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	60fb      	str	r3, [r7, #12]
}
 8008de8:	bf00      	nop
 8008dea:	e7fe      	b.n	8008dea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	3318      	adds	r3, #24
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fe fb0e 	bl	8007412 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008df6:	4b1d      	ldr	r3, [pc, #116]	; (8008e6c <xTaskRemoveFromEventList+0xac>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d11c      	bne.n	8008e38 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	3304      	adds	r3, #4
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe fb05 	bl	8007412 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	409a      	lsls	r2, r3
 8008e10:	4b17      	ldr	r3, [pc, #92]	; (8008e70 <xTaskRemoveFromEventList+0xb0>)
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	4a16      	ldr	r2, [pc, #88]	; (8008e70 <xTaskRemoveFromEventList+0xb0>)
 8008e18:	6013      	str	r3, [r2, #0]
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1e:	4613      	mov	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <xTaskRemoveFromEventList+0xb4>)
 8008e28:	441a      	add	r2, r3
 8008e2a:	693b      	ldr	r3, [r7, #16]
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	4619      	mov	r1, r3
 8008e30:	4610      	mov	r0, r2
 8008e32:	f7fe fa91 	bl	8007358 <vListInsertEnd>
 8008e36:	e005      	b.n	8008e44 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	3318      	adds	r3, #24
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	480e      	ldr	r0, [pc, #56]	; (8008e78 <xTaskRemoveFromEventList+0xb8>)
 8008e40:	f7fe fa8a 	bl	8007358 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e48:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <xTaskRemoveFromEventList+0xbc>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d905      	bls.n	8008e5e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e52:	2301      	movs	r3, #1
 8008e54:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e56:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <xTaskRemoveFromEventList+0xc0>)
 8008e58:	2201      	movs	r2, #1
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e001      	b.n	8008e62 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e62:	697b      	ldr	r3, [r7, #20]
}
 8008e64:	4618      	mov	r0, r3
 8008e66:	3718      	adds	r7, #24
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	bd80      	pop	{r7, pc}
 8008e6c:	20005894 	.word	0x20005894
 8008e70:	20005874 	.word	0x20005874
 8008e74:	20005770 	.word	0x20005770
 8008e78:	2000582c 	.word	0x2000582c
 8008e7c:	2000576c 	.word	0x2000576c
 8008e80:	20005880 	.word	0x20005880

08008e84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <vTaskInternalSetTimeOutState+0x24>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <vTaskInternalSetTimeOutState+0x28>)
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	605a      	str	r2, [r3, #4]
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	20005884 	.word	0x20005884
 8008eac:	20005870 	.word	0x20005870

08008eb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	613b      	str	r3, [r7, #16]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d10a      	bne.n	8008ef2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	60fb      	str	r3, [r7, #12]
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008ef2:	f000 ffa7 	bl	8009e44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ef6:	4b1d      	ldr	r3, [pc, #116]	; (8008f6c <xTaskCheckForTimeOut+0xbc>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	69ba      	ldr	r2, [r7, #24]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f0e:	d102      	bne.n	8008f16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f10:	2300      	movs	r3, #0
 8008f12:	61fb      	str	r3, [r7, #28]
 8008f14:	e023      	b.n	8008f5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	4b15      	ldr	r3, [pc, #84]	; (8008f70 <xTaskCheckForTimeOut+0xc0>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d007      	beq.n	8008f32 <xTaskCheckForTimeOut+0x82>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	685b      	ldr	r3, [r3, #4]
 8008f26:	69ba      	ldr	r2, [r7, #24]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d302      	bcc.n	8008f32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	61fb      	str	r3, [r7, #28]
 8008f30:	e015      	b.n	8008f5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	d20b      	bcs.n	8008f54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	681a      	ldr	r2, [r3, #0]
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	1ad2      	subs	r2, r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff ff9b 	bl	8008e84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	61fb      	str	r3, [r7, #28]
 8008f52:	e004      	b.n	8008f5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f5e:	f000 ffa1 	bl	8009ea4 <vPortExitCritical>

	return xReturn;
 8008f62:	69fb      	ldr	r3, [r7, #28]
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3720      	adds	r7, #32
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}
 8008f6c:	20005870 	.word	0x20005870
 8008f70:	20005884 	.word	0x20005884

08008f74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f74:	b480      	push	{r7}
 8008f76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f78:	4b03      	ldr	r3, [pc, #12]	; (8008f88 <vTaskMissedYield+0x14>)
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	601a      	str	r2, [r3, #0]
}
 8008f7e:	bf00      	nop
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	20005880 	.word	0x20005880

08008f8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b082      	sub	sp, #8
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f94:	f000 f852 	bl	800903c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008f98:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <prvIdleTask+0x28>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d9f9      	bls.n	8008f94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <prvIdleTask+0x2c>)
 8008fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fb0:	e7f0      	b.n	8008f94 <prvIdleTask+0x8>
 8008fb2:	bf00      	nop
 8008fb4:	20005770 	.word	0x20005770
 8008fb8:	e000ed04 	.word	0xe000ed04

08008fbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b082      	sub	sp, #8
 8008fc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	607b      	str	r3, [r7, #4]
 8008fc6:	e00c      	b.n	8008fe2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	4613      	mov	r3, r2
 8008fcc:	009b      	lsls	r3, r3, #2
 8008fce:	4413      	add	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4a12      	ldr	r2, [pc, #72]	; (800901c <prvInitialiseTaskLists+0x60>)
 8008fd4:	4413      	add	r3, r2
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7fe f991 	bl	80072fe <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	3301      	adds	r3, #1
 8008fe0:	607b      	str	r3, [r7, #4]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2b06      	cmp	r3, #6
 8008fe6:	d9ef      	bls.n	8008fc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008fe8:	480d      	ldr	r0, [pc, #52]	; (8009020 <prvInitialiseTaskLists+0x64>)
 8008fea:	f7fe f988 	bl	80072fe <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008fee:	480d      	ldr	r0, [pc, #52]	; (8009024 <prvInitialiseTaskLists+0x68>)
 8008ff0:	f7fe f985 	bl	80072fe <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ff4:	480c      	ldr	r0, [pc, #48]	; (8009028 <prvInitialiseTaskLists+0x6c>)
 8008ff6:	f7fe f982 	bl	80072fe <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ffa:	480c      	ldr	r0, [pc, #48]	; (800902c <prvInitialiseTaskLists+0x70>)
 8008ffc:	f7fe f97f 	bl	80072fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009000:	480b      	ldr	r0, [pc, #44]	; (8009030 <prvInitialiseTaskLists+0x74>)
 8009002:	f7fe f97c 	bl	80072fe <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009006:	4b0b      	ldr	r3, [pc, #44]	; (8009034 <prvInitialiseTaskLists+0x78>)
 8009008:	4a05      	ldr	r2, [pc, #20]	; (8009020 <prvInitialiseTaskLists+0x64>)
 800900a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <prvInitialiseTaskLists+0x7c>)
 800900e:	4a05      	ldr	r2, [pc, #20]	; (8009024 <prvInitialiseTaskLists+0x68>)
 8009010:	601a      	str	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	20005770 	.word	0x20005770
 8009020:	200057fc 	.word	0x200057fc
 8009024:	20005810 	.word	0x20005810
 8009028:	2000582c 	.word	0x2000582c
 800902c:	20005840 	.word	0x20005840
 8009030:	20005858 	.word	0x20005858
 8009034:	20005824 	.word	0x20005824
 8009038:	20005828 	.word	0x20005828

0800903c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b082      	sub	sp, #8
 8009040:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009042:	e019      	b.n	8009078 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009044:	f000 fefe 	bl	8009e44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009048:	4b10      	ldr	r3, [pc, #64]	; (800908c <prvCheckTasksWaitingTermination+0x50>)
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	3304      	adds	r3, #4
 8009054:	4618      	mov	r0, r3
 8009056:	f7fe f9dc 	bl	8007412 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800905a:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <prvCheckTasksWaitingTermination+0x54>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	3b01      	subs	r3, #1
 8009060:	4a0b      	ldr	r2, [pc, #44]	; (8009090 <prvCheckTasksWaitingTermination+0x54>)
 8009062:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009064:	4b0b      	ldr	r3, [pc, #44]	; (8009094 <prvCheckTasksWaitingTermination+0x58>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3b01      	subs	r3, #1
 800906a:	4a0a      	ldr	r2, [pc, #40]	; (8009094 <prvCheckTasksWaitingTermination+0x58>)
 800906c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800906e:	f000 ff19 	bl	8009ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f810 	bl	8009098 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009078:	4b06      	ldr	r3, [pc, #24]	; (8009094 <prvCheckTasksWaitingTermination+0x58>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e1      	bne.n	8009044 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop
 8009084:	3708      	adds	r7, #8
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20005840 	.word	0x20005840
 8009090:	2000586c 	.word	0x2000586c
 8009094:	20005854 	.word	0x20005854

08009098 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	334c      	adds	r3, #76	; 0x4c
 80090a4:	4618      	mov	r0, r3
 80090a6:	f018 fbe3 	bl	8021870 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d108      	bne.n	80090c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 f8b1 	bl	800a220 <vPortFree>
				vPortFree( pxTCB );
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f001 f8ae 	bl	800a220 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090c4:	e018      	b.n	80090f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d103      	bne.n	80090d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f001 f8a5 	bl	800a220 <vPortFree>
	}
 80090d6:	e00f      	b.n	80090f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d00a      	beq.n	80090f8 <prvDeleteTCB+0x60>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	60fb      	str	r3, [r7, #12]
}
 80090f4:	bf00      	nop
 80090f6:	e7fe      	b.n	80090f6 <prvDeleteTCB+0x5e>
	}
 80090f8:	bf00      	nop
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009100:	b480      	push	{r7}
 8009102:	b083      	sub	sp, #12
 8009104:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvResetNextTaskUnblockTime+0x38>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d104      	bne.n	800911a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009110:	4b0a      	ldr	r3, [pc, #40]	; (800913c <prvResetNextTaskUnblockTime+0x3c>)
 8009112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009116:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009118:	e008      	b.n	800912c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800911a:	4b07      	ldr	r3, [pc, #28]	; (8009138 <prvResetNextTaskUnblockTime+0x38>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	4a04      	ldr	r2, [pc, #16]	; (800913c <prvResetNextTaskUnblockTime+0x3c>)
 800912a:	6013      	str	r3, [r2, #0]
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr
 8009138:	20005824 	.word	0x20005824
 800913c:	2000588c 	.word	0x2000588c

08009140 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009140:	b480      	push	{r7}
 8009142:	b083      	sub	sp, #12
 8009144:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009146:	4b0b      	ldr	r3, [pc, #44]	; (8009174 <xTaskGetSchedulerState+0x34>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d102      	bne.n	8009154 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800914e:	2301      	movs	r3, #1
 8009150:	607b      	str	r3, [r7, #4]
 8009152:	e008      	b.n	8009166 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009154:	4b08      	ldr	r3, [pc, #32]	; (8009178 <xTaskGetSchedulerState+0x38>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800915c:	2302      	movs	r3, #2
 800915e:	607b      	str	r3, [r7, #4]
 8009160:	e001      	b.n	8009166 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009162:	2300      	movs	r3, #0
 8009164:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009166:	687b      	ldr	r3, [r7, #4]
	}
 8009168:	4618      	mov	r0, r3
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr
 8009174:	20005878 	.word	0x20005878
 8009178:	20005894 	.word	0x20005894

0800917c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009188:	2300      	movs	r3, #0
 800918a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d05e      	beq.n	8009250 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009196:	4b31      	ldr	r3, [pc, #196]	; (800925c <xTaskPriorityInherit+0xe0>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	429a      	cmp	r2, r3
 800919e:	d24e      	bcs.n	800923e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	db06      	blt.n	80091b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a8:	4b2c      	ldr	r3, [pc, #176]	; (800925c <xTaskPriorityInherit+0xe0>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ae:	f1c3 0207 	rsb	r2, r3, #7
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091b6:	68bb      	ldr	r3, [r7, #8]
 80091b8:	6959      	ldr	r1, [r3, #20]
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091be:	4613      	mov	r3, r2
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	4a26      	ldr	r2, [pc, #152]	; (8009260 <xTaskPriorityInherit+0xe4>)
 80091c8:	4413      	add	r3, r2
 80091ca:	4299      	cmp	r1, r3
 80091cc:	d12f      	bne.n	800922e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	3304      	adds	r3, #4
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fe f91d 	bl	8007412 <uxListRemove>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	2201      	movs	r2, #1
 80091e4:	fa02 f303 	lsl.w	r3, r2, r3
 80091e8:	43da      	mvns	r2, r3
 80091ea:	4b1e      	ldr	r3, [pc, #120]	; (8009264 <xTaskPriorityInherit+0xe8>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4013      	ands	r3, r2
 80091f0:	4a1c      	ldr	r2, [pc, #112]	; (8009264 <xTaskPriorityInherit+0xe8>)
 80091f2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80091f4:	4b19      	ldr	r3, [pc, #100]	; (800925c <xTaskPriorityInherit+0xe0>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80091fe:	68bb      	ldr	r3, [r7, #8]
 8009200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009202:	2201      	movs	r2, #1
 8009204:	409a      	lsls	r2, r3
 8009206:	4b17      	ldr	r3, [pc, #92]	; (8009264 <xTaskPriorityInherit+0xe8>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4313      	orrs	r3, r2
 800920c:	4a15      	ldr	r2, [pc, #84]	; (8009264 <xTaskPriorityInherit+0xe8>)
 800920e:	6013      	str	r3, [r2, #0]
 8009210:	68bb      	ldr	r3, [r7, #8]
 8009212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009214:	4613      	mov	r3, r2
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4a10      	ldr	r2, [pc, #64]	; (8009260 <xTaskPriorityInherit+0xe4>)
 800921e:	441a      	add	r2, r3
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	3304      	adds	r3, #4
 8009224:	4619      	mov	r1, r3
 8009226:	4610      	mov	r0, r2
 8009228:	f7fe f896 	bl	8007358 <vListInsertEnd>
 800922c:	e004      	b.n	8009238 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800922e:	4b0b      	ldr	r3, [pc, #44]	; (800925c <xTaskPriorityInherit+0xe0>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009238:	2301      	movs	r3, #1
 800923a:	60fb      	str	r3, [r7, #12]
 800923c:	e008      	b.n	8009250 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800923e:	68bb      	ldr	r3, [r7, #8]
 8009240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009242:	4b06      	ldr	r3, [pc, #24]	; (800925c <xTaskPriorityInherit+0xe0>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	429a      	cmp	r2, r3
 800924a:	d201      	bcs.n	8009250 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800924c:	2301      	movs	r3, #1
 800924e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009250:	68fb      	ldr	r3, [r7, #12]
	}
 8009252:	4618      	mov	r0, r3
 8009254:	3710      	adds	r7, #16
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	2000576c 	.word	0x2000576c
 8009260:	20005770 	.word	0x20005770
 8009264:	20005874 	.word	0x20005874

08009268 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009274:	2300      	movs	r3, #0
 8009276:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d06e      	beq.n	800935c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800927e:	4b3a      	ldr	r3, [pc, #232]	; (8009368 <xTaskPriorityDisinherit+0x100>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	429a      	cmp	r2, r3
 8009286:	d00a      	beq.n	800929e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	60fb      	str	r3, [r7, #12]
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d10a      	bne.n	80092bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	60bb      	str	r3, [r7, #8]
}
 80092b8:	bf00      	nop
 80092ba:	e7fe      	b.n	80092ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092c0:	1e5a      	subs	r2, r3, #1
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d044      	beq.n	800935c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d140      	bne.n	800935c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	3304      	adds	r3, #4
 80092de:	4618      	mov	r0, r3
 80092e0:	f7fe f897 	bl	8007412 <uxListRemove>
 80092e4:	4603      	mov	r3, r0
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d115      	bne.n	8009316 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092ee:	491f      	ldr	r1, [pc, #124]	; (800936c <xTaskPriorityDisinherit+0x104>)
 80092f0:	4613      	mov	r3, r2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	4413      	add	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	440b      	add	r3, r1
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10a      	bne.n	8009316 <xTaskPriorityDisinherit+0xae>
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009304:	2201      	movs	r2, #1
 8009306:	fa02 f303 	lsl.w	r3, r2, r3
 800930a:	43da      	mvns	r2, r3
 800930c:	4b18      	ldr	r3, [pc, #96]	; (8009370 <xTaskPriorityDisinherit+0x108>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4013      	ands	r3, r2
 8009312:	4a17      	ldr	r2, [pc, #92]	; (8009370 <xTaskPriorityDisinherit+0x108>)
 8009314:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009322:	f1c3 0207 	rsb	r2, r3, #7
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932e:	2201      	movs	r2, #1
 8009330:	409a      	lsls	r2, r3
 8009332:	4b0f      	ldr	r3, [pc, #60]	; (8009370 <xTaskPriorityDisinherit+0x108>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4313      	orrs	r3, r2
 8009338:	4a0d      	ldr	r2, [pc, #52]	; (8009370 <xTaskPriorityDisinherit+0x108>)
 800933a:	6013      	str	r3, [r2, #0]
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4a08      	ldr	r2, [pc, #32]	; (800936c <xTaskPriorityDisinherit+0x104>)
 800934a:	441a      	add	r2, r3
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	3304      	adds	r3, #4
 8009350:	4619      	mov	r1, r3
 8009352:	4610      	mov	r0, r2
 8009354:	f7fe f800 	bl	8007358 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009358:	2301      	movs	r3, #1
 800935a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800935c:	697b      	ldr	r3, [r7, #20]
	}
 800935e:	4618      	mov	r0, r3
 8009360:	3718      	adds	r7, #24
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	2000576c 	.word	0x2000576c
 800936c:	20005770 	.word	0x20005770
 8009370:	20005874 	.word	0x20005874

08009374 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009382:	2301      	movs	r3, #1
 8009384:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d077      	beq.n	800947c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800938c:	69bb      	ldr	r3, [r7, #24]
 800938e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10a      	bne.n	80093aa <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	f383 8811 	msr	BASEPRI, r3
 800939c:	f3bf 8f6f 	isb	sy
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	60fb      	str	r3, [r7, #12]
}
 80093a6:	bf00      	nop
 80093a8:	e7fe      	b.n	80093a8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ae:	683a      	ldr	r2, [r7, #0]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d902      	bls.n	80093ba <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	61fb      	str	r3, [r7, #28]
 80093b8:	e002      	b.n	80093c0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80093ba:	69bb      	ldr	r3, [r7, #24]
 80093bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093be:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	69fa      	ldr	r2, [r7, #28]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d058      	beq.n	800947c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80093ca:	69bb      	ldr	r3, [r7, #24]
 80093cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093ce:	697a      	ldr	r2, [r7, #20]
 80093d0:	429a      	cmp	r2, r3
 80093d2:	d153      	bne.n	800947c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80093d4:	4b2b      	ldr	r3, [pc, #172]	; (8009484 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	69ba      	ldr	r2, [r7, #24]
 80093da:	429a      	cmp	r2, r3
 80093dc:	d10a      	bne.n	80093f4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80093de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e2:	f383 8811 	msr	BASEPRI, r3
 80093e6:	f3bf 8f6f 	isb	sy
 80093ea:	f3bf 8f4f 	dsb	sy
 80093ee:	60bb      	str	r3, [r7, #8]
}
 80093f0:	bf00      	nop
 80093f2:	e7fe      	b.n	80093f2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80093f4:	69bb      	ldr	r3, [r7, #24]
 80093f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093f8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	69fa      	ldr	r2, [r7, #28]
 80093fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009400:	69bb      	ldr	r3, [r7, #24]
 8009402:	699b      	ldr	r3, [r3, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	db04      	blt.n	8009412 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	f1c3 0207 	rsb	r2, r3, #7
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	6959      	ldr	r1, [r3, #20]
 8009416:	693a      	ldr	r2, [r7, #16]
 8009418:	4613      	mov	r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	4413      	add	r3, r2
 800941e:	009b      	lsls	r3, r3, #2
 8009420:	4a19      	ldr	r2, [pc, #100]	; (8009488 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8009422:	4413      	add	r3, r2
 8009424:	4299      	cmp	r1, r3
 8009426:	d129      	bne.n	800947c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	3304      	adds	r3, #4
 800942c:	4618      	mov	r0, r3
 800942e:	f7fd fff0 	bl	8007412 <uxListRemove>
 8009432:	4603      	mov	r3, r0
 8009434:	2b00      	cmp	r3, #0
 8009436:	d10a      	bne.n	800944e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009438:	69bb      	ldr	r3, [r7, #24]
 800943a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800943c:	2201      	movs	r2, #1
 800943e:	fa02 f303 	lsl.w	r3, r2, r3
 8009442:	43da      	mvns	r2, r3
 8009444:	4b11      	ldr	r3, [pc, #68]	; (800948c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4013      	ands	r3, r2
 800944a:	4a10      	ldr	r2, [pc, #64]	; (800948c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800944c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800944e:	69bb      	ldr	r3, [r7, #24]
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	2201      	movs	r2, #1
 8009454:	409a      	lsls	r2, r3
 8009456:	4b0d      	ldr	r3, [pc, #52]	; (800948c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4313      	orrs	r3, r2
 800945c:	4a0b      	ldr	r2, [pc, #44]	; (800948c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009464:	4613      	mov	r3, r2
 8009466:	009b      	lsls	r3, r3, #2
 8009468:	4413      	add	r3, r2
 800946a:	009b      	lsls	r3, r3, #2
 800946c:	4a06      	ldr	r2, [pc, #24]	; (8009488 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800946e:	441a      	add	r2, r3
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	3304      	adds	r3, #4
 8009474:	4619      	mov	r1, r3
 8009476:	4610      	mov	r0, r2
 8009478:	f7fd ff6e 	bl	8007358 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800947c:	bf00      	nop
 800947e:	3720      	adds	r7, #32
 8009480:	46bd      	mov	sp, r7
 8009482:	bd80      	pop	{r7, pc}
 8009484:	2000576c 	.word	0x2000576c
 8009488:	20005770 	.word	0x20005770
 800948c:	20005874 	.word	0x20005874

08009490 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009490:	b480      	push	{r7}
 8009492:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009494:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <pvTaskIncrementMutexHeldCount+0x24>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d004      	beq.n	80094a6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800949c:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <pvTaskIncrementMutexHeldCount+0x24>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80094a2:	3201      	adds	r2, #1
 80094a4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80094a6:	4b03      	ldr	r3, [pc, #12]	; (80094b4 <pvTaskIncrementMutexHeldCount+0x24>)
 80094a8:	681b      	ldr	r3, [r3, #0]
	}
 80094aa:	4618      	mov	r0, r3
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr
 80094b4:	2000576c 	.word	0x2000576c

080094b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094c2:	4b29      	ldr	r3, [pc, #164]	; (8009568 <prvAddCurrentTaskToDelayedList+0xb0>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094c8:	4b28      	ldr	r3, [pc, #160]	; (800956c <prvAddCurrentTaskToDelayedList+0xb4>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	3304      	adds	r3, #4
 80094ce:	4618      	mov	r0, r3
 80094d0:	f7fd ff9f 	bl	8007412 <uxListRemove>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d10b      	bne.n	80094f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80094da:	4b24      	ldr	r3, [pc, #144]	; (800956c <prvAddCurrentTaskToDelayedList+0xb4>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e0:	2201      	movs	r2, #1
 80094e2:	fa02 f303 	lsl.w	r3, r2, r3
 80094e6:	43da      	mvns	r2, r3
 80094e8:	4b21      	ldr	r3, [pc, #132]	; (8009570 <prvAddCurrentTaskToDelayedList+0xb8>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4013      	ands	r3, r2
 80094ee:	4a20      	ldr	r2, [pc, #128]	; (8009570 <prvAddCurrentTaskToDelayedList+0xb8>)
 80094f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094f8:	d10a      	bne.n	8009510 <prvAddCurrentTaskToDelayedList+0x58>
 80094fa:	683b      	ldr	r3, [r7, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d007      	beq.n	8009510 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009500:	4b1a      	ldr	r3, [pc, #104]	; (800956c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	3304      	adds	r3, #4
 8009506:	4619      	mov	r1, r3
 8009508:	481a      	ldr	r0, [pc, #104]	; (8009574 <prvAddCurrentTaskToDelayedList+0xbc>)
 800950a:	f7fd ff25 	bl	8007358 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800950e:	e026      	b.n	800955e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009510:	68fa      	ldr	r2, [r7, #12]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	4413      	add	r3, r2
 8009516:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009518:	4b14      	ldr	r3, [pc, #80]	; (800956c <prvAddCurrentTaskToDelayedList+0xb4>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	68ba      	ldr	r2, [r7, #8]
 800951e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009520:	68ba      	ldr	r2, [r7, #8]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	429a      	cmp	r2, r3
 8009526:	d209      	bcs.n	800953c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009528:	4b13      	ldr	r3, [pc, #76]	; (8009578 <prvAddCurrentTaskToDelayedList+0xc0>)
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	4b0f      	ldr	r3, [pc, #60]	; (800956c <prvAddCurrentTaskToDelayedList+0xb4>)
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	3304      	adds	r3, #4
 8009532:	4619      	mov	r1, r3
 8009534:	4610      	mov	r0, r2
 8009536:	f7fd ff33 	bl	80073a0 <vListInsert>
}
 800953a:	e010      	b.n	800955e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800953c:	4b0f      	ldr	r3, [pc, #60]	; (800957c <prvAddCurrentTaskToDelayedList+0xc4>)
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3304      	adds	r3, #4
 8009546:	4619      	mov	r1, r3
 8009548:	4610      	mov	r0, r2
 800954a:	f7fd ff29 	bl	80073a0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800954e:	4b0c      	ldr	r3, [pc, #48]	; (8009580 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	429a      	cmp	r2, r3
 8009556:	d202      	bcs.n	800955e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009558:	4a09      	ldr	r2, [pc, #36]	; (8009580 <prvAddCurrentTaskToDelayedList+0xc8>)
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	6013      	str	r3, [r2, #0]
}
 800955e:	bf00      	nop
 8009560:	3710      	adds	r7, #16
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	20005870 	.word	0x20005870
 800956c:	2000576c 	.word	0x2000576c
 8009570:	20005874 	.word	0x20005874
 8009574:	20005858 	.word	0x20005858
 8009578:	20005828 	.word	0x20005828
 800957c:	20005824 	.word	0x20005824
 8009580:	2000588c 	.word	0x2000588c

08009584 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b08a      	sub	sp, #40	; 0x28
 8009588:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800958a:	2300      	movs	r3, #0
 800958c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800958e:	f000 faeb 	bl	8009b68 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009592:	4b1c      	ldr	r3, [pc, #112]	; (8009604 <xTimerCreateTimerTask+0x80>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d021      	beq.n	80095de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800959e:	2300      	movs	r3, #0
 80095a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80095a2:	1d3a      	adds	r2, r7, #4
 80095a4:	f107 0108 	add.w	r1, r7, #8
 80095a8:	f107 030c 	add.w	r3, r7, #12
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7f7 fb05 	bl	8000bbc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80095b2:	6879      	ldr	r1, [r7, #4]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	9202      	str	r2, [sp, #8]
 80095ba:	9301      	str	r3, [sp, #4]
 80095bc:	2302      	movs	r3, #2
 80095be:	9300      	str	r3, [sp, #0]
 80095c0:	2300      	movs	r3, #0
 80095c2:	460a      	mov	r2, r1
 80095c4:	4910      	ldr	r1, [pc, #64]	; (8009608 <xTimerCreateTimerTask+0x84>)
 80095c6:	4811      	ldr	r0, [pc, #68]	; (800960c <xTimerCreateTimerTask+0x88>)
 80095c8:	f7fe ff76 	bl	80084b8 <xTaskCreateStatic>
 80095cc:	4603      	mov	r3, r0
 80095ce:	4a10      	ldr	r2, [pc, #64]	; (8009610 <xTimerCreateTimerTask+0x8c>)
 80095d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80095d2:	4b0f      	ldr	r3, [pc, #60]	; (8009610 <xTimerCreateTimerTask+0x8c>)
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d001      	beq.n	80095de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80095da:	2301      	movs	r3, #1
 80095dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10a      	bne.n	80095fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	f383 8811 	msr	BASEPRI, r3
 80095ec:	f3bf 8f6f 	isb	sy
 80095f0:	f3bf 8f4f 	dsb	sy
 80095f4:	613b      	str	r3, [r7, #16]
}
 80095f6:	bf00      	nop
 80095f8:	e7fe      	b.n	80095f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80095fa:	697b      	ldr	r3, [r7, #20]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3718      	adds	r7, #24
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}
 8009604:	200058c8 	.word	0x200058c8
 8009608:	08022f28 	.word	0x08022f28
 800960c:	08009749 	.word	0x08009749
 8009610:	200058cc 	.word	0x200058cc

08009614 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b08a      	sub	sp, #40	; 0x28
 8009618:	af00      	add	r7, sp, #0
 800961a:	60f8      	str	r0, [r7, #12]
 800961c:	60b9      	str	r1, [r7, #8]
 800961e:	607a      	str	r2, [r7, #4]
 8009620:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009622:	2300      	movs	r3, #0
 8009624:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10a      	bne.n	8009642 <xTimerGenericCommand+0x2e>
	__asm volatile
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	623b      	str	r3, [r7, #32]
}
 800963e:	bf00      	nop
 8009640:	e7fe      	b.n	8009640 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009642:	4b1a      	ldr	r3, [pc, #104]	; (80096ac <xTimerGenericCommand+0x98>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d02a      	beq.n	80096a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b05      	cmp	r3, #5
 800965a:	dc18      	bgt.n	800968e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800965c:	f7ff fd70 	bl	8009140 <xTaskGetSchedulerState>
 8009660:	4603      	mov	r3, r0
 8009662:	2b02      	cmp	r3, #2
 8009664:	d109      	bne.n	800967a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009666:	4b11      	ldr	r3, [pc, #68]	; (80096ac <xTimerGenericCommand+0x98>)
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	f107 0114 	add.w	r1, r7, #20
 800966e:	2300      	movs	r3, #0
 8009670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009672:	f7fe f87f 	bl	8007774 <xQueueGenericSend>
 8009676:	6278      	str	r0, [r7, #36]	; 0x24
 8009678:	e012      	b.n	80096a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800967a:	4b0c      	ldr	r3, [pc, #48]	; (80096ac <xTimerGenericCommand+0x98>)
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	f107 0114 	add.w	r1, r7, #20
 8009682:	2300      	movs	r3, #0
 8009684:	2200      	movs	r2, #0
 8009686:	f7fe f875 	bl	8007774 <xQueueGenericSend>
 800968a:	6278      	str	r0, [r7, #36]	; 0x24
 800968c:	e008      	b.n	80096a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800968e:	4b07      	ldr	r3, [pc, #28]	; (80096ac <xTimerGenericCommand+0x98>)
 8009690:	6818      	ldr	r0, [r3, #0]
 8009692:	f107 0114 	add.w	r1, r7, #20
 8009696:	2300      	movs	r3, #0
 8009698:	683a      	ldr	r2, [r7, #0]
 800969a:	f7fe f969 	bl	8007970 <xQueueGenericSendFromISR>
 800969e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80096a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3728      	adds	r7, #40	; 0x28
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	200058c8 	.word	0x200058c8

080096b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b088      	sub	sp, #32
 80096b4:	af02      	add	r7, sp, #8
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096ba:	4b22      	ldr	r3, [pc, #136]	; (8009744 <prvProcessExpiredTimer+0x94>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	68db      	ldr	r3, [r3, #12]
 80096c0:	68db      	ldr	r3, [r3, #12]
 80096c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	3304      	adds	r3, #4
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fd fea2 	bl	8007412 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80096d4:	f003 0304 	and.w	r3, r3, #4
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d022      	beq.n	8009722 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	699a      	ldr	r2, [r3, #24]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	18d1      	adds	r1, r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	683a      	ldr	r2, [r7, #0]
 80096e8:	6978      	ldr	r0, [r7, #20]
 80096ea:	f000 f8d1 	bl	8009890 <prvInsertTimerInActiveList>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d01f      	beq.n	8009734 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096f4:	2300      	movs	r3, #0
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	2300      	movs	r3, #0
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	2100      	movs	r1, #0
 80096fe:	6978      	ldr	r0, [r7, #20]
 8009700:	f7ff ff88 	bl	8009614 <xTimerGenericCommand>
 8009704:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d113      	bne.n	8009734 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	60fb      	str	r3, [r7, #12]
}
 800971e:	bf00      	nop
 8009720:	e7fe      	b.n	8009720 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009728:	f023 0301 	bic.w	r3, r3, #1
 800972c:	b2da      	uxtb	r2, r3
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	6a1b      	ldr	r3, [r3, #32]
 8009738:	6978      	ldr	r0, [r7, #20]
 800973a:	4798      	blx	r3
}
 800973c:	bf00      	nop
 800973e:	3718      	adds	r7, #24
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}
 8009744:	200058c0 	.word	0x200058c0

08009748 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b084      	sub	sp, #16
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009750:	f107 0308 	add.w	r3, r7, #8
 8009754:	4618      	mov	r0, r3
 8009756:	f000 f857 	bl	8009808 <prvGetNextExpireTime>
 800975a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	4619      	mov	r1, r3
 8009760:	68f8      	ldr	r0, [r7, #12]
 8009762:	f000 f803 	bl	800976c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009766:	f000 f8d5 	bl	8009914 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800976a:	e7f1      	b.n	8009750 <prvTimerTask+0x8>

0800976c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
 8009774:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009776:	f7ff f8ed 	bl	8008954 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800977a:	f107 0308 	add.w	r3, r7, #8
 800977e:	4618      	mov	r0, r3
 8009780:	f000 f866 	bl	8009850 <prvSampleTimeNow>
 8009784:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d130      	bne.n	80097ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d10a      	bne.n	80097a8 <prvProcessTimerOrBlockTask+0x3c>
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	429a      	cmp	r2, r3
 8009798:	d806      	bhi.n	80097a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800979a:	f7ff f8e9 	bl	8008970 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800979e:	68f9      	ldr	r1, [r7, #12]
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f7ff ff85 	bl	80096b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80097a6:	e024      	b.n	80097f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d008      	beq.n	80097c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80097ae:	4b13      	ldr	r3, [pc, #76]	; (80097fc <prvProcessTimerOrBlockTask+0x90>)
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d101      	bne.n	80097bc <prvProcessTimerOrBlockTask+0x50>
 80097b8:	2301      	movs	r3, #1
 80097ba:	e000      	b.n	80097be <prvProcessTimerOrBlockTask+0x52>
 80097bc:	2300      	movs	r3, #0
 80097be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097c0:	4b0f      	ldr	r3, [pc, #60]	; (8009800 <prvProcessTimerOrBlockTask+0x94>)
 80097c2:	6818      	ldr	r0, [r3, #0]
 80097c4:	687a      	ldr	r2, [r7, #4]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	1ad3      	subs	r3, r2, r3
 80097ca:	683a      	ldr	r2, [r7, #0]
 80097cc:	4619      	mov	r1, r3
 80097ce:	f7fe fe3f 	bl	8008450 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097d2:	f7ff f8cd 	bl	8008970 <xTaskResumeAll>
 80097d6:	4603      	mov	r3, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80097dc:	4b09      	ldr	r3, [pc, #36]	; (8009804 <prvProcessTimerOrBlockTask+0x98>)
 80097de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097e2:	601a      	str	r2, [r3, #0]
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	f3bf 8f6f 	isb	sy
}
 80097ec:	e001      	b.n	80097f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097ee:	f7ff f8bf 	bl	8008970 <xTaskResumeAll>
}
 80097f2:	bf00      	nop
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	200058c4 	.word	0x200058c4
 8009800:	200058c8 	.word	0x200058c8
 8009804:	e000ed04 	.word	0xe000ed04

08009808 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009810:	4b0e      	ldr	r3, [pc, #56]	; (800984c <prvGetNextExpireTime+0x44>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d101      	bne.n	800981e <prvGetNextExpireTime+0x16>
 800981a:	2201      	movs	r2, #1
 800981c:	e000      	b.n	8009820 <prvGetNextExpireTime+0x18>
 800981e:	2200      	movs	r2, #0
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d105      	bne.n	8009838 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800982c:	4b07      	ldr	r3, [pc, #28]	; (800984c <prvGetNextExpireTime+0x44>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	60fb      	str	r3, [r7, #12]
 8009836:	e001      	b.n	800983c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009838:	2300      	movs	r3, #0
 800983a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800983c:	68fb      	ldr	r3, [r7, #12]
}
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	200058c0 	.word	0x200058c0

08009850 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009858:	f7ff f926 	bl	8008aa8 <xTaskGetTickCount>
 800985c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800985e:	4b0b      	ldr	r3, [pc, #44]	; (800988c <prvSampleTimeNow+0x3c>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	68fa      	ldr	r2, [r7, #12]
 8009864:	429a      	cmp	r2, r3
 8009866:	d205      	bcs.n	8009874 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009868:	f000 f91a 	bl	8009aa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2201      	movs	r2, #1
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	e002      	b.n	800987a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800987a:	4a04      	ldr	r2, [pc, #16]	; (800988c <prvSampleTimeNow+0x3c>)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009880:	68fb      	ldr	r3, [r7, #12]
}
 8009882:	4618      	mov	r0, r3
 8009884:	3710      	adds	r7, #16
 8009886:	46bd      	mov	sp, r7
 8009888:	bd80      	pop	{r7, pc}
 800988a:	bf00      	nop
 800988c:	200058d0 	.word	0x200058d0

08009890 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b086      	sub	sp, #24
 8009894:	af00      	add	r7, sp, #0
 8009896:	60f8      	str	r0, [r7, #12]
 8009898:	60b9      	str	r1, [r7, #8]
 800989a:	607a      	str	r2, [r7, #4]
 800989c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800989e:	2300      	movs	r3, #0
 80098a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	429a      	cmp	r2, r3
 80098b4:	d812      	bhi.n	80098dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098b6:	687a      	ldr	r2, [r7, #4]
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	1ad2      	subs	r2, r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	429a      	cmp	r2, r3
 80098c2:	d302      	bcc.n	80098ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80098c4:	2301      	movs	r3, #1
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	e01b      	b.n	8009902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098ca:	4b10      	ldr	r3, [pc, #64]	; (800990c <prvInsertTimerInActiveList+0x7c>)
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3304      	adds	r3, #4
 80098d2:	4619      	mov	r1, r3
 80098d4:	4610      	mov	r0, r2
 80098d6:	f7fd fd63 	bl	80073a0 <vListInsert>
 80098da:	e012      	b.n	8009902 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098dc:	687a      	ldr	r2, [r7, #4]
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d206      	bcs.n	80098f2 <prvInsertTimerInActiveList+0x62>
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	d302      	bcc.n	80098f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098ec:	2301      	movs	r3, #1
 80098ee:	617b      	str	r3, [r7, #20]
 80098f0:	e007      	b.n	8009902 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098f2:	4b07      	ldr	r3, [pc, #28]	; (8009910 <prvInsertTimerInActiveList+0x80>)
 80098f4:	681a      	ldr	r2, [r3, #0]
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	3304      	adds	r3, #4
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f7fd fd4f 	bl	80073a0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009902:	697b      	ldr	r3, [r7, #20]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3718      	adds	r7, #24
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	200058c4 	.word	0x200058c4
 8009910:	200058c0 	.word	0x200058c0

08009914 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b08c      	sub	sp, #48	; 0x30
 8009918:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800991a:	e0ae      	b.n	8009a7a <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	2b00      	cmp	r3, #0
 8009920:	f2c0 80ab 	blt.w	8009a7a <prvProcessReceivedCommands+0x166>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992a:	695b      	ldr	r3, [r3, #20]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d004      	beq.n	800993a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009932:	3304      	adds	r3, #4
 8009934:	4618      	mov	r0, r3
 8009936:	f7fd fd6c 	bl	8007412 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800993a:	1d3b      	adds	r3, r7, #4
 800993c:	4618      	mov	r0, r3
 800993e:	f7ff ff87 	bl	8009850 <prvSampleTimeNow>
 8009942:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	2b09      	cmp	r3, #9
 8009948:	f200 8096 	bhi.w	8009a78 <prvProcessReceivedCommands+0x164>
 800994c:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <prvProcessReceivedCommands+0x40>)
 800994e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009952:	bf00      	nop
 8009954:	0800997d 	.word	0x0800997d
 8009958:	0800997d 	.word	0x0800997d
 800995c:	0800997d 	.word	0x0800997d
 8009960:	080099f1 	.word	0x080099f1
 8009964:	08009a05 	.word	0x08009a05
 8009968:	08009a4f 	.word	0x08009a4f
 800996c:	0800997d 	.word	0x0800997d
 8009970:	0800997d 	.word	0x0800997d
 8009974:	080099f1 	.word	0x080099f1
 8009978:	08009a05 	.word	0x08009a05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800997c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009982:	f043 0301 	orr.w	r3, r3, #1
 8009986:	b2da      	uxtb	r2, r3
 8009988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800998e:	68fa      	ldr	r2, [r7, #12]
 8009990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009992:	699b      	ldr	r3, [r3, #24]
 8009994:	18d1      	adds	r1, r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6a3a      	ldr	r2, [r7, #32]
 800999a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800999c:	f7ff ff78 	bl	8009890 <prvInsertTimerInActiveList>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d069      	beq.n	8009a7a <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a8:	6a1b      	ldr	r3, [r3, #32]
 80099aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099b4:	f003 0304 	and.w	r3, r3, #4
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d05e      	beq.n	8009a7a <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	441a      	add	r2, r3
 80099c4:	2300      	movs	r3, #0
 80099c6:	9300      	str	r3, [sp, #0]
 80099c8:	2300      	movs	r3, #0
 80099ca:	2100      	movs	r1, #0
 80099cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80099ce:	f7ff fe21 	bl	8009614 <xTimerGenericCommand>
 80099d2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d14f      	bne.n	8009a7a <prvProcessReceivedCommands+0x166>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	61bb      	str	r3, [r7, #24]
}
 80099ec:	bf00      	nop
 80099ee:	e7fe      	b.n	80099ee <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80099f6:	f023 0301 	bic.w	r3, r3, #1
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009a02:	e03a      	b.n	8009a7a <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a0a:	f043 0301 	orr.w	r3, r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10a      	bne.n	8009a3a <prvProcessReceivedCommands+0x126>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	f383 8811 	msr	BASEPRI, r3
 8009a2c:	f3bf 8f6f 	isb	sy
 8009a30:	f3bf 8f4f 	dsb	sy
 8009a34:	617b      	str	r3, [r7, #20]
}
 8009a36:	bf00      	nop
 8009a38:	e7fe      	b.n	8009a38 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	699a      	ldr	r2, [r3, #24]
 8009a3e:	6a3b      	ldr	r3, [r7, #32]
 8009a40:	18d1      	adds	r1, r2, r3
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	6a3a      	ldr	r2, [r7, #32]
 8009a46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a48:	f7ff ff22 	bl	8009890 <prvInsertTimerInActiveList>
					break;
 8009a4c:	e015      	b.n	8009a7a <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a54:	f003 0302 	and.w	r3, r3, #2
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d103      	bne.n	8009a64 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8009a5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009a5e:	f000 fbdf 	bl	800a220 <vPortFree>
 8009a62:	e00a      	b.n	8009a7a <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009a6a:	f023 0301 	bic.w	r3, r3, #1
 8009a6e:	b2da      	uxtb	r2, r3
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a76:	e000      	b.n	8009a7a <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
 8009a78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a7a:	4b08      	ldr	r3, [pc, #32]	; (8009a9c <prvProcessReceivedCommands+0x188>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f107 0108 	add.w	r1, r7, #8
 8009a82:	2200      	movs	r2, #0
 8009a84:	4618      	mov	r0, r3
 8009a86:	f7fe f89b 	bl	8007bc0 <xQueueReceive>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f47f af45 	bne.w	800991c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009a92:	bf00      	nop
 8009a94:	bf00      	nop
 8009a96:	3728      	adds	r7, #40	; 0x28
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	200058c8 	.word	0x200058c8

08009aa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b088      	sub	sp, #32
 8009aa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aa6:	e048      	b.n	8009b3a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009aa8:	4b2d      	ldr	r3, [pc, #180]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab2:	4b2b      	ldr	r3, [pc, #172]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fd fca6 	bl	8007412 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ad4:	f003 0304 	and.w	r3, r3, #4
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d02e      	beq.n	8009b3a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	699b      	ldr	r3, [r3, #24]
 8009ae0:	693a      	ldr	r2, [r7, #16]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009ae6:	68ba      	ldr	r2, [r7, #8]
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d90e      	bls.n	8009b0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	68ba      	ldr	r2, [r7, #8]
 8009af2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	68fa      	ldr	r2, [r7, #12]
 8009af8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009afa:	4b19      	ldr	r3, [pc, #100]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	3304      	adds	r3, #4
 8009b02:	4619      	mov	r1, r3
 8009b04:	4610      	mov	r0, r2
 8009b06:	f7fd fc4b 	bl	80073a0 <vListInsert>
 8009b0a:	e016      	b.n	8009b3a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	2300      	movs	r3, #0
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	2100      	movs	r1, #0
 8009b16:	68f8      	ldr	r0, [r7, #12]
 8009b18:	f7ff fd7c 	bl	8009614 <xTimerGenericCommand>
 8009b1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d10a      	bne.n	8009b3a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	603b      	str	r3, [r7, #0]
}
 8009b36:	bf00      	nop
 8009b38:	e7fe      	b.n	8009b38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b3a:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d1b1      	bne.n	8009aa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b44:	4b06      	ldr	r3, [pc, #24]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b4a:	4b06      	ldr	r3, [pc, #24]	; (8009b64 <prvSwitchTimerLists+0xc4>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a04      	ldr	r2, [pc, #16]	; (8009b60 <prvSwitchTimerLists+0xc0>)
 8009b50:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b52:	4a04      	ldr	r2, [pc, #16]	; (8009b64 <prvSwitchTimerLists+0xc4>)
 8009b54:	697b      	ldr	r3, [r7, #20]
 8009b56:	6013      	str	r3, [r2, #0]
}
 8009b58:	bf00      	nop
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	200058c0 	.word	0x200058c0
 8009b64:	200058c4 	.word	0x200058c4

08009b68 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b6e:	f000 f969 	bl	8009e44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b72:	4b15      	ldr	r3, [pc, #84]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d120      	bne.n	8009bbc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b7a:	4814      	ldr	r0, [pc, #80]	; (8009bcc <prvCheckForValidListAndQueue+0x64>)
 8009b7c:	f7fd fbbf 	bl	80072fe <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b80:	4813      	ldr	r0, [pc, #76]	; (8009bd0 <prvCheckForValidListAndQueue+0x68>)
 8009b82:	f7fd fbbc 	bl	80072fe <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b86:	4b13      	ldr	r3, [pc, #76]	; (8009bd4 <prvCheckForValidListAndQueue+0x6c>)
 8009b88:	4a10      	ldr	r2, [pc, #64]	; (8009bcc <prvCheckForValidListAndQueue+0x64>)
 8009b8a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b8c:	4b12      	ldr	r3, [pc, #72]	; (8009bd8 <prvCheckForValidListAndQueue+0x70>)
 8009b8e:	4a10      	ldr	r2, [pc, #64]	; (8009bd0 <prvCheckForValidListAndQueue+0x68>)
 8009b90:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b92:	2300      	movs	r3, #0
 8009b94:	9300      	str	r3, [sp, #0]
 8009b96:	4b11      	ldr	r3, [pc, #68]	; (8009bdc <prvCheckForValidListAndQueue+0x74>)
 8009b98:	4a11      	ldr	r2, [pc, #68]	; (8009be0 <prvCheckForValidListAndQueue+0x78>)
 8009b9a:	210c      	movs	r1, #12
 8009b9c:	200a      	movs	r0, #10
 8009b9e:	f7fd fccb 	bl	8007538 <xQueueGenericCreateStatic>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	4a08      	ldr	r2, [pc, #32]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009ba6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009ba8:	4b07      	ldr	r3, [pc, #28]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d005      	beq.n	8009bbc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bb0:	4b05      	ldr	r3, [pc, #20]	; (8009bc8 <prvCheckForValidListAndQueue+0x60>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	490b      	ldr	r1, [pc, #44]	; (8009be4 <prvCheckForValidListAndQueue+0x7c>)
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fbf6 	bl	80083a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bbc:	f000 f972 	bl	8009ea4 <vPortExitCritical>
}
 8009bc0:	bf00      	nop
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	200058c8 	.word	0x200058c8
 8009bcc:	20005898 	.word	0x20005898
 8009bd0:	200058ac 	.word	0x200058ac
 8009bd4:	200058c0 	.word	0x200058c0
 8009bd8:	200058c4 	.word	0x200058c4
 8009bdc:	2000594c 	.word	0x2000594c
 8009be0:	200058d4 	.word	0x200058d4
 8009be4:	08022f30 	.word	0x08022f30

08009be8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009be8:	b480      	push	{r7}
 8009bea:	b085      	sub	sp, #20
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3b04      	subs	r3, #4
 8009bf8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3b04      	subs	r3, #4
 8009c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	f023 0201 	bic.w	r2, r3, #1
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3b04      	subs	r3, #4
 8009c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c18:	4a0c      	ldr	r2, [pc, #48]	; (8009c4c <pxPortInitialiseStack+0x64>)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3b14      	subs	r3, #20
 8009c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	3b04      	subs	r3, #4
 8009c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f06f 0202 	mvn.w	r2, #2
 8009c36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	3b20      	subs	r3, #32
 8009c3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3714      	adds	r7, #20
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr
 8009c4c:	08009c51 	.word	0x08009c51

08009c50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c56:	2300      	movs	r3, #0
 8009c58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c5a:	4b12      	ldr	r3, [pc, #72]	; (8009ca4 <prvTaskExitError+0x54>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c62:	d00a      	beq.n	8009c7a <prvTaskExitError+0x2a>
	__asm volatile
 8009c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c68:	f383 8811 	msr	BASEPRI, r3
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f3bf 8f4f 	dsb	sy
 8009c74:	60fb      	str	r3, [r7, #12]
}
 8009c76:	bf00      	nop
 8009c78:	e7fe      	b.n	8009c78 <prvTaskExitError+0x28>
	__asm volatile
 8009c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c7e:	f383 8811 	msr	BASEPRI, r3
 8009c82:	f3bf 8f6f 	isb	sy
 8009c86:	f3bf 8f4f 	dsb	sy
 8009c8a:	60bb      	str	r3, [r7, #8]
}
 8009c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c8e:	bf00      	nop
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d0fc      	beq.n	8009c90 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009c96:	bf00      	nop
 8009c98:	bf00      	nop
 8009c9a:	3714      	adds	r7, #20
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr
 8009ca4:	20000020 	.word	0x20000020
	...

08009cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009cb0:	4b07      	ldr	r3, [pc, #28]	; (8009cd0 <pxCurrentTCBConst2>)
 8009cb2:	6819      	ldr	r1, [r3, #0]
 8009cb4:	6808      	ldr	r0, [r1, #0]
 8009cb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cba:	f380 8809 	msr	PSP, r0
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	f04f 0000 	mov.w	r0, #0
 8009cc6:	f380 8811 	msr	BASEPRI, r0
 8009cca:	4770      	bx	lr
 8009ccc:	f3af 8000 	nop.w

08009cd0 <pxCurrentTCBConst2>:
 8009cd0:	2000576c 	.word	0x2000576c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cd4:	bf00      	nop
 8009cd6:	bf00      	nop

08009cd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cd8:	4808      	ldr	r0, [pc, #32]	; (8009cfc <prvPortStartFirstTask+0x24>)
 8009cda:	6800      	ldr	r0, [r0, #0]
 8009cdc:	6800      	ldr	r0, [r0, #0]
 8009cde:	f380 8808 	msr	MSP, r0
 8009ce2:	f04f 0000 	mov.w	r0, #0
 8009ce6:	f380 8814 	msr	CONTROL, r0
 8009cea:	b662      	cpsie	i
 8009cec:	b661      	cpsie	f
 8009cee:	f3bf 8f4f 	dsb	sy
 8009cf2:	f3bf 8f6f 	isb	sy
 8009cf6:	df00      	svc	0
 8009cf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009cfa:	bf00      	nop
 8009cfc:	e000ed08 	.word	0xe000ed08

08009d00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b086      	sub	sp, #24
 8009d04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d06:	4b46      	ldr	r3, [pc, #280]	; (8009e20 <xPortStartScheduler+0x120>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a46      	ldr	r2, [pc, #280]	; (8009e24 <xPortStartScheduler+0x124>)
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d10a      	bne.n	8009d26 <xPortStartScheduler+0x26>
	__asm volatile
 8009d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d14:	f383 8811 	msr	BASEPRI, r3
 8009d18:	f3bf 8f6f 	isb	sy
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	613b      	str	r3, [r7, #16]
}
 8009d22:	bf00      	nop
 8009d24:	e7fe      	b.n	8009d24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d26:	4b3e      	ldr	r3, [pc, #248]	; (8009e20 <xPortStartScheduler+0x120>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a3f      	ldr	r2, [pc, #252]	; (8009e28 <xPortStartScheduler+0x128>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d10a      	bne.n	8009d46 <xPortStartScheduler+0x46>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	60fb      	str	r3, [r7, #12]
}
 8009d42:	bf00      	nop
 8009d44:	e7fe      	b.n	8009d44 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d46:	4b39      	ldr	r3, [pc, #228]	; (8009e2c <xPortStartScheduler+0x12c>)
 8009d48:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	781b      	ldrb	r3, [r3, #0]
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	22ff      	movs	r2, #255	; 0xff
 8009d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d60:	78fb      	ldrb	r3, [r7, #3]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	4b31      	ldr	r3, [pc, #196]	; (8009e30 <xPortStartScheduler+0x130>)
 8009d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d6e:	4b31      	ldr	r3, [pc, #196]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d70:	2207      	movs	r2, #7
 8009d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d74:	e009      	b.n	8009d8a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009d76:	4b2f      	ldr	r3, [pc, #188]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	4a2d      	ldr	r2, [pc, #180]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d8a:	78fb      	ldrb	r3, [r7, #3]
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d92:	2b80      	cmp	r3, #128	; 0x80
 8009d94:	d0ef      	beq.n	8009d76 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d96:	4b27      	ldr	r3, [pc, #156]	; (8009e34 <xPortStartScheduler+0x134>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f1c3 0307 	rsb	r3, r3, #7
 8009d9e:	2b04      	cmp	r3, #4
 8009da0:	d00a      	beq.n	8009db8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	f383 8811 	msr	BASEPRI, r3
 8009daa:	f3bf 8f6f 	isb	sy
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	60bb      	str	r3, [r7, #8]
}
 8009db4:	bf00      	nop
 8009db6:	e7fe      	b.n	8009db6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009db8:	4b1e      	ldr	r3, [pc, #120]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	021b      	lsls	r3, r3, #8
 8009dbe:	4a1d      	ldr	r2, [pc, #116]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dc0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009dc2:	4b1c      	ldr	r3, [pc, #112]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dca:	4a1a      	ldr	r2, [pc, #104]	; (8009e34 <xPortStartScheduler+0x134>)
 8009dcc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	b2da      	uxtb	r2, r3
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009dd6:	4b18      	ldr	r3, [pc, #96]	; (8009e38 <xPortStartScheduler+0x138>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	4a17      	ldr	r2, [pc, #92]	; (8009e38 <xPortStartScheduler+0x138>)
 8009ddc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009de0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009de2:	4b15      	ldr	r3, [pc, #84]	; (8009e38 <xPortStartScheduler+0x138>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	4a14      	ldr	r2, [pc, #80]	; (8009e38 <xPortStartScheduler+0x138>)
 8009de8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009dec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dee:	f000 f8dd 	bl	8009fac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009df2:	4b12      	ldr	r3, [pc, #72]	; (8009e3c <xPortStartScheduler+0x13c>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009df8:	f000 f8fc 	bl	8009ff4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009dfc:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <xPortStartScheduler+0x140>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a0f      	ldr	r2, [pc, #60]	; (8009e40 <xPortStartScheduler+0x140>)
 8009e02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e08:	f7ff ff66 	bl	8009cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e0c:	f7fe ff26 	bl	8008c5c <vTaskSwitchContext>
	prvTaskExitError();
 8009e10:	f7ff ff1e 	bl	8009c50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3718      	adds	r7, #24
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	e000ed00 	.word	0xe000ed00
 8009e24:	410fc271 	.word	0x410fc271
 8009e28:	410fc270 	.word	0x410fc270
 8009e2c:	e000e400 	.word	0xe000e400
 8009e30:	20005994 	.word	0x20005994
 8009e34:	20005998 	.word	0x20005998
 8009e38:	e000ed20 	.word	0xe000ed20
 8009e3c:	20000020 	.word	0x20000020
 8009e40:	e000ef34 	.word	0xe000ef34

08009e44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	607b      	str	r3, [r7, #4]
}
 8009e5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e5e:	4b0f      	ldr	r3, [pc, #60]	; (8009e9c <vPortEnterCritical+0x58>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	3301      	adds	r3, #1
 8009e64:	4a0d      	ldr	r2, [pc, #52]	; (8009e9c <vPortEnterCritical+0x58>)
 8009e66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e68:	4b0c      	ldr	r3, [pc, #48]	; (8009e9c <vPortEnterCritical+0x58>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d10f      	bne.n	8009e90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e70:	4b0b      	ldr	r3, [pc, #44]	; (8009ea0 <vPortEnterCritical+0x5c>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	b2db      	uxtb	r3, r3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00a      	beq.n	8009e90 <vPortEnterCritical+0x4c>
	__asm volatile
 8009e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e7e:	f383 8811 	msr	BASEPRI, r3
 8009e82:	f3bf 8f6f 	isb	sy
 8009e86:	f3bf 8f4f 	dsb	sy
 8009e8a:	603b      	str	r3, [r7, #0]
}
 8009e8c:	bf00      	nop
 8009e8e:	e7fe      	b.n	8009e8e <vPortEnterCritical+0x4a>
	}
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	20000020 	.word	0x20000020
 8009ea0:	e000ed04 	.word	0xe000ed04

08009ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009eaa:	4b12      	ldr	r3, [pc, #72]	; (8009ef4 <vPortExitCritical+0x50>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d10a      	bne.n	8009ec8 <vPortExitCritical+0x24>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	607b      	str	r3, [r7, #4]
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ec8:	4b0a      	ldr	r3, [pc, #40]	; (8009ef4 <vPortExitCritical+0x50>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	4a09      	ldr	r2, [pc, #36]	; (8009ef4 <vPortExitCritical+0x50>)
 8009ed0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ed2:	4b08      	ldr	r3, [pc, #32]	; (8009ef4 <vPortExitCritical+0x50>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d105      	bne.n	8009ee6 <vPortExitCritical+0x42>
 8009eda:	2300      	movs	r3, #0
 8009edc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	f383 8811 	msr	BASEPRI, r3
}
 8009ee4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ee6:	bf00      	nop
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	20000020 	.word	0x20000020
	...

08009f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f00:	f3ef 8009 	mrs	r0, PSP
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	4b15      	ldr	r3, [pc, #84]	; (8009f60 <pxCurrentTCBConst>)
 8009f0a:	681a      	ldr	r2, [r3, #0]
 8009f0c:	f01e 0f10 	tst.w	lr, #16
 8009f10:	bf08      	it	eq
 8009f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1a:	6010      	str	r0, [r2, #0]
 8009f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f24:	f380 8811 	msr	BASEPRI, r0
 8009f28:	f3bf 8f4f 	dsb	sy
 8009f2c:	f3bf 8f6f 	isb	sy
 8009f30:	f7fe fe94 	bl	8008c5c <vTaskSwitchContext>
 8009f34:	f04f 0000 	mov.w	r0, #0
 8009f38:	f380 8811 	msr	BASEPRI, r0
 8009f3c:	bc09      	pop	{r0, r3}
 8009f3e:	6819      	ldr	r1, [r3, #0]
 8009f40:	6808      	ldr	r0, [r1, #0]
 8009f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f46:	f01e 0f10 	tst.w	lr, #16
 8009f4a:	bf08      	it	eq
 8009f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f50:	f380 8809 	msr	PSP, r0
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	4770      	bx	lr
 8009f5a:	bf00      	nop
 8009f5c:	f3af 8000 	nop.w

08009f60 <pxCurrentTCBConst>:
 8009f60:	2000576c 	.word	0x2000576c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f64:	bf00      	nop
 8009f66:	bf00      	nop

08009f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b082      	sub	sp, #8
 8009f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f72:	f383 8811 	msr	BASEPRI, r3
 8009f76:	f3bf 8f6f 	isb	sy
 8009f7a:	f3bf 8f4f 	dsb	sy
 8009f7e:	607b      	str	r3, [r7, #4]
}
 8009f80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f82:	f7fe fdb3 	bl	8008aec <xTaskIncrementTick>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d003      	beq.n	8009f94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f8c:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <SysTick_Handler+0x40>)
 8009f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f92:	601a      	str	r2, [r3, #0]
 8009f94:	2300      	movs	r3, #0
 8009f96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	f383 8811 	msr	BASEPRI, r3
}
 8009f9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009fa0:	bf00      	nop
 8009fa2:	3708      	adds	r7, #8
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	e000ed04 	.word	0xe000ed04

08009fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fb0:	4b0b      	ldr	r3, [pc, #44]	; (8009fe0 <vPortSetupTimerInterrupt+0x34>)
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009fb6:	4b0b      	ldr	r3, [pc, #44]	; (8009fe4 <vPortSetupTimerInterrupt+0x38>)
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fbc:	4b0a      	ldr	r3, [pc, #40]	; (8009fe8 <vPortSetupTimerInterrupt+0x3c>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	4a0a      	ldr	r2, [pc, #40]	; (8009fec <vPortSetupTimerInterrupt+0x40>)
 8009fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fc6:	099b      	lsrs	r3, r3, #6
 8009fc8:	4a09      	ldr	r2, [pc, #36]	; (8009ff0 <vPortSetupTimerInterrupt+0x44>)
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fce:	4b04      	ldr	r3, [pc, #16]	; (8009fe0 <vPortSetupTimerInterrupt+0x34>)
 8009fd0:	2207      	movs	r2, #7
 8009fd2:	601a      	str	r2, [r3, #0]
}
 8009fd4:	bf00      	nop
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fdc:	4770      	bx	lr
 8009fde:	bf00      	nop
 8009fe0:	e000e010 	.word	0xe000e010
 8009fe4:	e000e018 	.word	0xe000e018
 8009fe8:	20000000 	.word	0x20000000
 8009fec:	10624dd3 	.word	0x10624dd3
 8009ff0:	e000e014 	.word	0xe000e014

08009ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a004 <vPortEnableVFP+0x10>
 8009ff8:	6801      	ldr	r1, [r0, #0]
 8009ffa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ffe:	6001      	str	r1, [r0, #0]
 800a000:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a002:	bf00      	nop
 800a004:	e000ed88 	.word	0xe000ed88

0800a008 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a008:	b480      	push	{r7}
 800a00a:	b085      	sub	sp, #20
 800a00c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a00e:	f3ef 8305 	mrs	r3, IPSR
 800a012:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2b0f      	cmp	r3, #15
 800a018:	d914      	bls.n	800a044 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a01a:	4a17      	ldr	r2, [pc, #92]	; (800a078 <vPortValidateInterruptPriority+0x70>)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	4413      	add	r3, r2
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a024:	4b15      	ldr	r3, [pc, #84]	; (800a07c <vPortValidateInterruptPriority+0x74>)
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	7afa      	ldrb	r2, [r7, #11]
 800a02a:	429a      	cmp	r2, r3
 800a02c:	d20a      	bcs.n	800a044 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	607b      	str	r3, [r7, #4]
}
 800a040:	bf00      	nop
 800a042:	e7fe      	b.n	800a042 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a044:	4b0e      	ldr	r3, [pc, #56]	; (800a080 <vPortValidateInterruptPriority+0x78>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a04c:	4b0d      	ldr	r3, [pc, #52]	; (800a084 <vPortValidateInterruptPriority+0x7c>)
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	429a      	cmp	r2, r3
 800a052:	d90a      	bls.n	800a06a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	603b      	str	r3, [r7, #0]
}
 800a066:	bf00      	nop
 800a068:	e7fe      	b.n	800a068 <vPortValidateInterruptPriority+0x60>
	}
 800a06a:	bf00      	nop
 800a06c:	3714      	adds	r7, #20
 800a06e:	46bd      	mov	sp, r7
 800a070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a074:	4770      	bx	lr
 800a076:	bf00      	nop
 800a078:	e000e3f0 	.word	0xe000e3f0
 800a07c:	20005994 	.word	0x20005994
 800a080:	e000ed0c 	.word	0xe000ed0c
 800a084:	20005998 	.word	0x20005998

0800a088 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b08a      	sub	sp, #40	; 0x28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a090:	2300      	movs	r3, #0
 800a092:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a094:	f7fe fc5e 	bl	8008954 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a098:	4b5b      	ldr	r3, [pc, #364]	; (800a208 <pvPortMalloc+0x180>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0a0:	f000 f920 	bl	800a2e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0a4:	4b59      	ldr	r3, [pc, #356]	; (800a20c <pvPortMalloc+0x184>)
 800a0a6:	681a      	ldr	r2, [r3, #0]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	4013      	ands	r3, r2
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f040 8093 	bne.w	800a1d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d01d      	beq.n	800a0f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a0b8:	2208      	movs	r2, #8
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4413      	add	r3, r2
 800a0be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	f003 0307 	and.w	r3, r3, #7
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d014      	beq.n	800a0f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f023 0307 	bic.w	r3, r3, #7
 800a0d0:	3308      	adds	r3, #8
 800a0d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f003 0307 	and.w	r3, r3, #7
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d00a      	beq.n	800a0f4 <pvPortMalloc+0x6c>
	__asm volatile
 800a0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e2:	f383 8811 	msr	BASEPRI, r3
 800a0e6:	f3bf 8f6f 	isb	sy
 800a0ea:	f3bf 8f4f 	dsb	sy
 800a0ee:	617b      	str	r3, [r7, #20]
}
 800a0f0:	bf00      	nop
 800a0f2:	e7fe      	b.n	800a0f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d06e      	beq.n	800a1d8 <pvPortMalloc+0x150>
 800a0fa:	4b45      	ldr	r3, [pc, #276]	; (800a210 <pvPortMalloc+0x188>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	429a      	cmp	r2, r3
 800a102:	d869      	bhi.n	800a1d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a104:	4b43      	ldr	r3, [pc, #268]	; (800a214 <pvPortMalloc+0x18c>)
 800a106:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a108:	4b42      	ldr	r3, [pc, #264]	; (800a214 <pvPortMalloc+0x18c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a10e:	e004      	b.n	800a11a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	d903      	bls.n	800a12c <pvPortMalloc+0xa4>
 800a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d1f1      	bne.n	800a110 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a12c:	4b36      	ldr	r3, [pc, #216]	; (800a208 <pvPortMalloc+0x180>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a132:	429a      	cmp	r2, r3
 800a134:	d050      	beq.n	800a1d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a136:	6a3b      	ldr	r3, [r7, #32]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2208      	movs	r2, #8
 800a13c:	4413      	add	r3, r2
 800a13e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	6a3b      	ldr	r3, [r7, #32]
 800a146:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	1ad2      	subs	r2, r2, r3
 800a150:	2308      	movs	r3, #8
 800a152:	005b      	lsls	r3, r3, #1
 800a154:	429a      	cmp	r2, r3
 800a156:	d91f      	bls.n	800a198 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	4413      	add	r3, r2
 800a15e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	f003 0307 	and.w	r3, r3, #7
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00a      	beq.n	800a180 <pvPortMalloc+0xf8>
	__asm volatile
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	613b      	str	r3, [r7, #16]
}
 800a17c:	bf00      	nop
 800a17e:	e7fe      	b.n	800a17e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	1ad2      	subs	r2, r2, r3
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a192:	69b8      	ldr	r0, [r7, #24]
 800a194:	f000 f908 	bl	800a3a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a198:	4b1d      	ldr	r3, [pc, #116]	; (800a210 <pvPortMalloc+0x188>)
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	1ad3      	subs	r3, r2, r3
 800a1a2:	4a1b      	ldr	r2, [pc, #108]	; (800a210 <pvPortMalloc+0x188>)
 800a1a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1a6:	4b1a      	ldr	r3, [pc, #104]	; (800a210 <pvPortMalloc+0x188>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	4b1b      	ldr	r3, [pc, #108]	; (800a218 <pvPortMalloc+0x190>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d203      	bcs.n	800a1ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1b2:	4b17      	ldr	r3, [pc, #92]	; (800a210 <pvPortMalloc+0x188>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a18      	ldr	r2, [pc, #96]	; (800a218 <pvPortMalloc+0x190>)
 800a1b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	4b13      	ldr	r3, [pc, #76]	; (800a20c <pvPortMalloc+0x184>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1ce:	4b13      	ldr	r3, [pc, #76]	; (800a21c <pvPortMalloc+0x194>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3301      	adds	r3, #1
 800a1d4:	4a11      	ldr	r2, [pc, #68]	; (800a21c <pvPortMalloc+0x194>)
 800a1d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1d8:	f7fe fbca 	bl	8008970 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	f003 0307 	and.w	r3, r3, #7
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d00a      	beq.n	800a1fc <pvPortMalloc+0x174>
	__asm volatile
 800a1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ea:	f383 8811 	msr	BASEPRI, r3
 800a1ee:	f3bf 8f6f 	isb	sy
 800a1f2:	f3bf 8f4f 	dsb	sy
 800a1f6:	60fb      	str	r3, [r7, #12]
}
 800a1f8:	bf00      	nop
 800a1fa:	e7fe      	b.n	800a1fa <pvPortMalloc+0x172>
	return pvReturn;
 800a1fc:	69fb      	ldr	r3, [r7, #28]
}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3728      	adds	r7, #40	; 0x28
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}
 800a206:	bf00      	nop
 800a208:	2000ea2c 	.word	0x2000ea2c
 800a20c:	2000ea40 	.word	0x2000ea40
 800a210:	2000ea30 	.word	0x2000ea30
 800a214:	2000ea24 	.word	0x2000ea24
 800a218:	2000ea34 	.word	0x2000ea34
 800a21c:	2000ea38 	.word	0x2000ea38

0800a220 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b086      	sub	sp, #24
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d04d      	beq.n	800a2ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a232:	2308      	movs	r3, #8
 800a234:	425b      	negs	r3, r3
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	4413      	add	r3, r2
 800a23a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	4b24      	ldr	r3, [pc, #144]	; (800a2d8 <vPortFree+0xb8>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	4013      	ands	r3, r2
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10a      	bne.n	800a264 <vPortFree+0x44>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	60fb      	str	r3, [r7, #12]
}
 800a260:	bf00      	nop
 800a262:	e7fe      	b.n	800a262 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d00a      	beq.n	800a282 <vPortFree+0x62>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	60bb      	str	r3, [r7, #8]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	4b14      	ldr	r3, [pc, #80]	; (800a2d8 <vPortFree+0xb8>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4013      	ands	r3, r2
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d01e      	beq.n	800a2ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d11a      	bne.n	800a2ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	685a      	ldr	r2, [r3, #4]
 800a29c:	4b0e      	ldr	r3, [pc, #56]	; (800a2d8 <vPortFree+0xb8>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	43db      	mvns	r3, r3
 800a2a2:	401a      	ands	r2, r3
 800a2a4:	693b      	ldr	r3, [r7, #16]
 800a2a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2a8:	f7fe fb54 	bl	8008954 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	4b0a      	ldr	r3, [pc, #40]	; (800a2dc <vPortFree+0xbc>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	4a09      	ldr	r2, [pc, #36]	; (800a2dc <vPortFree+0xbc>)
 800a2b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2ba:	6938      	ldr	r0, [r7, #16]
 800a2bc:	f000 f874 	bl	800a3a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2c0:	4b07      	ldr	r3, [pc, #28]	; (800a2e0 <vPortFree+0xc0>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	4a06      	ldr	r2, [pc, #24]	; (800a2e0 <vPortFree+0xc0>)
 800a2c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2ca:	f7fe fb51 	bl	8008970 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2ce:	bf00      	nop
 800a2d0:	3718      	adds	r7, #24
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	2000ea40 	.word	0x2000ea40
 800a2dc:	2000ea30 	.word	0x2000ea30
 800a2e0:	2000ea3c 	.word	0x2000ea3c

0800a2e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ea:	f249 0388 	movw	r3, #37000	; 0x9088
 800a2ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2f0:	4b27      	ldr	r3, [pc, #156]	; (800a390 <prvHeapInit+0xac>)
 800a2f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00c      	beq.n	800a318 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	3307      	adds	r3, #7
 800a302:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	f023 0307 	bic.w	r3, r3, #7
 800a30a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a30c:	68ba      	ldr	r2, [r7, #8]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	1ad3      	subs	r3, r2, r3
 800a312:	4a1f      	ldr	r2, [pc, #124]	; (800a390 <prvHeapInit+0xac>)
 800a314:	4413      	add	r3, r2
 800a316:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a31c:	4a1d      	ldr	r2, [pc, #116]	; (800a394 <prvHeapInit+0xb0>)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a322:	4b1c      	ldr	r3, [pc, #112]	; (800a394 <prvHeapInit+0xb0>)
 800a324:	2200      	movs	r2, #0
 800a326:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	4413      	add	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a330:	2208      	movs	r2, #8
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	1a9b      	subs	r3, r3, r2
 800a336:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f023 0307 	bic.w	r3, r3, #7
 800a33e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	4a15      	ldr	r2, [pc, #84]	; (800a398 <prvHeapInit+0xb4>)
 800a344:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a346:	4b14      	ldr	r3, [pc, #80]	; (800a398 <prvHeapInit+0xb4>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	2200      	movs	r2, #0
 800a34c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a34e:	4b12      	ldr	r3, [pc, #72]	; (800a398 <prvHeapInit+0xb4>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2200      	movs	r2, #0
 800a354:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	68fa      	ldr	r2, [r7, #12]
 800a35e:	1ad2      	subs	r2, r2, r3
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a364:	4b0c      	ldr	r3, [pc, #48]	; (800a398 <prvHeapInit+0xb4>)
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	4a0a      	ldr	r2, [pc, #40]	; (800a39c <prvHeapInit+0xb8>)
 800a372:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	4a09      	ldr	r2, [pc, #36]	; (800a3a0 <prvHeapInit+0xbc>)
 800a37a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a37c:	4b09      	ldr	r3, [pc, #36]	; (800a3a4 <prvHeapInit+0xc0>)
 800a37e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a382:	601a      	str	r2, [r3, #0]
}
 800a384:	bf00      	nop
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr
 800a390:	2000599c 	.word	0x2000599c
 800a394:	2000ea24 	.word	0x2000ea24
 800a398:	2000ea2c 	.word	0x2000ea2c
 800a39c:	2000ea34 	.word	0x2000ea34
 800a3a0:	2000ea30 	.word	0x2000ea30
 800a3a4:	2000ea40 	.word	0x2000ea40

0800a3a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b085      	sub	sp, #20
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3b0:	4b28      	ldr	r3, [pc, #160]	; (800a454 <prvInsertBlockIntoFreeList+0xac>)
 800a3b2:	60fb      	str	r3, [r7, #12]
 800a3b4:	e002      	b.n	800a3bc <prvInsertBlockIntoFreeList+0x14>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	687a      	ldr	r2, [r7, #4]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d8f7      	bhi.n	800a3b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	68ba      	ldr	r2, [r7, #8]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d108      	bne.n	800a3ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	685b      	ldr	r3, [r3, #4]
 800a3e0:	441a      	add	r2, r3
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	68ba      	ldr	r2, [r7, #8]
 800a3f4:	441a      	add	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	429a      	cmp	r2, r3
 800a3fc:	d118      	bne.n	800a430 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681a      	ldr	r2, [r3, #0]
 800a402:	4b15      	ldr	r3, [pc, #84]	; (800a458 <prvInsertBlockIntoFreeList+0xb0>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	429a      	cmp	r2, r3
 800a408:	d00d      	beq.n	800a426 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	685a      	ldr	r2, [r3, #4]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	441a      	add	r2, r3
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	e008      	b.n	800a438 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a426:	4b0c      	ldr	r3, [pc, #48]	; (800a458 <prvInsertBlockIntoFreeList+0xb0>)
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	e003      	b.n	800a438 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	429a      	cmp	r2, r3
 800a43e:	d002      	beq.n	800a446 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a446:	bf00      	nop
 800a448:	3714      	adds	r7, #20
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	2000ea24 	.word	0x2000ea24
 800a458:	2000ea2c 	.word	0x2000ea2c

0800a45c <lfs_max>:
// Builtin functions, these may be replaced by more efficient
// toolchain-specific implementations. LFS_NO_INTRINSICS falls back to a more
// expensive basic C implementation for debugging purposes

// Min/max functions for unsigned 32-bit numbers
static inline uint32_t lfs_max(uint32_t a, uint32_t b) {
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
    return (a > b) ? a : b;
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4293      	cmp	r3, r2
 800a46c:	bf38      	it	cc
 800a46e:	4613      	movcc	r3, r2
}
 800a470:	4618      	mov	r0, r3
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr

0800a47c <lfs_min>:

static inline uint32_t lfs_min(uint32_t a, uint32_t b) {
 800a47c:	b480      	push	{r7}
 800a47e:	b083      	sub	sp, #12
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
 800a484:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800a486:	683a      	ldr	r2, [r7, #0]
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4293      	cmp	r3, r2
 800a48c:	bf28      	it	cs
 800a48e:	4613      	movcs	r3, r2
}
 800a490:	4618      	mov	r0, r3
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr

0800a49c <lfs_aligndown>:

// Align to nearest multiple of a size
static inline uint32_t lfs_aligndown(uint32_t a, uint32_t alignment) {
 800a49c:	b480      	push	{r7}
 800a49e:	b083      	sub	sp, #12
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
 800a4a4:	6039      	str	r1, [r7, #0]
    return a - (a % alignment);
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	fbb3 f2f2 	udiv	r2, r3, r2
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	fb01 f202 	mul.w	r2, r1, r2
 800a4b4:	1a9b      	subs	r3, r3, r2
 800a4b6:	687a      	ldr	r2, [r7, #4]
 800a4b8:	1ad3      	subs	r3, r2, r3
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <lfs_alignup>:

static inline uint32_t lfs_alignup(uint32_t a, uint32_t alignment) {
 800a4c6:	b580      	push	{r7, lr}
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
 800a4ce:	6039      	str	r1, [r7, #0]
    return lfs_aligndown(a + alignment-1, alignment);
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	3b01      	subs	r3, #1
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7ff ffde 	bl	800a49c <lfs_aligndown>
 800a4e0:	4603      	mov	r3, r0
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3708      	adds	r7, #8
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}

0800a4ea <lfs_npw2>:

// Find the smallest power of 2 greater than or equal to a
static inline uint32_t lfs_npw2(uint32_t a) {
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return 32 - __builtin_clz(a-1);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	fab3 f383 	clz	r3, r3
 800a4fa:	f1c3 0320 	rsb	r3, r3, #32
    s = (a > 0xff  ) << 3; a >>= s; r |= s;
    s = (a > 0xf   ) << 2; a >>= s; r |= s;
    s = (a > 0x3   ) << 1; a >>= s; r |= s;
    return (r | (a >> 1)) + 1;
#endif
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	370c      	adds	r7, #12
 800a502:	46bd      	mov	sp, r7
 800a504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a508:	4770      	bx	lr

0800a50a <lfs_ctz>:

// Count the number of trailing binary zeros in a
// lfs_ctz(0) may be undefined
static inline uint32_t lfs_ctz(uint32_t a) {
 800a50a:	b480      	push	{r7}
 800a50c:	b083      	sub	sp, #12
 800a50e:	af00      	add	r7, sp, #0
 800a510:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && defined(__GNUC__)
    return __builtin_ctz(a);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	fa93 f3a3 	rbit	r3, r3
 800a518:	fab3 f383 	clz	r3, r3
#else
    return lfs_npw2((a & -a) + 1) - 1;
#endif
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	370c      	adds	r7, #12
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <lfs_popc>:

// Count the number of binary ones in a
static inline uint32_t lfs_popc(uint32_t a) {
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && (defined(__GNUC__) || defined(__CC_ARM))
    return __builtin_popcount(a);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f7f5 febd 	bl	80002b0 <__popcountsi2>
 800a536:	4603      	mov	r3, r0
#else
    a = a - ((a >> 1) & 0x55555555);
    a = (a & 0x33333333) + ((a >> 2) & 0x33333333);
    return (((a + (a >> 4)) & 0xf0f0f0f) * 0x1010101) >> 24;
#endif
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3708      	adds	r7, #8
 800a53c:	46bd      	mov	sp, r7
 800a53e:	bd80      	pop	{r7, pc}

0800a540 <lfs_scmp>:

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
 800a540:	b480      	push	{r7}
 800a542:	b083      	sub	sp, #12
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	6039      	str	r1, [r7, #0]
    return (int)(unsigned)(a - b);
 800a54a:	687a      	ldr	r2, [r7, #4]
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	1ad3      	subs	r3, r2, r3
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <lfs_fromle32>:

// Convert between 32-bit little-endian and native order
static inline uint32_t lfs_fromle32(uint32_t a) {
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return a;
 800a564:	687b      	ldr	r3, [r7, #4]
    return (((uint8_t*)&a)[0] <<  0) |
           (((uint8_t*)&a)[1] <<  8) |
           (((uint8_t*)&a)[2] << 16) |
           (((uint8_t*)&a)[3] << 24);
#endif
}
 800a566:	4618      	mov	r0, r3
 800a568:	370c      	adds	r7, #12
 800a56a:	46bd      	mov	sp, r7
 800a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a570:	4770      	bx	lr

0800a572 <lfs_tole32>:

static inline uint32_t lfs_tole32(uint32_t a) {
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
    return lfs_fromle32(a);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7ff ffee 	bl	800a55c <lfs_fromle32>
 800a580:	4603      	mov	r3, r0
}
 800a582:	4618      	mov	r0, r3
 800a584:	3708      	adds	r7, #8
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <lfs_frombe32>:

// Convert between 32-bit big-endian and native order
static inline uint32_t lfs_frombe32(uint32_t a) {
 800a58a:	b480      	push	{r7}
 800a58c:	b083      	sub	sp, #12
 800a58e:	af00      	add	r7, sp, #0
 800a590:	6078      	str	r0, [r7, #4]
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	ba1b      	rev	r3, r3
    return (((uint8_t*)&a)[0] << 24) |
           (((uint8_t*)&a)[1] << 16) |
           (((uint8_t*)&a)[2] <<  8) |
           (((uint8_t*)&a)[3] <<  0);
#endif
}
 800a596:	4618      	mov	r0, r3
 800a598:	370c      	adds	r7, #12
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <lfs_tobe32>:

static inline uint32_t lfs_tobe32(uint32_t a) {
 800a5a2:	b580      	push	{r7, lr}
 800a5a4:	b082      	sub	sp, #8
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
    return lfs_frombe32(a);
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f7ff ffed 	bl	800a58a <lfs_frombe32>
 800a5b0:	4603      	mov	r3, r0
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3708      	adds	r7, #8
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	bd80      	pop	{r7, pc}

0800a5ba <lfs_malloc>:
// Calculate CRC-32 with polynomial = 0x04c11db7
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size);

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
 800a5ba:	b580      	push	{r7, lr}
 800a5bc:	b082      	sub	sp, #8
 800a5be:	af00      	add	r7, sp, #0
 800a5c0:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    return malloc(size);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f016 fcc0 	bl	8020f48 <malloc>
 800a5c8:	4603      	mov	r3, r0
#else
    (void)size;
    return NULL;
#endif
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3708      	adds	r7, #8
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}

0800a5d2 <lfs_free>:

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b082      	sub	sp, #8
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
#ifndef LFS_NO_MALLOC
    free(p);
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f016 fcbc 	bl	8020f58 <free>
#else
    (void)p;
#endif
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}

0800a5e8 <lfs_cache_drop>:
int lfs_mounted;
lfs_t lfs;
struct lfs_config cfg;

/// Caching block device operations ///
static inline void lfs_cache_drop(lfs_t *lfs, lfs_cache_t *rcache) {
 800a5e8:	b480      	push	{r7}
 800a5ea:	b083      	sub	sp, #12
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
    // do not zero, cheaper if cache is readonly or only going to be
    // written with identical data (during relocates)
    (void)lfs;
    rcache->block = LFS_BLOCK_NULL;
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a5f8:	601a      	str	r2, [r3, #0]
}
 800a5fa:	bf00      	nop
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <lfs_cache_zero>:

static inline void lfs_cache_zero(lfs_t *lfs, lfs_cache_t *pcache) {
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
 800a60e:	6039      	str	r1, [r7, #0]
    // zero to avoid information leak
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	68d8      	ldr	r0, [r3, #12]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61a:	461a      	mov	r2, r3
 800a61c:	21ff      	movs	r1, #255	; 0xff
 800a61e:	f017 f8e1 	bl	80217e4 <memset>
    pcache->block = LFS_BLOCK_NULL;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a628:	601a      	str	r2, [r3, #0]
}
 800a62a:	bf00      	nop
 800a62c:	3708      	adds	r7, #8
 800a62e:	46bd      	mov	sp, r7
 800a630:	bd80      	pop	{r7, pc}
	...

0800a634 <lfs_bd_read>:

static int lfs_bd_read(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        void *buffer, lfs_size_t size) {
 800a634:	b5b0      	push	{r4, r5, r7, lr}
 800a636:	b08a      	sub	sp, #40	; 0x28
 800a638:	af02      	add	r7, sp, #8
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
 800a640:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800a642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a644:	61fb      	str	r3, [r7, #28]
    if (block >= lfs->cfg->block_count ||
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a64e:	429a      	cmp	r2, r3
 800a650:	d208      	bcs.n	800a664 <lfs_bd_read+0x30>
            off+size > lfs->cfg->block_size) {
 800a652:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a656:	441a      	add	r2, r3
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    if (block >= lfs->cfg->block_count ||
 800a65e:	429a      	cmp	r2, r3
 800a660:	f240 811b 	bls.w	800a89a <lfs_bd_read+0x266>
        return LFS_ERR_CORRUPT;
 800a664:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800a668:	e11c      	b.n	800a8a4 <lfs_bd_read+0x270>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800a66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a66c:	61bb      	str	r3, [r7, #24]

        if (pcache && block == pcache->block &&
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d03f      	beq.n	800a6f4 <lfs_bd_read+0xc0>
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a67a:	429a      	cmp	r2, r3
 800a67c:	d13a      	bne.n	800a6f4 <lfs_bd_read+0xc0>
                off < pcache->off + pcache->size) {
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	685a      	ldr	r2, [r3, #4]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	689b      	ldr	r3, [r3, #8]
 800a686:	4413      	add	r3, r2
        if (pcache && block == pcache->block &&
 800a688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d232      	bcs.n	800a6f4 <lfs_bd_read+0xc0>
            if (off >= pcache->off) {
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a694:	429a      	cmp	r2, r3
 800a696:	d324      	bcc.n	800a6e2 <lfs_bd_read+0xae>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	68bb      	ldr	r3, [r7, #8]
 800a69e:	6859      	ldr	r1, [r3, #4]
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6a2:	1acb      	subs	r3, r1, r3
 800a6a4:	4413      	add	r3, r2
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	69b8      	ldr	r0, [r7, #24]
 800a6aa:	f7ff fee7 	bl	800a47c <lfs_min>
 800a6ae:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a6ba:	1acb      	subs	r3, r1, r3
 800a6bc:	4413      	add	r3, r2
 800a6be:	69ba      	ldr	r2, [r7, #24]
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	69f8      	ldr	r0, [r7, #28]
 800a6c4:	f017 f997 	bl	80219f6 <memcpy>

                data += diff;
 800a6c8:	69fa      	ldr	r2, [r7, #28]
 800a6ca:	69bb      	ldr	r3, [r7, #24]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	61fb      	str	r3, [r7, #28]
                off += diff;
 800a6d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800a6d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6da:	69bb      	ldr	r3, [r7, #24]
 800a6dc:	1ad3      	subs	r3, r2, r3
 800a6de:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800a6e0:	e0db      	b.n	800a89a <lfs_bd_read+0x266>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	685a      	ldr	r2, [r3, #4]
 800a6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6e8:	1ad3      	subs	r3, r2, r3
 800a6ea:	4619      	mov	r1, r3
 800a6ec:	69b8      	ldr	r0, [r7, #24]
 800a6ee:	f7ff fec5 	bl	800a47c <lfs_min>
 800a6f2:	61b8      	str	r0, [r7, #24]
        }

        if (block == rcache->block &&
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	d13a      	bne.n	800a774 <lfs_bd_read+0x140>
                off < rcache->off + rcache->size) {
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685a      	ldr	r2, [r3, #4]
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	4413      	add	r3, r2
        if (block == rcache->block &&
 800a708:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d232      	bcs.n	800a774 <lfs_bd_read+0x140>
            if (off >= rcache->off) {
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a714:	429a      	cmp	r2, r3
 800a716:	d324      	bcc.n	800a762 <lfs_bd_read+0x12e>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	689a      	ldr	r2, [r3, #8]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6859      	ldr	r1, [r3, #4]
 800a720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a722:	1acb      	subs	r3, r1, r3
 800a724:	4413      	add	r3, r2
 800a726:	4619      	mov	r1, r3
 800a728:	69b8      	ldr	r0, [r7, #24]
 800a72a:	f7ff fea7 	bl	800a47c <lfs_min>
 800a72e:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68da      	ldr	r2, [r3, #12]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a73a:	1acb      	subs	r3, r1, r3
 800a73c:	4413      	add	r3, r2
 800a73e:	69ba      	ldr	r2, [r7, #24]
 800a740:	4619      	mov	r1, r3
 800a742:	69f8      	ldr	r0, [r7, #28]
 800a744:	f017 f957 	bl	80219f6 <memcpy>

                data += diff;
 800a748:	69fa      	ldr	r2, [r7, #28]
 800a74a:	69bb      	ldr	r3, [r7, #24]
 800a74c:	4413      	add	r3, r2
 800a74e:	61fb      	str	r3, [r7, #28]
                off += diff;
 800a750:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	4413      	add	r3, r2
 800a756:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800a758:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800a760:	e09b      	b.n	800a89a <lfs_bd_read+0x266>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685a      	ldr	r2, [r3, #4]
 800a766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a768:	1ad3      	subs	r3, r2, r3
 800a76a:	4619      	mov	r1, r3
 800a76c:	69b8      	ldr	r0, [r7, #24]
 800a76e:	f7ff fe85 	bl	800a47c <lfs_min>
 800a772:	61b8      	str	r0, [r7, #24]
        }

        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800a774:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d336      	bcc.n	800a7ea <lfs_bd_read+0x1b6>
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a780:	69da      	ldr	r2, [r3, #28]
 800a782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a784:	fbb3 f1f2 	udiv	r1, r3, r2
 800a788:	fb01 f202 	mul.w	r2, r1, r2
 800a78c:	1a9b      	subs	r3, r3, r2
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d12b      	bne.n	800a7ea <lfs_bd_read+0x1b6>
                size >= lfs->cfg->read_size) {
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a796:	69db      	ldr	r3, [r3, #28]
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
 800a798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d325      	bcc.n	800a7ea <lfs_bd_read+0x1b6>
            // bypass cache?
            diff = lfs_aligndown(diff, lfs->cfg->read_size);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7a2:	69db      	ldr	r3, [r3, #28]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	69b8      	ldr	r0, [r7, #24]
 800a7a8:	f7ff fe78 	bl	800a49c <lfs_aligndown>
 800a7ac:	61b8      	str	r0, [r7, #24]
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7b2:	685c      	ldr	r4, [r3, #4]
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a7c2:	47a0      	blx	r4
 800a7c4:	6178      	str	r0, [r7, #20]
            if (err) {
 800a7c6:	697b      	ldr	r3, [r7, #20]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <lfs_bd_read+0x19c>
                return err;
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	e069      	b.n	800a8a4 <lfs_bd_read+0x270>
            }

            data += diff;
 800a7d0:	69fa      	ldr	r2, [r7, #28]
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	4413      	add	r3, r2
 800a7d6:	61fb      	str	r3, [r7, #28]
            off += diff;
 800a7d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	4413      	add	r3, r2
 800a7de:	637b      	str	r3, [r7, #52]	; 0x34
            size -= diff;
 800a7e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a7e2:	69bb      	ldr	r3, [r7, #24]
 800a7e4:	1ad3      	subs	r3, r2, r3
 800a7e6:	63fb      	str	r3, [r7, #60]	; 0x3c
            continue;
 800a7e8:	e057      	b.n	800a89a <lfs_bd_read+0x266>
        }

        // load to cache, first condition can no longer fail
        LFS_ASSERT(block < lfs->cfg->block_count);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a7ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d305      	bcc.n	800a802 <lfs_bd_read+0x1ce>
 800a7f6:	4b2d      	ldr	r3, [pc, #180]	; (800a8ac <lfs_bd_read+0x278>)
 800a7f8:	4a2d      	ldr	r2, [pc, #180]	; (800a8b0 <lfs_bd_read+0x27c>)
 800a7fa:	215e      	movs	r1, #94	; 0x5e
 800a7fc:	482d      	ldr	r0, [pc, #180]	; (800a8b4 <lfs_bd_read+0x280>)
 800a7fe:	f016 fb85 	bl	8020f0c <__assert_func>
        rcache->block = block;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a806:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a80c:	69db      	ldr	r3, [r3, #28]
 800a80e:	4619      	mov	r1, r3
 800a810:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800a812:	f7ff fe43 	bl	800a49c <lfs_aligndown>
 800a816:	4602      	mov	r2, r0
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(
                lfs_min(
 800a81c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a81e:	683b      	ldr	r3, [r7, #0]
 800a820:	441a      	add	r2, r3
                    lfs_alignup(off+hint, lfs->cfg->read_size),
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a826:	69db      	ldr	r3, [r3, #28]
                lfs_min(
 800a828:	4619      	mov	r1, r3
 800a82a:	4610      	mov	r0, r2
 800a82c:	f7ff fe4b 	bl	800a4c6 <lfs_alignup>
 800a830:	4602      	mov	r2, r0
                    lfs->cfg->block_size)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                lfs_min(
 800a838:	4619      	mov	r1, r3
 800a83a:	4610      	mov	r0, r2
 800a83c:	f7ff fe1e 	bl	800a47c <lfs_min>
 800a840:	4602      	mov	r2, r0
                - rcache->off,
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
        rcache->size = lfs_min(
 800a846:	1ad2      	subs	r2, r2, r3
                lfs->cfg->cache_size);
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        rcache->size = lfs_min(
 800a84e:	4619      	mov	r1, r3
 800a850:	4610      	mov	r0, r2
 800a852:	f7ff fe13 	bl	800a47c <lfs_min>
 800a856:	4602      	mov	r2, r0
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	609a      	str	r2, [r3, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a860:	685c      	ldr	r4, [r3, #4]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6819      	ldr	r1, [r3, #0]
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	685a      	ldr	r2, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	462b      	mov	r3, r5
 800a87a:	47a0      	blx	r4
 800a87c:	6138      	str	r0, [r7, #16]
        LFS_ASSERT(err <= 0);
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	dd05      	ble.n	800a890 <lfs_bd_read+0x25c>
 800a884:	4b0c      	ldr	r3, [pc, #48]	; (800a8b8 <lfs_bd_read+0x284>)
 800a886:	4a0a      	ldr	r2, [pc, #40]	; (800a8b0 <lfs_bd_read+0x27c>)
 800a888:	2169      	movs	r1, #105	; 0x69
 800a88a:	480a      	ldr	r0, [pc, #40]	; (800a8b4 <lfs_bd_read+0x280>)
 800a88c:	f016 fb3e 	bl	8020f0c <__assert_func>
        if (err) {
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <lfs_bd_read+0x266>
            return err;
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	e004      	b.n	800a8a4 <lfs_bd_read+0x270>
    while (size > 0) {
 800a89a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f47f aee4 	bne.w	800a66a <lfs_bd_read+0x36>
        }
    }

    return 0;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3720      	adds	r7, #32
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bdb0      	pop	{r4, r5, r7, pc}
 800a8ac:	08022f38 	.word	0x08022f38
 800a8b0:	08026e34 	.word	0x08026e34
 800a8b4:	08022f58 	.word	0x08022f58
 800a8b8:	08022f84 	.word	0x08022f84

0800a8bc <lfs_bd_cmp>:
};

static int lfs_bd_cmp(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08e      	sub	sp, #56	; 0x38
 800a8c0:	af04      	add	r7, sp, #16
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
    const uint8_t *data = buffer;
 800a8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8cc:	623b      	str	r3, [r7, #32]
    lfs_size_t diff = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	61fb      	str	r3, [r7, #28]

    for (lfs_off_t i = 0; i < size; i += diff) {
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	627b      	str	r3, [r7, #36]	; 0x24
 800a8d6:	e039      	b.n	800a94c <lfs_bd_cmp+0x90>
        uint8_t dat[8];

        diff = lfs_min(size-i, sizeof(dat));
 800a8d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	2108      	movs	r1, #8
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7ff fdcb 	bl	800a47c <lfs_min>
 800a8e6:	61f8      	str	r0, [r7, #28]
        int res = lfs_bd_read(lfs,
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	1ad1      	subs	r1, r2, r3
 800a8ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f2:	4413      	add	r3, r2
 800a8f4:	69fa      	ldr	r2, [r7, #28]
 800a8f6:	9203      	str	r2, [sp, #12]
 800a8f8:	f107 0210 	add.w	r2, r7, #16
 800a8fc:	9202      	str	r2, [sp, #8]
 800a8fe:	9301      	str	r3, [sp, #4]
 800a900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	460b      	mov	r3, r1
 800a906:	687a      	ldr	r2, [r7, #4]
 800a908:	68b9      	ldr	r1, [r7, #8]
 800a90a:	68f8      	ldr	r0, [r7, #12]
 800a90c:	f7ff fe92 	bl	800a634 <lfs_bd_read>
 800a910:	61b8      	str	r0, [r7, #24]
                pcache, rcache, hint-i,
                block, off+i, &dat, diff);
        if (res) {
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <lfs_bd_cmp+0x60>
            return res;
 800a918:	69bb      	ldr	r3, [r7, #24]
 800a91a:	e01c      	b.n	800a956 <lfs_bd_cmp+0x9a>
        }

        res = memcmp(dat, data + i, diff);
 800a91c:	6a3a      	ldr	r2, [r7, #32]
 800a91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a920:	18d1      	adds	r1, r2, r3
 800a922:	f107 0310 	add.w	r3, r7, #16
 800a926:	69fa      	ldr	r2, [r7, #28]
 800a928:	4618      	mov	r0, r3
 800a92a:	f016 ff31 	bl	8021790 <memcmp>
 800a92e:	61b8      	str	r0, [r7, #24]
        if (res) {
 800a930:	69bb      	ldr	r3, [r7, #24]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d006      	beq.n	800a944 <lfs_bd_cmp+0x88>
            return res < 0 ? LFS_CMP_LT : LFS_CMP_GT;
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	da01      	bge.n	800a940 <lfs_bd_cmp+0x84>
 800a93c:	2301      	movs	r3, #1
 800a93e:	e00a      	b.n	800a956 <lfs_bd_cmp+0x9a>
 800a940:	2302      	movs	r3, #2
 800a942:	e008      	b.n	800a956 <lfs_bd_cmp+0x9a>
    for (lfs_off_t i = 0; i < size; i += diff) {
 800a944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a946:	69fb      	ldr	r3, [r7, #28]
 800a948:	4413      	add	r3, r2
 800a94a:	627b      	str	r3, [r7, #36]	; 0x24
 800a94c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a94e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a950:	429a      	cmp	r2, r3
 800a952:	d3c1      	bcc.n	800a8d8 <lfs_bd_cmp+0x1c>
        }
    }

    return LFS_CMP_EQ;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3728      	adds	r7, #40	; 0x28
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <lfs_bd_flush>:

#ifndef LFS_READONLY
static int lfs_bd_flush(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800a960:	b5b0      	push	{r4, r5, r7, lr}
 800a962:	b08c      	sub	sp, #48	; 0x30
 800a964:	af04      	add	r7, sp, #16
 800a966:	60f8      	str	r0, [r7, #12]
 800a968:	60b9      	str	r1, [r7, #8]
 800a96a:	607a      	str	r2, [r7, #4]
 800a96c:	70fb      	strb	r3, [r7, #3]
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a976:	d061      	beq.n	800aa3c <lfs_bd_flush+0xdc>
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f113 0f02 	cmn.w	r3, #2
 800a980:	d05c      	beq.n	800aa3c <lfs_bd_flush+0xdc>
        LFS_ASSERT(pcache->block < lfs->cfg->block_count);
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	681a      	ldr	r2, [r3, #0]
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a98a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d305      	bcc.n	800a99c <lfs_bd_flush+0x3c>
 800a990:	4b2d      	ldr	r3, [pc, #180]	; (800aa48 <lfs_bd_flush+0xe8>)
 800a992:	4a2e      	ldr	r2, [pc, #184]	; (800aa4c <lfs_bd_flush+0xec>)
 800a994:	2197      	movs	r1, #151	; 0x97
 800a996:	482e      	ldr	r0, [pc, #184]	; (800aa50 <lfs_bd_flush+0xf0>)
 800a998:	f016 fab8 	bl	8020f0c <__assert_func>
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	689a      	ldr	r2, [r3, #8]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9a4:	6a1b      	ldr	r3, [r3, #32]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	f7ff fd8c 	bl	800a4c6 <lfs_alignup>
 800a9ae:	61f8      	str	r0, [r7, #28]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9b4:	689c      	ldr	r4, [r3, #8]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	6819      	ldr	r1, [r3, #0]
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	685a      	ldr	r2, [r3, #4]
                pcache->off, pcache->buffer, diff);
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	68dd      	ldr	r5, [r3, #12]
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	462b      	mov	r3, r5
 800a9cc:	47a0      	blx	r4
 800a9ce:	61b8      	str	r0, [r7, #24]
        LFS_ASSERT(err <= 0);
 800a9d0:	69bb      	ldr	r3, [r7, #24]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	dd05      	ble.n	800a9e2 <lfs_bd_flush+0x82>
 800a9d6:	4b1f      	ldr	r3, [pc, #124]	; (800aa54 <lfs_bd_flush+0xf4>)
 800a9d8:	4a1c      	ldr	r2, [pc, #112]	; (800aa4c <lfs_bd_flush+0xec>)
 800a9da:	219b      	movs	r1, #155	; 0x9b
 800a9dc:	481c      	ldr	r0, [pc, #112]	; (800aa50 <lfs_bd_flush+0xf0>)
 800a9de:	f016 fa95 	bl	8020f0c <__assert_func>
        if (err) {
 800a9e2:	69bb      	ldr	r3, [r7, #24]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d001      	beq.n	800a9ec <lfs_bd_flush+0x8c>
            return err;
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	e028      	b.n	800aa3e <lfs_bd_flush+0xde>
        }

        if (validate) {
 800a9ec:	78fb      	ldrb	r3, [r7, #3]
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d020      	beq.n	800aa34 <lfs_bd_flush+0xd4>
            // check data on disk
            lfs_cache_drop(lfs, rcache);
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f7ff fdf7 	bl	800a5e8 <lfs_cache_drop>
            int res = lfs_bd_cmp(lfs,
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	6852      	ldr	r2, [r2, #4]
                    NULL, rcache, diff,
                    pcache->block, pcache->off, pcache->buffer, diff);
 800aa02:	68b9      	ldr	r1, [r7, #8]
 800aa04:	68c9      	ldr	r1, [r1, #12]
            int res = lfs_bd_cmp(lfs,
 800aa06:	69f8      	ldr	r0, [r7, #28]
 800aa08:	9003      	str	r0, [sp, #12]
 800aa0a:	9102      	str	r1, [sp, #8]
 800aa0c:	9201      	str	r2, [sp, #4]
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	69fb      	ldr	r3, [r7, #28]
 800aa12:	687a      	ldr	r2, [r7, #4]
 800aa14:	2100      	movs	r1, #0
 800aa16:	68f8      	ldr	r0, [r7, #12]
 800aa18:	f7ff ff50 	bl	800a8bc <lfs_bd_cmp>
 800aa1c:	6178      	str	r0, [r7, #20]
            if (res < 0) {
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	da01      	bge.n	800aa28 <lfs_bd_flush+0xc8>
                return res;
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	e00a      	b.n	800aa3e <lfs_bd_flush+0xde>
            }

            if (res != LFS_CMP_EQ) {
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <lfs_bd_flush+0xd4>
                return LFS_ERR_CORRUPT;
 800aa2e:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800aa32:	e004      	b.n	800aa3e <lfs_bd_flush+0xde>
            }
        }

        lfs_cache_zero(lfs, pcache);
 800aa34:	68b9      	ldr	r1, [r7, #8]
 800aa36:	68f8      	ldr	r0, [r7, #12]
 800aa38:	f7ff fde5 	bl	800a606 <lfs_cache_zero>
    }

    return 0;
 800aa3c:	2300      	movs	r3, #0
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3720      	adds	r7, #32
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bdb0      	pop	{r4, r5, r7, pc}
 800aa46:	bf00      	nop
 800aa48:	08022f90 	.word	0x08022f90
 800aa4c:	08026e40 	.word	0x08026e40
 800aa50:	08022f58 	.word	0x08022f58
 800aa54:	08022f84 	.word	0x08022f84

0800aa58 <lfs_bd_sync>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_sync(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
 800aa64:	70fb      	strb	r3, [r7, #3]
    lfs_cache_drop(lfs, rcache);
 800aa66:	6879      	ldr	r1, [r7, #4]
 800aa68:	68f8      	ldr	r0, [r7, #12]
 800aa6a:	f7ff fdbd 	bl	800a5e8 <lfs_cache_drop>

    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800aa6e:	78fb      	ldrb	r3, [r7, #3]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	68b9      	ldr	r1, [r7, #8]
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f7ff ff73 	bl	800a960 <lfs_bd_flush>
 800aa7a:	6178      	str	r0, [r7, #20]
    if (err) {
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d001      	beq.n	800aa86 <lfs_bd_sync+0x2e>
        return err;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	e011      	b.n	800aaaa <lfs_bd_sync+0x52>
    }

    err = lfs->cfg->sync(lfs->cfg);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800aa90:	4610      	mov	r0, r2
 800aa92:	4798      	blx	r3
 800aa94:	6178      	str	r0, [r7, #20]
    LFS_ASSERT(err <= 0);
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	dd05      	ble.n	800aaa8 <lfs_bd_sync+0x50>
 800aa9c:	4b05      	ldr	r3, [pc, #20]	; (800aab4 <lfs_bd_sync+0x5c>)
 800aa9e:	4a06      	ldr	r2, [pc, #24]	; (800aab8 <lfs_bd_sync+0x60>)
 800aaa0:	21c1      	movs	r1, #193	; 0xc1
 800aaa2:	4806      	ldr	r0, [pc, #24]	; (800aabc <lfs_bd_sync+0x64>)
 800aaa4:	f016 fa32 	bl	8020f0c <__assert_func>
    return err;
 800aaa8:	697b      	ldr	r3, [r7, #20]
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3718      	adds	r7, #24
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}
 800aab2:	bf00      	nop
 800aab4:	08022f84 	.word	0x08022f84
 800aab8:	08026e50 	.word	0x08026e50
 800aabc:	08022f58 	.word	0x08022f58

0800aac0 <lfs_bd_prog>:

#ifndef LFS_READONLY
static int lfs_bd_prog(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate,
        lfs_block_t block, lfs_off_t off,
        const void *buffer, lfs_size_t size) {
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b088      	sub	sp, #32
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	60f8      	str	r0, [r7, #12]
 800aac8:	60b9      	str	r1, [r7, #8]
 800aaca:	607a      	str	r2, [r7, #4]
 800aacc:	70fb      	strb	r3, [r7, #3]
    const uint8_t *data = buffer;
 800aace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad0:	61fb      	str	r3, [r7, #28]
    LFS_ASSERT(block == LFS_BLOCK_INLINE || block < lfs->cfg->block_count);
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	f113 0f02 	cmn.w	r3, #2
 800aad8:	d00b      	beq.n	800aaf2 <lfs_bd_prog+0x32>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aae0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aae2:	429a      	cmp	r2, r3
 800aae4:	d305      	bcc.n	800aaf2 <lfs_bd_prog+0x32>
 800aae6:	4b47      	ldr	r3, [pc, #284]	; (800ac04 <lfs_bd_prog+0x144>)
 800aae8:	4a47      	ldr	r2, [pc, #284]	; (800ac08 <lfs_bd_prog+0x148>)
 800aaea:	21cc      	movs	r1, #204	; 0xcc
 800aaec:	4847      	ldr	r0, [pc, #284]	; (800ac0c <lfs_bd_prog+0x14c>)
 800aaee:	f016 fa0d 	bl	8020f0c <__assert_func>
    LFS_ASSERT(off + size <= lfs->cfg->block_size);
 800aaf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aaf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aaf6:	441a      	add	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aafc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d977      	bls.n	800abf2 <lfs_bd_prog+0x132>
 800ab02:	4b43      	ldr	r3, [pc, #268]	; (800ac10 <lfs_bd_prog+0x150>)
 800ab04:	4a40      	ldr	r2, [pc, #256]	; (800ac08 <lfs_bd_prog+0x148>)
 800ab06:	21cd      	movs	r1, #205	; 0xcd
 800ab08:	4840      	ldr	r0, [pc, #256]	; (800ac0c <lfs_bd_prog+0x14c>)
 800ab0a:	f016 f9ff 	bl	8020f0c <__assert_func>

    while (size > 0) {
        if (block == pcache->block &&
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d151      	bne.n	800abbc <lfs_bd_prog+0xfc>
                off >= pcache->off &&
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	685b      	ldr	r3, [r3, #4]
        if (block == pcache->block &&
 800ab1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d34c      	bcc.n	800abbc <lfs_bd_prog+0xfc>
                off < pcache->off + lfs->cfg->cache_size) {
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	685a      	ldr	r2, [r3, #4]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2c:	4413      	add	r3, r2
                off >= pcache->off &&
 800ab2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab30:	429a      	cmp	r2, r3
 800ab32:	d243      	bcs.n	800abbc <lfs_bd_prog+0xfc>
            // already fits in pcache?
            lfs_size_t diff = lfs_min(size,
                    lfs->cfg->cache_size - (off-pcache->off));
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	6859      	ldr	r1, [r3, #4]
 800ab3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab40:	1acb      	subs	r3, r1, r3
            lfs_size_t diff = lfs_min(size,
 800ab42:	4413      	add	r3, r2
 800ab44:	4619      	mov	r1, r3
 800ab46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ab48:	f7ff fc98 	bl	800a47c <lfs_min>
 800ab4c:	61b8      	str	r0, [r7, #24]
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	68da      	ldr	r2, [r3, #12]
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab58:	1acb      	subs	r3, r1, r3
 800ab5a:	4413      	add	r3, r2
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	69f9      	ldr	r1, [r7, #28]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f016 ff48 	bl	80219f6 <memcpy>

            data += diff;
 800ab66:	69fa      	ldr	r2, [r7, #28]
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	61fb      	str	r3, [r7, #28]
            off += diff;
 800ab6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	4413      	add	r3, r2
 800ab74:	62fb      	str	r3, [r7, #44]	; 0x2c
            size -= diff;
 800ab76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab78:	69bb      	ldr	r3, [r7, #24]
 800ab7a:	1ad3      	subs	r3, r2, r3
 800ab7c:	637b      	str	r3, [r7, #52]	; 0x34

            pcache->size = lfs_max(pcache->size, off - pcache->off);
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	6898      	ldr	r0, [r3, #8]
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	685b      	ldr	r3, [r3, #4]
 800ab86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab88:	1ad3      	subs	r3, r2, r3
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	f7ff fc66 	bl	800a45c <lfs_max>
 800ab90:	4602      	mov	r2, r0
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	609a      	str	r2, [r3, #8]
            if (pcache->size == lfs->cfg->cache_size) {
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	689a      	ldr	r2, [r3, #8]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aba0:	429a      	cmp	r2, r3
 800aba2:	d126      	bne.n	800abf2 <lfs_bd_prog+0x132>
                // eagerly flush out pcache if we fill up
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
 800aba4:	78fb      	ldrb	r3, [r7, #3]
 800aba6:	687a      	ldr	r2, [r7, #4]
 800aba8:	68b9      	ldr	r1, [r7, #8]
 800abaa:	68f8      	ldr	r0, [r7, #12]
 800abac:	f7ff fed8 	bl	800a960 <lfs_bd_flush>
 800abb0:	6178      	str	r0, [r7, #20]
                if (err) {
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d01c      	beq.n	800abf2 <lfs_bd_prog+0x132>
                    return err;
 800abb8:	697b      	ldr	r3, [r7, #20]
 800abba:	e01e      	b.n	800abfa <lfs_bd_prog+0x13a>
            continue;
        }

        // pcache must have been flushed, either by programming and
        // entire block or manually flushing the pcache
        LFS_ASSERT(pcache->block == LFS_BLOCK_NULL);
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800abc4:	d005      	beq.n	800abd2 <lfs_bd_prog+0x112>
 800abc6:	4b13      	ldr	r3, [pc, #76]	; (800ac14 <lfs_bd_prog+0x154>)
 800abc8:	4a0f      	ldr	r2, [pc, #60]	; (800ac08 <lfs_bd_prog+0x148>)
 800abca:	21ea      	movs	r1, #234	; 0xea
 800abcc:	480f      	ldr	r0, [pc, #60]	; (800ac0c <lfs_bd_prog+0x14c>)
 800abce:	f016 f99d 	bl	8020f0c <__assert_func>

        // prepare pcache, first condition can no longer fail
        pcache->block = block;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abd6:	601a      	str	r2, [r3, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	4619      	mov	r1, r3
 800abe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abe2:	f7ff fc5b 	bl	800a49c <lfs_aligndown>
 800abe6:	4602      	mov	r2, r0
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	605a      	str	r2, [r3, #4]
        pcache->size = 0;
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	2200      	movs	r2, #0
 800abf0:	609a      	str	r2, [r3, #8]
    while (size > 0) {
 800abf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d18a      	bne.n	800ab0e <lfs_bd_prog+0x4e>
    }

    return 0;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3720      	adds	r7, #32
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
 800ac02:	bf00      	nop
 800ac04:	08022fb8 	.word	0x08022fb8
 800ac08:	08026e5c 	.word	0x08026e5c
 800ac0c:	08022f58 	.word	0x08022f58
 800ac10:	08022ff4 	.word	0x08022ff4
 800ac14:	08023018 	.word	0x08023018

0800ac18 <lfs_bd_erase>:
#endif

#ifndef LFS_READONLY
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
    LFS_ASSERT(block < lfs->cfg->block_count);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	429a      	cmp	r2, r3
 800ac2c:	d305      	bcc.n	800ac3a <lfs_bd_erase+0x22>
 800ac2e:	4b0e      	ldr	r3, [pc, #56]	; (800ac68 <lfs_bd_erase+0x50>)
 800ac30:	4a0e      	ldr	r2, [pc, #56]	; (800ac6c <lfs_bd_erase+0x54>)
 800ac32:	21f8      	movs	r1, #248	; 0xf8
 800ac34:	480e      	ldr	r0, [pc, #56]	; (800ac70 <lfs_bd_erase+0x58>)
 800ac36:	f016 f969 	bl	8020f0c <__assert_func>
    int err = lfs->cfg->erase(lfs->cfg, block);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	4610      	mov	r0, r2
 800ac48:	4798      	blx	r3
 800ac4a:	60f8      	str	r0, [r7, #12]
    LFS_ASSERT(err <= 0);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	dd05      	ble.n	800ac5e <lfs_bd_erase+0x46>
 800ac52:	4b08      	ldr	r3, [pc, #32]	; (800ac74 <lfs_bd_erase+0x5c>)
 800ac54:	4a05      	ldr	r2, [pc, #20]	; (800ac6c <lfs_bd_erase+0x54>)
 800ac56:	21fa      	movs	r1, #250	; 0xfa
 800ac58:	4805      	ldr	r0, [pc, #20]	; (800ac70 <lfs_bd_erase+0x58>)
 800ac5a:	f016 f957 	bl	8020f0c <__assert_func>
    return err;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3710      	adds	r7, #16
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	08022f38 	.word	0x08022f38
 800ac6c:	08026e68 	.word	0x08026e68
 800ac70:	08022f58 	.word	0x08022f58
 800ac74:	08022f84 	.word	0x08022f84

0800ac78 <lfs_pair_swap>:
#endif


/// Small type-level utilities ///
// operations on block pairs
static inline void lfs_pair_swap(lfs_block_t pair[2]) {
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
    lfs_block_t t = pair[0];
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	60fb      	str	r3, [r7, #12]
    pair[0] = pair[1];
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	601a      	str	r2, [r3, #0]
    pair[1] = t;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3304      	adds	r3, #4
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	601a      	str	r2, [r3, #0]
}
 800ac96:	bf00      	nop
 800ac98:	3714      	adds	r7, #20
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca0:	4770      	bx	lr

0800aca2 <lfs_pair_isnull>:

static inline bool lfs_pair_isnull(const lfs_block_t pair[2]) {
 800aca2:	b480      	push	{r7}
 800aca4:	b083      	sub	sp, #12
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acb2:	d005      	beq.n	800acc0 <lfs_pair_isnull+0x1e>
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	3304      	adds	r3, #4
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acbe:	d101      	bne.n	800acc4 <lfs_pair_isnull+0x22>
 800acc0:	2301      	movs	r3, #1
 800acc2:	e000      	b.n	800acc6 <lfs_pair_isnull+0x24>
 800acc4:	2300      	movs	r3, #0
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	b2db      	uxtb	r3, r3
}
 800accc:	4618      	mov	r0, r3
 800acce:	370c      	adds	r7, #12
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr

0800acd8 <lfs_pair_cmp>:

static inline int lfs_pair_cmp(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
 800ace0:	6039      	str	r1, [r7, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681a      	ldr	r2, [r3, #0]
 800ace6:	683b      	ldr	r3, [r7, #0]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	429a      	cmp	r2, r3
 800acec:	d017      	beq.n	800ad1e <lfs_pair_cmp+0x46>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	3304      	adds	r3, #4
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	3304      	adds	r3, #4
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d00f      	beq.n	800ad1e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	3304      	adds	r3, #4
 800ad06:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d008      	beq.n	800ad1e <lfs_pair_cmp+0x46>
             paira[0] == pairb[1] || paira[1] == pairb[0]);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	3304      	adds	r3, #4
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	681b      	ldr	r3, [r3, #0]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d001      	beq.n	800ad1e <lfs_pair_cmp+0x46>
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e000      	b.n	800ad20 <lfs_pair_cmp+0x48>
 800ad1e:	2300      	movs	r3, #0
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <lfs_pair_sync>:

static inline bool lfs_pair_sync(
        const lfs_block_t paira[2],
        const lfs_block_t pairb[2]) {
 800ad2c:	b480      	push	{r7}
 800ad2e:	b083      	sub	sp, #12
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d107      	bne.n	800ad52 <lfs_pair_sync+0x26>
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	3304      	adds	r3, #4
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	3304      	adds	r3, #4
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d00d      	beq.n	800ad6e <lfs_pair_sync+0x42>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681a      	ldr	r2, [r3, #0]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	3304      	adds	r3, #4
 800ad5a:	681b      	ldr	r3, [r3, #0]
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800ad5c:	429a      	cmp	r2, r3
 800ad5e:	d108      	bne.n	800ad72 <lfs_pair_sync+0x46>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	3304      	adds	r3, #4
 800ad64:	681a      	ldr	r2, [r3, #0]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	429a      	cmp	r2, r3
 800ad6c:	d101      	bne.n	800ad72 <lfs_pair_sync+0x46>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e000      	b.n	800ad74 <lfs_pair_sync+0x48>
 800ad72:	2300      	movs	r3, #0
 800ad74:	f003 0301 	and.w	r3, r3, #1
 800ad78:	b2db      	uxtb	r3, r3
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	370c      	adds	r7, #12
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr

0800ad86 <lfs_pair_fromle32>:

static inline void lfs_pair_fromle32(lfs_block_t pair[2]) {
 800ad86:	b590      	push	{r4, r7, lr}
 800ad88:	b083      	sub	sp, #12
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_fromle32(pair[0]);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7ff fbe2 	bl	800a55c <lfs_fromle32>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_fromle32(pair[1]);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	3304      	adds	r3, #4
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	1d1c      	adds	r4, r3, #4
 800ada8:	4610      	mov	r0, r2
 800adaa:	f7ff fbd7 	bl	800a55c <lfs_fromle32>
 800adae:	4603      	mov	r3, r0
 800adb0:	6023      	str	r3, [r4, #0]
}
 800adb2:	bf00      	nop
 800adb4:	370c      	adds	r7, #12
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd90      	pop	{r4, r7, pc}

0800adba <lfs_pair_tole32>:

static inline void lfs_pair_tole32(lfs_block_t pair[2]) {
 800adba:	b590      	push	{r4, r7, lr}
 800adbc:	b083      	sub	sp, #12
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
    pair[0] = lfs_tole32(pair[0]);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f7ff fbd3 	bl	800a572 <lfs_tole32>
 800adcc:	4602      	mov	r2, r0
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	601a      	str	r2, [r3, #0]
    pair[1] = lfs_tole32(pair[1]);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	3304      	adds	r3, #4
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	1d1c      	adds	r4, r3, #4
 800addc:	4610      	mov	r0, r2
 800adde:	f7ff fbc8 	bl	800a572 <lfs_tole32>
 800ade2:	4603      	mov	r3, r0
 800ade4:	6023      	str	r3, [r4, #0]
}
 800ade6:	bf00      	nop
 800ade8:	370c      	adds	r7, #12
 800adea:	46bd      	mov	sp, r7
 800adec:	bd90      	pop	{r4, r7, pc}

0800adee <lfs_tag_isvalid>:
    ((cond) ? LFS_MKTAG(type, id, size) : LFS_MKTAG(LFS_FROM_NOOP, 0, 0))

#define LFS_MKTAG_IF_ELSE(cond, type1, id1, size1, type2, id2, size2) \
    ((cond) ? LFS_MKTAG(type1, id1, size1) : LFS_MKTAG(type2, id2, size2))

static inline bool lfs_tag_isvalid(lfs_tag_t tag) {
 800adee:	b480      	push	{r7}
 800adf0:	b083      	sub	sp, #12
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	6078      	str	r0, [r7, #4]
    return !(tag & 0x80000000);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	43db      	mvns	r3, r3
 800adfa:	0fdb      	lsrs	r3, r3, #31
 800adfc:	b2db      	uxtb	r3, r3
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	370c      	adds	r7, #12
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr

0800ae0a <lfs_tag_isdelete>:

static inline bool lfs_tag_isdelete(lfs_tag_t tag) {
 800ae0a:	b480      	push	{r7}
 800ae0c:	b083      	sub	sp, #12
 800ae0e:	af00      	add	r7, sp, #0
 800ae10:	6078      	str	r0, [r7, #4]
    return ((int32_t)(tag << 22) >> 22) == -1;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	059b      	lsls	r3, r3, #22
 800ae16:	159b      	asrs	r3, r3, #22
 800ae18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae1c:	bf0c      	ite	eq
 800ae1e:	2301      	moveq	r3, #1
 800ae20:	2300      	movne	r3, #0
 800ae22:	b2db      	uxtb	r3, r3
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <lfs_tag_type1>:

static inline uint16_t lfs_tag_type1(lfs_tag_t tag) {
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
    return (tag & 0x70000000) >> 20;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	0d1b      	lsrs	r3, r3, #20
 800ae3c:	b29b      	uxth	r3, r3
 800ae3e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae42:	b29b      	uxth	r3, r3
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	370c      	adds	r7, #12
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <lfs_tag_type3>:

static inline uint16_t lfs_tag_type3(lfs_tag_t tag) {
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
    return (tag & 0x7ff00000) >> 20;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	0d1b      	lsrs	r3, r3, #20
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ae62:	b29b      	uxth	r3, r3
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	370c      	adds	r7, #12
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr

0800ae70 <lfs_tag_chunk>:

static inline uint8_t lfs_tag_chunk(lfs_tag_t tag) {
 800ae70:	b480      	push	{r7}
 800ae72:	b083      	sub	sp, #12
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
    return (tag & 0x0ff00000) >> 20;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	0d1b      	lsrs	r3, r3, #20
 800ae7c:	b2db      	uxtb	r3, r3
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	370c      	adds	r7, #12
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr

0800ae8a <lfs_tag_splice>:

static inline int8_t lfs_tag_splice(lfs_tag_t tag) {
 800ae8a:	b580      	push	{r7, lr}
 800ae8c:	b082      	sub	sp, #8
 800ae8e:	af00      	add	r7, sp, #0
 800ae90:	6078      	str	r0, [r7, #4]
    return (int8_t)lfs_tag_chunk(tag);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff ffec 	bl	800ae70 <lfs_tag_chunk>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	b25b      	sxtb	r3, r3
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3708      	adds	r7, #8
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bd80      	pop	{r7, pc}

0800aea4 <lfs_tag_id>:

static inline uint16_t lfs_tag_id(lfs_tag_t tag) {
 800aea4:	b480      	push	{r7}
 800aea6:	b083      	sub	sp, #12
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
    return (tag & 0x000ffc00) >> 10;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	0a9b      	lsrs	r3, r3, #10
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aeb6:	b29b      	uxth	r3, r3
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <lfs_tag_size>:

static inline lfs_size_t lfs_tag_size(lfs_tag_t tag) {
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	6078      	str	r0, [r7, #4]
    return tag & 0x000003ff;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr

0800aede <lfs_tag_dsize>:

static inline lfs_size_t lfs_tag_dsize(lfs_tag_t tag) {
 800aede:	b580      	push	{r7, lr}
 800aee0:	b082      	sub	sp, #8
 800aee2:	af00      	add	r7, sp, #0
 800aee4:	6078      	str	r0, [r7, #4]
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7ff ff8f 	bl	800ae0a <lfs_tag_isdelete>
 800aeec:	4603      	mov	r3, r0
 800aeee:	461a      	mov	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	4413      	add	r3, r2
 800aef4:	4618      	mov	r0, r3
 800aef6:	f7ff ffe5 	bl	800aec4 <lfs_tag_size>
 800aefa:	4603      	mov	r3, r0
 800aefc:	3304      	adds	r3, #4
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3708      	adds	r7, #8
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}

0800af06 <lfs_gstate_xor>:
#define LFS_MKATTRS(...) \
    (struct lfs_mattr[]){__VA_ARGS__}, \
    sizeof((struct lfs_mattr[]){__VA_ARGS__}) / sizeof(struct lfs_mattr)

// operations on global state
static inline void lfs_gstate_xor(lfs_gstate_t *a, const lfs_gstate_t *b) {
 800af06:	b480      	push	{r7}
 800af08:	b085      	sub	sp, #20
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800af10:	2300      	movs	r3, #0
 800af12:	60fb      	str	r3, [r7, #12]
 800af14:	e012      	b.n	800af3c <lfs_gstate_xor+0x36>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	687a      	ldr	r2, [r7, #4]
 800af1c:	4413      	add	r3, r2
 800af1e:	6819      	ldr	r1, [r3, #0]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	683a      	ldr	r2, [r7, #0]
 800af26:	4413      	add	r3, r2
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	4403      	add	r3, r0
 800af32:	404a      	eors	r2, r1
 800af34:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	3301      	adds	r3, #1
 800af3a:	60fb      	str	r3, [r7, #12]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	2b02      	cmp	r3, #2
 800af40:	dde9      	ble.n	800af16 <lfs_gstate_xor+0x10>
    }
}
 800af42:	bf00      	nop
 800af44:	bf00      	nop
 800af46:	3714      	adds	r7, #20
 800af48:	46bd      	mov	sp, r7
 800af4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4e:	4770      	bx	lr

0800af50 <lfs_gstate_iszero>:

static inline bool lfs_gstate_iszero(const lfs_gstate_t *a) {
 800af50:	b480      	push	{r7}
 800af52:	b085      	sub	sp, #20
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800af58:	2300      	movs	r3, #0
 800af5a:	60fb      	str	r3, [r7, #12]
 800af5c:	e00b      	b.n	800af76 <lfs_gstate_iszero+0x26>
        if (((uint32_t*)a)[i] != 0) {
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	009b      	lsls	r3, r3, #2
 800af62:	687a      	ldr	r2, [r7, #4]
 800af64:	4413      	add	r3, r2
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d001      	beq.n	800af70 <lfs_gstate_iszero+0x20>
            return false;
 800af6c:	2300      	movs	r3, #0
 800af6e:	e006      	b.n	800af7e <lfs_gstate_iszero+0x2e>
    for (int i = 0; i < 3; i++) {
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	3301      	adds	r3, #1
 800af74:	60fb      	str	r3, [r7, #12]
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2b02      	cmp	r3, #2
 800af7a:	ddf0      	ble.n	800af5e <lfs_gstate_iszero+0xe>
        }
    }
    return true;
 800af7c:	2301      	movs	r3, #1
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <lfs_gstate_hasorphans>:

static inline bool lfs_gstate_hasorphans(const lfs_gstate_t *a) {
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b082      	sub	sp, #8
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	4618      	mov	r0, r3
 800af98:	f7ff ff94 	bl	800aec4 <lfs_tag_size>
 800af9c:	4603      	mov	r3, r0
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	bf14      	ite	ne
 800afa2:	2301      	movne	r3, #1
 800afa4:	2300      	moveq	r3, #0
 800afa6:	b2db      	uxtb	r3, r3
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <lfs_gstate_getorphans>:

static inline uint8_t lfs_gstate_getorphans(const lfs_gstate_t *a) {
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
    return lfs_tag_size(a->tag);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7ff ff81 	bl	800aec4 <lfs_tag_size>
 800afc2:	4603      	mov	r3, r0
 800afc4:	b2db      	uxtb	r3, r3
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <lfs_gstate_hasmove>:

static inline bool lfs_gstate_hasmove(const lfs_gstate_t *a) {
 800afce:	b580      	push	{r7, lr}
 800afd0:	b082      	sub	sp, #8
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
    return lfs_tag_type1(a->tag);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4618      	mov	r0, r3
 800afdc:	f7ff ff28 	bl	800ae30 <lfs_tag_type1>
 800afe0:	4603      	mov	r3, r0
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	bf14      	ite	ne
 800afe6:	2301      	movne	r3, #1
 800afe8:	2300      	moveq	r3, #0
 800afea:	b2db      	uxtb	r3, r3
}
 800afec:	4618      	mov	r0, r3
 800afee:	3708      	adds	r7, #8
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <lfs_gstate_hasmovehere>:

static inline bool lfs_gstate_hasmovehere(const lfs_gstate_t *a,
        const lfs_block_t *pair) {
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b082      	sub	sp, #8
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	6039      	str	r1, [r7, #0]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	4618      	mov	r0, r3
 800b004:	f7ff ff14 	bl	800ae30 <lfs_tag_type1>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d00a      	beq.n	800b024 <lfs_gstate_hasmovehere+0x30>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	3304      	adds	r3, #4
 800b012:	6839      	ldr	r1, [r7, #0]
 800b014:	4618      	mov	r0, r3
 800b016:	f7ff fe5f 	bl	800acd8 <lfs_pair_cmp>
 800b01a:	4603      	mov	r3, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <lfs_gstate_hasmovehere+0x30>
 800b020:	2301      	movs	r3, #1
 800b022:	e000      	b.n	800b026 <lfs_gstate_hasmovehere+0x32>
 800b024:	2300      	movs	r3, #0
 800b026:	f003 0301 	and.w	r3, r3, #1
 800b02a:	b2db      	uxtb	r3, r3
}
 800b02c:	4618      	mov	r0, r3
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <lfs_gstate_fromle32>:

static inline void lfs_gstate_fromle32(lfs_gstate_t *a) {
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_fromle32(a->tag);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff fa8b 	bl	800a55c <lfs_fromle32>
 800b046:	4602      	mov	r2, r0
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_fromle32(a->pair[0]);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	4618      	mov	r0, r3
 800b052:	f7ff fa83 	bl	800a55c <lfs_fromle32>
 800b056:	4602      	mov	r2, r0
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_fromle32(a->pair[1]);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	4618      	mov	r0, r3
 800b062:	f7ff fa7b 	bl	800a55c <lfs_fromle32>
 800b066:	4602      	mov	r2, r0
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	609a      	str	r2, [r3, #8]
}
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <lfs_gstate_tole32>:

static inline void lfs_gstate_tole32(lfs_gstate_t *a) {
 800b074:	b580      	push	{r7, lr}
 800b076:	b082      	sub	sp, #8
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
    a->tag     = lfs_tole32(a->tag);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff fa76 	bl	800a572 <lfs_tole32>
 800b086:	4602      	mov	r2, r0
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	601a      	str	r2, [r3, #0]
    a->pair[0] = lfs_tole32(a->pair[0]);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	4618      	mov	r0, r3
 800b092:	f7ff fa6e 	bl	800a572 <lfs_tole32>
 800b096:	4602      	mov	r2, r0
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	605a      	str	r2, [r3, #4]
    a->pair[1] = lfs_tole32(a->pair[1]);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	f7ff fa66 	bl	800a572 <lfs_tole32>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	609a      	str	r2, [r3, #8]
}
 800b0ac:	bf00      	nop
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <lfs_ctz_fromle32>:

// other endianness operations
static void lfs_ctz_fromle32(struct lfs_ctz *ctz) {
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_fromle32(ctz->head);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7ff fa4b 	bl	800a55c <lfs_fromle32>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_fromle32(ctz->size);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f7ff fa43 	bl	800a55c <lfs_fromle32>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	605a      	str	r2, [r3, #4]
}
 800b0dc:	bf00      	nop
 800b0de:	3708      	adds	r7, #8
 800b0e0:	46bd      	mov	sp, r7
 800b0e2:	bd80      	pop	{r7, pc}

0800b0e4 <lfs_ctz_tole32>:

#ifndef LFS_READONLY
static void lfs_ctz_tole32(struct lfs_ctz *ctz) {
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
    ctz->head = lfs_tole32(ctz->head);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f7ff fa3e 	bl	800a572 <lfs_tole32>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	601a      	str	r2, [r3, #0]
    ctz->size = lfs_tole32(ctz->size);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	4618      	mov	r0, r3
 800b102:	f7ff fa36 	bl	800a572 <lfs_tole32>
 800b106:	4602      	mov	r2, r0
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	605a      	str	r2, [r3, #4]
}
 800b10c:	bf00      	nop
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <lfs_superblock_fromle32>:
#endif

static inline void lfs_superblock_fromle32(lfs_superblock_t *superblock) {
 800b114:	b580      	push	{r7, lr}
 800b116:	b082      	sub	sp, #8
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_fromle32(superblock->version);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4618      	mov	r0, r3
 800b122:	f7ff fa1b 	bl	800a55c <lfs_fromle32>
 800b126:	4602      	mov	r2, r0
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_fromle32(superblock->block_size);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	4618      	mov	r0, r3
 800b132:	f7ff fa13 	bl	800a55c <lfs_fromle32>
 800b136:	4602      	mov	r2, r0
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_fromle32(superblock->block_count);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	689b      	ldr	r3, [r3, #8]
 800b140:	4618      	mov	r0, r3
 800b142:	f7ff fa0b 	bl	800a55c <lfs_fromle32>
 800b146:	4602      	mov	r2, r0
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_fromle32(superblock->name_max);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	68db      	ldr	r3, [r3, #12]
 800b150:	4618      	mov	r0, r3
 800b152:	f7ff fa03 	bl	800a55c <lfs_fromle32>
 800b156:	4602      	mov	r2, r0
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_fromle32(superblock->file_max);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	691b      	ldr	r3, [r3, #16]
 800b160:	4618      	mov	r0, r3
 800b162:	f7ff f9fb 	bl	800a55c <lfs_fromle32>
 800b166:	4602      	mov	r2, r0
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_fromle32(superblock->attr_max);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	695b      	ldr	r3, [r3, #20]
 800b170:	4618      	mov	r0, r3
 800b172:	f7ff f9f3 	bl	800a55c <lfs_fromle32>
 800b176:	4602      	mov	r2, r0
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	615a      	str	r2, [r3, #20]
}
 800b17c:	bf00      	nop
 800b17e:	3708      	adds	r7, #8
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <lfs_superblock_tole32>:

static inline void lfs_superblock_tole32(lfs_superblock_t *superblock) {
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
    superblock->version     = lfs_tole32(superblock->version);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	4618      	mov	r0, r3
 800b192:	f7ff f9ee 	bl	800a572 <lfs_tole32>
 800b196:	4602      	mov	r2, r0
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	601a      	str	r2, [r3, #0]
    superblock->block_size  = lfs_tole32(superblock->block_size);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f7ff f9e6 	bl	800a572 <lfs_tole32>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	605a      	str	r2, [r3, #4]
    superblock->block_count = lfs_tole32(superblock->block_count);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	689b      	ldr	r3, [r3, #8]
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f7ff f9de 	bl	800a572 <lfs_tole32>
 800b1b6:	4602      	mov	r2, r0
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	609a      	str	r2, [r3, #8]
    superblock->name_max    = lfs_tole32(superblock->name_max);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	f7ff f9d6 	bl	800a572 <lfs_tole32>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	60da      	str	r2, [r3, #12]
    superblock->file_max    = lfs_tole32(superblock->file_max);
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	691b      	ldr	r3, [r3, #16]
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7ff f9ce 	bl	800a572 <lfs_tole32>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	611a      	str	r2, [r3, #16]
    superblock->attr_max    = lfs_tole32(superblock->attr_max);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	695b      	ldr	r3, [r3, #20]
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7ff f9c6 	bl	800a572 <lfs_tole32>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	615a      	str	r2, [r3, #20]
}
 800b1ec:	bf00      	nop
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <lfs_mlist_isopen>:

#ifndef LFS_NO_ASSERT
static bool lfs_mlist_isopen(struct lfs_mlist *head,
        struct lfs_mlist *node) {
 800b1f4:	b480      	push	{r7}
 800b1f6:	b085      	sub	sp, #20
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800b1fe:	1d3b      	adds	r3, r7, #4
 800b200:	60fb      	str	r3, [r7, #12]
 800b202:	e009      	b.n	800b218 <lfs_mlist_isopen+0x24>
        if (*p == (struct lfs_mlist*)node) {
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	683a      	ldr	r2, [r7, #0]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d101      	bne.n	800b212 <lfs_mlist_isopen+0x1e>
            return true;
 800b20e:	2301      	movs	r3, #1
 800b210:	e007      	b.n	800b222 <lfs_mlist_isopen+0x2e>
    for (struct lfs_mlist **p = &head; *p; p = &(*p)->next) {
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	60fb      	str	r3, [r7, #12]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d1f1      	bne.n	800b204 <lfs_mlist_isopen+0x10>
        }
    }

    return false;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3714      	adds	r7, #20
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <lfs_mlist_remove>:
#endif

static void lfs_mlist_remove(lfs_t *lfs, struct lfs_mlist *mlist) {
 800b22e:	b480      	push	{r7}
 800b230:	b085      	sub	sp, #20
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	6039      	str	r1, [r7, #0]
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	3328      	adds	r3, #40	; 0x28
 800b23c:	60fb      	str	r3, [r7, #12]
 800b23e:	e00d      	b.n	800b25c <lfs_mlist_remove+0x2e>
        if (*p == mlist) {
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	683a      	ldr	r2, [r7, #0]
 800b246:	429a      	cmp	r2, r3
 800b248:	d105      	bne.n	800b256 <lfs_mlist_remove+0x28>
            *p = (*p)->next;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	601a      	str	r2, [r3, #0]
            break;
 800b254:	e007      	b.n	800b266 <lfs_mlist_remove+0x38>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d1ed      	bne.n	800b240 <lfs_mlist_remove+0x12>
        }
    }
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr

0800b272 <lfs_mlist_append>:

static void lfs_mlist_append(lfs_t *lfs, struct lfs_mlist *mlist) {
 800b272:	b480      	push	{r7}
 800b274:	b083      	sub	sp, #12
 800b276:	af00      	add	r7, sp, #0
 800b278:	6078      	str	r0, [r7, #4]
 800b27a:	6039      	str	r1, [r7, #0]
    mlist->next = lfs->mlist;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	601a      	str	r2, [r3, #0]
    lfs->mlist = mlist;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	683a      	ldr	r2, [r7, #0]
 800b288:	629a      	str	r2, [r3, #40]	; 0x28
}
 800b28a:	bf00      	nop
 800b28c:	370c      	adds	r7, #12
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr

0800b296 <lfs_alloc_lookahead>:
static int lfs_rawunmount(lfs_t *lfs);


/// Block allocator ///
#ifndef LFS_READONLY
static int lfs_alloc_lookahead(void *p, lfs_block_t block) {
 800b296:	b480      	push	{r7}
 800b298:	b085      	sub	sp, #20
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
 800b29e:	6039      	str	r1, [r7, #0]
    lfs_t *lfs = (lfs_t*)p;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	60fb      	str	r3, [r7, #12]
    lfs_block_t off = ((block - lfs->free.off)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a8:	683a      	ldr	r2, [r7, #0]
 800b2aa:	1ad2      	subs	r2, r2, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b2b2:	4413      	add	r3, r2
 800b2b4:	68fa      	ldr	r2, [r7, #12]
 800b2b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b2b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
    lfs_block_t off = ((block - lfs->free.off)
 800b2ba:	fbb3 f1f2 	udiv	r1, r3, r2
 800b2be:	fb01 f202 	mul.w	r2, r1, r2
 800b2c2:	1a9b      	subs	r3, r3, r2
 800b2c4:	60bb      	str	r3, [r7, #8]

    if (off < lfs->free.size) {
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ca:	68ba      	ldr	r2, [r7, #8]
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d212      	bcs.n	800b2f6 <lfs_alloc_lookahead+0x60>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	095b      	lsrs	r3, r3, #5
 800b2d8:	009a      	lsls	r2, r3, #2
 800b2da:	440a      	add	r2, r1
 800b2dc:	6811      	ldr	r1, [r2, #0]
 800b2de:	68ba      	ldr	r2, [r7, #8]
 800b2e0:	f002 021f 	and.w	r2, r2, #31
 800b2e4:	2001      	movs	r0, #1
 800b2e6:	fa00 f202 	lsl.w	r2, r0, r2
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	4403      	add	r3, r0
 800b2f2:	430a      	orrs	r2, r1
 800b2f4:	601a      	str	r2, [r3, #0]
    }

    return 0;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3714      	adds	r7, #20
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <lfs_alloc_ack>:
#endif

// indicate allocated blocks have been committed into the filesystem, this
// is to prevent blocks from being garbage collected in the middle of a
// commit operation
static void lfs_alloc_ack(lfs_t *lfs) {
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
    lfs->free.ack = lfs->cfg->block_count;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b316:	bf00      	nop
 800b318:	370c      	adds	r7, #12
 800b31a:	46bd      	mov	sp, r7
 800b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b320:	4770      	bx	lr

0800b322 <lfs_alloc_drop>:

// drop the lookahead buffer, this is done during mounting and failed
// traversals in order to avoid invalid lookahead state
static void lfs_alloc_drop(lfs_t *lfs) {
 800b322:	b580      	push	{r7, lr}
 800b324:	b082      	sub	sp, #8
 800b326:	af00      	add	r7, sp, #0
 800b328:	6078      	str	r0, [r7, #4]
    lfs->free.size = 0;
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	2200      	movs	r2, #0
 800b32e:	659a      	str	r2, [r3, #88]	; 0x58
    lfs->free.i = 0;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2200      	movs	r2, #0
 800b334:	65da      	str	r2, [r3, #92]	; 0x5c
    lfs_alloc_ack(lfs);
 800b336:	6878      	ldr	r0, [r7, #4]
 800b338:	f7ff ffe4 	bl	800b304 <lfs_alloc_ack>
}
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <lfs_alloc>:

#ifndef LFS_READONLY
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
 800b344:	b580      	push	{r7, lr}
 800b346:	b086      	sub	sp, #24
 800b348:	af02      	add	r7, sp, #8
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
    while (true) {
        while (lfs->free.i != lfs->free.size) {
 800b34e:	e04f      	b.n	800b3f0 <lfs_alloc+0xac>
            lfs_block_t off = lfs->free.i;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b354:	60bb      	str	r3, [r7, #8]
            lfs->free.i += 1;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b35a:	1c5a      	adds	r2, r3, #1
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	65da      	str	r2, [r3, #92]	; 0x5c
            lfs->free.ack -= 1;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b364:	1e5a      	subs	r2, r3, #1
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	661a      	str	r2, [r3, #96]	; 0x60

            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	095b      	lsrs	r3, r3, #5
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	4413      	add	r3, r2
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	f003 031f 	and.w	r3, r3, #31
 800b37e:	2101      	movs	r1, #1
 800b380:	fa01 f303 	lsl.w	r3, r1, r3
 800b384:	4013      	ands	r3, r2
 800b386:	2b00      	cmp	r3, #0
 800b388:	d132      	bne.n	800b3f0 <lfs_alloc+0xac>
                // found a free block
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	4413      	add	r3, r2
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b396:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b398:	fbb3 f1f2 	udiv	r1, r3, r2
 800b39c:	fb01 f202 	mul.w	r2, r1, r2
 800b3a0:	1a9a      	subs	r2, r3, r2
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	601a      	str	r2, [r3, #0]

                // eagerly find next off so an alloc ack can
                // discredit old lookahead blocks
                while (lfs->free.i != lfs->free.size &&
 800b3a6:	e009      	b.n	800b3bc <lfs_alloc+0x78>
                        (lfs->free.buffer[lfs->free.i / 32]
                            & (1U << (lfs->free.i % 32)))) {
                    lfs->free.i += 1;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3ac:	1c5a      	adds	r2, r3, #1
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	65da      	str	r2, [r3, #92]	; 0x5c
                    lfs->free.ack -= 1;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3b6:	1e5a      	subs	r2, r3, #1
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	661a      	str	r2, [r3, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c4:	429a      	cmp	r2, r3
 800b3c6:	d011      	beq.n	800b3ec <lfs_alloc+0xa8>
                        (lfs->free.buffer[lfs->free.i / 32]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3d0:	095b      	lsrs	r3, r3, #5
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4413      	add	r3, r2
 800b3d6:	681a      	ldr	r2, [r3, #0]
                            & (1U << (lfs->free.i % 32)))) {
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3dc:	f003 031f 	and.w	r3, r3, #31
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	fa01 f303 	lsl.w	r3, r1, r3
 800b3e6:	4013      	ands	r3, r2
                while (lfs->free.i != lfs->free.size &&
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1dd      	bne.n	800b3a8 <lfs_alloc+0x64>
                }

                return 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	e050      	b.n	800b492 <lfs_alloc+0x14e>
        while (lfs->free.i != lfs->free.size) {
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d1a9      	bne.n	800b350 <lfs_alloc+0xc>
            }
        }

        // check if we have looked at all blocks since last ack
        if (lfs->free.ack == 0) {
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b400:	2b00      	cmp	r3, #0
 800b402:	d10f      	bne.n	800b424 <lfs_alloc+0xe0>
            LFS_ERROR("No more free space %"PRIu32,
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b40c:	4413      	add	r3, r2
 800b40e:	4a23      	ldr	r2, [pc, #140]	; (800b49c <lfs_alloc+0x158>)
 800b410:	9200      	str	r2, [sp, #0]
 800b412:	f44f 720d 	mov.w	r2, #564	; 0x234
 800b416:	4922      	ldr	r1, [pc, #136]	; (800b4a0 <lfs_alloc+0x15c>)
 800b418:	4822      	ldr	r0, [pc, #136]	; (800b4a4 <lfs_alloc+0x160>)
 800b41a:	f015 ffcd 	bl	80213b8 <iprintf>
                    lfs->free.i + lfs->free.off);
            return LFS_ERR_NOSPC;
 800b41e:	f06f 031b 	mvn.w	r3, #27
 800b422:	e036      	b.n	800b492 <lfs_alloc+0x14e>
        }

        lfs->free.off = (lfs->free.off + lfs->free.size)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b42c:	4413      	add	r3, r2
                % lfs->cfg->block_count;
 800b42e:	687a      	ldr	r2, [r7, #4]
 800b430:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b432:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b434:	fbb3 f1f2 	udiv	r1, r3, r2
 800b438:	fb01 f202 	mul.w	r2, r1, r2
 800b43c:	1a9a      	subs	r2, r3, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b448:	00da      	lsls	r2, r3, #3
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b44e:	4619      	mov	r1, r3
 800b450:	4610      	mov	r0, r2
 800b452:	f7ff f813 	bl	800a47c <lfs_min>
 800b456:	4602      	mov	r2, r0
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	65da      	str	r2, [r3, #92]	; 0x5c

        // find mask of free blocks from tree
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b46a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b46c:	461a      	mov	r2, r3
 800b46e:	2100      	movs	r1, #0
 800b470:	f016 f9b8 	bl	80217e4 <memset>
        int err = lfs_fs_rawtraverse(lfs, lfs_alloc_lookahead, lfs, true);
 800b474:	2301      	movs	r3, #1
 800b476:	687a      	ldr	r2, [r7, #4]
 800b478:	490b      	ldr	r1, [pc, #44]	; (800b4a8 <lfs_alloc+0x164>)
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f004 f8e6 	bl	800f64c <lfs_fs_rawtraverse>
 800b480:	60f8      	str	r0, [r7, #12]
        if (err) {
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	f43f af62 	beq.w	800b34e <lfs_alloc+0xa>
            lfs_alloc_drop(lfs);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f7ff ff49 	bl	800b322 <lfs_alloc_drop>
            return err;
 800b490:	68fb      	ldr	r3, [r7, #12]
        }
    }
}
 800b492:	4618      	mov	r0, r3
 800b494:	3710      	adds	r7, #16
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	08023064 	.word	0x08023064
 800b4a0:	08022f58 	.word	0x08022f58
 800b4a4:	0802303c 	.word	0x0802303c
 800b4a8:	0800b297 	.word	0x0800b297

0800b4ac <lfs_dir_getslice>:
#endif

/// Metadata pair and directory operations ///
static lfs_stag_t lfs_dir_getslice(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
 800b4ac:	b590      	push	{r4, r7, lr}
 800b4ae:	b08f      	sub	sp, #60	; 0x3c
 800b4b0:	af04      	add	r7, sp, #16
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	60b9      	str	r1, [r7, #8]
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	603b      	str	r3, [r7, #0]
    lfs_off_t off = dir->off;
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	68db      	ldr	r3, [r3, #12]
 800b4be:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_tag_t ntag = dir->etag;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	613b      	str	r3, [r7, #16]
    lfs_stag_t gdiff = 0;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	623b      	str	r3, [r7, #32]

    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	333c      	adds	r3, #60	; 0x3c
 800b4ce:	68ba      	ldr	r2, [r7, #8]
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	f7ff fd8e 	bl	800aff4 <lfs_gstate_hasmovehere>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	f000 80ba 	beq.w	800b654 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(gmask) != 0 &&
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7ff fcdf 	bl	800aea4 <lfs_tag_id>
 800b4e6:	4603      	mov	r3, r0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	f000 80b3 	beq.w	800b654 <lfs_dir_getslice+0x1a8>
            lfs_tag_id(lfs->gdisk.tag) <= lfs_tag_id(gtag)) {
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f7ff fcd6 	bl	800aea4 <lfs_tag_id>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	461c      	mov	r4, r3
 800b4fc:	6838      	ldr	r0, [r7, #0]
 800b4fe:	f7ff fcd1 	bl	800aea4 <lfs_tag_id>
 800b502:	4603      	mov	r3, r0
            lfs_tag_id(gmask) != 0 &&
 800b504:	429c      	cmp	r4, r3
 800b506:	f200 80a5 	bhi.w	800b654 <lfs_dir_getslice+0x1a8>
        // synthetic moves
        gdiff -= LFS_MKTAG(0, 1, 0);
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800b510:	623b      	str	r3, [r7, #32]
    }

    // iterate over dir block backwards (for faster lookups)
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800b512:	e09f      	b.n	800b654 <lfs_dir_getslice+0x1a8>
        off -= lfs_tag_dsize(ntag);
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	4618      	mov	r0, r3
 800b518:	f7ff fce1 	bl	800aede <lfs_tag_dsize>
 800b51c:	4602      	mov	r2, r0
 800b51e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b520:	1a9b      	subs	r3, r3, r2
 800b522:	627b      	str	r3, [r7, #36]	; 0x24
        lfs_tag_t tag = ntag;
 800b524:	693b      	ldr	r3, [r7, #16]
 800b526:	61fb      	str	r3, [r7, #28]
        int err = lfs_bd_read(lfs,
 800b528:	68f9      	ldr	r1, [r7, #12]
                NULL, &lfs->rcache, sizeof(ntag),
                dir->pair[0], off, &ntag, sizeof(ntag));
 800b52a:	68bb      	ldr	r3, [r7, #8]
 800b52c:	681b      	ldr	r3, [r3, #0]
        int err = lfs_bd_read(lfs,
 800b52e:	2204      	movs	r2, #4
 800b530:	9203      	str	r2, [sp, #12]
 800b532:	f107 0210 	add.w	r2, r7, #16
 800b536:	9202      	str	r2, [sp, #8]
 800b538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b53a:	9201      	str	r2, [sp, #4]
 800b53c:	9300      	str	r3, [sp, #0]
 800b53e:	2304      	movs	r3, #4
 800b540:	460a      	mov	r2, r1
 800b542:	2100      	movs	r1, #0
 800b544:	68f8      	ldr	r0, [r7, #12]
 800b546:	f7ff f875 	bl	800a634 <lfs_bd_read>
 800b54a:	61b8      	str	r0, [r7, #24]
        if (err) {
 800b54c:	69bb      	ldr	r3, [r7, #24]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d001      	beq.n	800b556 <lfs_dir_getslice+0xaa>
            return err;
 800b552:	69bb      	ldr	r3, [r7, #24]
 800b554:	e08a      	b.n	800b66c <lfs_dir_getslice+0x1c0>
        }

        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	4618      	mov	r0, r3
 800b55a:	f7ff f816 	bl	800a58a <lfs_frombe32>
 800b55e:	4602      	mov	r2, r0
 800b560:	69fb      	ldr	r3, [r7, #28]
 800b562:	4053      	eors	r3, r2
 800b564:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b568:	613b      	str	r3, [r7, #16]

        if (lfs_tag_id(gmask) != 0 &&
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f7ff fc9a 	bl	800aea4 <lfs_tag_id>
 800b570:	4603      	mov	r3, r0
 800b572:	2b00      	cmp	r3, #0
 800b574:	d02b      	beq.n	800b5ce <lfs_dir_getslice+0x122>
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800b576:	69f8      	ldr	r0, [r7, #28]
 800b578:	f7ff fc5a 	bl	800ae30 <lfs_tag_type1>
 800b57c:	4603      	mov	r3, r0
        if (lfs_tag_id(gmask) != 0 &&
 800b57e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b582:	d124      	bne.n	800b5ce <lfs_dir_getslice+0x122>
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
 800b584:	69f8      	ldr	r0, [r7, #28]
 800b586:	f7ff fc8d 	bl	800aea4 <lfs_tag_id>
 800b58a:	4603      	mov	r3, r0
 800b58c:	461c      	mov	r4, r3
 800b58e:	6a3b      	ldr	r3, [r7, #32]
 800b590:	683a      	ldr	r2, [r7, #0]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	4618      	mov	r0, r3
 800b596:	f7ff fc85 	bl	800aea4 <lfs_tag_id>
 800b59a:	4603      	mov	r3, r0
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800b59c:	429c      	cmp	r4, r3
 800b59e:	d816      	bhi.n	800b5ce <lfs_dir_getslice+0x122>
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
 800b5a0:	6a3b      	ldr	r3, [r7, #32]
 800b5a2:	683a      	ldr	r2, [r7, #0]
 800b5a4:	1ad2      	subs	r2, r2, r3
 800b5a6:	4b33      	ldr	r3, [pc, #204]	; (800b674 <lfs_dir_getslice+0x1c8>)
 800b5a8:	4013      	ands	r3, r2
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
 800b5aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5b2:	69fa      	ldr	r2, [r7, #28]
 800b5b4:	429a      	cmp	r2, r3
 800b5b6:	d102      	bne.n	800b5be <lfs_dir_getslice+0x112>
                // found where we were created
                return LFS_ERR_NOENT;
 800b5b8:	f06f 0301 	mvn.w	r3, #1
 800b5bc:	e056      	b.n	800b66c <lfs_dir_getslice+0x1c0>
            }

            // move around splices
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800b5be:	69f8      	ldr	r0, [r7, #28]
 800b5c0:	f7ff fc63 	bl	800ae8a <lfs_tag_splice>
 800b5c4:	4603      	mov	r3, r0
 800b5c6:	029a      	lsls	r2, r3, #10
 800b5c8:	6a3b      	ldr	r3, [r7, #32]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	623b      	str	r3, [r7, #32]
        }

        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
 800b5ce:	687a      	ldr	r2, [r7, #4]
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	401a      	ands	r2, r3
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	1ac9      	subs	r1, r1, r3
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	400b      	ands	r3, r1
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	d138      	bne.n	800b654 <lfs_dir_getslice+0x1a8>
            if (lfs_tag_isdelete(tag)) {
 800b5e2:	69f8      	ldr	r0, [r7, #28]
 800b5e4:	f7ff fc11 	bl	800ae0a <lfs_tag_isdelete>
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <lfs_dir_getslice+0x148>
                return LFS_ERR_NOENT;
 800b5ee:	f06f 0301 	mvn.w	r3, #1
 800b5f2:	e03b      	b.n	800b66c <lfs_dir_getslice+0x1c0>
            }

            lfs_size_t diff = lfs_min(lfs_tag_size(tag), gsize);
 800b5f4:	69f8      	ldr	r0, [r7, #28]
 800b5f6:	f7ff fc65 	bl	800aec4 <lfs_tag_size>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7fe ff3c 	bl	800a47c <lfs_min>
 800b604:	6178      	str	r0, [r7, #20]
            err = lfs_bd_read(lfs,
 800b606:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, diff,
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b60e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b610:	440a      	add	r2, r1
            err = lfs_bd_read(lfs,
 800b612:	3204      	adds	r2, #4
 800b614:	6979      	ldr	r1, [r7, #20]
 800b616:	9103      	str	r1, [sp, #12]
 800b618:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b61a:	9102      	str	r1, [sp, #8]
 800b61c:	9201      	str	r2, [sp, #4]
 800b61e:	9300      	str	r3, [sp, #0]
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	4602      	mov	r2, r0
 800b624:	2100      	movs	r1, #0
 800b626:	68f8      	ldr	r0, [r7, #12]
 800b628:	f7ff f804 	bl	800a634 <lfs_bd_read>
 800b62c:	61b8      	str	r0, [r7, #24]
            if (err) {
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d001      	beq.n	800b638 <lfs_dir_getslice+0x18c>
                return err;
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	e019      	b.n	800b66c <lfs_dir_getslice+0x1c0>
            }

            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
 800b638:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	18d0      	adds	r0, r2, r3
 800b63e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b640:	697b      	ldr	r3, [r7, #20]
 800b642:	1ad3      	subs	r3, r2, r3
 800b644:	461a      	mov	r2, r3
 800b646:	2100      	movs	r1, #0
 800b648:	f016 f8cc 	bl	80217e4 <memset>

            return tag + gdiff;
 800b64c:	6a3a      	ldr	r2, [r7, #32]
 800b64e:	69fb      	ldr	r3, [r7, #28]
 800b650:	4413      	add	r3, r2
 800b652:	e00b      	b.n	800b66c <lfs_dir_getslice+0x1c0>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	4618      	mov	r0, r3
 800b658:	f7ff fc41 	bl	800aede <lfs_tag_dsize>
 800b65c:	4603      	mov	r3, r0
 800b65e:	3304      	adds	r3, #4
 800b660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b662:	429a      	cmp	r2, r3
 800b664:	f4bf af56 	bcs.w	800b514 <lfs_dir_getslice+0x68>
        }
    }

    return LFS_ERR_NOENT;
 800b668:	f06f 0301 	mvn.w	r3, #1
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	372c      	adds	r7, #44	; 0x2c
 800b670:	46bd      	mov	sp, r7
 800b672:	bd90      	pop	{r4, r7, pc}
 800b674:	000ffc00 	.word	0x000ffc00

0800b678 <lfs_dir_get>:

static lfs_stag_t lfs_dir_get(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
 800b678:	b580      	push	{r7, lr}
 800b67a:	b088      	sub	sp, #32
 800b67c:	af04      	add	r7, sp, #16
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	607a      	str	r2, [r7, #4]
 800b684:	603b      	str	r3, [r7, #0]
    return lfs_dir_getslice(lfs, dir,
 800b686:	6838      	ldr	r0, [r7, #0]
 800b688:	f7ff fc1c 	bl	800aec4 <lfs_tag_size>
 800b68c:	4603      	mov	r3, r0
 800b68e:	9302      	str	r3, [sp, #8]
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	9301      	str	r3, [sp, #4]
 800b694:	2300      	movs	r3, #0
 800b696:	9300      	str	r3, [sp, #0]
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	68b9      	ldr	r1, [r7, #8]
 800b69e:	68f8      	ldr	r0, [r7, #12]
 800b6a0:	f7ff ff04 	bl	800b4ac <lfs_dir_getslice>
 800b6a4:	4603      	mov	r3, r0
            gmask, gtag,
            0, buffer, lfs_tag_size(gtag));
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <lfs_dir_getread>:

static int lfs_dir_getread(lfs_t *lfs, const lfs_mdir_t *dir,
        const lfs_cache_t *pcache, lfs_cache_t *rcache, lfs_size_t hint,
        lfs_tag_t gmask, lfs_tag_t gtag,
        lfs_off_t off, void *buffer, lfs_size_t size) {
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b08c      	sub	sp, #48	; 0x30
 800b6b2:	af04      	add	r7, sp, #16
 800b6b4:	60f8      	str	r0, [r7, #12]
 800b6b6:	60b9      	str	r1, [r7, #8]
 800b6b8:	607a      	str	r2, [r7, #4]
 800b6ba:	603b      	str	r3, [r7, #0]
    uint8_t *data = buffer;
 800b6bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6be:	61fb      	str	r3, [r7, #28]
    if (off+size > lfs->cfg->block_size) {
 800b6c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c4:	441a      	add	r2, r3
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	f240 80c0 	bls.w	800b852 <lfs_dir_getread+0x1a4>
        return LFS_ERR_CORRUPT;
 800b6d2:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800b6d6:	e0c1      	b.n	800b85c <lfs_dir_getread+0x1ae>
    }

    while (size > 0) {
        lfs_size_t diff = size;
 800b6d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6da:	61bb      	str	r3, [r7, #24]

        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d03f      	beq.n	800b762 <lfs_dir_getread+0xb4>
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f113 0f02 	cmn.w	r3, #2
 800b6ea:	d13a      	bne.n	800b762 <lfs_dir_getread+0xb4>
                off < pcache->off + pcache->size) {
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685a      	ldr	r2, [r3, #4]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	689b      	ldr	r3, [r3, #8]
 800b6f4:	4413      	add	r3, r2
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
 800b6f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b6f8:	429a      	cmp	r2, r3
 800b6fa:	d232      	bcs.n	800b762 <lfs_dir_getread+0xb4>
            if (off >= pcache->off) {
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b702:	429a      	cmp	r2, r3
 800b704:	d324      	bcc.n	800b750 <lfs_dir_getread+0xa2>
                // is already in pcache?
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	689a      	ldr	r2, [r3, #8]
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6859      	ldr	r1, [r3, #4]
 800b70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b710:	1acb      	subs	r3, r1, r3
 800b712:	4413      	add	r3, r2
 800b714:	4619      	mov	r1, r3
 800b716:	69b8      	ldr	r0, [r7, #24]
 800b718:	f7fe feb0 	bl	800a47c <lfs_min>
 800b71c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	68da      	ldr	r2, [r3, #12]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b728:	1acb      	subs	r3, r1, r3
 800b72a:	4413      	add	r3, r2
 800b72c:	69ba      	ldr	r2, [r7, #24]
 800b72e:	4619      	mov	r1, r3
 800b730:	69f8      	ldr	r0, [r7, #28]
 800b732:	f016 f960 	bl	80219f6 <memcpy>

                data += diff;
 800b736:	69fa      	ldr	r2, [r7, #28]
 800b738:	69bb      	ldr	r3, [r7, #24]
 800b73a:	4413      	add	r3, r2
 800b73c:	61fb      	str	r3, [r7, #28]
                off += diff;
 800b73e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b740:	69bb      	ldr	r3, [r7, #24]
 800b742:	4413      	add	r3, r2
 800b744:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800b746:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	1ad3      	subs	r3, r2, r3
 800b74c:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800b74e:	e080      	b.n	800b852 <lfs_dir_getread+0x1a4>
            }

            // pcache takes priority
            diff = lfs_min(diff, pcache->off-off);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	685a      	ldr	r2, [r3, #4]
 800b754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b756:	1ad3      	subs	r3, r2, r3
 800b758:	4619      	mov	r1, r3
 800b75a:	69b8      	ldr	r0, [r7, #24]
 800b75c:	f7fe fe8e 	bl	800a47c <lfs_min>
 800b760:	61b8      	str	r0, [r7, #24]
        }

        if (rcache->block == LFS_BLOCK_INLINE &&
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	f113 0f02 	cmn.w	r3, #2
 800b76a:	d13a      	bne.n	800b7e2 <lfs_dir_getread+0x134>
                off < rcache->off + rcache->size) {
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	685a      	ldr	r2, [r3, #4]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	689b      	ldr	r3, [r3, #8]
 800b774:	4413      	add	r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
 800b776:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b778:	429a      	cmp	r2, r3
 800b77a:	d232      	bcs.n	800b7e2 <lfs_dir_getread+0x134>
            if (off >= rcache->off) {
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b782:	429a      	cmp	r2, r3
 800b784:	d324      	bcc.n	800b7d0 <lfs_dir_getread+0x122>
                // is already in rcache?
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	689a      	ldr	r2, [r3, #8]
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	6859      	ldr	r1, [r3, #4]
 800b78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b790:	1acb      	subs	r3, r1, r3
 800b792:	4413      	add	r3, r2
 800b794:	4619      	mov	r1, r3
 800b796:	69b8      	ldr	r0, [r7, #24]
 800b798:	f7fe fe70 	bl	800a47c <lfs_min>
 800b79c:	61b8      	str	r0, [r7, #24]
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	683b      	ldr	r3, [r7, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b7a8:	1acb      	subs	r3, r1, r3
 800b7aa:	4413      	add	r3, r2
 800b7ac:	69ba      	ldr	r2, [r7, #24]
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	69f8      	ldr	r0, [r7, #28]
 800b7b2:	f016 f920 	bl	80219f6 <memcpy>

                data += diff;
 800b7b6:	69fa      	ldr	r2, [r7, #28]
 800b7b8:	69bb      	ldr	r3, [r7, #24]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	61fb      	str	r3, [r7, #28]
                off += diff;
 800b7be:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7c0:	69bb      	ldr	r3, [r7, #24]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	637b      	str	r3, [r7, #52]	; 0x34
                size -= diff;
 800b7c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	1ad3      	subs	r3, r2, r3
 800b7cc:	63fb      	str	r3, [r7, #60]	; 0x3c
                continue;
 800b7ce:	e040      	b.n	800b852 <lfs_dir_getread+0x1a4>
            }

            // rcache takes priority
            diff = lfs_min(diff, rcache->off-off);
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	685a      	ldr	r2, [r3, #4]
 800b7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	4619      	mov	r1, r3
 800b7da:	69b8      	ldr	r0, [r7, #24]
 800b7dc:	f7fe fe4e 	bl	800a47c <lfs_min>
 800b7e0:	61b8      	str	r0, [r7, #24]
        }

        // load to cache, first condition can no longer fail
        rcache->block = LFS_BLOCK_INLINE;
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	f06f 0201 	mvn.w	r2, #1
 800b7e8:	601a      	str	r2, [r3, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b7ee:	69db      	ldr	r3, [r3, #28]
 800b7f0:	4619      	mov	r1, r3
 800b7f2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800b7f4:	f7fe fe52 	bl	800a49c <lfs_aligndown>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	605a      	str	r2, [r3, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800b7fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b802:	441a      	add	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b808:	69db      	ldr	r3, [r3, #28]
 800b80a:	4619      	mov	r1, r3
 800b80c:	4610      	mov	r0, r2
 800b80e:	f7fe fe5a 	bl	800a4c6 <lfs_alignup>
 800b812:	4602      	mov	r2, r0
                lfs->cfg->cache_size);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
 800b81a:	4619      	mov	r1, r3
 800b81c:	4610      	mov	r0, r2
 800b81e:	f7fe fe2d 	bl	800a47c <lfs_min>
 800b822:	4602      	mov	r2, r0
 800b824:	683b      	ldr	r3, [r7, #0]
 800b826:	609a      	str	r2, [r3, #8]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	685b      	ldr	r3, [r3, #4]
                rcache->off, rcache->buffer, rcache->size);
 800b82c:	683a      	ldr	r2, [r7, #0]
 800b82e:	68d2      	ldr	r2, [r2, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
 800b830:	6839      	ldr	r1, [r7, #0]
 800b832:	6889      	ldr	r1, [r1, #8]
 800b834:	9102      	str	r1, [sp, #8]
 800b836:	9201      	str	r2, [sp, #4]
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b83c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b83e:	68b9      	ldr	r1, [r7, #8]
 800b840:	68f8      	ldr	r0, [r7, #12]
 800b842:	f7ff fe33 	bl	800b4ac <lfs_dir_getslice>
 800b846:	6178      	str	r0, [r7, #20]
        if (err < 0) {
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	da01      	bge.n	800b852 <lfs_dir_getread+0x1a4>
            return err;
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	e004      	b.n	800b85c <lfs_dir_getread+0x1ae>
    while (size > 0) {
 800b852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b854:	2b00      	cmp	r3, #0
 800b856:	f47f af3f 	bne.w	800b6d8 <lfs_dir_getread+0x2a>
        }
    }

    return 0;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3720      	adds	r7, #32
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <lfs_dir_traverse_filter>:

#ifndef LFS_READONLY
static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b087      	sub	sp, #28
 800b868:	af00      	add	r7, sp, #0
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
    lfs_tag_t *filtertag = p;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	617b      	str	r3, [r7, #20]
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <lfs_dir_traverse_filter+0x1e>
 800b87e:	4b23      	ldr	r3, [pc, #140]	; (800b90c <lfs_dir_traverse_filter+0xa8>)
 800b880:	e000      	b.n	800b884 <lfs_dir_traverse_filter+0x20>
 800b882:	4b23      	ldr	r3, [pc, #140]	; (800b910 <lfs_dir_traverse_filter+0xac>)
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
 800b884:	613b      	str	r3, [r7, #16]

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	68bb      	ldr	r3, [r7, #8]
 800b88c:	405a      	eors	r2, r3
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	4013      	ands	r3, r2
 800b892:	2b00      	cmp	r3, #0
 800b894:	d014      	beq.n	800b8c0 <lfs_dir_traverse_filter+0x5c>
            lfs_tag_isdelete(*filtertag) ||
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7ff fab5 	bl	800ae0a <lfs_tag_isdelete>
 800b8a0:	4603      	mov	r3, r0
    if ((mask & tag) == (mask & *filtertag) ||
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d10c      	bne.n	800b8c0 <lfs_dir_traverse_filter+0x5c>
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
 800b8a6:	68bb      	ldr	r3, [r7, #8]
 800b8a8:	4a18      	ldr	r2, [pc, #96]	; (800b90c <lfs_dir_traverse_filter+0xa8>)
 800b8aa:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	6819      	ldr	r1, [r3, #0]
 800b8b0:	4b18      	ldr	r3, [pc, #96]	; (800b914 <lfs_dir_traverse_filter+0xb0>)
 800b8b2:	400b      	ands	r3, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800b8b4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800b8b8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d101      	bne.n	800b8c4 <lfs_dir_traverse_filter+0x60>
        return true;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e01e      	b.n	800b902 <lfs_dir_traverse_filter+0x9e>
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800b8c4:	68b8      	ldr	r0, [r7, #8]
 800b8c6:	f7ff fab3 	bl	800ae30 <lfs_tag_type1>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d0:	d116      	bne.n	800b900 <lfs_dir_traverse_filter+0x9c>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
 800b8d2:	68b8      	ldr	r0, [r7, #8]
 800b8d4:	f7ff fae6 	bl	800aea4 <lfs_tag_id>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	461c      	mov	r4, r3
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	f7ff fadf 	bl	800aea4 <lfs_tag_id>
 800b8e6:	4603      	mov	r3, r0
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
 800b8e8:	429c      	cmp	r4, r3
 800b8ea:	d809      	bhi.n	800b900 <lfs_dir_traverse_filter+0x9c>
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800b8ec:	68b8      	ldr	r0, [r7, #8]
 800b8ee:	f7ff facc 	bl	800ae8a <lfs_tag_splice>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	029a      	lsls	r2, r3, #10
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	441a      	add	r2, r3
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	601a      	str	r2, [r3, #0]
    }

    return false;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	371c      	adds	r7, #28
 800b906:	46bd      	mov	sp, r7
 800b908:	bd90      	pop	{r4, r7, pc}
 800b90a:	bf00      	nop
 800b90c:	7ffffc00 	.word	0x7ffffc00
 800b910:	700ffc00 	.word	0x700ffc00
 800b914:	000ffc00 	.word	0x000ffc00

0800b918 <lfs_dir_traverse>:
static int lfs_dir_traverse(lfs_t *lfs,
        const lfs_mdir_t *dir, lfs_off_t off, lfs_tag_t ptag,
        const struct lfs_mattr *attrs, int attrcount,
        lfs_tag_t tmask, lfs_tag_t ttag,
        uint16_t begin, uint16_t end, int16_t diff,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800b918:	b590      	push	{r4, r7, lr}
 800b91a:	b09d      	sub	sp, #116	; 0x74
 800b91c:	af0a      	add	r7, sp, #40	; 0x28
 800b91e:	60f8      	str	r0, [r7, #12]
 800b920:	60b9      	str	r1, [r7, #8]
 800b922:	607a      	str	r2, [r7, #4]
 800b924:	603b      	str	r3, [r7, #0]
    // iterate over directory and attrs
    while (true) {
        lfs_tag_t tag;
        const void *buffer;
        struct lfs_diskoff disk;
        if (off+lfs_tag_dsize(ptag) < dir->off) {
 800b926:	6838      	ldr	r0, [r7, #0]
 800b928:	f7ff fad9 	bl	800aede <lfs_tag_dsize>
 800b92c:	4602      	mov	r2, r0
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	441a      	add	r2, r3
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	68db      	ldr	r3, [r3, #12]
 800b936:	429a      	cmp	r2, r3
 800b938:	d233      	bcs.n	800b9a2 <lfs_dir_traverse+0x8a>
            off += lfs_tag_dsize(ptag);
 800b93a:	6838      	ldr	r0, [r7, #0]
 800b93c:	f7ff facf 	bl	800aede <lfs_tag_dsize>
 800b940:	4602      	mov	r2, r0
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4413      	add	r3, r2
 800b946:	607b      	str	r3, [r7, #4]
            int err = lfs_bd_read(lfs,
 800b948:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, sizeof(tag),
                    dir->pair[0], off, &tag, sizeof(tag));
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	681b      	ldr	r3, [r3, #0]
            int err = lfs_bd_read(lfs,
 800b94e:	2204      	movs	r2, #4
 800b950:	9203      	str	r2, [sp, #12]
 800b952:	f107 021c 	add.w	r2, r7, #28
 800b956:	9202      	str	r2, [sp, #8]
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	9201      	str	r2, [sp, #4]
 800b95c:	9300      	str	r3, [sp, #0]
 800b95e:	2304      	movs	r3, #4
 800b960:	460a      	mov	r2, r1
 800b962:	2100      	movs	r1, #0
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f7fe fe65 	bl	800a634 <lfs_bd_read>
 800b96a:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (err) {
 800b96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d001      	beq.n	800b976 <lfs_dir_traverse+0x5e>
                return err;
 800b972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b974:	e11e      	b.n	800bbb4 <lfs_dir_traverse+0x29c>
            }

            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	4618      	mov	r0, r3
 800b97a:	f7fe fe06 	bl	800a58a <lfs_frombe32>
 800b97e:	4602      	mov	r2, r0
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	4053      	eors	r3, r2
 800b984:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800b988:	61fb      	str	r3, [r7, #28]
            disk.block = dir->pair[0];
 800b98a:	68bb      	ldr	r3, [r7, #8]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	617b      	str	r3, [r7, #20]
            disk.off = off+sizeof(lfs_tag_t);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	3304      	adds	r3, #4
 800b994:	61bb      	str	r3, [r7, #24]
            buffer = &disk;
 800b996:	f107 0314 	add.w	r3, r7, #20
 800b99a:	647b      	str	r3, [r7, #68]	; 0x44
            ptag = tag;
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	603b      	str	r3, [r7, #0]
 800b9a0:	e011      	b.n	800b9c6 <lfs_dir_traverse+0xae>
        } else if (attrcount > 0) {
 800b9a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	dd0c      	ble.n	800b9c2 <lfs_dir_traverse+0xaa>
            tag = attrs[0].tag;
 800b9a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	61fb      	str	r3, [r7, #28]
            buffer = attrs[0].buffer;
 800b9ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	647b      	str	r3, [r7, #68]	; 0x44
            attrs += 1;
 800b9b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b9b6:	3308      	adds	r3, #8
 800b9b8:	65bb      	str	r3, [r7, #88]	; 0x58
            attrcount -= 1;
 800b9ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b9bc:	3b01      	subs	r3, #1
 800b9be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b9c0:	e001      	b.n	800b9c6 <lfs_dir_traverse+0xae>
        } else {
            return 0;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	e0f6      	b.n	800bbb4 <lfs_dir_traverse+0x29c>
        }

        lfs_tag_t mask = LFS_MKTAG(0x7ff, 0, 0);
 800b9c6:	4b7d      	ldr	r3, [pc, #500]	; (800bbbc <lfs_dir_traverse+0x2a4>)
 800b9c8:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
 800b9ca:	69fa      	ldr	r2, [r7, #28]
 800b9cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b9ce:	405a      	eors	r2, r3
 800b9d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b9d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b9d4:	400b      	ands	r3, r1
 800b9d6:	4013      	ands	r3, r2
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	f040 80e5 	bne.w	800bba8 <lfs_dir_traverse+0x290>
            continue;
        }

        // do we need to filter? inlining the filtering logic here allows
        // for some minor optimizations
        if (lfs_tag_id(tmask) != 0) {
 800b9de:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800b9e0:	f7ff fa60 	bl	800aea4 <lfs_tag_id>
 800b9e4:	4603      	mov	r3, r0
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d038      	beq.n	800ba5c <lfs_dir_traverse+0x144>
            // scan for duplicates and update tag based on creates/deletes
            int filter = lfs_dir_traverse(lfs,
 800b9ea:	f107 031c 	add.w	r3, r7, #28
 800b9ee:	9308      	str	r3, [sp, #32]
 800b9f0:	4b73      	ldr	r3, [pc, #460]	; (800bbc0 <lfs_dir_traverse+0x2a8>)
 800b9f2:	9307      	str	r3, [sp, #28]
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	9306      	str	r3, [sp, #24]
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	9305      	str	r3, [sp, #20]
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	9304      	str	r3, [sp, #16]
 800ba00:	2300      	movs	r3, #0
 800ba02:	9303      	str	r3, [sp, #12]
 800ba04:	2300      	movs	r3, #0
 800ba06:	9302      	str	r3, [sp, #8]
 800ba08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ba0a:	9301      	str	r3, [sp, #4]
 800ba0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ba0e:	9300      	str	r3, [sp, #0]
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	68b9      	ldr	r1, [r7, #8]
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f7ff ff7e 	bl	800b918 <lfs_dir_traverse>
 800ba1c:	6378      	str	r0, [r7, #52]	; 0x34
                    dir, off, ptag, attrs, attrcount,
                    0, 0, 0, 0, 0,
                    lfs_dir_traverse_filter, &tag);
            if (filter < 0) {
 800ba1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	da01      	bge.n	800ba28 <lfs_dir_traverse+0x110>
                return filter;
 800ba24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba26:	e0c5      	b.n	800bbb4 <lfs_dir_traverse+0x29c>
            }

            if (filter) {
 800ba28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	f040 80be 	bne.w	800bbac <lfs_dir_traverse+0x294>
                continue;
            }

            // in filter range?
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
 800ba30:	69fb      	ldr	r3, [r7, #28]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f7ff fa36 	bl	800aea4 <lfs_tag_id>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	461a      	mov	r2, r3
 800ba3c:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800ba40:	4293      	cmp	r3, r2
 800ba42:	f200 80b5 	bhi.w	800bbb0 <lfs_dir_traverse+0x298>
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	4618      	mov	r0, r3
 800ba4a:	f7ff fa2b 	bl	800aea4 <lfs_tag_id>
 800ba4e:	4603      	mov	r3, r0
 800ba50:	461a      	mov	r2, r3
 800ba52:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ba56:	4293      	cmp	r3, r2
 800ba58:	f240 80aa 	bls.w	800bbb0 <lfs_dir_traverse+0x298>
                continue;
            }
        }

        // handle special cases for mcu-side operations
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
 800ba5c:	69fb      	ldr	r3, [r7, #28]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7ff f9f6 	bl	800ae50 <lfs_tag_type3>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	f43f af5d 	beq.w	800b926 <lfs_dir_traverse+0xe>
            // do nothing
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
 800ba6c:	69fb      	ldr	r3, [r7, #28]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff f9ee 	bl	800ae50 <lfs_tag_type3>
 800ba74:	4603      	mov	r3, r0
 800ba76:	461a      	mov	r2, r3
 800ba78:	f240 1301 	movw	r3, #257	; 0x101
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d136      	bne.n	800baee <lfs_dir_traverse+0x1d6>
            uint16_t fromid = lfs_tag_size(tag);
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f7ff fa1e 	bl	800aec4 <lfs_tag_size>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	84fb      	strh	r3, [r7, #38]	; 0x26
            uint16_t toid = lfs_tag_id(tag);
 800ba8c:	69fb      	ldr	r3, [r7, #28]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7ff fa08 	bl	800aea4 <lfs_tag_id>
 800ba94:	4603      	mov	r3, r0
 800ba96:	84bb      	strh	r3, [r7, #36]	; 0x24
            int err = lfs_dir_traverse(lfs,
 800ba98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ba9a:	3301      	adds	r3, #1
 800ba9c:	b29b      	uxth	r3, r3
                    buffer, 0, 0xffffffff, NULL, 0,
                    LFS_MKTAG(0x600, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, 0, 0),
                    fromid, fromid+1, toid-fromid+diff,
 800ba9e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800baa0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800baa2:	1a8a      	subs	r2, r1, r2
 800baa4:	b291      	uxth	r1, r2
 800baa6:	f8b7 2070 	ldrh.w	r2, [r7, #112]	; 0x70
 800baaa:	440a      	add	r2, r1
 800baac:	b292      	uxth	r2, r2
            int err = lfs_dir_traverse(lfs,
 800baae:	b212      	sxth	r2, r2
 800bab0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800bab2:	9108      	str	r1, [sp, #32]
 800bab4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800bab6:	9107      	str	r1, [sp, #28]
 800bab8:	9206      	str	r2, [sp, #24]
 800baba:	9305      	str	r3, [sp, #20]
 800babc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800babe:	9304      	str	r3, [sp, #16]
 800bac0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800bac4:	9303      	str	r3, [sp, #12]
 800bac6:	4b3f      	ldr	r3, [pc, #252]	; (800bbc4 <lfs_dir_traverse+0x2ac>)
 800bac8:	9302      	str	r3, [sp, #8]
 800baca:	2300      	movs	r3, #0
 800bacc:	9301      	str	r3, [sp, #4]
 800bace:	2300      	movs	r3, #0
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bad6:	2200      	movs	r2, #0
 800bad8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bada:	68f8      	ldr	r0, [r7, #12]
 800badc:	f7ff ff1c 	bl	800b918 <lfs_dir_traverse>
 800bae0:	6238      	str	r0, [r7, #32]
                    cb, data);
            if (err) {
 800bae2:	6a3b      	ldr	r3, [r7, #32]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	f43f af1e 	beq.w	800b926 <lfs_dir_traverse+0xe>
                return err;
 800baea:	6a3b      	ldr	r3, [r7, #32]
 800baec:	e062      	b.n	800bbb4 <lfs_dir_traverse+0x29c>
            }
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7ff f9ad 	bl	800ae50 <lfs_tag_type3>
 800baf6:	4603      	mov	r3, r0
 800baf8:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 800bafc:	d144      	bne.n	800bb88 <lfs_dir_traverse+0x270>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800bafe:	2300      	movs	r3, #0
 800bb00:	643b      	str	r3, [r7, #64]	; 0x40
 800bb02:	e038      	b.n	800bb76 <lfs_dir_traverse+0x25e>
                const struct lfs_attr *a = buffer;
 800bb04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb06:	62fb      	str	r3, [r7, #44]	; 0x2c
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800bb08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb0a:	4613      	mov	r3, r2
 800bb0c:	005b      	lsls	r3, r3, #1
 800bb0e:	4413      	add	r3, r2
 800bb10:	009b      	lsls	r3, r3, #2
 800bb12:	461a      	mov	r2, r3
 800bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb16:	4413      	add	r3, r2
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800bb1e:	051c      	lsls	r4, r3, #20
 800bb20:	69fb      	ldr	r3, [r7, #28]
 800bb22:	4618      	mov	r0, r3
 800bb24:	f7ff f9be 	bl	800aea4 <lfs_tag_id>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800bb30:	4413      	add	r3, r2
 800bb32:	029b      	lsls	r3, r3, #10
 800bb34:	ea44 0103 	orr.w	r1, r4, r3
 800bb38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb3a:	4613      	mov	r3, r2
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	4413      	add	r3, r2
 800bb40:	009b      	lsls	r3, r3, #2
 800bb42:	461a      	mov	r2, r3
 800bb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb46:	4413      	add	r3, r2
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	4319      	orrs	r1, r3
                        lfs_tag_id(tag) + diff, a[i].size), a[i].buffer);
 800bb4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bb4e:	4613      	mov	r3, r2
 800bb50:	005b      	lsls	r3, r3, #1
 800bb52:	4413      	add	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	461a      	mov	r2, r3
 800bb58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5a:	4413      	add	r3, r2
 800bb5c:	685a      	ldr	r2, [r3, #4]
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
 800bb5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb60:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800bb62:	4798      	blx	r3
 800bb64:	62b8      	str	r0, [r7, #40]	; 0x28
                if (err) {
 800bb66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d001      	beq.n	800bb70 <lfs_dir_traverse+0x258>
                    return err;
 800bb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb6e:	e021      	b.n	800bbb4 <lfs_dir_traverse+0x29c>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
 800bb70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb72:	3301      	adds	r3, #1
 800bb74:	643b      	str	r3, [r7, #64]	; 0x40
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	4618      	mov	r0, r3
 800bb7a:	f7ff f9a3 	bl	800aec4 <lfs_tag_size>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bb82:	4293      	cmp	r3, r2
 800bb84:	d3be      	bcc.n	800bb04 <lfs_dir_traverse+0x1ec>
 800bb86:	e6ce      	b.n	800b926 <lfs_dir_traverse+0xe>
                }
            }
        } else {
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
 800bb88:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 800bb8c:	029a      	lsls	r2, r3, #10
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	18d1      	adds	r1, r2, r3
 800bb92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bb96:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800bb98:	4798      	blx	r3
 800bb9a:	6338      	str	r0, [r7, #48]	; 0x30
            if (err) {
 800bb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	f43f aec1 	beq.w	800b926 <lfs_dir_traverse+0xe>
                return err;
 800bba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bba6:	e005      	b.n	800bbb4 <lfs_dir_traverse+0x29c>
            continue;
 800bba8:	bf00      	nop
 800bbaa:	e6bc      	b.n	800b926 <lfs_dir_traverse+0xe>
                continue;
 800bbac:	bf00      	nop
 800bbae:	e6ba      	b.n	800b926 <lfs_dir_traverse+0xe>
                continue;
 800bbb0:	bf00      	nop
    while (true) {
 800bbb2:	e6b8      	b.n	800b926 <lfs_dir_traverse+0xe>
            }
        }
    }
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	374c      	adds	r7, #76	; 0x4c
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd90      	pop	{r4, r7, pc}
 800bbbc:	7ff00000 	.word	0x7ff00000
 800bbc0:	0800b865 	.word	0x0800b865
 800bbc4:	600ffc00 	.word	0x600ffc00

0800bbc8 <lfs_dir_fetchmatch>:
#endif

static lfs_stag_t lfs_dir_fetchmatch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2],
        lfs_tag_t fmask, lfs_tag_t ftag, uint16_t *id,
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
 800bbc8:	b590      	push	{r4, r7, lr}
 800bbca:	b09f      	sub	sp, #124	; 0x7c
 800bbcc:	af04      	add	r7, sp, #16
 800bbce:	60f8      	str	r0, [r7, #12]
 800bbd0:	60b9      	str	r1, [r7, #8]
 800bbd2:	607a      	str	r2, [r7, #4]
 800bbd4:	603b      	str	r3, [r7, #0]
    // we can find tag very efficiently during a fetch, since we're already
    // scanning the entire directory
    lfs_stag_t besttag = -1;
 800bbd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bbda:	667b      	str	r3, [r7, #100]	; 0x64

    // if either block address is invalid we return LFS_ERR_CORRUPT here,
    // otherwise later writes to the pair could fail
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681a      	ldr	r2, [r3, #0]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbe6:	429a      	cmp	r2, r3
 800bbe8:	d207      	bcs.n	800bbfa <lfs_dir_fetchmatch+0x32>
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	3304      	adds	r3, #4
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbf6:	429a      	cmp	r2, r3
 800bbf8:	d302      	bcc.n	800bc00 <lfs_dir_fetchmatch+0x38>
        return LFS_ERR_CORRUPT;
 800bbfa:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800bbfe:	e340      	b.n	800c282 <lfs_dir_fetchmatch+0x6ba>
    }

    // find the block with the most recent revision
    uint32_t revs[2] = {0, 0};
 800bc00:	2300      	movs	r3, #0
 800bc02:	633b      	str	r3, [r7, #48]	; 0x30
 800bc04:	2300      	movs	r3, #0
 800bc06:	637b      	str	r3, [r7, #52]	; 0x34
    int r = 0;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc10:	e052      	b.n	800bcb8 <lfs_dir_fetchmatch+0xf0>
        int err = lfs_bd_read(lfs,
 800bc12:	68f8      	ldr	r0, [r7, #12]
                NULL, &lfs->rcache, sizeof(revs[i]),
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800bc14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	4413      	add	r3, r2
        int err = lfs_bd_read(lfs,
 800bc1c:	681b      	ldr	r3, [r3, #0]
                pair[i], 0, &revs[i], sizeof(revs[i]));
 800bc1e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800bc22:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bc24:	0092      	lsls	r2, r2, #2
 800bc26:	440a      	add	r2, r1
        int err = lfs_bd_read(lfs,
 800bc28:	2104      	movs	r1, #4
 800bc2a:	9103      	str	r1, [sp, #12]
 800bc2c:	9202      	str	r2, [sp, #8]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	9201      	str	r2, [sp, #4]
 800bc32:	9300      	str	r3, [sp, #0]
 800bc34:	2304      	movs	r3, #4
 800bc36:	4602      	mov	r2, r0
 800bc38:	2100      	movs	r1, #0
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f7fe fcfa 	bl	800a634 <lfs_bd_read>
 800bc40:	63b8      	str	r0, [r7, #56]	; 0x38
        revs[i] = lfs_fromle32(revs[i]);
 800bc42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc44:	009b      	lsls	r3, r3, #2
 800bc46:	3368      	adds	r3, #104	; 0x68
 800bc48:	443b      	add	r3, r7
 800bc4a:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f7fe fc84 	bl	800a55c <lfs_fromle32>
 800bc54:	4602      	mov	r2, r0
 800bc56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc58:	009b      	lsls	r3, r3, #2
 800bc5a:	3368      	adds	r3, #104	; 0x68
 800bc5c:	443b      	add	r3, r7
 800bc5e:	f843 2c38 	str.w	r2, [r3, #-56]
        if (err && err != LFS_ERR_CORRUPT) {
 800bc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d005      	beq.n	800bc74 <lfs_dir_fetchmatch+0xac>
 800bc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bc6e:	d001      	beq.n	800bc74 <lfs_dir_fetchmatch+0xac>
            return err;
 800bc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc72:	e306      	b.n	800c282 <lfs_dir_fetchmatch+0x6ba>
        }

        if (err != LFS_ERR_CORRUPT &&
 800bc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc76:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bc7a:	d01a      	beq.n	800bcb2 <lfs_dir_fetchmatch+0xea>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
 800bc7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	3368      	adds	r3, #104	; 0x68
 800bc82:	443b      	add	r3, r7
 800bc84:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800bc88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc8a:	3301      	adds	r3, #1
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	f003 0301 	and.w	r3, r3, #1
 800bc92:	bfb8      	it	lt
 800bc94:	425b      	neglt	r3, r3
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	3368      	adds	r3, #104	; 0x68
 800bc9a:	443b      	add	r3, r7
 800bc9c:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800bca0:	4619      	mov	r1, r3
 800bca2:	4610      	mov	r0, r2
 800bca4:	f7fe fc4c 	bl	800a540 <lfs_scmp>
 800bca8:	4603      	mov	r3, r0
        if (err != LFS_ERR_CORRUPT &&
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	dd01      	ble.n	800bcb2 <lfs_dir_fetchmatch+0xea>
            r = i;
 800bcae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcb0:	663b      	str	r3, [r7, #96]	; 0x60
    for (int i = 0; i < 2; i++) {
 800bcb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bcb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	dda9      	ble.n	800bc12 <lfs_dir_fetchmatch+0x4a>
        }
    }

    dir->pair[0] = pair[(r+0)%2];
 800bcbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	f003 0301 	and.w	r3, r3, #1
 800bcc6:	bfb8      	it	lt
 800bcc8:	425b      	neglt	r3, r3
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	687a      	ldr	r2, [r7, #4]
 800bcce:	4413      	add	r3, r2
 800bcd0:	681a      	ldr	r2, [r3, #0]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	601a      	str	r2, [r3, #0]
    dir->pair[1] = pair[(r+1)%2];
 800bcd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcd8:	3301      	adds	r3, #1
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	f003 0301 	and.w	r3, r3, #1
 800bce0:	bfb8      	it	lt
 800bce2:	425b      	neglt	r3, r3
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	4413      	add	r3, r2
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	605a      	str	r2, [r3, #4]
    dir->rev = revs[(r+0)%2];
 800bcf0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	f003 0301 	and.w	r3, r3, #1
 800bcf8:	bfb8      	it	lt
 800bcfa:	425b      	neglt	r3, r3
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	3368      	adds	r3, #104	; 0x68
 800bd00:	443b      	add	r3, r7
 800bd02:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	609a      	str	r2, [r3, #8]
    dir->off = 0; // nonzero = found some commits
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	60da      	str	r2, [r3, #12]

    // now scan tags to fetch the actual dir and find possible match
    for (int i = 0; i < 2; i++) {
 800bd10:	2300      	movs	r3, #0
 800bd12:	65bb      	str	r3, [r7, #88]	; 0x58
 800bd14:	e2a1      	b.n	800c25a <lfs_dir_fetchmatch+0x692>
        lfs_off_t off = 0;
 800bd16:	2300      	movs	r3, #0
 800bd18:	657b      	str	r3, [r7, #84]	; 0x54
        lfs_tag_t ptag = 0xffffffff;
 800bd1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bd1e:	653b      	str	r3, [r7, #80]	; 0x50

        uint16_t tempcount = 0;
 800bd20:	2300      	movs	r3, #0
 800bd22:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
 800bd26:	4a96      	ldr	r2, [pc, #600]	; (800bf80 <lfs_dir_fetchmatch+0x3b8>)
 800bd28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bd2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd30:	e883 0003 	stmia.w	r3, {r0, r1}
        bool tempsplit = false;
 800bd34:	2300      	movs	r3, #0
 800bd36:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
        lfs_stag_t tempbesttag = besttag;
 800bd3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd3c:	64bb      	str	r3, [r7, #72]	; 0x48

        dir->rev = lfs_tole32(dir->rev);
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	689b      	ldr	r3, [r3, #8]
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fe fc15 	bl	800a572 <lfs_tole32>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	68bb      	ldr	r3, [r7, #8]
 800bd4c:	609a      	str	r2, [r3, #8]
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	3308      	adds	r3, #8
 800bd52:	2204      	movs	r2, #4
 800bd54:	4619      	mov	r1, r3
 800bd56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800bd5a:	f004 fae7 	bl	801032c <lfs_crc>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	627b      	str	r3, [r7, #36]	; 0x24
        dir->rev = lfs_fromle32(dir->rev);
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	4618      	mov	r0, r3
 800bd68:	f7fe fbf8 	bl	800a55c <lfs_fromle32>
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	609a      	str	r2, [r3, #8]

        while (true) {
            // extract next tag
            lfs_tag_t tag;
            off += lfs_tag_dsize(ptag);
 800bd72:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bd74:	f7ff f8b3 	bl	800aede <lfs_tag_dsize>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd7c:	4413      	add	r3, r2
 800bd7e:	657b      	str	r3, [r7, #84]	; 0x54
            int err = lfs_bd_read(lfs,
 800bd80:	68f9      	ldr	r1, [r7, #12]
                    NULL, &lfs->rcache, lfs->cfg->block_size,
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bd86:	6a58      	ldr	r0, [r3, #36]	; 0x24
            int err = lfs_bd_read(lfs,
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	2204      	movs	r2, #4
 800bd8e:	9203      	str	r2, [sp, #12]
 800bd90:	f107 0220 	add.w	r2, r7, #32
 800bd94:	9202      	str	r2, [sp, #8]
 800bd96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bd98:	9201      	str	r2, [sp, #4]
 800bd9a:	9300      	str	r3, [sp, #0]
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	460a      	mov	r2, r1
 800bda0:	2100      	movs	r1, #0
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7fe fc46 	bl	800a634 <lfs_bd_read>
 800bda8:	6438      	str	r0, [r7, #64]	; 0x40
                    dir->pair[0], off, &tag, sizeof(tag));
            if (err) {
 800bdaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d009      	beq.n	800bdc4 <lfs_dir_fetchmatch+0x1fc>
                if (err == LFS_ERR_CORRUPT) {
 800bdb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdb2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bdb6:	d103      	bne.n	800bdc0 <lfs_dir_fetchmatch+0x1f8>
                    // can't continue?
                    dir->erased = false;
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	759a      	strb	r2, [r3, #22]
                    break;
 800bdbe:	e1d4      	b.n	800c16a <lfs_dir_fetchmatch+0x5a2>
                }
                return err;
 800bdc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdc2:	e25e      	b.n	800c282 <lfs_dir_fetchmatch+0x6ba>
            }

            crc = lfs_crc(crc, &tag, sizeof(tag));
 800bdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc6:	f107 0120 	add.w	r1, r7, #32
 800bdca:	2204      	movs	r2, #4
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f004 faad 	bl	801032c <lfs_crc>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	627b      	str	r3, [r7, #36]	; 0x24
            tag = lfs_frombe32(tag) ^ ptag;
 800bdd6:	6a3b      	ldr	r3, [r7, #32]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f7fe fbd6 	bl	800a58a <lfs_frombe32>
 800bdde:	4602      	mov	r2, r0
 800bde0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bde2:	4053      	eors	r3, r2
 800bde4:	623b      	str	r3, [r7, #32]

            // next commit not yet programmed or we're not in valid range
            if (!lfs_tag_isvalid(tag)) {
 800bde6:	6a3b      	ldr	r3, [r7, #32]
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7ff f800 	bl	800adee <lfs_tag_isvalid>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	f083 0301 	eor.w	r3, r3, #1
 800bdf4:	b2db      	uxtb	r3, r3
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d01b      	beq.n	800be32 <lfs_dir_fetchmatch+0x26a>
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800bdfa:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800bdfc:	f7ff f818 	bl	800ae30 <lfs_tag_type1>
 800be00:	4603      	mov	r3, r0
 800be02:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800be06:	d10d      	bne.n	800be24 <lfs_dir_fetchmatch+0x25c>
                        dir->off % lfs->cfg->prog_size == 0);
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	68db      	ldr	r3, [r3, #12]
 800be0c:	68fa      	ldr	r2, [r7, #12]
 800be0e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800be10:	6a12      	ldr	r2, [r2, #32]
 800be12:	fbb3 f1f2 	udiv	r1, r3, r2
 800be16:	fb01 f202 	mul.w	r2, r1, r2
 800be1a:	1a9b      	subs	r3, r3, r2
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d101      	bne.n	800be24 <lfs_dir_fetchmatch+0x25c>
 800be20:	2301      	movs	r3, #1
 800be22:	e000      	b.n	800be26 <lfs_dir_fetchmatch+0x25e>
 800be24:	2300      	movs	r3, #0
 800be26:	f003 0301 	and.w	r3, r3, #1
 800be2a:	b2da      	uxtb	r2, r3
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	759a      	strb	r2, [r3, #22]
                break;
 800be30:	e19b      	b.n	800c16a <lfs_dir_fetchmatch+0x5a2>
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
 800be32:	6a3b      	ldr	r3, [r7, #32]
 800be34:	4618      	mov	r0, r3
 800be36:	f7ff f852 	bl	800aede <lfs_tag_dsize>
 800be3a:	4602      	mov	r2, r0
 800be3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be3e:	441a      	add	r2, r3
 800be40:	68fb      	ldr	r3, [r7, #12]
 800be42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be46:	429a      	cmp	r2, r3
 800be48:	d903      	bls.n	800be52 <lfs_dir_fetchmatch+0x28a>
                dir->erased = false;
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	2200      	movs	r2, #0
 800be4e:	759a      	strb	r2, [r3, #22]
                break;
 800be50:	e18b      	b.n	800c16a <lfs_dir_fetchmatch+0x5a2>
            }

            ptag = tag;
 800be52:	6a3b      	ldr	r3, [r7, #32]
 800be54:	653b      	str	r3, [r7, #80]	; 0x50

            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
 800be56:	6a3b      	ldr	r3, [r7, #32]
 800be58:	4618      	mov	r0, r3
 800be5a:	f7fe ffe9 	bl	800ae30 <lfs_tag_type1>
 800be5e:	4603      	mov	r3, r0
 800be60:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800be64:	d164      	bne.n	800bf30 <lfs_dir_fetchmatch+0x368>
                // check the crc attr
                uint32_t dcrc;
                err = lfs_bd_read(lfs,
 800be66:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be6c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be74:	3204      	adds	r2, #4
 800be76:	2104      	movs	r1, #4
 800be78:	9103      	str	r1, [sp, #12]
 800be7a:	f107 011c 	add.w	r1, r7, #28
 800be7e:	9102      	str	r1, [sp, #8]
 800be80:	9201      	str	r2, [sp, #4]
 800be82:	9300      	str	r3, [sp, #0]
 800be84:	4623      	mov	r3, r4
 800be86:	4602      	mov	r2, r0
 800be88:	2100      	movs	r1, #0
 800be8a:	68f8      	ldr	r0, [r7, #12]
 800be8c:	f7fe fbd2 	bl	800a634 <lfs_bd_read>
 800be90:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &dcrc, sizeof(dcrc));
                if (err) {
 800be92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be94:	2b00      	cmp	r3, #0
 800be96:	d009      	beq.n	800beac <lfs_dir_fetchmatch+0x2e4>
                    if (err == LFS_ERR_CORRUPT) {
 800be98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be9a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800be9e:	d103      	bne.n	800bea8 <lfs_dir_fetchmatch+0x2e0>
                        dir->erased = false;
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	2200      	movs	r2, #0
 800bea4:	759a      	strb	r2, [r3, #22]
                        break;
 800bea6:	e160      	b.n	800c16a <lfs_dir_fetchmatch+0x5a2>
                    }
                    return err;
 800bea8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800beaa:	e1ea      	b.n	800c282 <lfs_dir_fetchmatch+0x6ba>
                }
                dcrc = lfs_fromle32(dcrc);
 800beac:	69fb      	ldr	r3, [r7, #28]
 800beae:	4618      	mov	r0, r3
 800beb0:	f7fe fb54 	bl	800a55c <lfs_fromle32>
 800beb4:	4603      	mov	r3, r0
 800beb6:	61fb      	str	r3, [r7, #28]

                if (crc != dcrc) {
 800beb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	429a      	cmp	r2, r3
 800bebe:	d003      	beq.n	800bec8 <lfs_dir_fetchmatch+0x300>
                    dir->erased = false;
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	2200      	movs	r2, #0
 800bec4:	759a      	strb	r2, [r3, #22]
                    break;
 800bec6:	e150      	b.n	800c16a <lfs_dir_fetchmatch+0x5a2>
                }

                // reset the next bit if we need to
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
 800bec8:	6a3b      	ldr	r3, [r7, #32]
 800beca:	4618      	mov	r0, r3
 800becc:	f7fe ffd0 	bl	800ae70 <lfs_tag_chunk>
 800bed0:	4603      	mov	r3, r0
 800bed2:	07db      	lsls	r3, r3, #31
 800bed4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bed6:	4053      	eors	r3, r2
 800bed8:	653b      	str	r3, [r7, #80]	; 0x50

                // toss our crc into the filesystem seed for
                // pseudorandom numbers, note we use another crc here
                // as a collection function because it is sufficiently
                // random and convenient
                lfs->seed = lfs_crc(lfs->seed, &crc, sizeof(crc));
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bede:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800bee2:	2204      	movs	r2, #4
 800bee4:	4618      	mov	r0, r3
 800bee6:	f004 fa21 	bl	801032c <lfs_crc>
 800beea:	4602      	mov	r2, r0
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	62da      	str	r2, [r3, #44]	; 0x2c

                // update with what's found so far
                besttag = tempbesttag;
 800bef0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bef2:	667b      	str	r3, [r7, #100]	; 0x64
                dir->off = off + lfs_tag_dsize(tag);
 800bef4:	6a3b      	ldr	r3, [r7, #32]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f7fe fff1 	bl	800aede <lfs_tag_dsize>
 800befc:	4602      	mov	r2, r0
 800befe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf00:	441a      	add	r2, r3
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	60da      	str	r2, [r3, #12]
                dir->etag = ptag;
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bf0a:	611a      	str	r2, [r3, #16]
                dir->count = tempcount;
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800bf12:	829a      	strh	r2, [r3, #20]
                dir->tail[0] = temptail[0];
 800bf14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	619a      	str	r2, [r3, #24]
                dir->tail[1] = temptail[1];
 800bf1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	61da      	str	r2, [r3, #28]
                dir->split = tempsplit;
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800bf26:	75da      	strb	r2, [r3, #23]

                // reset crc
                crc = 0xffffffff;
 800bf28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf2c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf2e:	e720      	b.n	800bd72 <lfs_dir_fetchmatch+0x1aa>
                continue;
            }

            // crc the entry first, hopefully leaving it in the cache
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800bf30:	2304      	movs	r3, #4
 800bf32:	647b      	str	r3, [r7, #68]	; 0x44
 800bf34:	e032      	b.n	800bf9c <lfs_dir_fetchmatch+0x3d4>
                uint8_t dat;
                err = lfs_bd_read(lfs,
 800bf36:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bf3c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bf44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf46:	440a      	add	r2, r1
 800bf48:	2101      	movs	r1, #1
 800bf4a:	9103      	str	r1, [sp, #12]
 800bf4c:	f107 011b 	add.w	r1, r7, #27
 800bf50:	9102      	str	r1, [sp, #8]
 800bf52:	9201      	str	r2, [sp, #4]
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	4623      	mov	r3, r4
 800bf58:	4602      	mov	r2, r0
 800bf5a:	2100      	movs	r1, #0
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f7fe fb69 	bl	800a634 <lfs_bd_read>
 800bf62:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+j, &dat, 1);
                if (err) {
 800bf64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d00c      	beq.n	800bf84 <lfs_dir_fetchmatch+0x3bc>
                    if (err == LFS_ERR_CORRUPT) {
 800bf6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bf6c:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800bf70:	d103      	bne.n	800bf7a <lfs_dir_fetchmatch+0x3b2>
                        dir->erased = false;
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	2200      	movs	r2, #0
 800bf76:	759a      	strb	r2, [r3, #22]
 800bf78:	e018      	b.n	800bfac <lfs_dir_fetchmatch+0x3e4>
                        break;
                    }
                    return err;
 800bf7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
                return err;
 800bf7c:	e181      	b.n	800c282 <lfs_dir_fetchmatch+0x6ba>
 800bf7e:	bf00      	nop
 800bf80:	080230a0 	.word	0x080230a0
                }

                crc = lfs_crc(crc, &dat, 1);
 800bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf86:	f107 011b 	add.w	r1, r7, #27
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f004 f9cd 	bl	801032c <lfs_crc>
 800bf92:	4603      	mov	r3, r0
 800bf94:	627b      	str	r3, [r7, #36]	; 0x24
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
 800bf96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf98:	3301      	adds	r3, #1
 800bf9a:	647b      	str	r3, [r7, #68]	; 0x44
 800bf9c:	6a3b      	ldr	r3, [r7, #32]
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fe ff9d 	bl	800aede <lfs_tag_dsize>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	d3c4      	bcc.n	800bf36 <lfs_dir_fetchmatch+0x36e>
            }

            // directory modification tags?
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
 800bfac:	6a3b      	ldr	r3, [r7, #32]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f7fe ff3e 	bl	800ae30 <lfs_tag_type1>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d113      	bne.n	800bfe2 <lfs_dir_fetchmatch+0x41a>
                // increase count of files if necessary
                if (lfs_tag_id(tag) >= tempcount) {
 800bfba:	6a3b      	ldr	r3, [r7, #32]
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f7fe ff71 	bl	800aea4 <lfs_tag_id>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	f200 8081 	bhi.w	800c0d2 <lfs_dir_fetchmatch+0x50a>
                    tempcount = lfs_tag_id(tag) + 1;
 800bfd0:	6a3b      	ldr	r3, [r7, #32]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f7fe ff66 	bl	800aea4 <lfs_tag_id>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	3301      	adds	r3, #1
 800bfdc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800bfe0:	e077      	b.n	800c0d2 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
 800bfe2:	6a3b      	ldr	r3, [r7, #32]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f7fe ff23 	bl	800ae30 <lfs_tag_type1>
 800bfea:	4603      	mov	r3, r0
 800bfec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bff0:	d134      	bne.n	800c05c <lfs_dir_fetchmatch+0x494>
                tempcount += lfs_tag_splice(tag);
 800bff2:	6a3b      	ldr	r3, [r7, #32]
 800bff4:	4618      	mov	r0, r3
 800bff6:	f7fe ff48 	bl	800ae8a <lfs_tag_splice>
 800bffa:	4603      	mov	r3, r0
 800bffc:	b29a      	uxth	r2, r3
 800bffe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800c002:	4413      	add	r3, r2
 800c004:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
 800c008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c00a:	4ba0      	ldr	r3, [pc, #640]	; (800c28c <lfs_dir_fetchmatch+0x6c4>)
 800c00c:	4013      	ands	r3, r2
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
 800c00e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800c012:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800c016:	6a3a      	ldr	r2, [r7, #32]
 800c018:	4293      	cmp	r3, r2
 800c01a:	d104      	bne.n	800c026 <lfs_dir_fetchmatch+0x45e>
                    tempbesttag |= 0x80000000;
 800c01c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c01e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c022:	64bb      	str	r3, [r7, #72]	; 0x48
 800c024:	e055      	b.n	800c0d2 <lfs_dir_fetchmatch+0x50a>
                } else if (tempbesttag != -1 &&
 800c026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c028:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c02c:	d051      	beq.n	800c0d2 <lfs_dir_fetchmatch+0x50a>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800c02e:	6a3b      	ldr	r3, [r7, #32]
 800c030:	4618      	mov	r0, r3
 800c032:	f7fe ff37 	bl	800aea4 <lfs_tag_id>
 800c036:	4603      	mov	r3, r0
 800c038:	461c      	mov	r4, r3
 800c03a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c03c:	4618      	mov	r0, r3
 800c03e:	f7fe ff31 	bl	800aea4 <lfs_tag_id>
 800c042:	4603      	mov	r3, r0
                } else if (tempbesttag != -1 &&
 800c044:	429c      	cmp	r4, r3
 800c046:	d844      	bhi.n	800c0d2 <lfs_dir_fetchmatch+0x50a>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
 800c048:	6a3b      	ldr	r3, [r7, #32]
 800c04a:	4618      	mov	r0, r3
 800c04c:	f7fe ff1d 	bl	800ae8a <lfs_tag_splice>
 800c050:	4603      	mov	r3, r0
 800c052:	029a      	lsls	r2, r3, #10
 800c054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c056:	4413      	add	r3, r2
 800c058:	64bb      	str	r3, [r7, #72]	; 0x48
 800c05a:	e03a      	b.n	800c0d2 <lfs_dir_fetchmatch+0x50a>
                }
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
 800c05c:	6a3b      	ldr	r3, [r7, #32]
 800c05e:	4618      	mov	r0, r3
 800c060:	f7fe fee6 	bl	800ae30 <lfs_tag_type1>
 800c064:	4603      	mov	r3, r0
 800c066:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800c06a:	d132      	bne.n	800c0d2 <lfs_dir_fetchmatch+0x50a>
                tempsplit = (lfs_tag_chunk(tag) & 1);
 800c06c:	6a3b      	ldr	r3, [r7, #32]
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fe fefe 	bl	800ae70 <lfs_tag_chunk>
 800c074:	4603      	mov	r3, r0
 800c076:	f003 0301 	and.w	r3, r3, #1
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	bf14      	ite	ne
 800c07e:	2301      	movne	r3, #1
 800c080:	2300      	moveq	r3, #0
 800c082:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

                err = lfs_bd_read(lfs,
 800c086:	68f8      	ldr	r0, [r7, #12]
                        NULL, &lfs->rcache, lfs->cfg->block_size,
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c08c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                err = lfs_bd_read(lfs,
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c094:	3204      	adds	r2, #4
 800c096:	2108      	movs	r1, #8
 800c098:	9103      	str	r1, [sp, #12]
 800c09a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800c09e:	9102      	str	r1, [sp, #8]
 800c0a0:	9201      	str	r2, [sp, #4]
 800c0a2:	9300      	str	r3, [sp, #0]
 800c0a4:	4623      	mov	r3, r4
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	68f8      	ldr	r0, [r7, #12]
 800c0ac:	f7fe fac2 	bl	800a634 <lfs_bd_read>
 800c0b0:	6438      	str	r0, [r7, #64]	; 0x40
                        dir->pair[0], off+sizeof(tag), &temptail, 8);
                if (err) {
 800c0b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d007      	beq.n	800c0c8 <lfs_dir_fetchmatch+0x500>
                    if (err == LFS_ERR_CORRUPT) {
 800c0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ba:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c0be:	d103      	bne.n	800c0c8 <lfs_dir_fetchmatch+0x500>
                        dir->erased = false;
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	759a      	strb	r2, [r3, #22]
                        break;
 800c0c6:	e050      	b.n	800c16a <lfs_dir_fetchmatch+0x5a2>
                    }
                }
                lfs_pair_fromle32(temptail);
 800c0c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	f7fe fe5a 	bl	800ad86 <lfs_pair_fromle32>
            }

            // found a match for our fetcher?
            if ((fmask & tag) == (fmask & ftag)) {
 800c0d2:	6a3a      	ldr	r2, [r7, #32]
 800c0d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0d6:	405a      	eors	r2, r3
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	4013      	ands	r3, r2
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f47f ae48 	bne.w	800bd72 <lfs_dir_fetchmatch+0x1aa>
                int res = cb(data, tag, &(struct lfs_diskoff){
 800c0e2:	6a39      	ldr	r1, [r7, #32]
                        dir->pair[0], off+sizeof(tag)});
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	681b      	ldr	r3, [r3, #0]
                int res = cb(data, tag, &(struct lfs_diskoff){
 800c0e8:	613b      	str	r3, [r7, #16]
                        dir->pair[0], off+sizeof(tag)});
 800c0ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0ec:	3304      	adds	r3, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
 800c0ee:	617b      	str	r3, [r7, #20]
 800c0f0:	f107 0210 	add.w	r2, r7, #16
 800c0f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c0f8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800c0fc:	4798      	blx	r3
 800c0fe:	63f8      	str	r0, [r7, #60]	; 0x3c
                if (res < 0) {
 800c100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c102:	2b00      	cmp	r3, #0
 800c104:	da09      	bge.n	800c11a <lfs_dir_fetchmatch+0x552>
                    if (res == LFS_ERR_CORRUPT) {
 800c106:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c108:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c10c:	d103      	bne.n	800c116 <lfs_dir_fetchmatch+0x54e>
                        dir->erased = false;
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2200      	movs	r2, #0
 800c112:	759a      	strb	r2, [r3, #22]
 800c114:	e029      	b.n	800c16a <lfs_dir_fetchmatch+0x5a2>
                        break;
                    }
                    return res;
 800c116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                return err;
 800c118:	e0b3      	b.n	800c282 <lfs_dir_fetchmatch+0x6ba>
                }

                if (res == LFS_CMP_EQ) {
 800c11a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d102      	bne.n	800c126 <lfs_dir_fetchmatch+0x55e>
                    // found a match
                    tempbesttag = tag;
 800c120:	6a3b      	ldr	r3, [r7, #32]
 800c122:	64bb      	str	r3, [r7, #72]	; 0x48
 800c124:	e625      	b.n	800bd72 <lfs_dir_fetchmatch+0x1aa>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
 800c126:	6a3a      	ldr	r2, [r7, #32]
 800c128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c12a:	405a      	eors	r2, r3
 800c12c:	4b58      	ldr	r3, [pc, #352]	; (800c290 <lfs_dir_fetchmatch+0x6c8>)
 800c12e:	4013      	ands	r3, r2
 800c130:	2b00      	cmp	r3, #0
 800c132:	d103      	bne.n	800c13c <lfs_dir_fetchmatch+0x574>
                        (LFS_MKTAG(0x7ff, 0x3ff, 0) & tempbesttag)) {
                    // found an identical tag, but contents didn't match
                    // this must mean that our besttag has been overwritten
                    tempbesttag = -1;
 800c134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c138:	64bb      	str	r3, [r7, #72]	; 0x48
 800c13a:	e61a      	b.n	800bd72 <lfs_dir_fetchmatch+0x1aa>
                } else if (res == LFS_CMP_GT &&
 800c13c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c13e:	2b02      	cmp	r3, #2
 800c140:	f47f ae17 	bne.w	800bd72 <lfs_dir_fetchmatch+0x1aa>
                        lfs_tag_id(tag) <= lfs_tag_id(tempbesttag)) {
 800c144:	6a3b      	ldr	r3, [r7, #32]
 800c146:	4618      	mov	r0, r3
 800c148:	f7fe feac 	bl	800aea4 <lfs_tag_id>
 800c14c:	4603      	mov	r3, r0
 800c14e:	461c      	mov	r4, r3
 800c150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe fea6 	bl	800aea4 <lfs_tag_id>
 800c158:	4603      	mov	r3, r0
                } else if (res == LFS_CMP_GT &&
 800c15a:	429c      	cmp	r4, r3
 800c15c:	f63f ae09 	bhi.w	800bd72 <lfs_dir_fetchmatch+0x1aa>
                    // found a greater match, keep track to keep things sorted
                    tempbesttag = tag | 0x80000000;
 800c160:	6a3b      	ldr	r3, [r7, #32]
 800c162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c166:	64bb      	str	r3, [r7, #72]	; 0x48
 800c168:	e603      	b.n	800bd72 <lfs_dir_fetchmatch+0x1aa>
                }
            }
        }

        // consider what we have good enough
        if (dir->off > 0) {
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	68db      	ldr	r3, [r3, #12]
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d100      	bne.n	800c174 <lfs_dir_fetchmatch+0x5ac>
 800c172:	e05d      	b.n	800c230 <lfs_dir_fetchmatch+0x668>
            // synthetic move
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	333c      	adds	r3, #60	; 0x3c
 800c178:	68ba      	ldr	r2, [r7, #8]
 800c17a:	4611      	mov	r1, r2
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7fe ff39 	bl	800aff4 <lfs_gstate_hasmovehere>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d028      	beq.n	800c1da <lfs_dir_fetchmatch+0x612>
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fe fe89 	bl	800aea4 <lfs_tag_id>
 800c192:	4603      	mov	r3, r0
 800c194:	461c      	mov	r4, r3
 800c196:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c198:	4618      	mov	r0, r3
 800c19a:	f7fe fe83 	bl	800aea4 <lfs_tag_id>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	429c      	cmp	r4, r3
 800c1a2:	d104      	bne.n	800c1ae <lfs_dir_fetchmatch+0x5e6>
                    besttag |= 0x80000000;
 800c1a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1aa:	667b      	str	r3, [r7, #100]	; 0x64
 800c1ac:	e015      	b.n	800c1da <lfs_dir_fetchmatch+0x612>
                } else if (besttag != -1 &&
 800c1ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c1b4:	d011      	beq.n	800c1da <lfs_dir_fetchmatch+0x612>
                        lfs_tag_id(lfs->gdisk.tag) < lfs_tag_id(besttag)) {
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fe fe72 	bl	800aea4 <lfs_tag_id>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	461c      	mov	r4, r3
 800c1c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fe fe6c 	bl	800aea4 <lfs_tag_id>
 800c1cc:	4603      	mov	r3, r0
                } else if (besttag != -1 &&
 800c1ce:	429c      	cmp	r4, r3
 800c1d0:	d203      	bcs.n	800c1da <lfs_dir_fetchmatch+0x612>
                    besttag -= LFS_MKTAG(0, 1, 0);
 800c1d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1d4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800c1d8:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            // found tag? or found best id?
            if (id) {
 800c1da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d00f      	beq.n	800c200 <lfs_dir_fetchmatch+0x638>
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
 800c1e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7fe fe5e 	bl	800aea4 <lfs_tag_id>
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	8a9b      	ldrh	r3, [r3, #20]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	f7fe f942 	bl	800a47c <lfs_min>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c1fe:	801a      	strh	r2, [r3, #0]
            }

            if (lfs_tag_isvalid(besttag)) {
 800c200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe fdf3 	bl	800adee <lfs_tag_isvalid>
 800c208:	4603      	mov	r3, r0
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d001      	beq.n	800c212 <lfs_dir_fetchmatch+0x64a>
                return besttag;
 800c20e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c210:	e037      	b.n	800c282 <lfs_dir_fetchmatch+0x6ba>
            } else if (lfs_tag_id(besttag) < dir->count) {
 800c212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c214:	4618      	mov	r0, r3
 800c216:	f7fe fe45 	bl	800aea4 <lfs_tag_id>
 800c21a:	4603      	mov	r3, r0
 800c21c:	461a      	mov	r2, r3
 800c21e:	68bb      	ldr	r3, [r7, #8]
 800c220:	8a9b      	ldrh	r3, [r3, #20]
 800c222:	429a      	cmp	r2, r3
 800c224:	d202      	bcs.n	800c22c <lfs_dir_fetchmatch+0x664>
                return LFS_ERR_NOENT;
 800c226:	f06f 0301 	mvn.w	r3, #1
 800c22a:	e02a      	b.n	800c282 <lfs_dir_fetchmatch+0x6ba>
            } else {
                return 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	e028      	b.n	800c282 <lfs_dir_fetchmatch+0x6ba>
            }
        }

        // failed, try the other block?
        lfs_pair_swap(dir->pair);
 800c230:	68bb      	ldr	r3, [r7, #8]
 800c232:	4618      	mov	r0, r3
 800c234:	f7fe fd20 	bl	800ac78 <lfs_pair_swap>
        dir->rev = revs[(r+1)%2];
 800c238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c23a:	3301      	adds	r3, #1
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f003 0301 	and.w	r3, r3, #1
 800c242:	bfb8      	it	lt
 800c244:	425b      	neglt	r3, r3
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	3368      	adds	r3, #104	; 0x68
 800c24a:	443b      	add	r3, r7
 800c24c:	f853 2c38 	ldr.w	r2, [r3, #-56]
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 2; i++) {
 800c254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c256:	3301      	adds	r3, #1
 800c258:	65bb      	str	r3, [r7, #88]	; 0x58
 800c25a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	f77f ad5a 	ble.w	800bd16 <lfs_dir_fetchmatch+0x14e>
    }

    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	685b      	ldr	r3, [r3, #4]
 800c26a:	490a      	ldr	r1, [pc, #40]	; (800c294 <lfs_dir_fetchmatch+0x6cc>)
 800c26c:	9101      	str	r1, [sp, #4]
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	4613      	mov	r3, r2
 800c272:	f240 4232 	movw	r2, #1074	; 0x432
 800c276:	4908      	ldr	r1, [pc, #32]	; (800c298 <lfs_dir_fetchmatch+0x6d0>)
 800c278:	4808      	ldr	r0, [pc, #32]	; (800c29c <lfs_dir_fetchmatch+0x6d4>)
 800c27a:	f015 f89d 	bl	80213b8 <iprintf>
            dir->pair[0], dir->pair[1]);
    return LFS_ERR_CORRUPT;
 800c27e:	f06f 0353 	mvn.w	r3, #83	; 0x53
}
 800c282:	4618      	mov	r0, r3
 800c284:	376c      	adds	r7, #108	; 0x6c
 800c286:	46bd      	mov	sp, r7
 800c288:	bd90      	pop	{r4, r7, pc}
 800c28a:	bf00      	nop
 800c28c:	000ffc00 	.word	0x000ffc00
 800c290:	7ffffc00 	.word	0x7ffffc00
 800c294:	08023064 	.word	0x08023064
 800c298:	08022f58 	.word	0x08022f58
 800c29c:	08023068 	.word	0x08023068

0800c2a0 <lfs_dir_fetch>:

static int lfs_dir_fetch(lfs_t *lfs,
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b088      	sub	sp, #32
 800c2a4:	af04      	add	r7, sp, #16
 800c2a6:	60f8      	str	r0, [r7, #12]
 800c2a8:	60b9      	str	r1, [r7, #8]
 800c2aa:	607a      	str	r2, [r7, #4]
    // note, mask=-1, tag=-1 can never match a tag since this
    // pattern has the invalid bit set
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	9303      	str	r3, [sp, #12]
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	9302      	str	r3, [sp, #8]
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	9301      	str	r3, [sp, #4]
 800c2b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2bc:	9300      	str	r3, [sp, #0]
 800c2be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	68b9      	ldr	r1, [r7, #8]
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f7ff fc7e 	bl	800bbc8 <lfs_dir_fetchmatch>
 800c2cc:	4603      	mov	r3, r0
            (lfs_tag_t)-1, (lfs_tag_t)-1, NULL, NULL, NULL);
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
	...

0800c2d8 <lfs_dir_getgstate>:

static int lfs_dir_getgstate(lfs_t *lfs, const lfs_mdir_t *dir,
        lfs_gstate_t *gstate) {
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b08a      	sub	sp, #40	; 0x28
 800c2dc:	af02      	add	r7, sp, #8
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
    lfs_gstate_t temp;
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
 800c2e4:	f107 0310 	add.w	r3, r7, #16
 800c2e8:	9300      	str	r3, [sp, #0]
 800c2ea:	4b12      	ldr	r3, [pc, #72]	; (800c334 <lfs_dir_getgstate+0x5c>)
 800c2ec:	4a12      	ldr	r2, [pc, #72]	; (800c338 <lfs_dir_getgstate+0x60>)
 800c2ee:	68b9      	ldr	r1, [r7, #8]
 800c2f0:	68f8      	ldr	r0, [r7, #12]
 800c2f2:	f7ff f9c1 	bl	800b678 <lfs_dir_get>
 800c2f6:	61f8      	str	r0, [r7, #28]
            LFS_MKTAG(LFS_TYPE_MOVESTATE, 0, sizeof(temp)), &temp);
    if (res < 0 && res != LFS_ERR_NOENT) {
 800c2f8:	69fb      	ldr	r3, [r7, #28]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	da05      	bge.n	800c30a <lfs_dir_getgstate+0x32>
 800c2fe:	69fb      	ldr	r3, [r7, #28]
 800c300:	f113 0f02 	cmn.w	r3, #2
 800c304:	d001      	beq.n	800c30a <lfs_dir_getgstate+0x32>
        return res;
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	e00f      	b.n	800c32a <lfs_dir_getgstate+0x52>
    }

    if (res != LFS_ERR_NOENT) {
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	f113 0f02 	cmn.w	r3, #2
 800c310:	d00a      	beq.n	800c328 <lfs_dir_getgstate+0x50>
        // xor together to find resulting gstate
        lfs_gstate_fromle32(&temp);
 800c312:	f107 0310 	add.w	r3, r7, #16
 800c316:	4618      	mov	r0, r3
 800c318:	f7fe fe8c 	bl	800b034 <lfs_gstate_fromle32>
        lfs_gstate_xor(gstate, &temp);
 800c31c:	f107 0310 	add.w	r3, r7, #16
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f7fe fdef 	bl	800af06 <lfs_gstate_xor>
    }

    return 0;
 800c328:	2300      	movs	r3, #0
}
 800c32a:	4618      	mov	r0, r3
 800c32c:	3720      	adds	r7, #32
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	7ff0000c 	.word	0x7ff0000c
 800c338:	7ff00000 	.word	0x7ff00000

0800c33c <lfs_dir_find_match>:
    const void *name;
    lfs_size_t size;
};

static int lfs_dir_find_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800c33c:	b590      	push	{r4, r7, lr}
 800c33e:	b08f      	sub	sp, #60	; 0x3c
 800c340:	af04      	add	r7, sp, #16
 800c342:	60f8      	str	r0, [r7, #12]
 800c344:	60b9      	str	r1, [r7, #8]
 800c346:	607a      	str	r2, [r7, #4]
    struct lfs_dir_find_match *name = data;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = name->lfs;
 800c34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	61fb      	str	r3, [r7, #28]

    // compare with disk
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
 800c356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c358:	689c      	ldr	r4, [r3, #8]
 800c35a:	68b8      	ldr	r0, [r7, #8]
 800c35c:	f7fe fdb2 	bl	800aec4 <lfs_tag_size>
 800c360:	4603      	mov	r3, r0
 800c362:	4619      	mov	r1, r3
 800c364:	4620      	mov	r0, r4
 800c366:	f7fe f889 	bl	800a47c <lfs_min>
 800c36a:	61b8      	str	r0, [r7, #24]
    int res = lfs_bd_cmp(lfs,
 800c36c:	6a3c      	ldr	r4, [r7, #32]
            NULL, &lfs->rcache, diff,
            disk->block, disk->off, name->name, diff);
 800c36e:	69fb      	ldr	r3, [r7, #28]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	69fa      	ldr	r2, [r7, #28]
 800c374:	6852      	ldr	r2, [r2, #4]
    int res = lfs_bd_cmp(lfs,
 800c376:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c378:	6849      	ldr	r1, [r1, #4]
 800c37a:	69b8      	ldr	r0, [r7, #24]
 800c37c:	9003      	str	r0, [sp, #12]
 800c37e:	9102      	str	r1, [sp, #8]
 800c380:	9201      	str	r2, [sp, #4]
 800c382:	9300      	str	r3, [sp, #0]
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	4622      	mov	r2, r4
 800c388:	2100      	movs	r1, #0
 800c38a:	6a38      	ldr	r0, [r7, #32]
 800c38c:	f7fe fa96 	bl	800a8bc <lfs_bd_cmp>
 800c390:	6178      	str	r0, [r7, #20]
    if (res != LFS_CMP_EQ) {
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d001      	beq.n	800c39c <lfs_dir_find_match+0x60>
        return res;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	e014      	b.n	800c3c6 <lfs_dir_find_match+0x8a>
    }

    // only equal if our size is still the same
    if (name->size != lfs_tag_size(tag)) {
 800c39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39e:	689c      	ldr	r4, [r3, #8]
 800c3a0:	68b8      	ldr	r0, [r7, #8]
 800c3a2:	f7fe fd8f 	bl	800aec4 <lfs_tag_size>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	429c      	cmp	r4, r3
 800c3aa:	d00b      	beq.n	800c3c4 <lfs_dir_find_match+0x88>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ae:	689c      	ldr	r4, [r3, #8]
 800c3b0:	68b8      	ldr	r0, [r7, #8]
 800c3b2:	f7fe fd87 	bl	800aec4 <lfs_tag_size>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	429c      	cmp	r4, r3
 800c3ba:	d201      	bcs.n	800c3c0 <lfs_dir_find_match+0x84>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e002      	b.n	800c3c6 <lfs_dir_find_match+0x8a>
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	e000      	b.n	800c3c6 <lfs_dir_find_match+0x8a>
    }

    // found a match!
    return LFS_CMP_EQ;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	372c      	adds	r7, #44	; 0x2c
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd90      	pop	{r4, r7, pc}
	...

0800c3d0 <lfs_dir_find>:

static lfs_stag_t lfs_dir_find(lfs_t *lfs, lfs_mdir_t *dir,
        const char **path, uint16_t *id) {
 800c3d0:	b590      	push	{r4, r7, lr}
 800c3d2:	b093      	sub	sp, #76	; 0x4c
 800c3d4:	af04      	add	r7, sp, #16
 800c3d6:	60f8      	str	r0, [r7, #12]
 800c3d8:	60b9      	str	r1, [r7, #8]
 800c3da:	607a      	str	r2, [r7, #4]
 800c3dc:	603b      	str	r3, [r7, #0]
    // we reduce path to a single name if we can find it
    const char *name = *path;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	637b      	str	r3, [r7, #52]	; 0x34
    if (id) {
 800c3e4:	683b      	ldr	r3, [r7, #0]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d003      	beq.n	800c3f2 <lfs_dir_find+0x22>
        *id = 0x3ff;
 800c3ea:	683b      	ldr	r3, [r7, #0]
 800c3ec:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c3f0:	801a      	strh	r2, [r3, #0]
    }

    // default to root dir
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
 800c3f2:	4b6e      	ldr	r3, [pc, #440]	; (800c5ac <lfs_dir_find+0x1dc>)
 800c3f4:	633b      	str	r3, [r7, #48]	; 0x30
    dir->tail[0] = lfs->root[0];
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6a1a      	ldr	r2, [r3, #32]
 800c3fa:	68bb      	ldr	r3, [r7, #8]
 800c3fc:	619a      	str	r2, [r3, #24]
    dir->tail[1] = lfs->root[1];
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	61da      	str	r2, [r3, #28]

    while (true) {
nextname:
        // skip slashes
        name += strspn(name, "/");
 800c406:	496a      	ldr	r1, [pc, #424]	; (800c5b0 <lfs_dir_find+0x1e0>)
 800c408:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c40a:	f015 fa11 	bl	8021830 <strspn>
 800c40e:	4602      	mov	r2, r0
 800c410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c412:	4413      	add	r3, r2
 800c414:	637b      	str	r3, [r7, #52]	; 0x34
        lfs_size_t namelen = strcspn(name, "/");
 800c416:	4966      	ldr	r1, [pc, #408]	; (800c5b0 <lfs_dir_find+0x1e0>)
 800c418:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c41a:	f015 f9f8 	bl	802180e <strcspn>
 800c41e:	6278      	str	r0, [r7, #36]	; 0x24

        // skip '.' and root '..'
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
 800c420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c422:	2b01      	cmp	r3, #1
 800c424:	d105      	bne.n	800c432 <lfs_dir_find+0x62>
 800c426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c428:	781a      	ldrb	r2, [r3, #0]
 800c42a:	4b62      	ldr	r3, [pc, #392]	; (800c5b4 <lfs_dir_find+0x1e4>)
 800c42c:	781b      	ldrb	r3, [r3, #0]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d00a      	beq.n	800c448 <lfs_dir_find+0x78>
 800c432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c434:	2b02      	cmp	r3, #2
 800c436:	d10c      	bne.n	800c452 <lfs_dir_find+0x82>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
 800c438:	2202      	movs	r2, #2
 800c43a:	495f      	ldr	r1, [pc, #380]	; (800c5b8 <lfs_dir_find+0x1e8>)
 800c43c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c43e:	f015 f9a7 	bl	8021790 <memcmp>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d104      	bne.n	800c452 <lfs_dir_find+0x82>
            name += namelen;
 800c448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44c:	4413      	add	r3, r2
 800c44e:	637b      	str	r3, [r7, #52]	; 0x34
            goto nextname;
 800c450:	e7d9      	b.n	800c406 <lfs_dir_find+0x36>
        }

        // skip if matched by '..' in name
        const char *suffix = name + namelen;
 800c452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c456:	4413      	add	r3, r2
 800c458:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_size_t sufflen;
        int depth = 1;
 800c45a:	2301      	movs	r3, #1
 800c45c:	62bb      	str	r3, [r7, #40]	; 0x28
        while (true) {
            suffix += strspn(suffix, "/");
 800c45e:	4954      	ldr	r1, [pc, #336]	; (800c5b0 <lfs_dir_find+0x1e0>)
 800c460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c462:	f015 f9e5 	bl	8021830 <strspn>
 800c466:	4602      	mov	r2, r0
 800c468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46a:	4413      	add	r3, r2
 800c46c:	62fb      	str	r3, [r7, #44]	; 0x2c
            sufflen = strcspn(suffix, "/");
 800c46e:	4950      	ldr	r1, [pc, #320]	; (800c5b0 <lfs_dir_find+0x1e0>)
 800c470:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c472:	f015 f9cc 	bl	802180e <strcspn>
 800c476:	6238      	str	r0, [r7, #32]
            if (sufflen == 0) {
 800c478:	6a3b      	ldr	r3, [r7, #32]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d01d      	beq.n	800c4ba <lfs_dir_find+0xea>
                break;
            }

            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
 800c47e:	6a3b      	ldr	r3, [r7, #32]
 800c480:	2b02      	cmp	r3, #2
 800c482:	d112      	bne.n	800c4aa <lfs_dir_find+0xda>
 800c484:	2202      	movs	r2, #2
 800c486:	494c      	ldr	r1, [pc, #304]	; (800c5b8 <lfs_dir_find+0x1e8>)
 800c488:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c48a:	f015 f981 	bl	8021790 <memcmp>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10a      	bne.n	800c4aa <lfs_dir_find+0xda>
                depth -= 1;
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	3b01      	subs	r3, #1
 800c498:	62bb      	str	r3, [r7, #40]	; 0x28
                if (depth == 0) {
 800c49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d107      	bne.n	800c4b0 <lfs_dir_find+0xe0>
                    name = suffix + sufflen;
 800c4a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4a2:	6a3b      	ldr	r3, [r7, #32]
 800c4a4:	4413      	add	r3, r2
 800c4a6:	637b      	str	r3, [r7, #52]	; 0x34
                    goto nextname;
 800c4a8:	e7ad      	b.n	800c406 <lfs_dir_find+0x36>
                }
            } else {
                depth += 1;
 800c4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ac:	3301      	adds	r3, #1
 800c4ae:	62bb      	str	r3, [r7, #40]	; 0x28
            }

            suffix += sufflen;
 800c4b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c4b2:	6a3b      	ldr	r3, [r7, #32]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            suffix += strspn(suffix, "/");
 800c4b8:	e7d1      	b.n	800c45e <lfs_dir_find+0x8e>
                break;
 800c4ba:	bf00      	nop
        }

        // found path
        if (name[0] == '\0') {
 800c4bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d101      	bne.n	800c4c8 <lfs_dir_find+0xf8>
            return tag;
 800c4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4c6:	e06c      	b.n	800c5a2 <lfs_dir_find+0x1d2>
        }

        // update what we've found so far
        *path = name;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4cc:	601a      	str	r2, [r3, #0]

        // only continue if we hit a directory
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f7fe fcbd 	bl	800ae50 <lfs_tag_type3>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d002      	beq.n	800c4e2 <lfs_dir_find+0x112>
            return LFS_ERR_NOTDIR;
 800c4dc:	f06f 0313 	mvn.w	r3, #19
 800c4e0:	e05f      	b.n	800c5a2 <lfs_dir_find+0x1d2>
        }

        // grab the entry data
        if (lfs_tag_id(tag) != 0x3ff) {
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e4:	4618      	mov	r0, r3
 800c4e6:	f7fe fcdd 	bl	800aea4 <lfs_tag_id>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	461a      	mov	r2, r3
 800c4ee:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d01c      	beq.n	800c530 <lfs_dir_find+0x160>
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	f7fe fcd3 	bl	800aea4 <lfs_tag_id>
 800c4fe:	4603      	mov	r3, r0
 800c500:	029b      	lsls	r3, r3, #10
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800c502:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c506:	f043 0308 	orr.w	r3, r3, #8
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
 800c50a:	68ba      	ldr	r2, [r7, #8]
 800c50c:	3218      	adds	r2, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800c50e:	9200      	str	r2, [sp, #0]
 800c510:	4a2a      	ldr	r2, [pc, #168]	; (800c5bc <lfs_dir_find+0x1ec>)
 800c512:	68b9      	ldr	r1, [r7, #8]
 800c514:	68f8      	ldr	r0, [r7, #12]
 800c516:	f7ff f8af 	bl	800b678 <lfs_dir_get>
 800c51a:	61f8      	str	r0, [r7, #28]
            if (res < 0) {
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	da01      	bge.n	800c526 <lfs_dir_find+0x156>
                return res;
 800c522:	69fb      	ldr	r3, [r7, #28]
 800c524:	e03d      	b.n	800c5a2 <lfs_dir_find+0x1d2>
            }
            lfs_pair_fromle32(dir->tail);
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	3318      	adds	r3, #24
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fe fc2b 	bl	800ad86 <lfs_pair_fromle32>
        }

        // find entry matching name
        while (true) {
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	f103 0418 	add.w	r4, r3, #24
                    LFS_MKTAG(0x780, 0, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, namelen),
                     // are we last name?
                    (strchr(name, '/') == NULL) ? id : NULL,
 800c536:	212f      	movs	r1, #47	; 0x2f
 800c538:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800c53a:	f015 f95b 	bl	80217f4 <strchr>
 800c53e:	4603      	mov	r3, r0
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800c540:	2b00      	cmp	r3, #0
 800c542:	d101      	bne.n	800c548 <lfs_dir_find+0x178>
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	e000      	b.n	800c54a <lfs_dir_find+0x17a>
 800c548:	2300      	movs	r3, #0
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
 800c54a:	68fa      	ldr	r2, [r7, #12]
 800c54c:	613a      	str	r2, [r7, #16]
 800c54e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c550:	617a      	str	r2, [r7, #20]
 800c552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c554:	61ba      	str	r2, [r7, #24]
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
 800c556:	f107 0210 	add.w	r2, r7, #16
 800c55a:	9203      	str	r2, [sp, #12]
 800c55c:	4a18      	ldr	r2, [pc, #96]	; (800c5c0 <lfs_dir_find+0x1f0>)
 800c55e:	9202      	str	r2, [sp, #8]
 800c560:	9301      	str	r3, [sp, #4]
 800c562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
 800c56a:	4622      	mov	r2, r4
 800c56c:	68b9      	ldr	r1, [r7, #8]
 800c56e:	68f8      	ldr	r0, [r7, #12]
 800c570:	f7ff fb2a 	bl	800bbc8 <lfs_dir_fetchmatch>
 800c574:	6338      	str	r0, [r7, #48]	; 0x30
                        lfs, name, namelen});
            if (tag < 0) {
 800c576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c578:	2b00      	cmp	r3, #0
 800c57a:	da01      	bge.n	800c580 <lfs_dir_find+0x1b0>
                return tag;
 800c57c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c57e:	e010      	b.n	800c5a2 <lfs_dir_find+0x1d2>
            }

            if (tag) {
 800c580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c582:	2b00      	cmp	r3, #0
 800c584:	d004      	beq.n	800c590 <lfs_dir_find+0x1c0>
                return LFS_ERR_NOENT;
            }
        }

        // to next name
        name += namelen;
 800c586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c58a:	4413      	add	r3, r2
 800c58c:	637b      	str	r3, [r7, #52]	; 0x34
    while (true) {
 800c58e:	e73a      	b.n	800c406 <lfs_dir_find+0x36>
            if (!dir->split) {
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	7ddb      	ldrb	r3, [r3, #23]
 800c594:	f083 0301 	eor.w	r3, r3, #1
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d0c8      	beq.n	800c530 <lfs_dir_find+0x160>
                return LFS_ERR_NOENT;
 800c59e:	f06f 0301 	mvn.w	r3, #1
    }
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	373c      	adds	r7, #60	; 0x3c
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd90      	pop	{r4, r7, pc}
 800c5aa:	bf00      	nop
 800c5ac:	002ffc00 	.word	0x002ffc00
 800c5b0:	080230a8 	.word	0x080230a8
 800c5b4:	080230ac 	.word	0x080230ac
 800c5b8:	080230b0 	.word	0x080230b0
 800c5bc:	700ffc00 	.word	0x700ffc00
 800c5c0:	0800c33d 	.word	0x0800c33d

0800c5c4 <lfs_dir_commitprog>:
    lfs_off_t end;
};

#ifndef LFS_READONLY
static int lfs_dir_commitprog(lfs_t *lfs, struct lfs_commit *commit,
        const void *buffer, lfs_size_t size) {
 800c5c4:	b590      	push	{r4, r7, lr}
 800c5c6:	b08b      	sub	sp, #44	; 0x2c
 800c5c8:	af04      	add	r7, sp, #16
 800c5ca:	60f8      	str	r0, [r7, #12]
 800c5cc:	60b9      	str	r1, [r7, #8]
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	603b      	str	r3, [r7, #0]
    int err = lfs_bd_prog(lfs,
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f103 0010 	add.w	r0, r3, #16
 800c5d8:	68fc      	ldr	r4, [r7, #12]
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	68ba      	ldr	r2, [r7, #8]
 800c5e0:	6852      	ldr	r2, [r2, #4]
 800c5e2:	6839      	ldr	r1, [r7, #0]
 800c5e4:	9103      	str	r1, [sp, #12]
 800c5e6:	6879      	ldr	r1, [r7, #4]
 800c5e8:	9102      	str	r1, [sp, #8]
 800c5ea:	9201      	str	r2, [sp, #4]
 800c5ec:	9300      	str	r3, [sp, #0]
 800c5ee:	2300      	movs	r3, #0
 800c5f0:	4622      	mov	r2, r4
 800c5f2:	4601      	mov	r1, r0
 800c5f4:	68f8      	ldr	r0, [r7, #12]
 800c5f6:	f7fe fa63 	bl	800aac0 <lfs_bd_prog>
 800c5fa:	6178      	str	r0, [r7, #20]
            &lfs->pcache, &lfs->rcache, false,
            commit->block, commit->off ,
            (const uint8_t*)buffer, size);
    if (err) {
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d001      	beq.n	800c606 <lfs_dir_commitprog+0x42>
        return err;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	e010      	b.n	800c628 <lfs_dir_commitprog+0x64>
    }

    commit->crc = lfs_crc(commit->crc, buffer, size);
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	68db      	ldr	r3, [r3, #12]
 800c60a:	683a      	ldr	r2, [r7, #0]
 800c60c:	6879      	ldr	r1, [r7, #4]
 800c60e:	4618      	mov	r0, r3
 800c610:	f003 fe8c 	bl	801032c <lfs_crc>
 800c614:	4602      	mov	r2, r0
 800c616:	68bb      	ldr	r3, [r7, #8]
 800c618:	60da      	str	r2, [r3, #12]
    commit->off += size;
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	685a      	ldr	r2, [r3, #4]
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	441a      	add	r2, r3
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	605a      	str	r2, [r3, #4]
    return 0;
 800c626:	2300      	movs	r3, #0
}
 800c628:	4618      	mov	r0, r3
 800c62a:	371c      	adds	r7, #28
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd90      	pop	{r4, r7, pc}

0800c630 <lfs_dir_commitattr>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitattr(lfs_t *lfs, struct lfs_commit *commit,
        lfs_tag_t tag, const void *buffer) {
 800c630:	b590      	push	{r4, r7, lr}
 800c632:	b08f      	sub	sp, #60	; 0x3c
 800c634:	af04      	add	r7, sp, #16
 800c636:	60f8      	str	r0, [r7, #12]
 800c638:	60b9      	str	r1, [r7, #8]
 800c63a:	607a      	str	r2, [r7, #4]
 800c63c:	603b      	str	r3, [r7, #0]
    // check if we fit
    lfs_size_t dsize = lfs_tag_dsize(tag);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f7fe fc4d 	bl	800aede <lfs_tag_dsize>
 800c644:	6238      	str	r0, [r7, #32]
    if (commit->off + dsize > commit->end) {
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	685a      	ldr	r2, [r3, #4]
 800c64a:	6a3b      	ldr	r3, [r7, #32]
 800c64c:	441a      	add	r2, r3
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	695b      	ldr	r3, [r3, #20]
 800c652:	429a      	cmp	r2, r3
 800c654:	d902      	bls.n	800c65c <lfs_dir_commitattr+0x2c>
        return LFS_ERR_NOSPC;
 800c656:	f06f 031b 	mvn.w	r3, #27
 800c65a:	e065      	b.n	800c728 <lfs_dir_commitattr+0xf8>
    }

    // write out tag
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c662:	68bb      	ldr	r3, [r7, #8]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	4053      	eors	r3, r2
 800c668:	4618      	mov	r0, r3
 800c66a:	f7fd ff9a 	bl	800a5a2 <lfs_tobe32>
 800c66e:	4603      	mov	r3, r0
 800c670:	617b      	str	r3, [r7, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
 800c672:	f107 0214 	add.w	r2, r7, #20
 800c676:	2304      	movs	r3, #4
 800c678:	68b9      	ldr	r1, [r7, #8]
 800c67a:	68f8      	ldr	r0, [r7, #12]
 800c67c:	f7ff ffa2 	bl	800c5c4 <lfs_dir_commitprog>
 800c680:	61f8      	str	r0, [r7, #28]
    if (err) {
 800c682:	69fb      	ldr	r3, [r7, #28]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d001      	beq.n	800c68c <lfs_dir_commitattr+0x5c>
        return err;
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	e04d      	b.n	800c728 <lfs_dir_commitattr+0xf8>
    }

    if (!(tag & 0x80000000)) {
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	db0c      	blt.n	800c6ac <lfs_dir_commitattr+0x7c>
        // from memory
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
 800c692:	6a3b      	ldr	r3, [r7, #32]
 800c694:	3b04      	subs	r3, #4
 800c696:	683a      	ldr	r2, [r7, #0]
 800c698:	68b9      	ldr	r1, [r7, #8]
 800c69a:	68f8      	ldr	r0, [r7, #12]
 800c69c:	f7ff ff92 	bl	800c5c4 <lfs_dir_commitprog>
 800c6a0:	61f8      	str	r0, [r7, #28]
        if (err) {
 800c6a2:	69fb      	ldr	r3, [r7, #28]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d039      	beq.n	800c71c <lfs_dir_commitattr+0xec>
            return err;
 800c6a8:	69fb      	ldr	r3, [r7, #28]
 800c6aa:	e03d      	b.n	800c728 <lfs_dir_commitattr+0xf8>
        }
    } else {
        // from disk
        const struct lfs_diskoff *disk = buffer;
 800c6ac:	683b      	ldr	r3, [r7, #0]
 800c6ae:	61bb      	str	r3, [r7, #24]
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	627b      	str	r3, [r7, #36]	; 0x24
 800c6b4:	e02d      	b.n	800c712 <lfs_dir_commitattr+0xe2>
            // rely on caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800c6b6:	68f8      	ldr	r0, [r7, #12]
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
 800c6b8:	6a3a      	ldr	r2, [r7, #32]
 800c6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6bc:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800c6be:	1f1c      	subs	r4, r3, #4
                    disk->block, disk->off+i, &dat, 1);
 800c6c0:	69bb      	ldr	r3, [r7, #24]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	69ba      	ldr	r2, [r7, #24]
 800c6c6:	6851      	ldr	r1, [r2, #4]
            err = lfs_bd_read(lfs,
 800c6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6ca:	440a      	add	r2, r1
 800c6cc:	2101      	movs	r1, #1
 800c6ce:	9103      	str	r1, [sp, #12]
 800c6d0:	f107 0113 	add.w	r1, r7, #19
 800c6d4:	9102      	str	r1, [sp, #8]
 800c6d6:	9201      	str	r2, [sp, #4]
 800c6d8:	9300      	str	r3, [sp, #0]
 800c6da:	4623      	mov	r3, r4
 800c6dc:	4602      	mov	r2, r0
 800c6de:	2100      	movs	r1, #0
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f7fd ffa7 	bl	800a634 <lfs_bd_read>
 800c6e6:	61f8      	str	r0, [r7, #28]
            if (err) {
 800c6e8:	69fb      	ldr	r3, [r7, #28]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d001      	beq.n	800c6f2 <lfs_dir_commitattr+0xc2>
                return err;
 800c6ee:	69fb      	ldr	r3, [r7, #28]
 800c6f0:	e01a      	b.n	800c728 <lfs_dir_commitattr+0xf8>
            }

            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
 800c6f2:	f107 0213 	add.w	r2, r7, #19
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	68b9      	ldr	r1, [r7, #8]
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f7ff ff62 	bl	800c5c4 <lfs_dir_commitprog>
 800c700:	61f8      	str	r0, [r7, #28]
            if (err) {
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d001      	beq.n	800c70c <lfs_dir_commitattr+0xdc>
                return err;
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	e00d      	b.n	800c728 <lfs_dir_commitattr+0xf8>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
 800c70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c70e:	3301      	adds	r3, #1
 800c710:	627b      	str	r3, [r7, #36]	; 0x24
 800c712:	6a3b      	ldr	r3, [r7, #32]
 800c714:	3b04      	subs	r3, #4
 800c716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c718:	429a      	cmp	r2, r3
 800c71a:	d3cc      	bcc.n	800c6b6 <lfs_dir_commitattr+0x86>
            }
        }
    }

    commit->ptag = tag & 0x7fffffff;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	609a      	str	r2, [r3, #8]
    return 0;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	372c      	adds	r7, #44	; 0x2c
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd90      	pop	{r4, r7, pc}

0800c730 <lfs_dir_commitcrc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
 800c730:	b590      	push	{r4, r7, lr}
 800c732:	b097      	sub	sp, #92	; 0x5c
 800c734:	af04      	add	r7, sp, #16
 800c736:	6078      	str	r0, [r7, #4]
 800c738:	6039      	str	r1, [r7, #0]
    // align to program units
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	f103 0208 	add.w	r2, r3, #8
            lfs->cfg->prog_size);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c746:	6a1b      	ldr	r3, [r3, #32]
    const lfs_off_t end = lfs_alignup(commit->off + 2*sizeof(uint32_t),
 800c748:	4619      	mov	r1, r3
 800c74a:	4610      	mov	r0, r2
 800c74c:	f7fd febb 	bl	800a4c6 <lfs_alignup>
 800c750:	62b8      	str	r0, [r7, #40]	; 0x28

    lfs_off_t off1 = 0;
 800c752:	2300      	movs	r3, #0
 800c754:	647b      	str	r3, [r7, #68]	; 0x44
    uint32_t crc1 = 0;
 800c756:	2300      	movs	r3, #0
 800c758:	643b      	str	r3, [r7, #64]	; 0x40

    // create crc tags to fill up remainder of commit, note that
    // padding is not crced, which lets fetches skip padding but
    // makes committing a bit more complicated
    while (commit->off < end) {
 800c75a:	e0a6      	b.n	800c8aa <lfs_dir_commitcrc+0x17a>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	685b      	ldr	r3, [r3, #4]
 800c760:	3304      	adds	r3, #4
 800c762:	623b      	str	r3, [r7, #32]
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
 800c764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	1ad3      	subs	r3, r2, r3
 800c76a:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fd fe84 	bl	800a47c <lfs_min>
 800c774:	4602      	mov	r2, r0
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	4413      	add	r3, r2
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (noff < end) {
 800c77c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c780:	429a      	cmp	r2, r3
 800c782:	d206      	bcs.n	800c792 <lfs_dir_commitcrc+0x62>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
 800c784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c786:	3b08      	subs	r3, #8
 800c788:	4619      	mov	r1, r3
 800c78a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c78c:	f7fd fe76 	bl	800a47c <lfs_min>
 800c790:	63f8      	str	r0, [r7, #60]	; 0x3c
        }

        // read erased state from next program unit
        lfs_tag_t tag = 0xffffffff;
 800c792:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c796:	617b      	str	r3, [r7, #20]
        int err = lfs_bd_read(lfs,
 800c798:	6879      	ldr	r1, [r7, #4]
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	2204      	movs	r2, #4
 800c7a0:	9203      	str	r2, [sp, #12]
 800c7a2:	f107 0214 	add.w	r2, r7, #20
 800c7a6:	9202      	str	r2, [sp, #8]
 800c7a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c7aa:	9201      	str	r2, [sp, #4]
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	2304      	movs	r3, #4
 800c7b0:	460a      	mov	r2, r1
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7fd ff3d 	bl	800a634 <lfs_bd_read>
 800c7ba:	61f8      	str	r0, [r7, #28]
                NULL, &lfs->rcache, sizeof(tag),
                commit->block, noff, &tag, sizeof(tag));
        if (err && err != LFS_ERR_CORRUPT) {
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d005      	beq.n	800c7ce <lfs_dir_commitcrc+0x9e>
 800c7c2:	69fb      	ldr	r3, [r7, #28]
 800c7c4:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800c7c8:	d001      	beq.n	800c7ce <lfs_dir_commitcrc+0x9e>
            return err;
 800c7ca:	69fb      	ldr	r3, [r7, #28]
 800c7cc:	e0e8      	b.n	800c9a0 <lfs_dir_commitcrc+0x270>
        }

        // build crc tag
        bool reset = ~lfs_frombe32(tag) >> 31;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	f7fd feda 	bl	800a58a <lfs_frombe32>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	43db      	mvns	r3, r3
 800c7da:	0fdb      	lsrs	r3, r3, #31
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	bf14      	ite	ne
 800c7e0:	2301      	movne	r3, #1
 800c7e2:	2300      	moveq	r3, #0
 800c7e4:	76fb      	strb	r3, [r7, #27]
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
 800c7e6:	7efb      	ldrb	r3, [r7, #27]
 800c7e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7ec:	051a      	lsls	r2, r3, #20
 800c7ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c7f0:	6a3b      	ldr	r3, [r7, #32]
 800c7f2:	1acb      	subs	r3, r1, r3
 800c7f4:	4313      	orrs	r3, r2
 800c7f6:	f443 237f 	orr.w	r3, r3, #1044480	; 0xff000
 800c7fa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800c7fe:	617b      	str	r3, [r7, #20]

        // write out crc
        uint32_t footer[2];
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	689a      	ldr	r2, [r3, #8]
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	4053      	eors	r3, r2
 800c808:	4618      	mov	r0, r3
 800c80a:	f7fd feca 	bl	800a5a2 <lfs_tobe32>
 800c80e:	4603      	mov	r3, r0
 800c810:	60fb      	str	r3, [r7, #12]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	68db      	ldr	r3, [r3, #12]
 800c816:	f107 010c 	add.w	r1, r7, #12
 800c81a:	2204      	movs	r2, #4
 800c81c:	4618      	mov	r0, r3
 800c81e:	f003 fd85 	bl	801032c <lfs_crc>
 800c822:	4602      	mov	r2, r0
 800c824:	683b      	ldr	r3, [r7, #0]
 800c826:	60da      	str	r2, [r3, #12]
        footer[1] = lfs_tole32(commit->crc);
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fd fea0 	bl	800a572 <lfs_tole32>
 800c832:	4603      	mov	r3, r0
 800c834:	613b      	str	r3, [r7, #16]
        err = lfs_bd_prog(lfs,
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f103 0010 	add.w	r0, r3, #16
 800c83c:	687c      	ldr	r4, [r7, #4]
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	683a      	ldr	r2, [r7, #0]
 800c844:	6852      	ldr	r2, [r2, #4]
 800c846:	2108      	movs	r1, #8
 800c848:	9103      	str	r1, [sp, #12]
 800c84a:	f107 010c 	add.w	r1, r7, #12
 800c84e:	9102      	str	r1, [sp, #8]
 800c850:	9201      	str	r2, [sp, #4]
 800c852:	9300      	str	r3, [sp, #0]
 800c854:	2300      	movs	r3, #0
 800c856:	4622      	mov	r2, r4
 800c858:	4601      	mov	r1, r0
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7fe f930 	bl	800aac0 <lfs_bd_prog>
 800c860:	61f8      	str	r0, [r7, #28]
                &lfs->pcache, &lfs->rcache, false,
                commit->block, commit->off, &footer, sizeof(footer));
        if (err) {
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d001      	beq.n	800c86c <lfs_dir_commitcrc+0x13c>
            return err;
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	e099      	b.n	800c9a0 <lfs_dir_commitcrc+0x270>
        }

        // keep track of non-padding checksum to verify
        if (off1 == 0) {
 800c86c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d106      	bne.n	800c880 <lfs_dir_commitcrc+0x150>
            off1 = commit->off + sizeof(uint32_t);
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	3304      	adds	r3, #4
 800c878:	647b      	str	r3, [r7, #68]	; 0x44
            crc1 = commit->crc;
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	68db      	ldr	r3, [r3, #12]
 800c87e:	643b      	str	r3, [r7, #64]	; 0x40
        }

        commit->off += sizeof(tag)+lfs_tag_size(tag);
 800c880:	697b      	ldr	r3, [r7, #20]
 800c882:	4618      	mov	r0, r3
 800c884:	f7fe fb1e 	bl	800aec4 <lfs_tag_size>
 800c888:	4603      	mov	r3, r0
 800c88a:	1d1a      	adds	r2, r3, #4
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	441a      	add	r2, r3
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	605a      	str	r2, [r3, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
 800c896:	7efb      	ldrb	r3, [r7, #27]
 800c898:	07da      	lsls	r2, r3, #31
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	405a      	eors	r2, r3
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	609a      	str	r2, [r3, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c8a8:	60da      	str	r2, [r3, #12]
    while (commit->off < end) {
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	f63f af53 	bhi.w	800c75c <lfs_dir_commitcrc+0x2c>
    }

    // flush buffers
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f103 0110 	add.w	r1, r3, #16
 800c8bc:	687a      	ldr	r2, [r7, #4]
 800c8be:	2300      	movs	r3, #0
 800c8c0:	6878      	ldr	r0, [r7, #4]
 800c8c2:	f7fe f8c9 	bl	800aa58 <lfs_bd_sync>
 800c8c6:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800c8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d001      	beq.n	800c8d2 <lfs_dir_commitcrc+0x1a2>
        return err;
 800c8ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d0:	e066      	b.n	800c9a0 <lfs_dir_commitcrc+0x270>
    }

    // successful commit, check checksums to make sure
    lfs_off_t off = commit->begin;
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	63bb      	str	r3, [r7, #56]	; 0x38
    lfs_off_t noff = off1;
 800c8d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8da:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800c8dc:	e05b      	b.n	800c996 <lfs_dir_commitcrc+0x266>
        uint32_t crc = 0xffffffff;
 800c8de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8e2:	633b      	str	r3, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800c8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8e8:	e030      	b.n	800c94c <lfs_dir_commitcrc+0x21c>
            // check against written crc, may catch blocks that
            // become readonly and match our commit size exactly
            if (i == off1 && crc != crc1) {
 800c8ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d106      	bne.n	800c900 <lfs_dir_commitcrc+0x1d0>
 800c8f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d002      	beq.n	800c900 <lfs_dir_commitcrc+0x1d0>
                return LFS_ERR_CORRUPT;
 800c8fa:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800c8fe:	e04f      	b.n	800c9a0 <lfs_dir_commitcrc+0x270>
            }

            // leave it up to caching to make this efficient
            uint8_t dat;
            err = lfs_bd_read(lfs,
 800c900:	6879      	ldr	r1, [r7, #4]
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
 800c902:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c906:	1ad3      	subs	r3, r2, r3
            err = lfs_bd_read(lfs,
 800c908:	1d18      	adds	r0, r3, #4
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	2201      	movs	r2, #1
 800c910:	9203      	str	r2, [sp, #12]
 800c912:	f107 020b 	add.w	r2, r7, #11
 800c916:	9202      	str	r2, [sp, #8]
 800c918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c91a:	9201      	str	r2, [sp, #4]
 800c91c:	9300      	str	r3, [sp, #0]
 800c91e:	4603      	mov	r3, r0
 800c920:	460a      	mov	r2, r1
 800c922:	2100      	movs	r1, #0
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f7fd fe85 	bl	800a634 <lfs_bd_read>
 800c92a:	6278      	str	r0, [r7, #36]	; 0x24
                    commit->block, i, &dat, 1);
            if (err) {
 800c92c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d001      	beq.n	800c936 <lfs_dir_commitcrc+0x206>
                return err;
 800c932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c934:	e034      	b.n	800c9a0 <lfs_dir_commitcrc+0x270>
            }

            crc = lfs_crc(crc, &dat, 1);
 800c936:	f107 030b 	add.w	r3, r7, #11
 800c93a:	2201      	movs	r2, #1
 800c93c:	4619      	mov	r1, r3
 800c93e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c940:	f003 fcf4 	bl	801032c <lfs_crc>
 800c944:	6338      	str	r0, [r7, #48]	; 0x30
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
 800c946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c948:	3301      	adds	r3, #1
 800c94a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c94c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c94e:	3304      	adds	r3, #4
 800c950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c952:	429a      	cmp	r2, r3
 800c954:	d3c9      	bcc.n	800c8ea <lfs_dir_commitcrc+0x1ba>
        }

        // detected write error?
        if (crc != 0) {
 800c956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d002      	beq.n	800c962 <lfs_dir_commitcrc+0x232>
            return LFS_ERR_CORRUPT;
 800c95c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800c960:	e01e      	b.n	800c9a0 <lfs_dir_commitcrc+0x270>
        }

        // skip padding
        off = lfs_min(end - noff, 0x3fe) + noff;
 800c962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c966:	1ad3      	subs	r3, r2, r3
 800c968:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800c96c:	4618      	mov	r0, r3
 800c96e:	f7fd fd85 	bl	800a47c <lfs_min>
 800c972:	4602      	mov	r2, r0
 800c974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c976:	4413      	add	r3, r2
 800c978:	63bb      	str	r3, [r7, #56]	; 0x38
        if (off < end) {
 800c97a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97e:	429a      	cmp	r2, r3
 800c980:	d206      	bcs.n	800c990 <lfs_dir_commitcrc+0x260>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
 800c982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c984:	3b08      	subs	r3, #8
 800c986:	4619      	mov	r1, r3
 800c988:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c98a:	f7fd fd77 	bl	800a47c <lfs_min>
 800c98e:	63b8      	str	r0, [r7, #56]	; 0x38
        }
        noff = off + sizeof(uint32_t);
 800c990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c992:	3304      	adds	r3, #4
 800c994:	637b      	str	r3, [r7, #52]	; 0x34
    while (off < end) {
 800c996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d39f      	bcc.n	800c8de <lfs_dir_commitcrc+0x1ae>
    }

    return 0;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	374c      	adds	r7, #76	; 0x4c
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd90      	pop	{r4, r7, pc}

0800c9a8 <lfs_dir_alloc>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b08a      	sub	sp, #40	; 0x28
 800c9ac:	af04      	add	r7, sp, #16
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	6039      	str	r1, [r7, #0]
    // allocate pair of dir blocks (backwards, so we write block 1 first)
    for (int i = 0; i < 2; i++) {
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	617b      	str	r3, [r7, #20]
 800c9b6:	e016      	b.n	800c9e6 <lfs_dir_alloc+0x3e>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f003 0301 	and.w	r3, r3, #1
 800c9c2:	bfb8      	it	lt
 800c9c4:	425b      	neglt	r3, r3
 800c9c6:	009b      	lsls	r3, r3, #2
 800c9c8:	683a      	ldr	r2, [r7, #0]
 800c9ca:	4413      	add	r3, r2
 800c9cc:	4619      	mov	r1, r3
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7fe fcb8 	bl	800b344 <lfs_alloc>
 800c9d4:	60f8      	str	r0, [r7, #12]
        if (err) {
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d001      	beq.n	800c9e0 <lfs_dir_alloc+0x38>
            return err;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	e058      	b.n	800ca92 <lfs_dir_alloc+0xea>
    for (int i = 0; i < 2; i++) {
 800c9e0:	697b      	ldr	r3, [r7, #20]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	617b      	str	r3, [r7, #20]
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	2b01      	cmp	r3, #1
 800c9ea:	dde5      	ble.n	800c9b8 <lfs_dir_alloc+0x10>
        }
    }

    // zero for reproducability in case initial block is unreadable
    dir->rev = 0;
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	609a      	str	r2, [r3, #8]

    // rather than clobbering one of the blocks we just pretend
    // the revision may be valid
    int err = lfs_bd_read(lfs,
 800c9f2:	6879      	ldr	r1, [r7, #4]
 800c9f4:	683b      	ldr	r3, [r7, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
            NULL, &lfs->rcache, sizeof(dir->rev),
            dir->pair[0], 0, &dir->rev, sizeof(dir->rev));
 800c9f8:	683a      	ldr	r2, [r7, #0]
 800c9fa:	3208      	adds	r2, #8
    int err = lfs_bd_read(lfs,
 800c9fc:	2004      	movs	r0, #4
 800c9fe:	9003      	str	r0, [sp, #12]
 800ca00:	9202      	str	r2, [sp, #8]
 800ca02:	2200      	movs	r2, #0
 800ca04:	9201      	str	r2, [sp, #4]
 800ca06:	9300      	str	r3, [sp, #0]
 800ca08:	2304      	movs	r3, #4
 800ca0a:	460a      	mov	r2, r1
 800ca0c:	2100      	movs	r1, #0
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f7fd fe10 	bl	800a634 <lfs_bd_read>
 800ca14:	6138      	str	r0, [r7, #16]
    dir->rev = lfs_fromle32(dir->rev);
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	f7fd fd9e 	bl	800a55c <lfs_fromle32>
 800ca20:	4602      	mov	r2, r0
 800ca22:	683b      	ldr	r3, [r7, #0]
 800ca24:	609a      	str	r2, [r3, #8]
    if (err && err != LFS_ERR_CORRUPT) {
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d005      	beq.n	800ca38 <lfs_dir_alloc+0x90>
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ca32:	d001      	beq.n	800ca38 <lfs_dir_alloc+0x90>
        return err;
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	e02c      	b.n	800ca92 <lfs_dir_alloc+0xea>
    }

    // to make sure we don't immediately evict, align the new revision count
    // to our block_cycles modulus, see lfs_dir_compact for why our modulus
    // is tweaked this way
    if (lfs->cfg->block_cycles > 0) {
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	dd0e      	ble.n	800ca60 <lfs_dir_alloc+0xb8>
        dir->rev = lfs_alignup(dir->rev, ((lfs->cfg->block_cycles+1)|1));
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	689a      	ldr	r2, [r3, #8]
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	f043 0301 	orr.w	r3, r3, #1
 800ca52:	4619      	mov	r1, r3
 800ca54:	4610      	mov	r0, r2
 800ca56:	f7fd fd36 	bl	800a4c6 <lfs_alignup>
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	609a      	str	r2, [r3, #8]
    }

    // set defaults
    dir->off = sizeof(dir->rev);
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	2204      	movs	r2, #4
 800ca64:	60da      	str	r2, [r3, #12]
    dir->etag = 0xffffffff;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca6c:	611a      	str	r2, [r3, #16]
    dir->count = 0;
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	2200      	movs	r2, #0
 800ca72:	829a      	strh	r2, [r3, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca7a:	619a      	str	r2, [r3, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca82:	61da      	str	r2, [r3, #28]
    dir->erased = false;
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	2200      	movs	r2, #0
 800ca88:	759a      	strb	r2, [r3, #22]
    dir->split = false;
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	75da      	strb	r2, [r3, #23]

    // don't write out yet, let caller take care of that
    return 0;
 800ca90:	2300      	movs	r3, #0
}
 800ca92:	4618      	mov	r0, r3
 800ca94:	3718      	adds	r7, #24
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}
	...

0800ca9c <lfs_dir_drop>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b08a      	sub	sp, #40	; 0x28
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
    // steal state
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	3348      	adds	r3, #72	; 0x48
 800caac:	461a      	mov	r2, r3
 800caae:	6879      	ldr	r1, [r7, #4]
 800cab0:	68f8      	ldr	r0, [r7, #12]
 800cab2:	f7ff fc11 	bl	800c2d8 <lfs_dir_getgstate>
 800cab6:	6278      	str	r0, [r7, #36]	; 0x24
    if (err) {
 800cab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d001      	beq.n	800cac2 <lfs_dir_drop+0x26>
        return err;
 800cabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac0:	e022      	b.n	800cb08 <lfs_dir_drop+0x6c>
    }

    // steal tail
    lfs_pair_tole32(tail->tail);
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	3318      	adds	r3, #24
 800cac6:	4618      	mov	r0, r3
 800cac8:	f7fe f977 	bl	800adba <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	7ddb      	ldrb	r3, [r3, #23]
 800cad0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800cad4:	051a      	lsls	r2, r3, #20
 800cad6:	4b0e      	ldr	r3, [pc, #56]	; (800cb10 <lfs_dir_drop+0x74>)
 800cad8:	4313      	orrs	r3, r2
 800cada:	61fb      	str	r3, [r7, #28]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	3318      	adds	r3, #24
 800cae0:	623b      	str	r3, [r7, #32]
 800cae2:	f107 021c 	add.w	r2, r7, #28
 800cae6:	2301      	movs	r3, #1
 800cae8:	68b9      	ldr	r1, [r7, #8]
 800caea:	68f8      	ldr	r0, [r7, #12]
 800caec:	f000 fbac 	bl	800d248 <lfs_dir_commit>
 800caf0:	6278      	str	r0, [r7, #36]	; 0x24
            {LFS_MKTAG(LFS_TYPE_TAIL + tail->split, 0x3ff, 8), tail->tail}));
    lfs_pair_fromle32(tail->tail);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	3318      	adds	r3, #24
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7fe f945 	bl	800ad86 <lfs_pair_fromle32>
    if (err) {
 800cafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d001      	beq.n	800cb06 <lfs_dir_drop+0x6a>
        return err;
 800cb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb04:	e000      	b.n	800cb08 <lfs_dir_drop+0x6c>
    }

    return 0;
 800cb06:	2300      	movs	r3, #0
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	3728      	adds	r7, #40	; 0x28
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	000ffc08 	.word	0x000ffc08

0800cb14 <lfs_dir_split>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_split(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b092      	sub	sp, #72	; 0x48
 800cb18:	af04      	add	r7, sp, #16
 800cb1a:	60f8      	str	r0, [r7, #12]
 800cb1c:	60b9      	str	r1, [r7, #8]
 800cb1e:	607a      	str	r2, [r7, #4]
 800cb20:	603b      	str	r3, [r7, #0]
    // create tail directory
    lfs_alloc_ack(lfs);
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f7fe fbee 	bl	800b304 <lfs_alloc_ack>
    lfs_mdir_t tail;
    int err = lfs_dir_alloc(lfs, &tail);
 800cb28:	f107 0314 	add.w	r3, r7, #20
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f7ff ff3a 	bl	800c9a8 <lfs_dir_alloc>
 800cb34:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800cb36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <lfs_dir_split+0x2c>
        return err;
 800cb3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb3e:	e03c      	b.n	800cbba <lfs_dir_split+0xa6>
    }

    tail.split = dir->split;
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	7ddb      	ldrb	r3, [r3, #23]
 800cb44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    tail.tail[0] = dir->tail[0];
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	699b      	ldr	r3, [r3, #24]
 800cb4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    tail.tail[1] = dir->tail[1];
 800cb4e:	68bb      	ldr	r3, [r7, #8]
 800cb50:	69db      	ldr	r3, [r3, #28]
 800cb52:	633b      	str	r3, [r7, #48]	; 0x30

    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
 800cb54:	f107 0114 	add.w	r1, r7, #20
 800cb58:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800cb5c:	9302      	str	r3, [sp, #8]
 800cb5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cb62:	9301      	str	r3, [sp, #4]
 800cb64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f000 f853 	bl	800cc18 <lfs_dir_compact>
 800cb72:	6378      	str	r0, [r7, #52]	; 0x34
    if (err) {
 800cb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d001      	beq.n	800cb7e <lfs_dir_split+0x6a>
        return err;
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cb7c:	e01d      	b.n	800cbba <lfs_dir_split+0xa6>
    }

    dir->tail[0] = tail.pair[0];
 800cb7e:	697a      	ldr	r2, [r7, #20]
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	619a      	str	r2, [r3, #24]
    dir->tail[1] = tail.pair[1];
 800cb84:	69ba      	ldr	r2, [r7, #24]
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	61da      	str	r2, [r3, #28]
    dir->split = true;
 800cb8a:	68bb      	ldr	r3, [r7, #8]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	75da      	strb	r2, [r3, #23]

    // update root if needed
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
 800cb90:	68ba      	ldr	r2, [r7, #8]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	3320      	adds	r3, #32
 800cb96:	4619      	mov	r1, r3
 800cb98:	4610      	mov	r0, r2
 800cb9a:	f7fe f89d 	bl	800acd8 <lfs_pair_cmp>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d109      	bne.n	800cbb8 <lfs_dir_split+0xa4>
 800cba4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d105      	bne.n	800cbb8 <lfs_dir_split+0xa4>
        lfs->root[0] = tail.pair[0];
 800cbac:	697a      	ldr	r2, [r7, #20]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	621a      	str	r2, [r3, #32]
        lfs->root[1] = tail.pair[1];
 800cbb2:	69ba      	ldr	r2, [r7, #24]
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return 0;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3738      	adds	r7, #56	; 0x38
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <lfs_dir_commit_size>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_size(void *p, lfs_tag_t tag, const void *buffer) {
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b086      	sub	sp, #24
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	60f8      	str	r0, [r7, #12]
 800cbca:	60b9      	str	r1, [r7, #8]
 800cbcc:	607a      	str	r2, [r7, #4]
    lfs_size_t *size = p;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	617b      	str	r3, [r7, #20]
    (void)buffer;

    *size += lfs_tag_dsize(tag);
 800cbd2:	68b8      	ldr	r0, [r7, #8]
 800cbd4:	f7fe f983 	bl	800aede <lfs_tag_dsize>
 800cbd8:	4602      	mov	r2, r0
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	441a      	add	r2, r3
 800cbe0:	697b      	ldr	r3, [r7, #20]
 800cbe2:	601a      	str	r2, [r3, #0]
    return 0;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3718      	adds	r7, #24
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <lfs_dir_commit_commit>:
    struct lfs_commit *commit;
};
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b086      	sub	sp, #24
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	60f8      	str	r0, [r7, #12]
 800cbf6:	60b9      	str	r1, [r7, #8]
 800cbf8:	607a      	str	r2, [r7, #4]
    struct lfs_dir_commit_commit *commit = p;
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	617b      	str	r3, [r7, #20]
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	6818      	ldr	r0, [r3, #0]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	6859      	ldr	r1, [r3, #4]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	f7ff fd11 	bl	800c630 <lfs_dir_commitattr>
 800cc0e:	4603      	mov	r3, r0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3718      	adds	r7, #24
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <lfs_dir_compact>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_compact(lfs_t *lfs,
        lfs_mdir_t *dir, const struct lfs_mattr *attrs, int attrcount,
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
 800cc18:	b590      	push	{r4, r7, lr}
 800cc1a:	b0ad      	sub	sp, #180	; 0xb4
 800cc1c:	af0a      	add	r7, sp, #40	; 0x28
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	607a      	str	r2, [r7, #4]
 800cc24:	603b      	str	r3, [r7, #0]
    // save some state in case block is bad
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	663b      	str	r3, [r7, #96]	; 0x60
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	685b      	ldr	r3, [r3, #4]
 800cc30:	667b      	str	r3, [r7, #100]	; 0x64
    bool relocated = false;
 800cc32:	2300      	movs	r3, #0
 800cc34:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    bool tired = false;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

    // should we split?
    while (end - begin > 1) {
 800cc3e:	e08f      	b.n	800cd60 <lfs_dir_compact+0x148>
        // find size
        lfs_size_t size = 0;
 800cc40:	2300      	movs	r3, #0
 800cc42:	65fb      	str	r3, [r7, #92]	; 0x5c
        int err = lfs_dir_traverse(lfs,
 800cc44:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cc48:	425b      	negs	r3, r3
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	b21b      	sxth	r3, r3
 800cc4e:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800cc52:	9208      	str	r2, [sp, #32]
 800cc54:	4aa4      	ldr	r2, [pc, #656]	; (800cee8 <lfs_dir_compact+0x2d0>)
 800cc56:	9207      	str	r2, [sp, #28]
 800cc58:	9306      	str	r3, [sp, #24]
 800cc5a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800cc5e:	9305      	str	r3, [sp, #20]
 800cc60:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cc64:	9304      	str	r3, [sp, #16]
 800cc66:	2300      	movs	r3, #0
 800cc68:	9303      	str	r3, [sp, #12]
 800cc6a:	4ba0      	ldr	r3, [pc, #640]	; (800ceec <lfs_dir_compact+0x2d4>)
 800cc6c:	9302      	str	r3, [sp, #8]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	9301      	str	r3, [sp, #4]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	9300      	str	r3, [sp, #0]
 800cc76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f7fe fe49 	bl	800b918 <lfs_dir_traverse>
 800cc86:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, 0, 0xffffffff, attrs, attrcount,
                LFS_MKTAG(0x400, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                begin, end, -begin,
                lfs_dir_commit_size, &size);
        if (err) {
 800cc8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d002      	beq.n	800cc98 <lfs_dir_compact+0x80>
            return err;
 800cc92:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cc96:	e2cc      	b.n	800d232 <lfs_dir_compact+0x61a>
        }

        // space is complicated, we need room for tail, crc, gstate,
        // cleanup delete, and we cap at half a block to give room
        // for metadata updates.
        if (end - begin < 0xff &&
 800cc98:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800cc9c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cca0:	1ad3      	subs	r3, r2, r3
 800cca2:	2bfe      	cmp	r3, #254	; 0xfe
 800cca4:	dc22      	bgt.n	800ccec <lfs_dir_compact+0xd4>
                size <= lfs_min(lfs->cfg->block_size - 36,
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccac:	f1a3 0424 	sub.w	r4, r3, #36	; 0x24
                    lfs_alignup((lfs->cfg->metadata_max ?
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                size <= lfs_min(lfs->cfg->block_size - 36,
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d004      	beq.n	800ccc4 <lfs_dir_compact+0xac>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                size <= lfs_min(lfs->cfg->block_size - 36,
 800ccc0:	085b      	lsrs	r3, r3, #1
 800ccc2:	e003      	b.n	800cccc <lfs_dir_compact+0xb4>
                            lfs->cfg->metadata_max : lfs->cfg->block_size)/2,
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ccc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                size <= lfs_min(lfs->cfg->block_size - 36,
 800ccca:	085b      	lsrs	r3, r3, #1
                        lfs->cfg->prog_size))) {
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800ccd0:	6a12      	ldr	r2, [r2, #32]
                size <= lfs_min(lfs->cfg->block_size - 36,
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f7fd fbf6 	bl	800a4c6 <lfs_alignup>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	4619      	mov	r1, r3
 800ccde:	4620      	mov	r0, r4
 800cce0:	f7fd fbcc 	bl	800a47c <lfs_min>
 800cce4:	4602      	mov	r2, r0
 800cce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
        if (end - begin < 0xff &&
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d242      	bcs.n	800cd72 <lfs_dir_compact+0x15a>
        }

        // can't fit, need to split, we should really be finding the
        // largest size that fits with a small binary search, but right now
        // it's not worth the code size
        uint16_t split = (end - begin) / 2;
 800ccec:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800ccf0:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ccf4:	1ad3      	subs	r3, r2, r3
 800ccf6:	0fda      	lsrs	r2, r3, #31
 800ccf8:	4413      	add	r3, r2
 800ccfa:	105b      	asrs	r3, r3, #1
 800ccfc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800cd00:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800cd04:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800cd08:	4413      	add	r3, r2
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800cd10:	9202      	str	r2, [sp, #8]
 800cd12:	9301      	str	r3, [sp, #4]
 800cd14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cd18:	9300      	str	r3, [sp, #0]
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	68b9      	ldr	r1, [r7, #8]
 800cd20:	68f8      	ldr	r0, [r7, #12]
 800cd22:	f7ff fef7 	bl	800cb14 <lfs_dir_split>
 800cd26:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
                source, begin+split, end);
        if (err) {
 800cd2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00f      	beq.n	800cd52 <lfs_dir_compact+0x13a>
            // if we fail to split, we may be able to overcompact, unless
            // we're too big for even the full block, in which case our
            // only option is to error
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
 800cd32:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd36:	f113 0f1c 	cmn.w	r3, #28
 800cd3a:	d107      	bne.n	800cd4c <lfs_dir_compact+0x134>
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd42:	f1a3 0224 	sub.w	r2, r3, #36	; 0x24
 800cd46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d214      	bcs.n	800cd76 <lfs_dir_compact+0x15e>
                break;
            }
            return err;
 800cd4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cd50:	e26f      	b.n	800d232 <lfs_dir_compact+0x61a>
        }

        end = begin + split;
 800cd52:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800cd56:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800cd5a:	4413      	add	r3, r2
 800cd5c:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    while (end - begin > 1) {
 800cd60:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800cd64:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cd68:	1ad3      	subs	r3, r2, r3
 800cd6a:	2b01      	cmp	r3, #1
 800cd6c:	f73f af68 	bgt.w	800cc40 <lfs_dir_compact+0x28>
 800cd70:	e002      	b.n	800cd78 <lfs_dir_compact+0x160>
            break;
 800cd72:	bf00      	nop
 800cd74:	e000      	b.n	800cd78 <lfs_dir_compact+0x160>
                break;
 800cd76:	bf00      	nop
    }

    // increment revision count
    dir->rev += 1;
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	1c5a      	adds	r2, r3, #1
 800cd7e:	68bb      	ldr	r3, [r7, #8]
 800cd80:	609a      	str	r2, [r3, #8]
    // this is how littlefs wear-levels at the metadata-pair level. Note that we
    // actually use (block_cycles+1)|1, this is to avoid two corner cases:
    // 1. block_cycles = 1, which would prevent relocations from terminating
    // 2. block_cycles = 2n, which, due to aliasing, would only ever relocate
    //    one metadata block in the pair, effectively making this useless
    if (lfs->cfg->block_cycles > 0 &&
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	dd5b      	ble.n	800ce44 <lfs_dir_compact+0x22c>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	689b      	ldr	r3, [r3, #8]
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800cd94:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cd96:	3201      	adds	r2, #1
 800cd98:	f042 0201 	orr.w	r2, r2, #1
 800cd9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cda0:	fb01 f202 	mul.w	r2, r1, r2
 800cda4:	1a9b      	subs	r3, r3, r2
    if (lfs->cfg->block_cycles > 0 &&
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d14c      	bne.n	800ce44 <lfs_dir_compact+0x22c>
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	2200      	movs	r2, #0
 800cdae:	657a      	str	r2, [r7, #84]	; 0x54
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	65ba      	str	r2, [r7, #88]	; 0x58
 800cdb4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800cdb8:	4611      	mov	r1, r2
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f7fd ff8c 	bl	800acd8 <lfs_pair_cmp>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d13a      	bne.n	800ce3c <lfs_dir_compact+0x224>
            // oh no! we're writing too much to the superblock,
            // should we expand?
            lfs_ssize_t res = lfs_fs_rawsize(lfs);
 800cdc6:	68f8      	ldr	r0, [r7, #12]
 800cdc8:	f003 f9be 	bl	8010148 <lfs_fs_rawsize>
 800cdcc:	67b8      	str	r0, [r7, #120]	; 0x78
            if (res < 0) {
 800cdce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	da01      	bge.n	800cdd8 <lfs_dir_compact+0x1c0>
                return res;
 800cdd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cdd6:	e22c      	b.n	800d232 <lfs_dir_compact+0x61a>
            }

            // do we have extra space? littlefs can't reclaim this space
            // by itself, so expand cautiously
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdde:	085a      	lsrs	r2, r3, #1
 800cde0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cde2:	429a      	cmp	r2, r3
 800cde4:	d92e      	bls.n	800ce44 <lfs_dir_compact+0x22c>
                LFS_DEBUG("Expanding superblock at rev %"PRIu32, dir->rev);
 800cde6:	68bb      	ldr	r3, [r7, #8]
 800cde8:	689b      	ldr	r3, [r3, #8]
 800cdea:	4a41      	ldr	r2, [pc, #260]	; (800cef0 <lfs_dir_compact+0x2d8>)
 800cdec:	9200      	str	r2, [sp, #0]
 800cdee:	f240 626c 	movw	r2, #1644	; 0x66c
 800cdf2:	4940      	ldr	r1, [pc, #256]	; (800cef4 <lfs_dir_compact+0x2dc>)
 800cdf4:	4840      	ldr	r0, [pc, #256]	; (800cef8 <lfs_dir_compact+0x2e0>)
 800cdf6:	f014 fadf 	bl	80213b8 <iprintf>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
 800cdfa:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800cdfe:	9302      	str	r3, [sp, #8]
 800ce00:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ce04:	9301      	str	r3, [sp, #4]
 800ce06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ce0a:	9300      	str	r3, [sp, #0]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	68b9      	ldr	r1, [r7, #8]
 800ce12:	68f8      	ldr	r0, [r7, #12]
 800ce14:	f7ff fe7e 	bl	800cb14 <lfs_dir_split>
 800ce18:	6778      	str	r0, [r7, #116]	; 0x74
                        source, begin, end);
                if (err && err != LFS_ERR_NOSPC) {
 800ce1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d005      	beq.n	800ce2c <lfs_dir_compact+0x214>
 800ce20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce22:	f113 0f1c 	cmn.w	r3, #28
 800ce26:	d001      	beq.n	800ce2c <lfs_dir_compact+0x214>
                    return err;
 800ce28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce2a:	e202      	b.n	800d232 <lfs_dir_compact+0x61a>
                }

                // welp, we tried, if we ran out of space there's not much
                // we can do, we'll error later if we've become frozen
                if (!err) {
 800ce2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d108      	bne.n	800ce44 <lfs_dir_compact+0x22c>
                    end = begin;
 800ce32:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800ce36:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 800ce3a:	e003      	b.n	800ce44 <lfs_dir_compact+0x22c>
            // this, relocations increase the overall complexity of
            // lfs_migration, which is already a delicate operation.
#endif
        } else {
            // we're writing too much, time to relocate
            tired = true;
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
 800ce42:	e16b      	b.n	800d11c <lfs_dir_compact+0x504>
    // begin loop to commit compaction to blocks until a compact sticks
    while (true) {
        {
            // setup commit state
            struct lfs_commit commit = {
                .block = dir->pair[1],
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	685b      	ldr	r3, [r3, #4]
            struct lfs_commit commit = {
 800ce48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	643b      	str	r3, [r7, #64]	; 0x40
 800ce4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce52:	647b      	str	r3, [r7, #68]	; 0x44
 800ce54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce58:	64bb      	str	r3, [r7, #72]	; 0x48
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	64fb      	str	r3, [r7, #76]	; 0x4c
                .off = 0,
                .ptag = 0xffffffff,
                .crc = 0xffffffff,

                .begin = 0,
                .end = (lfs->cfg->metadata_max ?
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                    lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d004      	beq.n	800ce72 <lfs_dir_compact+0x25a>
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce6e:	3b08      	subs	r3, #8
 800ce70:	e003      	b.n	800ce7a <lfs_dir_compact+0x262>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ce76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce78:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
 800ce7a:	653b      	str	r3, [r7, #80]	; 0x50
            };

            // erase block to write to
            int err = lfs_bd_erase(lfs, dir->pair[1]);
 800ce7c:	68bb      	ldr	r3, [r7, #8]
 800ce7e:	685b      	ldr	r3, [r3, #4]
 800ce80:	4619      	mov	r1, r3
 800ce82:	68f8      	ldr	r0, [r7, #12]
 800ce84:	f7fd fec8 	bl	800ac18 <lfs_bd_erase>
 800ce88:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800ce8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d006      	beq.n	800ce9e <lfs_dir_compact+0x286>
                if (err == LFS_ERR_CORRUPT) {
 800ce90:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce92:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ce96:	f000 8136 	beq.w	800d106 <lfs_dir_compact+0x4ee>
                    goto relocate;
                }
                return err;
 800ce9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ce9c:	e1c9      	b.n	800d232 <lfs_dir_compact+0x61a>
            }

            // write out header
            dir->rev = lfs_tole32(dir->rev);
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7fd fb65 	bl	800a572 <lfs_tole32>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	609a      	str	r2, [r3, #8]
            err = lfs_dir_commitprog(lfs, &commit,
                    &dir->rev, sizeof(dir->rev));
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	f103 0208 	add.w	r2, r3, #8
            err = lfs_dir_commitprog(lfs, &commit,
 800ceb4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ceb8:	2304      	movs	r3, #4
 800ceba:	68f8      	ldr	r0, [r7, #12]
 800cebc:	f7ff fb82 	bl	800c5c4 <lfs_dir_commitprog>
 800cec0:	6738      	str	r0, [r7, #112]	; 0x70
            dir->rev = lfs_fromle32(dir->rev);
 800cec2:	68bb      	ldr	r3, [r7, #8]
 800cec4:	689b      	ldr	r3, [r3, #8]
 800cec6:	4618      	mov	r0, r3
 800cec8:	f7fd fb48 	bl	800a55c <lfs_fromle32>
 800cecc:	4602      	mov	r2, r0
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	609a      	str	r2, [r3, #8]
            if (err) {
 800ced2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d011      	beq.n	800cefc <lfs_dir_compact+0x2e4>
                if (err == LFS_ERR_CORRUPT) {
 800ced8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ceda:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cede:	f000 8114 	beq.w	800d10a <lfs_dir_compact+0x4f2>
                    goto relocate;
                }
                return err;
 800cee2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cee4:	e1a5      	b.n	800d232 <lfs_dir_compact+0x61a>
 800cee6:	bf00      	nop
 800cee8:	0800cbc3 	.word	0x0800cbc3
 800ceec:	400ffc00 	.word	0x400ffc00
 800cef0:	08023064 	.word	0x08023064
 800cef4:	08022f58 	.word	0x08022f58
 800cef8:	080230b4 	.word	0x080230b4
            }

            // traverse the directory, this time writing out all unique tags
            err = lfs_dir_traverse(lfs,
 800cefc:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cf00:	425b      	negs	r3, r3
 800cf02:	b29b      	uxth	r3, r3
 800cf04:	b21b      	sxth	r3, r3
                    source, 0, 0xffffffff, attrs, attrcount,
                    LFS_MKTAG(0x400, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_NAME, 0, 0),
                    begin, end, -begin,
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800cf06:	68fa      	ldr	r2, [r7, #12]
 800cf08:	637a      	str	r2, [r7, #52]	; 0x34
 800cf0a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800cf0e:	63ba      	str	r2, [r7, #56]	; 0x38
            err = lfs_dir_traverse(lfs,
 800cf10:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800cf14:	9208      	str	r2, [sp, #32]
 800cf16:	4aaa      	ldr	r2, [pc, #680]	; (800d1c0 <lfs_dir_compact+0x5a8>)
 800cf18:	9207      	str	r2, [sp, #28]
 800cf1a:	9306      	str	r3, [sp, #24]
 800cf1c:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800cf20:	9305      	str	r3, [sp, #20]
 800cf22:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800cf26:	9304      	str	r3, [sp, #16]
 800cf28:	2300      	movs	r3, #0
 800cf2a:	9303      	str	r3, [sp, #12]
 800cf2c:	4ba5      	ldr	r3, [pc, #660]	; (800d1c4 <lfs_dir_compact+0x5ac>)
 800cf2e:	9302      	str	r3, [sp, #8]
 800cf30:	683b      	ldr	r3, [r7, #0]
 800cf32:	9301      	str	r3, [sp, #4]
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800cf42:	68f8      	ldr	r0, [r7, #12]
 800cf44:	f7fe fce8 	bl	800b918 <lfs_dir_traverse>
 800cf48:	6738      	str	r0, [r7, #112]	; 0x70
                        lfs, &commit});
            if (err) {
 800cf4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d006      	beq.n	800cf5e <lfs_dir_compact+0x346>
                if (err == LFS_ERR_CORRUPT) {
 800cf50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf52:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cf56:	f000 80da 	beq.w	800d10e <lfs_dir_compact+0x4f6>
                    goto relocate;
                }
                return err;
 800cf5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf5c:	e169      	b.n	800d232 <lfs_dir_compact+0x61a>
            }

            // commit tail, which may be new after last size check
            if (!lfs_pair_isnull(dir->tail)) {
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	3318      	adds	r3, #24
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7fd fe9d 	bl	800aca2 <lfs_pair_isnull>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	f083 0301 	eor.w	r3, r3, #1
 800cf6e:	b2db      	uxtb	r3, r3
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d022      	beq.n	800cfba <lfs_dir_compact+0x3a2>
                lfs_pair_tole32(dir->tail);
 800cf74:	68bb      	ldr	r3, [r7, #8]
 800cf76:	3318      	adds	r3, #24
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f7fd ff1e 	bl	800adba <lfs_pair_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
 800cf7e:	68bb      	ldr	r3, [r7, #8]
 800cf80:	7ddb      	ldrb	r3, [r3, #23]
 800cf82:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800cf86:	051b      	lsls	r3, r3, #20
                err = lfs_dir_commitattr(lfs, &commit,
 800cf88:	4a8f      	ldr	r2, [pc, #572]	; (800d1c8 <lfs_dir_compact+0x5b0>)
 800cf8a:	431a      	orrs	r2, r3
                        dir->tail);
 800cf8c:	68bb      	ldr	r3, [r7, #8]
 800cf8e:	3318      	adds	r3, #24
                err = lfs_dir_commitattr(lfs, &commit,
 800cf90:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f7ff fb4b 	bl	800c630 <lfs_dir_commitattr>
 800cf9a:	6738      	str	r0, [r7, #112]	; 0x70
                lfs_pair_fromle32(dir->tail);
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	3318      	adds	r3, #24
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7fd fef0 	bl	800ad86 <lfs_pair_fromle32>
                if (err) {
 800cfa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d006      	beq.n	800cfba <lfs_dir_compact+0x3a2>
                    if (err == LFS_ERR_CORRUPT) {
 800cfac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800cfb2:	f000 80ae 	beq.w	800d112 <lfs_dir_compact+0x4fa>
                        goto relocate;
                    }
                    return err;
 800cfb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfb8:	e13b      	b.n	800d232 <lfs_dir_compact+0x61a>
                }
            }

            // bring over gstate?
            lfs_gstate_t delta = {0};
 800cfba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	601a      	str	r2, [r3, #0]
 800cfc2:	605a      	str	r2, [r3, #4]
 800cfc4:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800cfc6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800cfca:	f083 0301 	eor.w	r3, r3, #1
 800cfce:	b2db      	uxtb	r3, r3
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d011      	beq.n	800cff8 <lfs_dir_compact+0x3e0>
                lfs_gstate_xor(&delta, &lfs->gdisk);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800cfda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cfde:	4611      	mov	r1, r2
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7fd ff90 	bl	800af06 <lfs_gstate_xor>
                lfs_gstate_xor(&delta, &lfs->gstate);
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cfec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cff0:	4611      	mov	r1, r2
 800cff2:	4618      	mov	r0, r3
 800cff4:	f7fd ff87 	bl	800af06 <lfs_gstate_xor>
            }
            lfs_gstate_xor(&delta, &lfs->gdelta);
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800cffe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d002:	4611      	mov	r1, r2
 800d004:	4618      	mov	r0, r3
 800d006:	f7fd ff7e 	bl	800af06 <lfs_gstate_xor>
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800d00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d00c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d010:	f023 0303 	bic.w	r3, r3, #3
 800d014:	62bb      	str	r3, [r7, #40]	; 0x28

            err = lfs_dir_getgstate(lfs, dir, &delta);
 800d016:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d01a:	461a      	mov	r2, r3
 800d01c:	68b9      	ldr	r1, [r7, #8]
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f7ff f95a 	bl	800c2d8 <lfs_dir_getgstate>
 800d024:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800d026:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d001      	beq.n	800d030 <lfs_dir_compact+0x418>
                return err;
 800d02c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d02e:	e100      	b.n	800d232 <lfs_dir_compact+0x61a>
            }

            if (!lfs_gstate_iszero(&delta)) {
 800d030:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d034:	4618      	mov	r0, r3
 800d036:	f7fd ff8b 	bl	800af50 <lfs_gstate_iszero>
 800d03a:	4603      	mov	r3, r0
 800d03c:	f083 0301 	eor.w	r3, r3, #1
 800d040:	b2db      	uxtb	r3, r3
 800d042:	2b00      	cmp	r3, #0
 800d044:	d016      	beq.n	800d074 <lfs_dir_compact+0x45c>
                lfs_gstate_tole32(&delta);
 800d046:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d04a:	4618      	mov	r0, r3
 800d04c:	f7fe f812 	bl	800b074 <lfs_gstate_tole32>
                err = lfs_dir_commitattr(lfs, &commit,
 800d050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d054:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800d058:	4a5c      	ldr	r2, [pc, #368]	; (800d1cc <lfs_dir_compact+0x5b4>)
 800d05a:	68f8      	ldr	r0, [r7, #12]
 800d05c:	f7ff fae8 	bl	800c630 <lfs_dir_commitattr>
 800d060:	6738      	str	r0, [r7, #112]	; 0x70
                        LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                            sizeof(delta)), &delta);
                if (err) {
 800d062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d064:	2b00      	cmp	r3, #0
 800d066:	d005      	beq.n	800d074 <lfs_dir_compact+0x45c>
                    if (err == LFS_ERR_CORRUPT) {
 800d068:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d06a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d06e:	d052      	beq.n	800d116 <lfs_dir_compact+0x4fe>
                        goto relocate;
                    }
                    return err;
 800d070:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d072:	e0de      	b.n	800d232 <lfs_dir_compact+0x61a>
                }
            }

            // complete commit with crc
            err = lfs_dir_commitcrc(lfs, &commit);
 800d074:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800d078:	4619      	mov	r1, r3
 800d07a:	68f8      	ldr	r0, [r7, #12]
 800d07c:	f7ff fb58 	bl	800c730 <lfs_dir_commitcrc>
 800d080:	6738      	str	r0, [r7, #112]	; 0x70
            if (err) {
 800d082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d084:	2b00      	cmp	r3, #0
 800d086:	d005      	beq.n	800d094 <lfs_dir_compact+0x47c>
                if (err == LFS_ERR_CORRUPT) {
 800d088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d08a:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d08e:	d044      	beq.n	800d11a <lfs_dir_compact+0x502>
                    goto relocate;
                }
                return err;
 800d090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d092:	e0ce      	b.n	800d232 <lfs_dir_compact+0x61a>
            }

            // successful compaction, swap dir pair to indicate most recent
            LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800d094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d096:	68fa      	ldr	r2, [r7, #12]
 800d098:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d09a:	6a12      	ldr	r2, [r2, #32]
 800d09c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0a0:	fb01 f202 	mul.w	r2, r1, r2
 800d0a4:	1a9b      	subs	r3, r3, r2
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d006      	beq.n	800d0b8 <lfs_dir_compact+0x4a0>
 800d0aa:	4b49      	ldr	r3, [pc, #292]	; (800d1d0 <lfs_dir_compact+0x5b8>)
 800d0ac:	4a49      	ldr	r2, [pc, #292]	; (800d1d4 <lfs_dir_compact+0x5bc>)
 800d0ae:	f44f 61de 	mov.w	r1, #1776	; 0x6f0
 800d0b2:	4849      	ldr	r0, [pc, #292]	; (800d1d8 <lfs_dir_compact+0x5c0>)
 800d0b4:	f013 ff2a 	bl	8020f0c <__assert_func>
            lfs_pair_swap(dir->pair);
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	f7fd fddc 	bl	800ac78 <lfs_pair_swap>
            dir->count = end - begin;
 800d0c0:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800d0c4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d0c8:	1ad3      	subs	r3, r2, r3
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	829a      	strh	r2, [r3, #20]
            dir->off = commit.off;
 800d0d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d0d2:	68bb      	ldr	r3, [r7, #8]
 800d0d4:	60da      	str	r2, [r3, #12]
            dir->etag = commit.ptag;
 800d0d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	611a      	str	r2, [r3, #16]
            // update gstate
            lfs->gdelta = (lfs_gstate_t){0};
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	3348      	adds	r3, #72	; 0x48
 800d0e0:	2200      	movs	r2, #0
 800d0e2:	601a      	str	r2, [r3, #0]
 800d0e4:	605a      	str	r2, [r3, #4]
 800d0e6:	609a      	str	r2, [r3, #8]
            if (!relocated) {
 800d0e8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d0ec:	f083 0301 	eor.w	r3, r3, #1
 800d0f0:	b2db      	uxtb	r3, r3
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d078      	beq.n	800d1e8 <lfs_dir_compact+0x5d0>
                lfs->gdisk = lfs->gstate;
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	68fa      	ldr	r2, [r7, #12]
 800d0fa:	333c      	adds	r3, #60	; 0x3c
 800d0fc:	3230      	adds	r2, #48	; 0x30
 800d0fe:	ca07      	ldmia	r2, {r0, r1, r2}
 800d100:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            }
        }
        break;
 800d104:	e070      	b.n	800d1e8 <lfs_dir_compact+0x5d0>
                    goto relocate;
 800d106:	bf00      	nop
 800d108:	e008      	b.n	800d11c <lfs_dir_compact+0x504>
                    goto relocate;
 800d10a:	bf00      	nop
 800d10c:	e006      	b.n	800d11c <lfs_dir_compact+0x504>
                    goto relocate;
 800d10e:	bf00      	nop
 800d110:	e004      	b.n	800d11c <lfs_dir_compact+0x504>
                        goto relocate;
 800d112:	bf00      	nop
 800d114:	e002      	b.n	800d11c <lfs_dir_compact+0x504>
                        goto relocate;
 800d116:	bf00      	nop
 800d118:	e000      	b.n	800d11c <lfs_dir_compact+0x504>
                    goto relocate;
 800d11a:	bf00      	nop

relocate:
        // commit was corrupted, drop caches and prepare to relocate block
        relocated = true;
 800d11c:	2301      	movs	r3, #1
 800d11e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
        lfs_cache_drop(lfs, &lfs->pcache);
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	3310      	adds	r3, #16
 800d126:	4619      	mov	r1, r3
 800d128:	68f8      	ldr	r0, [r7, #12]
 800d12a:	f7fd fa5d 	bl	800a5e8 <lfs_cache_drop>
        if (!tired) {
 800d12e:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800d132:	f083 0301 	eor.w	r3, r3, #1
 800d136:	b2db      	uxtb	r3, r3
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d009      	beq.n	800d150 <lfs_dir_compact+0x538>
            LFS_DEBUG("Bad block at 0x%"PRIx32, dir->pair[1]);
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	685b      	ldr	r3, [r3, #4]
 800d140:	4a26      	ldr	r2, [pc, #152]	; (800d1dc <lfs_dir_compact+0x5c4>)
 800d142:	9200      	str	r2, [sp, #0]
 800d144:	f240 7202 	movw	r2, #1794	; 0x702
 800d148:	4923      	ldr	r1, [pc, #140]	; (800d1d8 <lfs_dir_compact+0x5c0>)
 800d14a:	4825      	ldr	r0, [pc, #148]	; (800d1e0 <lfs_dir_compact+0x5c8>)
 800d14c:	f014 f934 	bl	80213b8 <iprintf>
        }

        // can't relocate superblock, filesystem is now frozen
        if (lfs_pair_cmp(dir->pair, (const lfs_block_t[2]){0, 1}) == 0) {
 800d150:	68bb      	ldr	r3, [r7, #8]
 800d152:	2200      	movs	r2, #0
 800d154:	617a      	str	r2, [r7, #20]
 800d156:	2201      	movs	r2, #1
 800d158:	61ba      	str	r2, [r7, #24]
 800d15a:	f107 0214 	add.w	r2, r7, #20
 800d15e:	4611      	mov	r1, r2
 800d160:	4618      	mov	r0, r3
 800d162:	f7fd fdb9 	bl	800acd8 <lfs_pair_cmp>
 800d166:	4603      	mov	r3, r0
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d10c      	bne.n	800d186 <lfs_dir_compact+0x56e>
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	685b      	ldr	r3, [r3, #4]
 800d170:	4a1a      	ldr	r2, [pc, #104]	; (800d1dc <lfs_dir_compact+0x5c4>)
 800d172:	9200      	str	r2, [sp, #0]
 800d174:	f240 7207 	movw	r2, #1799	; 0x707
 800d178:	4917      	ldr	r1, [pc, #92]	; (800d1d8 <lfs_dir_compact+0x5c0>)
 800d17a:	481a      	ldr	r0, [pc, #104]	; (800d1e4 <lfs_dir_compact+0x5cc>)
 800d17c:	f014 f91c 	bl	80213b8 <iprintf>
                    dir->pair[1]);
            return LFS_ERR_NOSPC;
 800d180:	f06f 031b 	mvn.w	r3, #27
 800d184:	e055      	b.n	800d232 <lfs_dir_compact+0x61a>
        }

        // relocate half of pair
        int err = lfs_alloc(lfs, &dir->pair[1]);
 800d186:	68bb      	ldr	r3, [r7, #8]
 800d188:	3304      	adds	r3, #4
 800d18a:	4619      	mov	r1, r3
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	f7fe f8d9 	bl	800b344 <lfs_alloc>
 800d192:	66b8      	str	r0, [r7, #104]	; 0x68
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
 800d194:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00c      	beq.n	800d1b4 <lfs_dir_compact+0x59c>
 800d19a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d19c:	f113 0f1c 	cmn.w	r3, #28
 800d1a0:	d106      	bne.n	800d1b0 <lfs_dir_compact+0x598>
 800d1a2:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800d1a6:	f083 0301 	eor.w	r3, r3, #1
 800d1aa:	b2db      	uxtb	r3, r3
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d001      	beq.n	800d1b4 <lfs_dir_compact+0x59c>
            return err;
 800d1b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d1b2:	e03e      	b.n	800d232 <lfs_dir_compact+0x61a>
        }

        tired = false;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
        continue;
 800d1ba:	bf00      	nop
    while (true) {
 800d1bc:	e642      	b.n	800ce44 <lfs_dir_compact+0x22c>
 800d1be:	bf00      	nop
 800d1c0:	0800cbef 	.word	0x0800cbef
 800d1c4:	400ffc00 	.word	0x400ffc00
 800d1c8:	000ffc08 	.word	0x000ffc08
 800d1cc:	7ffffc0c 	.word	0x7ffffc0c
 800d1d0:	080230e4 	.word	0x080230e4
 800d1d4:	08026e78 	.word	0x08026e78
 800d1d8:	08022f58 	.word	0x08022f58
 800d1dc:	08023064 	.word	0x08023064
 800d1e0:	0802310c 	.word	0x0802310c
 800d1e4:	08023130 	.word	0x08023130
        break;
 800d1e8:	bf00      	nop
    }

    if (relocated) {
 800d1ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d01e      	beq.n	800d230 <lfs_dir_compact+0x618>
        // update references if we relocated
        LFS_DEBUG("Relocating {0x%"PRIx32", 0x%"PRIx32"} "
 800d1f2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800d1f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1f6:	68ba      	ldr	r2, [r7, #8]
 800d1f8:	6812      	ldr	r2, [r2, #0]
 800d1fa:	68b9      	ldr	r1, [r7, #8]
 800d1fc:	6849      	ldr	r1, [r1, #4]
 800d1fe:	4c0f      	ldr	r4, [pc, #60]	; (800d23c <lfs_dir_compact+0x624>)
 800d200:	9403      	str	r4, [sp, #12]
 800d202:	9102      	str	r1, [sp, #8]
 800d204:	9201      	str	r2, [sp, #4]
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	4603      	mov	r3, r0
 800d20a:	f44f 62e3 	mov.w	r2, #1816	; 0x718
 800d20e:	490c      	ldr	r1, [pc, #48]	; (800d240 <lfs_dir_compact+0x628>)
 800d210:	480c      	ldr	r0, [pc, #48]	; (800d244 <lfs_dir_compact+0x62c>)
 800d212:	f014 f8d1 	bl	80213b8 <iprintf>
                    "-> {0x%"PRIx32", 0x%"PRIx32"}",
                oldpair[0], oldpair[1], dir->pair[0], dir->pair[1]);
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
 800d216:	68ba      	ldr	r2, [r7, #8]
 800d218:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800d21c:	4619      	mov	r1, r3
 800d21e:	68f8      	ldr	r0, [r7, #12]
 800d220:	f002 fc1a 	bl	800fa58 <lfs_fs_relocate>
 800d224:	66f8      	str	r0, [r7, #108]	; 0x6c
        if (err) {
 800d226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d001      	beq.n	800d230 <lfs_dir_compact+0x618>
            return err;
 800d22c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d22e:	e000      	b.n	800d232 <lfs_dir_compact+0x61a>
        }
    }

    return 0;
 800d230:	2300      	movs	r3, #0
}
 800d232:	4618      	mov	r0, r3
 800d234:	378c      	adds	r7, #140	; 0x8c
 800d236:	46bd      	mov	sp, r7
 800d238:	bd90      	pop	{r4, r7, pc}
 800d23a:	bf00      	nop
 800d23c:	08023064 	.word	0x08023064
 800d240:	08022f58 	.word	0x08022f58
 800d244:	08023168 	.word	0x08023168

0800d248 <lfs_dir_commit>:
#endif

#ifndef LFS_READONLY
static int lfs_dir_commit(lfs_t *lfs, lfs_mdir_t *dir,
        const struct lfs_mattr *attrs, int attrcount) {
 800d248:	b5b0      	push	{r4, r5, r7, lr}
 800d24a:	b0b8      	sub	sp, #224	; 0xe0
 800d24c:	af0a      	add	r7, sp, #40	; 0x28
 800d24e:	60f8      	str	r0, [r7, #12]
 800d250:	60b9      	str	r1, [r7, #8]
 800d252:	607a      	str	r2, [r7, #4]
 800d254:	603b      	str	r3, [r7, #0]
    // check for any inline files that aren't RAM backed and
    // forcefully evict them, needed for filesystem consistency
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d25e:	e045      	b.n	800d2ec <lfs_dir_commit+0xa4>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800d260:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d264:	3308      	adds	r3, #8
 800d266:	68ba      	ldr	r2, [r7, #8]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d03a      	beq.n	800d2e2 <lfs_dir_commit+0x9a>
 800d26c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d270:	3308      	adds	r3, #8
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	4611      	mov	r1, r2
 800d276:	4618      	mov	r0, r3
 800d278:	f7fd fd2e 	bl	800acd8 <lfs_pair_cmp>
 800d27c:	4603      	mov	r3, r0
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d12f      	bne.n	800d2e2 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800d282:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d286:	799b      	ldrb	r3, [r3, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d12a      	bne.n	800d2e2 <lfs_dir_commit+0x9a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800d28c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d296:	2b00      	cmp	r3, #0
 800d298:	d023      	beq.n	800d2e2 <lfs_dir_commit+0x9a>
                f->ctz.size > lfs->cfg->cache_size) {
 800d29a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
 800d2a6:	429a      	cmp	r2, r3
 800d2a8:	d91b      	bls.n	800d2e2 <lfs_dir_commit+0x9a>
            int err = lfs_file_outline(lfs, f);
 800d2aa:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f001 f9be 	bl	800e630 <lfs_file_outline>
 800d2b4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800d2b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d002      	beq.n	800d2c6 <lfs_dir_commit+0x7e>
                return err;
 800d2c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2c4:	e36e      	b.n	800d9a4 <lfs_dir_commit+0x75c>
            }

            err = lfs_file_flush(lfs, f);
 800d2c6:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800d2ca:	68f8      	ldr	r0, [r7, #12]
 800d2cc:	f001 f9d2 	bl	800e674 <lfs_file_flush>
 800d2d0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
            if (err) {
 800d2d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <lfs_dir_commit+0x9a>
                return err;
 800d2dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2e0:	e360      	b.n	800d9a4 <lfs_dir_commit+0x75c>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800d2e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d2ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d1b5      	bne.n	800d260 <lfs_dir_commit+0x18>
            }
        }
    }

    // calculate changes to the directory
    lfs_mdir_t olddir = *dir;
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d2fa:	461d      	mov	r5, r3
 800d2fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d300:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d304:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    bool hasdelete = false;
 800d308:	2300      	movs	r3, #0
 800d30a:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
    for (int i = 0; i < attrcount; i++) {
 800d30e:	2300      	movs	r3, #0
 800d310:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d314:	e075      	b.n	800d402 <lfs_dir_commit+0x1ba>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
 800d316:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d31a:	00db      	lsls	r3, r3, #3
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	4413      	add	r3, r2
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	4618      	mov	r0, r3
 800d324:	f7fd fd94 	bl	800ae50 <lfs_tag_type3>
 800d328:	4603      	mov	r3, r0
 800d32a:	461a      	mov	r2, r3
 800d32c:	f240 4301 	movw	r3, #1025	; 0x401
 800d330:	429a      	cmp	r2, r3
 800d332:	d106      	bne.n	800d342 <lfs_dir_commit+0xfa>
            dir->count += 1;
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	8a9b      	ldrh	r3, [r3, #20]
 800d338:	3301      	adds	r3, #1
 800d33a:	b29a      	uxth	r2, r3
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	829a      	strh	r2, [r3, #20]
 800d340:	e05a      	b.n	800d3f8 <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
 800d342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d346:	00db      	lsls	r3, r3, #3
 800d348:	687a      	ldr	r2, [r7, #4]
 800d34a:	4413      	add	r3, r2
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4618      	mov	r0, r3
 800d350:	f7fd fd7e 	bl	800ae50 <lfs_tag_type3>
 800d354:	4603      	mov	r3, r0
 800d356:	461a      	mov	r2, r3
 800d358:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800d35c:	429a      	cmp	r2, r3
 800d35e:	d114      	bne.n	800d38a <lfs_dir_commit+0x142>
            LFS_ASSERT(dir->count > 0);
 800d360:	68bb      	ldr	r3, [r7, #8]
 800d362:	8a9b      	ldrh	r3, [r3, #20]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d106      	bne.n	800d376 <lfs_dir_commit+0x12e>
 800d368:	4bac      	ldr	r3, [pc, #688]	; (800d61c <lfs_dir_commit+0x3d4>)
 800d36a:	4aad      	ldr	r2, [pc, #692]	; (800d620 <lfs_dir_commit+0x3d8>)
 800d36c:	f240 7141 	movw	r1, #1857	; 0x741
 800d370:	48ac      	ldr	r0, [pc, #688]	; (800d624 <lfs_dir_commit+0x3dc>)
 800d372:	f013 fdcb 	bl	8020f0c <__assert_func>
            dir->count -= 1;
 800d376:	68bb      	ldr	r3, [r7, #8]
 800d378:	8a9b      	ldrh	r3, [r3, #20]
 800d37a:	3b01      	subs	r3, #1
 800d37c:	b29a      	uxth	r2, r3
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	829a      	strh	r2, [r3, #20]
            hasdelete = true;
 800d382:	2301      	movs	r3, #1
 800d384:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
 800d388:	e036      	b.n	800d3f8 <lfs_dir_commit+0x1b0>
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
 800d38a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d38e:	00db      	lsls	r3, r3, #3
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	4413      	add	r3, r2
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4618      	mov	r0, r3
 800d398:	f7fd fd4a 	bl	800ae30 <lfs_tag_type1>
 800d39c:	4603      	mov	r3, r0
 800d39e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d3a2:	d129      	bne.n	800d3f8 <lfs_dir_commit+0x1b0>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
 800d3a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3a8:	00db      	lsls	r3, r3, #3
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	619a      	str	r2, [r3, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
 800d3b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3ba:	00db      	lsls	r3, r3, #3
 800d3bc:	687a      	ldr	r2, [r7, #4]
 800d3be:	4413      	add	r3, r2
 800d3c0:	685b      	ldr	r3, [r3, #4]
 800d3c2:	685a      	ldr	r2, [r3, #4]
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	61da      	str	r2, [r3, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
 800d3c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3cc:	00db      	lsls	r3, r3, #3
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	4413      	add	r3, r2
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fd fd4b 	bl	800ae70 <lfs_tag_chunk>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	f003 0301 	and.w	r3, r3, #1
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	bf14      	ite	ne
 800d3e4:	2301      	movne	r3, #1
 800d3e6:	2300      	moveq	r3, #0
 800d3e8:	b2da      	uxtb	r2, r3
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	75da      	strb	r2, [r3, #23]
            lfs_pair_fromle32(dir->tail);
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	3318      	adds	r3, #24
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f7fd fcc7 	bl	800ad86 <lfs_pair_fromle32>
    for (int i = 0; i < attrcount; i++) {
 800d3f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d402:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800d406:	683b      	ldr	r3, [r7, #0]
 800d408:	429a      	cmp	r2, r3
 800d40a:	db84      	blt.n	800d316 <lfs_dir_commit+0xce>
        }
    }

    // should we actually drop the directory block?
    if (hasdelete && dir->count == 0) {
 800d40c:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800d410:	2b00      	cmp	r3, #0
 800d412:	d045      	beq.n	800d4a0 <lfs_dir_commit+0x258>
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	8a9b      	ldrh	r3, [r3, #20]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d141      	bne.n	800d4a0 <lfs_dir_commit+0x258>
        lfs_mdir_t pdir;
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	f107 0214 	add.w	r2, r7, #20
 800d422:	4619      	mov	r1, r3
 800d424:	68f8      	ldr	r0, [r7, #12]
 800d426:	f002 fa37 	bl	800f898 <lfs_fs_pred>
 800d42a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if (err && err != LFS_ERR_NOENT) {
 800d42e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d432:	2b00      	cmp	r3, #0
 800d434:	d011      	beq.n	800d45a <lfs_dir_commit+0x212>
 800d436:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d43a:	f113 0f02 	cmn.w	r3, #2
 800d43e:	d00c      	beq.n	800d45a <lfs_dir_commit+0x212>
            *dir = olddir;
 800d440:	68bb      	ldr	r3, [r7, #8]
 800d442:	461d      	mov	r5, r3
 800d444:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d44a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d44c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d450:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800d454:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d458:	e2a4      	b.n	800d9a4 <lfs_dir_commit+0x75c>
        }

        if (err != LFS_ERR_NOENT && pdir.split) {
 800d45a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d45e:	f113 0f02 	cmn.w	r3, #2
 800d462:	d01d      	beq.n	800d4a0 <lfs_dir_commit+0x258>
 800d464:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d019      	beq.n	800d4a0 <lfs_dir_commit+0x258>
            err = lfs_dir_drop(lfs, &pdir, dir);
 800d46c:	f107 0314 	add.w	r3, r7, #20
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	4619      	mov	r1, r3
 800d474:	68f8      	ldr	r0, [r7, #12]
 800d476:	f7ff fb11 	bl	800ca9c <lfs_dir_drop>
 800d47a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
            if (err) {
 800d47e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d482:	2b00      	cmp	r3, #0
 800d484:	d00c      	beq.n	800d4a0 <lfs_dir_commit+0x258>
                *dir = olddir;
 800d486:	68bb      	ldr	r3, [r7, #8]
 800d488:	461d      	mov	r5, r3
 800d48a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d48e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d490:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d492:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d496:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800d49a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d49e:	e281      	b.n	800d9a4 <lfs_dir_commit+0x75c>
            }
        }
    }

    if (dir->erased || dir->count >= 0xff) {
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	7d9b      	ldrb	r3, [r3, #22]
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d104      	bne.n	800d4b2 <lfs_dir_commit+0x26a>
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	8a9b      	ldrh	r3, [r3, #20]
 800d4ac:	2bfe      	cmp	r3, #254	; 0xfe
 800d4ae:	f240 8130 	bls.w	800d712 <lfs_dir_commit+0x4ca>
        // try to commit
        struct lfs_commit commit = {
            .block = dir->pair[0],
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	681b      	ldr	r3, [r3, #0]
        struct lfs_commit commit = {
 800d4b6:	657b      	str	r3, [r7, #84]	; 0x54
            .off = dir->off,
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800d4bc:	65bb      	str	r3, [r7, #88]	; 0x58
            .ptag = dir->etag,
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	691b      	ldr	r3, [r3, #16]
        struct lfs_commit commit = {
 800d4c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d4c8:	663b      	str	r3, [r7, #96]	; 0x60
            .crc = 0xffffffff,

            .begin = dir->off,
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	68db      	ldr	r3, [r3, #12]
        struct lfs_commit commit = {
 800d4ce:	667b      	str	r3, [r7, #100]	; 0x64
            .end = (lfs->cfg->metadata_max ?
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                lfs->cfg->metadata_max : lfs->cfg->block_size) - 8,
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d004      	beq.n	800d4e4 <lfs_dir_commit+0x29c>
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4e0:	3b08      	subs	r3, #8
 800d4e2:	e003      	b.n	800d4ec <lfs_dir_commit+0x2a4>
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ea:	3b08      	subs	r3, #8
        struct lfs_commit commit = {
 800d4ec:	66bb      	str	r3, [r7, #104]	; 0x68
        };

        // traverse attrs that need to be written out
        lfs_pair_tole32(dir->tail);
 800d4ee:	68bb      	ldr	r3, [r7, #8]
 800d4f0:	3318      	adds	r3, #24
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	f7fd fc61 	bl	800adba <lfs_pair_tole32>
        int err = lfs_dir_traverse(lfs,
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	68da      	ldr	r2, [r3, #12]
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	6919      	ldr	r1, [r3, #16]
                dir, dir->off, dir->etag, attrs, attrcount,
                0, 0, 0, 0, 0,
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d504:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d508:	653b      	str	r3, [r7, #80]	; 0x50
        int err = lfs_dir_traverse(lfs,
 800d50a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800d50e:	9308      	str	r3, [sp, #32]
 800d510:	4b45      	ldr	r3, [pc, #276]	; (800d628 <lfs_dir_commit+0x3e0>)
 800d512:	9307      	str	r3, [sp, #28]
 800d514:	2300      	movs	r3, #0
 800d516:	9306      	str	r3, [sp, #24]
 800d518:	2300      	movs	r3, #0
 800d51a:	9305      	str	r3, [sp, #20]
 800d51c:	2300      	movs	r3, #0
 800d51e:	9304      	str	r3, [sp, #16]
 800d520:	2300      	movs	r3, #0
 800d522:	9303      	str	r3, [sp, #12]
 800d524:	2300      	movs	r3, #0
 800d526:	9302      	str	r3, [sp, #8]
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	9301      	str	r3, [sp, #4]
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	9300      	str	r3, [sp, #0]
 800d530:	460b      	mov	r3, r1
 800d532:	68b9      	ldr	r1, [r7, #8]
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f7fe f9ef 	bl	800b918 <lfs_dir_traverse>
 800d53a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    lfs, &commit});
        lfs_pair_fromle32(dir->tail);
 800d53e:	68bb      	ldr	r3, [r7, #8]
 800d540:	3318      	adds	r3, #24
 800d542:	4618      	mov	r0, r3
 800d544:	f7fd fc1f 	bl	800ad86 <lfs_pair_fromle32>
        if (err) {
 800d548:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d018      	beq.n	800d582 <lfs_dir_commit+0x33a>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800d550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d554:	f113 0f1c 	cmn.w	r3, #28
 800d558:	f000 80dd 	beq.w	800d716 <lfs_dir_commit+0x4ce>
 800d55c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d560:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d564:	f000 80d7 	beq.w	800d716 <lfs_dir_commit+0x4ce>
                goto compact;
            }
            *dir = olddir;
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	461d      	mov	r5, r3
 800d56c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d574:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d578:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800d57c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d580:	e210      	b.n	800d9a4 <lfs_dir_commit+0x75c>
        }

        // commit any global diffs if we have any
        lfs_gstate_t delta = {0};
 800d582:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d586:	2200      	movs	r2, #0
 800d588:	601a      	str	r2, [r3, #0]
 800d58a:	605a      	str	r2, [r3, #4]
 800d58c:	609a      	str	r2, [r3, #8]
        lfs_gstate_xor(&delta, &lfs->gstate);
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800d594:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d598:	4611      	mov	r1, r2
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fd fcb3 	bl	800af06 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdisk);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800d5a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d5aa:	4611      	mov	r1, r2
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f7fd fcaa 	bl	800af06 <lfs_gstate_xor>
        lfs_gstate_xor(&delta, &lfs->gdelta);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800d5b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d5bc:	4611      	mov	r1, r2
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f7fd fca1 	bl	800af06 <lfs_gstate_xor>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
 800d5c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d5c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800d5ca:	f023 0303 	bic.w	r3, r3, #3
 800d5ce:	643b      	str	r3, [r7, #64]	; 0x40
        if (!lfs_gstate_iszero(&delta)) {
 800d5d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f7fd fcbb 	bl	800af50 <lfs_gstate_iszero>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	f083 0301 	eor.w	r3, r3, #1
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d04c      	beq.n	800d680 <lfs_dir_commit+0x438>
            err = lfs_dir_getgstate(lfs, dir, &delta);
 800d5e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d5ea:	461a      	mov	r2, r3
 800d5ec:	68b9      	ldr	r1, [r7, #8]
 800d5ee:	68f8      	ldr	r0, [r7, #12]
 800d5f0:	f7fe fe72 	bl	800c2d8 <lfs_dir_getgstate>
 800d5f4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
            if (err) {
 800d5f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d015      	beq.n	800d62c <lfs_dir_commit+0x3e4>
                *dir = olddir;
 800d600:	68bb      	ldr	r3, [r7, #8]
 800d602:	461d      	mov	r5, r3
 800d604:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d608:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d60a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d60c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d610:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800d614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d618:	e1c4      	b.n	800d9a4 <lfs_dir_commit+0x75c>
 800d61a:	bf00      	nop
 800d61c:	080231a4 	.word	0x080231a4
 800d620:	08026e88 	.word	0x08026e88
 800d624:	08022f58 	.word	0x08022f58
 800d628:	0800cbef 	.word	0x0800cbef
            }

            lfs_gstate_tole32(&delta);
 800d62c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d630:	4618      	mov	r0, r3
 800d632:	f7fd fd1f 	bl	800b074 <lfs_gstate_tole32>
            err = lfs_dir_commitattr(lfs, &commit,
 800d636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800d63a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800d63e:	4aba      	ldr	r2, [pc, #744]	; (800d928 <lfs_dir_commit+0x6e0>)
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f7fe fff5 	bl	800c630 <lfs_dir_commitattr>
 800d646:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
                    LFS_MKTAG(LFS_TYPE_MOVESTATE, 0x3ff,
                        sizeof(delta)), &delta);
            if (err) {
 800d64a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d016      	beq.n	800d680 <lfs_dir_commit+0x438>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800d652:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d656:	f113 0f1c 	cmn.w	r3, #28
 800d65a:	d05e      	beq.n	800d71a <lfs_dir_commit+0x4d2>
 800d65c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d660:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d664:	d059      	beq.n	800d71a <lfs_dir_commit+0x4d2>
                    goto compact;
                }
                *dir = olddir;
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	461d      	mov	r5, r3
 800d66a:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d66e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d672:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d676:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
 800d67a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d67e:	e191      	b.n	800d9a4 <lfs_dir_commit+0x75c>
            }
        }

        // finalize commit with the crc
        err = lfs_dir_commitcrc(lfs, &commit);
 800d680:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800d684:	4619      	mov	r1, r3
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f7ff f852 	bl	800c730 <lfs_dir_commitcrc>
 800d68c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
        if (err) {
 800d690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d694:	2b00      	cmp	r3, #0
 800d696:	d016      	beq.n	800d6c6 <lfs_dir_commit+0x47e>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
 800d698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d69c:	f113 0f1c 	cmn.w	r3, #28
 800d6a0:	d03d      	beq.n	800d71e <lfs_dir_commit+0x4d6>
 800d6a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6a6:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800d6aa:	d038      	beq.n	800d71e <lfs_dir_commit+0x4d6>
                goto compact;
            }
            *dir = olddir;
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	461d      	mov	r5, r3
 800d6b0:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d6b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d6b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d6bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800d6c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6c4:	e16e      	b.n	800d9a4 <lfs_dir_commit+0x75c>
        }

        // successful commit, update dir
        LFS_ASSERT(commit.off % lfs->cfg->prog_size == 0);
 800d6c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6c8:	68fa      	ldr	r2, [r7, #12]
 800d6ca:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d6cc:	6a12      	ldr	r2, [r2, #32]
 800d6ce:	fbb3 f1f2 	udiv	r1, r3, r2
 800d6d2:	fb01 f202 	mul.w	r2, r1, r2
 800d6d6:	1a9b      	subs	r3, r3, r2
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d006      	beq.n	800d6ea <lfs_dir_commit+0x4a2>
 800d6dc:	4b93      	ldr	r3, [pc, #588]	; (800d92c <lfs_dir_commit+0x6e4>)
 800d6de:	4a94      	ldr	r2, [pc, #592]	; (800d930 <lfs_dir_commit+0x6e8>)
 800d6e0:	f44f 61f4 	mov.w	r1, #1952	; 0x7a0
 800d6e4:	4893      	ldr	r0, [pc, #588]	; (800d934 <lfs_dir_commit+0x6ec>)
 800d6e6:	f013 fc11 	bl	8020f0c <__assert_func>
        dir->off = commit.off;
 800d6ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	60da      	str	r2, [r3, #12]
        dir->etag = commit.ptag;
 800d6f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d6f2:	68bb      	ldr	r3, [r7, #8]
 800d6f4:	611a      	str	r2, [r3, #16]
        // and update gstate
        lfs->gdisk = lfs->gstate;
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	333c      	adds	r3, #60	; 0x3c
 800d6fc:	3230      	adds	r2, #48	; 0x30
 800d6fe:	ca07      	ldmia	r2, {r0, r1, r2}
 800d700:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	3348      	adds	r3, #72	; 0x48
 800d708:	2200      	movs	r2, #0
 800d70a:	601a      	str	r2, [r3, #0]
 800d70c:	605a      	str	r2, [r3, #4]
 800d70e:	609a      	str	r2, [r3, #8]
    if (dir->erased || dir->count >= 0xff) {
 800d710:	e02c      	b.n	800d76c <lfs_dir_commit+0x524>
    } else {
compact:
 800d712:	bf00      	nop
 800d714:	e004      	b.n	800d720 <lfs_dir_commit+0x4d8>
                goto compact;
 800d716:	bf00      	nop
 800d718:	e002      	b.n	800d720 <lfs_dir_commit+0x4d8>
                    goto compact;
 800d71a:	bf00      	nop
 800d71c:	e000      	b.n	800d720 <lfs_dir_commit+0x4d8>
                goto compact;
 800d71e:	bf00      	nop
        // fall back to compaction
        lfs_cache_drop(lfs, &lfs->pcache);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	3310      	adds	r3, #16
 800d724:	4619      	mov	r1, r3
 800d726:	68f8      	ldr	r0, [r7, #12]
 800d728:	f7fc ff5e 	bl	800a5e8 <lfs_cache_drop>

        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
 800d72c:	68bb      	ldr	r3, [r7, #8]
 800d72e:	8a9b      	ldrh	r3, [r3, #20]
 800d730:	9302      	str	r3, [sp, #8]
 800d732:	2300      	movs	r3, #0
 800d734:	9301      	str	r3, [sp, #4]
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	9300      	str	r3, [sp, #0]
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	68b9      	ldr	r1, [r7, #8]
 800d740:	68f8      	ldr	r0, [r7, #12]
 800d742:	f7ff fa69 	bl	800cc18 <lfs_dir_compact>
 800d746:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
                dir, 0, dir->count);
        if (err) {
 800d74a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d00c      	beq.n	800d76c <lfs_dir_commit+0x524>
            *dir = olddir;
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	461d      	mov	r5, r3
 800d756:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800d75a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d75c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800d75e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800d762:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
 800d766:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d76a:	e11b      	b.n	800d9a4 <lfs_dir_commit+0x75c>
    //
    // note we have to make two passes since the mdir passed to
    // lfs_dir_commit could also be in this list, and even then
    // we need to copy the pair so they don't get clobbered if we refetch
    // our mdir.
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d770:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d774:	e0c1      	b.n	800d8fa <lfs_dir_commit+0x6b2>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800d776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d77a:	3308      	adds	r3, #8
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	429a      	cmp	r2, r3
 800d780:	f000 80b6 	beq.w	800d8f0 <lfs_dir_commit+0x6a8>
 800d784:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d788:	3308      	adds	r3, #8
 800d78a:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800d78e:	4611      	mov	r1, r2
 800d790:	4618      	mov	r0, r3
 800d792:	f7fd faa1 	bl	800acd8 <lfs_pair_cmp>
 800d796:	4603      	mov	r3, r0
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f040 80a9 	bne.w	800d8f0 <lfs_dir_commit+0x6a8>
            d->m = *dir;
 800d79e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d7a2:	68ba      	ldr	r2, [r7, #8]
 800d7a4:	f103 0408 	add.w	r4, r3, #8
 800d7a8:	4615      	mov	r5, r2
 800d7aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d7ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7ae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800d7b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d7bc:	e092      	b.n	800d8e4 <lfs_dir_commit+0x69c>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800d7be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d7c2:	00db      	lsls	r3, r3, #3
 800d7c4:	687a      	ldr	r2, [r7, #4]
 800d7c6:	4413      	add	r3, r2
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7fd fb40 	bl	800ae50 <lfs_tag_type3>
 800d7d0:	4603      	mov	r3, r0
 800d7d2:	461a      	mov	r2, r3
 800d7d4:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d119      	bne.n	800d810 <lfs_dir_commit+0x5c8>
                        d->id == lfs_tag_id(attrs[i].tag)) {
 800d7dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d7e0:	889c      	ldrh	r4, [r3, #4]
 800d7e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d7e6:	00db      	lsls	r3, r3, #3
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f7fd fb58 	bl	800aea4 <lfs_tag_id>
 800d7f4:	4603      	mov	r3, r0
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800d7f6:	429c      	cmp	r4, r3
 800d7f8:	d10a      	bne.n	800d810 <lfs_dir_commit+0x5c8>
                    d->m.pair[0] = LFS_BLOCK_NULL;
 800d7fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d7fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d802:	609a      	str	r2, [r3, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
 800d804:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d80c:	60da      	str	r2, [r3, #12]
 800d80e:	e064      	b.n	800d8da <lfs_dir_commit+0x692>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800d810:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d814:	00db      	lsls	r3, r3, #3
 800d816:	687a      	ldr	r2, [r7, #4]
 800d818:	4413      	add	r3, r2
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fd fb17 	bl	800ae50 <lfs_tag_type3>
 800d822:	4603      	mov	r3, r0
 800d824:	461a      	mov	r2, r3
 800d826:	f240 43ff 	movw	r3, #1279	; 0x4ff
 800d82a:	429a      	cmp	r2, r3
 800d82c:	d123      	bne.n	800d876 <lfs_dir_commit+0x62e>
                        d->id > lfs_tag_id(attrs[i].tag)) {
 800d82e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d832:	889c      	ldrh	r4, [r3, #4]
 800d834:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d838:	00db      	lsls	r3, r3, #3
 800d83a:	687a      	ldr	r2, [r7, #4]
 800d83c:	4413      	add	r3, r2
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4618      	mov	r0, r3
 800d842:	f7fd fb2f 	bl	800aea4 <lfs_tag_id>
 800d846:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
 800d848:	429c      	cmp	r4, r3
 800d84a:	d914      	bls.n	800d876 <lfs_dir_commit+0x62e>
                    d->id -= 1;
 800d84c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d850:	889b      	ldrh	r3, [r3, #4]
 800d852:	3b01      	subs	r3, #1
 800d854:	b29a      	uxth	r2, r3
 800d856:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d85a:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800d85c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d860:	799b      	ldrb	r3, [r3, #6]
 800d862:	2b02      	cmp	r3, #2
 800d864:	d139      	bne.n	800d8da <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos -= 1;
 800d866:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d86a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d86c:	1e5a      	subs	r2, r3, #1
 800d86e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d872:	629a      	str	r2, [r3, #40]	; 0x28
                    if (d->type == LFS_TYPE_DIR) {
 800d874:	e031      	b.n	800d8da <lfs_dir_commit+0x692>
                    }
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800d876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d87a:	00db      	lsls	r3, r3, #3
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	4413      	add	r3, r2
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	4618      	mov	r0, r3
 800d884:	f7fd fae4 	bl	800ae50 <lfs_tag_type3>
 800d888:	4603      	mov	r3, r0
 800d88a:	461a      	mov	r2, r3
 800d88c:	f240 4301 	movw	r3, #1025	; 0x401
 800d890:	429a      	cmp	r2, r3
 800d892:	d122      	bne.n	800d8da <lfs_dir_commit+0x692>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
 800d894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d898:	889c      	ldrh	r4, [r3, #4]
 800d89a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d89e:	00db      	lsls	r3, r3, #3
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	4413      	add	r3, r2
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	f7fd fafc 	bl	800aea4 <lfs_tag_id>
 800d8ac:	4603      	mov	r3, r0
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
 800d8ae:	429c      	cmp	r4, r3
 800d8b0:	d313      	bcc.n	800d8da <lfs_dir_commit+0x692>
                    d->id += 1;
 800d8b2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8b6:	889b      	ldrh	r3, [r3, #4]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8c0:	809a      	strh	r2, [r3, #4]
                    if (d->type == LFS_TYPE_DIR) {
 800d8c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8c6:	799b      	ldrb	r3, [r3, #6]
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d106      	bne.n	800d8da <lfs_dir_commit+0x692>
                        ((lfs_dir_t*)d)->pos += 1;
 800d8cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8d2:	1c5a      	adds	r2, r3, #1
 800d8d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8d8:	629a      	str	r2, [r3, #40]	; 0x28
            for (int i = 0; i < attrcount; i++) {
 800d8da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d8de:	3301      	adds	r3, #1
 800d8e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800d8e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	429a      	cmp	r2, r3
 800d8ec:	f6ff af67 	blt.w	800d7be <lfs_dir_commit+0x576>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800d8f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800d8fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	f47f af39 	bne.w	800d776 <lfs_dir_commit+0x52e>
                }
            }
        }
    }

    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d908:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d90c:	e045      	b.n	800d99a <lfs_dir_commit+0x752>
        if (lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
 800d90e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d912:	3308      	adds	r3, #8
 800d914:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800d918:	4611      	mov	r1, r2
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fd f9dc 	bl	800acd8 <lfs_pair_cmp>
 800d920:	4603      	mov	r3, r0
 800d922:	2b00      	cmp	r3, #0
 800d924:	d134      	bne.n	800d990 <lfs_dir_commit+0x748>
            while (d->id >= d->m.count && d->m.split) {
 800d926:	e026      	b.n	800d976 <lfs_dir_commit+0x72e>
 800d928:	7ffffc0c 	.word	0x7ffffc0c
 800d92c:	080230e4 	.word	0x080230e4
 800d930:	08026e88 	.word	0x08026e88
 800d934:	08022f58 	.word	0x08022f58
                // we split and id is on tail now
                d->id -= d->m.count;
 800d938:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d93c:	889a      	ldrh	r2, [r3, #4]
 800d93e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d942:	8b9b      	ldrh	r3, [r3, #28]
 800d944:	1ad3      	subs	r3, r2, r3
 800d946:	b29a      	uxth	r2, r3
 800d948:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d94c:	809a      	strh	r2, [r3, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
 800d94e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d952:	f103 0108 	add.w	r1, r3, #8
 800d956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d95a:	3320      	adds	r3, #32
 800d95c:	461a      	mov	r2, r3
 800d95e:	68f8      	ldr	r0, [r7, #12]
 800d960:	f7fe fc9e 	bl	800c2a0 <lfs_dir_fetch>
 800d964:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
                if (err) {
 800d968:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d002      	beq.n	800d976 <lfs_dir_commit+0x72e>
                    return err;
 800d970:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d974:	e016      	b.n	800d9a4 <lfs_dir_commit+0x75c>
            while (d->id >= d->m.count && d->m.split) {
 800d976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d97a:	889a      	ldrh	r2, [r3, #4]
 800d97c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d980:	8b9b      	ldrh	r3, [r3, #28]
 800d982:	429a      	cmp	r2, r3
 800d984:	d304      	bcc.n	800d990 <lfs_dir_commit+0x748>
 800d986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d98a:	7fdb      	ldrb	r3, [r3, #31]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d1d3      	bne.n	800d938 <lfs_dir_commit+0x6f0>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800d990:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800d99a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d1b5      	bne.n	800d90e <lfs_dir_commit+0x6c6>
                }
            }
        }
    }

    return 0;
 800d9a2:	2300      	movs	r3, #0
}
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	37b8      	adds	r7, #184	; 0xb8
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	bdb0      	pop	{r4, r5, r7, pc}

0800d9ac <lfs_rawmkdir>:
#endif


/// Top level directory operations ///
#ifndef LFS_READONLY
static int lfs_rawmkdir(lfs_t *lfs, const char *path) {
 800d9ac:	b5b0      	push	{r4, r5, r7, lr}
 800d9ae:	b0b8      	sub	sp, #224	; 0xe0
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
    // deorphan if we haven't yet, needed at most once after poweron
    int err = lfs_fs_forceconsistency(lfs);
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f002 fb98 	bl	80100ec <lfs_fs_forceconsistency>
 800d9bc:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800d9c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d002      	beq.n	800d9ce <lfs_rawmkdir+0x22>
        return err;
 800d9c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9cc:	e128      	b.n	800dc20 <lfs_rawmkdir+0x274>
    }

    struct lfs_mlist cwd;
    cwd.next = lfs->mlist;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    uint16_t id;
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
 800d9d6:	f107 00ae 	add.w	r0, r7, #174	; 0xae
 800d9da:	463a      	mov	r2, r7
 800d9dc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800d9e0:	f103 0108 	add.w	r1, r3, #8
 800d9e4:	4603      	mov	r3, r0
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f7fe fcf2 	bl	800c3d0 <lfs_dir_find>
 800d9ec:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
 800d9f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d9f4:	f113 0f02 	cmn.w	r3, #2
 800d9f8:	d105      	bne.n	800da06 <lfs_rawmkdir+0x5a>
 800d9fa:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800d9fe:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800da02:	4293      	cmp	r3, r2
 800da04:	d109      	bne.n	800da1a <lfs_rawmkdir+0x6e>
        return (err < 0) ? err : LFS_ERR_EXIST;
 800da06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	da02      	bge.n	800da14 <lfs_rawmkdir+0x68>
 800da0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da12:	e105      	b.n	800dc20 <lfs_rawmkdir+0x274>
 800da14:	f06f 0310 	mvn.w	r3, #16
 800da18:	e102      	b.n	800dc20 <lfs_rawmkdir+0x274>
    }

    // check that name fits
    lfs_size_t nlen = strlen(path);
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	4618      	mov	r0, r3
 800da1e:	f7f2 fbd7 	bl	80001d0 <strlen>
 800da22:	f8c7 00d8 	str.w	r0, [r7, #216]	; 0xd8
    if (nlen > lfs->name_max) {
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da2a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800da2e:	429a      	cmp	r2, r3
 800da30:	d902      	bls.n	800da38 <lfs_rawmkdir+0x8c>
        return LFS_ERR_NAMETOOLONG;
 800da32:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800da36:	e0f3      	b.n	800dc20 <lfs_rawmkdir+0x274>
    }

    // build up new directory
    lfs_alloc_ack(lfs);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7fd fc63 	bl	800b304 <lfs_alloc_ack>
    lfs_mdir_t dir;
    err = lfs_dir_alloc(lfs, &dir);
 800da3e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800da42:	4619      	mov	r1, r3
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f7fe ffaf 	bl	800c9a8 <lfs_dir_alloc>
 800da4a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
    if (err) {
 800da4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da52:	2b00      	cmp	r3, #0
 800da54:	d002      	beq.n	800da5c <lfs_rawmkdir+0xb0>
        return err;
 800da56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da5a:	e0e1      	b.n	800dc20 <lfs_rawmkdir+0x274>
    }

    // find end of list
    lfs_mdir_t pred = cwd.m;
 800da5c:	f107 046c 	add.w	r4, r7, #108	; 0x6c
 800da60:	f107 05b8 	add.w	r5, r7, #184	; 0xb8
 800da64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800da66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800da68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800da6c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (pred.split) {
 800da70:	e012      	b.n	800da98 <lfs_rawmkdir+0xec>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
 800da72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800da76:	f103 0218 	add.w	r2, r3, #24
 800da7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800da7e:	4619      	mov	r1, r3
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f7fe fc0d 	bl	800c2a0 <lfs_dir_fetch>
 800da86:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800da8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d002      	beq.n	800da98 <lfs_rawmkdir+0xec>
            return err;
 800da92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800da96:	e0c3      	b.n	800dc20 <lfs_rawmkdir+0x274>
    while (pred.split) {
 800da98:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d1e8      	bne.n	800da72 <lfs_rawmkdir+0xc6>
        }
    }

    // setup dir
    lfs_pair_tole32(pred.tail);
 800daa0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800daa4:	3318      	adds	r3, #24
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fd f987 	bl	800adba <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
 800daac:	4b5e      	ldr	r3, [pc, #376]	; (800dc28 <lfs_rawmkdir+0x27c>)
 800daae:	667b      	str	r3, [r7, #100]	; 0x64
 800dab0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dab4:	3318      	adds	r3, #24
 800dab6:	66bb      	str	r3, [r7, #104]	; 0x68
 800dab8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800dabc:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800dac0:	2301      	movs	r3, #1
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f7ff fbc0 	bl	800d248 <lfs_dir_commit>
 800dac8:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pred.tail}));
    lfs_pair_fromle32(pred.tail);
 800dacc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800dad0:	3318      	adds	r3, #24
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fd f957 	bl	800ad86 <lfs_pair_fromle32>
    if (err) {
 800dad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d002      	beq.n	800dae6 <lfs_rawmkdir+0x13a>
        return err;
 800dae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dae4:	e09c      	b.n	800dc20 <lfs_rawmkdir+0x274>
    }

    // current block end of list?
    if (cwd.m.split) {
 800dae6:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800daea:	2b00      	cmp	r3, #0
 800daec:	d04c      	beq.n	800db88 <lfs_rawmkdir+0x1dc>
        // update tails, this creates a desync
        err = lfs_fs_preporphans(lfs, +1);
 800daee:	2101      	movs	r1, #1
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f002 f919 	bl	800fd28 <lfs_fs_preporphans>
 800daf6:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800dafa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d002      	beq.n	800db08 <lfs_rawmkdir+0x15c>
            return err;
 800db02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db06:	e08b      	b.n	800dc20 <lfs_rawmkdir+0x274>

        // it's possible our predecessor has to be relocated, and if
        // our parent is our predecessor's predecessor, this could have
        // caused our parent to go out of date, fortunately we can hook
        // ourselves into littlefs to catch this
        cwd.type = 0;
 800db08:	2300      	movs	r3, #0
 800db0a:	f887 30b6 	strb.w	r3, [r7, #182]	; 0xb6
        cwd.id = 0;
 800db0e:	2300      	movs	r3, #0
 800db10:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
        lfs->mlist = &cwd;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 800db1a:	629a      	str	r2, [r3, #40]	; 0x28

        lfs_pair_tole32(dir.pair);
 800db1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800db20:	4618      	mov	r0, r3
 800db22:	f7fd f94a 	bl	800adba <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
 800db26:	4b40      	ldr	r3, [pc, #256]	; (800dc28 <lfs_rawmkdir+0x27c>)
 800db28:	617b      	str	r3, [r7, #20]
 800db2a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800db2e:	61bb      	str	r3, [r7, #24]
 800db30:	f107 0214 	add.w	r2, r7, #20
 800db34:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800db38:	2301      	movs	r3, #1
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7ff fb84 	bl	800d248 <lfs_dir_commit>
 800db40:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
                {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
        lfs_pair_fromle32(dir.pair);
 800db44:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800db48:	4618      	mov	r0, r3
 800db4a:	f7fd f91c 	bl	800ad86 <lfs_pair_fromle32>
        if (err) {
 800db4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db52:	2b00      	cmp	r3, #0
 800db54:	d006      	beq.n	800db64 <lfs_rawmkdir+0x1b8>
            lfs->mlist = cwd.next;
 800db56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	629a      	str	r2, [r3, #40]	; 0x28
            return err;
 800db5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db62:	e05d      	b.n	800dc20 <lfs_rawmkdir+0x274>
        }

        lfs->mlist = cwd.next;
 800db64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	629a      	str	r2, [r3, #40]	; 0x28
        err = lfs_fs_preporphans(lfs, -1);
 800db6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f002 f8d9 	bl	800fd28 <lfs_fs_preporphans>
 800db76:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
        if (err) {
 800db7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d002      	beq.n	800db88 <lfs_rawmkdir+0x1dc>
            return err;
 800db82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800db86:	e04b      	b.n	800dc20 <lfs_rawmkdir+0x274>
        }
    }

    // now insert into our parent block
    lfs_pair_tole32(dir.pair);
 800db88:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7fd f914 	bl	800adba <lfs_pair_tole32>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
 800db92:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800db96:	029b      	lsls	r3, r3, #10
 800db98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800db9c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800dba2:	2300      	movs	r3, #0
 800dba4:	643b      	str	r3, [r7, #64]	; 0x40
 800dba6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800dbaa:	029a      	lsls	r2, r3, #10
 800dbac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800dbb0:	4313      	orrs	r3, r2
 800dbb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800dbb6:	647b      	str	r3, [r7, #68]	; 0x44
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	64bb      	str	r3, [r7, #72]	; 0x48
 800dbbc:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 800dbc0:	029b      	lsls	r3, r3, #10
 800dbc2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dbc6:	f043 0308 	orr.w	r3, r3, #8
 800dbca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dbcc:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dbd0:	653b      	str	r3, [r7, #80]	; 0x50
 800dbd2:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 800dbd6:	f083 0301 	eor.w	r3, r3, #1
 800dbda:	b2db      	uxtb	r3, r3
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d001      	beq.n	800dbe4 <lfs_rawmkdir+0x238>
 800dbe0:	4b11      	ldr	r3, [pc, #68]	; (800dc28 <lfs_rawmkdir+0x27c>)
 800dbe2:	e000      	b.n	800dbe6 <lfs_rawmkdir+0x23a>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	657b      	str	r3, [r7, #84]	; 0x54
 800dbe8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dbec:	65bb      	str	r3, [r7, #88]	; 0x58
 800dbee:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800dbf2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800dbf6:	f103 0108 	add.w	r1, r3, #8
 800dbfa:	2304      	movs	r3, #4
 800dbfc:	6878      	ldr	r0, [r7, #4]
 800dbfe:	f7ff fb23 	bl	800d248 <lfs_dir_commit>
 800dc02:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
            {LFS_MKTAG(LFS_TYPE_CREATE, id, 0), NULL},
            {LFS_MKTAG(LFS_TYPE_DIR, id, nlen), path},
            {LFS_MKTAG(LFS_TYPE_DIRSTRUCT, id, 8), dir.pair},
            {LFS_MKTAG_IF(!cwd.m.split,
                LFS_TYPE_SOFTTAIL, 0x3ff, 8), dir.pair}));
    lfs_pair_fromle32(dir.pair);
 800dc06:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fd f8bb 	bl	800ad86 <lfs_pair_fromle32>
    if (err) {
 800dc10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <lfs_rawmkdir+0x272>
        return err;
 800dc18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800dc1c:	e000      	b.n	800dc20 <lfs_rawmkdir+0x274>
    }

    return 0;
 800dc1e:	2300      	movs	r3, #0
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	37e0      	adds	r7, #224	; 0xe0
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bdb0      	pop	{r4, r5, r7, pc}
 800dc28:	600ffc08 	.word	0x600ffc08

0800dc2c <lfs_ctz_index>:
    return 0;
}


/// File index list operations ///
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
 800dc2c:	b590      	push	{r4, r7, lr}
 800dc2e:	b087      	sub	sp, #28
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	6039      	str	r1, [r7, #0]
    lfs_off_t size = *off;
 800dc36:	683b      	ldr	r3, [r7, #0]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	617b      	str	r3, [r7, #20]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc42:	3b08      	subs	r3, #8
 800dc44:	613b      	str	r3, [r7, #16]
    lfs_off_t i = size / b;
 800dc46:	697a      	ldr	r2, [r7, #20]
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc4e:	60fb      	str	r3, [r7, #12]
    if (i == 0) {
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d101      	bne.n	800dc5a <lfs_ctz_index+0x2e>
        return 0;
 800dc56:	2300      	movs	r3, #0
 800dc58:	e01c      	b.n	800dc94 <lfs_ctz_index+0x68>
    }

    i = (size - 4*(lfs_popc(i-1)+2)) / b;
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f7fc fc62 	bl	800a528 <lfs_popc>
 800dc64:	4603      	mov	r3, r0
 800dc66:	3302      	adds	r3, #2
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	697a      	ldr	r2, [r7, #20]
 800dc6c:	1ad2      	subs	r2, r2, r3
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc74:	60fb      	str	r3, [r7, #12]
    *off = size - b*i - 4*lfs_popc(i);
 800dc76:	693b      	ldr	r3, [r7, #16]
 800dc78:	68fa      	ldr	r2, [r7, #12]
 800dc7a:	fb02 f303 	mul.w	r3, r2, r3
 800dc7e:	697a      	ldr	r2, [r7, #20]
 800dc80:	1ad4      	subs	r4, r2, r3
 800dc82:	68f8      	ldr	r0, [r7, #12]
 800dc84:	f7fc fc50 	bl	800a528 <lfs_popc>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	1ae2      	subs	r2, r4, r3
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	601a      	str	r2, [r3, #0]
    return i;
 800dc92:	68fb      	ldr	r3, [r7, #12]
}
 800dc94:	4618      	mov	r0, r3
 800dc96:	371c      	adds	r7, #28
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	bd90      	pop	{r4, r7, pc}

0800dc9c <lfs_ctz_find>:

static int lfs_ctz_find(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
 800dc9c:	b590      	push	{r4, r7, lr}
 800dc9e:	b08f      	sub	sp, #60	; 0x3c
 800dca0:	af04      	add	r7, sp, #16
 800dca2:	60f8      	str	r0, [r7, #12]
 800dca4:	60b9      	str	r1, [r7, #8]
 800dca6:	607a      	str	r2, [r7, #4]
 800dca8:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800dcaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d108      	bne.n	800dcc2 <lfs_ctz_find+0x26>
        *block = LFS_BLOCK_NULL;
 800dcb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dcb2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dcb6:	601a      	str	r2, [r3, #0]
        *off = 0;
 800dcb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dcba:	2200      	movs	r2, #0
 800dcbc:	601a      	str	r2, [r3, #0]
        return 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	e053      	b.n	800dd6a <lfs_ctz_find+0xce>
    }

    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800dcc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc4:	3b01      	subs	r3, #1
 800dcc6:	617b      	str	r3, [r7, #20]
 800dcc8:	f107 0314 	add.w	r3, r7, #20
 800dccc:	4619      	mov	r1, r3
 800dcce:	68f8      	ldr	r0, [r7, #12]
 800dcd0:	f7ff ffac 	bl	800dc2c <lfs_ctz_index>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
 800dcd8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800dcdc:	4619      	mov	r1, r3
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f7ff ffa4 	bl	800dc2c <lfs_ctz_index>
 800dce4:	4603      	mov	r3, r0
 800dce6:	623b      	str	r3, [r7, #32]

    while (current > target) {
 800dce8:	e034      	b.n	800dd54 <lfs_ctz_find+0xb8>
        lfs_size_t skip = lfs_min(
                lfs_npw2(current-target+1) - 1,
 800dcea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dcec:	6a3b      	ldr	r3, [r7, #32]
 800dcee:	1ad3      	subs	r3, r2, r3
 800dcf0:	3301      	adds	r3, #1
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7fc fbf9 	bl	800a4ea <lfs_npw2>
 800dcf8:	4603      	mov	r3, r0
        lfs_size_t skip = lfs_min(
 800dcfa:	1e5c      	subs	r4, r3, #1
 800dcfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcfe:	f7fc fc04 	bl	800a50a <lfs_ctz>
 800dd02:	4603      	mov	r3, r0
 800dd04:	4619      	mov	r1, r3
 800dd06:	4620      	mov	r0, r4
 800dd08:	f7fc fbb8 	bl	800a47c <lfs_min>
 800dd0c:	61f8      	str	r0, [r7, #28]
                lfs_ctz(current));

        int err = lfs_bd_read(lfs,
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	69fa      	ldr	r2, [r7, #28]
 800dd12:	0092      	lsls	r2, r2, #2
 800dd14:	2104      	movs	r1, #4
 800dd16:	9103      	str	r1, [sp, #12]
 800dd18:	4639      	mov	r1, r7
 800dd1a:	9102      	str	r1, [sp, #8]
 800dd1c:	9201      	str	r2, [sp, #4]
 800dd1e:	9300      	str	r3, [sp, #0]
 800dd20:	2304      	movs	r3, #4
 800dd22:	687a      	ldr	r2, [r7, #4]
 800dd24:	68b9      	ldr	r1, [r7, #8]
 800dd26:	68f8      	ldr	r0, [r7, #12]
 800dd28:	f7fc fc84 	bl	800a634 <lfs_bd_read>
 800dd2c:	61b8      	str	r0, [r7, #24]
                pcache, rcache, sizeof(head),
                head, 4*skip, &head, sizeof(head));
        head = lfs_fromle32(head);
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fc fc13 	bl	800a55c <lfs_fromle32>
 800dd36:	4603      	mov	r3, r0
 800dd38:	603b      	str	r3, [r7, #0]
        if (err) {
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <lfs_ctz_find+0xa8>
            return err;
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	e012      	b.n	800dd6a <lfs_ctz_find+0xce>
        }

        current -= 1 << skip;
 800dd44:	2201      	movs	r2, #1
 800dd46:	69fb      	ldr	r3, [r7, #28]
 800dd48:	fa02 f303 	lsl.w	r3, r2, r3
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd50:	1a9b      	subs	r3, r3, r2
 800dd52:	627b      	str	r3, [r7, #36]	; 0x24
    while (current > target) {
 800dd54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd56:	6a3b      	ldr	r3, [r7, #32]
 800dd58:	429a      	cmp	r2, r3
 800dd5a:	d8c6      	bhi.n	800dcea <lfs_ctz_find+0x4e>
    }

    *block = head;
 800dd5c:	683a      	ldr	r2, [r7, #0]
 800dd5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd60:	601a      	str	r2, [r3, #0]
    *off = pos;
 800dd62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dd64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd66:	601a      	str	r2, [r3, #0]
    return 0;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	372c      	adds	r7, #44	; 0x2c
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd90      	pop	{r4, r7, pc}
	...

0800dd74 <lfs_ctz_extend>:

#ifndef LFS_READONLY
static int lfs_ctz_extend(lfs_t *lfs,
        lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        lfs_block_t *block, lfs_off_t *off) {
 800dd74:	b580      	push	{r7, lr}
 800dd76:	b092      	sub	sp, #72	; 0x48
 800dd78:	af04      	add	r7, sp, #16
 800dd7a:	60f8      	str	r0, [r7, #12]
 800dd7c:	60b9      	str	r1, [r7, #8]
 800dd7e:	607a      	str	r2, [r7, #4]
 800dd80:	603b      	str	r3, [r7, #0]
    while (true) {
        // go ahead and grab a block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800dd82:	f107 0320 	add.w	r3, r7, #32
 800dd86:	4619      	mov	r1, r3
 800dd88:	68f8      	ldr	r0, [r7, #12]
 800dd8a:	f7fd fadb 	bl	800b344 <lfs_alloc>
 800dd8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (err) {
 800dd90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <lfs_ctz_extend+0x26>
            return err;
 800dd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd98:	e0e9      	b.n	800df6e <lfs_ctz_extend+0x1fa>
        }

        {
            err = lfs_bd_erase(lfs, nblock);
 800dd9a:	6a3b      	ldr	r3, [r7, #32]
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	68f8      	ldr	r0, [r7, #12]
 800dda0:	f7fc ff3a 	bl	800ac18 <lfs_bd_erase>
 800dda4:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (err) {
 800dda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d006      	beq.n	800ddba <lfs_ctz_extend+0x46>
                if (err == LFS_ERR_CORRUPT) {
 800ddac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddae:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800ddb2:	f000 80cb 	beq.w	800df4c <lfs_ctz_extend+0x1d8>
                    goto relocate;
                }
                return err;
 800ddb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddb8:	e0d9      	b.n	800df6e <lfs_ctz_extend+0x1fa>
            }

            if (size == 0) {
 800ddba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d107      	bne.n	800ddd0 <lfs_ctz_extend+0x5c>
                *block = nblock;
 800ddc0:	6a3a      	ldr	r2, [r7, #32]
 800ddc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ddc4:	601a      	str	r2, [r3, #0]
                *off = 0;
 800ddc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ddc8:	2200      	movs	r2, #0
 800ddca:	601a      	str	r2, [r3, #0]
                return 0;
 800ddcc:	2300      	movs	r3, #0
 800ddce:	e0ce      	b.n	800df6e <lfs_ctz_extend+0x1fa>
            }

            lfs_size_t noff = size - 1;
 800ddd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddd2:	3b01      	subs	r3, #1
 800ddd4:	61fb      	str	r3, [r7, #28]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
 800ddd6:	f107 031c 	add.w	r3, r7, #28
 800ddda:	4619      	mov	r1, r3
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	f7ff ff25 	bl	800dc2c <lfs_ctz_index>
 800dde2:	4603      	mov	r3, r0
 800dde4:	62bb      	str	r3, [r7, #40]	; 0x28
            noff = noff + 1;
 800dde6:	69fb      	ldr	r3, [r7, #28]
 800dde8:	3301      	adds	r3, #1
 800ddea:	61fb      	str	r3, [r7, #28]

            // just copy out the last block if it is incomplete
            if (noff != lfs->cfg->block_size) {
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ddf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d044      	beq.n	800de82 <lfs_ctz_extend+0x10e>
                for (lfs_off_t i = 0; i < noff; i++) {
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	637b      	str	r3, [r7, #52]	; 0x34
 800ddfc:	e035      	b.n	800de6a <lfs_ctz_extend+0xf6>
                    uint8_t data;
                    err = lfs_bd_read(lfs,
 800ddfe:	69fa      	ldr	r2, [r7, #28]
 800de00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de02:	1ad2      	subs	r2, r2, r3
 800de04:	2301      	movs	r3, #1
 800de06:	9303      	str	r3, [sp, #12]
 800de08:	f107 0317 	add.w	r3, r7, #23
 800de0c:	9302      	str	r3, [sp, #8]
 800de0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de10:	9301      	str	r3, [sp, #4]
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	9300      	str	r3, [sp, #0]
 800de16:	4613      	mov	r3, r2
 800de18:	687a      	ldr	r2, [r7, #4]
 800de1a:	2100      	movs	r1, #0
 800de1c:	68f8      	ldr	r0, [r7, #12]
 800de1e:	f7fc fc09 	bl	800a634 <lfs_bd_read>
 800de22:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, noff-i,
                            head, i, &data, 1);
                    if (err) {
 800de24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de26:	2b00      	cmp	r3, #0
 800de28:	d001      	beq.n	800de2e <lfs_ctz_extend+0xba>
                        return err;
 800de2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de2c:	e09f      	b.n	800df6e <lfs_ctz_extend+0x1fa>
                    }

                    err = lfs_bd_prog(lfs,
 800de2e:	6a3b      	ldr	r3, [r7, #32]
 800de30:	2201      	movs	r2, #1
 800de32:	9203      	str	r2, [sp, #12]
 800de34:	f107 0217 	add.w	r2, r7, #23
 800de38:	9202      	str	r2, [sp, #8]
 800de3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de3c:	9201      	str	r2, [sp, #4]
 800de3e:	9300      	str	r3, [sp, #0]
 800de40:	2301      	movs	r3, #1
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	68b9      	ldr	r1, [r7, #8]
 800de46:	68f8      	ldr	r0, [r7, #12]
 800de48:	f7fc fe3a 	bl	800aac0 <lfs_bd_prog>
 800de4c:	62f8      	str	r0, [r7, #44]	; 0x2c
                            pcache, rcache, true,
                            nblock, i, &data, 1);
                    if (err) {
 800de4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de50:	2b00      	cmp	r3, #0
 800de52:	d007      	beq.n	800de64 <lfs_ctz_extend+0xf0>
                        if (err == LFS_ERR_CORRUPT) {
 800de54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de56:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800de5a:	d101      	bne.n	800de60 <lfs_ctz_extend+0xec>
                            goto relocate;
 800de5c:	bf00      	nop
                    goto relocate;
 800de5e:	e075      	b.n	800df4c <lfs_ctz_extend+0x1d8>
                        }
                        return err;
 800de60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
                return err;
 800de62:	e084      	b.n	800df6e <lfs_ctz_extend+0x1fa>
                for (lfs_off_t i = 0; i < noff; i++) {
 800de64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de66:	3301      	adds	r3, #1
 800de68:	637b      	str	r3, [r7, #52]	; 0x34
 800de6a:	69fb      	ldr	r3, [r7, #28]
 800de6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de6e:	429a      	cmp	r2, r3
 800de70:	d3c5      	bcc.n	800ddfe <lfs_ctz_extend+0x8a>
                    }
                }

                *block = nblock;
 800de72:	6a3a      	ldr	r2, [r7, #32]
 800de74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de76:	601a      	str	r2, [r3, #0]
                *off = noff;
 800de78:	69fa      	ldr	r2, [r7, #28]
 800de7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800de7c:	601a      	str	r2, [r3, #0]
                return 0;
 800de7e:	2300      	movs	r3, #0
 800de80:	e075      	b.n	800df6e <lfs_ctz_extend+0x1fa>
            }

            // append block
            index += 1;
 800de82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de84:	3301      	adds	r3, #1
 800de86:	62bb      	str	r3, [r7, #40]	; 0x28
            lfs_size_t skips = lfs_ctz(index) + 1;
 800de88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de8a:	f7fc fb3e 	bl	800a50a <lfs_ctz>
 800de8e:	4603      	mov	r3, r0
 800de90:	3301      	adds	r3, #1
 800de92:	627b      	str	r3, [r7, #36]	; 0x24
            lfs_block_t nhead = head;
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	61bb      	str	r3, [r7, #24]
            for (lfs_off_t i = 0; i < skips; i++) {
 800de98:	2300      	movs	r3, #0
 800de9a:	633b      	str	r3, [r7, #48]	; 0x30
 800de9c:	e049      	b.n	800df32 <lfs_ctz_extend+0x1be>
                nhead = lfs_tole32(nhead);
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7fc fb66 	bl	800a572 <lfs_tole32>
 800dea6:	4603      	mov	r3, r0
 800dea8:	61bb      	str	r3, [r7, #24]
                err = lfs_bd_prog(lfs, pcache, rcache, true,
 800deaa:	6a3b      	ldr	r3, [r7, #32]
 800deac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800deae:	0092      	lsls	r2, r2, #2
 800deb0:	2104      	movs	r1, #4
 800deb2:	9103      	str	r1, [sp, #12]
 800deb4:	f107 0118 	add.w	r1, r7, #24
 800deb8:	9102      	str	r1, [sp, #8]
 800deba:	9201      	str	r2, [sp, #4]
 800debc:	9300      	str	r3, [sp, #0]
 800debe:	2301      	movs	r3, #1
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	68b9      	ldr	r1, [r7, #8]
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f7fc fdfb 	bl	800aac0 <lfs_bd_prog>
 800deca:	62f8      	str	r0, [r7, #44]	; 0x2c
                        nblock, 4*i, &nhead, 4);
                nhead = lfs_fromle32(nhead);
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	4618      	mov	r0, r3
 800ded0:	f7fc fb44 	bl	800a55c <lfs_fromle32>
 800ded4:	4603      	mov	r3, r0
 800ded6:	61bb      	str	r3, [r7, #24]
                if (err) {
 800ded8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d005      	beq.n	800deea <lfs_ctz_extend+0x176>
                    if (err == LFS_ERR_CORRUPT) {
 800dede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee0:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800dee4:	d034      	beq.n	800df50 <lfs_ctz_extend+0x1dc>
                        goto relocate;
                    }
                    return err;
 800dee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee8:	e041      	b.n	800df6e <lfs_ctz_extend+0x1fa>
                }

                if (i != skips-1) {
 800deea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deec:	3b01      	subs	r3, #1
 800deee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def0:	429a      	cmp	r2, r3
 800def2:	d01b      	beq.n	800df2c <lfs_ctz_extend+0x1b8>
                    err = lfs_bd_read(lfs,
 800def4:	69bb      	ldr	r3, [r7, #24]
 800def6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800def8:	0092      	lsls	r2, r2, #2
 800defa:	2104      	movs	r1, #4
 800defc:	9103      	str	r1, [sp, #12]
 800defe:	f107 0118 	add.w	r1, r7, #24
 800df02:	9102      	str	r1, [sp, #8]
 800df04:	9201      	str	r2, [sp, #4]
 800df06:	9300      	str	r3, [sp, #0]
 800df08:	2304      	movs	r3, #4
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	2100      	movs	r1, #0
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f7fc fb90 	bl	800a634 <lfs_bd_read>
 800df14:	62f8      	str	r0, [r7, #44]	; 0x2c
                            NULL, rcache, sizeof(nhead),
                            nhead, 4*i, &nhead, sizeof(nhead));
                    nhead = lfs_fromle32(nhead);
 800df16:	69bb      	ldr	r3, [r7, #24]
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fc fb1f 	bl	800a55c <lfs_fromle32>
 800df1e:	4603      	mov	r3, r0
 800df20:	61bb      	str	r3, [r7, #24]
                    if (err) {
 800df22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df24:	2b00      	cmp	r3, #0
 800df26:	d001      	beq.n	800df2c <lfs_ctz_extend+0x1b8>
                        return err;
 800df28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df2a:	e020      	b.n	800df6e <lfs_ctz_extend+0x1fa>
            for (lfs_off_t i = 0; i < skips; i++) {
 800df2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df2e:	3301      	adds	r3, #1
 800df30:	633b      	str	r3, [r7, #48]	; 0x30
 800df32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df36:	429a      	cmp	r2, r3
 800df38:	d3b1      	bcc.n	800de9e <lfs_ctz_extend+0x12a>
                    }
                }
            }

            *block = nblock;
 800df3a:	6a3a      	ldr	r2, [r7, #32]
 800df3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df3e:	601a      	str	r2, [r3, #0]
            *off = 4*skips;
 800df40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df42:	009a      	lsls	r2, r3, #2
 800df44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800df46:	601a      	str	r2, [r3, #0]
            return 0;
 800df48:	2300      	movs	r3, #0
 800df4a:	e010      	b.n	800df6e <lfs_ctz_extend+0x1fa>
                    goto relocate;
 800df4c:	bf00      	nop
 800df4e:	e000      	b.n	800df52 <lfs_ctz_extend+0x1de>
                        goto relocate;
 800df50:	bf00      	nop
        }

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800df52:	6a3b      	ldr	r3, [r7, #32]
 800df54:	4a08      	ldr	r2, [pc, #32]	; (800df78 <lfs_ctz_extend+0x204>)
 800df56:	9200      	str	r2, [sp, #0]
 800df58:	f640 126a 	movw	r2, #2410	; 0x96a
 800df5c:	4907      	ldr	r1, [pc, #28]	; (800df7c <lfs_ctz_extend+0x208>)
 800df5e:	4808      	ldr	r0, [pc, #32]	; (800df80 <lfs_ctz_extend+0x20c>)
 800df60:	f013 fa2a 	bl	80213b8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, pcache);
 800df64:	68b9      	ldr	r1, [r7, #8]
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f7fc fb3e 	bl	800a5e8 <lfs_cache_drop>
    while (true) {
 800df6c:	e709      	b.n	800dd82 <lfs_ctz_extend+0xe>
    }
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3738      	adds	r7, #56	; 0x38
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
 800df76:	bf00      	nop
 800df78:	08023064 	.word	0x08023064
 800df7c:	08022f58 	.word	0x08022f58
 800df80:	0802310c 	.word	0x0802310c

0800df84 <lfs_ctz_traverse>:
#endif

static int lfs_ctz_traverse(lfs_t *lfs,
        const lfs_cache_t *pcache, lfs_cache_t *rcache,
        lfs_block_t head, lfs_size_t size,
        int (*cb)(void*, lfs_block_t), void *data) {
 800df84:	b580      	push	{r7, lr}
 800df86:	b090      	sub	sp, #64	; 0x40
 800df88:	af04      	add	r7, sp, #16
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	607a      	str	r2, [r7, #4]
 800df90:	603b      	str	r3, [r7, #0]
    if (size == 0) {
 800df92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df94:	2b00      	cmp	r3, #0
 800df96:	d101      	bne.n	800df9c <lfs_ctz_traverse+0x18>
        return 0;
 800df98:	2300      	movs	r3, #0
 800df9a:	e06b      	b.n	800e074 <lfs_ctz_traverse+0xf0>
    }

    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
 800df9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df9e:	3b01      	subs	r3, #1
 800dfa0:	61fb      	str	r3, [r7, #28]
 800dfa2:	f107 031c 	add.w	r3, r7, #28
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	68f8      	ldr	r0, [r7, #12]
 800dfaa:	f7ff fe3f 	bl	800dc2c <lfs_ctz_index>
 800dfae:	4603      	mov	r3, r0
 800dfb0:	62fb      	str	r3, [r7, #44]	; 0x2c

    while (true) {
        int err = cb(data, head);
 800dfb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfb4:	6839      	ldr	r1, [r7, #0]
 800dfb6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800dfb8:	4798      	blx	r3
 800dfba:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d001      	beq.n	800dfc6 <lfs_ctz_traverse+0x42>
            return err;
 800dfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc4:	e056      	b.n	800e074 <lfs_ctz_traverse+0xf0>
        }

        if (index == 0) {
 800dfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d101      	bne.n	800dfd0 <lfs_ctz_traverse+0x4c>
            return 0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	e051      	b.n	800e074 <lfs_ctz_traverse+0xf0>
        }

        lfs_block_t heads[2];
        int count = 2 - (index & 1);
 800dfd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dfd2:	f003 0301 	and.w	r3, r3, #1
 800dfd6:	f1c3 0302 	rsb	r3, r3, #2
 800dfda:	623b      	str	r3, [r7, #32]
        err = lfs_bd_read(lfs,
 800dfdc:	6a3b      	ldr	r3, [r7, #32]
                pcache, rcache, count*sizeof(head),
 800dfde:	009a      	lsls	r2, r3, #2
        err = lfs_bd_read(lfs,
 800dfe0:	6a3b      	ldr	r3, [r7, #32]
                head, 0, &heads, count*sizeof(head));
 800dfe2:	009b      	lsls	r3, r3, #2
        err = lfs_bd_read(lfs,
 800dfe4:	9303      	str	r3, [sp, #12]
 800dfe6:	f107 0314 	add.w	r3, r7, #20
 800dfea:	9302      	str	r3, [sp, #8]
 800dfec:	2300      	movs	r3, #0
 800dfee:	9301      	str	r3, [sp, #4]
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	4613      	mov	r3, r2
 800dff6:	687a      	ldr	r2, [r7, #4]
 800dff8:	68b9      	ldr	r1, [r7, #8]
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f7fc fb1a 	bl	800a634 <lfs_bd_read>
 800e000:	6278      	str	r0, [r7, #36]	; 0x24
        heads[0] = lfs_fromle32(heads[0]);
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	4618      	mov	r0, r3
 800e006:	f7fc faa9 	bl	800a55c <lfs_fromle32>
 800e00a:	4603      	mov	r3, r0
 800e00c:	617b      	str	r3, [r7, #20]
        heads[1] = lfs_fromle32(heads[1]);
 800e00e:	69bb      	ldr	r3, [r7, #24]
 800e010:	4618      	mov	r0, r3
 800e012:	f7fc faa3 	bl	800a55c <lfs_fromle32>
 800e016:	4603      	mov	r3, r0
 800e018:	61bb      	str	r3, [r7, #24]
        if (err) {
 800e01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <lfs_ctz_traverse+0xa0>
            return err;
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	e027      	b.n	800e074 <lfs_ctz_traverse+0xf0>
        }

        for (int i = 0; i < count-1; i++) {
 800e024:	2300      	movs	r3, #0
 800e026:	62bb      	str	r3, [r7, #40]	; 0x28
 800e028:	e012      	b.n	800e050 <lfs_ctz_traverse+0xcc>
            err = cb(data, heads[i]);
 800e02a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	3330      	adds	r3, #48	; 0x30
 800e030:	443b      	add	r3, r7
 800e032:	f853 2c1c 	ldr.w	r2, [r3, #-28]
 800e036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e038:	4611      	mov	r1, r2
 800e03a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e03c:	4798      	blx	r3
 800e03e:	6278      	str	r0, [r7, #36]	; 0x24
            if (err) {
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	2b00      	cmp	r3, #0
 800e044:	d001      	beq.n	800e04a <lfs_ctz_traverse+0xc6>
                return err;
 800e046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e048:	e014      	b.n	800e074 <lfs_ctz_traverse+0xf0>
        for (int i = 0; i < count-1; i++) {
 800e04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e04c:	3301      	adds	r3, #1
 800e04e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e050:	6a3b      	ldr	r3, [r7, #32]
 800e052:	3b01      	subs	r3, #1
 800e054:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e056:	429a      	cmp	r2, r3
 800e058:	dbe7      	blt.n	800e02a <lfs_ctz_traverse+0xa6>
            }
        }

        head = heads[count-1];
 800e05a:	6a3b      	ldr	r3, [r7, #32]
 800e05c:	3b01      	subs	r3, #1
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	3330      	adds	r3, #48	; 0x30
 800e062:	443b      	add	r3, r7
 800e064:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 800e068:	603b      	str	r3, [r7, #0]
        index -= count;
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e06e:	1ad3      	subs	r3, r2, r3
 800e070:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (true) {
 800e072:	e79e      	b.n	800dfb2 <lfs_ctz_traverse+0x2e>
    }
}
 800e074:	4618      	mov	r0, r3
 800e076:	3730      	adds	r7, #48	; 0x30
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <lfs_file_rawopencfg>:


/// Top level file operations ///
static int lfs_file_rawopencfg(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags,
        const struct lfs_file_config *cfg) {
 800e07c:	b5b0      	push	{r4, r5, r7, lr}
 800e07e:	b09a      	sub	sp, #104	; 0x68
 800e080:	af02      	add	r7, sp, #8
 800e082:	60f8      	str	r0, [r7, #12]
 800e084:	60b9      	str	r1, [r7, #8]
 800e086:	607a      	str	r2, [r7, #4]
 800e088:	603b      	str	r3, [r7, #0]
#ifndef LFS_READONLY
    // deorphan if we haven't yet, needed at most once after poweron
    if ((flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	f003 0302 	and.w	r3, r3, #2
 800e090:	2b00      	cmp	r3, #0
 800e092:	d008      	beq.n	800e0a6 <lfs_file_rawopencfg+0x2a>
        int err = lfs_fs_forceconsistency(lfs);
 800e094:	68f8      	ldr	r0, [r7, #12]
 800e096:	f002 f829 	bl	80100ec <lfs_fs_forceconsistency>
 800e09a:	6538      	str	r0, [r7, #80]	; 0x50
        if (err) {
 800e09c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <lfs_file_rawopencfg+0x2a>
            return err;
 800e0a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e0a4:	e1a9      	b.n	800e3fa <lfs_file_rawopencfg+0x37e>
    LFS_ASSERT((flags & LFS_O_RDONLY) == LFS_O_RDONLY);
#endif

    // setup simple file details
    int err;
    file->cfg = cfg;
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800e0aa:	651a      	str	r2, [r3, #80]	; 0x50
    file->flags = flags;
 800e0ac:	683a      	ldr	r2, [r7, #0]
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	631a      	str	r2, [r3, #48]	; 0x30
    file->pos = 0;
 800e0b2:	68bb      	ldr	r3, [r7, #8]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	635a      	str	r2, [r3, #52]	; 0x34
    file->off = 0;
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	63da      	str	r2, [r3, #60]	; 0x3c
    file->cache.buffer = NULL;
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	64da      	str	r2, [r3, #76]	; 0x4c

    // allocate entry for file if it doesn't exist
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
 800e0c4:	68bb      	ldr	r3, [r7, #8]
 800e0c6:	f103 0108 	add.w	r1, r3, #8
 800e0ca:	68bb      	ldr	r3, [r7, #8]
 800e0cc:	3304      	adds	r3, #4
 800e0ce:	1d3a      	adds	r2, r7, #4
 800e0d0:	68f8      	ldr	r0, [r7, #12]
 800e0d2:	f7fe f97d 	bl	800c3d0 <lfs_dir_find>
 800e0d6:	65b8      	str	r0, [r7, #88]	; 0x58
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
 800e0d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	da0c      	bge.n	800e0f8 <lfs_file_rawopencfg+0x7c>
 800e0de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0e0:	f113 0f02 	cmn.w	r3, #2
 800e0e4:	d105      	bne.n	800e0f2 <lfs_file_rawopencfg+0x76>
 800e0e6:	68bb      	ldr	r3, [r7, #8]
 800e0e8:	889b      	ldrh	r3, [r3, #4]
 800e0ea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800e0ee:	4293      	cmp	r3, r2
 800e0f0:	d102      	bne.n	800e0f8 <lfs_file_rawopencfg+0x7c>
        err = tag;
 800e0f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e0f4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800e0f6:	e175      	b.n	800e3e4 <lfs_file_rawopencfg+0x368>
    }

    // get id, add to list of mdirs to catch update changes
    file->type = LFS_TYPE_REG;
 800e0f8:	68bb      	ldr	r3, [r7, #8]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	719a      	strb	r2, [r3, #6]
    lfs_mlist_append(lfs, (struct lfs_mlist *)file);
 800e0fe:	68b9      	ldr	r1, [r7, #8]
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f7fd f8b6 	bl	800b272 <lfs_mlist_append>
#ifdef LFS_READONLY
    if (tag == LFS_ERR_NOENT) {
        err = LFS_ERR_NOENT;
        goto cleanup;
#else
    if (tag == LFS_ERR_NOENT) {
 800e106:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e108:	f113 0f02 	cmn.w	r3, #2
 800e10c:	d148      	bne.n	800e1a0 <lfs_file_rawopencfg+0x124>
        if (!(flags & LFS_O_CREAT)) {
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e114:	2b00      	cmp	r3, #0
 800e116:	d103      	bne.n	800e120 <lfs_file_rawopencfg+0xa4>
            err = LFS_ERR_NOENT;
 800e118:	f06f 0301 	mvn.w	r3, #1
 800e11c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e11e:	e161      	b.n	800e3e4 <lfs_file_rawopencfg+0x368>
        }

        // check that name fits
        lfs_size_t nlen = strlen(path);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	4618      	mov	r0, r3
 800e124:	f7f2 f854 	bl	80001d0 <strlen>
 800e128:	64f8      	str	r0, [r7, #76]	; 0x4c
        if (nlen > lfs->name_max) {
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e12e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e130:	429a      	cmp	r2, r3
 800e132:	d903      	bls.n	800e13c <lfs_file_rawopencfg+0xc0>
            err = LFS_ERR_NAMETOOLONG;
 800e134:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800e138:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e13a:	e153      	b.n	800e3e4 <lfs_file_rawopencfg+0x368>
        }

        // get next slot and create entry to remember name
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	f103 0108 	add.w	r1, r3, #8
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	889b      	ldrh	r3, [r3, #4]
 800e146:	029b      	lsls	r3, r3, #10
 800e148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800e14c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e150:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e152:	2300      	movs	r3, #0
 800e154:	633b      	str	r3, [r7, #48]	; 0x30
 800e156:	68bb      	ldr	r3, [r7, #8]
 800e158:	889b      	ldrh	r3, [r3, #4]
 800e15a:	029a      	lsls	r2, r3, #10
 800e15c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e15e:	4313      	orrs	r3, r2
 800e160:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e164:	637b      	str	r3, [r7, #52]	; 0x34
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	63bb      	str	r3, [r7, #56]	; 0x38
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	889b      	ldrh	r3, [r3, #4]
 800e16e:	029b      	lsls	r3, r3, #10
 800e170:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e174:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e17a:	2300      	movs	r3, #0
 800e17c:	643b      	str	r3, [r7, #64]	; 0x40
 800e17e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800e182:	2303      	movs	r3, #3
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f7ff f85f 	bl	800d248 <lfs_dir_commit>
 800e18a:	65f8      	str	r0, [r7, #92]	; 0x5c
                {LFS_MKTAG(LFS_TYPE_CREATE, file->id, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_REG, file->id, nlen), path},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0), NULL}));
        if (err) {
 800e18c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d003      	beq.n	800e19a <lfs_file_rawopencfg+0x11e>
            err = LFS_ERR_NAMETOOLONG;
 800e192:	f06f 0323 	mvn.w	r3, #35	; 0x23
 800e196:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e198:	e124      	b.n	800e3e4 <lfs_file_rawopencfg+0x368>
        }

        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
 800e19a:	4b9a      	ldr	r3, [pc, #616]	; (800e404 <lfs_file_rawopencfg+0x388>)
 800e19c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e19e:	e044      	b.n	800e22a <lfs_file_rawopencfg+0x1ae>
    } else if (flags & LFS_O_EXCL) {
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d003      	beq.n	800e1b2 <lfs_file_rawopencfg+0x136>
        err = LFS_ERR_EXIST;
 800e1aa:	f06f 0310 	mvn.w	r3, #16
 800e1ae:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800e1b0:	e118      	b.n	800e3e4 <lfs_file_rawopencfg+0x368>
#endif
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
 800e1b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f7fc fe4b 	bl	800ae50 <lfs_tag_type3>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	d003      	beq.n	800e1c8 <lfs_file_rawopencfg+0x14c>
        err = LFS_ERR_ISDIR;
 800e1c0:	f06f 0314 	mvn.w	r3, #20
 800e1c4:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800e1c6:	e10d      	b.n	800e3e4 <lfs_file_rawopencfg+0x368>
#ifndef LFS_READONLY
    } else if (flags & LFS_O_TRUNC) {
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d00e      	beq.n	800e1f0 <lfs_file_rawopencfg+0x174>
        // truncate if requested
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	889b      	ldrh	r3, [r3, #4]
 800e1d6:	029b      	lsls	r3, r3, #10
 800e1d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e1dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1e0:	65bb      	str	r3, [r7, #88]	; 0x58
        file->flags |= LFS_F_DIRTY;
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	631a      	str	r2, [r3, #48]	; 0x30
 800e1ee:	e01c      	b.n	800e22a <lfs_file_rawopencfg+0x1ae>
#endif
    } else {
        // try to load what's on disk, if it's inlined we'll fix it later
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800e1f0:	68bb      	ldr	r3, [r7, #8]
 800e1f2:	f103 0108 	add.w	r1, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	889b      	ldrh	r3, [r3, #4]
 800e1fa:	029b      	lsls	r3, r3, #10
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800e1fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e200:	f043 0308 	orr.w	r3, r3, #8
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
 800e204:	68ba      	ldr	r2, [r7, #8]
 800e206:	3228      	adds	r2, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
 800e208:	9200      	str	r2, [sp, #0]
 800e20a:	4a7f      	ldr	r2, [pc, #508]	; (800e408 <lfs_file_rawopencfg+0x38c>)
 800e20c:	68f8      	ldr	r0, [r7, #12]
 800e20e:	f7fd fa33 	bl	800b678 <lfs_dir_get>
 800e212:	65b8      	str	r0, [r7, #88]	; 0x58
        if (tag < 0) {
 800e214:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e216:	2b00      	cmp	r3, #0
 800e218:	da02      	bge.n	800e220 <lfs_file_rawopencfg+0x1a4>
            err = tag;
 800e21a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e21c:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e21e:	e0e1      	b.n	800e3e4 <lfs_file_rawopencfg+0x368>
        }
        lfs_ctz_fromle32(&file->ctz);
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	3328      	adds	r3, #40	; 0x28
 800e224:	4618      	mov	r0, r3
 800e226:	f7fc ff45 	bl	800b0b4 <lfs_ctz_fromle32>
    }

    // fetch attrs
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800e22a:	2300      	movs	r3, #0
 800e22c:	657b      	str	r3, [r7, #84]	; 0x54
 800e22e:	e063      	b.n	800e2f8 <lfs_file_rawopencfg+0x27c>
        // if opened for read / read-write operations
        if ((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY) {
 800e230:	68bb      	ldr	r3, [r7, #8]
 800e232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e234:	f003 0301 	and.w	r3, r3, #1
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d03c      	beq.n	800e2b6 <lfs_file_rawopencfg+0x23a>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	f103 0408 	add.w	r4, r3, #8
                    LFS_MKTAG(0x7ff, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e246:	6859      	ldr	r1, [r3, #4]
 800e248:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e24a:	4613      	mov	r3, r2
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	4413      	add	r3, r2
 800e250:	009b      	lsls	r3, r3, #2
 800e252:	440b      	add	r3, r1
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	f503 7340 	add.w	r3, r3, #768	; 0x300
 800e25a:	051a      	lsls	r2, r3, #20
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	889b      	ldrh	r3, [r3, #4]
 800e260:	029b      	lsls	r3, r3, #10
 800e262:	ea42 0103 	orr.w	r1, r2, r3
 800e266:	68bb      	ldr	r3, [r7, #8]
 800e268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e26a:	6858      	ldr	r0, [r3, #4]
 800e26c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e26e:	4613      	mov	r3, r2
 800e270:	005b      	lsls	r3, r3, #1
 800e272:	4413      	add	r3, r2
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	4403      	add	r3, r0
 800e278:	689b      	ldr	r3, [r3, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e27a:	ea41 0003 	orr.w	r0, r1, r3
                        file->id, file->cfg->attrs[i].size),
                        file->cfg->attrs[i].buffer);
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e282:	6859      	ldr	r1, [r3, #4]
 800e284:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e286:	4613      	mov	r3, r2
 800e288:	005b      	lsls	r3, r3, #1
 800e28a:	4413      	add	r3, r2
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	440b      	add	r3, r1
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	9300      	str	r3, [sp, #0]
 800e294:	4603      	mov	r3, r0
 800e296:	4a5d      	ldr	r2, [pc, #372]	; (800e40c <lfs_file_rawopencfg+0x390>)
 800e298:	4621      	mov	r1, r4
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f7fd f9ec 	bl	800b678 <lfs_dir_get>
 800e2a0:	6478      	str	r0, [r7, #68]	; 0x44
            if (res < 0 && res != LFS_ERR_NOENT) {
 800e2a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	da06      	bge.n	800e2b6 <lfs_file_rawopencfg+0x23a>
 800e2a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2aa:	f113 0f02 	cmn.w	r3, #2
 800e2ae:	d002      	beq.n	800e2b6 <lfs_file_rawopencfg+0x23a>
                err = res;
 800e2b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2b2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800e2b4:	e096      	b.n	800e3e4 <lfs_file_rawopencfg+0x368>
            }
        }

#ifndef LFS_READONLY
        // if opened for write / read-write operations
        if ((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY) {
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ba:	f003 0302 	and.w	r3, r3, #2
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d017      	beq.n	800e2f2 <lfs_file_rawopencfg+0x276>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
 800e2c2:	68bb      	ldr	r3, [r7, #8]
 800e2c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2c6:	6859      	ldr	r1, [r3, #4]
 800e2c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2ca:	4613      	mov	r3, r2
 800e2cc:	005b      	lsls	r3, r3, #1
 800e2ce:	4413      	add	r3, r2
 800e2d0:	009b      	lsls	r3, r3, #2
 800e2d2:	440b      	add	r3, r1
 800e2d4:	689a      	ldr	r2, [r3, #8]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2da:	429a      	cmp	r2, r3
 800e2dc:	d903      	bls.n	800e2e6 <lfs_file_rawopencfg+0x26a>
                err = LFS_ERR_NOSPC;
 800e2de:	f06f 031b 	mvn.w	r3, #27
 800e2e2:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800e2e4:	e07e      	b.n	800e3e4 <lfs_file_rawopencfg+0x368>
            }

            file->flags |= LFS_F_DIRTY;
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	631a      	str	r2, [r3, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
 800e2f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e2f4:	3301      	adds	r3, #1
 800e2f6:	657b      	str	r3, [r7, #84]	; 0x54
 800e2f8:	68bb      	ldr	r3, [r7, #8]
 800e2fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2fc:	689b      	ldr	r3, [r3, #8]
 800e2fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e300:	429a      	cmp	r2, r3
 800e302:	d395      	bcc.n	800e230 <lfs_file_rawopencfg+0x1b4>
        }
#endif
    }

    // allocate buffer if needed
    if (file->cfg->buffer) {
 800e304:	68bb      	ldr	r3, [r7, #8]
 800e306:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d005      	beq.n	800e31a <lfs_file_rawopencfg+0x29e>
        file->cache.buffer = file->cfg->buffer;
 800e30e:	68bb      	ldr	r3, [r7, #8]
 800e310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e312:	681a      	ldr	r2, [r3, #0]
 800e314:	68bb      	ldr	r3, [r7, #8]
 800e316:	64da      	str	r2, [r3, #76]	; 0x4c
 800e318:	e010      	b.n	800e33c <lfs_file_rawopencfg+0x2c0>
    } else {
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e31e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e320:	4618      	mov	r0, r3
 800e322:	f7fc f94a 	bl	800a5ba <lfs_malloc>
 800e326:	4602      	mov	r2, r0
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	64da      	str	r2, [r3, #76]	; 0x4c
        if (!file->cache.buffer) {
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e330:	2b00      	cmp	r3, #0
 800e332:	d103      	bne.n	800e33c <lfs_file_rawopencfg+0x2c0>
            err = LFS_ERR_NOMEM;
 800e334:	f06f 030b 	mvn.w	r3, #11
 800e338:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800e33a:	e053      	b.n	800e3e4 <lfs_file_rawopencfg+0x368>
        }
    }

    // zero to avoid information leak
    lfs_cache_zero(lfs, &file->cache);
 800e33c:	68bb      	ldr	r3, [r7, #8]
 800e33e:	3340      	adds	r3, #64	; 0x40
 800e340:	4619      	mov	r1, r3
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f7fc f95f 	bl	800a606 <lfs_cache_zero>

    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
 800e348:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e34a:	4618      	mov	r0, r3
 800e34c:	f7fc fd80 	bl	800ae50 <lfs_tag_type3>
 800e350:	4603      	mov	r3, r0
 800e352:	461a      	mov	r2, r3
 800e354:	f240 2301 	movw	r3, #513	; 0x201
 800e358:	429a      	cmp	r2, r3
 800e35a:	d141      	bne.n	800e3e0 <lfs_file_rawopencfg+0x364>
        // load inline files
        file->ctz.head = LFS_BLOCK_INLINE;
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	f06f 0201 	mvn.w	r2, #1
 800e362:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = lfs_tag_size(tag);
 800e364:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e366:	4618      	mov	r0, r3
 800e368:	f7fc fdac 	bl	800aec4 <lfs_tag_size>
 800e36c:	4602      	mov	r2, r0
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e376:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	631a      	str	r2, [r3, #48]	; 0x30
        file->cache.block = file->ctz.head;
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = 0;
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	2200      	movs	r2, #0
 800e38a:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e390:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e392:	68bb      	ldr	r3, [r7, #8]
 800e394:	649a      	str	r2, [r3, #72]	; 0x48

        // don't always read (may be new/trunc file)
        if (file->ctz.size > 0) {
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d020      	beq.n	800e3e0 <lfs_file_rawopencfg+0x364>
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e39e:	68bb      	ldr	r3, [r7, #8]
 800e3a0:	f103 0508 	add.w	r5, r3, #8
                    LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	889b      	ldrh	r3, [r3, #4]
 800e3a8:	029c      	lsls	r4, r3, #10
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e3ae:	f240 31fe 	movw	r1, #1022	; 0x3fe
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fc f862 	bl	800a47c <lfs_min>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	4323      	orrs	r3, r4
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e3bc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
                        lfs_min(file->cache.size, 0x3fe)),
                    file->cache.buffer);
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
 800e3c4:	9300      	str	r3, [sp, #0]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	4a0f      	ldr	r2, [pc, #60]	; (800e408 <lfs_file_rawopencfg+0x38c>)
 800e3ca:	4629      	mov	r1, r5
 800e3cc:	68f8      	ldr	r0, [r7, #12]
 800e3ce:	f7fd f953 	bl	800b678 <lfs_dir_get>
 800e3d2:	64b8      	str	r0, [r7, #72]	; 0x48
            if (res < 0) {
 800e3d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	da02      	bge.n	800e3e0 <lfs_file_rawopencfg+0x364>
                err = res;
 800e3da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3dc:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800e3de:	e001      	b.n	800e3e4 <lfs_file_rawopencfg+0x368>
            }
        }
    }

    return 0;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	e00a      	b.n	800e3fa <lfs_file_rawopencfg+0x37e>

cleanup:
    // clean up lingering resources
#ifndef LFS_READONLY
    file->flags |= LFS_F_ERRED;
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	631a      	str	r2, [r3, #48]	; 0x30
#endif
    lfs_file_rawclose(lfs, file);
 800e3f0:	68b9      	ldr	r1, [r7, #8]
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	f000 f824 	bl	800e440 <lfs_file_rawclose>
    return err;
 800e3f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3760      	adds	r7, #96	; 0x60
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bdb0      	pop	{r4, r5, r7, pc}
 800e402:	bf00      	nop
 800e404:	20100000 	.word	0x20100000
 800e408:	700ffc00 	.word	0x700ffc00
 800e40c:	7ffffc00 	.word	0x7ffffc00

0800e410 <lfs_file_rawopen>:

static int lfs_file_rawopen(lfs_t *lfs, lfs_file_t *file,
        const char *path, int flags) {
 800e410:	b580      	push	{r7, lr}
 800e412:	b088      	sub	sp, #32
 800e414:	af02      	add	r7, sp, #8
 800e416:	60f8      	str	r0, [r7, #12]
 800e418:	60b9      	str	r1, [r7, #8]
 800e41a:	607a      	str	r2, [r7, #4]
 800e41c:	603b      	str	r3, [r7, #0]
    static const struct lfs_file_config defaults = {0};
    int err = lfs_file_rawopencfg(lfs, file, path, flags, &defaults);
 800e41e:	4b07      	ldr	r3, [pc, #28]	; (800e43c <lfs_file_rawopen+0x2c>)
 800e420:	9300      	str	r3, [sp, #0]
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	687a      	ldr	r2, [r7, #4]
 800e426:	68b9      	ldr	r1, [r7, #8]
 800e428:	68f8      	ldr	r0, [r7, #12]
 800e42a:	f7ff fe27 	bl	800e07c <lfs_file_rawopencfg>
 800e42e:	6178      	str	r0, [r7, #20]
    return err;
 800e430:	697b      	ldr	r3, [r7, #20]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3718      	adds	r7, #24
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	08026e98 	.word	0x08026e98

0800e440 <lfs_file_rawclose>:

static int lfs_file_rawclose(lfs_t *lfs, lfs_file_t *file) {
 800e440:	b580      	push	{r7, lr}
 800e442:	b084      	sub	sp, #16
 800e444:	af00      	add	r7, sp, #0
 800e446:	6078      	str	r0, [r7, #4]
 800e448:	6039      	str	r1, [r7, #0]
#ifndef LFS_READONLY
    int err = lfs_file_rawsync(lfs, file);
 800e44a:	6839      	ldr	r1, [r7, #0]
 800e44c:	6878      	ldr	r0, [r7, #4]
 800e44e:	f000 f9e5 	bl	800e81c <lfs_file_rawsync>
 800e452:	60f8      	str	r0, [r7, #12]
#else
    int err = 0;
#endif

    // remove from list of mdirs
    lfs_mlist_remove(lfs, (struct lfs_mlist*)file);
 800e454:	6839      	ldr	r1, [r7, #0]
 800e456:	6878      	ldr	r0, [r7, #4]
 800e458:	f7fc fee9 	bl	800b22e <lfs_mlist_remove>

    // clean up memory
    if (!file->cfg->buffer) {
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d104      	bne.n	800e470 <lfs_file_rawclose+0x30>
        lfs_free(file->cache.buffer);
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7fc f8b1 	bl	800a5d2 <lfs_free>
    }

    return err;
 800e470:	68fb      	ldr	r3, [r7, #12]
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
	...

0800e47c <lfs_file_relocate>:


#ifndef LFS_READONLY
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
 800e47c:	b590      	push	{r4, r7, lr}
 800e47e:	b08d      	sub	sp, #52	; 0x34
 800e480:	af06      	add	r7, sp, #24
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
    while (true) {
        // just relocate what exists into new block
        lfs_block_t nblock;
        int err = lfs_alloc(lfs, &nblock);
 800e486:	f107 030c 	add.w	r3, r7, #12
 800e48a:	4619      	mov	r1, r3
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7fc ff59 	bl	800b344 <lfs_alloc>
 800e492:	6138      	str	r0, [r7, #16]
        if (err) {
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <lfs_file_relocate+0x22>
            return err;
 800e49a:	693b      	ldr	r3, [r7, #16]
 800e49c:	e0bb      	b.n	800e616 <lfs_file_relocate+0x19a>
        }

        err = lfs_bd_erase(lfs, nblock);
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7fc fbb8 	bl	800ac18 <lfs_bd_erase>
 800e4a8:	6138      	str	r0, [r7, #16]
        if (err) {
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d006      	beq.n	800e4be <lfs_file_relocate+0x42>
            if (err == LFS_ERR_CORRUPT) {
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e4b6:	f000 809b 	beq.w	800e5f0 <lfs_file_relocate+0x174>
                goto relocate;
            }
            return err;
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	e0ab      	b.n	800e616 <lfs_file_relocate+0x19a>
        }

        // either read from dirty cache or disk
        for (lfs_off_t i = 0; i < file->off; i++) {
 800e4be:	2300      	movs	r3, #0
 800e4c0:	617b      	str	r3, [r7, #20]
 800e4c2:	e069      	b.n	800e598 <lfs_file_relocate+0x11c>
            uint8_t data;
            if (file->flags & LFS_F_INLINE) {
 800e4c4:	683b      	ldr	r3, [r7, #0]
 800e4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d027      	beq.n	800e520 <lfs_file_relocate+0xa4>
                err = lfs_dir_getread(lfs, &file->m,
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	f103 0008 	add.w	r0, r3, #8
 800e4d6:	683b      	ldr	r3, [r7, #0]
 800e4d8:	f103 0440 	add.w	r4, r3, #64	; 0x40
                        // note we evict inline files before they can be dirty
                        NULL, &file->cache, file->off-i,
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_dir_getread(lfs, &file->m,
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	1ad2      	subs	r2, r2, r3
                        LFS_MKTAG(0xfff, 0x1ff, 0),
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800e4e4:	683b      	ldr	r3, [r7, #0]
 800e4e6:	889b      	ldrh	r3, [r3, #4]
 800e4e8:	029b      	lsls	r3, r3, #10
                err = lfs_dir_getread(lfs, &file->m,
 800e4ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e4ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e4f2:	2101      	movs	r1, #1
 800e4f4:	9105      	str	r1, [sp, #20]
 800e4f6:	f107 010b 	add.w	r1, r7, #11
 800e4fa:	9104      	str	r1, [sp, #16]
 800e4fc:	6979      	ldr	r1, [r7, #20]
 800e4fe:	9103      	str	r1, [sp, #12]
 800e500:	9302      	str	r3, [sp, #8]
 800e502:	4b47      	ldr	r3, [pc, #284]	; (800e620 <lfs_file_relocate+0x1a4>)
 800e504:	9301      	str	r3, [sp, #4]
 800e506:	9200      	str	r2, [sp, #0]
 800e508:	4623      	mov	r3, r4
 800e50a:	2200      	movs	r2, #0
 800e50c:	4601      	mov	r1, r0
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7fd f8cd 	bl	800b6ae <lfs_dir_getread>
 800e514:	6138      	str	r0, [r7, #16]
                        i, &data, 1);
                if (err) {
 800e516:	693b      	ldr	r3, [r7, #16]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d01e      	beq.n	800e55a <lfs_file_relocate+0xde>
                    return err;
 800e51c:	693b      	ldr	r3, [r7, #16]
 800e51e:	e07a      	b.n	800e616 <lfs_file_relocate+0x19a>
                }
            } else {
                err = lfs_bd_read(lfs,
                        &file->cache, &lfs->rcache, file->off-i,
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	f103 0140 	add.w	r1, r3, #64	; 0x40
                err = lfs_bd_read(lfs,
 800e526:	6878      	ldr	r0, [r7, #4]
                        &file->cache, &lfs->rcache, file->off-i,
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
                err = lfs_bd_read(lfs,
 800e52c:	697b      	ldr	r3, [r7, #20]
 800e52e:	1ad4      	subs	r4, r2, r3
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e534:	2201      	movs	r2, #1
 800e536:	9203      	str	r2, [sp, #12]
 800e538:	f107 020b 	add.w	r2, r7, #11
 800e53c:	9202      	str	r2, [sp, #8]
 800e53e:	697a      	ldr	r2, [r7, #20]
 800e540:	9201      	str	r2, [sp, #4]
 800e542:	9300      	str	r3, [sp, #0]
 800e544:	4623      	mov	r3, r4
 800e546:	4602      	mov	r2, r0
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7fc f873 	bl	800a634 <lfs_bd_read>
 800e54e:	6138      	str	r0, [r7, #16]
                        file->block, i, &data, 1);
                if (err) {
 800e550:	693b      	ldr	r3, [r7, #16]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d001      	beq.n	800e55a <lfs_file_relocate+0xde>
                    return err;
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	e05d      	b.n	800e616 <lfs_file_relocate+0x19a>
                }
            }

            err = lfs_bd_prog(lfs,
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	f103 0110 	add.w	r1, r3, #16
 800e560:	6878      	ldr	r0, [r7, #4]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2201      	movs	r2, #1
 800e566:	9203      	str	r2, [sp, #12]
 800e568:	f107 020b 	add.w	r2, r7, #11
 800e56c:	9202      	str	r2, [sp, #8]
 800e56e:	697a      	ldr	r2, [r7, #20]
 800e570:	9201      	str	r2, [sp, #4]
 800e572:	9300      	str	r3, [sp, #0]
 800e574:	2301      	movs	r3, #1
 800e576:	4602      	mov	r2, r0
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f7fc faa1 	bl	800aac0 <lfs_bd_prog>
 800e57e:	6138      	str	r0, [r7, #16]
                    &lfs->pcache, &lfs->rcache, true,
                    nblock, i, &data, 1);
            if (err) {
 800e580:	693b      	ldr	r3, [r7, #16]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d005      	beq.n	800e592 <lfs_file_relocate+0x116>
                if (err == LFS_ERR_CORRUPT) {
 800e586:	693b      	ldr	r3, [r7, #16]
 800e588:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e58c:	d032      	beq.n	800e5f4 <lfs_file_relocate+0x178>
                    goto relocate;
                }
                return err;
 800e58e:	693b      	ldr	r3, [r7, #16]
 800e590:	e041      	b.n	800e616 <lfs_file_relocate+0x19a>
        for (lfs_off_t i = 0; i < file->off; i++) {
 800e592:	697b      	ldr	r3, [r7, #20]
 800e594:	3301      	adds	r3, #1
 800e596:	617b      	str	r3, [r7, #20]
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e59c:	697a      	ldr	r2, [r7, #20]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d390      	bcc.n	800e4c4 <lfs_file_relocate+0x48>
            }
        }

        // copy over new state of file
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	69d9      	ldr	r1, [r3, #28]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	f013 fa20 	bl	80219f6 <memcpy>
        file->cache.block = lfs->pcache.block;
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	691a      	ldr	r2, [r3, #16]
 800e5ba:	683b      	ldr	r3, [r7, #0]
 800e5bc:	641a      	str	r2, [r3, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	695a      	ldr	r2, [r3, #20]
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	645a      	str	r2, [r3, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	699a      	ldr	r2, [r3, #24]
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	649a      	str	r2, [r3, #72]	; 0x48
        lfs_cache_zero(lfs, &lfs->pcache);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	3310      	adds	r3, #16
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	6878      	ldr	r0, [r7, #4]
 800e5d6:	f7fc f816 	bl	800a606 <lfs_cache_zero>

        file->block = nblock;
 800e5da:	68fa      	ldr	r2, [r7, #12]
 800e5dc:	683b      	ldr	r3, [r7, #0]
 800e5de:	639a      	str	r2, [r3, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5e4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800e5e8:	683b      	ldr	r3, [r7, #0]
 800e5ea:	631a      	str	r2, [r3, #48]	; 0x30
        return 0;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	e012      	b.n	800e616 <lfs_file_relocate+0x19a>
                goto relocate;
 800e5f0:	bf00      	nop
 800e5f2:	e000      	b.n	800e5f6 <lfs_file_relocate+0x17a>
                    goto relocate;
 800e5f4:	bf00      	nop

relocate:
        LFS_DEBUG("Bad block at 0x%"PRIx32, nblock);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	4a0a      	ldr	r2, [pc, #40]	; (800e624 <lfs_file_relocate+0x1a8>)
 800e5fa:	9200      	str	r2, [sp, #0]
 800e5fc:	f640 229b 	movw	r2, #2715	; 0xa9b
 800e600:	4909      	ldr	r1, [pc, #36]	; (800e628 <lfs_file_relocate+0x1ac>)
 800e602:	480a      	ldr	r0, [pc, #40]	; (800e62c <lfs_file_relocate+0x1b0>)
 800e604:	f012 fed8 	bl	80213b8 <iprintf>

        // just clear cache and try a new block
        lfs_cache_drop(lfs, &lfs->pcache);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	3310      	adds	r3, #16
 800e60c:	4619      	mov	r1, r3
 800e60e:	6878      	ldr	r0, [r7, #4]
 800e610:	f7fb ffea 	bl	800a5e8 <lfs_cache_drop>
    while (true) {
 800e614:	e737      	b.n	800e486 <lfs_file_relocate+0xa>
    }
}
 800e616:	4618      	mov	r0, r3
 800e618:	371c      	adds	r7, #28
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd90      	pop	{r4, r7, pc}
 800e61e:	bf00      	nop
 800e620:	fff7fc00 	.word	0xfff7fc00
 800e624:	08023064 	.word	0x08023064
 800e628:	08022f58 	.word	0x08022f58
 800e62c:	0802310c 	.word	0x0802310c

0800e630 <lfs_file_outline>:
#endif

#ifndef LFS_READONLY
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
 800e630:	b580      	push	{r7, lr}
 800e632:	b084      	sub	sp, #16
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
    file->off = file->pos;
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	63da      	str	r2, [r3, #60]	; 0x3c
    lfs_alloc_ack(lfs);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f7fc fe5e 	bl	800b304 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
 800e648:	6839      	ldr	r1, [r7, #0]
 800e64a:	6878      	ldr	r0, [r7, #4]
 800e64c:	f7ff ff16 	bl	800e47c <lfs_file_relocate>
 800e650:	60f8      	str	r0, [r7, #12]
    if (err) {
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d001      	beq.n	800e65c <lfs_file_outline+0x2c>
        return err;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	e006      	b.n	800e66a <lfs_file_outline+0x3a>
    }

    file->flags &= ~LFS_F_INLINE;
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e660:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	631a      	str	r2, [r3, #48]	; 0x30
    return 0;
 800e668:	2300      	movs	r3, #0
}
 800e66a:	4618      	mov	r0, r3
 800e66c:	3710      	adds	r7, #16
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
	...

0800e674 <lfs_file_flush>:
#endif

#ifndef LFS_READONLY
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
 800e674:	b590      	push	{r4, r7, lr}
 800e676:	b09f      	sub	sp, #124	; 0x7c
 800e678:	af02      	add	r7, sp, #8
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_READING) {
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e682:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e686:	2b00      	cmp	r3, #0
 800e688:	d011      	beq.n	800e6ae <lfs_file_flush+0x3a>
        if (!(file->flags & LFS_F_INLINE)) {
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e692:	2b00      	cmp	r3, #0
 800e694:	d105      	bne.n	800e6a2 <lfs_file_flush+0x2e>
            lfs_cache_drop(lfs, &file->cache);
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	3340      	adds	r3, #64	; 0x40
 800e69a:	4619      	mov	r1, r3
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f7fb ffa3 	bl	800a5e8 <lfs_cache_drop>
        }
        file->flags &= ~LFS_F_READING;
 800e6a2:	683b      	ldr	r3, [r7, #0]
 800e6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6a6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	631a      	str	r2, [r3, #48]	; 0x30
    }

    if (file->flags & LFS_F_WRITING) {
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	f000 80a4 	beq.w	800e804 <lfs_file_flush+0x190>
        lfs_off_t pos = file->pos;
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6c0:	66fb      	str	r3, [r7, #108]	; 0x6c

        if (!(file->flags & LFS_F_INLINE)) {
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d176      	bne.n	800e7bc <lfs_file_flush+0x148>
            // copy over anything after current branch
            lfs_file_t orig = {
 800e6ce:	f107 030c 	add.w	r3, r7, #12
 800e6d2:	2254      	movs	r2, #84	; 0x54
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f013 f884 	bl	80217e4 <memset>
                .ctz.head = file->ctz.head,
 800e6dc:	683b      	ldr	r3, [r7, #0]
 800e6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            lfs_file_t orig = {
 800e6e0:	637b      	str	r3, [r7, #52]	; 0x34
                .ctz.size = file->ctz.size,
 800e6e2:	683b      	ldr	r3, [r7, #0]
 800e6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            lfs_file_t orig = {
 800e6e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800e6e8:	2301      	movs	r3, #1
 800e6ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                .flags = LFS_O_RDONLY,
                .pos = file->pos,
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            lfs_file_t orig = {
 800e6f0:	643b      	str	r3, [r7, #64]	; 0x40
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 800e6f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e6fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                .cache = lfs->rcache,
            };
            lfs_cache_drop(lfs, &lfs->rcache);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4619      	mov	r1, r3
 800e702:	6878      	ldr	r0, [r7, #4]
 800e704:	f7fb ff70 	bl	800a5e8 <lfs_cache_drop>

            while (file->pos < file->ctz.size) {
 800e708:	e02b      	b.n	800e762 <lfs_file_flush+0xee>
                // copy over a byte at a time, leave it up to caching
                // to make this efficient
                uint8_t data;
                lfs_ssize_t res = lfs_file_rawread(lfs, &orig, &data, 1);
 800e70a:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800e70e:	f107 010c 	add.w	r1, r7, #12
 800e712:	2301      	movs	r3, #1
 800e714:	6878      	ldr	r0, [r7, #4]
 800e716:	f000 f90d 	bl	800e934 <lfs_file_rawread>
 800e71a:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800e71c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e71e:	2b00      	cmp	r3, #0
 800e720:	da01      	bge.n	800e726 <lfs_file_flush+0xb2>
                    return res;
 800e722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e724:	e06f      	b.n	800e806 <lfs_file_flush+0x192>
                }

                res = lfs_file_rawwrite(lfs, file, &data, 1);
 800e726:	f107 0263 	add.w	r2, r7, #99	; 0x63
 800e72a:	2301      	movs	r3, #1
 800e72c:	6839      	ldr	r1, [r7, #0]
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 f9f4 	bl	800eb1c <lfs_file_rawwrite>
 800e734:	6678      	str	r0, [r7, #100]	; 0x64
                if (res < 0) {
 800e736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e738:	2b00      	cmp	r3, #0
 800e73a:	da01      	bge.n	800e740 <lfs_file_flush+0xcc>
                    return res;
 800e73c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e73e:	e062      	b.n	800e806 <lfs_file_flush+0x192>
                }

                // keep our reference to the rcache in sync
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e748:	d00b      	beq.n	800e762 <lfs_file_flush+0xee>
                    lfs_cache_drop(lfs, &orig.cache);
 800e74a:	f107 030c 	add.w	r3, r7, #12
 800e74e:	3340      	adds	r3, #64	; 0x40
 800e750:	4619      	mov	r1, r3
 800e752:	6878      	ldr	r0, [r7, #4]
 800e754:	f7fb ff48 	bl	800a5e8 <lfs_cache_drop>
                    lfs_cache_drop(lfs, &lfs->rcache);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4619      	mov	r1, r3
 800e75c:	6878      	ldr	r0, [r7, #4]
 800e75e:	f7fb ff43 	bl	800a5e8 <lfs_cache_drop>
            while (file->pos < file->ctz.size) {
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e766:	683b      	ldr	r3, [r7, #0]
 800e768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d3cd      	bcc.n	800e70a <lfs_file_flush+0x96>
                }
            }

            // write out what we have
            while (true) {
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
 800e76e:	683b      	ldr	r3, [r7, #0]
 800e770:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800e774:	687a      	ldr	r2, [r7, #4]
 800e776:	2301      	movs	r3, #1
 800e778:	6878      	ldr	r0, [r7, #4]
 800e77a:	f7fc f8f1 	bl	800a960 <lfs_bd_flush>
 800e77e:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800e780:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e782:	2b00      	cmp	r3, #0
 800e784:	d026      	beq.n	800e7d4 <lfs_file_flush+0x160>
                    if (err == LFS_ERR_CORRUPT) {
 800e786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e788:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800e78c:	d001      	beq.n	800e792 <lfs_file_flush+0x11e>
                        goto relocate;
                    }
                    return err;
 800e78e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e790:	e039      	b.n	800e806 <lfs_file_flush+0x192>
                        goto relocate;
 800e792:	bf00      	nop
                }

                break;

relocate:
                LFS_DEBUG("Bad block at 0x%"PRIx32, file->block);
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e798:	4a1d      	ldr	r2, [pc, #116]	; (800e810 <lfs_file_flush+0x19c>)
 800e79a:	9200      	str	r2, [sp, #0]
 800e79c:	f640 22ea 	movw	r2, #2794	; 0xaea
 800e7a0:	491c      	ldr	r1, [pc, #112]	; (800e814 <lfs_file_flush+0x1a0>)
 800e7a2:	481d      	ldr	r0, [pc, #116]	; (800e818 <lfs_file_flush+0x1a4>)
 800e7a4:	f012 fe08 	bl	80213b8 <iprintf>
                err = lfs_file_relocate(lfs, file);
 800e7a8:	6839      	ldr	r1, [r7, #0]
 800e7aa:	6878      	ldr	r0, [r7, #4]
 800e7ac:	f7ff fe66 	bl	800e47c <lfs_file_relocate>
 800e7b0:	66b8      	str	r0, [r7, #104]	; 0x68
                if (err) {
 800e7b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d0da      	beq.n	800e76e <lfs_file_flush+0xfa>
                    return err;
 800e7b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e7ba:	e024      	b.n	800e806 <lfs_file_flush+0x192>
                }
            }
        } else {
            file->pos = lfs_max(file->pos, file->ctz.size);
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	4610      	mov	r0, r2
 800e7c8:	f7fb fe48 	bl	800a45c <lfs_max>
 800e7cc:	4602      	mov	r2, r0
 800e7ce:	683b      	ldr	r3, [r7, #0]
 800e7d0:	635a      	str	r2, [r3, #52]	; 0x34
 800e7d2:	e000      	b.n	800e7d6 <lfs_file_flush+0x162>
                break;
 800e7d4:	bf00      	nop
        }

        // actual file updates
        file->ctz.head = file->block;
 800e7d6:	683b      	ldr	r3, [r7, #0]
 800e7d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	629a      	str	r2, [r3, #40]	; 0x28
        file->ctz.size = file->pos;
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7e2:	683b      	ldr	r3, [r7, #0]
 800e7e4:	62da      	str	r2, [r3, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
 800e7e6:	683b      	ldr	r3, [r7, #0]
 800e7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	631a      	str	r2, [r3, #48]	; 0x30
        file->flags |= LFS_F_DIRTY;
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	631a      	str	r2, [r3, #48]	; 0x30

        file->pos = pos;
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e802:	635a      	str	r2, [r3, #52]	; 0x34
    }

    return 0;
 800e804:	2300      	movs	r3, #0
}
 800e806:	4618      	mov	r0, r3
 800e808:	3774      	adds	r7, #116	; 0x74
 800e80a:	46bd      	mov	sp, r7
 800e80c:	bd90      	pop	{r4, r7, pc}
 800e80e:	bf00      	nop
 800e810:	08023064 	.word	0x08023064
 800e814:	08022f58 	.word	0x08022f58
 800e818:	0802310c 	.word	0x0802310c

0800e81c <lfs_file_rawsync>:
#endif

#ifndef LFS_READONLY
static int lfs_file_rawsync(lfs_t *lfs, lfs_file_t *file) {
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b090      	sub	sp, #64	; 0x40
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
    if (file->flags & LFS_F_ERRED) {
 800e826:	683b      	ldr	r3, [r7, #0]
 800e828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e82a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d001      	beq.n	800e836 <lfs_file_rawsync+0x1a>
        // it's not safe to do anything if our file errored
        return 0;
 800e832:	2300      	movs	r3, #0
 800e834:	e07a      	b.n	800e92c <lfs_file_rawsync+0x110>
    }

    int err = lfs_file_flush(lfs, file);
 800e836:	6839      	ldr	r1, [r7, #0]
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f7ff ff1b 	bl	800e674 <lfs_file_flush>
 800e83e:	6338      	str	r0, [r7, #48]	; 0x30
    if (err) {
 800e840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e842:	2b00      	cmp	r3, #0
 800e844:	d007      	beq.n	800e856 <lfs_file_rawsync+0x3a>
        file->flags |= LFS_F_ERRED;
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e84a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	631a      	str	r2, [r3, #48]	; 0x30
        return err;
 800e852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e854:	e06a      	b.n	800e92c <lfs_file_rawsync+0x110>
    }


    if ((file->flags & LFS_F_DIRTY) &&
 800e856:	683b      	ldr	r3, [r7, #0]
 800e858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e85a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d063      	beq.n	800e92a <lfs_file_rawsync+0x10e>
            !lfs_pair_isnull(file->m.pair)) {
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	3308      	adds	r3, #8
 800e866:	4618      	mov	r0, r3
 800e868:	f7fc fa1b 	bl	800aca2 <lfs_pair_isnull>
 800e86c:	4603      	mov	r3, r0
 800e86e:	f083 0301 	eor.w	r3, r3, #1
 800e872:	b2db      	uxtb	r3, r3
    if ((file->flags & LFS_F_DIRTY) &&
 800e874:	2b00      	cmp	r3, #0
 800e876:	d058      	beq.n	800e92a <lfs_file_rawsync+0x10e>
        // update dir entry
        uint16_t type;
        const void *buffer;
        lfs_size_t size;
        struct lfs_ctz ctz;
        if (file->flags & LFS_F_INLINE) {
 800e878:	683b      	ldr	r3, [r7, #0]
 800e87a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e87c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e880:	2b00      	cmp	r3, #0
 800e882:	d009      	beq.n	800e898 <lfs_file_rawsync+0x7c>
            // inline the whole file
            type = LFS_TYPE_INLINESTRUCT;
 800e884:	f240 2301 	movw	r3, #513	; 0x201
 800e888:	87fb      	strh	r3, [r7, #62]	; 0x3e
            buffer = file->cache.buffer;
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e88e:	63bb      	str	r3, [r7, #56]	; 0x38
            size = file->ctz.size;
 800e890:	683b      	ldr	r3, [r7, #0]
 800e892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e894:	637b      	str	r3, [r7, #52]	; 0x34
 800e896:	e014      	b.n	800e8c2 <lfs_file_rawsync+0xa6>
        } else {
            // update the ctz reference
            type = LFS_TYPE_CTZSTRUCT;
 800e898:	f240 2302 	movw	r3, #514	; 0x202
 800e89c:	87fb      	strh	r3, [r7, #62]	; 0x3e
            // copy ctz so alloc will work during a relocate
            ctz = file->ctz;
 800e89e:	683a      	ldr	r2, [r7, #0]
 800e8a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8a4:	3228      	adds	r2, #40	; 0x28
 800e8a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e8aa:	e883 0003 	stmia.w	r3, {r0, r1}
            lfs_ctz_tole32(&ctz);
 800e8ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f7fc fc16 	bl	800b0e4 <lfs_ctz_tole32>
            buffer = &ctz;
 800e8b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8bc:	63bb      	str	r3, [r7, #56]	; 0x38
            size = sizeof(ctz);
 800e8be:	2308      	movs	r3, #8
 800e8c0:	637b      	str	r3, [r7, #52]	; 0x34
        }

        // commit file data and attributes
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
 800e8c2:	683b      	ldr	r3, [r7, #0]
 800e8c4:	f103 0108 	add.w	r1, r3, #8
 800e8c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e8ca:	051a      	lsls	r2, r3, #20
 800e8cc:	683b      	ldr	r3, [r7, #0]
 800e8ce:	889b      	ldrh	r3, [r3, #4]
 800e8d0:	029b      	lsls	r3, r3, #10
 800e8d2:	431a      	orrs	r2, r3
 800e8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	61bb      	str	r3, [r7, #24]
 800e8da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8dc:	61fb      	str	r3, [r7, #28]
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	889b      	ldrh	r3, [r3, #4]
 800e8e2:	029a      	lsls	r2, r3, #10
 800e8e4:	683b      	ldr	r3, [r7, #0]
 800e8e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8e8:	689b      	ldr	r3, [r3, #8]
 800e8ea:	4313      	orrs	r3, r2
 800e8ec:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
 800e8f0:	623b      	str	r3, [r7, #32]
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	627b      	str	r3, [r7, #36]	; 0x24
 800e8fa:	f107 0218 	add.w	r2, r7, #24
 800e8fe:	2302      	movs	r3, #2
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f7fe fca1 	bl	800d248 <lfs_dir_commit>
 800e906:	6338      	str	r0, [r7, #48]	; 0x30
                {LFS_MKTAG(type, file->id, size), buffer},
                {LFS_MKTAG(LFS_FROM_USERATTRS, file->id,
                    file->cfg->attr_count), file->cfg->attrs}));
        if (err) {
 800e908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d007      	beq.n	800e91e <lfs_file_rawsync+0x102>
            file->flags |= LFS_F_ERRED;
 800e90e:	683b      	ldr	r3, [r7, #0]
 800e910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e912:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800e91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91c:	e006      	b.n	800e92c <lfs_file_rawsync+0x110>
        }

        file->flags &= ~LFS_F_DIRTY;
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e922:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	631a      	str	r2, [r3, #48]	; 0x30
    }

    return 0;
 800e92a:	2300      	movs	r3, #0
}
 800e92c:	4618      	mov	r0, r3
 800e92e:	3740      	adds	r7, #64	; 0x40
 800e930:	46bd      	mov	sp, r7
 800e932:	bd80      	pop	{r7, pc}

0800e934 <lfs_file_rawread>:
#endif

static lfs_ssize_t lfs_file_rawread(lfs_t *lfs, lfs_file_t *file,
        void *buffer, lfs_size_t size) {
 800e934:	b5b0      	push	{r4, r5, r7, lr}
 800e936:	b092      	sub	sp, #72	; 0x48
 800e938:	af06      	add	r7, sp, #24
 800e93a:	60f8      	str	r0, [r7, #12]
 800e93c:	60b9      	str	r1, [r7, #8]
 800e93e:	607a      	str	r2, [r7, #4]
 800e940:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_RDONLY) == LFS_O_RDONLY);
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e946:	f003 0301 	and.w	r3, r3, #1
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d106      	bne.n	800e95c <lfs_file_rawread+0x28>
 800e94e:	4b6f      	ldr	r3, [pc, #444]	; (800eb0c <lfs_file_rawread+0x1d8>)
 800e950:	4a6f      	ldr	r2, [pc, #444]	; (800eb10 <lfs_file_rawread+0x1dc>)
 800e952:	f640 3138 	movw	r1, #2872	; 0xb38
 800e956:	486f      	ldr	r0, [pc, #444]	; (800eb14 <lfs_file_rawread+0x1e0>)
 800e958:	f012 fad8 	bl	8020f0c <__assert_func>

    uint8_t *data = buffer;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	62fb      	str	r3, [r7, #44]	; 0x2c
    lfs_size_t nsize = size;
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	62bb      	str	r3, [r7, #40]	; 0x28

#ifndef LFS_READONLY
    if (file->flags & LFS_F_WRITING) {
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d009      	beq.n	800e984 <lfs_file_rawread+0x50>
        // flush out any writes
        int err = lfs_file_flush(lfs, file);
 800e970:	68b9      	ldr	r1, [r7, #8]
 800e972:	68f8      	ldr	r0, [r7, #12]
 800e974:	f7ff fe7e 	bl	800e674 <lfs_file_flush>
 800e978:	6278      	str	r0, [r7, #36]	; 0x24
        if (err) {
 800e97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d001      	beq.n	800e984 <lfs_file_rawread+0x50>
            return err;
 800e980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e982:	e0bf      	b.n	800eb04 <lfs_file_rawread+0x1d0>
        }
    }
#endif

    if (file->pos >= file->ctz.size) {
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e988:	68bb      	ldr	r3, [r7, #8]
 800e98a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e98c:	429a      	cmp	r2, r3
 800e98e:	d301      	bcc.n	800e994 <lfs_file_rawread+0x60>
        // eof if past end
        return 0;
 800e990:	2300      	movs	r3, #0
 800e992:	e0b7      	b.n	800eb04 <lfs_file_rawread+0x1d0>
    }

    size = lfs_min(size, file->ctz.size - file->pos);
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e99c:	1ad3      	subs	r3, r2, r3
 800e99e:	4619      	mov	r1, r3
 800e9a0:	6838      	ldr	r0, [r7, #0]
 800e9a2:	f7fb fd6b 	bl	800a47c <lfs_min>
 800e9a6:	6038      	str	r0, [r7, #0]
    nsize = size;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	62bb      	str	r3, [r7, #40]	; 0x28

    while (nsize > 0) {
 800e9ac:	e0a5      	b.n	800eafa <lfs_file_rawread+0x1c6>
        // check if we need a new block
        if (!(file->flags & LFS_F_READING) ||
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d006      	beq.n	800e9c8 <lfs_file_rawread+0x94>
                file->off == lfs->cfg->block_size) {
 800e9ba:	68bb      	ldr	r3, [r7, #8]
 800e9bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e9c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (!(file->flags & LFS_F_READING) ||
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d130      	bne.n	800ea2a <lfs_file_rawread+0xf6>
            if (!(file->flags & LFS_F_INLINE)) {
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d11c      	bne.n	800ea0e <lfs_file_rawread+0xda>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800e9d4:	68bb      	ldr	r3, [r7, #8]
 800e9d6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800e9da:	68bb      	ldr	r3, [r7, #8]
 800e9dc:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800e9e6:	68b9      	ldr	r1, [r7, #8]
 800e9e8:	3138      	adds	r1, #56	; 0x38
 800e9ea:	68b8      	ldr	r0, [r7, #8]
 800e9ec:	303c      	adds	r0, #60	; 0x3c
 800e9ee:	9003      	str	r0, [sp, #12]
 800e9f0:	9102      	str	r1, [sp, #8]
 800e9f2:	9201      	str	r2, [sp, #4]
 800e9f4:	9300      	str	r3, [sp, #0]
 800e9f6:	462b      	mov	r3, r5
 800e9f8:	4622      	mov	r2, r4
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	68f8      	ldr	r0, [r7, #12]
 800e9fe:	f7ff f94d 	bl	800dc9c <lfs_ctz_find>
 800ea02:	6238      	str	r0, [r7, #32]
                        file->ctz.head, file->ctz.size,
                        file->pos, &file->block, &file->off);
                if (err) {
 800ea04:	6a3b      	ldr	r3, [r7, #32]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d009      	beq.n	800ea1e <lfs_file_rawread+0xea>
                    return err;
 800ea0a:	6a3b      	ldr	r3, [r7, #32]
 800ea0c:	e07a      	b.n	800eb04 <lfs_file_rawread+0x1d0>
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	f06f 0201 	mvn.w	r2, #1
 800ea14:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_READING;
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // read as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	4619      	mov	r1, r3
 800ea38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea3a:	f7fb fd1f 	bl	800a47c <lfs_min>
 800ea3e:	61f8      	str	r0, [r7, #28]
        if (file->flags & LFS_F_INLINE) {
 800ea40:	68bb      	ldr	r3, [r7, #8]
 800ea42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d026      	beq.n	800ea9a <lfs_file_rawread+0x166>
            int err = lfs_dir_getread(lfs, &file->m,
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	f103 0408 	add.w	r4, r3, #8
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	f103 0540 	add.w	r5, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ea5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                    LFS_MKTAG(0xfff, 0x1ff, 0),
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	889b      	ldrh	r3, [r3, #4]
 800ea62:	029b      	lsls	r3, r3, #10
            int err = lfs_dir_getread(lfs, &file->m,
 800ea64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ea68:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ea6c:	68b9      	ldr	r1, [r7, #8]
 800ea6e:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 800ea70:	69f8      	ldr	r0, [r7, #28]
 800ea72:	9005      	str	r0, [sp, #20]
 800ea74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ea76:	9004      	str	r0, [sp, #16]
 800ea78:	9103      	str	r1, [sp, #12]
 800ea7a:	9302      	str	r3, [sp, #8]
 800ea7c:	4b26      	ldr	r3, [pc, #152]	; (800eb18 <lfs_file_rawread+0x1e4>)
 800ea7e:	9301      	str	r3, [sp, #4]
 800ea80:	9200      	str	r2, [sp, #0]
 800ea82:	462b      	mov	r3, r5
 800ea84:	2200      	movs	r2, #0
 800ea86:	4621      	mov	r1, r4
 800ea88:	68f8      	ldr	r0, [r7, #12]
 800ea8a:	f7fc fe10 	bl	800b6ae <lfs_dir_getread>
 800ea8e:	6178      	str	r0, [r7, #20]
                    file->off, data, diff);
            if (err) {
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d01d      	beq.n	800ead2 <lfs_file_rawread+0x19e>
                return err;
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	e034      	b.n	800eb04 <lfs_file_rawread+0x1d0>
            }
        } else {
            int err = lfs_bd_read(lfs,
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	f103 0040 	add.w	r0, r3, #64	; 0x40
                    NULL, &file->cache, lfs->cfg->block_size,
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eaa4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
            int err = lfs_bd_read(lfs,
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800eaae:	69f9      	ldr	r1, [r7, #28]
 800eab0:	9103      	str	r1, [sp, #12]
 800eab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800eab4:	9102      	str	r1, [sp, #8]
 800eab6:	9201      	str	r2, [sp, #4]
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	4623      	mov	r3, r4
 800eabc:	4602      	mov	r2, r0
 800eabe:	2100      	movs	r1, #0
 800eac0:	68f8      	ldr	r0, [r7, #12]
 800eac2:	f7fb fdb7 	bl	800a634 <lfs_bd_read>
 800eac6:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d001      	beq.n	800ead2 <lfs_file_rawread+0x19e>
                return err;
 800eace:	69bb      	ldr	r3, [r7, #24]
 800ead0:	e018      	b.n	800eb04 <lfs_file_rawread+0x1d0>
            }
        }

        file->pos += diff;
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	441a      	add	r2, r3
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	441a      	add	r2, r3
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800eaea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	4413      	add	r3, r2
 800eaf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        nsize -= diff;
 800eaf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800eaf4:	69fb      	ldr	r3, [r7, #28]
 800eaf6:	1ad3      	subs	r3, r2, r3
 800eaf8:	62bb      	str	r3, [r7, #40]	; 0x28
    while (nsize > 0) {
 800eafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	f47f af56 	bne.w	800e9ae <lfs_file_rawread+0x7a>
    }

    return size;
 800eb02:	683b      	ldr	r3, [r7, #0]
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3730      	adds	r7, #48	; 0x30
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bdb0      	pop	{r4, r5, r7, pc}
 800eb0c:	080231b4 	.word	0x080231b4
 800eb10:	08026ea4 	.word	0x08026ea4
 800eb14:	08022f58 	.word	0x08022f58
 800eb18:	fff7fc00 	.word	0xfff7fc00

0800eb1c <lfs_file_rawwrite>:

#ifndef LFS_READONLY
static lfs_ssize_t lfs_file_rawwrite(lfs_t *lfs, lfs_file_t *file,
        const void *buffer, lfs_size_t size) {
 800eb1c:	b5b0      	push	{r4, r5, r7, lr}
 800eb1e:	b094      	sub	sp, #80	; 0x50
 800eb20:	af04      	add	r7, sp, #16
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
 800eb28:	603b      	str	r3, [r7, #0]
    LFS_ASSERT((file->flags & LFS_O_WRONLY) == LFS_O_WRONLY);
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb2e:	f003 0302 	and.w	r3, r3, #2
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d106      	bne.n	800eb44 <lfs_file_rawwrite+0x28>
 800eb36:	4b85      	ldr	r3, [pc, #532]	; (800ed4c <lfs_file_rawwrite+0x230>)
 800eb38:	4a85      	ldr	r2, [pc, #532]	; (800ed50 <lfs_file_rawwrite+0x234>)
 800eb3a:	f640 3182 	movw	r1, #2946	; 0xb82
 800eb3e:	4885      	ldr	r0, [pc, #532]	; (800ed54 <lfs_file_rawwrite+0x238>)
 800eb40:	f012 f9e4 	bl	8020f0c <__assert_func>

    const uint8_t *data = buffer;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	63fb      	str	r3, [r7, #60]	; 0x3c
    lfs_size_t nsize = size;
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	63bb      	str	r3, [r7, #56]	; 0x38

    if (file->flags & LFS_F_READING) {
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d009      	beq.n	800eb6c <lfs_file_rawwrite+0x50>
        // drop any reads
        int err = lfs_file_flush(lfs, file);
 800eb58:	68b9      	ldr	r1, [r7, #8]
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f7ff fd8a 	bl	800e674 <lfs_file_flush>
 800eb60:	6378      	str	r0, [r7, #52]	; 0x34
        if (err) {
 800eb62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d001      	beq.n	800eb6c <lfs_file_rawwrite+0x50>
            return err;
 800eb68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb6a:	e166      	b.n	800ee3a <lfs_file_rawwrite+0x31e>
        }
    }

    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d009      	beq.n	800eb8c <lfs_file_rawwrite+0x70>
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb80:	429a      	cmp	r2, r3
 800eb82:	d203      	bcs.n	800eb8c <lfs_file_rawwrite+0x70>
        file->pos = file->ctz.size;
 800eb84:	68bb      	ldr	r3, [r7, #8]
 800eb86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb88:	68bb      	ldr	r3, [r7, #8]
 800eb8a:	635a      	str	r2, [r3, #52]	; 0x34
    }

    if (file->pos + size > lfs->file_max) {
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb90:	683b      	ldr	r3, [r7, #0]
 800eb92:	441a      	add	r2, r3
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb98:	429a      	cmp	r2, r3
 800eb9a:	d902      	bls.n	800eba2 <lfs_file_rawwrite+0x86>
        // Larger than file limit?
        return LFS_ERR_FBIG;
 800eb9c:	f06f 031a 	mvn.w	r3, #26
 800eba0:	e14b      	b.n	800ee3a <lfs_file_rawwrite+0x31e>
    }

    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
 800eba2:	68bb      	ldr	r3, [r7, #8]
 800eba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d121      	bne.n	800ebf2 <lfs_file_rawwrite+0xd6>
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ebb2:	68bb      	ldr	r3, [r7, #8]
 800ebb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d91b      	bls.n	800ebf2 <lfs_file_rawwrite+0xd6>
        // fill with zeros
        lfs_off_t pos = file->pos;
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebbe:	633b      	str	r3, [r7, #48]	; 0x30
        file->pos = file->ctz.size;
 800ebc0:	68bb      	ldr	r3, [r7, #8]
 800ebc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	635a      	str	r2, [r3, #52]	; 0x34

        while (file->pos < pos) {
 800ebc8:	e00e      	b.n	800ebe8 <lfs_file_rawwrite+0xcc>
            lfs_ssize_t res = lfs_file_rawwrite(lfs, file, &(uint8_t){0}, 1);
 800ebca:	2300      	movs	r3, #0
 800ebcc:	75fb      	strb	r3, [r7, #23]
 800ebce:	f107 0217 	add.w	r2, r7, #23
 800ebd2:	2301      	movs	r3, #1
 800ebd4:	68b9      	ldr	r1, [r7, #8]
 800ebd6:	68f8      	ldr	r0, [r7, #12]
 800ebd8:	f7ff ffa0 	bl	800eb1c <lfs_file_rawwrite>
 800ebdc:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (res < 0) {
 800ebde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	da01      	bge.n	800ebe8 <lfs_file_rawwrite+0xcc>
                return res;
 800ebe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebe6:	e128      	b.n	800ee3a <lfs_file_rawwrite+0x31e>
        while (file->pos < pos) {
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ebee:	429a      	cmp	r2, r3
 800ebf0:	d8eb      	bhi.n	800ebca <lfs_file_rawwrite+0xae>
            }
        }
    }

    if ((file->flags & LFS_F_INLINE) &&
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ebf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f000 8112 	beq.w	800ee24 <lfs_file_rawwrite+0x308>
            lfs_max(file->pos+nsize, file->ctz.size) >
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec06:	441a      	add	r2, r3
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	4610      	mov	r0, r2
 800ec10:	f7fb fc24 	bl	800a45c <lfs_max>
 800ec14:	4604      	mov	r4, r0
            lfs_min(0x3fe, lfs_min(
                lfs->cfg->cache_size,
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                (lfs->cfg->metadata_max ?
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            lfs_min(0x3fe, lfs_min(
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d004      	beq.n	800ec30 <lfs_file_rawwrite+0x114>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
            lfs_min(0x3fe, lfs_min(
 800ec2c:	08db      	lsrs	r3, r3, #3
 800ec2e:	e003      	b.n	800ec38 <lfs_file_rawwrite+0x11c>
                    lfs->cfg->metadata_max : lfs->cfg->block_size) / 8))) {
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            lfs_min(0x3fe, lfs_min(
 800ec36:	08db      	lsrs	r3, r3, #3
 800ec38:	4619      	mov	r1, r3
 800ec3a:	4610      	mov	r0, r2
 800ec3c:	f7fb fc1e 	bl	800a47c <lfs_min>
 800ec40:	4603      	mov	r3, r0
 800ec42:	4619      	mov	r1, r3
 800ec44:	f240 30fe 	movw	r0, #1022	; 0x3fe
 800ec48:	f7fb fc18 	bl	800a47c <lfs_min>
 800ec4c:	4603      	mov	r3, r0
    if ((file->flags & LFS_F_INLINE) &&
 800ec4e:	429c      	cmp	r4, r3
 800ec50:	f240 80e8 	bls.w	800ee24 <lfs_file_rawwrite+0x308>
        // inline file doesn't fit anymore
        int err = lfs_file_outline(lfs, file);
 800ec54:	68b9      	ldr	r1, [r7, #8]
 800ec56:	68f8      	ldr	r0, [r7, #12]
 800ec58:	f7ff fcea 	bl	800e630 <lfs_file_outline>
 800ec5c:	62b8      	str	r0, [r7, #40]	; 0x28
        if (err) {
 800ec5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	f000 80df 	beq.w	800ee24 <lfs_file_rawwrite+0x308>
            file->flags |= LFS_F_ERRED;
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec6a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ec6e:	68bb      	ldr	r3, [r7, #8]
 800ec70:	631a      	str	r2, [r3, #48]	; 0x30
            return err;
 800ec72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec74:	e0e1      	b.n	800ee3a <lfs_file_rawwrite+0x31e>
        }
    }

    while (nsize > 0) {
        // check if we need a new block
        if (!(file->flags & LFS_F_WRITING) ||
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d006      	beq.n	800ec90 <lfs_file_rawwrite+0x174>
                file->off == lfs->cfg->block_size) {
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ec8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if (!(file->flags & LFS_F_WRITING) ||
 800ec8c:	429a      	cmp	r2, r3
 800ec8e:	d171      	bne.n	800ed74 <lfs_file_rawwrite+0x258>
            if (!(file->flags & LFS_F_INLINE)) {
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d15d      	bne.n	800ed58 <lfs_file_rawwrite+0x23c>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d12d      	bne.n	800ed04 <lfs_file_rawwrite+0x1e8>
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d029      	beq.n	800ed04 <lfs_file_rawwrite+0x1e8>
                    // find out which block we're extending from
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            file->ctz.head, file->ctz.size,
                            file->pos-1, &file->block, &file->off);
 800ecbe:	68ba      	ldr	r2, [r7, #8]
 800ecc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
 800ecc2:	3a01      	subs	r2, #1
 800ecc4:	68b9      	ldr	r1, [r7, #8]
 800ecc6:	3138      	adds	r1, #56	; 0x38
 800ecc8:	68b8      	ldr	r0, [r7, #8]
 800ecca:	303c      	adds	r0, #60	; 0x3c
 800eccc:	9003      	str	r0, [sp, #12]
 800ecce:	9102      	str	r1, [sp, #8]
 800ecd0:	9201      	str	r2, [sp, #4]
 800ecd2:	9300      	str	r3, [sp, #0]
 800ecd4:	462b      	mov	r3, r5
 800ecd6:	4622      	mov	r2, r4
 800ecd8:	2100      	movs	r1, #0
 800ecda:	68f8      	ldr	r0, [r7, #12]
 800ecdc:	f7fe ffde 	bl	800dc9c <lfs_ctz_find>
 800ece0:	6278      	str	r0, [r7, #36]	; 0x24
                    if (err) {
 800ece2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d007      	beq.n	800ecf8 <lfs_file_rawwrite+0x1dc>
                        file->flags |= LFS_F_ERRED;
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecec:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ecf0:	68bb      	ldr	r3, [r7, #8]
 800ecf2:	631a      	str	r2, [r3, #48]	; 0x30
                        return err;
 800ecf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf6:	e0a0      	b.n	800ee3a <lfs_file_rawwrite+0x31e>
                    }

                    // mark cache as dirty since we may have read data into it
                    lfs_cache_zero(lfs, &file->cache);
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	3340      	adds	r3, #64	; 0x40
 800ecfc:	4619      	mov	r1, r3
 800ecfe:	68f8      	ldr	r0, [r7, #12]
 800ed00:	f7fb fc81 	bl	800a606 <lfs_cache_zero>
                }

                // extend file with new blocks
                lfs_alloc_ack(lfs);
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	f7fc fafd 	bl	800b304 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800ed10:	68fc      	ldr	r4, [r7, #12]
 800ed12:	68bb      	ldr	r3, [r7, #8]
 800ed14:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800ed16:	68bb      	ldr	r3, [r7, #8]
 800ed18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed1a:	68ba      	ldr	r2, [r7, #8]
 800ed1c:	3238      	adds	r2, #56	; 0x38
 800ed1e:	68b9      	ldr	r1, [r7, #8]
 800ed20:	313c      	adds	r1, #60	; 0x3c
 800ed22:	9102      	str	r1, [sp, #8]
 800ed24:	9201      	str	r2, [sp, #4]
 800ed26:	9300      	str	r3, [sp, #0]
 800ed28:	462b      	mov	r3, r5
 800ed2a:	4622      	mov	r2, r4
 800ed2c:	4601      	mov	r1, r0
 800ed2e:	68f8      	ldr	r0, [r7, #12]
 800ed30:	f7ff f820 	bl	800dd74 <lfs_ctz_extend>
 800ed34:	6238      	str	r0, [r7, #32]
                        file->block, file->pos,
                        &file->block, &file->off);
                if (err) {
 800ed36:	6a3b      	ldr	r3, [r7, #32]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d015      	beq.n	800ed68 <lfs_file_rawwrite+0x24c>
                    file->flags |= LFS_F_ERRED;
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed40:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ed44:	68bb      	ldr	r3, [r7, #8]
 800ed46:	631a      	str	r2, [r3, #48]	; 0x30
                    return err;
 800ed48:	6a3b      	ldr	r3, [r7, #32]
 800ed4a:	e076      	b.n	800ee3a <lfs_file_rawwrite+0x31e>
 800ed4c:	080231e4 	.word	0x080231e4
 800ed50:	08026eb8 	.word	0x08026eb8
 800ed54:	08022f58 	.word	0x08022f58
                }
            } else {
                file->block = LFS_BLOCK_INLINE;
 800ed58:	68bb      	ldr	r3, [r7, #8]
 800ed5a:	f06f 0201 	mvn.w	r2, #1
 800ed5e:	639a      	str	r2, [r3, #56]	; 0x38
                file->off = file->pos;
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	63da      	str	r2, [r3, #60]	; 0x3c
            }

            file->flags |= LFS_F_WRITING;
 800ed68:	68bb      	ldr	r3, [r7, #8]
 800ed6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	631a      	str	r2, [r3, #48]	; 0x30
        }

        // program as much as we can in current block
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ed78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed7e:	1ad3      	subs	r3, r2, r3
 800ed80:	4619      	mov	r1, r3
 800ed82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed84:	f7fb fb7a 	bl	800a47c <lfs_min>
 800ed88:	61f8      	str	r0, [r7, #28]
        while (true) {
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800ed90:	68fc      	ldr	r4, [r7, #12]
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed96:	68ba      	ldr	r2, [r7, #8]
 800ed98:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ed9a:	69f9      	ldr	r1, [r7, #28]
 800ed9c:	9103      	str	r1, [sp, #12]
 800ed9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800eda0:	9102      	str	r1, [sp, #8]
 800eda2:	9201      	str	r2, [sp, #4]
 800eda4:	9300      	str	r3, [sp, #0]
 800eda6:	2301      	movs	r3, #1
 800eda8:	4622      	mov	r2, r4
 800edaa:	4601      	mov	r1, r0
 800edac:	68f8      	ldr	r0, [r7, #12]
 800edae:	f7fb fe87 	bl	800aac0 <lfs_bd_prog>
 800edb2:	61b8      	str	r0, [r7, #24]
                    file->block, file->off, data, diff);
            if (err) {
 800edb4:	69bb      	ldr	r3, [r7, #24]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d01c      	beq.n	800edf4 <lfs_file_rawwrite+0x2d8>
                if (err == LFS_ERR_CORRUPT) {
 800edba:	69bb      	ldr	r3, [r7, #24]
 800edbc:	f113 0f54 	cmn.w	r3, #84	; 0x54
 800edc0:	d007      	beq.n	800edd2 <lfs_file_rawwrite+0x2b6>
                    goto relocate;
                }
                file->flags |= LFS_F_ERRED;
 800edc2:	68bb      	ldr	r3, [r7, #8]
 800edc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edc6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800edce:	69bb      	ldr	r3, [r7, #24]
 800edd0:	e033      	b.n	800ee3a <lfs_file_rawwrite+0x31e>
                    goto relocate;
 800edd2:	bf00      	nop
            }

            break;
relocate:
            err = lfs_file_relocate(lfs, file);
 800edd4:	68b9      	ldr	r1, [r7, #8]
 800edd6:	68f8      	ldr	r0, [r7, #12]
 800edd8:	f7ff fb50 	bl	800e47c <lfs_file_relocate>
 800eddc:	61b8      	str	r0, [r7, #24]
            if (err) {
 800edde:	69bb      	ldr	r3, [r7, #24]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d0d2      	beq.n	800ed8a <lfs_file_rawwrite+0x26e>
                file->flags |= LFS_F_ERRED;
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800edec:	68bb      	ldr	r3, [r7, #8]
 800edee:	631a      	str	r2, [r3, #48]	; 0x30
                return err;
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	e022      	b.n	800ee3a <lfs_file_rawwrite+0x31e>
            break;
 800edf4:	bf00      	nop
            }
        }

        file->pos += diff;
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800edfa:	69fb      	ldr	r3, [r7, #28]
 800edfc:	441a      	add	r2, r3
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	635a      	str	r2, [r3, #52]	; 0x34
        file->off += diff;
 800ee02:	68bb      	ldr	r3, [r7, #8]
 800ee04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	441a      	add	r2, r3
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	63da      	str	r2, [r3, #60]	; 0x3c
        data += diff;
 800ee0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee10:	69fb      	ldr	r3, [r7, #28]
 800ee12:	4413      	add	r3, r2
 800ee14:	63fb      	str	r3, [r7, #60]	; 0x3c
        nsize -= diff;
 800ee16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee18:	69fb      	ldr	r3, [r7, #28]
 800ee1a:	1ad3      	subs	r3, r2, r3
 800ee1c:	63bb      	str	r3, [r7, #56]	; 0x38

        lfs_alloc_ack(lfs);
 800ee1e:	68f8      	ldr	r0, [r7, #12]
 800ee20:	f7fc fa70 	bl	800b304 <lfs_alloc_ack>
    while (nsize > 0) {
 800ee24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	f47f af25 	bne.w	800ec76 <lfs_file_rawwrite+0x15a>
    }

    file->flags &= ~LFS_F_ERRED;
 800ee2c:	68bb      	ldr	r3, [r7, #8]
 800ee2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ee34:	68bb      	ldr	r3, [r7, #8]
 800ee36:	631a      	str	r2, [r3, #48]	; 0x30
    return size;
 800ee38:	683b      	ldr	r3, [r7, #0]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3740      	adds	r7, #64	; 0x40
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bdb0      	pop	{r4, r5, r7, pc}
 800ee42:	bf00      	nop

0800ee44 <lfs_init>:
}
#endif


/// Filesystem operations ///
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b08c      	sub	sp, #48	; 0x30
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	6078      	str	r0, [r7, #4]
 800ee4c:	6039      	str	r1, [r7, #0]
    lfs->cfg = cfg;
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	683a      	ldr	r2, [r7, #0]
 800ee52:	669a      	str	r2, [r3, #104]	; 0x68
    int err = 0;
 800ee54:	2300      	movs	r3, #0
 800ee56:	62fb      	str	r3, [r7, #44]	; 0x2c

    // validate that the lfs-cfg sizes were initiated properly before
    // performing any arithmetic logics with them
    LFS_ASSERT(lfs->cfg->read_size != 0);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee5c:	69db      	ldr	r3, [r3, #28]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d106      	bne.n	800ee70 <lfs_init+0x2c>
 800ee62:	4b92      	ldr	r3, [pc, #584]	; (800f0ac <lfs_init+0x268>)
 800ee64:	4a92      	ldr	r2, [pc, #584]	; (800f0b0 <lfs_init+0x26c>)
 800ee66:	f640 51a4 	movw	r1, #3492	; 0xda4
 800ee6a:	4892      	ldr	r0, [pc, #584]	; (800f0b4 <lfs_init+0x270>)
 800ee6c:	f012 f84e 	bl	8020f0c <__assert_func>
    LFS_ASSERT(lfs->cfg->prog_size != 0);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee74:	6a1b      	ldr	r3, [r3, #32]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d106      	bne.n	800ee88 <lfs_init+0x44>
 800ee7a:	4b8f      	ldr	r3, [pc, #572]	; (800f0b8 <lfs_init+0x274>)
 800ee7c:	4a8c      	ldr	r2, [pc, #560]	; (800f0b0 <lfs_init+0x26c>)
 800ee7e:	f640 51a5 	movw	r1, #3493	; 0xda5
 800ee82:	488c      	ldr	r0, [pc, #560]	; (800f0b4 <lfs_init+0x270>)
 800ee84:	f012 f842 	bl	8020f0c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size != 0);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d106      	bne.n	800eea0 <lfs_init+0x5c>
 800ee92:	4b8a      	ldr	r3, [pc, #552]	; (800f0bc <lfs_init+0x278>)
 800ee94:	4a86      	ldr	r2, [pc, #536]	; (800f0b0 <lfs_init+0x26c>)
 800ee96:	f640 51a6 	movw	r1, #3494	; 0xda6
 800ee9a:	4886      	ldr	r0, [pc, #536]	; (800f0b4 <lfs_init+0x270>)
 800ee9c:	f012 f836 	bl	8020f0c <__assert_func>

    // check that block size is a multiple of cache size is a multiple
    // of prog and read sizes
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->read_size == 0);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eea6:	687a      	ldr	r2, [r7, #4]
 800eea8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800eeaa:	69d2      	ldr	r2, [r2, #28]
 800eeac:	fbb3 f1f2 	udiv	r1, r3, r2
 800eeb0:	fb01 f202 	mul.w	r2, r1, r2
 800eeb4:	1a9b      	subs	r3, r3, r2
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d006      	beq.n	800eec8 <lfs_init+0x84>
 800eeba:	4b81      	ldr	r3, [pc, #516]	; (800f0c0 <lfs_init+0x27c>)
 800eebc:	4a7c      	ldr	r2, [pc, #496]	; (800f0b0 <lfs_init+0x26c>)
 800eebe:	f640 51aa 	movw	r1, #3498	; 0xdaa
 800eec2:	487c      	ldr	r0, [pc, #496]	; (800f0b4 <lfs_init+0x270>)
 800eec4:	f012 f822 	bl	8020f0c <__assert_func>
    LFS_ASSERT(lfs->cfg->cache_size % lfs->cfg->prog_size == 0);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800eed2:	6a12      	ldr	r2, [r2, #32]
 800eed4:	fbb3 f1f2 	udiv	r1, r3, r2
 800eed8:	fb01 f202 	mul.w	r2, r1, r2
 800eedc:	1a9b      	subs	r3, r3, r2
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d006      	beq.n	800eef0 <lfs_init+0xac>
 800eee2:	4b78      	ldr	r3, [pc, #480]	; (800f0c4 <lfs_init+0x280>)
 800eee4:	4a72      	ldr	r2, [pc, #456]	; (800f0b0 <lfs_init+0x26c>)
 800eee6:	f640 51ab 	movw	r1, #3499	; 0xdab
 800eeea:	4872      	ldr	r0, [pc, #456]	; (800f0b4 <lfs_init+0x270>)
 800eeec:	f012 f80e 	bl	8020f0c <__assert_func>
    LFS_ASSERT(lfs->cfg->block_size % lfs->cfg->cache_size == 0);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eef6:	687a      	ldr	r2, [r7, #4]
 800eef8:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800eefa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800eefc:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef00:	fb01 f202 	mul.w	r2, r1, r2
 800ef04:	1a9b      	subs	r3, r3, r2
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d006      	beq.n	800ef18 <lfs_init+0xd4>
 800ef0a:	4b6f      	ldr	r3, [pc, #444]	; (800f0c8 <lfs_init+0x284>)
 800ef0c:	4a68      	ldr	r2, [pc, #416]	; (800f0b0 <lfs_init+0x26c>)
 800ef0e:	f640 51ac 	movw	r1, #3500	; 0xdac
 800ef12:	4868      	ldr	r0, [pc, #416]	; (800f0b4 <lfs_init+0x270>)
 800ef14:	f011 fffa 	bl	8020f0c <__assert_func>

    // check that the block size is large enough to fit ctz pointers
    LFS_ASSERT(4*lfs_npw2(0xffffffff / (lfs->cfg->block_size-2*4))
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef1e:	3b08      	subs	r3, #8
 800ef20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ef24:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef28:	4618      	mov	r0, r3
 800ef2a:	f7fb fade 	bl	800a4ea <lfs_npw2>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	009a      	lsls	r2, r3, #2
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef38:	429a      	cmp	r2, r3
 800ef3a:	d906      	bls.n	800ef4a <lfs_init+0x106>
 800ef3c:	4b63      	ldr	r3, [pc, #396]	; (800f0cc <lfs_init+0x288>)
 800ef3e:	4a5c      	ldr	r2, [pc, #368]	; (800f0b0 <lfs_init+0x26c>)
 800ef40:	f640 51af 	movw	r1, #3503	; 0xdaf
 800ef44:	485b      	ldr	r0, [pc, #364]	; (800f0b4 <lfs_init+0x270>)
 800ef46:	f011 ffe1 	bl	8020f0c <__assert_func>
    //
    // block_cycles is the number of erase cycles before littlefs evicts
    // metadata logs as a part of wear leveling. Suggested values are in the
    // range of 100-1000, or set block_cycles to -1 to disable block-level
    // wear-leveling.
    LFS_ASSERT(lfs->cfg->block_cycles != 0);
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d106      	bne.n	800ef62 <lfs_init+0x11e>
 800ef54:	4b5e      	ldr	r3, [pc, #376]	; (800f0d0 <lfs_init+0x28c>)
 800ef56:	4a56      	ldr	r2, [pc, #344]	; (800f0b0 <lfs_init+0x26c>)
 800ef58:	f640 51b8 	movw	r1, #3512	; 0xdb8
 800ef5c:	4855      	ldr	r0, [pc, #340]	; (800f0b4 <lfs_init+0x270>)
 800ef5e:	f011 ffd5 	bl	8020f0c <__assert_func>


    // setup read cache
    if (lfs->cfg->read_buffer) {
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d005      	beq.n	800ef78 <lfs_init+0x134>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	60da      	str	r2, [r3, #12]
 800ef76:	e010      	b.n	800ef9a <lfs_init+0x156>
    } else {
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f7fb fb1b 	bl	800a5ba <lfs_malloc>
 800ef84:	4602      	mov	r2, r0
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	60da      	str	r2, [r3, #12]
        if (!lfs->rcache.buffer) {
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	68db      	ldr	r3, [r3, #12]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d103      	bne.n	800ef9a <lfs_init+0x156>
            err = LFS_ERR_NOMEM;
 800ef92:	f06f 030b 	mvn.w	r3, #11
 800ef96:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800ef98:	e0fd      	b.n	800f196 <lfs_init+0x352>
        }
    }

    // setup program cache
    if (lfs->cfg->prog_buffer) {
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d005      	beq.n	800efb0 <lfs_init+0x16c>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	61da      	str	r2, [r3, #28]
 800efae:	e010      	b.n	800efd2 <lfs_init+0x18e>
    } else {
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800efb6:	4618      	mov	r0, r3
 800efb8:	f7fb faff 	bl	800a5ba <lfs_malloc>
 800efbc:	4602      	mov	r2, r0
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	61da      	str	r2, [r3, #28]
        if (!lfs->pcache.buffer) {
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	69db      	ldr	r3, [r3, #28]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d103      	bne.n	800efd2 <lfs_init+0x18e>
            err = LFS_ERR_NOMEM;
 800efca:	f06f 030b 	mvn.w	r3, #11
 800efce:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800efd0:	e0e1      	b.n	800f196 <lfs_init+0x352>
        }
    }

    // zero to avoid information leaks
    lfs_cache_zero(lfs, &lfs->rcache);
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	4619      	mov	r1, r3
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f7fb fb15 	bl	800a606 <lfs_cache_zero>
    lfs_cache_zero(lfs, &lfs->pcache);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	3310      	adds	r3, #16
 800efe0:	4619      	mov	r1, r3
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	f7fb fb0f 	bl	800a606 <lfs_cache_zero>

    // setup lookahead, must be multiple of 64-bits, 32-bit aligned
    LFS_ASSERT(lfs->cfg->lookahead_size > 0);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800efec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d106      	bne.n	800f000 <lfs_init+0x1bc>
 800eff2:	4b38      	ldr	r3, [pc, #224]	; (800f0d4 <lfs_init+0x290>)
 800eff4:	4a2e      	ldr	r2, [pc, #184]	; (800f0b0 <lfs_init+0x26c>)
 800eff6:	f640 51d6 	movw	r1, #3542	; 0xdd6
 800effa:	482e      	ldr	r0, [pc, #184]	; (800f0b4 <lfs_init+0x270>)
 800effc:	f011 ff86 	bl	8020f0c <__assert_func>
    LFS_ASSERT(lfs->cfg->lookahead_size % 8 == 0 &&
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f006:	f003 0307 	and.w	r3, r3, #7
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d106      	bne.n	800f01c <lfs_init+0x1d8>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f014:	f003 0303 	and.w	r3, r3, #3
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d006      	beq.n	800f02a <lfs_init+0x1e6>
 800f01c:	4b2e      	ldr	r3, [pc, #184]	; (800f0d8 <lfs_init+0x294>)
 800f01e:	4a24      	ldr	r2, [pc, #144]	; (800f0b0 <lfs_init+0x26c>)
 800f020:	f640 51d7 	movw	r1, #3543	; 0xdd7
 800f024:	4823      	ldr	r0, [pc, #140]	; (800f0b4 <lfs_init+0x270>)
 800f026:	f011 ff71 	bl	8020f0c <__assert_func>
            (uintptr_t)lfs->cfg->lookahead_buffer % 4 == 0);
    if (lfs->cfg->lookahead_buffer) {
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f030:	2b00      	cmp	r3, #0
 800f032:	d005      	beq.n	800f040 <lfs_init+0x1fc>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	665a      	str	r2, [r3, #100]	; 0x64
 800f03e:	e010      	b.n	800f062 <lfs_init+0x21e>
    } else {
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f046:	4618      	mov	r0, r3
 800f048:	f7fb fab7 	bl	800a5ba <lfs_malloc>
 800f04c:	4602      	mov	r2, r0
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	665a      	str	r2, [r3, #100]	; 0x64
        if (!lfs->free.buffer) {
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f056:	2b00      	cmp	r3, #0
 800f058:	d103      	bne.n	800f062 <lfs_init+0x21e>
            err = LFS_ERR_NOMEM;
 800f05a:	f06f 030b 	mvn.w	r3, #11
 800f05e:	62fb      	str	r3, [r7, #44]	; 0x2c
            goto cleanup;
 800f060:	e099      	b.n	800f196 <lfs_init+0x352>
        }
    }

    // check that the size limits are sane
    LFS_ASSERT(lfs->cfg->name_max <= LFS_NAME_MAX);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f068:	2bff      	cmp	r3, #255	; 0xff
 800f06a:	d906      	bls.n	800f07a <lfs_init+0x236>
 800f06c:	4b1b      	ldr	r3, [pc, #108]	; (800f0dc <lfs_init+0x298>)
 800f06e:	4a10      	ldr	r2, [pc, #64]	; (800f0b0 <lfs_init+0x26c>)
 800f070:	f640 51e4 	movw	r1, #3556	; 0xde4
 800f074:	480f      	ldr	r0, [pc, #60]	; (800f0b4 <lfs_init+0x270>)
 800f076:	f011 ff49 	bl	8020f0c <__assert_func>
    lfs->name_max = lfs->cfg->name_max;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f07e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	66da      	str	r2, [r3, #108]	; 0x6c
    if (!lfs->name_max) {
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d102      	bne.n	800f092 <lfs_init+0x24e>
        lfs->name_max = LFS_NAME_MAX;
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	22ff      	movs	r2, #255	; 0xff
 800f090:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    LFS_ASSERT(lfs->cfg->file_max <= LFS_FILE_MAX);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f098:	2b00      	cmp	r3, #0
 800f09a:	da23      	bge.n	800f0e4 <lfs_init+0x2a0>
 800f09c:	4b10      	ldr	r3, [pc, #64]	; (800f0e0 <lfs_init+0x29c>)
 800f09e:	4a04      	ldr	r2, [pc, #16]	; (800f0b0 <lfs_init+0x26c>)
 800f0a0:	f640 51ea 	movw	r1, #3562	; 0xdea
 800f0a4:	4803      	ldr	r0, [pc, #12]	; (800f0b4 <lfs_init+0x270>)
 800f0a6:	f011 ff31 	bl	8020f0c <__assert_func>
 800f0aa:	bf00      	nop
 800f0ac:	08023214 	.word	0x08023214
 800f0b0:	08026ecc 	.word	0x08026ecc
 800f0b4:	08022f58 	.word	0x08022f58
 800f0b8:	08023230 	.word	0x08023230
 800f0bc:	0802324c 	.word	0x0802324c
 800f0c0:	08023268 	.word	0x08023268
 800f0c4:	08023298 	.word	0x08023298
 800f0c8:	080232c8 	.word	0x080232c8
 800f0cc:	080232fc 	.word	0x080232fc
 800f0d0:	08023348 	.word	0x08023348
 800f0d4:	08023364 	.word	0x08023364
 800f0d8:	08023384 	.word	0x08023384
 800f0dc:	080233d8 	.word	0x080233d8
 800f0e0:	080233f4 	.word	0x080233f4
    lfs->file_max = lfs->cfg->file_max;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f0e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	671a      	str	r2, [r3, #112]	; 0x70
    if (!lfs->file_max) {
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d103      	bne.n	800f0fe <lfs_init+0x2ba>
        lfs->file_max = LFS_FILE_MAX;
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800f0fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    LFS_ASSERT(lfs->cfg->attr_max <= LFS_ATTR_MAX);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f104:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800f108:	4293      	cmp	r3, r2
 800f10a:	d906      	bls.n	800f11a <lfs_init+0x2d6>
 800f10c:	4b26      	ldr	r3, [pc, #152]	; (800f1a8 <lfs_init+0x364>)
 800f10e:	4a27      	ldr	r2, [pc, #156]	; (800f1ac <lfs_init+0x368>)
 800f110:	f44f 615f 	mov.w	r1, #3568	; 0xdf0
 800f114:	4826      	ldr	r0, [pc, #152]	; (800f1b0 <lfs_init+0x36c>)
 800f116:	f011 fef9 	bl	8020f0c <__assert_func>
    lfs->attr_max = lfs->cfg->attr_max;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f11e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	675a      	str	r2, [r3, #116]	; 0x74
    if (!lfs->attr_max) {
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d103      	bne.n	800f134 <lfs_init+0x2f0>
        lfs->attr_max = LFS_ATTR_MAX;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800f132:	675a      	str	r2, [r3, #116]	; 0x74
    }

    LFS_ASSERT(lfs->cfg->metadata_max <= lfs->cfg->block_size);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f138:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f140:	429a      	cmp	r2, r3
 800f142:	d906      	bls.n	800f152 <lfs_init+0x30e>
 800f144:	4b1b      	ldr	r3, [pc, #108]	; (800f1b4 <lfs_init+0x370>)
 800f146:	4a19      	ldr	r2, [pc, #100]	; (800f1ac <lfs_init+0x368>)
 800f148:	f640 51f6 	movw	r1, #3574	; 0xdf6
 800f14c:	4818      	ldr	r0, [pc, #96]	; (800f1b0 <lfs_init+0x36c>)
 800f14e:	f011 fedd 	bl	8020f0c <__assert_func>

    // setup default state
    lfs->root[0] = LFS_BLOCK_NULL;
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f158:	621a      	str	r2, [r3, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f160:	625a      	str	r2, [r3, #36]	; 0x24
    lfs->mlist = NULL;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	2200      	movs	r2, #0
 800f166:	629a      	str	r2, [r3, #40]	; 0x28
    lfs->seed = 0;
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	2200      	movs	r2, #0
 800f16c:	62da      	str	r2, [r3, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	333c      	adds	r3, #60	; 0x3c
 800f172:	2200      	movs	r2, #0
 800f174:	601a      	str	r2, [r3, #0]
 800f176:	605a      	str	r2, [r3, #4]
 800f178:	609a      	str	r2, [r3, #8]
    lfs->gstate = (lfs_gstate_t){0};
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	3330      	adds	r3, #48	; 0x30
 800f17e:	2200      	movs	r2, #0
 800f180:	601a      	str	r2, [r3, #0]
 800f182:	605a      	str	r2, [r3, #4]
 800f184:	609a      	str	r2, [r3, #8]
    lfs->gdelta = (lfs_gstate_t){0};
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	3348      	adds	r3, #72	; 0x48
 800f18a:	2200      	movs	r2, #0
 800f18c:	601a      	str	r2, [r3, #0]
 800f18e:	605a      	str	r2, [r3, #4]
 800f190:	609a      	str	r2, [r3, #8]
#ifdef LFS_MIGRATE
    lfs->lfs1 = NULL;
#endif

    return 0;
 800f192:	2300      	movs	r3, #0
 800f194:	e003      	b.n	800f19e <lfs_init+0x35a>

cleanup:
    lfs_deinit(lfs);
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 f80e 	bl	800f1b8 <lfs_deinit>
    return err;
 800f19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3730      	adds	r7, #48	; 0x30
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}
 800f1a6:	bf00      	nop
 800f1a8:	08023418 	.word	0x08023418
 800f1ac:	08026ecc 	.word	0x08026ecc
 800f1b0:	08022f58 	.word	0x08022f58
 800f1b4:	08023434 	.word	0x08023434

0800f1b8 <lfs_deinit>:

static int lfs_deinit(lfs_t *lfs) {
 800f1b8:	b580      	push	{r7, lr}
 800f1ba:	b082      	sub	sp, #8
 800f1bc:	af00      	add	r7, sp, #0
 800f1be:	6078      	str	r0, [r7, #4]
    // free allocated memory
    if (!lfs->cfg->read_buffer) {
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d104      	bne.n	800f1d4 <lfs_deinit+0x1c>
        lfs_free(lfs->rcache.buffer);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	68db      	ldr	r3, [r3, #12]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fb f9ff 	bl	800a5d2 <lfs_free>
    }

    if (!lfs->cfg->prog_buffer) {
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d104      	bne.n	800f1e8 <lfs_deinit+0x30>
        lfs_free(lfs->pcache.buffer);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	69db      	ldr	r3, [r3, #28]
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f7fb f9f5 	bl	800a5d2 <lfs_free>
    }

    if (!lfs->cfg->lookahead_buffer) {
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f1ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d104      	bne.n	800f1fc <lfs_deinit+0x44>
        lfs_free(lfs->free.buffer);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fb f9eb 	bl	800a5d2 <lfs_free>
    }

    return 0;
 800f1fc:	2300      	movs	r3, #0
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	3708      	adds	r7, #8
 800f202:	46bd      	mov	sp, r7
 800f204:	bd80      	pop	{r7, pc}
	...

0800f208 <lfs_rawformat>:

#ifndef LFS_READONLY
static int lfs_rawformat(lfs_t *lfs, const struct lfs_config *cfg) {
 800f208:	b580      	push	{r7, lr}
 800f20a:	b0a0      	sub	sp, #128	; 0x80
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
 800f210:	6039      	str	r1, [r7, #0]
    int err = 0;
 800f212:	2300      	movs	r3, #0
 800f214:	67fb      	str	r3, [r7, #124]	; 0x7c
    {
        err = lfs_init(lfs, cfg);
 800f216:	6839      	ldr	r1, [r7, #0]
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f7ff fe13 	bl	800ee44 <lfs_init>
 800f21e:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800f220:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f222:	2b00      	cmp	r3, #0
 800f224:	d001      	beq.n	800f22a <lfs_rawformat+0x22>
            return err;
 800f226:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f228:	e082      	b.n	800f330 <lfs_rawformat+0x128>
        }

        // create free lookahead
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6e58      	ldr	r0, [r3, #100]	; 0x64
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f234:	461a      	mov	r2, r3
 800f236:	2100      	movs	r1, #0
 800f238:	f012 fad4 	bl	80217e4 <memset>
        lfs->free.off = 0;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2200      	movs	r2, #0
 800f240:	655a      	str	r2, [r3, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f248:	00da      	lsls	r2, r3, #3
                lfs->cfg->block_count);
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f24e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
 800f250:	4619      	mov	r1, r3
 800f252:	4610      	mov	r0, r2
 800f254:	f7fb f912 	bl	800a47c <lfs_min>
 800f258:	4602      	mov	r2, r0
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	659a      	str	r2, [r3, #88]	; 0x58
        lfs->free.i = 0;
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	2200      	movs	r2, #0
 800f262:	65da      	str	r2, [r3, #92]	; 0x5c
        lfs_alloc_ack(lfs);
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f7fc f84d 	bl	800b304 <lfs_alloc_ack>

        // create root dir
        lfs_mdir_t root;
        err = lfs_dir_alloc(lfs, &root);
 800f26a:	f107 030c 	add.w	r3, r7, #12
 800f26e:	4619      	mov	r1, r3
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f7fd fb99 	bl	800c9a8 <lfs_dir_alloc>
 800f276:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800f278:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d14f      	bne.n	800f31e <lfs_rawformat+0x116>
            goto cleanup;
        }

        // write one superblock
        lfs_superblock_t superblock = {
 800f27e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f282:	667b      	str	r3, [r7, #100]	; 0x64
            .version     = LFS_DISK_VERSION,
            .block_size  = lfs->cfg->block_size,
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        lfs_superblock_t superblock = {
 800f28a:	66bb      	str	r3, [r7, #104]	; 0x68
            .block_count = lfs->cfg->block_count,
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        lfs_superblock_t superblock = {
 800f292:	66fb      	str	r3, [r7, #108]	; 0x6c
            .name_max    = lfs->name_max,
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        lfs_superblock_t superblock = {
 800f298:	673b      	str	r3, [r7, #112]	; 0x70
            .file_max    = lfs->file_max,
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
        lfs_superblock_t superblock = {
 800f29e:	677b      	str	r3, [r7, #116]	; 0x74
            .attr_max    = lfs->attr_max,
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
        lfs_superblock_t superblock = {
 800f2a4:	67bb      	str	r3, [r7, #120]	; 0x78
        };

        lfs_superblock_tole32(&superblock);
 800f2a6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	f7fb ff6a 	bl	800b184 <lfs_superblock_tole32>
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
 800f2b0:	4b21      	ldr	r3, [pc, #132]	; (800f338 <lfs_rawformat+0x130>)
 800f2b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	653b      	str	r3, [r7, #80]	; 0x50
 800f2b8:	4b20      	ldr	r3, [pc, #128]	; (800f33c <lfs_rawformat+0x134>)
 800f2ba:	657b      	str	r3, [r7, #84]	; 0x54
 800f2bc:	4b20      	ldr	r3, [pc, #128]	; (800f340 <lfs_rawformat+0x138>)
 800f2be:	65bb      	str	r3, [r7, #88]	; 0x58
 800f2c0:	4b20      	ldr	r3, [pc, #128]	; (800f344 <lfs_rawformat+0x13c>)
 800f2c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f2c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800f2c8:	663b      	str	r3, [r7, #96]	; 0x60
 800f2ca:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800f2ce:	f107 010c 	add.w	r1, r7, #12
 800f2d2:	2303      	movs	r3, #3
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7fd ffb7 	bl	800d248 <lfs_dir_commit>
 800f2da:	67f8      	str	r0, [r7, #124]	; 0x7c
                {LFS_MKTAG(LFS_TYPE_CREATE, 0, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8), "littlefs"},
                {LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock}));
        if (err) {
 800f2dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d11f      	bne.n	800f322 <lfs_rawformat+0x11a>
            goto cleanup;
        }

        // force compaction to prevent accidentally mounting any
        // older version of littlefs that may live on disk
        root.erased = false;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        err = lfs_dir_commit(lfs, &root, NULL, 0);
 800f2e8:	f107 010c 	add.w	r1, r7, #12
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	f7fd ffa9 	bl	800d248 <lfs_dir_commit>
 800f2f6:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800f2f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d113      	bne.n	800f326 <lfs_rawformat+0x11e>
            goto cleanup;
        }

        // sanity check that fetch works
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
 800f2fe:	2300      	movs	r3, #0
 800f300:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f302:	2301      	movs	r3, #1
 800f304:	633b      	str	r3, [r7, #48]	; 0x30
 800f306:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f30a:	f107 030c 	add.w	r3, r7, #12
 800f30e:	4619      	mov	r1, r3
 800f310:	6878      	ldr	r0, [r7, #4]
 800f312:	f7fc ffc5 	bl	800c2a0 <lfs_dir_fetch>
 800f316:	67f8      	str	r0, [r7, #124]	; 0x7c
        if (err) {
 800f318:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	e004      	b.n	800f328 <lfs_rawformat+0x120>
            goto cleanup;
 800f31e:	bf00      	nop
 800f320:	e002      	b.n	800f328 <lfs_rawformat+0x120>
            goto cleanup;
 800f322:	bf00      	nop
 800f324:	e000      	b.n	800f328 <lfs_rawformat+0x120>
            goto cleanup;
 800f326:	bf00      	nop
            goto cleanup;
        }
    }

cleanup:
    lfs_deinit(lfs);
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f7ff ff45 	bl	800f1b8 <lfs_deinit>
    return err;
 800f32e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c

}
 800f330:	4618      	mov	r0, r3
 800f332:	3780      	adds	r7, #128	; 0x80
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	40100000 	.word	0x40100000
 800f33c:	0ff00008 	.word	0x0ff00008
 800f340:	08023464 	.word	0x08023464
 800f344:	20100018 	.word	0x20100018

0800f348 <lfs_rawmount>:
#endif

static int lfs_rawmount(lfs_t *lfs, const struct lfs_config *cfg) {
 800f348:	b580      	push	{r7, lr}
 800f34a:	b09c      	sub	sp, #112	; 0x70
 800f34c:	af04      	add	r7, sp, #16
 800f34e:	6078      	str	r0, [r7, #4]
 800f350:	6039      	str	r1, [r7, #0]
    int err = lfs_init(lfs, cfg);
 800f352:	6839      	ldr	r1, [r7, #0]
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f7ff fd75 	bl	800ee44 <lfs_init>
 800f35a:	65f8      	str	r0, [r7, #92]	; 0x5c
    if (err) {
 800f35c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d001      	beq.n	800f366 <lfs_rawmount+0x1e>
        return err;
 800f362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f364:	e149      	b.n	800f5fa <lfs_rawmount+0x2b2>
    }

    // scan directory blocks for superblock and any global updates
    lfs_mdir_t dir = {.tail = {0, 1}};
 800f366:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f36a:	2220      	movs	r2, #32
 800f36c:	2100      	movs	r1, #0
 800f36e:	4618      	mov	r0, r3
 800f370:	f012 fa38 	bl	80217e4 <memset>
 800f374:	2301      	movs	r3, #1
 800f376:	64fb      	str	r3, [r7, #76]	; 0x4c
    lfs_block_t cycle = 0;
 800f378:	2300      	movs	r3, #0
 800f37a:	65bb      	str	r3, [r7, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
 800f37c:	e0dc      	b.n	800f538 <lfs_rawmount+0x1f0>
        if (cycle >= lfs->cfg->block_count/2) {
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f384:	085b      	lsrs	r3, r3, #1
 800f386:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f388:	429a      	cmp	r2, r3
 800f38a:	d303      	bcc.n	800f394 <lfs_rawmount+0x4c>
            // loop detected
            err = LFS_ERR_CORRUPT;
 800f38c:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800f390:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800f392:	e12e      	b.n	800f5f2 <lfs_rawmount+0x2aa>
        }
        cycle += 1;
 800f394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f396:	3301      	adds	r3, #1
 800f398:	65bb      	str	r3, [r7, #88]	; 0x58
        // fetch next block in tail list
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
                LFS_MKTAG(0x7ff, 0x3ff, 0),
                LFS_MKTAG(LFS_TYPE_SUPERBLOCK, 0, 8),
                NULL,
                lfs_dir_find_match, &(struct lfs_dir_find_match){
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	627b      	str	r3, [r7, #36]	; 0x24
 800f39e:	4b99      	ldr	r3, [pc, #612]	; (800f604 <lfs_rawmount+0x2bc>)
 800f3a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800f3a2:	2308      	movs	r3, #8
 800f3a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
 800f3a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f3aa:	f103 0218 	add.w	r2, r3, #24
 800f3ae:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f3b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3b6:	9303      	str	r3, [sp, #12]
 800f3b8:	4b93      	ldr	r3, [pc, #588]	; (800f608 <lfs_rawmount+0x2c0>)
 800f3ba:	9302      	str	r3, [sp, #8]
 800f3bc:	2300      	movs	r3, #0
 800f3be:	9301      	str	r3, [sp, #4]
 800f3c0:	4b92      	ldr	r3, [pc, #584]	; (800f60c <lfs_rawmount+0x2c4>)
 800f3c2:	9300      	str	r3, [sp, #0]
 800f3c4:	4b92      	ldr	r3, [pc, #584]	; (800f610 <lfs_rawmount+0x2c8>)
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f7fc fbfe 	bl	800bbc8 <lfs_dir_fetchmatch>
 800f3cc:	6578      	str	r0, [r7, #84]	; 0x54
                    lfs, "littlefs", 8});
        if (tag < 0) {
 800f3ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	da02      	bge.n	800f3da <lfs_rawmount+0x92>
            err = tag;
 800f3d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3d6:	65fb      	str	r3, [r7, #92]	; 0x5c
            goto cleanup;
 800f3d8:	e10b      	b.n	800f5f2 <lfs_rawmount+0x2aa>
        }

        // has superblock?
        if (tag && !lfs_tag_isdelete(tag)) {
 800f3da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	f000 809e 	beq.w	800f51e <lfs_rawmount+0x1d6>
 800f3e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	f7fb fd10 	bl	800ae0a <lfs_tag_isdelete>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	f083 0301 	eor.w	r3, r3, #1
 800f3f0:	b2db      	uxtb	r3, r3
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f000 8093 	beq.w	800f51e <lfs_rawmount+0x1d6>
            // update root
            lfs->root[0] = dir.pair[0];
 800f3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	621a      	str	r2, [r3, #32]
            lfs->root[1] = dir.pair[1];
 800f3fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	625a      	str	r2, [r3, #36]	; 0x24

            // grab superblock
            lfs_superblock_t superblock;
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
 800f404:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800f408:	f107 030c 	add.w	r3, r7, #12
 800f40c:	9300      	str	r3, [sp, #0]
 800f40e:	4b81      	ldr	r3, [pc, #516]	; (800f614 <lfs_rawmount+0x2cc>)
 800f410:	4a7f      	ldr	r2, [pc, #508]	; (800f610 <lfs_rawmount+0x2c8>)
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f7fc f930 	bl	800b678 <lfs_dir_get>
 800f418:	6578      	str	r0, [r7, #84]	; 0x54
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, sizeof(superblock)),
                    &superblock);
            if (tag < 0) {
 800f41a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	da02      	bge.n	800f426 <lfs_rawmount+0xde>
                err = tag;
 800f420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f422:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800f424:	e0e5      	b.n	800f5f2 <lfs_rawmount+0x2aa>
            }
            lfs_superblock_fromle32(&superblock);
 800f426:	f107 030c 	add.w	r3, r7, #12
 800f42a:	4618      	mov	r0, r3
 800f42c:	f7fb fe72 	bl	800b114 <lfs_superblock_fromle32>

            // check version
            uint16_t major_version = (0xffff & (superblock.version >> 16));
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	0c1b      	lsrs	r3, r3, #16
 800f434:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
 800f43e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800f442:	2b02      	cmp	r3, #2
 800f444:	d103      	bne.n	800f44e <lfs_rawmount+0x106>
 800f446:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d011      	beq.n	800f472 <lfs_rawmount+0x12a>
                 minor_version > LFS_DISK_VERSION_MINOR)) {
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
 800f44e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	; 0x52
 800f452:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800f456:	4970      	ldr	r1, [pc, #448]	; (800f618 <lfs_rawmount+0x2d0>)
 800f458:	9101      	str	r1, [sp, #4]
 800f45a:	9300      	str	r3, [sp, #0]
 800f45c:	4613      	mov	r3, r2
 800f45e:	f640 6291 	movw	r2, #3729	; 0xe91
 800f462:	496e      	ldr	r1, [pc, #440]	; (800f61c <lfs_rawmount+0x2d4>)
 800f464:	486e      	ldr	r0, [pc, #440]	; (800f620 <lfs_rawmount+0x2d8>)
 800f466:	f011 ffa7 	bl	80213b8 <iprintf>
                        major_version, minor_version);
                err = LFS_ERR_INVAL;
 800f46a:	f06f 0315 	mvn.w	r3, #21
 800f46e:	65fb      	str	r3, [r7, #92]	; 0x5c
                goto cleanup;
 800f470:	e054      	b.n	800f51c <lfs_rawmount+0x1d4>
            }

            // check superblock configuration
            if (superblock.name_max) {
 800f472:	69bb      	ldr	r3, [r7, #24]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d018      	beq.n	800f4aa <lfs_rawmount+0x162>
                if (superblock.name_max > lfs->name_max) {
 800f478:	69ba      	ldr	r2, [r7, #24]
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f47e:	429a      	cmp	r2, r3
 800f480:	d910      	bls.n	800f4a4 <lfs_rawmount+0x15c>
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
 800f482:	69ba      	ldr	r2, [r7, #24]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f488:	4963      	ldr	r1, [pc, #396]	; (800f618 <lfs_rawmount+0x2d0>)
 800f48a:	9101      	str	r1, [sp, #4]
 800f48c:	9300      	str	r3, [sp, #0]
 800f48e:	4613      	mov	r3, r2
 800f490:	f640 629a 	movw	r2, #3738	; 0xe9a
 800f494:	4961      	ldr	r1, [pc, #388]	; (800f61c <lfs_rawmount+0x2d4>)
 800f496:	4863      	ldr	r0, [pc, #396]	; (800f624 <lfs_rawmount+0x2dc>)
 800f498:	f011 ff8e 	bl	80213b8 <iprintf>
                            superblock.name_max, lfs->name_max);
                    err = LFS_ERR_INVAL;
 800f49c:	f06f 0315 	mvn.w	r3, #21
 800f4a0:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800f4a2:	e03b      	b.n	800f51c <lfs_rawmount+0x1d4>
                }

                lfs->name_max = superblock.name_max;
 800f4a4:	69ba      	ldr	r2, [r7, #24]
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	66da      	str	r2, [r3, #108]	; 0x6c
            }

            if (superblock.file_max) {
 800f4aa:	69fb      	ldr	r3, [r7, #28]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d018      	beq.n	800f4e2 <lfs_rawmount+0x19a>
                if (superblock.file_max > lfs->file_max) {
 800f4b0:	69fa      	ldr	r2, [r7, #28]
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d910      	bls.n	800f4dc <lfs_rawmount+0x194>
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
 800f4ba:	69fa      	ldr	r2, [r7, #28]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4c0:	4955      	ldr	r1, [pc, #340]	; (800f618 <lfs_rawmount+0x2d0>)
 800f4c2:	9101      	str	r1, [sp, #4]
 800f4c4:	9300      	str	r3, [sp, #0]
 800f4c6:	4613      	mov	r3, r2
 800f4c8:	f640 62a5 	movw	r2, #3749	; 0xea5
 800f4cc:	4953      	ldr	r1, [pc, #332]	; (800f61c <lfs_rawmount+0x2d4>)
 800f4ce:	4856      	ldr	r0, [pc, #344]	; (800f628 <lfs_rawmount+0x2e0>)
 800f4d0:	f011 ff72 	bl	80213b8 <iprintf>
                            superblock.file_max, lfs->file_max);
                    err = LFS_ERR_INVAL;
 800f4d4:	f06f 0315 	mvn.w	r3, #21
 800f4d8:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800f4da:	e01f      	b.n	800f51c <lfs_rawmount+0x1d4>
                }

                lfs->file_max = superblock.file_max;
 800f4dc:	69fa      	ldr	r2, [r7, #28]
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	671a      	str	r2, [r3, #112]	; 0x70
            }

            if (superblock.attr_max) {
 800f4e2:	6a3b      	ldr	r3, [r7, #32]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d01a      	beq.n	800f51e <lfs_rawmount+0x1d6>
                if (superblock.attr_max > lfs->attr_max) {
 800f4e8:	6a3a      	ldr	r2, [r7, #32]
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	d910      	bls.n	800f514 <lfs_rawmount+0x1cc>
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
 800f4f2:	6a3a      	ldr	r2, [r7, #32]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4f8:	4947      	ldr	r1, [pc, #284]	; (800f618 <lfs_rawmount+0x2d0>)
 800f4fa:	9101      	str	r1, [sp, #4]
 800f4fc:	9300      	str	r3, [sp, #0]
 800f4fe:	4613      	mov	r3, r2
 800f500:	f44f 626b 	mov.w	r2, #3760	; 0xeb0
 800f504:	4945      	ldr	r1, [pc, #276]	; (800f61c <lfs_rawmount+0x2d4>)
 800f506:	4849      	ldr	r0, [pc, #292]	; (800f62c <lfs_rawmount+0x2e4>)
 800f508:	f011 ff56 	bl	80213b8 <iprintf>
                            superblock.attr_max, lfs->attr_max);
                    err = LFS_ERR_INVAL;
 800f50c:	f06f 0315 	mvn.w	r3, #21
 800f510:	65fb      	str	r3, [r7, #92]	; 0x5c
                    goto cleanup;
 800f512:	e003      	b.n	800f51c <lfs_rawmount+0x1d4>
                }

                lfs->attr_max = superblock.attr_max;
 800f514:	6a3a      	ldr	r2, [r7, #32]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	675a      	str	r2, [r3, #116]	; 0x74
 800f51a:	e000      	b.n	800f51e <lfs_rawmount+0x1d6>
            goto cleanup;
 800f51c:	e069      	b.n	800f5f2 <lfs_rawmount+0x2aa>
            }
        }

        // has gstate?
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f524:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f528:	4619      	mov	r1, r3
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7fc fed4 	bl	800c2d8 <lfs_dir_getgstate>
 800f530:	65f8      	str	r0, [r7, #92]	; 0x5c
        if (err) {
 800f532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f534:	2b00      	cmp	r3, #0
 800f536:	d15b      	bne.n	800f5f0 <lfs_rawmount+0x2a8>
    while (!lfs_pair_isnull(dir.tail)) {
 800f538:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f53c:	3318      	adds	r3, #24
 800f53e:	4618      	mov	r0, r3
 800f540:	f7fb fbaf 	bl	800aca2 <lfs_pair_isnull>
 800f544:	4603      	mov	r3, r0
 800f546:	f083 0301 	eor.w	r3, r3, #1
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	f47f af16 	bne.w	800f37e <lfs_rawmount+0x36>
            goto cleanup;
        }
    }

    // found superblock?
    if (lfs_pair_isnull(lfs->root)) {
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	3320      	adds	r3, #32
 800f556:	4618      	mov	r0, r3
 800f558:	f7fb fba3 	bl	800aca2 <lfs_pair_isnull>
 800f55c:	4603      	mov	r3, r0
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d003      	beq.n	800f56a <lfs_rawmount+0x222>
        err = LFS_ERR_INVAL;
 800f562:	f06f 0315 	mvn.w	r3, #21
 800f566:	65fb      	str	r3, [r7, #92]	; 0x5c
        goto cleanup;
 800f568:	e043      	b.n	800f5f2 <lfs_rawmount+0x2aa>
    }

    // update littlefs with gstate
    if (!lfs_gstate_iszero(&lfs->gstate)) {
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	3330      	adds	r3, #48	; 0x30
 800f56e:	4618      	mov	r0, r3
 800f570:	f7fb fcee 	bl	800af50 <lfs_gstate_iszero>
 800f574:	4603      	mov	r3, r0
 800f576:	f083 0301 	eor.w	r3, r3, #1
 800f57a:	b2db      	uxtb	r3, r3
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d010      	beq.n	800f5a2 <lfs_rawmount+0x25a>
        LFS_DEBUG("Found pending gstate 0x%08"PRIx32"%08"PRIx32"%08"PRIx32,
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f588:	687a      	ldr	r2, [r7, #4]
 800f58a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f58c:	4822      	ldr	r0, [pc, #136]	; (800f618 <lfs_rawmount+0x2d0>)
 800f58e:	9002      	str	r0, [sp, #8]
 800f590:	9201      	str	r2, [sp, #4]
 800f592:	9300      	str	r3, [sp, #0]
 800f594:	460b      	mov	r3, r1
 800f596:	f640 62c9 	movw	r2, #3785	; 0xec9
 800f59a:	4920      	ldr	r1, [pc, #128]	; (800f61c <lfs_rawmount+0x2d4>)
 800f59c:	4824      	ldr	r0, [pc, #144]	; (800f630 <lfs_rawmount+0x2e8>)
 800f59e:	f011 ff0b 	bl	80213b8 <iprintf>
                lfs->gstate.tag,
                lfs->gstate.pair[0],
                lfs->gstate.pair[1]);
    }
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	f7fb fc21 	bl	800adee <lfs_tag_isvalid>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	f083 0301 	eor.w	r3, r3, #1
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	461a      	mov	r2, r3
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5ba:	441a      	add	r2, r3
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	687a      	ldr	r2, [r7, #4]
 800f5c4:	333c      	adds	r3, #60	; 0x3c
 800f5c6:	3230      	adds	r2, #48	; 0x30
 800f5c8:	ca07      	ldmia	r2, {r0, r1, r2}
 800f5ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    // setup free lookahead, to distribute allocations uniformly across
    // boots, we start the allocator at a random location
    lfs->free.off = lfs->seed % lfs->cfg->block_count;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f5d2:	687a      	ldr	r2, [r7, #4]
 800f5d4:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800f5d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800f5d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5dc:	fb01 f202 	mul.w	r2, r1, r2
 800f5e0:	1a9a      	subs	r2, r3, r2
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	655a      	str	r2, [r3, #84]	; 0x54
    lfs_alloc_drop(lfs);
 800f5e6:	6878      	ldr	r0, [r7, #4]
 800f5e8:	f7fb fe9b 	bl	800b322 <lfs_alloc_drop>

    return 0;
 800f5ec:	2300      	movs	r3, #0
 800f5ee:	e004      	b.n	800f5fa <lfs_rawmount+0x2b2>
            goto cleanup;
 800f5f0:	bf00      	nop

cleanup:
    lfs_rawunmount(lfs);
 800f5f2:	6878      	ldr	r0, [r7, #4]
 800f5f4:	f000 f81e 	bl	800f634 <lfs_rawunmount>
    return err;
 800f5f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3760      	adds	r7, #96	; 0x60
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}
 800f602:	bf00      	nop
 800f604:	08023464 	.word	0x08023464
 800f608:	0800c33d 	.word	0x0800c33d
 800f60c:	0ff00008 	.word	0x0ff00008
 800f610:	7ffffc00 	.word	0x7ffffc00
 800f614:	20100018 	.word	0x20100018
 800f618:	08023064 	.word	0x08023064
 800f61c:	08022f58 	.word	0x08022f58
 800f620:	08023470 	.word	0x08023470
 800f624:	0802349c 	.word	0x0802349c
 800f628:	080234d0 	.word	0x080234d0
 800f62c:	08023504 	.word	0x08023504
 800f630:	08023538 	.word	0x08023538

0800f634 <lfs_rawunmount>:

static int lfs_rawunmount(lfs_t *lfs) {
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
    return lfs_deinit(lfs);
 800f63c:	6878      	ldr	r0, [r7, #4]
 800f63e:	f7ff fdbb 	bl	800f1b8 <lfs_deinit>
 800f642:	4603      	mov	r3, r0
}
 800f644:	4618      	mov	r0, r3
 800f646:	3708      	adds	r7, #8
 800f648:	46bd      	mov	sp, r7
 800f64a:	bd80      	pop	{r7, pc}

0800f64c <lfs_fs_rawtraverse>:


/// Filesystem filesystem operations ///
int lfs_fs_rawtraverse(lfs_t *lfs,
        int (*cb)(void *data, lfs_block_t block), void *data,
        bool includeorphans) {
 800f64c:	b590      	push	{r4, r7, lr}
 800f64e:	b09d      	sub	sp, #116	; 0x74
 800f650:	af04      	add	r7, sp, #16
 800f652:	60f8      	str	r0, [r7, #12]
 800f654:	60b9      	str	r1, [r7, #8]
 800f656:	607a      	str	r2, [r7, #4]
 800f658:	70fb      	strb	r3, [r7, #3]
    // iterate over metadata pairs
    lfs_mdir_t dir = {.tail = {0, 1}};
 800f65a:	f107 0318 	add.w	r3, r7, #24
 800f65e:	2220      	movs	r2, #32
 800f660:	2100      	movs	r1, #0
 800f662:	4618      	mov	r0, r3
 800f664:	f012 f8be 	bl	80217e4 <memset>
 800f668:	2301      	movs	r3, #1
 800f66a:	637b      	str	r3, [r7, #52]	; 0x34
        dir.tail[0] = lfs->root[0];
        dir.tail[1] = lfs->root[1];
    }
#endif

    lfs_block_t cycle = 0;
 800f66c:	2300      	movs	r3, #0
 800f66e:	65fb      	str	r3, [r7, #92]	; 0x5c
    while (!lfs_pair_isnull(dir.tail)) {
 800f670:	e0a7      	b.n	800f7c2 <lfs_fs_rawtraverse+0x176>
        if (cycle >= lfs->cfg->block_count/2) {
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f678:	085b      	lsrs	r3, r3, #1
 800f67a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f67c:	429a      	cmp	r2, r3
 800f67e:	d302      	bcc.n	800f686 <lfs_fs_rawtraverse+0x3a>
            // loop detected
            return LFS_ERR_CORRUPT;
 800f680:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800f684:	e102      	b.n	800f88c <lfs_fs_rawtraverse+0x240>
        }
        cycle += 1;
 800f686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f688:	3301      	adds	r3, #1
 800f68a:	65fb      	str	r3, [r7, #92]	; 0x5c

        for (int i = 0; i < 2; i++) {
 800f68c:	2300      	movs	r3, #0
 800f68e:	65bb      	str	r3, [r7, #88]	; 0x58
 800f690:	e013      	b.n	800f6ba <lfs_fs_rawtraverse+0x6e>
            int err = cb(data, dir.tail[i]);
 800f692:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f694:	3306      	adds	r3, #6
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	3360      	adds	r3, #96	; 0x60
 800f69a:	443b      	add	r3, r7
 800f69c:	f853 2c48 	ldr.w	r2, [r3, #-72]
 800f6a0:	68bb      	ldr	r3, [r7, #8]
 800f6a2:	4611      	mov	r1, r2
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	4798      	blx	r3
 800f6a8:	63b8      	str	r0, [r7, #56]	; 0x38
            if (err) {
 800f6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d001      	beq.n	800f6b4 <lfs_fs_rawtraverse+0x68>
                return err;
 800f6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b2:	e0eb      	b.n	800f88c <lfs_fs_rawtraverse+0x240>
        for (int i = 0; i < 2; i++) {
 800f6b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6b6:	3301      	adds	r3, #1
 800f6b8:	65bb      	str	r3, [r7, #88]	; 0x58
 800f6ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f6bc:	2b01      	cmp	r3, #1
 800f6be:	dde8      	ble.n	800f692 <lfs_fs_rawtraverse+0x46>
            }
        }

        // iterate through ids in directory
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
 800f6c0:	f107 0318 	add.w	r3, r7, #24
 800f6c4:	f103 0218 	add.w	r2, r3, #24
 800f6c8:	f107 0318 	add.w	r3, r7, #24
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	68f8      	ldr	r0, [r7, #12]
 800f6d0:	f7fc fde6 	bl	800c2a0 <lfs_dir_fetch>
 800f6d4:	6438      	str	r0, [r7, #64]	; 0x40
        if (err) {
 800f6d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d001      	beq.n	800f6e0 <lfs_fs_rawtraverse+0x94>
            return err;
 800f6dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6de:	e0d5      	b.n	800f88c <lfs_fs_rawtraverse+0x240>
        }

        for (uint16_t id = 0; id < dir.count; id++) {
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f6e6:	e067      	b.n	800f7b8 <lfs_fs_rawtraverse+0x16c>
            struct lfs_ctz ctz;
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
 800f6e8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f6ec:	029b      	lsls	r3, r3, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
 800f6ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f6f2:	f043 0308 	orr.w	r3, r3, #8
 800f6f6:	f107 0118 	add.w	r1, r7, #24
 800f6fa:	f107 0210 	add.w	r2, r7, #16
 800f6fe:	9200      	str	r2, [sp, #0]
 800f700:	4a64      	ldr	r2, [pc, #400]	; (800f894 <lfs_fs_rawtraverse+0x248>)
 800f702:	68f8      	ldr	r0, [r7, #12]
 800f704:	f7fb ffb8 	bl	800b678 <lfs_dir_get>
 800f708:	63f8      	str	r0, [r7, #60]	; 0x3c
            if (tag < 0) {
 800f70a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	da05      	bge.n	800f71c <lfs_fs_rawtraverse+0xd0>
                if (tag == LFS_ERR_NOENT) {
 800f710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f712:	f113 0f02 	cmn.w	r3, #2
 800f716:	d049      	beq.n	800f7ac <lfs_fs_rawtraverse+0x160>
                    continue;
                }
                return tag;
 800f718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f71a:	e0b7      	b.n	800f88c <lfs_fs_rawtraverse+0x240>
            }
            lfs_ctz_fromle32(&ctz);
 800f71c:	f107 0310 	add.w	r3, r7, #16
 800f720:	4618      	mov	r0, r3
 800f722:	f7fb fcc7 	bl	800b0b4 <lfs_ctz_fromle32>

            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
 800f726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f728:	4618      	mov	r0, r3
 800f72a:	f7fb fb91 	bl	800ae50 <lfs_tag_type3>
 800f72e:	4603      	mov	r3, r0
 800f730:	461a      	mov	r2, r3
 800f732:	f240 2302 	movw	r3, #514	; 0x202
 800f736:	429a      	cmp	r2, r3
 800f738:	d113      	bne.n	800f762 <lfs_fs_rawtraverse+0x116>
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
 800f73a:	68f9      	ldr	r1, [r7, #12]
 800f73c:	6938      	ldr	r0, [r7, #16]
 800f73e:	697b      	ldr	r3, [r7, #20]
 800f740:	687a      	ldr	r2, [r7, #4]
 800f742:	9202      	str	r2, [sp, #8]
 800f744:	68ba      	ldr	r2, [r7, #8]
 800f746:	9201      	str	r2, [sp, #4]
 800f748:	9300      	str	r3, [sp, #0]
 800f74a:	4603      	mov	r3, r0
 800f74c:	460a      	mov	r2, r1
 800f74e:	2100      	movs	r1, #0
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f7fe fc17 	bl	800df84 <lfs_ctz_traverse>
 800f756:	6438      	str	r0, [r7, #64]	; 0x40
                        ctz.head, ctz.size, cb, data);
                if (err) {
 800f758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d027      	beq.n	800f7ae <lfs_fs_rawtraverse+0x162>
                    return err;
 800f75e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f760:	e094      	b.n	800f88c <lfs_fs_rawtraverse+0x240>
                }
            } else if (includeorphans &&
 800f762:	78fb      	ldrb	r3, [r7, #3]
 800f764:	2b00      	cmp	r3, #0
 800f766:	d022      	beq.n	800f7ae <lfs_fs_rawtraverse+0x162>
                    lfs_tag_type3(tag) == LFS_TYPE_DIRSTRUCT) {
 800f768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7fb fb70 	bl	800ae50 <lfs_tag_type3>
 800f770:	4603      	mov	r3, r0
            } else if (includeorphans &&
 800f772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f776:	d11a      	bne.n	800f7ae <lfs_fs_rawtraverse+0x162>
                for (int i = 0; i < 2; i++) {
 800f778:	2300      	movs	r3, #0
 800f77a:	653b      	str	r3, [r7, #80]	; 0x50
 800f77c:	e012      	b.n	800f7a4 <lfs_fs_rawtraverse+0x158>
                    err = cb(data, (&ctz.head)[i]);
 800f77e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	f107 0210 	add.w	r2, r7, #16
 800f786:	4413      	add	r3, r2
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	68bb      	ldr	r3, [r7, #8]
 800f78c:	4611      	mov	r1, r2
 800f78e:	6878      	ldr	r0, [r7, #4]
 800f790:	4798      	blx	r3
 800f792:	6438      	str	r0, [r7, #64]	; 0x40
                    if (err) {
 800f794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f796:	2b00      	cmp	r3, #0
 800f798:	d001      	beq.n	800f79e <lfs_fs_rawtraverse+0x152>
                        return err;
 800f79a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f79c:	e076      	b.n	800f88c <lfs_fs_rawtraverse+0x240>
                for (int i = 0; i < 2; i++) {
 800f79e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7a0:	3301      	adds	r3, #1
 800f7a2:	653b      	str	r3, [r7, #80]	; 0x50
 800f7a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	dde9      	ble.n	800f77e <lfs_fs_rawtraverse+0x132>
 800f7aa:	e000      	b.n	800f7ae <lfs_fs_rawtraverse+0x162>
                    continue;
 800f7ac:	bf00      	nop
        for (uint16_t id = 0; id < dir.count; id++) {
 800f7ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800f7b2:	3301      	adds	r3, #1
 800f7b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800f7b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f7ba:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d392      	bcc.n	800f6e8 <lfs_fs_rawtraverse+0x9c>
    while (!lfs_pair_isnull(dir.tail)) {
 800f7c2:	f107 0318 	add.w	r3, r7, #24
 800f7c6:	3318      	adds	r3, #24
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	f7fb fa6a 	bl	800aca2 <lfs_pair_isnull>
 800f7ce:	4603      	mov	r3, r0
 800f7d0:	f083 0301 	eor.w	r3, r3, #1
 800f7d4:	b2db      	uxtb	r3, r3
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	f47f af4b 	bne.w	800f672 <lfs_fs_rawtraverse+0x26>
        }
    }

#ifndef LFS_READONLY
    // iterate over any open files
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f7e2:	e04f      	b.n	800f884 <lfs_fs_rawtraverse+0x238>
        if (f->type != LFS_TYPE_REG) {
 800f7e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7e6:	799b      	ldrb	r3, [r3, #6]
 800f7e8:	2b01      	cmp	r3, #1
 800f7ea:	d147      	bne.n	800f87c <lfs_fs_rawtraverse+0x230>
            continue;
        }

        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
 800f7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d01d      	beq.n	800f834 <lfs_fs_rawtraverse+0x1e8>
 800f7f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f800:	2b00      	cmp	r3, #0
 800f802:	d117      	bne.n	800f834 <lfs_fs_rawtraverse+0x1e8>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800f804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f806:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f80a:	68f8      	ldr	r0, [r7, #12]
 800f80c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f80e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800f810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	9202      	str	r2, [sp, #8]
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	9201      	str	r2, [sp, #4]
 800f81c:	9300      	str	r3, [sp, #0]
 800f81e:	4623      	mov	r3, r4
 800f820:	4602      	mov	r2, r0
 800f822:	68f8      	ldr	r0, [r7, #12]
 800f824:	f7fe fbae 	bl	800df84 <lfs_ctz_traverse>
 800f828:	64b8      	str	r0, [r7, #72]	; 0x48
                    f->ctz.head, f->ctz.size, cb, data);
            if (err) {
 800f82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d001      	beq.n	800f834 <lfs_fs_rawtraverse+0x1e8>
                return err;
 800f830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f832:	e02b      	b.n	800f88c <lfs_fs_rawtraverse+0x240>
            }
        }

        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
 800f834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d01e      	beq.n	800f87e <lfs_fs_rawtraverse+0x232>
 800f840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d118      	bne.n	800f87e <lfs_fs_rawtraverse+0x232>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
 800f84c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f84e:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f852:	68f8      	ldr	r0, [r7, #12]
 800f854:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f856:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 800f858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f85c:	687a      	ldr	r2, [r7, #4]
 800f85e:	9202      	str	r2, [sp, #8]
 800f860:	68ba      	ldr	r2, [r7, #8]
 800f862:	9201      	str	r2, [sp, #4]
 800f864:	9300      	str	r3, [sp, #0]
 800f866:	4623      	mov	r3, r4
 800f868:	4602      	mov	r2, r0
 800f86a:	68f8      	ldr	r0, [r7, #12]
 800f86c:	f7fe fb8a 	bl	800df84 <lfs_ctz_traverse>
 800f870:	6478      	str	r0, [r7, #68]	; 0x44
                    f->block, f->pos, cb, data);
            if (err) {
 800f872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f874:	2b00      	cmp	r3, #0
 800f876:	d002      	beq.n	800f87e <lfs_fs_rawtraverse+0x232>
                return err;
 800f878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f87a:	e007      	b.n	800f88c <lfs_fs_rawtraverse+0x240>
            continue;
 800f87c:	bf00      	nop
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
 800f87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f886:	2b00      	cmp	r3, #0
 800f888:	d1ac      	bne.n	800f7e4 <lfs_fs_rawtraverse+0x198>
            }
        }
    }
#endif

    return 0;
 800f88a:	2300      	movs	r3, #0
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3764      	adds	r7, #100	; 0x64
 800f890:	46bd      	mov	sp, r7
 800f892:	bd90      	pop	{r4, r7, pc}
 800f894:	700ffc00 	.word	0x700ffc00

0800f898 <lfs_fs_pred>:

#ifndef LFS_READONLY
static int lfs_fs_pred(lfs_t *lfs,
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
 800f898:	b580      	push	{r7, lr}
 800f89a:	b086      	sub	sp, #24
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	60f8      	str	r0, [r7, #12]
 800f8a0:	60b9      	str	r1, [r7, #8]
 800f8a2:	607a      	str	r2, [r7, #4]
    // iterate over all directory directory entries
    pdir->tail[0] = 0;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	619a      	str	r2, [r3, #24]
    pdir->tail[1] = 1;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800f8b0:	2300      	movs	r3, #0
 800f8b2:	617b      	str	r3, [r7, #20]
    while (!lfs_pair_isnull(pdir->tail)) {
 800f8b4:	e024      	b.n	800f900 <lfs_fs_pred+0x68>
        if (cycle >= lfs->cfg->block_count/2) {
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8bc:	085b      	lsrs	r3, r3, #1
 800f8be:	697a      	ldr	r2, [r7, #20]
 800f8c0:	429a      	cmp	r2, r3
 800f8c2:	d302      	bcc.n	800f8ca <lfs_fs_pred+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800f8c4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800f8c8:	e027      	b.n	800f91a <lfs_fs_pred+0x82>
        }
        cycle += 1;
 800f8ca:	697b      	ldr	r3, [r7, #20]
 800f8cc:	3301      	adds	r3, #1
 800f8ce:	617b      	str	r3, [r7, #20]

        if (lfs_pair_cmp(pdir->tail, pair) == 0) {
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	3318      	adds	r3, #24
 800f8d4:	68b9      	ldr	r1, [r7, #8]
 800f8d6:	4618      	mov	r0, r3
 800f8d8:	f7fb f9fe 	bl	800acd8 <lfs_pair_cmp>
 800f8dc:	4603      	mov	r3, r0
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d101      	bne.n	800f8e6 <lfs_fs_pred+0x4e>
            return 0;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	e019      	b.n	800f91a <lfs_fs_pred+0x82>
        }

        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	3318      	adds	r3, #24
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	6879      	ldr	r1, [r7, #4]
 800f8ee:	68f8      	ldr	r0, [r7, #12]
 800f8f0:	f7fc fcd6 	bl	800c2a0 <lfs_dir_fetch>
 800f8f4:	6138      	str	r0, [r7, #16]
        if (err) {
 800f8f6:	693b      	ldr	r3, [r7, #16]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d001      	beq.n	800f900 <lfs_fs_pred+0x68>
            return err;
 800f8fc:	693b      	ldr	r3, [r7, #16]
 800f8fe:	e00c      	b.n	800f91a <lfs_fs_pred+0x82>
    while (!lfs_pair_isnull(pdir->tail)) {
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	3318      	adds	r3, #24
 800f904:	4618      	mov	r0, r3
 800f906:	f7fb f9cc 	bl	800aca2 <lfs_pair_isnull>
 800f90a:	4603      	mov	r3, r0
 800f90c:	f083 0301 	eor.w	r3, r3, #1
 800f910:	b2db      	uxtb	r3, r3
 800f912:	2b00      	cmp	r3, #0
 800f914:	d1cf      	bne.n	800f8b6 <lfs_fs_pred+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800f916:	f06f 0301 	mvn.w	r3, #1
}
 800f91a:	4618      	mov	r0, r3
 800f91c:	3718      	adds	r7, #24
 800f91e:	46bd      	mov	sp, r7
 800f920:	bd80      	pop	{r7, pc}

0800f922 <lfs_fs_parent_match>:
};
#endif

#ifndef LFS_READONLY
static int lfs_fs_parent_match(void *data,
        lfs_tag_t tag, const void *buffer) {
 800f922:	b5b0      	push	{r4, r5, r7, lr}
 800f924:	b08e      	sub	sp, #56	; 0x38
 800f926:	af04      	add	r7, sp, #16
 800f928:	60f8      	str	r0, [r7, #12]
 800f92a:	60b9      	str	r1, [r7, #8]
 800f92c:	607a      	str	r2, [r7, #4]
    struct lfs_fs_parent_match *find = data;
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	627b      	str	r3, [r7, #36]	; 0x24
    lfs_t *lfs = find->lfs;
 800f932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	623b      	str	r3, [r7, #32]
    const struct lfs_diskoff *disk = buffer;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	61fb      	str	r3, [r7, #28]
    (void)tag;

    lfs_block_t child[2];
    int err = lfs_bd_read(lfs,
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800f93c:	6a3b      	ldr	r3, [r7, #32]
 800f93e:	f103 0010 	add.w	r0, r3, #16
    int err = lfs_bd_read(lfs,
 800f942:	6a3c      	ldr	r4, [r7, #32]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
 800f944:	6a3b      	ldr	r3, [r7, #32]
 800f946:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f948:	6a5d      	ldr	r5, [r3, #36]	; 0x24
            disk->block, disk->off, &child, sizeof(child));
 800f94a:	69fb      	ldr	r3, [r7, #28]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	69fa      	ldr	r2, [r7, #28]
 800f950:	6852      	ldr	r2, [r2, #4]
    int err = lfs_bd_read(lfs,
 800f952:	2108      	movs	r1, #8
 800f954:	9103      	str	r1, [sp, #12]
 800f956:	f107 0110 	add.w	r1, r7, #16
 800f95a:	9102      	str	r1, [sp, #8]
 800f95c:	9201      	str	r2, [sp, #4]
 800f95e:	9300      	str	r3, [sp, #0]
 800f960:	462b      	mov	r3, r5
 800f962:	4622      	mov	r2, r4
 800f964:	4601      	mov	r1, r0
 800f966:	6a38      	ldr	r0, [r7, #32]
 800f968:	f7fa fe64 	bl	800a634 <lfs_bd_read>
 800f96c:	61b8      	str	r0, [r7, #24]
    if (err) {
 800f96e:	69bb      	ldr	r3, [r7, #24]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d001      	beq.n	800f978 <lfs_fs_parent_match+0x56>
        return err;
 800f974:	69bb      	ldr	r3, [r7, #24]
 800f976:	e012      	b.n	800f99e <lfs_fs_parent_match+0x7c>
    }

    lfs_pair_fromle32(child);
 800f978:	f107 0310 	add.w	r3, r7, #16
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fb fa02 	bl	800ad86 <lfs_pair_fromle32>
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
 800f982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f984:	1d1a      	adds	r2, r3, #4
 800f986:	f107 0310 	add.w	r3, r7, #16
 800f98a:	4611      	mov	r1, r2
 800f98c:	4618      	mov	r0, r3
 800f98e:	f7fb f9a3 	bl	800acd8 <lfs_pair_cmp>
 800f992:	4603      	mov	r3, r0
 800f994:	2b00      	cmp	r3, #0
 800f996:	bf14      	ite	ne
 800f998:	2301      	movne	r3, #1
 800f99a:	2300      	moveq	r3, #0
 800f99c:	b2db      	uxtb	r3, r3
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3728      	adds	r7, #40	; 0x28
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800f9a8 <lfs_fs_parent>:
#endif

#ifndef LFS_READONLY
static lfs_stag_t lfs_fs_parent(lfs_t *lfs, const lfs_block_t pair[2],
        lfs_mdir_t *parent) {
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b08e      	sub	sp, #56	; 0x38
 800f9ac:	af04      	add	r7, sp, #16
 800f9ae:	60f8      	str	r0, [r7, #12]
 800f9b0:	60b9      	str	r1, [r7, #8]
 800f9b2:	607a      	str	r2, [r7, #4]
    // use fetchmatch with callback to find pairs
    parent->tail[0] = 0;
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	2200      	movs	r2, #0
 800f9b8:	619a      	str	r2, [r3, #24]
    parent->tail[1] = 1;
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	2201      	movs	r2, #1
 800f9be:	61da      	str	r2, [r3, #28]
    lfs_block_t cycle = 0;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (!lfs_pair_isnull(parent->tail)) {
 800f9c4:	e030      	b.n	800fa28 <lfs_fs_parent+0x80>
        if (cycle >= lfs->cfg->block_count/2) {
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9cc:	085b      	lsrs	r3, r3, #1
 800f9ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d302      	bcc.n	800f9da <lfs_fs_parent+0x32>
            // loop detected
            return LFS_ERR_CORRUPT;
 800f9d4:	f06f 0353 	mvn.w	r3, #83	; 0x53
 800f9d8:	e033      	b.n	800fa42 <lfs_fs_parent+0x9a>
        }
        cycle += 1;
 800f9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f9dc:	3301      	adds	r3, #1
 800f9de:	627b      	str	r3, [r7, #36]	; 0x24

        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	f103 0218 	add.w	r2, r3, #24
                LFS_MKTAG(0x7ff, 0, 0x3ff),
                LFS_MKTAG(LFS_TYPE_DIRSTRUCT, 0, 8),
                NULL,
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	617b      	str	r3, [r7, #20]
                    lfs, {pair[0], pair[1]}});
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800f9ee:	61bb      	str	r3, [r7, #24]
                    lfs, {pair[0], pair[1]}});
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	3304      	adds	r3, #4
 800f9f4:	681b      	ldr	r3, [r3, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
 800f9f6:	61fb      	str	r3, [r7, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
 800f9f8:	f107 0314 	add.w	r3, r7, #20
 800f9fc:	9303      	str	r3, [sp, #12]
 800f9fe:	4b13      	ldr	r3, [pc, #76]	; (800fa4c <lfs_fs_parent+0xa4>)
 800fa00:	9302      	str	r3, [sp, #8]
 800fa02:	2300      	movs	r3, #0
 800fa04:	9301      	str	r3, [sp, #4]
 800fa06:	4b12      	ldr	r3, [pc, #72]	; (800fa50 <lfs_fs_parent+0xa8>)
 800fa08:	9300      	str	r3, [sp, #0]
 800fa0a:	4b12      	ldr	r3, [pc, #72]	; (800fa54 <lfs_fs_parent+0xac>)
 800fa0c:	6879      	ldr	r1, [r7, #4]
 800fa0e:	68f8      	ldr	r0, [r7, #12]
 800fa10:	f7fc f8da 	bl	800bbc8 <lfs_dir_fetchmatch>
 800fa14:	6238      	str	r0, [r7, #32]
        if (tag && tag != LFS_ERR_NOENT) {
 800fa16:	6a3b      	ldr	r3, [r7, #32]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d005      	beq.n	800fa28 <lfs_fs_parent+0x80>
 800fa1c:	6a3b      	ldr	r3, [r7, #32]
 800fa1e:	f113 0f02 	cmn.w	r3, #2
 800fa22:	d001      	beq.n	800fa28 <lfs_fs_parent+0x80>
            return tag;
 800fa24:	6a3b      	ldr	r3, [r7, #32]
 800fa26:	e00c      	b.n	800fa42 <lfs_fs_parent+0x9a>
    while (!lfs_pair_isnull(parent->tail)) {
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	3318      	adds	r3, #24
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f7fb f938 	bl	800aca2 <lfs_pair_isnull>
 800fa32:	4603      	mov	r3, r0
 800fa34:	f083 0301 	eor.w	r3, r3, #1
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d1c3      	bne.n	800f9c6 <lfs_fs_parent+0x1e>
        }
    }

    return LFS_ERR_NOENT;
 800fa3e:	f06f 0301 	mvn.w	r3, #1
}
 800fa42:	4618      	mov	r0, r3
 800fa44:	3728      	adds	r7, #40	; 0x28
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
 800fa4a:	bf00      	nop
 800fa4c:	0800f923 	.word	0x0800f923
 800fa50:	20000008 	.word	0x20000008
 800fa54:	7ff003ff 	.word	0x7ff003ff

0800fa58 <lfs_fs_relocate>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_relocate(lfs_t *lfs,
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b0a6      	sub	sp, #152	; 0x98
 800fa5c:	af04      	add	r7, sp, #16
 800fa5e:	60f8      	str	r0, [r7, #12]
 800fa60:	60b9      	str	r1, [r7, #8]
 800fa62:	607a      	str	r2, [r7, #4]
    // update internal root
    if (lfs_pair_cmp(oldpair, lfs->root) == 0) {
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	3320      	adds	r3, #32
 800fa68:	4619      	mov	r1, r3
 800fa6a:	68b8      	ldr	r0, [r7, #8]
 800fa6c:	f7fb f934 	bl	800acd8 <lfs_pair_cmp>
 800fa70:	4603      	mov	r3, r0
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d107      	bne.n	800fa86 <lfs_fs_relocate+0x2e>
        lfs->root[0] = newpair[0];
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681a      	ldr	r2, [r3, #0]
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	621a      	str	r2, [r3, #32]
        lfs->root[1] = newpair[1];
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	685a      	ldr	r2, [r3, #4]
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	625a      	str	r2, [r3, #36]	; 0x24
    }

    // update internally tracked dirs
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800fa86:	68fb      	ldr	r3, [r7, #12]
 800fa88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800fa8e:	e031      	b.n	800faf4 <lfs_fs_relocate+0x9c>
        if (lfs_pair_cmp(oldpair, d->m.pair) == 0) {
 800fa90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fa94:	3308      	adds	r3, #8
 800fa96:	4619      	mov	r1, r3
 800fa98:	68b8      	ldr	r0, [r7, #8]
 800fa9a:	f7fb f91d 	bl	800acd8 <lfs_pair_cmp>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d109      	bne.n	800fab8 <lfs_fs_relocate+0x60>
            d->m.pair[0] = newpair[0];
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800faac:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	685a      	ldr	r2, [r3, #4]
 800fab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fab6:	60da      	str	r2, [r3, #12]
        }

        if (d->type == LFS_TYPE_DIR &&
 800fab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fabc:	799b      	ldrb	r3, [r3, #6]
 800fabe:	2b02      	cmp	r3, #2
 800fac0:	d113      	bne.n	800faea <lfs_fs_relocate+0x92>
                lfs_pair_cmp(oldpair, ((lfs_dir_t*)d)->head) == 0) {
 800fac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fac6:	332c      	adds	r3, #44	; 0x2c
 800fac8:	4619      	mov	r1, r3
 800faca:	68b8      	ldr	r0, [r7, #8]
 800facc:	f7fb f904 	bl	800acd8 <lfs_pair_cmp>
 800fad0:	4603      	mov	r3, r0
        if (d->type == LFS_TYPE_DIR &&
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d109      	bne.n	800faea <lfs_fs_relocate+0x92>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fade:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	685a      	ldr	r2, [r3, #4]
 800fae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fae8:	631a      	str	r2, [r3, #48]	; 0x30
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
 800faea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800faf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d1c9      	bne.n	800fa90 <lfs_fs_relocate+0x38>
        }
    }

    // find parent
    lfs_mdir_t parent;
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
 800fafc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fb00:	461a      	mov	r2, r3
 800fb02:	68b9      	ldr	r1, [r7, #8]
 800fb04:	68f8      	ldr	r0, [r7, #12]
 800fb06:	f7ff ff4f 	bl	800f9a8 <lfs_fs_parent>
 800fb0a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    if (tag < 0 && tag != LFS_ERR_NOENT) {
 800fb0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	da07      	bge.n	800fb26 <lfs_fs_relocate+0xce>
 800fb16:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb1a:	f113 0f02 	cmn.w	r3, #2
 800fb1e:	d002      	beq.n	800fb26 <lfs_fs_relocate+0xce>
        return tag;
 800fb20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb24:	e0f3      	b.n	800fd0e <lfs_fs_relocate+0x2b6>
    }

    if (tag != LFS_ERR_NOENT) {
 800fb26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fb2a:	f113 0f02 	cmn.w	r3, #2
 800fb2e:	d07c      	beq.n	800fc2a <lfs_fs_relocate+0x1d2>
        // update disk, this creates a desync
        int err = lfs_fs_preporphans(lfs, +1);
 800fb30:	2101      	movs	r1, #1
 800fb32:	68f8      	ldr	r0, [r7, #12]
 800fb34:	f000 f8f8 	bl	800fd28 <lfs_fs_preporphans>
 800fb38:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 800fb3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d001      	beq.n	800fb44 <lfs_fs_relocate+0xec>
            return err;
 800fb40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fb42:	e0e4      	b.n	800fd0e <lfs_fs_relocate+0x2b6>
        }

        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 800fb44:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800fb48:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	3330      	adds	r3, #48	; 0x30
 800fb50:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800fb54:	4611      	mov	r1, r2
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7fb fa4c 	bl	800aff4 <lfs_gstate_hasmovehere>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d02d      	beq.n	800fbbe <lfs_fs_relocate+0x166>
            moveid = lfs_tag_id(lfs->gstate.tag);
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7fb f99c 	bl	800aea4 <lfs_tag_id>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
            LFS_DEBUG("Fixing move while relocating "
 800fb72:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fb74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fb76:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800fb7a:	4867      	ldr	r0, [pc, #412]	; (800fd18 <lfs_fs_relocate+0x2c0>)
 800fb7c:	9002      	str	r0, [sp, #8]
 800fb7e:	9201      	str	r2, [sp, #4]
 800fb80:	9300      	str	r3, [sp, #0]
 800fb82:	460b      	mov	r3, r1
 800fb84:	f640 72c4 	movw	r2, #4036	; 0xfc4
 800fb88:	4964      	ldr	r1, [pc, #400]	; (800fd1c <lfs_fs_relocate+0x2c4>)
 800fb8a:	4865      	ldr	r0, [pc, #404]	; (800fd20 <lfs_fs_relocate+0x2c8>)
 800fb8c:	f011 fc14 	bl	80213b8 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800fb90:	2200      	movs	r2, #0
 800fb92:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800fb96:	68f8      	ldr	r0, [r7, #12]
 800fb98:	f000 f900 	bl	800fd9c <lfs_fs_prepmove>
            if (moveid < lfs_tag_id(tag)) {
 800fb9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7fb f97f 	bl	800aea4 <lfs_tag_id>
 800fba6:	4603      	mov	r3, r0
 800fba8:	461a      	mov	r2, r3
 800fbaa:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d205      	bcs.n	800fbbe <lfs_fs_relocate+0x166>
                tag -= LFS_MKTAG(0, 1, 0);
 800fbb2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fbb6:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800fbba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
            }
        }

        lfs_pair_tole32(newpair);
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f7fb f8fb 	bl	800adba <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800fbc4:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800fbc8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d007      	beq.n	800fbe0 <lfs_fs_relocate+0x188>
 800fbd0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800fbd4:	029b      	lsls	r3, r3, #10
 800fbd6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800fbda:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800fbde:	e000      	b.n	800fbe2 <lfs_fs_relocate+0x18a>
 800fbe0:	2300      	movs	r3, #0
 800fbe2:	647b      	str	r3, [r7, #68]	; 0x44
 800fbe4:	2300      	movs	r3, #0
 800fbe6:	64bb      	str	r3, [r7, #72]	; 0x48
 800fbe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fbec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	653b      	str	r3, [r7, #80]	; 0x50
 800fbf2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800fbf6:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800fbfa:	2302      	movs	r3, #2
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f7fd fb23 	bl	800d248 <lfs_dir_commit>
 800fc02:	67b8      	str	r0, [r7, #120]	; 0x78
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {tag, newpair}));
        lfs_pair_fromle32(newpair);
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f7fb f8be 	bl	800ad86 <lfs_pair_fromle32>
        if (err) {
 800fc0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d001      	beq.n	800fc14 <lfs_fs_relocate+0x1bc>
            return err;
 800fc10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc12:	e07c      	b.n	800fd0e <lfs_fs_relocate+0x2b6>
        }

        // next step, clean up orphans
        err = lfs_fs_preporphans(lfs, -1);
 800fc14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f000 f885 	bl	800fd28 <lfs_fs_preporphans>
 800fc1e:	67b8      	str	r0, [r7, #120]	; 0x78
        if (err) {
 800fc20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d001      	beq.n	800fc2a <lfs_fs_relocate+0x1d2>
            return err;
 800fc26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc28:	e071      	b.n	800fd0e <lfs_fs_relocate+0x2b6>
        }
    }

    // find pred
    int err = lfs_fs_pred(lfs, oldpair, &parent);
 800fc2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800fc2e:	461a      	mov	r2, r3
 800fc30:	68b9      	ldr	r1, [r7, #8]
 800fc32:	68f8      	ldr	r0, [r7, #12]
 800fc34:	f7ff fe30 	bl	800f898 <lfs_fs_pred>
 800fc38:	6778      	str	r0, [r7, #116]	; 0x74
    if (err && err != LFS_ERR_NOENT) {
 800fc3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d005      	beq.n	800fc4c <lfs_fs_relocate+0x1f4>
 800fc40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc42:	f113 0f02 	cmn.w	r3, #2
 800fc46:	d001      	beq.n	800fc4c <lfs_fs_relocate+0x1f4>
        return err;
 800fc48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc4a:	e060      	b.n	800fd0e <lfs_fs_relocate+0x2b6>
    }

    // if we can't find dir, it must be new
    if (err != LFS_ERR_NOENT) {
 800fc4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc4e:	f113 0f02 	cmn.w	r3, #2
 800fc52:	d05b      	beq.n	800fd0c <lfs_fs_relocate+0x2b4>
        // fix pending move in this pair? this looks like an optimization but
        // is in fact _required_ since relocating may outdate the move.
        uint16_t moveid = 0x3ff;
 800fc54:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800fc58:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	3330      	adds	r3, #48	; 0x30
 800fc60:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800fc64:	4611      	mov	r1, r2
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fb f9c4 	bl	800aff4 <lfs_gstate_hasmovehere>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d01c      	beq.n	800fcac <lfs_fs_relocate+0x254>
            moveid = lfs_tag_id(lfs->gstate.tag);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7fb f914 	bl	800aea4 <lfs_tag_id>
 800fc7c:	4603      	mov	r3, r0
 800fc7e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
            LFS_DEBUG("Fixing move while relocating "
 800fc82:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fc84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fc86:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800fc8a:	4823      	ldr	r0, [pc, #140]	; (800fd18 <lfs_fs_relocate+0x2c0>)
 800fc8c:	9002      	str	r0, [sp, #8]
 800fc8e:	9201      	str	r2, [sp, #4]
 800fc90:	9300      	str	r3, [sp, #0]
 800fc92:	460b      	mov	r3, r1
 800fc94:	f640 72eb 	movw	r2, #4075	; 0xfeb
 800fc98:	4920      	ldr	r1, [pc, #128]	; (800fd1c <lfs_fs_relocate+0x2c4>)
 800fc9a:	4821      	ldr	r0, [pc, #132]	; (800fd20 <lfs_fs_relocate+0x2c8>)
 800fc9c:	f011 fb8c 	bl	80213b8 <iprintf>
                    "{0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16"\n",
                    parent.pair[0], parent.pair[1], moveid);
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800fca0:	2200      	movs	r2, #0
 800fca2:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800fca6:	68f8      	ldr	r0, [r7, #12]
 800fca8:	f000 f878 	bl	800fd9c <lfs_fs_prepmove>
        }

        // replace bad pair, either we clean up desync, or no desync occured
        lfs_pair_tole32(newpair);
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f7fb f884 	bl	800adba <lfs_pair_tole32>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
 800fcb2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800fcb6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fcba:	4293      	cmp	r3, r2
 800fcbc:	d007      	beq.n	800fcce <lfs_fs_relocate+0x276>
 800fcbe:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800fcc2:	029b      	lsls	r3, r3, #10
 800fcc4:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800fcc8:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800fccc:	e000      	b.n	800fcd0 <lfs_fs_relocate+0x278>
 800fcce:	2300      	movs	r3, #0
 800fcd0:	627b      	str	r3, [r7, #36]	; 0x24
 800fcd2:	2300      	movs	r3, #0
 800fcd4:	62bb      	str	r3, [r7, #40]	; 0x28
 800fcd6:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800fcda:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 800fcde:	051a      	lsls	r2, r3, #20
 800fce0:	4b10      	ldr	r3, [pc, #64]	; (800fd24 <lfs_fs_relocate+0x2cc>)
 800fce2:	4313      	orrs	r3, r2
 800fce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	633b      	str	r3, [r7, #48]	; 0x30
 800fcea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fcee:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800fcf2:	2302      	movs	r3, #2
 800fcf4:	68f8      	ldr	r0, [r7, #12]
 800fcf6:	f7fd faa7 	bl	800d248 <lfs_dir_commit>
 800fcfa:	6778      	str	r0, [r7, #116]	; 0x74
                {LFS_MKTAG_IF(moveid != 0x3ff,
                    LFS_TYPE_DELETE, moveid, 0), NULL},
                {LFS_MKTAG(LFS_TYPE_TAIL + parent.split, 0x3ff, 8), newpair}));
        lfs_pair_fromle32(newpair);
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f7fb f842 	bl	800ad86 <lfs_pair_fromle32>
        if (err) {
 800fd02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d001      	beq.n	800fd0c <lfs_fs_relocate+0x2b4>
            return err;
 800fd08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd0a:	e000      	b.n	800fd0e <lfs_fs_relocate+0x2b6>
        }
    }

    return 0;
 800fd0c:	2300      	movs	r3, #0
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	3788      	adds	r7, #136	; 0x88
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	08023064 	.word	0x08023064
 800fd1c:	08022f58 	.word	0x08022f58
 800fd20:	08023570 	.word	0x08023570
 800fd24:	000ffc08 	.word	0x000ffc08

0800fd28 <lfs_fs_preporphans>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_preporphans(lfs_t *lfs, int8_t orphans) {
 800fd28:	b590      	push	{r4, r7, lr}
 800fd2a:	b083      	sub	sp, #12
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	6078      	str	r0, [r7, #4]
 800fd30:	460b      	mov	r3, r1
 800fd32:	70fb      	strb	r3, [r7, #3]
    LFS_ASSERT(lfs_tag_size(lfs->gstate.tag) > 0 || orphans >= 0);
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7fb f8c3 	bl	800aec4 <lfs_tag_size>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d10a      	bne.n	800fd5a <lfs_fs_preporphans+0x32>
 800fd44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	da06      	bge.n	800fd5a <lfs_fs_preporphans+0x32>
 800fd4c:	4b10      	ldr	r3, [pc, #64]	; (800fd90 <lfs_fs_preporphans+0x68>)
 800fd4e:	4a11      	ldr	r2, [pc, #68]	; (800fd94 <lfs_fs_preporphans+0x6c>)
 800fd50:	f241 0103 	movw	r1, #4099	; 0x1003
 800fd54:	4810      	ldr	r0, [pc, #64]	; (800fd98 <lfs_fs_preporphans+0x70>)
 800fd56:	f011 f8d9 	bl	8020f0c <__assert_func>
    lfs->gstate.tag += orphans;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd62:	441a      	add	r2, r3
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd6c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	3330      	adds	r3, #48	; 0x30
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7fb f908 	bl	800af8a <lfs_gstate_hasorphans>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	07db      	lsls	r3, r3, #31
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
 800fd7e:	ea44 0203 	orr.w	r2, r4, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	631a      	str	r2, [r3, #48]	; 0x30

    return 0;
 800fd86:	2300      	movs	r3, #0
}
 800fd88:	4618      	mov	r0, r3
 800fd8a:	370c      	adds	r7, #12
 800fd8c:	46bd      	mov	sp, r7
 800fd8e:	bd90      	pop	{r4, r7, pc}
 800fd90:	080235b4 	.word	0x080235b4
 800fd94:	08026ed8 	.word	0x08026ed8
 800fd98:	08022f58 	.word	0x08022f58

0800fd9c <lfs_fs_prepmove>:
#endif

#ifndef LFS_READONLY
static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
 800fd9c:	b480      	push	{r7}
 800fd9e:	b085      	sub	sp, #20
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	60f8      	str	r0, [r7, #12]
 800fda4:	460b      	mov	r3, r1
 800fda6:	607a      	str	r2, [r7, #4]
 800fda8:	817b      	strh	r3, [r7, #10]
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdae:	4a17      	ldr	r2, [pc, #92]	; (800fe0c <lfs_fs_prepmove+0x70>)
 800fdb0:	401a      	ands	r2, r3
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
 800fdb2:	897b      	ldrh	r3, [r7, #10]
 800fdb4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800fdb8:	428b      	cmp	r3, r1
 800fdba:	d006      	beq.n	800fdca <lfs_fs_prepmove+0x2e>
 800fdbc:	897b      	ldrh	r3, [r7, #10]
 800fdbe:	029b      	lsls	r3, r3, #10
 800fdc0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800fdc4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800fdc8:	e000      	b.n	800fdcc <lfs_fs_prepmove+0x30>
 800fdca:	2300      	movs	r3, #0
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
 800fdcc:	431a      	orrs	r2, r3
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	631a      	str	r2, [r3, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
 800fdd2:	897b      	ldrh	r3, [r7, #10]
 800fdd4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fdd8:	4293      	cmp	r3, r2
 800fdda:	d002      	beq.n	800fde2 <lfs_fs_prepmove+0x46>
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	e000      	b.n	800fde4 <lfs_fs_prepmove+0x48>
 800fde2:	2300      	movs	r3, #0
 800fde4:	68fa      	ldr	r2, [r7, #12]
 800fde6:	6353      	str	r3, [r2, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
 800fde8:	897b      	ldrh	r3, [r7, #10]
 800fdea:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800fdee:	4293      	cmp	r3, r2
 800fdf0:	d003      	beq.n	800fdfa <lfs_fs_prepmove+0x5e>
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	3304      	adds	r3, #4
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	e000      	b.n	800fdfc <lfs_fs_prepmove+0x60>
 800fdfa:	2300      	movs	r3, #0
 800fdfc:	68fa      	ldr	r2, [r7, #12]
 800fdfe:	6393      	str	r3, [r2, #56]	; 0x38
}
 800fe00:	bf00      	nop
 800fe02:	3714      	adds	r7, #20
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr
 800fe0c:	800003ff 	.word	0x800003ff

0800fe10 <lfs_fs_demove>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_demove(lfs_t *lfs) {
 800fe10:	b5b0      	push	{r4, r5, r7, lr}
 800fe12:	b094      	sub	sp, #80	; 0x50
 800fe14:	af04      	add	r7, sp, #16
 800fe16:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	333c      	adds	r3, #60	; 0x3c
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fb f8d6 	bl	800afce <lfs_gstate_hasmove>
 800fe22:	4603      	mov	r3, r0
 800fe24:	f083 0301 	eor.w	r3, r3, #1
 800fe28:	b2db      	uxtb	r3, r3
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <lfs_fs_demove+0x22>
        return 0;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	e049      	b.n	800fec6 <lfs_fs_demove+0xb6>
    }

    // Fix bad moves
    LFS_DEBUG("Fixing move {0x%"PRIx32", 0x%"PRIx32"} 0x%"PRIx16,
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe3e:	4618      	mov	r0, r3
 800fe40:	f7fb f830 	bl	800aea4 <lfs_tag_id>
 800fe44:	4603      	mov	r3, r0
 800fe46:	461a      	mov	r2, r3
 800fe48:	4b21      	ldr	r3, [pc, #132]	; (800fed0 <lfs_fs_demove+0xc0>)
 800fe4a:	9302      	str	r3, [sp, #8]
 800fe4c:	9201      	str	r2, [sp, #4]
 800fe4e:	9400      	str	r4, [sp, #0]
 800fe50:	462b      	mov	r3, r5
 800fe52:	f241 021d 	movw	r2, #4125	; 0x101d
 800fe56:	491f      	ldr	r1, [pc, #124]	; (800fed4 <lfs_fs_demove+0xc4>)
 800fe58:	481f      	ldr	r0, [pc, #124]	; (800fed8 <lfs_fs_demove+0xc8>)
 800fe5a:	f011 faad 	bl	80213b8 <iprintf>
            lfs->gdisk.pair[1],
            lfs_tag_id(lfs->gdisk.tag));

    // fetch and delete the moved entry
    lfs_mdir_t movedir;
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800fe64:	f107 0318 	add.w	r3, r7, #24
 800fe68:	4619      	mov	r1, r3
 800fe6a:	6878      	ldr	r0, [r7, #4]
 800fe6c:	f7fc fa18 	bl	800c2a0 <lfs_dir_fetch>
 800fe70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (err) {
 800fe72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d001      	beq.n	800fe7c <lfs_fs_demove+0x6c>
        return err;
 800fe78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe7a:	e024      	b.n	800fec6 <lfs_fs_demove+0xb6>
    }

    // prep gstate and delete move id
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7fb f80f 	bl	800aea4 <lfs_tag_id>
 800fe86:	4603      	mov	r3, r0
 800fe88:	877b      	strh	r3, [r7, #58]	; 0x3a
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
 800fe8a:	2200      	movs	r2, #0
 800fe8c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f7ff ff83 	bl	800fd9c <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
 800fe96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fe98:	029b      	lsls	r3, r3, #10
 800fe9a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
 800fe9e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
 800fea2:	613b      	str	r3, [r7, #16]
 800fea4:	2300      	movs	r3, #0
 800fea6:	617b      	str	r3, [r7, #20]
 800fea8:	f107 0210 	add.w	r2, r7, #16
 800feac:	f107 0118 	add.w	r1, r7, #24
 800feb0:	2301      	movs	r3, #1
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f7fd f9c8 	bl	800d248 <lfs_dir_commit>
 800feb8:	63f8      	str	r0, [r7, #60]	; 0x3c
            {LFS_MKTAG(LFS_TYPE_DELETE, moveid, 0), NULL}));
    if (err) {
 800feba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800febc:	2b00      	cmp	r3, #0
 800febe:	d001      	beq.n	800fec4 <lfs_fs_demove+0xb4>
        return err;
 800fec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fec2:	e000      	b.n	800fec6 <lfs_fs_demove+0xb6>
    }

    return 0;
 800fec4:	2300      	movs	r3, #0
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3740      	adds	r7, #64	; 0x40
 800feca:	46bd      	mov	sp, r7
 800fecc:	bdb0      	pop	{r4, r5, r7, pc}
 800fece:	bf00      	nop
 800fed0:	08023064 	.word	0x08023064
 800fed4:	08022f58 	.word	0x08022f58
 800fed8:	080235e8 	.word	0x080235e8

0800fedc <lfs_fs_deorphan>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_deorphan(lfs_t *lfs) {
 800fedc:	b5b0      	push	{r4, r5, r7, lr}
 800fede:	b0a8      	sub	sp, #160	; 0xa0
 800fee0:	af04      	add	r7, sp, #16
 800fee2:	6078      	str	r0, [r7, #4]
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	3330      	adds	r3, #48	; 0x30
 800fee8:	4618      	mov	r0, r3
 800feea:	f7fb f84e 	bl	800af8a <lfs_gstate_hasorphans>
 800feee:	4603      	mov	r3, r0
 800fef0:	f083 0301 	eor.w	r3, r3, #1
 800fef4:	b2db      	uxtb	r3, r3
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d001      	beq.n	800fefe <lfs_fs_deorphan+0x22>
        return 0;
 800fefa:	2300      	movs	r3, #0
 800fefc:	e0e6      	b.n	80100cc <lfs_fs_deorphan+0x1f0>
    }

    // Fix any orphans
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
 800fefe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ff02:	2220      	movs	r2, #32
 800ff04:	2100      	movs	r1, #0
 800ff06:	4618      	mov	r0, r3
 800ff08:	f011 fc6c 	bl	80217e4 <memset>
 800ff0c:	2301      	movs	r3, #1
 800ff0e:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
 800ff12:	2301      	movs	r3, #1
 800ff14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    lfs_mdir_t dir;

    // iterate over all directory directory entries
    while (!lfs_pair_isnull(pdir.tail)) {
 800ff18:	e0bd      	b.n	8010096 <lfs_fs_deorphan+0x1ba>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
 800ff1a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ff1e:	f103 0218 	add.w	r2, r3, #24
 800ff22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800ff26:	4619      	mov	r1, r3
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f7fc f9b9 	bl	800c2a0 <lfs_dir_fetch>
 800ff2e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
        if (err) {
 800ff32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d002      	beq.n	800ff40 <lfs_fs_deorphan+0x64>
            return err;
 800ff3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ff3e:	e0c5      	b.n	80100cc <lfs_fs_deorphan+0x1f0>
        }

        // check head blocks for orphans
        if (!pdir.split) {
 800ff40:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 800ff44:	f083 0301 	eor.w	r3, r3, #1
 800ff48:	b2db      	uxtb	r3, r3
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	f000 8099 	beq.w	8010082 <lfs_fs_deorphan+0x1a6>
            // check if we have a parent
            lfs_mdir_t parent;
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
 800ff50:	f107 020c 	add.w	r2, r7, #12
 800ff54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ff58:	3318      	adds	r3, #24
 800ff5a:	4619      	mov	r1, r3
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f7ff fd23 	bl	800f9a8 <lfs_fs_parent>
 800ff62:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
            if (tag < 0 && tag != LFS_ERR_NOENT) {
 800ff66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	da07      	bge.n	800ff7e <lfs_fs_deorphan+0xa2>
 800ff6e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff72:	f113 0f02 	cmn.w	r3, #2
 800ff76:	d002      	beq.n	800ff7e <lfs_fs_deorphan+0xa2>
                return tag;
 800ff78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff7c:	e0a6      	b.n	80100cc <lfs_fs_deorphan+0x1f0>
            }

            if (tag == LFS_ERR_NOENT) {
 800ff7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ff82:	f113 0f02 	cmn.w	r3, #2
 800ff86:	d11d      	bne.n	800ffc4 <lfs_fs_deorphan+0xe8>
                // we are an orphan
                LFS_DEBUG("Fixing orphan {0x%"PRIx32", 0x%"PRIx32"}",
 800ff88:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ff8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ff8e:	4951      	ldr	r1, [pc, #324]	; (80100d4 <lfs_fs_deorphan+0x1f8>)
 800ff90:	9101      	str	r1, [sp, #4]
 800ff92:	9300      	str	r3, [sp, #0]
 800ff94:	4613      	mov	r3, r2
 800ff96:	f241 0252 	movw	r2, #4178	; 0x1052
 800ff9a:	494f      	ldr	r1, [pc, #316]	; (80100d8 <lfs_fs_deorphan+0x1fc>)
 800ff9c:	484f      	ldr	r0, [pc, #316]	; (80100dc <lfs_fs_deorphan+0x200>)
 800ff9e:	f011 fa0b 	bl	80213b8 <iprintf>
                        pdir.tail[0], pdir.tail[1]);

                err = lfs_dir_drop(lfs, &pdir, &dir);
 800ffa2:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800ffa6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ffaa:	4619      	mov	r1, r3
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f7fc fd75 	bl	800ca9c <lfs_dir_drop>
 800ffb2:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                if (err) {
 800ffb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d05d      	beq.n	801007a <lfs_fs_deorphan+0x19e>
                    return err;
 800ffbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ffc2:	e083      	b.n	80100cc <lfs_fs_deorphan+0x1f0>
                // refetch tail
                continue;
            }

            lfs_block_t pair[2];
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
 800ffc4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ffc8:	f107 010c 	add.w	r1, r7, #12
 800ffcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ffd0:	9300      	str	r3, [sp, #0]
 800ffd2:	4613      	mov	r3, r2
 800ffd4:	4a42      	ldr	r2, [pc, #264]	; (80100e0 <lfs_fs_deorphan+0x204>)
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f7fb fb4e 	bl	800b678 <lfs_dir_get>
 800ffdc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
                    LFS_MKTAG(0x7ff, 0x3ff, 0), tag, pair);
            if (res < 0) {
 800ffe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	da02      	bge.n	800ffee <lfs_fs_deorphan+0x112>
                return res;
 800ffe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ffec:	e06e      	b.n	80100cc <lfs_fs_deorphan+0x1f0>
            }
            lfs_pair_fromle32(pair);
 800ffee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fa fec7 	bl	800ad86 <lfs_pair_fromle32>

            if (!lfs_pair_sync(pair, pdir.tail)) {
 800fff8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800fffc:	f103 0218 	add.w	r2, r3, #24
 8010000:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010004:	4611      	mov	r1, r2
 8010006:	4618      	mov	r0, r3
 8010008:	f7fa fe90 	bl	800ad2c <lfs_pair_sync>
 801000c:	4603      	mov	r3, r0
 801000e:	f083 0301 	eor.w	r3, r3, #1
 8010012:	b2db      	uxtb	r3, r3
 8010014:	2b00      	cmp	r3, #0
 8010016:	d034      	beq.n	8010082 <lfs_fs_deorphan+0x1a6>
                // we have desynced
                LFS_DEBUG("Fixing half-orphan {0x%"PRIx32", 0x%"PRIx32"} "
 8010018:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 801001a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801001e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010020:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010022:	4c2c      	ldr	r4, [pc, #176]	; (80100d4 <lfs_fs_deorphan+0x1f8>)
 8010024:	9403      	str	r4, [sp, #12]
 8010026:	9102      	str	r1, [sp, #8]
 8010028:	9201      	str	r2, [sp, #4]
 801002a:	9300      	str	r3, [sp, #0]
 801002c:	4603      	mov	r3, r0
 801002e:	f241 0268 	movw	r2, #4200	; 0x1068
 8010032:	4929      	ldr	r1, [pc, #164]	; (80100d8 <lfs_fs_deorphan+0x1fc>)
 8010034:	482b      	ldr	r0, [pc, #172]	; (80100e4 <lfs_fs_deorphan+0x208>)
 8010036:	f011 f9bf 	bl	80213b8 <iprintf>
                            "-> {0x%"PRIx32", 0x%"PRIx32"}",
                        pdir.tail[0], pdir.tail[1], pair[0], pair[1]);

                lfs_pair_tole32(pair);
 801003a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801003e:	4618      	mov	r0, r3
 8010040:	f7fa febb 	bl	800adba <lfs_pair_tole32>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
 8010044:	4b28      	ldr	r3, [pc, #160]	; (80100e8 <lfs_fs_deorphan+0x20c>)
 8010046:	637b      	str	r3, [r7, #52]	; 0x34
 8010048:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801004c:	63bb      	str	r3, [r7, #56]	; 0x38
 801004e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8010052:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8010056:	2301      	movs	r3, #1
 8010058:	6878      	ldr	r0, [r7, #4]
 801005a:	f7fd f8f5 	bl	800d248 <lfs_dir_commit>
 801005e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
                        {LFS_MKTAG(LFS_TYPE_SOFTTAIL, 0x3ff, 8), pair}));
                lfs_pair_fromle32(pair);
 8010062:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8010066:	4618      	mov	r0, r3
 8010068:	f7fa fe8d 	bl	800ad86 <lfs_pair_fromle32>
                if (err) {
 801006c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010070:	2b00      	cmp	r3, #0
 8010072:	d004      	beq.n	801007e <lfs_fs_deorphan+0x1a2>
                    return err;
 8010074:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                return tag;
 8010078:	e028      	b.n	80100cc <lfs_fs_deorphan+0x1f0>
                continue;
 801007a:	bf00      	nop
 801007c:	e00b      	b.n	8010096 <lfs_fs_deorphan+0x1ba>
                }

                // refetch tail
                continue;
 801007e:	bf00      	nop
 8010080:	e009      	b.n	8010096 <lfs_fs_deorphan+0x1ba>
            }
        }

        pdir = dir;
 8010082:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8010086:	f107 0544 	add.w	r5, r7, #68	; 0x44
 801008a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801008c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801008e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8010092:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    while (!lfs_pair_isnull(pdir.tail)) {
 8010096:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801009a:	3318      	adds	r3, #24
 801009c:	4618      	mov	r0, r3
 801009e:	f7fa fe00 	bl	800aca2 <lfs_pair_isnull>
 80100a2:	4603      	mov	r3, r0
 80100a4:	f083 0301 	eor.w	r3, r3, #1
 80100a8:	b2db      	uxtb	r3, r3
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	f47f af35 	bne.w	800ff1a <lfs_fs_deorphan+0x3e>
    }

    // mark orphans as fixed
    return lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	3330      	adds	r3, #48	; 0x30
 80100b4:	4618      	mov	r0, r3
 80100b6:	f7fa ff7b 	bl	800afb0 <lfs_gstate_getorphans>
 80100ba:	4603      	mov	r3, r0
 80100bc:	425b      	negs	r3, r3
 80100be:	b2db      	uxtb	r3, r3
 80100c0:	b25b      	sxtb	r3, r3
 80100c2:	4619      	mov	r1, r3
 80100c4:	6878      	ldr	r0, [r7, #4]
 80100c6:	f7ff fe2f 	bl	800fd28 <lfs_fs_preporphans>
 80100ca:	4603      	mov	r3, r0
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	3790      	adds	r7, #144	; 0x90
 80100d0:	46bd      	mov	sp, r7
 80100d2:	bdb0      	pop	{r4, r5, r7, pc}
 80100d4:	08023064 	.word	0x08023064
 80100d8:	08022f58 	.word	0x08022f58
 80100dc:	0802361c 	.word	0x0802361c
 80100e0:	7ffffc00 	.word	0x7ffffc00
 80100e4:	0802364c 	.word	0x0802364c
 80100e8:	600ffc08 	.word	0x600ffc08

080100ec <lfs_fs_forceconsistency>:
#endif

#ifndef LFS_READONLY
static int lfs_fs_forceconsistency(lfs_t *lfs) {
 80100ec:	b580      	push	{r7, lr}
 80100ee:	b084      	sub	sp, #16
 80100f0:	af00      	add	r7, sp, #0
 80100f2:	6078      	str	r0, [r7, #4]
    int err = lfs_fs_demove(lfs);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f7ff fe8b 	bl	800fe10 <lfs_fs_demove>
 80100fa:	60f8      	str	r0, [r7, #12]
    if (err) {
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d001      	beq.n	8010106 <lfs_fs_forceconsistency+0x1a>
        return err;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	e009      	b.n	801011a <lfs_fs_forceconsistency+0x2e>
    }

    err = lfs_fs_deorphan(lfs);
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f7ff fee8 	bl	800fedc <lfs_fs_deorphan>
 801010c:	60f8      	str	r0, [r7, #12]
    if (err) {
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d001      	beq.n	8010118 <lfs_fs_forceconsistency+0x2c>
        return err;
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	e000      	b.n	801011a <lfs_fs_forceconsistency+0x2e>
    }

    return 0;
 8010118:	2300      	movs	r3, #0
}
 801011a:	4618      	mov	r0, r3
 801011c:	3710      	adds	r7, #16
 801011e:	46bd      	mov	sp, r7
 8010120:	bd80      	pop	{r7, pc}

08010122 <lfs_fs_size_count>:
#endif

static int lfs_fs_size_count(void *p, lfs_block_t block) {
 8010122:	b480      	push	{r7}
 8010124:	b085      	sub	sp, #20
 8010126:	af00      	add	r7, sp, #0
 8010128:	6078      	str	r0, [r7, #4]
 801012a:	6039      	str	r1, [r7, #0]
    (void)block;
    lfs_size_t *size = p;
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	60fb      	str	r3, [r7, #12]
    *size += 1;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	1c5a      	adds	r2, r3, #1
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	601a      	str	r2, [r3, #0]
    return 0;
 801013a:	2300      	movs	r3, #0
}
 801013c:	4618      	mov	r0, r3
 801013e:	3714      	adds	r7, #20
 8010140:	46bd      	mov	sp, r7
 8010142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010146:	4770      	bx	lr

08010148 <lfs_fs_rawsize>:

static lfs_ssize_t lfs_fs_rawsize(lfs_t *lfs) {
 8010148:	b580      	push	{r7, lr}
 801014a:	b084      	sub	sp, #16
 801014c:	af00      	add	r7, sp, #0
 801014e:	6078      	str	r0, [r7, #4]
    lfs_size_t size = 0;
 8010150:	2300      	movs	r3, #0
 8010152:	60bb      	str	r3, [r7, #8]
    int err = lfs_fs_rawtraverse(lfs, lfs_fs_size_count, &size, false);
 8010154:	f107 0208 	add.w	r2, r7, #8
 8010158:	2300      	movs	r3, #0
 801015a:	4907      	ldr	r1, [pc, #28]	; (8010178 <lfs_fs_rawsize+0x30>)
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7ff fa75 	bl	800f64c <lfs_fs_rawtraverse>
 8010162:	60f8      	str	r0, [r7, #12]
    if (err) {
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	2b00      	cmp	r3, #0
 8010168:	d001      	beq.n	801016e <lfs_fs_rawsize+0x26>
        return err;
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	e000      	b.n	8010170 <lfs_fs_rawsize+0x28>
    }

    return size;
 801016e:	68bb      	ldr	r3, [r7, #8]
}
 8010170:	4618      	mov	r0, r3
 8010172:	3710      	adds	r7, #16
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	08010123 	.word	0x08010123

0801017c <lfs_format>:
#define LFS_UNLOCK(cfg) ((void)cfg)
#endif

// Public API
#ifndef LFS_READONLY
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
 801017c:	b580      	push	{r7, lr}
 801017e:	b084      	sub	sp, #16
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
 8010184:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 8010186:	683b      	ldr	r3, [r7, #0]
 8010188:	695b      	ldr	r3, [r3, #20]
 801018a:	6838      	ldr	r0, [r7, #0]
 801018c:	4798      	blx	r3
 801018e:	60f8      	str	r0, [r7, #12]
    if (err) {
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d001      	beq.n	801019a <lfs_format+0x1e>
        return err;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	e009      	b.n	80101ae <lfs_format+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawformat(lfs, cfg);
 801019a:	6839      	ldr	r1, [r7, #0]
 801019c:	6878      	ldr	r0, [r7, #4]
 801019e:	f7ff f833 	bl	800f208 <lfs_rawformat>
 80101a2:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_format -> %d", err);
    LFS_UNLOCK(cfg);
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	699b      	ldr	r3, [r3, #24]
 80101a8:	6838      	ldr	r0, [r7, #0]
 80101aa:	4798      	blx	r3
    return err;
 80101ac:	68fb      	ldr	r3, [r7, #12]
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3710      	adds	r7, #16
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <lfs_mount>:
#endif

int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b084      	sub	sp, #16
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	6078      	str	r0, [r7, #4]
 80101be:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(cfg);
 80101c0:	683b      	ldr	r3, [r7, #0]
 80101c2:	695b      	ldr	r3, [r3, #20]
 80101c4:	6838      	ldr	r0, [r7, #0]
 80101c6:	4798      	blx	r3
 80101c8:	60f8      	str	r0, [r7, #12]
    if (err) {
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d001      	beq.n	80101d4 <lfs_mount+0x1e>
        return err;
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	e009      	b.n	80101e8 <lfs_mount+0x32>
            cfg->read_size, cfg->prog_size, cfg->block_size, cfg->block_count,
            cfg->block_cycles, cfg->cache_size, cfg->lookahead_size,
            cfg->read_buffer, cfg->prog_buffer, cfg->lookahead_buffer,
            cfg->name_max, cfg->file_max, cfg->attr_max);

    err = lfs_rawmount(lfs, cfg);
 80101d4:	6839      	ldr	r1, [r7, #0]
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f7ff f8b6 	bl	800f348 <lfs_rawmount>
 80101dc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mount -> %d", err);
    LFS_UNLOCK(cfg);
 80101de:	683b      	ldr	r3, [r7, #0]
 80101e0:	699b      	ldr	r3, [r3, #24]
 80101e2:	6838      	ldr	r0, [r7, #0]
 80101e4:	4798      	blx	r3
    return err;
 80101e6:	68fb      	ldr	r3, [r7, #12]
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3710      	adds	r7, #16
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <lfs_file_open>:
    LFS_UNLOCK(lfs->cfg);
    return err;
}
#endif

int lfs_file_open(lfs_t *lfs, lfs_file_t *file, const char *path, int flags) {
 80101f0:	b580      	push	{r7, lr}
 80101f2:	b086      	sub	sp, #24
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	60f8      	str	r0, [r7, #12]
 80101f8:	60b9      	str	r1, [r7, #8]
 80101fa:	607a      	str	r2, [r7, #4]
 80101fc:	603b      	str	r3, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010202:	695b      	ldr	r3, [r3, #20]
 8010204:	68fa      	ldr	r2, [r7, #12]
 8010206:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8010208:	4610      	mov	r0, r2
 801020a:	4798      	blx	r3
 801020c:	6178      	str	r0, [r7, #20]
    if (err) {
 801020e:	697b      	ldr	r3, [r7, #20]
 8010210:	2b00      	cmp	r3, #0
 8010212:	d001      	beq.n	8010218 <lfs_file_open+0x28>
        return err;
 8010214:	697b      	ldr	r3, [r7, #20]
 8010216:	e021      	b.n	801025c <lfs_file_open+0x6c>
    }
    LFS_TRACE("lfs_file_open(%p, %p, \"%s\", %x)",
            (void*)lfs, (void*)file, path, flags);
    LFS_ASSERT(!lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801021c:	68b9      	ldr	r1, [r7, #8]
 801021e:	4618      	mov	r0, r3
 8010220:	f7fa ffe8 	bl	800b1f4 <lfs_mlist_isopen>
 8010224:	4603      	mov	r3, r0
 8010226:	f083 0301 	eor.w	r3, r3, #1
 801022a:	b2db      	uxtb	r3, r3
 801022c:	2b00      	cmp	r3, #0
 801022e:	d106      	bne.n	801023e <lfs_file_open+0x4e>
 8010230:	4b0c      	ldr	r3, [pc, #48]	; (8010264 <lfs_file_open+0x74>)
 8010232:	4a0d      	ldr	r2, [pc, #52]	; (8010268 <lfs_file_open+0x78>)
 8010234:	f241 31e8 	movw	r1, #5096	; 0x13e8
 8010238:	480c      	ldr	r0, [pc, #48]	; (801026c <lfs_file_open+0x7c>)
 801023a:	f010 fe67 	bl	8020f0c <__assert_func>

    err = lfs_file_rawopen(lfs, file, path, flags);
 801023e:	683b      	ldr	r3, [r7, #0]
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	68b9      	ldr	r1, [r7, #8]
 8010244:	68f8      	ldr	r0, [r7, #12]
 8010246:	f7fe f8e3 	bl	800e410 <lfs_file_rawopen>
 801024a:	6178      	str	r0, [r7, #20]

    LFS_TRACE("lfs_file_open -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010250:	699b      	ldr	r3, [r3, #24]
 8010252:	68fa      	ldr	r2, [r7, #12]
 8010254:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8010256:	4610      	mov	r0, r2
 8010258:	4798      	blx	r3
    return err;
 801025a:	697b      	ldr	r3, [r7, #20]
}
 801025c:	4618      	mov	r0, r3
 801025e:	3718      	adds	r7, #24
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	08023690 	.word	0x08023690
 8010268:	08026eec 	.word	0x08026eec
 801026c:	08022f58 	.word	0x08022f58

08010270 <lfs_file_close>:
    LFS_TRACE("lfs_file_opencfg -> %d", err);
    LFS_UNLOCK(lfs->cfg);
    return err;
}

int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
 8010270:	b580      	push	{r7, lr}
 8010272:	b084      	sub	sp, #16
 8010274:	af00      	add	r7, sp, #0
 8010276:	6078      	str	r0, [r7, #4]
 8010278:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801027e:	695b      	ldr	r3, [r3, #20]
 8010280:	687a      	ldr	r2, [r7, #4]
 8010282:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8010284:	4610      	mov	r0, r2
 8010286:	4798      	blx	r3
 8010288:	60f8      	str	r0, [r7, #12]
    if (err) {
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d001      	beq.n	8010294 <lfs_file_close+0x24>
        return err;
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	e01c      	b.n	80102ce <lfs_file_close+0x5e>
    }
    LFS_TRACE("lfs_file_close(%p, %p)", (void*)lfs, (void*)file);
    LFS_ASSERT(lfs_mlist_isopen(lfs->mlist, (struct lfs_mlist*)file));
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010298:	6839      	ldr	r1, [r7, #0]
 801029a:	4618      	mov	r0, r3
 801029c:	f7fa ffaa 	bl	800b1f4 <lfs_mlist_isopen>
 80102a0:	4603      	mov	r3, r0
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d106      	bne.n	80102b4 <lfs_file_close+0x44>
 80102a6:	4b0c      	ldr	r3, [pc, #48]	; (80102d8 <lfs_file_close+0x68>)
 80102a8:	4a0c      	ldr	r2, [pc, #48]	; (80102dc <lfs_file_close+0x6c>)
 80102aa:	f241 410b 	movw	r1, #5131	; 0x140b
 80102ae:	480c      	ldr	r0, [pc, #48]	; (80102e0 <lfs_file_close+0x70>)
 80102b0:	f010 fe2c 	bl	8020f0c <__assert_func>

    err = lfs_file_rawclose(lfs, file);
 80102b4:	6839      	ldr	r1, [r7, #0]
 80102b6:	6878      	ldr	r0, [r7, #4]
 80102b8:	f7fe f8c2 	bl	800e440 <lfs_file_rawclose>
 80102bc:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_file_close -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102c2:	699b      	ldr	r3, [r3, #24]
 80102c4:	687a      	ldr	r2, [r7, #4]
 80102c6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80102c8:	4610      	mov	r0, r2
 80102ca:	4798      	blx	r3
    return err;
 80102cc:	68fb      	ldr	r3, [r7, #12]
}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	080236c8 	.word	0x080236c8
 80102dc:	08026efc 	.word	0x08026efc
 80102e0:	08022f58 	.word	0x08022f58

080102e4 <lfs_mkdir>:
    LFS_UNLOCK(lfs->cfg);
    return res;
}

#ifndef LFS_READONLY
int lfs_mkdir(lfs_t *lfs, const char *path) {
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
 80102ec:	6039      	str	r1, [r7, #0]
    int err = LFS_LOCK(lfs->cfg);
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102f2:	695b      	ldr	r3, [r3, #20]
 80102f4:	687a      	ldr	r2, [r7, #4]
 80102f6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80102f8:	4610      	mov	r0, r2
 80102fa:	4798      	blx	r3
 80102fc:	60f8      	str	r0, [r7, #12]
    if (err) {
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d001      	beq.n	8010308 <lfs_mkdir+0x24>
        return err;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	e00c      	b.n	8010322 <lfs_mkdir+0x3e>
    }
    LFS_TRACE("lfs_mkdir(%p, \"%s\")", (void*)lfs, path);

    err = lfs_rawmkdir(lfs, path);
 8010308:	6839      	ldr	r1, [r7, #0]
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f7fd fb4e 	bl	800d9ac <lfs_rawmkdir>
 8010310:	60f8      	str	r0, [r7, #12]

    LFS_TRACE("lfs_mkdir -> %d", err);
    LFS_UNLOCK(lfs->cfg);
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010316:	699b      	ldr	r3, [r3, #24]
 8010318:	687a      	ldr	r2, [r7, #4]
 801031a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801031c:	4610      	mov	r0, r2
 801031e:	4798      	blx	r3
    return err;
 8010320:	68fb      	ldr	r3, [r7, #12]
}
 8010322:	4618      	mov	r0, r3
 8010324:	3710      	adds	r7, #16
 8010326:	46bd      	mov	sp, r7
 8010328:	bd80      	pop	{r7, pc}
	...

0801032c <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
 801032c:	b480      	push	{r7}
 801032e:	b087      	sub	sp, #28
 8010330:	af00      	add	r7, sp, #0
 8010332:	60f8      	str	r0, [r7, #12]
 8010334:	60b9      	str	r1, [r7, #8]
 8010336:	607a      	str	r2, [r7, #4]
        0x76dc4190, 0x6b6b51f4, 0x4db26158, 0x5005713c,
        0xedb88320, 0xf00f9344, 0xd6d6a3e8, 0xcb61b38c,
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	613b      	str	r3, [r7, #16]

    for (size_t i = 0; i < size; i++) {
 801033c:	2300      	movs	r3, #0
 801033e:	617b      	str	r3, [r7, #20]
 8010340:	e024      	b.n	801038c <lfs_crc+0x60>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
 8010342:	68fb      	ldr	r3, [r7, #12]
 8010344:	091a      	lsrs	r2, r3, #4
 8010346:	6939      	ldr	r1, [r7, #16]
 8010348:	697b      	ldr	r3, [r7, #20]
 801034a:	440b      	add	r3, r1
 801034c:	781b      	ldrb	r3, [r3, #0]
 801034e:	4619      	mov	r1, r3
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	404b      	eors	r3, r1
 8010354:	f003 030f 	and.w	r3, r3, #15
 8010358:	4912      	ldr	r1, [pc, #72]	; (80103a4 <lfs_crc+0x78>)
 801035a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801035e:	4053      	eors	r3, r2
 8010360:	60fb      	str	r3, [r7, #12]
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	091a      	lsrs	r2, r3, #4
 8010366:	6939      	ldr	r1, [r7, #16]
 8010368:	697b      	ldr	r3, [r7, #20]
 801036a:	440b      	add	r3, r1
 801036c:	781b      	ldrb	r3, [r3, #0]
 801036e:	091b      	lsrs	r3, r3, #4
 8010370:	b2db      	uxtb	r3, r3
 8010372:	4619      	mov	r1, r3
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	404b      	eors	r3, r1
 8010378:	f003 030f 	and.w	r3, r3, #15
 801037c:	4909      	ldr	r1, [pc, #36]	; (80103a4 <lfs_crc+0x78>)
 801037e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010382:	4053      	eors	r3, r2
 8010384:	60fb      	str	r3, [r7, #12]
    for (size_t i = 0; i < size; i++) {
 8010386:	697b      	ldr	r3, [r7, #20]
 8010388:	3301      	adds	r3, #1
 801038a:	617b      	str	r3, [r7, #20]
 801038c:	697a      	ldr	r2, [r7, #20]
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	429a      	cmp	r2, r3
 8010392:	d3d6      	bcc.n	8010342 <lfs_crc+0x16>
    }

    return crc;
 8010394:	68fb      	ldr	r3, [r7, #12]
}
 8010396:	4618      	mov	r0, r3
 8010398:	371c      	adds	r7, #28
 801039a:	46bd      	mov	sp, r7
 801039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a0:	4770      	bx	lr
 80103a2:	bf00      	nop
 80103a4:	08026f0c 	.word	0x08026f0c

080103a8 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	330c      	adds	r3, #12
 80103b8:	461a      	mov	r2, r3
 80103ba:	6839      	ldr	r1, [r7, #0]
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f002 fa59 	bl	8012874 <tcpip_send_msg_wait_sem>
 80103c2:	4603      	mov	r3, r0
 80103c4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80103c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	d103      	bne.n	80103d6 <netconn_apimsg+0x2e>
    return apimsg->err;
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80103d4:	e001      	b.n	80103da <netconn_apimsg+0x32>
  }
  return err;
 80103d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3710      	adds	r7, #16
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
	...

080103e4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b08c      	sub	sp, #48	; 0x30
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	4603      	mov	r3, r0
 80103ec:	603a      	str	r2, [r7, #0]
 80103ee:	71fb      	strb	r3, [r7, #7]
 80103f0:	460b      	mov	r3, r1
 80103f2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80103f4:	79fb      	ldrb	r3, [r7, #7]
 80103f6:	6839      	ldr	r1, [r7, #0]
 80103f8:	4618      	mov	r0, r3
 80103fa:	f001 f949 	bl	8011690 <netconn_alloc>
 80103fe:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8010400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010402:	2b00      	cmp	r3, #0
 8010404:	d054      	beq.n	80104b0 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010406:	79bb      	ldrb	r3, [r7, #6]
 8010408:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 801040a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801040c:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 801040e:	f107 0308 	add.w	r3, r7, #8
 8010412:	4619      	mov	r1, r3
 8010414:	4829      	ldr	r0, [pc, #164]	; (80104bc <netconn_new_with_proto_and_callback+0xd8>)
 8010416:	f7ff ffc7 	bl	80103a8 <netconn_apimsg>
 801041a:	4603      	mov	r3, r0
 801041c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8010420:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010424:	2b00      	cmp	r3, #0
 8010426:	d043      	beq.n	80104b0 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	2b00      	cmp	r3, #0
 801042e:	d005      	beq.n	801043c <netconn_new_with_proto_and_callback+0x58>
 8010430:	4b23      	ldr	r3, [pc, #140]	; (80104c0 <netconn_new_with_proto_and_callback+0xdc>)
 8010432:	22a3      	movs	r2, #163	; 0xa3
 8010434:	4923      	ldr	r1, [pc, #140]	; (80104c4 <netconn_new_with_proto_and_callback+0xe0>)
 8010436:	4824      	ldr	r0, [pc, #144]	; (80104c8 <netconn_new_with_proto_and_callback+0xe4>)
 8010438:	f010 ffbe 	bl	80213b8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 801043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043e:	3310      	adds	r3, #16
 8010440:	4618      	mov	r0, r3
 8010442:	f00f fb00 	bl	801fa46 <sys_mbox_valid>
 8010446:	4603      	mov	r3, r0
 8010448:	2b00      	cmp	r3, #0
 801044a:	d105      	bne.n	8010458 <netconn_new_with_proto_and_callback+0x74>
 801044c:	4b1c      	ldr	r3, [pc, #112]	; (80104c0 <netconn_new_with_proto_and_callback+0xdc>)
 801044e:	22a4      	movs	r2, #164	; 0xa4
 8010450:	491e      	ldr	r1, [pc, #120]	; (80104cc <netconn_new_with_proto_and_callback+0xe8>)
 8010452:	481d      	ldr	r0, [pc, #116]	; (80104c8 <netconn_new_with_proto_and_callback+0xe4>)
 8010454:	f010 ffb0 	bl	80213b8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8010458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045a:	3314      	adds	r3, #20
 801045c:	4618      	mov	r0, r3
 801045e:	f00f faf2 	bl	801fa46 <sys_mbox_valid>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d005      	beq.n	8010474 <netconn_new_with_proto_and_callback+0x90>
 8010468:	4b15      	ldr	r3, [pc, #84]	; (80104c0 <netconn_new_with_proto_and_callback+0xdc>)
 801046a:	22a6      	movs	r2, #166	; 0xa6
 801046c:	4918      	ldr	r1, [pc, #96]	; (80104d0 <netconn_new_with_proto_and_callback+0xec>)
 801046e:	4816      	ldr	r0, [pc, #88]	; (80104c8 <netconn_new_with_proto_and_callback+0xe4>)
 8010470:	f010 ffa2 	bl	80213b8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010476:	330c      	adds	r3, #12
 8010478:	4618      	mov	r0, r3
 801047a:	f00f fb75 	bl	801fb68 <sys_sem_valid>
 801047e:	4603      	mov	r3, r0
 8010480:	2b00      	cmp	r3, #0
 8010482:	d105      	bne.n	8010490 <netconn_new_with_proto_and_callback+0xac>
 8010484:	4b0e      	ldr	r3, [pc, #56]	; (80104c0 <netconn_new_with_proto_and_callback+0xdc>)
 8010486:	22a9      	movs	r2, #169	; 0xa9
 8010488:	4912      	ldr	r1, [pc, #72]	; (80104d4 <netconn_new_with_proto_and_callback+0xf0>)
 801048a:	480f      	ldr	r0, [pc, #60]	; (80104c8 <netconn_new_with_proto_and_callback+0xe4>)
 801048c:	f010 ff94 	bl	80213b8 <iprintf>
      sys_sem_free(&conn->op_completed);
 8010490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010492:	330c      	adds	r3, #12
 8010494:	4618      	mov	r0, r3
 8010496:	f00f fb5a 	bl	801fb4e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 801049a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801049c:	3310      	adds	r3, #16
 801049e:	4618      	mov	r0, r3
 80104a0:	f00f fa4a 	bl	801f938 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 80104a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80104a6:	2007      	movs	r0, #7
 80104a8:	f002 ff92 	bl	80133d0 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80104ac:	2300      	movs	r3, #0
 80104ae:	e000      	b.n	80104b2 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80104b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	3730      	adds	r7, #48	; 0x30
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	08011665 	.word	0x08011665
 80104c0:	08023738 	.word	0x08023738
 80104c4:	0802376c 	.word	0x0802376c
 80104c8:	08023790 	.word	0x08023790
 80104cc:	080237b8 	.word	0x080237b8
 80104d0:	080237d0 	.word	0x080237d0
 80104d4:	080237f4 	.word	0x080237f4

080104d8 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b08c      	sub	sp, #48	; 0x30
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d101      	bne.n	80104ea <netconn_prepare_delete+0x12>
    return ERR_OK;
 80104e6:	2300      	movs	r3, #0
 80104e8:	e014      	b.n	8010514 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80104ee:	2329      	movs	r3, #41	; 0x29
 80104f0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80104f2:	f107 030c 	add.w	r3, r7, #12
 80104f6:	4619      	mov	r1, r3
 80104f8:	4808      	ldr	r0, [pc, #32]	; (801051c <netconn_prepare_delete+0x44>)
 80104fa:	f7ff ff55 	bl	80103a8 <netconn_apimsg>
 80104fe:	4603      	mov	r3, r0
 8010500:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010504:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010508:	2b00      	cmp	r3, #0
 801050a:	d002      	beq.n	8010512 <netconn_prepare_delete+0x3a>
    return err;
 801050c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010510:	e000      	b.n	8010514 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010512:	2300      	movs	r3, #0
}
 8010514:	4618      	mov	r0, r3
 8010516:	3730      	adds	r7, #48	; 0x30
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	08011bd9 	.word	0x08011bd9

08010520 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010520:	b580      	push	{r7, lr}
 8010522:	b084      	sub	sp, #16
 8010524:	af00      	add	r7, sp, #0
 8010526:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d101      	bne.n	8010532 <netconn_delete+0x12>
    return ERR_OK;
 801052e:	2300      	movs	r3, #0
 8010530:	e00d      	b.n	801054e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8010532:	6878      	ldr	r0, [r7, #4]
 8010534:	f7ff ffd0 	bl	80104d8 <netconn_prepare_delete>
 8010538:	4603      	mov	r3, r0
 801053a:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 801053c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010540:	2b00      	cmp	r3, #0
 8010542:	d102      	bne.n	801054a <netconn_delete+0x2a>
    netconn_free(conn);
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f001 f915 	bl	8011774 <netconn_free>
  }
  return err;
 801054a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801054e:	4618      	mov	r0, r3
 8010550:	3710      	adds	r7, #16
 8010552:	46bd      	mov	sp, r7
 8010554:	bd80      	pop	{r7, pc}
	...

08010558 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b08e      	sub	sp, #56	; 0x38
 801055c:	af00      	add	r7, sp, #0
 801055e:	60f8      	str	r0, [r7, #12]
 8010560:	60b9      	str	r1, [r7, #8]
 8010562:	4613      	mov	r3, r2
 8010564:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d109      	bne.n	8010580 <netconn_bind+0x28>
 801056c:	4b11      	ldr	r3, [pc, #68]	; (80105b4 <netconn_bind+0x5c>)
 801056e:	f44f 729c 	mov.w	r2, #312	; 0x138
 8010572:	4911      	ldr	r1, [pc, #68]	; (80105b8 <netconn_bind+0x60>)
 8010574:	4811      	ldr	r0, [pc, #68]	; (80105bc <netconn_bind+0x64>)
 8010576:	f010 ff1f 	bl	80213b8 <iprintf>
 801057a:	f06f 030f 	mvn.w	r3, #15
 801057e:	e015      	b.n	80105ac <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d101      	bne.n	801058a <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8010586:	4b0e      	ldr	r3, [pc, #56]	; (80105c0 <netconn_bind+0x68>)
 8010588:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8010592:	88fb      	ldrh	r3, [r7, #6]
 8010594:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8010596:	f107 0314 	add.w	r3, r7, #20
 801059a:	4619      	mov	r1, r3
 801059c:	4809      	ldr	r0, [pc, #36]	; (80105c4 <netconn_bind+0x6c>)
 801059e:	f7ff ff03 	bl	80103a8 <netconn_apimsg>
 80105a2:	4603      	mov	r3, r0
 80105a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 80105a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80105ac:	4618      	mov	r0, r3
 80105ae:	3738      	adds	r7, #56	; 0x38
 80105b0:	46bd      	mov	sp, r7
 80105b2:	bd80      	pop	{r7, pc}
 80105b4:	08023738 	.word	0x08023738
 80105b8:	08023870 	.word	0x08023870
 80105bc:	08023790 	.word	0x08023790
 80105c0:	08027070 	.word	0x08027070
 80105c4:	08011da5 	.word	0x08011da5

080105c8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80105c8:	b580      	push	{r7, lr}
 80105ca:	b08c      	sub	sp, #48	; 0x30
 80105cc:	af00      	add	r7, sp, #0
 80105ce:	6078      	str	r0, [r7, #4]
 80105d0:	460b      	mov	r3, r1
 80105d2:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d109      	bne.n	80105ee <netconn_listen_with_backlog+0x26>
 80105da:	4b0d      	ldr	r3, [pc, #52]	; (8010610 <netconn_listen_with_backlog+0x48>)
 80105dc:	f240 12bb 	movw	r2, #443	; 0x1bb
 80105e0:	490c      	ldr	r1, [pc, #48]	; (8010614 <netconn_listen_with_backlog+0x4c>)
 80105e2:	480d      	ldr	r0, [pc, #52]	; (8010618 <netconn_listen_with_backlog+0x50>)
 80105e4:	f010 fee8 	bl	80213b8 <iprintf>
 80105e8:	f06f 030f 	mvn.w	r3, #15
 80105ec:	e00c      	b.n	8010608 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80105f2:	f107 030c 	add.w	r3, r7, #12
 80105f6:	4619      	mov	r1, r3
 80105f8:	4808      	ldr	r0, [pc, #32]	; (801061c <netconn_listen_with_backlog+0x54>)
 80105fa:	f7ff fed5 	bl	80103a8 <netconn_apimsg>
 80105fe:	4603      	mov	r3, r0
 8010600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010604:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8010608:	4618      	mov	r0, r3
 801060a:	3730      	adds	r7, #48	; 0x30
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}
 8010610:	08023738 	.word	0x08023738
 8010614:	080238f0 	.word	0x080238f0
 8010618:	08023790 	.word	0x08023790
 801061c:	08011e19 	.word	0x08011e19

08010620 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b086      	sub	sp, #24
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 801062a:	683b      	ldr	r3, [r7, #0]
 801062c:	2b00      	cmp	r3, #0
 801062e:	d109      	bne.n	8010644 <netconn_accept+0x24>
 8010630:	4b42      	ldr	r3, [pc, #264]	; (801073c <netconn_accept+0x11c>)
 8010632:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010636:	4942      	ldr	r1, [pc, #264]	; (8010740 <netconn_accept+0x120>)
 8010638:	4842      	ldr	r0, [pc, #264]	; (8010744 <netconn_accept+0x124>)
 801063a:	f010 febd 	bl	80213b8 <iprintf>
 801063e:	f06f 030f 	mvn.w	r3, #15
 8010642:	e077      	b.n	8010734 <netconn_accept+0x114>
  *new_conn = NULL;
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	2200      	movs	r2, #0
 8010648:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	2b00      	cmp	r3, #0
 801064e:	d109      	bne.n	8010664 <netconn_accept+0x44>
 8010650:	4b3a      	ldr	r3, [pc, #232]	; (801073c <netconn_accept+0x11c>)
 8010652:	f240 12e3 	movw	r2, #483	; 0x1e3
 8010656:	493c      	ldr	r1, [pc, #240]	; (8010748 <netconn_accept+0x128>)
 8010658:	483a      	ldr	r0, [pc, #232]	; (8010744 <netconn_accept+0x124>)
 801065a:	f010 fead 	bl	80213b8 <iprintf>
 801065e:	f06f 030f 	mvn.w	r3, #15
 8010662:	e067      	b.n	8010734 <netconn_accept+0x114>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f000 fb88 	bl	8010d7a <netconn_err>
 801066a:	4603      	mov	r3, r0
 801066c:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 801066e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d002      	beq.n	801067c <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8010676:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801067a:	e05b      	b.n	8010734 <netconn_accept+0x114>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	3314      	adds	r3, #20
 8010680:	4618      	mov	r0, r3
 8010682:	f00f f9e0 	bl	801fa46 <sys_mbox_valid>
 8010686:	4603      	mov	r3, r0
 8010688:	2b00      	cmp	r3, #0
 801068a:	d006      	beq.n	801069a <netconn_accept+0x7a>
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010692:	f003 0301 	and.w	r3, r3, #1
 8010696:	2b00      	cmp	r3, #0
 8010698:	d002      	beq.n	80106a0 <netconn_accept+0x80>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 801069a:	f06f 030e 	mvn.w	r3, #14
 801069e:	e049      	b.n	8010734 <netconn_accept+0x114>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80106a6:	f003 0302 	and.w	r3, r3, #2
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d00e      	beq.n	80106cc <netconn_accept+0xac>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	3314      	adds	r3, #20
 80106b2:	f107 020c 	add.w	r2, r7, #12
 80106b6:	4611      	mov	r1, r2
 80106b8:	4618      	mov	r0, r3
 80106ba:	f00f f9a8 	bl	801fa0e <sys_arch_mbox_tryfetch>
 80106be:	4603      	mov	r3, r0
 80106c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106c4:	d113      	bne.n	80106ee <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80106c6:	f06f 0306 	mvn.w	r3, #6
 80106ca:	e033      	b.n	8010734 <netconn_accept+0x114>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	f103 0014 	add.w	r0, r3, #20
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	69da      	ldr	r2, [r3, #28]
 80106d6:	f107 030c 	add.w	r3, r7, #12
 80106da:	4619      	mov	r1, r3
 80106dc:	f00f f958 	bl	801f990 <sys_arch_mbox_fetch>
 80106e0:	4603      	mov	r3, r0
 80106e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80106e6:	d102      	bne.n	80106ee <netconn_accept+0xce>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 80106e8:	f06f 0302 	mvn.w	r3, #2
 80106ec:	e022      	b.n	8010734 <netconn_accept+0x114>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d005      	beq.n	8010702 <netconn_accept+0xe2>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80106fa:	2200      	movs	r2, #0
 80106fc:	2101      	movs	r1, #1
 80106fe:	6878      	ldr	r0, [r7, #4]
 8010700:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	f107 0213 	add.w	r2, r7, #19
 8010708:	4611      	mov	r1, r2
 801070a:	4618      	mov	r0, r3
 801070c:	f000 fb86 	bl	8010e1c <lwip_netconn_is_err_msg>
 8010710:	4603      	mov	r3, r0
 8010712:	2b00      	cmp	r3, #0
 8010714:	d002      	beq.n	801071c <netconn_accept+0xfc>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8010716:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801071a:	e00b      	b.n	8010734 <netconn_accept+0x114>
  }
  if (accept_ptr == NULL) {
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	2b00      	cmp	r3, #0
 8010720:	d102      	bne.n	8010728 <netconn_accept+0x108>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8010722:	f06f 030e 	mvn.w	r3, #14
 8010726:	e005      	b.n	8010734 <netconn_accept+0x114>
  }
  newconn = (struct netconn *)accept_ptr;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 801072c:	683b      	ldr	r3, [r7, #0]
 801072e:	697a      	ldr	r2, [r7, #20]
 8010730:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8010732:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8010734:	4618      	mov	r0, r3
 8010736:	3718      	adds	r7, #24
 8010738:	46bd      	mov	sp, r7
 801073a:	bd80      	pop	{r7, pc}
 801073c:	08023738 	.word	0x08023738
 8010740:	08023910 	.word	0x08023910
 8010744:	08023790 	.word	0x08023790
 8010748:	08023930 	.word	0x08023930

0801074c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 801074c:	b580      	push	{r7, lr}
 801074e:	b088      	sub	sp, #32
 8010750:	af00      	add	r7, sp, #0
 8010752:	60f8      	str	r0, [r7, #12]
 8010754:	60b9      	str	r1, [r7, #8]
 8010756:	4613      	mov	r3, r2
 8010758:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 801075a:	2300      	movs	r3, #0
 801075c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d109      	bne.n	8010778 <netconn_recv_data+0x2c>
 8010764:	4b5e      	ldr	r3, [pc, #376]	; (80108e0 <netconn_recv_data+0x194>)
 8010766:	f44f 7212 	mov.w	r2, #584	; 0x248
 801076a:	495e      	ldr	r1, [pc, #376]	; (80108e4 <netconn_recv_data+0x198>)
 801076c:	485e      	ldr	r0, [pc, #376]	; (80108e8 <netconn_recv_data+0x19c>)
 801076e:	f010 fe23 	bl	80213b8 <iprintf>
 8010772:	f06f 030f 	mvn.w	r3, #15
 8010776:	e0ae      	b.n	80108d6 <netconn_recv_data+0x18a>
  *new_buf = NULL;
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	2200      	movs	r2, #0
 801077c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d109      	bne.n	8010798 <netconn_recv_data+0x4c>
 8010784:	4b56      	ldr	r3, [pc, #344]	; (80108e0 <netconn_recv_data+0x194>)
 8010786:	f240 224a 	movw	r2, #586	; 0x24a
 801078a:	4958      	ldr	r1, [pc, #352]	; (80108ec <netconn_recv_data+0x1a0>)
 801078c:	4856      	ldr	r0, [pc, #344]	; (80108e8 <netconn_recv_data+0x19c>)
 801078e:	f010 fe13 	bl	80213b8 <iprintf>
 8010792:	f06f 030f 	mvn.w	r3, #15
 8010796:	e09e      	b.n	80108d6 <netconn_recv_data+0x18a>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010798:	68fb      	ldr	r3, [r7, #12]
 801079a:	3310      	adds	r3, #16
 801079c:	4618      	mov	r0, r3
 801079e:	f00f f952 	bl	801fa46 <sys_mbox_valid>
 80107a2:	4603      	mov	r3, r0
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d10e      	bne.n	80107c6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80107a8:	68f8      	ldr	r0, [r7, #12]
 80107aa:	f000 fae6 	bl	8010d7a <netconn_err>
 80107ae:	4603      	mov	r3, r0
 80107b0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 80107b2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d002      	beq.n	80107c0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 80107ba:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80107be:	e08a      	b.n	80108d6 <netconn_recv_data+0x18a>
    }
    return ERR_CONN;
 80107c0:	f06f 030a 	mvn.w	r3, #10
 80107c4:	e087      	b.n	80108d6 <netconn_recv_data+0x18a>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80107cc:	f003 0302 	and.w	r3, r3, #2
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d110      	bne.n	80107f6 <netconn_recv_data+0xaa>
 80107d4:	79fb      	ldrb	r3, [r7, #7]
 80107d6:	f003 0304 	and.w	r3, r3, #4
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d10b      	bne.n	80107f6 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80107e4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d104      	bne.n	80107f6 <netconn_recv_data+0xaa>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 80107ec:	68fb      	ldr	r3, [r7, #12]
 80107ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d024      	beq.n	8010840 <netconn_recv_data+0xf4>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	3310      	adds	r3, #16
 80107fa:	f107 0218 	add.w	r2, r7, #24
 80107fe:	4611      	mov	r1, r2
 8010800:	4618      	mov	r0, r3
 8010802:	f00f f904 	bl	801fa0e <sys_arch_mbox_tryfetch>
 8010806:	4603      	mov	r3, r0
 8010808:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801080c:	d129      	bne.n	8010862 <netconn_recv_data+0x116>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 801080e:	68f8      	ldr	r0, [r7, #12]
 8010810:	f000 fab3 	bl	8010d7a <netconn_err>
 8010814:	4603      	mov	r3, r0
 8010816:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8010818:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d002      	beq.n	8010826 <netconn_recv_data+0xda>
        /* return pending error */
        return err;
 8010820:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8010824:	e057      	b.n	80108d6 <netconn_recv_data+0x18a>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f893 3020 	ldrb.w	r3, [r3, #32]
 801082c:	f003 0301 	and.w	r3, r3, #1
 8010830:	2b00      	cmp	r3, #0
 8010832:	d002      	beq.n	801083a <netconn_recv_data+0xee>
        return ERR_CONN;
 8010834:	f06f 030a 	mvn.w	r3, #10
 8010838:	e04d      	b.n	80108d6 <netconn_recv_data+0x18a>
      }
      return ERR_WOULDBLOCK;
 801083a:	f06f 0306 	mvn.w	r3, #6
 801083e:	e04a      	b.n	80108d6 <netconn_recv_data+0x18a>
    }
  } else {
#if LWIP_SO_RCVTIMEO
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	f103 0010 	add.w	r0, r3, #16
 8010846:	68fb      	ldr	r3, [r7, #12]
 8010848:	69da      	ldr	r2, [r3, #28]
 801084a:	f107 0318 	add.w	r3, r7, #24
 801084e:	4619      	mov	r1, r3
 8010850:	f00f f89e 	bl	801f990 <sys_arch_mbox_fetch>
 8010854:	4603      	mov	r3, r0
 8010856:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801085a:	d102      	bne.n	8010862 <netconn_recv_data+0x116>
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
 801085c:	f06f 0302 	mvn.w	r3, #2
 8010860:	e039      	b.n	80108d6 <netconn_recv_data+0x18a>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8010862:	68fb      	ldr	r3, [r7, #12]
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801086a:	2b10      	cmp	r3, #16
 801086c:	d117      	bne.n	801089e <netconn_recv_data+0x152>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 801086e:	69bb      	ldr	r3, [r7, #24]
 8010870:	f107 0217 	add.w	r2, r7, #23
 8010874:	4611      	mov	r1, r2
 8010876:	4618      	mov	r0, r3
 8010878:	f000 fad0 	bl	8010e1c <lwip_netconn_is_err_msg>
 801087c:	4603      	mov	r3, r0
 801087e:	2b00      	cmp	r3, #0
 8010880:	d009      	beq.n	8010896 <netconn_recv_data+0x14a>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8010882:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010886:	f113 0f0f 	cmn.w	r3, #15
 801088a:	d101      	bne.n	8010890 <netconn_recv_data+0x144>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 801088c:	2300      	movs	r3, #0
 801088e:	e022      	b.n	80108d6 <netconn_recv_data+0x18a>
      }
      return err;
 8010890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010894:	e01f      	b.n	80108d6 <netconn_recv_data+0x18a>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	891b      	ldrh	r3, [r3, #8]
 801089a:	83fb      	strh	r3, [r7, #30]
 801089c:	e00d      	b.n	80108ba <netconn_recv_data+0x16e>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801089e:	69bb      	ldr	r3, [r7, #24]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d106      	bne.n	80108b2 <netconn_recv_data+0x166>
 80108a4:	4b0e      	ldr	r3, [pc, #56]	; (80108e0 <netconn_recv_data+0x194>)
 80108a6:	f240 2291 	movw	r2, #657	; 0x291
 80108aa:	4911      	ldr	r1, [pc, #68]	; (80108f0 <netconn_recv_data+0x1a4>)
 80108ac:	480e      	ldr	r0, [pc, #56]	; (80108e8 <netconn_recv_data+0x19c>)
 80108ae:	f010 fd83 	bl	80213b8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80108b2:	69bb      	ldr	r3, [r7, #24]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	891b      	ldrh	r3, [r3, #8]
 80108b8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d005      	beq.n	80108ce <netconn_recv_data+0x182>
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80108c6:	8bfa      	ldrh	r2, [r7, #30]
 80108c8:	2101      	movs	r1, #1
 80108ca:	68f8      	ldr	r0, [r7, #12]
 80108cc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80108ce:	69ba      	ldr	r2, [r7, #24]
 80108d0:	68bb      	ldr	r3, [r7, #8]
 80108d2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80108d4:	2300      	movs	r3, #0
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	3720      	adds	r7, #32
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd80      	pop	{r7, pc}
 80108de:	bf00      	nop
 80108e0:	08023738 	.word	0x08023738
 80108e4:	08023950 	.word	0x08023950
 80108e8:	08023790 	.word	0x08023790
 80108ec:	08023970 	.word	0x08023970
 80108f0:	0802398c 	.word	0x0802398c

080108f4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b084      	sub	sp, #16
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	60f8      	str	r0, [r7, #12]
 80108fc:	60b9      	str	r1, [r7, #8]
 80108fe:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d005      	beq.n	8010912 <netconn_tcp_recvd_msg+0x1e>
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	781b      	ldrb	r3, [r3, #0]
 801090a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801090e:	2b10      	cmp	r3, #16
 8010910:	d009      	beq.n	8010926 <netconn_tcp_recvd_msg+0x32>
 8010912:	4b0c      	ldr	r3, [pc, #48]	; (8010944 <netconn_tcp_recvd_msg+0x50>)
 8010914:	f240 22a7 	movw	r2, #679	; 0x2a7
 8010918:	490b      	ldr	r1, [pc, #44]	; (8010948 <netconn_tcp_recvd_msg+0x54>)
 801091a:	480c      	ldr	r0, [pc, #48]	; (801094c <netconn_tcp_recvd_msg+0x58>)
 801091c:	f010 fd4c 	bl	80213b8 <iprintf>
 8010920:	f06f 030f 	mvn.w	r3, #15
 8010924:	e00a      	b.n	801093c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	68fa      	ldr	r2, [r7, #12]
 801092a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	68ba      	ldr	r2, [r7, #8]
 8010930:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8010932:	6879      	ldr	r1, [r7, #4]
 8010934:	4806      	ldr	r0, [pc, #24]	; (8010950 <netconn_tcp_recvd_msg+0x5c>)
 8010936:	f7ff fd37 	bl	80103a8 <netconn_apimsg>
 801093a:	4603      	mov	r3, r0
}
 801093c:	4618      	mov	r0, r3
 801093e:	3710      	adds	r7, #16
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	08023738 	.word	0x08023738
 8010948:	08023998 	.word	0x08023998
 801094c:	08023790 	.word	0x08023790
 8010950:	08011f49 	.word	0x08011f49

08010954 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8010954:	b580      	push	{r7, lr}
 8010956:	b090      	sub	sp, #64	; 0x40
 8010958:	af00      	add	r7, sp, #0
 801095a:	60f8      	str	r0, [r7, #12]
 801095c:	60b9      	str	r1, [r7, #8]
 801095e:	4613      	mov	r3, r2
 8010960:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	3310      	adds	r3, #16
 8010966:	4618      	mov	r0, r3
 8010968:	f00f f86d 	bl	801fa46 <sys_mbox_valid>
 801096c:	4603      	mov	r3, r0
 801096e:	2b00      	cmp	r3, #0
 8010970:	d102      	bne.n	8010978 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8010972:	f06f 030a 	mvn.w	r3, #10
 8010976:	e072      	b.n	8010a5e <netconn_recv_data_tcp+0x10a>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801097e:	b25b      	sxtb	r3, r3
 8010980:	2b00      	cmp	r3, #0
 8010982:	da09      	bge.n	8010998 <netconn_recv_data_tcp+0x44>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	f893 3020 	ldrb.w	r3, [r3, #32]
 801098a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801098e:	b2da      	uxtb	r2, r3
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	f883 2020 	strb.w	r2, [r3, #32]
    goto handle_fin;
 8010996:	e03b      	b.n	8010a10 <netconn_recv_data_tcp+0xbc>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8010998:	79fb      	ldrb	r3, [r7, #7]
 801099a:	461a      	mov	r2, r3
 801099c:	68b9      	ldr	r1, [r7, #8]
 801099e:	68f8      	ldr	r0, [r7, #12]
 80109a0:	f7ff fed4 	bl	801074c <netconn_recv_data>
 80109a4:	4603      	mov	r3, r0
 80109a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80109aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d002      	beq.n	80109b8 <netconn_recv_data_tcp+0x64>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80109b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80109b6:	e052      	b.n	8010a5e <netconn_recv_data_tcp+0x10a>
  }
  buf = *new_buf;
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80109be:	79fb      	ldrb	r3, [r7, #7]
 80109c0:	f003 0308 	and.w	r3, r3, #8
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d10e      	bne.n	80109e6 <netconn_recv_data_tcp+0x92>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80109c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d002      	beq.n	80109d4 <netconn_recv_data_tcp+0x80>
 80109ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d0:	891b      	ldrh	r3, [r3, #8]
 80109d2:	e000      	b.n	80109d6 <netconn_recv_data_tcp+0x82>
 80109d4:	2301      	movs	r3, #1
 80109d6:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80109d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80109da:	f107 0214 	add.w	r2, r7, #20
 80109de:	4619      	mov	r1, r3
 80109e0:	68f8      	ldr	r0, [r7, #12]
 80109e2:	f7ff ff87 	bl	80108f4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80109e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d136      	bne.n	8010a5a <netconn_recv_data_tcp+0x106>
    if (apiflags & NETCONN_NOFIN) {
 80109ec:	79fb      	ldrb	r3, [r7, #7]
 80109ee:	f003 0310 	and.w	r3, r3, #16
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00b      	beq.n	8010a0e <netconn_recv_data_tcp+0xba>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80109fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010a00:	b2da      	uxtb	r2, r3
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	f883 2020 	strb.w	r2, [r3, #32]
      return ERR_WOULDBLOCK;
 8010a08:	f06f 0306 	mvn.w	r3, #6
 8010a0c:	e027      	b.n	8010a5e <netconn_recv_data_tcp+0x10a>
    } else {
handle_fin:
 8010a0e:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d005      	beq.n	8010a24 <netconn_recv_data_tcp+0xd0>
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	2101      	movs	r1, #1
 8010a20:	68f8      	ldr	r0, [r7, #12]
 8010a22:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	685b      	ldr	r3, [r3, #4]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d10f      	bne.n	8010a4c <netconn_recv_data_tcp+0xf8>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8010a2c:	68f8      	ldr	r0, [r7, #12]
 8010a2e:	f000 f9a4 	bl	8010d7a <netconn_err>
 8010a32:	4603      	mov	r3, r0
 8010a34:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8010a38:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d002      	beq.n	8010a46 <netconn_recv_data_tcp+0xf2>
          return err;
 8010a40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8010a44:	e00b      	b.n	8010a5e <netconn_recv_data_tcp+0x10a>
        }
        return ERR_RST;
 8010a46:	f06f 030d 	mvn.w	r3, #13
 8010a4a:	e008      	b.n	8010a5e <netconn_recv_data_tcp+0x10a>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8010a4c:	2101      	movs	r1, #1
 8010a4e:	68f8      	ldr	r0, [r7, #12]
 8010a50:	f000 f956 	bl	8010d00 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8010a54:	f06f 030e 	mvn.w	r3, #14
 8010a58:	e001      	b.n	8010a5e <netconn_recv_data_tcp+0x10a>
    }
  }
  return err;
 8010a5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8010a5e:	4618      	mov	r0, r3
 8010a60:	3740      	adds	r7, #64	; 0x40
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}
	...

08010a68 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8010a68:	b580      	push	{r7, lr}
 8010a6a:	b086      	sub	sp, #24
 8010a6c:	af00      	add	r7, sp, #0
 8010a6e:	6078      	str	r0, [r7, #4]
 8010a70:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8010a72:	2300      	movs	r3, #0
 8010a74:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d109      	bne.n	8010a90 <netconn_recv+0x28>
 8010a7c:	4b32      	ldr	r3, [pc, #200]	; (8010b48 <netconn_recv+0xe0>)
 8010a7e:	f240 3263 	movw	r2, #867	; 0x363
 8010a82:	4932      	ldr	r1, [pc, #200]	; (8010b4c <netconn_recv+0xe4>)
 8010a84:	4832      	ldr	r0, [pc, #200]	; (8010b50 <netconn_recv+0xe8>)
 8010a86:	f010 fc97 	bl	80213b8 <iprintf>
 8010a8a:	f06f 030f 	mvn.w	r3, #15
 8010a8e:	e056      	b.n	8010b3e <netconn_recv+0xd6>
  *new_buf = NULL;
 8010a90:	683b      	ldr	r3, [r7, #0]
 8010a92:	2200      	movs	r2, #0
 8010a94:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d109      	bne.n	8010ab0 <netconn_recv+0x48>
 8010a9c:	4b2a      	ldr	r3, [pc, #168]	; (8010b48 <netconn_recv+0xe0>)
 8010a9e:	f240 3265 	movw	r2, #869	; 0x365
 8010aa2:	492c      	ldr	r1, [pc, #176]	; (8010b54 <netconn_recv+0xec>)
 8010aa4:	482a      	ldr	r0, [pc, #168]	; (8010b50 <netconn_recv+0xe8>)
 8010aa6:	f010 fc87 	bl	80213b8 <iprintf>
 8010aaa:	f06f 030f 	mvn.w	r3, #15
 8010aae:	e046      	b.n	8010b3e <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010ab8:	2b10      	cmp	r3, #16
 8010aba:	d13a      	bne.n	8010b32 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8010abc:	2300      	movs	r3, #0
 8010abe:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8010ac0:	2006      	movs	r0, #6
 8010ac2:	f002 fc0f 	bl	80132e4 <memp_malloc>
 8010ac6:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	2b00      	cmp	r3, #0
 8010acc:	d102      	bne.n	8010ad4 <netconn_recv+0x6c>
      return ERR_MEM;
 8010ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ad2:	e034      	b.n	8010b3e <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8010ad4:	f107 030c 	add.w	r3, r7, #12
 8010ad8:	2200      	movs	r2, #0
 8010ada:	4619      	mov	r1, r3
 8010adc:	6878      	ldr	r0, [r7, #4]
 8010ade:	f7ff ff39 	bl	8010954 <netconn_recv_data_tcp>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010ae6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d006      	beq.n	8010afc <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8010aee:	6979      	ldr	r1, [r7, #20]
 8010af0:	2006      	movs	r0, #6
 8010af2:	f002 fc6d 	bl	80133d0 <memp_free>
      return err;
 8010af6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010afa:	e020      	b.n	8010b3e <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d106      	bne.n	8010b10 <netconn_recv+0xa8>
 8010b02:	4b11      	ldr	r3, [pc, #68]	; (8010b48 <netconn_recv+0xe0>)
 8010b04:	f240 3279 	movw	r2, #889	; 0x379
 8010b08:	4913      	ldr	r1, [pc, #76]	; (8010b58 <netconn_recv+0xf0>)
 8010b0a:	4811      	ldr	r0, [pc, #68]	; (8010b50 <netconn_recv+0xe8>)
 8010b0c:	f010 fc54 	bl	80213b8 <iprintf>

    buf->p = p;
 8010b10:	68fa      	ldr	r2, [r7, #12]
 8010b12:	697b      	ldr	r3, [r7, #20]
 8010b14:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010b16:	68fa      	ldr	r2, [r7, #12]
 8010b18:	697b      	ldr	r3, [r7, #20]
 8010b1a:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8010b1c:	697b      	ldr	r3, [r7, #20]
 8010b1e:	2200      	movs	r2, #0
 8010b20:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	2200      	movs	r2, #0
 8010b26:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	697a      	ldr	r2, [r7, #20]
 8010b2c:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	e005      	b.n	8010b3e <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8010b32:	2200      	movs	r2, #0
 8010b34:	6839      	ldr	r1, [r7, #0]
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f7ff fe08 	bl	801074c <netconn_recv_data>
 8010b3c:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3718      	adds	r7, #24
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	08023738 	.word	0x08023738
 8010b4c:	08023950 	.word	0x08023950
 8010b50:	08023790 	.word	0x08023790
 8010b54:	08023970 	.word	0x08023970
 8010b58:	080239e8 	.word	0x080239e8

08010b5c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8010b5c:	b580      	push	{r7, lr}
 8010b5e:	b088      	sub	sp, #32
 8010b60:	af02      	add	r7, sp, #8
 8010b62:	60f8      	str	r0, [r7, #12]
 8010b64:	60b9      	str	r1, [r7, #8]
 8010b66:	607a      	str	r2, [r7, #4]
 8010b68:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8010b72:	78fa      	ldrb	r2, [r7, #3]
 8010b74:	f107 0110 	add.w	r1, r7, #16
 8010b78:	6a3b      	ldr	r3, [r7, #32]
 8010b7a:	9300      	str	r3, [sp, #0]
 8010b7c:	4613      	mov	r3, r2
 8010b7e:	2201      	movs	r2, #1
 8010b80:	68f8      	ldr	r0, [r7, #12]
 8010b82:	f000 f805 	bl	8010b90 <netconn_write_vectors_partly>
 8010b86:	4603      	mov	r3, r0
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3718      	adds	r7, #24
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd80      	pop	{r7, pc}

08010b90 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b092      	sub	sp, #72	; 0x48
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	60f8      	str	r0, [r7, #12]
 8010b98:	60b9      	str	r1, [r7, #8]
 8010b9a:	4611      	mov	r1, r2
 8010b9c:	461a      	mov	r2, r3
 8010b9e:	460b      	mov	r3, r1
 8010ba0:	80fb      	strh	r3, [r7, #6]
 8010ba2:	4613      	mov	r3, r2
 8010ba4:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d109      	bne.n	8010bc0 <netconn_write_vectors_partly+0x30>
 8010bac:	4b4e      	ldr	r3, [pc, #312]	; (8010ce8 <netconn_write_vectors_partly+0x158>)
 8010bae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010bb2:	494e      	ldr	r1, [pc, #312]	; (8010cec <netconn_write_vectors_partly+0x15c>)
 8010bb4:	484e      	ldr	r0, [pc, #312]	; (8010cf0 <netconn_write_vectors_partly+0x160>)
 8010bb6:	f010 fbff 	bl	80213b8 <iprintf>
 8010bba:	f06f 030f 	mvn.w	r3, #15
 8010bbe:	e08f      	b.n	8010ce0 <netconn_write_vectors_partly+0x150>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010bc8:	2b10      	cmp	r3, #16
 8010bca:	d009      	beq.n	8010be0 <netconn_write_vectors_partly+0x50>
 8010bcc:	4b46      	ldr	r3, [pc, #280]	; (8010ce8 <netconn_write_vectors_partly+0x158>)
 8010bce:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8010bd2:	4948      	ldr	r1, [pc, #288]	; (8010cf4 <netconn_write_vectors_partly+0x164>)
 8010bd4:	4846      	ldr	r0, [pc, #280]	; (8010cf0 <netconn_write_vectors_partly+0x160>)
 8010bd6:	f010 fbef 	bl	80213b8 <iprintf>
 8010bda:	f06f 0305 	mvn.w	r3, #5
 8010bde:	e07f      	b.n	8010ce0 <netconn_write_vectors_partly+0x150>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010be6:	f003 0302 	and.w	r3, r3, #2
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d104      	bne.n	8010bf8 <netconn_write_vectors_partly+0x68>
 8010bee:	797b      	ldrb	r3, [r7, #5]
 8010bf0:	f003 0304 	and.w	r3, r3, #4
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d001      	beq.n	8010bfc <netconn_write_vectors_partly+0x6c>
 8010bf8:	2301      	movs	r3, #1
 8010bfa:	e000      	b.n	8010bfe <netconn_write_vectors_partly+0x6e>
 8010bfc:	2300      	movs	r3, #0
 8010bfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8010c02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d005      	beq.n	8010c16 <netconn_write_vectors_partly+0x86>
 8010c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	d102      	bne.n	8010c16 <netconn_write_vectors_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8010c10:	f06f 0305 	mvn.w	r3, #5
 8010c14:	e064      	b.n	8010ce0 <netconn_write_vectors_partly+0x150>
  }

  /* sum up the total size */
  size = 0;
 8010c16:	2300      	movs	r3, #0
 8010c18:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	643b      	str	r3, [r7, #64]	; 0x40
 8010c1e:	e015      	b.n	8010c4c <netconn_write_vectors_partly+0xbc>
    size += vectors[i].len;
 8010c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c22:	00db      	lsls	r3, r3, #3
 8010c24:	68ba      	ldr	r2, [r7, #8]
 8010c26:	4413      	add	r3, r2
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c2c:	4413      	add	r3, r2
 8010c2e:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8010c30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c32:	00db      	lsls	r3, r3, #3
 8010c34:	68ba      	ldr	r2, [r7, #8]
 8010c36:	4413      	add	r3, r2
 8010c38:	685b      	ldr	r3, [r3, #4]
 8010c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c3c:	429a      	cmp	r2, r3
 8010c3e:	d202      	bcs.n	8010c46 <netconn_write_vectors_partly+0xb6>
      /* overflow */
      return ERR_VAL;
 8010c40:	f06f 0305 	mvn.w	r3, #5
 8010c44:	e04c      	b.n	8010ce0 <netconn_write_vectors_partly+0x150>
  for (i = 0; i < vectorcnt; i++) {
 8010c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010c48:	3301      	adds	r3, #1
 8010c4a:	643b      	str	r3, [r7, #64]	; 0x40
 8010c4c:	88fb      	ldrh	r3, [r7, #6]
 8010c4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010c50:	429a      	cmp	r2, r3
 8010c52:	dbe5      	blt.n	8010c20 <netconn_write_vectors_partly+0x90>
    }
  }
  if (size == 0) {
 8010c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d101      	bne.n	8010c5e <netconn_write_vectors_partly+0xce>
    return ERR_OK;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	e040      	b.n	8010ce0 <netconn_write_vectors_partly+0x150>
  } else if (size > SSIZE_MAX) {
 8010c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	da0a      	bge.n	8010c7a <netconn_write_vectors_partly+0xea>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8010c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d102      	bne.n	8010c70 <netconn_write_vectors_partly+0xe0>
      return ERR_VAL;
 8010c6a:	f06f 0305 	mvn.w	r3, #5
 8010c6e:	e037      	b.n	8010ce0 <netconn_write_vectors_partly+0x150>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8010c70:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8010c74:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8010c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c78:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8010c7e:	68bb      	ldr	r3, [r7, #8]
 8010c80:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8010c82:	88fb      	ldrh	r3, [r7, #6]
 8010c84:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8010c86:	2300      	movs	r3, #0
 8010c88:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8010c8a:	797b      	ldrb	r3, [r7, #5]
 8010c8c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8010c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010c92:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8010c94:	2300      	movs	r3, #0
 8010c96:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8010c98:	f107 0314 	add.w	r3, r7, #20
 8010c9c:	4619      	mov	r1, r3
 8010c9e:	4816      	ldr	r0, [pc, #88]	; (8010cf8 <netconn_write_vectors_partly+0x168>)
 8010ca0:	f7ff fb82 	bl	80103a8 <netconn_apimsg>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8010caa:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d114      	bne.n	8010cdc <netconn_write_vectors_partly+0x14c>
    if (bytes_written != NULL) {
 8010cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d002      	beq.n	8010cbe <netconn_write_vectors_partly+0x12e>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8010cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cbc:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8010cbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010cc2:	2b00      	cmp	r3, #0
 8010cc4:	d10a      	bne.n	8010cdc <netconn_write_vectors_partly+0x14c>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8010cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d006      	beq.n	8010cdc <netconn_write_vectors_partly+0x14c>
 8010cce:	4b06      	ldr	r3, [pc, #24]	; (8010ce8 <netconn_write_vectors_partly+0x158>)
 8010cd0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8010cd4:	4909      	ldr	r1, [pc, #36]	; (8010cfc <netconn_write_vectors_partly+0x16c>)
 8010cd6:	4806      	ldr	r0, [pc, #24]	; (8010cf0 <netconn_write_vectors_partly+0x160>)
 8010cd8:	f010 fb6e 	bl	80213b8 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8010cdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3748      	adds	r7, #72	; 0x48
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}
 8010ce8:	08023738 	.word	0x08023738
 8010cec:	08023a10 	.word	0x08023a10
 8010cf0:	08023790 	.word	0x08023790
 8010cf4:	08023a2c 	.word	0x08023a2c
 8010cf8:	08012355 	.word	0x08012355
 8010cfc:	08023a50 	.word	0x08023a50

08010d00 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8010d00:	b580      	push	{r7, lr}
 8010d02:	b08c      	sub	sp, #48	; 0x30
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	6078      	str	r0, [r7, #4]
 8010d08:	460b      	mov	r3, r1
 8010d0a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d109      	bne.n	8010d26 <netconn_close_shutdown+0x26>
 8010d12:	4b0f      	ldr	r3, [pc, #60]	; (8010d50 <netconn_close_shutdown+0x50>)
 8010d14:	f240 4247 	movw	r2, #1095	; 0x447
 8010d18:	490e      	ldr	r1, [pc, #56]	; (8010d54 <netconn_close_shutdown+0x54>)
 8010d1a:	480f      	ldr	r0, [pc, #60]	; (8010d58 <netconn_close_shutdown+0x58>)
 8010d1c:	f010 fb4c 	bl	80213b8 <iprintf>
 8010d20:	f06f 030f 	mvn.w	r3, #15
 8010d24:	e010      	b.n	8010d48 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8010d2a:	78fb      	ldrb	r3, [r7, #3]
 8010d2c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010d2e:	2329      	movs	r3, #41	; 0x29
 8010d30:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8010d32:	f107 030c 	add.w	r3, r7, #12
 8010d36:	4619      	mov	r1, r3
 8010d38:	4808      	ldr	r0, [pc, #32]	; (8010d5c <netconn_close_shutdown+0x5c>)
 8010d3a:	f7ff fb35 	bl	80103a8 <netconn_apimsg>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010d44:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3730      	adds	r7, #48	; 0x30
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd80      	pop	{r7, pc}
 8010d50:	08023738 	.word	0x08023738
 8010d54:	08023a74 	.word	0x08023a74
 8010d58:	08023790 	.word	0x08023790
 8010d5c:	0801246d 	.word	0x0801246d

08010d60 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8010d60:	b580      	push	{r7, lr}
 8010d62:	b082      	sub	sp, #8
 8010d64:	af00      	add	r7, sp, #0
 8010d66:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8010d68:	2103      	movs	r1, #3
 8010d6a:	6878      	ldr	r0, [r7, #4]
 8010d6c:	f7ff ffc8 	bl	8010d00 <netconn_close_shutdown>
 8010d70:	4603      	mov	r3, r0
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3708      	adds	r7, #8
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}

08010d7a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b084      	sub	sp, #16
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d101      	bne.n	8010d8c <netconn_err+0x12>
    return ERR_OK;
 8010d88:	2300      	movs	r3, #0
 8010d8a:	e00d      	b.n	8010da8 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8010d8c:	f00e ff76 	bl	801fc7c <sys_arch_protect>
 8010d90:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	7a1b      	ldrb	r3, [r3, #8]
 8010d96:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8010d9e:	68f8      	ldr	r0, [r7, #12]
 8010da0:	f00e ff7a 	bl	801fc98 <sys_arch_unprotect>
  return err;
 8010da4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010da8:	4618      	mov	r0, r3
 8010daa:	3710      	adds	r7, #16
 8010dac:	46bd      	mov	sp, r7
 8010dae:	bd80      	pop	{r7, pc}

08010db0 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b082      	sub	sp, #8
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	4603      	mov	r3, r0
 8010db8:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8010dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010dbe:	f113 0f0d 	cmn.w	r3, #13
 8010dc2:	d009      	beq.n	8010dd8 <lwip_netconn_err_to_msg+0x28>
 8010dc4:	f113 0f0d 	cmn.w	r3, #13
 8010dc8:	dc0c      	bgt.n	8010de4 <lwip_netconn_err_to_msg+0x34>
 8010dca:	f113 0f0f 	cmn.w	r3, #15
 8010dce:	d007      	beq.n	8010de0 <lwip_netconn_err_to_msg+0x30>
 8010dd0:	f113 0f0e 	cmn.w	r3, #14
 8010dd4:	d002      	beq.n	8010ddc <lwip_netconn_err_to_msg+0x2c>
 8010dd6:	e005      	b.n	8010de4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8010dd8:	4b0a      	ldr	r3, [pc, #40]	; (8010e04 <lwip_netconn_err_to_msg+0x54>)
 8010dda:	e00e      	b.n	8010dfa <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8010ddc:	4b0a      	ldr	r3, [pc, #40]	; (8010e08 <lwip_netconn_err_to_msg+0x58>)
 8010dde:	e00c      	b.n	8010dfa <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8010de0:	4b0a      	ldr	r3, [pc, #40]	; (8010e0c <lwip_netconn_err_to_msg+0x5c>)
 8010de2:	e00a      	b.n	8010dfa <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8010de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d005      	beq.n	8010df8 <lwip_netconn_err_to_msg+0x48>
 8010dec:	4b08      	ldr	r3, [pc, #32]	; (8010e10 <lwip_netconn_err_to_msg+0x60>)
 8010dee:	227d      	movs	r2, #125	; 0x7d
 8010df0:	4908      	ldr	r1, [pc, #32]	; (8010e14 <lwip_netconn_err_to_msg+0x64>)
 8010df2:	4809      	ldr	r0, [pc, #36]	; (8010e18 <lwip_netconn_err_to_msg+0x68>)
 8010df4:	f010 fae0 	bl	80213b8 <iprintf>
      return NULL;
 8010df8:	2300      	movs	r3, #0
  }
}
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	3708      	adds	r7, #8
 8010dfe:	46bd      	mov	sp, r7
 8010e00:	bd80      	pop	{r7, pc}
 8010e02:	bf00      	nop
 8010e04:	08026f4c 	.word	0x08026f4c
 8010e08:	08026f4d 	.word	0x08026f4d
 8010e0c:	08026f4e 	.word	0x08026f4e
 8010e10:	08023a90 	.word	0x08023a90
 8010e14:	08023ac4 	.word	0x08023ac4
 8010e18:	08023ad4 	.word	0x08023ad4

08010e1c <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b082      	sub	sp, #8
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]
 8010e24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d105      	bne.n	8010e38 <lwip_netconn_is_err_msg+0x1c>
 8010e2c:	4b12      	ldr	r3, [pc, #72]	; (8010e78 <lwip_netconn_is_err_msg+0x5c>)
 8010e2e:	2285      	movs	r2, #133	; 0x85
 8010e30:	4912      	ldr	r1, [pc, #72]	; (8010e7c <lwip_netconn_is_err_msg+0x60>)
 8010e32:	4813      	ldr	r0, [pc, #76]	; (8010e80 <lwip_netconn_is_err_msg+0x64>)
 8010e34:	f010 fac0 	bl	80213b8 <iprintf>

  if (msg == &netconn_aborted) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	4a12      	ldr	r2, [pc, #72]	; (8010e84 <lwip_netconn_is_err_msg+0x68>)
 8010e3c:	4293      	cmp	r3, r2
 8010e3e:	d104      	bne.n	8010e4a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	22f3      	movs	r2, #243	; 0xf3
 8010e44:	701a      	strb	r2, [r3, #0]
    return 1;
 8010e46:	2301      	movs	r3, #1
 8010e48:	e012      	b.n	8010e70 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	4a0e      	ldr	r2, [pc, #56]	; (8010e88 <lwip_netconn_is_err_msg+0x6c>)
 8010e4e:	4293      	cmp	r3, r2
 8010e50:	d104      	bne.n	8010e5c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	22f2      	movs	r2, #242	; 0xf2
 8010e56:	701a      	strb	r2, [r3, #0]
    return 1;
 8010e58:	2301      	movs	r3, #1
 8010e5a:	e009      	b.n	8010e70 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	4a0b      	ldr	r2, [pc, #44]	; (8010e8c <lwip_netconn_is_err_msg+0x70>)
 8010e60:	4293      	cmp	r3, r2
 8010e62:	d104      	bne.n	8010e6e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8010e64:	683b      	ldr	r3, [r7, #0]
 8010e66:	22f1      	movs	r2, #241	; 0xf1
 8010e68:	701a      	strb	r2, [r3, #0]
    return 1;
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	e000      	b.n	8010e70 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8010e6e:	2300      	movs	r3, #0
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3708      	adds	r7, #8
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	08023a90 	.word	0x08023a90
 8010e7c:	08023afc 	.word	0x08023afc
 8010e80:	08023ad4 	.word	0x08023ad4
 8010e84:	08026f4c 	.word	0x08026f4c
 8010e88:	08026f4d 	.word	0x08026f4d
 8010e8c:	08026f4e 	.word	0x08026f4e

08010e90 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b088      	sub	sp, #32
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	60f8      	str	r0, [r7, #12]
 8010e98:	60b9      	str	r1, [r7, #8]
 8010e9a:	607a      	str	r2, [r7, #4]
 8010e9c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d105      	bne.n	8010eb0 <recv_udp+0x20>
 8010ea4:	4b34      	ldr	r3, [pc, #208]	; (8010f78 <recv_udp+0xe8>)
 8010ea6:	22e5      	movs	r2, #229	; 0xe5
 8010ea8:	4934      	ldr	r1, [pc, #208]	; (8010f7c <recv_udp+0xec>)
 8010eaa:	4835      	ldr	r0, [pc, #212]	; (8010f80 <recv_udp+0xf0>)
 8010eac:	f010 fa84 	bl	80213b8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d105      	bne.n	8010ec2 <recv_udp+0x32>
 8010eb6:	4b30      	ldr	r3, [pc, #192]	; (8010f78 <recv_udp+0xe8>)
 8010eb8:	22e6      	movs	r2, #230	; 0xe6
 8010eba:	4932      	ldr	r1, [pc, #200]	; (8010f84 <recv_udp+0xf4>)
 8010ebc:	4830      	ldr	r0, [pc, #192]	; (8010f80 <recv_udp+0xf0>)
 8010ebe:	f010 fa7b 	bl	80213b8 <iprintf>
  conn = (struct netconn *)arg;
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8010ec6:	69fb      	ldr	r3, [r7, #28]
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d103      	bne.n	8010ed4 <recv_udp+0x44>
    pbuf_free(p);
 8010ecc:	6878      	ldr	r0, [r7, #4]
 8010ece:	f003 f92f 	bl	8014130 <pbuf_free>
    return;
 8010ed2:	e04d      	b.n	8010f70 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8010ed4:	69fb      	ldr	r3, [r7, #28]
 8010ed6:	685b      	ldr	r3, [r3, #4]
 8010ed8:	68ba      	ldr	r2, [r7, #8]
 8010eda:	429a      	cmp	r2, r3
 8010edc:	d005      	beq.n	8010eea <recv_udp+0x5a>
 8010ede:	4b26      	ldr	r3, [pc, #152]	; (8010f78 <recv_udp+0xe8>)
 8010ee0:	22ee      	movs	r2, #238	; 0xee
 8010ee2:	4929      	ldr	r1, [pc, #164]	; (8010f88 <recv_udp+0xf8>)
 8010ee4:	4826      	ldr	r0, [pc, #152]	; (8010f80 <recv_udp+0xf0>)
 8010ee6:	f010 fa67 	bl	80213b8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	3310      	adds	r3, #16
 8010eee:	4618      	mov	r0, r3
 8010ef0:	f00e fda9 	bl	801fa46 <sys_mbox_valid>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d103      	bne.n	8010f02 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8010efa:	6878      	ldr	r0, [r7, #4]
 8010efc:	f003 f918 	bl	8014130 <pbuf_free>
    return;
 8010f00:	e036      	b.n	8010f70 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8010f02:	2006      	movs	r0, #6
 8010f04:	f002 f9ee 	bl	80132e4 <memp_malloc>
 8010f08:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8010f0a:	69bb      	ldr	r3, [r7, #24]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d103      	bne.n	8010f18 <recv_udp+0x88>
    pbuf_free(p);
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f003 f90d 	bl	8014130 <pbuf_free>
    return;
 8010f16:	e02b      	b.n	8010f70 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8010f18:	69bb      	ldr	r3, [r7, #24]
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8010f1e:	69bb      	ldr	r3, [r7, #24]
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d002      	beq.n	8010f30 <recv_udp+0xa0>
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	e000      	b.n	8010f32 <recv_udp+0xa2>
 8010f30:	2300      	movs	r3, #0
 8010f32:	69ba      	ldr	r2, [r7, #24]
 8010f34:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8010f36:	69bb      	ldr	r3, [r7, #24]
 8010f38:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010f3a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	891b      	ldrh	r3, [r3, #8]
 8010f40:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8010f42:	69fb      	ldr	r3, [r7, #28]
 8010f44:	3310      	adds	r3, #16
 8010f46:	69b9      	ldr	r1, [r7, #24]
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f00e fd07 	bl	801f95c <sys_mbox_trypost>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d003      	beq.n	8010f5c <recv_udp+0xcc>
    netbuf_delete(buf);
 8010f54:	69b8      	ldr	r0, [r7, #24]
 8010f56:	f001 fb15 	bl	8012584 <netbuf_delete>
    return;
 8010f5a:	e009      	b.n	8010f70 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d005      	beq.n	8010f70 <recv_udp+0xe0>
 8010f64:	69fb      	ldr	r3, [r7, #28]
 8010f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f68:	8afa      	ldrh	r2, [r7, #22]
 8010f6a:	2100      	movs	r1, #0
 8010f6c:	69f8      	ldr	r0, [r7, #28]
 8010f6e:	4798      	blx	r3
  }
}
 8010f70:	3720      	adds	r7, #32
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	bf00      	nop
 8010f78:	08023a90 	.word	0x08023a90
 8010f7c:	08023b08 	.word	0x08023b08
 8010f80:	08023ad4 	.word	0x08023ad4
 8010f84:	08023b2c 	.word	0x08023b2c
 8010f88:	08023b4c 	.word	0x08023b4c

08010f8c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b088      	sub	sp, #32
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	60f8      	str	r0, [r7, #12]
 8010f94:	60b9      	str	r1, [r7, #8]
 8010f96:	607a      	str	r2, [r7, #4]
 8010f98:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d106      	bne.n	8010fae <recv_tcp+0x22>
 8010fa0:	4b36      	ldr	r3, [pc, #216]	; (801107c <recv_tcp+0xf0>)
 8010fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8010fa6:	4936      	ldr	r1, [pc, #216]	; (8011080 <recv_tcp+0xf4>)
 8010fa8:	4836      	ldr	r0, [pc, #216]	; (8011084 <recv_tcp+0xf8>)
 8010faa:	f010 fa05 	bl	80213b8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d106      	bne.n	8010fc2 <recv_tcp+0x36>
 8010fb4:	4b31      	ldr	r3, [pc, #196]	; (801107c <recv_tcp+0xf0>)
 8010fb6:	f240 122d 	movw	r2, #301	; 0x12d
 8010fba:	4933      	ldr	r1, [pc, #204]	; (8011088 <recv_tcp+0xfc>)
 8010fbc:	4831      	ldr	r0, [pc, #196]	; (8011084 <recv_tcp+0xf8>)
 8010fbe:	f010 f9fb 	bl	80213b8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 8010fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d006      	beq.n	8010fd8 <recv_tcp+0x4c>
 8010fca:	4b2c      	ldr	r3, [pc, #176]	; (801107c <recv_tcp+0xf0>)
 8010fcc:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8010fd0:	492e      	ldr	r1, [pc, #184]	; (801108c <recv_tcp+0x100>)
 8010fd2:	482c      	ldr	r0, [pc, #176]	; (8011084 <recv_tcp+0xf8>)
 8010fd4:	f010 f9f0 	bl	80213b8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8010fdc:	697b      	ldr	r3, [r7, #20]
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d102      	bne.n	8010fe8 <recv_tcp+0x5c>
    return ERR_VAL;
 8010fe2:	f06f 0305 	mvn.w	r3, #5
 8010fe6:	e045      	b.n	8011074 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8010fe8:	697b      	ldr	r3, [r7, #20]
 8010fea:	685b      	ldr	r3, [r3, #4]
 8010fec:	68ba      	ldr	r2, [r7, #8]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d006      	beq.n	8011000 <recv_tcp+0x74>
 8010ff2:	4b22      	ldr	r3, [pc, #136]	; (801107c <recv_tcp+0xf0>)
 8010ff4:	f240 1235 	movw	r2, #309	; 0x135
 8010ff8:	4925      	ldr	r1, [pc, #148]	; (8011090 <recv_tcp+0x104>)
 8010ffa:	4822      	ldr	r0, [pc, #136]	; (8011084 <recv_tcp+0xf8>)
 8010ffc:	f010 f9dc 	bl	80213b8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011000:	697b      	ldr	r3, [r7, #20]
 8011002:	3310      	adds	r3, #16
 8011004:	4618      	mov	r0, r3
 8011006:	f00e fd1e 	bl	801fa46 <sys_mbox_valid>
 801100a:	4603      	mov	r3, r0
 801100c:	2b00      	cmp	r3, #0
 801100e:	d10d      	bne.n	801102c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d008      	beq.n	8011028 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	891b      	ldrh	r3, [r3, #8]
 801101a:	4619      	mov	r1, r3
 801101c:	68b8      	ldr	r0, [r7, #8]
 801101e:	f004 f883 	bl	8015128 <tcp_recved>
      pbuf_free(p);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f003 f884 	bl	8014130 <pbuf_free>
    }
    return ERR_OK;
 8011028:	2300      	movs	r3, #0
 801102a:	e023      	b.n	8011074 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d005      	beq.n	801103e <recv_tcp+0xb2>
    msg = p;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	891b      	ldrh	r3, [r3, #8]
 801103a:	83fb      	strh	r3, [r7, #30]
 801103c:	e003      	b.n	8011046 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801103e:	4b15      	ldr	r3, [pc, #84]	; (8011094 <recv_tcp+0x108>)
 8011040:	61bb      	str	r3, [r7, #24]
    len = 0;
 8011042:	2300      	movs	r3, #0
 8011044:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	3310      	adds	r3, #16
 801104a:	69b9      	ldr	r1, [r7, #24]
 801104c:	4618      	mov	r0, r3
 801104e:	f00e fc85 	bl	801f95c <sys_mbox_trypost>
 8011052:	4603      	mov	r3, r0
 8011054:	2b00      	cmp	r3, #0
 8011056:	d002      	beq.n	801105e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801105c:	e00a      	b.n	8011074 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801105e:	697b      	ldr	r3, [r7, #20]
 8011060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011062:	2b00      	cmp	r3, #0
 8011064:	d005      	beq.n	8011072 <recv_tcp+0xe6>
 8011066:	697b      	ldr	r3, [r7, #20]
 8011068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801106a:	8bfa      	ldrh	r2, [r7, #30]
 801106c:	2100      	movs	r1, #0
 801106e:	6978      	ldr	r0, [r7, #20]
 8011070:	4798      	blx	r3
  }

  return ERR_OK;
 8011072:	2300      	movs	r3, #0
}
 8011074:	4618      	mov	r0, r3
 8011076:	3720      	adds	r7, #32
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	08023a90 	.word	0x08023a90
 8011080:	08023b6c 	.word	0x08023b6c
 8011084:	08023ad4 	.word	0x08023ad4
 8011088:	08023b90 	.word	0x08023b90
 801108c:	08023bb0 	.word	0x08023bb0
 8011090:	08023bc8 	.word	0x08023bc8
 8011094:	08026f4e 	.word	0x08026f4e

08011098 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8011098:	b580      	push	{r7, lr}
 801109a:	b084      	sub	sp, #16
 801109c:	af00      	add	r7, sp, #0
 801109e:	6078      	str	r0, [r7, #4]
 80110a0:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d106      	bne.n	80110ba <poll_tcp+0x22>
 80110ac:	4b2b      	ldr	r3, [pc, #172]	; (801115c <poll_tcp+0xc4>)
 80110ae:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80110b2:	492b      	ldr	r1, [pc, #172]	; (8011160 <poll_tcp+0xc8>)
 80110b4:	482b      	ldr	r0, [pc, #172]	; (8011164 <poll_tcp+0xcc>)
 80110b6:	f010 f97f 	bl	80213b8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	785b      	ldrb	r3, [r3, #1]
 80110be:	2b01      	cmp	r3, #1
 80110c0:	d104      	bne.n	80110cc <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80110c2:	2101      	movs	r1, #1
 80110c4:	68f8      	ldr	r0, [r7, #12]
 80110c6:	f000 ff75 	bl	8011fb4 <lwip_netconn_do_writemore>
 80110ca:	e016      	b.n	80110fa <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80110cc:	68fb      	ldr	r3, [r7, #12]
 80110ce:	785b      	ldrb	r3, [r3, #1]
 80110d0:	2b04      	cmp	r3, #4
 80110d2:	d112      	bne.n	80110fa <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d00a      	beq.n	80110f2 <poll_tcp+0x5a>
 80110dc:	68fb      	ldr	r3, [r7, #12]
 80110de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e0:	7a5b      	ldrb	r3, [r3, #9]
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d005      	beq.n	80110f2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110ea:	7a5a      	ldrb	r2, [r3, #9]
 80110ec:	3a01      	subs	r2, #1
 80110ee:	b2d2      	uxtb	r2, r2
 80110f0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80110f2:	2101      	movs	r1, #1
 80110f4:	68f8      	ldr	r0, [r7, #12]
 80110f6:	f000 fc05 	bl	8011904 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011100:	f003 0310 	and.w	r3, r3, #16
 8011104:	2b00      	cmp	r3, #0
 8011106:	d023      	beq.n	8011150 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	685b      	ldr	r3, [r3, #4]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d01f      	beq.n	8011150 <poll_tcp+0xb8>
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	685b      	ldr	r3, [r3, #4]
 8011114:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011118:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801111c:	d318      	bcc.n	8011150 <poll_tcp+0xb8>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	685b      	ldr	r3, [r3, #4]
 8011122:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8011126:	2b04      	cmp	r3, #4
 8011128:	d812      	bhi.n	8011150 <poll_tcp+0xb8>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011130:	f023 0310 	bic.w	r3, r3, #16
 8011134:	b2da      	uxtb	r2, r3
 8011136:	68fb      	ldr	r3, [r7, #12]
 8011138:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011140:	2b00      	cmp	r3, #0
 8011142:	d005      	beq.n	8011150 <poll_tcp+0xb8>
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011148:	2200      	movs	r2, #0
 801114a:	2102      	movs	r1, #2
 801114c:	68f8      	ldr	r0, [r7, #12]
 801114e:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011150:	2300      	movs	r3, #0
}
 8011152:	4618      	mov	r0, r3
 8011154:	3710      	adds	r7, #16
 8011156:	46bd      	mov	sp, r7
 8011158:	bd80      	pop	{r7, pc}
 801115a:	bf00      	nop
 801115c:	08023a90 	.word	0x08023a90
 8011160:	08023be8 	.word	0x08023be8
 8011164:	08023ad4 	.word	0x08023ad4

08011168 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8011168:	b580      	push	{r7, lr}
 801116a:	b086      	sub	sp, #24
 801116c:	af00      	add	r7, sp, #0
 801116e:	60f8      	str	r0, [r7, #12]
 8011170:	60b9      	str	r1, [r7, #8]
 8011172:	4613      	mov	r3, r2
 8011174:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801117a:	697b      	ldr	r3, [r7, #20]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d106      	bne.n	801118e <sent_tcp+0x26>
 8011180:	4b21      	ldr	r3, [pc, #132]	; (8011208 <sent_tcp+0xa0>)
 8011182:	f240 1293 	movw	r2, #403	; 0x193
 8011186:	4921      	ldr	r1, [pc, #132]	; (801120c <sent_tcp+0xa4>)
 8011188:	4821      	ldr	r0, [pc, #132]	; (8011210 <sent_tcp+0xa8>)
 801118a:	f010 f915 	bl	80213b8 <iprintf>

  if (conn) {
 801118e:	697b      	ldr	r3, [r7, #20]
 8011190:	2b00      	cmp	r3, #0
 8011192:	d034      	beq.n	80111fe <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8011194:	697b      	ldr	r3, [r7, #20]
 8011196:	785b      	ldrb	r3, [r3, #1]
 8011198:	2b01      	cmp	r3, #1
 801119a:	d104      	bne.n	80111a6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801119c:	2101      	movs	r1, #1
 801119e:	6978      	ldr	r0, [r7, #20]
 80111a0:	f000 ff08 	bl	8011fb4 <lwip_netconn_do_writemore>
 80111a4:	e007      	b.n	80111b6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	785b      	ldrb	r3, [r3, #1]
 80111aa:	2b04      	cmp	r3, #4
 80111ac:	d103      	bne.n	80111b6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80111ae:	2101      	movs	r1, #1
 80111b0:	6978      	ldr	r0, [r7, #20]
 80111b2:	f000 fba7 	bl	8011904 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	685b      	ldr	r3, [r3, #4]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d01f      	beq.n	80111fe <sent_tcp+0x96>
 80111be:	697b      	ldr	r3, [r7, #20]
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80111c6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80111ca:	d318      	bcc.n	80111fe <sent_tcp+0x96>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80111cc:	697b      	ldr	r3, [r7, #20]
 80111ce:	685b      	ldr	r3, [r3, #4]
 80111d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80111d4:	2b04      	cmp	r3, #4
 80111d6:	d812      	bhi.n	80111fe <sent_tcp+0x96>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80111de:	f023 0310 	bic.w	r3, r3, #16
 80111e2:	b2da      	uxtb	r2, r3
 80111e4:	697b      	ldr	r3, [r7, #20]
 80111e6:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d005      	beq.n	80111fe <sent_tcp+0x96>
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111f6:	88fa      	ldrh	r2, [r7, #6]
 80111f8:	2102      	movs	r1, #2
 80111fa:	6978      	ldr	r0, [r7, #20]
 80111fc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80111fe:	2300      	movs	r3, #0
}
 8011200:	4618      	mov	r0, r3
 8011202:	3718      	adds	r7, #24
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	08023a90 	.word	0x08023a90
 801120c:	08023be8 	.word	0x08023be8
 8011210:	08023ad4 	.word	0x08023ad4

08011214 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b088      	sub	sp, #32
 8011218:	af00      	add	r7, sp, #0
 801121a:	6078      	str	r0, [r7, #4]
 801121c:	460b      	mov	r3, r1
 801121e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011224:	69fb      	ldr	r3, [r7, #28]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d106      	bne.n	8011238 <err_tcp+0x24>
 801122a:	4b61      	ldr	r3, [pc, #388]	; (80113b0 <err_tcp+0x19c>)
 801122c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011230:	4960      	ldr	r1, [pc, #384]	; (80113b4 <err_tcp+0x1a0>)
 8011232:	4861      	ldr	r0, [pc, #388]	; (80113b8 <err_tcp+0x1a4>)
 8011234:	f010 f8c0 	bl	80213b8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011238:	f00e fd20 	bl	801fc7c <sys_arch_protect>
 801123c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 801123e:	69fb      	ldr	r3, [r7, #28]
 8011240:	2200      	movs	r2, #0
 8011242:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011244:	69fb      	ldr	r3, [r7, #28]
 8011246:	78fa      	ldrb	r2, [r7, #3]
 8011248:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011250:	f043 0301 	orr.w	r3, r3, #1
 8011254:	b2da      	uxtb	r2, r3
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	f883 2020 	strb.w	r2, [r3, #32]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 801125c:	69fb      	ldr	r3, [r7, #28]
 801125e:	785b      	ldrb	r3, [r3, #1]
 8011260:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011262:	69fb      	ldr	r3, [r7, #28]
 8011264:	2200      	movs	r2, #0
 8011266:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011268:	69b8      	ldr	r0, [r7, #24]
 801126a:	f00e fd15 	bl	801fc98 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 801126e:	69fb      	ldr	r3, [r7, #28]
 8011270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011272:	2b00      	cmp	r3, #0
 8011274:	d005      	beq.n	8011282 <err_tcp+0x6e>
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801127a:	2200      	movs	r2, #0
 801127c:	2104      	movs	r1, #4
 801127e:	69f8      	ldr	r0, [r7, #28]
 8011280:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011282:	69fb      	ldr	r3, [r7, #28]
 8011284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011286:	2b00      	cmp	r3, #0
 8011288:	d005      	beq.n	8011296 <err_tcp+0x82>
 801128a:	69fb      	ldr	r3, [r7, #28]
 801128c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801128e:	2200      	movs	r2, #0
 8011290:	2100      	movs	r1, #0
 8011292:	69f8      	ldr	r0, [r7, #28]
 8011294:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011296:	69fb      	ldr	r3, [r7, #28]
 8011298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801129a:	2b00      	cmp	r3, #0
 801129c:	d005      	beq.n	80112aa <err_tcp+0x96>
 801129e:	69fb      	ldr	r3, [r7, #28]
 80112a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112a2:	2200      	movs	r2, #0
 80112a4:	2102      	movs	r1, #2
 80112a6:	69f8      	ldr	r0, [r7, #28]
 80112a8:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 80112aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f7ff fd7e 	bl	8010db0 <lwip_netconn_err_to_msg>
 80112b4:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80112b6:	69fb      	ldr	r3, [r7, #28]
 80112b8:	3310      	adds	r3, #16
 80112ba:	4618      	mov	r0, r3
 80112bc:	f00e fbc3 	bl	801fa46 <sys_mbox_valid>
 80112c0:	4603      	mov	r3, r0
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d005      	beq.n	80112d2 <err_tcp+0xbe>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80112c6:	69fb      	ldr	r3, [r7, #28]
 80112c8:	3310      	adds	r3, #16
 80112ca:	6939      	ldr	r1, [r7, #16]
 80112cc:	4618      	mov	r0, r3
 80112ce:	f00e fb45 	bl	801f95c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80112d2:	69fb      	ldr	r3, [r7, #28]
 80112d4:	3314      	adds	r3, #20
 80112d6:	4618      	mov	r0, r3
 80112d8:	f00e fbb5 	bl	801fa46 <sys_mbox_valid>
 80112dc:	4603      	mov	r3, r0
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d005      	beq.n	80112ee <err_tcp+0xda>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80112e2:	69fb      	ldr	r3, [r7, #28]
 80112e4:	3314      	adds	r3, #20
 80112e6:	6939      	ldr	r1, [r7, #16]
 80112e8:	4618      	mov	r0, r3
 80112ea:	f00e fb37 	bl	801f95c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80112ee:	7dfb      	ldrb	r3, [r7, #23]
 80112f0:	2b01      	cmp	r3, #1
 80112f2:	d005      	beq.n	8011300 <err_tcp+0xec>
 80112f4:	7dfb      	ldrb	r3, [r7, #23]
 80112f6:	2b04      	cmp	r3, #4
 80112f8:	d002      	beq.n	8011300 <err_tcp+0xec>
 80112fa:	7dfb      	ldrb	r3, [r7, #23]
 80112fc:	2b03      	cmp	r3, #3
 80112fe:	d146      	bne.n	801138e <err_tcp+0x17a>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011300:	69fb      	ldr	r3, [r7, #28]
 8011302:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011306:	f003 0304 	and.w	r3, r3, #4
 801130a:	2b00      	cmp	r3, #0
 801130c:	bf14      	ite	ne
 801130e:	2301      	movne	r3, #1
 8011310:	2300      	moveq	r3, #0
 8011312:	b2db      	uxtb	r3, r3
 8011314:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011316:	69fb      	ldr	r3, [r7, #28]
 8011318:	f893 3020 	ldrb.w	r3, [r3, #32]
 801131c:	f023 0304 	bic.w	r3, r3, #4
 8011320:	b2da      	uxtb	r2, r3
 8011322:	69fb      	ldr	r3, [r7, #28]
 8011324:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	2b00      	cmp	r3, #0
 801132c:	d13b      	bne.n	80113a6 <err_tcp+0x192>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801132e:	69fb      	ldr	r3, [r7, #28]
 8011330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011332:	2b00      	cmp	r3, #0
 8011334:	d106      	bne.n	8011344 <err_tcp+0x130>
 8011336:	4b1e      	ldr	r3, [pc, #120]	; (80113b0 <err_tcp+0x19c>)
 8011338:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801133c:	491f      	ldr	r1, [pc, #124]	; (80113bc <err_tcp+0x1a8>)
 801133e:	481e      	ldr	r0, [pc, #120]	; (80113b8 <err_tcp+0x1a4>)
 8011340:	f010 f83a 	bl	80213b8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011344:	7dfb      	ldrb	r3, [r7, #23]
 8011346:	2b04      	cmp	r3, #4
 8011348:	d104      	bne.n	8011354 <err_tcp+0x140>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 801134a:	69fb      	ldr	r3, [r7, #28]
 801134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801134e:	2200      	movs	r2, #0
 8011350:	711a      	strb	r2, [r3, #4]
 8011352:	e003      	b.n	801135c <err_tcp+0x148>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8011354:	69fb      	ldr	r3, [r7, #28]
 8011356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011358:	78fa      	ldrb	r2, [r7, #3]
 801135a:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 801135c:	69fb      	ldr	r3, [r7, #28]
 801135e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011360:	681b      	ldr	r3, [r3, #0]
 8011362:	330c      	adds	r3, #12
 8011364:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8011366:	68b8      	ldr	r0, [r7, #8]
 8011368:	f00e fbfe 	bl	801fb68 <sys_sem_valid>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d106      	bne.n	8011380 <err_tcp+0x16c>
 8011372:	4b0f      	ldr	r3, [pc, #60]	; (80113b0 <err_tcp+0x19c>)
 8011374:	f240 12ef 	movw	r2, #495	; 0x1ef
 8011378:	4911      	ldr	r1, [pc, #68]	; (80113c0 <err_tcp+0x1ac>)
 801137a:	480f      	ldr	r0, [pc, #60]	; (80113b8 <err_tcp+0x1a4>)
 801137c:	f010 f81c 	bl	80213b8 <iprintf>
      conn->current_msg = NULL;
 8011380:	69fb      	ldr	r3, [r7, #28]
 8011382:	2200      	movs	r2, #0
 8011384:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8011386:	68b8      	ldr	r0, [r7, #8]
 8011388:	f00e fbd4 	bl	801fb34 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 801138c:	e00b      	b.n	80113a6 <err_tcp+0x192>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 801138e:	69fb      	ldr	r3, [r7, #28]
 8011390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011392:	2b00      	cmp	r3, #0
 8011394:	d008      	beq.n	80113a8 <err_tcp+0x194>
 8011396:	4b06      	ldr	r3, [pc, #24]	; (80113b0 <err_tcp+0x19c>)
 8011398:	f240 12f7 	movw	r2, #503	; 0x1f7
 801139c:	4909      	ldr	r1, [pc, #36]	; (80113c4 <err_tcp+0x1b0>)
 801139e:	4806      	ldr	r0, [pc, #24]	; (80113b8 <err_tcp+0x1a4>)
 80113a0:	f010 f80a 	bl	80213b8 <iprintf>
  }
}
 80113a4:	e000      	b.n	80113a8 <err_tcp+0x194>
      (old_state == NETCONN_CONNECT)) {
 80113a6:	bf00      	nop
}
 80113a8:	bf00      	nop
 80113aa:	3720      	adds	r7, #32
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	08023a90 	.word	0x08023a90
 80113b4:	08023be8 	.word	0x08023be8
 80113b8:	08023ad4 	.word	0x08023ad4
 80113bc:	08023bf8 	.word	0x08023bf8
 80113c0:	08023c14 	.word	0x08023c14
 80113c4:	08023c30 	.word	0x08023c30

080113c8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b084      	sub	sp, #16
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	685b      	ldr	r3, [r3, #4]
 80113d4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80113d6:	6879      	ldr	r1, [r7, #4]
 80113d8:	68f8      	ldr	r0, [r7, #12]
 80113da:	f004 fd77 	bl	8015ecc <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80113de:	490a      	ldr	r1, [pc, #40]	; (8011408 <setup_tcp+0x40>)
 80113e0:	68f8      	ldr	r0, [r7, #12]
 80113e2:	f004 fd85 	bl	8015ef0 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80113e6:	4909      	ldr	r1, [pc, #36]	; (801140c <setup_tcp+0x44>)
 80113e8:	68f8      	ldr	r0, [r7, #12]
 80113ea:	f004 fda3 	bl	8015f34 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 80113ee:	2202      	movs	r2, #2
 80113f0:	4907      	ldr	r1, [pc, #28]	; (8011410 <setup_tcp+0x48>)
 80113f2:	68f8      	ldr	r0, [r7, #12]
 80113f4:	f004 fdfa 	bl	8015fec <tcp_poll>
  tcp_err(pcb, err_tcp);
 80113f8:	4906      	ldr	r1, [pc, #24]	; (8011414 <setup_tcp+0x4c>)
 80113fa:	68f8      	ldr	r0, [r7, #12]
 80113fc:	f004 fdbc 	bl	8015f78 <tcp_err>
}
 8011400:	bf00      	nop
 8011402:	3710      	adds	r7, #16
 8011404:	46bd      	mov	sp, r7
 8011406:	bd80      	pop	{r7, pc}
 8011408:	08010f8d 	.word	0x08010f8d
 801140c:	08011169 	.word	0x08011169
 8011410:	08011099 	.word	0x08011099
 8011414:	08011215 	.word	0x08011215

08011418 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8011418:	b590      	push	{r4, r7, lr}
 801141a:	b089      	sub	sp, #36	; 0x24
 801141c:	af00      	add	r7, sp, #0
 801141e:	60f8      	str	r0, [r7, #12]
 8011420:	60b9      	str	r1, [r7, #8]
 8011422:	4613      	mov	r3, r2
 8011424:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801142a:	69fb      	ldr	r3, [r7, #28]
 801142c:	2b00      	cmp	r3, #0
 801142e:	d102      	bne.n	8011436 <accept_function+0x1e>
    return ERR_VAL;
 8011430:	f06f 0305 	mvn.w	r3, #5
 8011434:	e0a1      	b.n	801157a <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011436:	69fb      	ldr	r3, [r7, #28]
 8011438:	3314      	adds	r3, #20
 801143a:	4618      	mov	r0, r3
 801143c:	f00e fb03 	bl	801fa46 <sys_mbox_valid>
 8011440:	4603      	mov	r3, r0
 8011442:	2b00      	cmp	r3, #0
 8011444:	d102      	bne.n	801144c <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8011446:	f06f 0305 	mvn.w	r3, #5
 801144a:	e096      	b.n	801157a <accept_function+0x162>
  }

  if (newpcb == NULL) {
 801144c:	68bb      	ldr	r3, [r7, #8]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d11b      	bne.n	801148a <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8011452:	69fb      	ldr	r3, [r7, #28]
 8011454:	f103 0414 	add.w	r4, r3, #20
 8011458:	f06f 000c 	mvn.w	r0, #12
 801145c:	f7ff fca8 	bl	8010db0 <lwip_netconn_err_to_msg>
 8011460:	4603      	mov	r3, r0
 8011462:	4619      	mov	r1, r3
 8011464:	4620      	mov	r0, r4
 8011466:	f00e fa79 	bl	801f95c <sys_mbox_trypost>
 801146a:	4603      	mov	r3, r0
 801146c:	2b00      	cmp	r3, #0
 801146e:	d109      	bne.n	8011484 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011470:	69fb      	ldr	r3, [r7, #28]
 8011472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011474:	2b00      	cmp	r3, #0
 8011476:	d005      	beq.n	8011484 <accept_function+0x6c>
 8011478:	69fb      	ldr	r3, [r7, #28]
 801147a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801147c:	2200      	movs	r2, #0
 801147e:	2100      	movs	r1, #0
 8011480:	69f8      	ldr	r0, [r7, #28]
 8011482:	4798      	blx	r3
    }
    return ERR_VAL;
 8011484:	f06f 0305 	mvn.w	r3, #5
 8011488:	e077      	b.n	801157a <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 801148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801148e:	2b00      	cmp	r3, #0
 8011490:	d006      	beq.n	80114a0 <accept_function+0x88>
 8011492:	4b3c      	ldr	r3, [pc, #240]	; (8011584 <accept_function+0x16c>)
 8011494:	f240 222a 	movw	r2, #554	; 0x22a
 8011498:	493b      	ldr	r1, [pc, #236]	; (8011588 <accept_function+0x170>)
 801149a:	483c      	ldr	r0, [pc, #240]	; (801158c <accept_function+0x174>)
 801149c:	f00f ff8c 	bl	80213b8 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 80114a0:	69fb      	ldr	r3, [r7, #28]
 80114a2:	781a      	ldrb	r2, [r3, #0]
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114a8:	4619      	mov	r1, r3
 80114aa:	4610      	mov	r0, r2
 80114ac:	f000 f8f0 	bl	8011690 <netconn_alloc>
 80114b0:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d11b      	bne.n	80114f0 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	f103 0414 	add.w	r4, r3, #20
 80114be:	f06f 000c 	mvn.w	r0, #12
 80114c2:	f7ff fc75 	bl	8010db0 <lwip_netconn_err_to_msg>
 80114c6:	4603      	mov	r3, r0
 80114c8:	4619      	mov	r1, r3
 80114ca:	4620      	mov	r0, r4
 80114cc:	f00e fa46 	bl	801f95c <sys_mbox_trypost>
 80114d0:	4603      	mov	r3, r0
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d109      	bne.n	80114ea <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80114d6:	69fb      	ldr	r3, [r7, #28]
 80114d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d005      	beq.n	80114ea <accept_function+0xd2>
 80114de:	69fb      	ldr	r3, [r7, #28]
 80114e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114e2:	2200      	movs	r2, #0
 80114e4:	2100      	movs	r1, #0
 80114e6:	69f8      	ldr	r0, [r7, #28]
 80114e8:	4798      	blx	r3
    }
    return ERR_MEM;
 80114ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114ee:	e044      	b.n	801157a <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 80114f0:	69bb      	ldr	r3, [r7, #24]
 80114f2:	68ba      	ldr	r2, [r7, #8]
 80114f4:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80114f6:	69b8      	ldr	r0, [r7, #24]
 80114f8:	f7ff ff66 	bl	80113c8 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	3314      	adds	r3, #20
 8011500:	69b9      	ldr	r1, [r7, #24]
 8011502:	4618      	mov	r0, r3
 8011504:	f00e fa2a 	bl	801f95c <sys_mbox_trypost>
 8011508:	4603      	mov	r3, r0
 801150a:	2b00      	cmp	r3, #0
 801150c:	d02a      	beq.n	8011564 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 801150e:	69bb      	ldr	r3, [r7, #24]
 8011510:	685b      	ldr	r3, [r3, #4]
 8011512:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8011514:	2100      	movs	r1, #0
 8011516:	6978      	ldr	r0, [r7, #20]
 8011518:	f004 fcd8 	bl	8015ecc <tcp_arg>
    tcp_recv(pcb, NULL);
 801151c:	2100      	movs	r1, #0
 801151e:	6978      	ldr	r0, [r7, #20]
 8011520:	f004 fce6 	bl	8015ef0 <tcp_recv>
    tcp_sent(pcb, NULL);
 8011524:	2100      	movs	r1, #0
 8011526:	6978      	ldr	r0, [r7, #20]
 8011528:	f004 fd04 	bl	8015f34 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 801152c:	2200      	movs	r2, #0
 801152e:	2100      	movs	r1, #0
 8011530:	6978      	ldr	r0, [r7, #20]
 8011532:	f004 fd5b 	bl	8015fec <tcp_poll>
    tcp_err(pcb, NULL);
 8011536:	2100      	movs	r1, #0
 8011538:	6978      	ldr	r0, [r7, #20]
 801153a:	f004 fd1d 	bl	8015f78 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 801153e:	69bb      	ldr	r3, [r7, #24]
 8011540:	2200      	movs	r2, #0
 8011542:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8011544:	69bb      	ldr	r3, [r7, #24]
 8011546:	3310      	adds	r3, #16
 8011548:	4618      	mov	r0, r3
 801154a:	f00e f9f5 	bl	801f938 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 801154e:	69bb      	ldr	r3, [r7, #24]
 8011550:	3310      	adds	r3, #16
 8011552:	4618      	mov	r0, r3
 8011554:	f00e fa88 	bl	801fa68 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8011558:	69b8      	ldr	r0, [r7, #24]
 801155a:	f000 f90b 	bl	8011774 <netconn_free>
    return ERR_MEM;
 801155e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011562:	e00a      	b.n	801157a <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011564:	69fb      	ldr	r3, [r7, #28]
 8011566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011568:	2b00      	cmp	r3, #0
 801156a:	d005      	beq.n	8011578 <accept_function+0x160>
 801156c:	69fb      	ldr	r3, [r7, #28]
 801156e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011570:	2200      	movs	r2, #0
 8011572:	2100      	movs	r1, #0
 8011574:	69f8      	ldr	r0, [r7, #28]
 8011576:	4798      	blx	r3
  }

  return ERR_OK;
 8011578:	2300      	movs	r3, #0
}
 801157a:	4618      	mov	r0, r3
 801157c:	3724      	adds	r7, #36	; 0x24
 801157e:	46bd      	mov	sp, r7
 8011580:	bd90      	pop	{r4, r7, pc}
 8011582:	bf00      	nop
 8011584:	08023a90 	.word	0x08023a90
 8011588:	08023c4c 	.word	0x08023c4c
 801158c:	08023ad4 	.word	0x08023ad4

08011590 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8011590:	b590      	push	{r4, r7, lr}
 8011592:	b085      	sub	sp, #20
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011598:	2300      	movs	r3, #0
 801159a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	685b      	ldr	r3, [r3, #4]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d006      	beq.n	80115b4 <pcb_new+0x24>
 80115a6:	4b2b      	ldr	r3, [pc, #172]	; (8011654 <pcb_new+0xc4>)
 80115a8:	f240 2265 	movw	r2, #613	; 0x265
 80115ac:	492a      	ldr	r1, [pc, #168]	; (8011658 <pcb_new+0xc8>)
 80115ae:	482b      	ldr	r0, [pc, #172]	; (801165c <pcb_new+0xcc>)
 80115b0:	f00f ff02 	bl	80213b8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	781b      	ldrb	r3, [r3, #0]
 80115ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80115be:	2b10      	cmp	r3, #16
 80115c0:	d022      	beq.n	8011608 <pcb_new+0x78>
 80115c2:	2b20      	cmp	r3, #32
 80115c4:	d133      	bne.n	801162e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681c      	ldr	r4, [r3, #0]
 80115ca:	7bfb      	ldrb	r3, [r7, #15]
 80115cc:	4618      	mov	r0, r3
 80115ce:	f009 ff4a 	bl	801b466 <udp_new_ip_type>
 80115d2:	4603      	mov	r3, r0
 80115d4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	685b      	ldr	r3, [r3, #4]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d02a      	beq.n	8011636 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	681b      	ldr	r3, [r3, #0]
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	2b22      	cmp	r3, #34	; 0x22
 80115e8:	d104      	bne.n	80115f4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	2201      	movs	r2, #1
 80115f2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	6858      	ldr	r0, [r3, #4]
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	461a      	mov	r2, r3
 8011600:	4917      	ldr	r1, [pc, #92]	; (8011660 <pcb_new+0xd0>)
 8011602:	f009 feb7 	bl	801b374 <udp_recv>
      }
      break;
 8011606:	e016      	b.n	8011636 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681c      	ldr	r4, [r3, #0]
 801160c:	7bfb      	ldrb	r3, [r7, #15]
 801160e:	4618      	mov	r0, r3
 8011610:	f004 fc4e 	bl	8015eb0 <tcp_new_ip_type>
 8011614:	4603      	mov	r3, r0
 8011616:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	685b      	ldr	r3, [r3, #4]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d00b      	beq.n	801163a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	4618      	mov	r0, r3
 8011628:	f7ff fece 	bl	80113c8 <setup_tcp>
      }
      break;
 801162c:	e005      	b.n	801163a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	22fa      	movs	r2, #250	; 0xfa
 8011632:	711a      	strb	r2, [r3, #4]
      return;
 8011634:	e00a      	b.n	801164c <pcb_new+0xbc>
      break;
 8011636:	bf00      	nop
 8011638:	e000      	b.n	801163c <pcb_new+0xac>
      break;
 801163a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	685b      	ldr	r3, [r3, #4]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d102      	bne.n	801164c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	22ff      	movs	r2, #255	; 0xff
 801164a:	711a      	strb	r2, [r3, #4]
  }
}
 801164c:	3714      	adds	r7, #20
 801164e:	46bd      	mov	sp, r7
 8011650:	bd90      	pop	{r4, r7, pc}
 8011652:	bf00      	nop
 8011654:	08023a90 	.word	0x08023a90
 8011658:	08023c74 	.word	0x08023c74
 801165c:	08023ad4 	.word	0x08023ad4
 8011660:	08010e91 	.word	0x08010e91

08011664 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2200      	movs	r2, #0
 8011674:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	685b      	ldr	r3, [r3, #4]
 801167c:	2b00      	cmp	r3, #0
 801167e:	d102      	bne.n	8011686 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f7ff ff85 	bl	8011590 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8011686:	bf00      	nop
 8011688:	3710      	adds	r7, #16
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
	...

08011690 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011690:	b580      	push	{r7, lr}
 8011692:	b086      	sub	sp, #24
 8011694:	af00      	add	r7, sp, #0
 8011696:	4603      	mov	r3, r0
 8011698:	6039      	str	r1, [r7, #0]
 801169a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 801169c:	2300      	movs	r3, #0
 801169e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 80116a0:	2007      	movs	r0, #7
 80116a2:	f001 fe1f 	bl	80132e4 <memp_malloc>
 80116a6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d101      	bne.n	80116b2 <netconn_alloc+0x22>
    return NULL;
 80116ae:	2300      	movs	r3, #0
 80116b0:	e056      	b.n	8011760 <netconn_alloc+0xd0>
  }

  conn->pending_err = ERR_OK;
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	2200      	movs	r2, #0
 80116b6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	79fa      	ldrb	r2, [r7, #7]
 80116bc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	2200      	movs	r2, #0
 80116c2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80116c4:	79fb      	ldrb	r3, [r7, #7]
 80116c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80116ca:	2b10      	cmp	r3, #16
 80116cc:	d004      	beq.n	80116d8 <netconn_alloc+0x48>
 80116ce:	2b20      	cmp	r3, #32
 80116d0:	d105      	bne.n	80116de <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80116d2:	2306      	movs	r3, #6
 80116d4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80116d6:	e00a      	b.n	80116ee <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80116d8:	2306      	movs	r3, #6
 80116da:	617b      	str	r3, [r7, #20]
      break;
 80116dc:	e007      	b.n	80116ee <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80116de:	4b22      	ldr	r3, [pc, #136]	; (8011768 <netconn_alloc+0xd8>)
 80116e0:	f240 22e5 	movw	r2, #741	; 0x2e5
 80116e4:	4921      	ldr	r1, [pc, #132]	; (801176c <netconn_alloc+0xdc>)
 80116e6:	4822      	ldr	r0, [pc, #136]	; (8011770 <netconn_alloc+0xe0>)
 80116e8:	f00f fe66 	bl	80213b8 <iprintf>
      goto free_and_return;
 80116ec:	e033      	b.n	8011756 <netconn_alloc+0xc6>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	3310      	adds	r3, #16
 80116f2:	6979      	ldr	r1, [r7, #20]
 80116f4:	4618      	mov	r0, r3
 80116f6:	f00e f8fd 	bl	801f8f4 <sys_mbox_new>
 80116fa:	4603      	mov	r3, r0
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d129      	bne.n	8011754 <netconn_alloc+0xc4>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	330c      	adds	r3, #12
 8011704:	2100      	movs	r1, #0
 8011706:	4618      	mov	r0, r3
 8011708:	f00e f9bb 	bl	801fa82 <sys_sem_new>
 801170c:	4603      	mov	r3, r0
 801170e:	2b00      	cmp	r3, #0
 8011710:	d005      	beq.n	801171e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	3310      	adds	r3, #16
 8011716:	4618      	mov	r0, r3
 8011718:	f00e f90e 	bl	801f938 <sys_mbox_free>
    goto free_and_return;
 801171c:	e01b      	b.n	8011756 <netconn_alloc+0xc6>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801171e:	68fb      	ldr	r3, [r7, #12]
 8011720:	3314      	adds	r3, #20
 8011722:	4618      	mov	r0, r3
 8011724:	f00e f9a0 	bl	801fa68 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	2200      	movs	r2, #0
 801172c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011734:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	683a      	ldr	r2, [r7, #0]
 801173a:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 801173c:	68fb      	ldr	r3, [r7, #12]
 801173e:	2200      	movs	r2, #0
 8011740:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2200      	movs	r2, #0
 8011746:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	7cfa      	ldrb	r2, [r7, #19]
 801174c:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	e005      	b.n	8011760 <netconn_alloc+0xd0>
    goto free_and_return;
 8011754:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8011756:	68f9      	ldr	r1, [r7, #12]
 8011758:	2007      	movs	r0, #7
 801175a:	f001 fe39 	bl	80133d0 <memp_free>
  return NULL;
 801175e:	2300      	movs	r3, #0
}
 8011760:	4618      	mov	r0, r3
 8011762:	3718      	adds	r7, #24
 8011764:	46bd      	mov	sp, r7
 8011766:	bd80      	pop	{r7, pc}
 8011768:	08023a90 	.word	0x08023a90
 801176c:	08023c94 	.word	0x08023c94
 8011770:	08023ad4 	.word	0x08023ad4

08011774 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	685b      	ldr	r3, [r3, #4]
 8011780:	2b00      	cmp	r3, #0
 8011782:	d006      	beq.n	8011792 <netconn_free+0x1e>
 8011784:	4b1b      	ldr	r3, [pc, #108]	; (80117f4 <netconn_free+0x80>)
 8011786:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801178a:	491b      	ldr	r1, [pc, #108]	; (80117f8 <netconn_free+0x84>)
 801178c:	481b      	ldr	r0, [pc, #108]	; (80117fc <netconn_free+0x88>)
 801178e:	f00f fe13 	bl	80213b8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	3310      	adds	r3, #16
 8011796:	4618      	mov	r0, r3
 8011798:	f00e f955 	bl	801fa46 <sys_mbox_valid>
 801179c:	4603      	mov	r3, r0
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d006      	beq.n	80117b0 <netconn_free+0x3c>
 80117a2:	4b14      	ldr	r3, [pc, #80]	; (80117f4 <netconn_free+0x80>)
 80117a4:	f240 3223 	movw	r2, #803	; 0x323
 80117a8:	4915      	ldr	r1, [pc, #84]	; (8011800 <netconn_free+0x8c>)
 80117aa:	4814      	ldr	r0, [pc, #80]	; (80117fc <netconn_free+0x88>)
 80117ac:	f00f fe04 	bl	80213b8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	3314      	adds	r3, #20
 80117b4:	4618      	mov	r0, r3
 80117b6:	f00e f946 	bl	801fa46 <sys_mbox_valid>
 80117ba:	4603      	mov	r3, r0
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d006      	beq.n	80117ce <netconn_free+0x5a>
 80117c0:	4b0c      	ldr	r3, [pc, #48]	; (80117f4 <netconn_free+0x80>)
 80117c2:	f240 3226 	movw	r2, #806	; 0x326
 80117c6:	490f      	ldr	r1, [pc, #60]	; (8011804 <netconn_free+0x90>)
 80117c8:	480c      	ldr	r0, [pc, #48]	; (80117fc <netconn_free+0x88>)
 80117ca:	f00f fdf5 	bl	80213b8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	330c      	adds	r3, #12
 80117d2:	4618      	mov	r0, r3
 80117d4:	f00e f9bb 	bl	801fb4e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	330c      	adds	r3, #12
 80117dc:	4618      	mov	r0, r3
 80117de:	f00e f9d4 	bl	801fb8a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80117e2:	6879      	ldr	r1, [r7, #4]
 80117e4:	2007      	movs	r0, #7
 80117e6:	f001 fdf3 	bl	80133d0 <memp_free>
}
 80117ea:	bf00      	nop
 80117ec:	3708      	adds	r7, #8
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd80      	pop	{r7, pc}
 80117f2:	bf00      	nop
 80117f4:	08023a90 	.word	0x08023a90
 80117f8:	08023cbc 	.word	0x08023cbc
 80117fc:	08023ad4 	.word	0x08023ad4
 8011800:	08023cec 	.word	0x08023cec
 8011804:	08023d28 	.word	0x08023d28

08011808 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b086      	sub	sp, #24
 801180c:	af00      	add	r7, sp, #0
 801180e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3310      	adds	r3, #16
 8011814:	4618      	mov	r0, r3
 8011816:	f00e f916 	bl	801fa46 <sys_mbox_valid>
 801181a:	4603      	mov	r3, r0
 801181c:	2b00      	cmp	r3, #0
 801181e:	d02f      	beq.n	8011880 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011820:	e018      	b.n	8011854 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	781b      	ldrb	r3, [r3, #0]
 8011826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801182a:	2b10      	cmp	r3, #16
 801182c:	d10e      	bne.n	801184c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 801182e:	693b      	ldr	r3, [r7, #16]
 8011830:	f107 020f 	add.w	r2, r7, #15
 8011834:	4611      	mov	r1, r2
 8011836:	4618      	mov	r0, r3
 8011838:	f7ff faf0 	bl	8010e1c <lwip_netconn_is_err_msg>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d108      	bne.n	8011854 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011842:	693b      	ldr	r3, [r7, #16]
 8011844:	4618      	mov	r0, r3
 8011846:	f002 fc73 	bl	8014130 <pbuf_free>
 801184a:	e003      	b.n	8011854 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 801184c:	693b      	ldr	r3, [r7, #16]
 801184e:	4618      	mov	r0, r3
 8011850:	f000 fe98 	bl	8012584 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	3310      	adds	r3, #16
 8011858:	f107 0210 	add.w	r2, r7, #16
 801185c:	4611      	mov	r1, r2
 801185e:	4618      	mov	r0, r3
 8011860:	f00e f8d5 	bl	801fa0e <sys_arch_mbox_tryfetch>
 8011864:	4603      	mov	r3, r0
 8011866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801186a:	d1da      	bne.n	8011822 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	3310      	adds	r3, #16
 8011870:	4618      	mov	r0, r3
 8011872:	f00e f861 	bl	801f938 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	3310      	adds	r3, #16
 801187a:	4618      	mov	r0, r3
 801187c:	f00e f8f4 	bl	801fa68 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	3314      	adds	r3, #20
 8011884:	4618      	mov	r0, r3
 8011886:	f00e f8de 	bl	801fa46 <sys_mbox_valid>
 801188a:	4603      	mov	r3, r0
 801188c:	2b00      	cmp	r3, #0
 801188e:	d034      	beq.n	80118fa <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011890:	e01d      	b.n	80118ce <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011892:	693b      	ldr	r3, [r7, #16]
 8011894:	f107 020e 	add.w	r2, r7, #14
 8011898:	4611      	mov	r1, r2
 801189a:	4618      	mov	r0, r3
 801189c:	f7ff fabe 	bl	8010e1c <lwip_netconn_is_err_msg>
 80118a0:	4603      	mov	r3, r0
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d113      	bne.n	80118ce <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 80118a6:	693b      	ldr	r3, [r7, #16]
 80118a8:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 80118aa:	6978      	ldr	r0, [r7, #20]
 80118ac:	f7ff ffac 	bl	8011808 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 80118b0:	697b      	ldr	r3, [r7, #20]
 80118b2:	685b      	ldr	r3, [r3, #4]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d007      	beq.n	80118c8 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 80118b8:	697b      	ldr	r3, [r7, #20]
 80118ba:	685b      	ldr	r3, [r3, #4]
 80118bc:	4618      	mov	r0, r3
 80118be:	f003 fa37 	bl	8014d30 <tcp_abort>
            newconn->pcb.tcp = NULL;
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	2200      	movs	r2, #0
 80118c6:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 80118c8:	6978      	ldr	r0, [r7, #20]
 80118ca:	f7ff ff53 	bl	8011774 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	3314      	adds	r3, #20
 80118d2:	f107 0210 	add.w	r2, r7, #16
 80118d6:	4611      	mov	r1, r2
 80118d8:	4618      	mov	r0, r3
 80118da:	f00e f898 	bl	801fa0e <sys_arch_mbox_tryfetch>
 80118de:	4603      	mov	r3, r0
 80118e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80118e4:	d1d5      	bne.n	8011892 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	3314      	adds	r3, #20
 80118ea:	4618      	mov	r0, r3
 80118ec:	f00e f824 	bl	801f938 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	3314      	adds	r3, #20
 80118f4:	4618      	mov	r0, r3
 80118f6:	f00e f8b7 	bl	801fa68 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80118fa:	bf00      	nop
 80118fc:	3718      	adds	r7, #24
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
	...

08011904 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011904:	b580      	push	{r7, lr}
 8011906:	b086      	sub	sp, #24
 8011908:	af00      	add	r7, sp, #0
 801190a:	6078      	str	r0, [r7, #4]
 801190c:	460b      	mov	r3, r1
 801190e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011910:	2300      	movs	r3, #0
 8011912:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	2b00      	cmp	r3, #0
 8011918:	d106      	bne.n	8011928 <lwip_netconn_do_close_internal+0x24>
 801191a:	4b87      	ldr	r3, [pc, #540]	; (8011b38 <lwip_netconn_do_close_internal+0x234>)
 801191c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8011920:	4986      	ldr	r1, [pc, #536]	; (8011b3c <lwip_netconn_do_close_internal+0x238>)
 8011922:	4887      	ldr	r0, [pc, #540]	; (8011b40 <lwip_netconn_do_close_internal+0x23c>)
 8011924:	f00f fd48 	bl	80213b8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	781b      	ldrb	r3, [r3, #0]
 801192c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011930:	2b10      	cmp	r3, #16
 8011932:	d006      	beq.n	8011942 <lwip_netconn_do_close_internal+0x3e>
 8011934:	4b80      	ldr	r3, [pc, #512]	; (8011b38 <lwip_netconn_do_close_internal+0x234>)
 8011936:	f240 32a3 	movw	r2, #931	; 0x3a3
 801193a:	4982      	ldr	r1, [pc, #520]	; (8011b44 <lwip_netconn_do_close_internal+0x240>)
 801193c:	4880      	ldr	r0, [pc, #512]	; (8011b40 <lwip_netconn_do_close_internal+0x23c>)
 801193e:	f00f fd3b 	bl	80213b8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	785b      	ldrb	r3, [r3, #1]
 8011946:	2b04      	cmp	r3, #4
 8011948:	d006      	beq.n	8011958 <lwip_netconn_do_close_internal+0x54>
 801194a:	4b7b      	ldr	r3, [pc, #492]	; (8011b38 <lwip_netconn_do_close_internal+0x234>)
 801194c:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8011950:	497d      	ldr	r1, [pc, #500]	; (8011b48 <lwip_netconn_do_close_internal+0x244>)
 8011952:	487b      	ldr	r0, [pc, #492]	; (8011b40 <lwip_netconn_do_close_internal+0x23c>)
 8011954:	f00f fd30 	bl	80213b8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d106      	bne.n	801196e <lwip_netconn_do_close_internal+0x6a>
 8011960:	4b75      	ldr	r3, [pc, #468]	; (8011b38 <lwip_netconn_do_close_internal+0x234>)
 8011962:	f240 32a5 	movw	r2, #933	; 0x3a5
 8011966:	4979      	ldr	r1, [pc, #484]	; (8011b4c <lwip_netconn_do_close_internal+0x248>)
 8011968:	4875      	ldr	r0, [pc, #468]	; (8011b40 <lwip_netconn_do_close_internal+0x23c>)
 801196a:	f00f fd25 	bl	80213b8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011972:	2b00      	cmp	r3, #0
 8011974:	d106      	bne.n	8011984 <lwip_netconn_do_close_internal+0x80>
 8011976:	4b70      	ldr	r3, [pc, #448]	; (8011b38 <lwip_netconn_do_close_internal+0x234>)
 8011978:	f240 32a6 	movw	r2, #934	; 0x3a6
 801197c:	4974      	ldr	r1, [pc, #464]	; (8011b50 <lwip_netconn_do_close_internal+0x24c>)
 801197e:	4870      	ldr	r0, [pc, #448]	; (8011b40 <lwip_netconn_do_close_internal+0x23c>)
 8011980:	f00f fd1a 	bl	80213b8 <iprintf>

  tpcb = conn->pcb.tcp;
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	685b      	ldr	r3, [r3, #4]
 8011988:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801198e:	7a1b      	ldrb	r3, [r3, #8]
 8011990:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8011992:	7bfb      	ldrb	r3, [r7, #15]
 8011994:	f003 0301 	and.w	r3, r3, #1
 8011998:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 801199a:	7bfb      	ldrb	r3, [r7, #15]
 801199c:	f003 0302 	and.w	r3, r3, #2
 80119a0:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 80119a2:	7bfb      	ldrb	r3, [r7, #15]
 80119a4:	2b03      	cmp	r3, #3
 80119a6:	d102      	bne.n	80119ae <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 80119a8:	2301      	movs	r3, #1
 80119aa:	75bb      	strb	r3, [r7, #22]
 80119ac:	e01f      	b.n	80119ee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 80119ae:	7bbb      	ldrb	r3, [r7, #14]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d00e      	beq.n	80119d2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 80119b4:	693b      	ldr	r3, [r7, #16]
 80119b6:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 80119b8:	2b05      	cmp	r3, #5
 80119ba:	d007      	beq.n	80119cc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 80119c0:	2b06      	cmp	r3, #6
 80119c2:	d003      	beq.n	80119cc <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 80119c4:	693b      	ldr	r3, [r7, #16]
 80119c6:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 80119c8:	2b08      	cmp	r3, #8
 80119ca:	d102      	bne.n	80119d2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 80119cc:	2301      	movs	r3, #1
 80119ce:	75bb      	strb	r3, [r7, #22]
 80119d0:	e00d      	b.n	80119ee <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 80119d2:	7b7b      	ldrb	r3, [r7, #13]
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	d008      	beq.n	80119ea <lwip_netconn_do_close_internal+0xe6>
 80119d8:	693b      	ldr	r3, [r7, #16]
 80119da:	8b5b      	ldrh	r3, [r3, #26]
 80119dc:	f003 0310 	and.w	r3, r3, #16
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d002      	beq.n	80119ea <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80119e4:	2301      	movs	r3, #1
 80119e6:	75bb      	strb	r3, [r7, #22]
 80119e8:	e001      	b.n	80119ee <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80119ea:	2300      	movs	r3, #0
 80119ec:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80119ee:	7dbb      	ldrb	r3, [r7, #22]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d003      	beq.n	80119fc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80119f4:	2100      	movs	r1, #0
 80119f6:	6938      	ldr	r0, [r7, #16]
 80119f8:	f004 fa68 	bl	8015ecc <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80119fc:	693b      	ldr	r3, [r7, #16]
 80119fe:	7d1b      	ldrb	r3, [r3, #20]
 8011a00:	2b01      	cmp	r3, #1
 8011a02:	d104      	bne.n	8011a0e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8011a04:	2100      	movs	r1, #0
 8011a06:	6938      	ldr	r0, [r7, #16]
 8011a08:	f004 fad8 	bl	8015fbc <tcp_accept>
 8011a0c:	e01d      	b.n	8011a4a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8011a0e:	7bbb      	ldrb	r3, [r7, #14]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d007      	beq.n	8011a24 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8011a14:	2100      	movs	r1, #0
 8011a16:	6938      	ldr	r0, [r7, #16]
 8011a18:	f004 fa6a 	bl	8015ef0 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8011a1c:	2100      	movs	r1, #0
 8011a1e:	6938      	ldr	r0, [r7, #16]
 8011a20:	f004 facc 	bl	8015fbc <tcp_accept>
    }
    if (shut_tx) {
 8011a24:	7b7b      	ldrb	r3, [r7, #13]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d003      	beq.n	8011a32 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8011a2a:	2100      	movs	r1, #0
 8011a2c:	6938      	ldr	r0, [r7, #16]
 8011a2e:	f004 fa81 	bl	8015f34 <tcp_sent>
    }
    if (shut_close) {
 8011a32:	7dbb      	ldrb	r3, [r7, #22]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d008      	beq.n	8011a4a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8011a38:	2200      	movs	r2, #0
 8011a3a:	2100      	movs	r1, #0
 8011a3c:	6938      	ldr	r0, [r7, #16]
 8011a3e:	f004 fad5 	bl	8015fec <tcp_poll>
      tcp_err(tpcb, NULL);
 8011a42:	2100      	movs	r1, #0
 8011a44:	6938      	ldr	r0, [r7, #16]
 8011a46:	f004 fa97 	bl	8015f78 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8011a4a:	7dbb      	ldrb	r3, [r7, #22]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d005      	beq.n	8011a5c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8011a50:	6938      	ldr	r0, [r7, #16]
 8011a52:	f003 f827 	bl	8014aa4 <tcp_close>
 8011a56:	4603      	mov	r3, r0
 8011a58:	75fb      	strb	r3, [r7, #23]
 8011a5a:	e007      	b.n	8011a6c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8011a5c:	7bbb      	ldrb	r3, [r7, #14]
 8011a5e:	7b7a      	ldrb	r2, [r7, #13]
 8011a60:	4619      	mov	r1, r3
 8011a62:	6938      	ldr	r0, [r7, #16]
 8011a64:	f003 f84a 	bl	8014afc <tcp_shutdown>
 8011a68:	4603      	mov	r3, r0
 8011a6a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8011a6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d102      	bne.n	8011a7a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8011a74:	2301      	movs	r3, #1
 8011a76:	757b      	strb	r3, [r7, #21]
 8011a78:	e016      	b.n	8011aa8 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8011a7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011a82:	d10f      	bne.n	8011aa4 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a88:	7a5b      	ldrb	r3, [r3, #9]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	d10c      	bne.n	8011aa8 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8011a8e:	2301      	movs	r3, #1
 8011a90:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8011a92:	7dbb      	ldrb	r3, [r7, #22]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d007      	beq.n	8011aa8 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8011a98:	6938      	ldr	r0, [r7, #16]
 8011a9a:	f003 f949 	bl	8014d30 <tcp_abort>
          err = ERR_OK;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	75fb      	strb	r3, [r7, #23]
 8011aa2:	e001      	b.n	8011aa8 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8011aa8:	7d7b      	ldrb	r3, [r7, #21]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d052      	beq.n	8011b54 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	330c      	adds	r3, #12
 8011ab6:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011abc:	7dfa      	ldrb	r2, [r7, #23]
 8011abe:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	2200      	movs	r2, #0
 8011ac4:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	2200      	movs	r2, #0
 8011aca:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8011acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d129      	bne.n	8011b28 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8011ad4:	7dbb      	ldrb	r3, [r7, #22]
 8011ad6:	2b00      	cmp	r3, #0
 8011ad8:	d00c      	beq.n	8011af4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	2200      	movs	r2, #0
 8011ade:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d005      	beq.n	8011af4 <lwip_netconn_do_close_internal+0x1f0>
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011aec:	2200      	movs	r2, #0
 8011aee:	2104      	movs	r1, #4
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	4798      	blx	r3
      }
      if (shut_rx) {
 8011af4:	7bbb      	ldrb	r3, [r7, #14]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d009      	beq.n	8011b0e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d005      	beq.n	8011b0e <lwip_netconn_do_close_internal+0x20a>
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b06:	2200      	movs	r2, #0
 8011b08:	2100      	movs	r1, #0
 8011b0a:	6878      	ldr	r0, [r7, #4]
 8011b0c:	4798      	blx	r3
      }
      if (shut_tx) {
 8011b0e:	7b7b      	ldrb	r3, [r7, #13]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d009      	beq.n	8011b28 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d005      	beq.n	8011b28 <lwip_netconn_do_close_internal+0x224>
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b20:	2200      	movs	r2, #0
 8011b22:	2102      	movs	r1, #2
 8011b24:	6878      	ldr	r0, [r7, #4]
 8011b26:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011b28:	78fb      	ldrb	r3, [r7, #3]
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d002      	beq.n	8011b34 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8011b2e:	68b8      	ldr	r0, [r7, #8]
 8011b30:	f00e f800 	bl	801fb34 <sys_sem_signal>
    }
    return ERR_OK;
 8011b34:	2300      	movs	r3, #0
 8011b36:	e03c      	b.n	8011bb2 <lwip_netconn_do_close_internal+0x2ae>
 8011b38:	08023a90 	.word	0x08023a90
 8011b3c:	08023d64 	.word	0x08023d64
 8011b40:	08023ad4 	.word	0x08023ad4
 8011b44:	08023d74 	.word	0x08023d74
 8011b48:	08023d94 	.word	0x08023d94
 8011b4c:	08023db8 	.word	0x08023db8
 8011b50:	08023bf8 	.word	0x08023bf8
  }
  if (!close_finished) {
 8011b54:	7d7b      	ldrb	r3, [r7, #21]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d11e      	bne.n	8011b98 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8011b5a:	693b      	ldr	r3, [r7, #16]
 8011b5c:	7d1b      	ldrb	r3, [r3, #20]
 8011b5e:	2b01      	cmp	r3, #1
 8011b60:	d106      	bne.n	8011b70 <lwip_netconn_do_close_internal+0x26c>
 8011b62:	4b16      	ldr	r3, [pc, #88]	; (8011bbc <lwip_netconn_do_close_internal+0x2b8>)
 8011b64:	f240 4241 	movw	r2, #1089	; 0x441
 8011b68:	4915      	ldr	r1, [pc, #84]	; (8011bc0 <lwip_netconn_do_close_internal+0x2bc>)
 8011b6a:	4816      	ldr	r0, [pc, #88]	; (8011bc4 <lwip_netconn_do_close_internal+0x2c0>)
 8011b6c:	f00f fc24 	bl	80213b8 <iprintf>
    if (shut_tx) {
 8011b70:	7b7b      	ldrb	r3, [r7, #13]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d003      	beq.n	8011b7e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8011b76:	4914      	ldr	r1, [pc, #80]	; (8011bc8 <lwip_netconn_do_close_internal+0x2c4>)
 8011b78:	6938      	ldr	r0, [r7, #16]
 8011b7a:	f004 f9db 	bl	8015f34 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8011b7e:	2201      	movs	r2, #1
 8011b80:	4912      	ldr	r1, [pc, #72]	; (8011bcc <lwip_netconn_do_close_internal+0x2c8>)
 8011b82:	6938      	ldr	r0, [r7, #16]
 8011b84:	f004 fa32 	bl	8015fec <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8011b88:	4911      	ldr	r1, [pc, #68]	; (8011bd0 <lwip_netconn_do_close_internal+0x2cc>)
 8011b8a:	6938      	ldr	r0, [r7, #16]
 8011b8c:	f004 f9f4 	bl	8015f78 <tcp_err>
    tcp_arg(tpcb, conn);
 8011b90:	6879      	ldr	r1, [r7, #4]
 8011b92:	6938      	ldr	r0, [r7, #16]
 8011b94:	f004 f99a 	bl	8015ecc <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8011b98:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d106      	bne.n	8011bae <lwip_netconn_do_close_internal+0x2aa>
 8011ba0:	4b06      	ldr	r3, [pc, #24]	; (8011bbc <lwip_netconn_do_close_internal+0x2b8>)
 8011ba2:	f240 424d 	movw	r2, #1101	; 0x44d
 8011ba6:	490b      	ldr	r1, [pc, #44]	; (8011bd4 <lwip_netconn_do_close_internal+0x2d0>)
 8011ba8:	4806      	ldr	r0, [pc, #24]	; (8011bc4 <lwip_netconn_do_close_internal+0x2c0>)
 8011baa:	f00f fc05 	bl	80213b8 <iprintf>
  return err;
 8011bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3718      	adds	r7, #24
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}
 8011bba:	bf00      	nop
 8011bbc:	08023a90 	.word	0x08023a90
 8011bc0:	08023dcc 	.word	0x08023dcc
 8011bc4:	08023ad4 	.word	0x08023ad4
 8011bc8:	08011169 	.word	0x08011169
 8011bcc:	08011099 	.word	0x08011099
 8011bd0:	08011215 	.word	0x08011215
 8011bd4:	08023df0 	.word	0x08023df0

08011bd8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	785b      	ldrb	r3, [r3, #1]
 8011bea:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8011bec:	7afb      	ldrb	r3, [r7, #11]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d00d      	beq.n	8011c0e <lwip_netconn_do_delconn+0x36>
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	681b      	ldr	r3, [r3, #0]
 8011bf6:	781b      	ldrb	r3, [r3, #0]
 8011bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011bfc:	2b10      	cmp	r3, #16
 8011bfe:	d006      	beq.n	8011c0e <lwip_netconn_do_delconn+0x36>
 8011c00:	4b61      	ldr	r3, [pc, #388]	; (8011d88 <lwip_netconn_do_delconn+0x1b0>)
 8011c02:	f240 425e 	movw	r2, #1118	; 0x45e
 8011c06:	4961      	ldr	r1, [pc, #388]	; (8011d8c <lwip_netconn_do_delconn+0x1b4>)
 8011c08:	4861      	ldr	r0, [pc, #388]	; (8011d90 <lwip_netconn_do_delconn+0x1b8>)
 8011c0a:	f00f fbd5 	bl	80213b8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8011c0e:	7afb      	ldrb	r3, [r7, #11]
 8011c10:	2b00      	cmp	r3, #0
 8011c12:	d005      	beq.n	8011c20 <lwip_netconn_do_delconn+0x48>
 8011c14:	7afb      	ldrb	r3, [r7, #11]
 8011c16:	2b02      	cmp	r3, #2
 8011c18:	d002      	beq.n	8011c20 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8011c1a:	7afb      	ldrb	r3, [r7, #11]
 8011c1c:	2b03      	cmp	r3, #3
 8011c1e:	d10a      	bne.n	8011c36 <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 8011c20:	7afb      	ldrb	r3, [r7, #11]
 8011c22:	2b03      	cmp	r3, #3
 8011c24:	d10b      	bne.n	8011c3e <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8011c26:	68fb      	ldr	r3, [r7, #12]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c2e:	f003 0304 	and.w	r3, r3, #4
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d103      	bne.n	8011c3e <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	22fb      	movs	r2, #251	; 0xfb
 8011c3a:	711a      	strb	r2, [r3, #4]
 8011c3c:	e098      	b.n	8011d70 <lwip_netconn_do_delconn+0x198>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8011c3e:	7afb      	ldrb	r3, [r7, #11]
 8011c40:	2b03      	cmp	r3, #3
 8011c42:	d10e      	bne.n	8011c62 <lwip_netconn_do_delconn+0x8a>
 8011c44:	68fb      	ldr	r3, [r7, #12]
 8011c46:	681b      	ldr	r3, [r3, #0]
 8011c48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8011c4c:	f003 0304 	and.w	r3, r3, #4
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d106      	bne.n	8011c62 <lwip_netconn_do_delconn+0x8a>
 8011c54:	4b4c      	ldr	r3, [pc, #304]	; (8011d88 <lwip_netconn_do_delconn+0x1b0>)
 8011c56:	f240 427a 	movw	r2, #1146	; 0x47a
 8011c5a:	494e      	ldr	r1, [pc, #312]	; (8011d94 <lwip_netconn_do_delconn+0x1bc>)
 8011c5c:	484c      	ldr	r0, [pc, #304]	; (8011d90 <lwip_netconn_do_delconn+0x1b8>)
 8011c5e:	f00f fbab 	bl	80213b8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	2200      	movs	r2, #0
 8011c66:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	4618      	mov	r0, r3
 8011c6e:	f7ff fdcb 	bl	8011808 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d05f      	beq.n	8011d3c <lwip_netconn_do_delconn+0x164>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c86:	2b10      	cmp	r3, #16
 8011c88:	d00d      	beq.n	8011ca6 <lwip_netconn_do_delconn+0xce>
 8011c8a:	2b20      	cmp	r3, #32
 8011c8c:	d151      	bne.n	8011d32 <lwip_netconn_do_delconn+0x15a>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	2200      	movs	r2, #0
 8011c96:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	685b      	ldr	r3, [r3, #4]
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f009 fb88 	bl	801b3b4 <udp_remove>
          break;
 8011ca4:	e046      	b.n	8011d34 <lwip_netconn_do_delconn+0x15c>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d006      	beq.n	8011cbe <lwip_netconn_do_delconn+0xe6>
 8011cb0:	4b35      	ldr	r3, [pc, #212]	; (8011d88 <lwip_netconn_do_delconn+0x1b0>)
 8011cb2:	f240 4294 	movw	r2, #1172	; 0x494
 8011cb6:	4938      	ldr	r1, [pc, #224]	; (8011d98 <lwip_netconn_do_delconn+0x1c0>)
 8011cb8:	4835      	ldr	r0, [pc, #212]	; (8011d90 <lwip_netconn_do_delconn+0x1b8>)
 8011cba:	f00f fb7d 	bl	80213b8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2204      	movs	r2, #4
 8011cc4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	2203      	movs	r2, #3
 8011cca:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	68fa      	ldr	r2, [r7, #12]
 8011cd2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011cd4:	68fb      	ldr	r3, [r7, #12]
 8011cd6:	681b      	ldr	r3, [r3, #0]
 8011cd8:	2100      	movs	r1, #0
 8011cda:	4618      	mov	r0, r3
 8011cdc:	f7ff fe12 	bl	8011904 <lwip_netconn_do_close_internal>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	d04b      	beq.n	8011d7e <lwip_netconn_do_delconn+0x1a6>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	785b      	ldrb	r3, [r3, #1]
 8011cec:	2b04      	cmp	r3, #4
 8011cee:	d006      	beq.n	8011cfe <lwip_netconn_do_delconn+0x126>
 8011cf0:	4b25      	ldr	r3, [pc, #148]	; (8011d88 <lwip_netconn_do_delconn+0x1b0>)
 8011cf2:	f240 429a 	movw	r2, #1178	; 0x49a
 8011cf6:	4929      	ldr	r1, [pc, #164]	; (8011d9c <lwip_netconn_do_delconn+0x1c4>)
 8011cf8:	4825      	ldr	r0, [pc, #148]	; (8011d90 <lwip_netconn_do_delconn+0x1b8>)
 8011cfa:	f00f fb5d 	bl	80213b8 <iprintf>
            UNLOCK_TCPIP_CORE();
 8011cfe:	4828      	ldr	r0, [pc, #160]	; (8011da0 <lwip_netconn_do_delconn+0x1c8>)
 8011d00:	f00d ff89 	bl	801fc16 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011d04:	68fb      	ldr	r3, [r7, #12]
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	330c      	adds	r3, #12
 8011d0a:	2100      	movs	r1, #0
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f00d fee0 	bl	801fad2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8011d12:	4823      	ldr	r0, [pc, #140]	; (8011da0 <lwip_netconn_do_delconn+0x1c8>)
 8011d14:	f00d ff70 	bl	801fbf8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	785b      	ldrb	r3, [r3, #1]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d02d      	beq.n	8011d7e <lwip_netconn_do_delconn+0x1a6>
 8011d22:	4b19      	ldr	r3, [pc, #100]	; (8011d88 <lwip_netconn_do_delconn+0x1b0>)
 8011d24:	f240 429e 	movw	r2, #1182	; 0x49e
 8011d28:	491c      	ldr	r1, [pc, #112]	; (8011d9c <lwip_netconn_do_delconn+0x1c4>)
 8011d2a:	4819      	ldr	r0, [pc, #100]	; (8011d90 <lwip_netconn_do_delconn+0x1b8>)
 8011d2c:	f00f fb44 	bl	80213b8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8011d30:	e025      	b.n	8011d7e <lwip_netconn_do_delconn+0x1a6>
#endif /* LWIP_TCP */
        default:
          break;
 8011d32:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	2200      	movs	r2, #0
 8011d3a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d007      	beq.n	8011d56 <lwip_netconn_do_delconn+0x17e>
 8011d46:	68fb      	ldr	r3, [r7, #12]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d4c:	68fa      	ldr	r2, [r7, #12]
 8011d4e:	6810      	ldr	r0, [r2, #0]
 8011d50:	2200      	movs	r2, #0
 8011d52:	2100      	movs	r1, #0
 8011d54:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	681b      	ldr	r3, [r3, #0]
 8011d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d007      	beq.n	8011d70 <lwip_netconn_do_delconn+0x198>
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	681b      	ldr	r3, [r3, #0]
 8011d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d66:	68fa      	ldr	r2, [r7, #12]
 8011d68:	6810      	ldr	r0, [r2, #0]
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	2102      	movs	r1, #2
 8011d6e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8011d70:	68fb      	ldr	r3, [r7, #12]
 8011d72:	681b      	ldr	r3, [r3, #0]
 8011d74:	330c      	adds	r3, #12
 8011d76:	4618      	mov	r0, r3
 8011d78:	f00d fef6 	bl	801fb68 <sys_sem_valid>
 8011d7c:	e000      	b.n	8011d80 <lwip_netconn_do_delconn+0x1a8>
          return;
 8011d7e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8011d80:	3710      	adds	r7, #16
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	08023a90 	.word	0x08023a90
 8011d8c:	08023e00 	.word	0x08023e00
 8011d90:	08023ad4 	.word	0x08023ad4
 8011d94:	08023e14 	.word	0x08023e14
 8011d98:	08023e34 	.word	0x08023e34
 8011d9c:	08023e50 	.word	0x08023e50
 8011da0:	2000eb20 	.word	0x2000eb20

08011da4 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b084      	sub	sp, #16
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	681b      	ldr	r3, [r3, #0]
 8011db4:	685b      	ldr	r3, [r3, #4]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d025      	beq.n	8011e06 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	781b      	ldrb	r3, [r3, #0]
 8011dc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011dc4:	2b10      	cmp	r3, #16
 8011dc6:	d00e      	beq.n	8011de6 <lwip_netconn_do_bind+0x42>
 8011dc8:	2b20      	cmp	r3, #32
 8011dca:	d119      	bne.n	8011e00 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	681b      	ldr	r3, [r3, #0]
 8011dd0:	6858      	ldr	r0, [r3, #4]
 8011dd2:	68bb      	ldr	r3, [r7, #8]
 8011dd4:	6899      	ldr	r1, [r3, #8]
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	899b      	ldrh	r3, [r3, #12]
 8011dda:	461a      	mov	r2, r3
 8011ddc:	f009 f9c8 	bl	801b170 <udp_bind>
 8011de0:	4603      	mov	r3, r0
 8011de2:	73fb      	strb	r3, [r7, #15]
        break;
 8011de4:	e011      	b.n	8011e0a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	6858      	ldr	r0, [r3, #4]
 8011dec:	68bb      	ldr	r3, [r7, #8]
 8011dee:	6899      	ldr	r1, [r3, #8]
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	899b      	ldrh	r3, [r3, #12]
 8011df4:	461a      	mov	r2, r3
 8011df6:	f002 ffa7 	bl	8014d48 <tcp_bind>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	73fb      	strb	r3, [r7, #15]
        break;
 8011dfe:	e004      	b.n	8011e0a <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8011e00:	23fa      	movs	r3, #250	; 0xfa
 8011e02:	73fb      	strb	r3, [r7, #15]
        break;
 8011e04:	e001      	b.n	8011e0a <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8011e06:	23fa      	movs	r3, #250	; 0xfa
 8011e08:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8011e0a:	68bb      	ldr	r3, [r7, #8]
 8011e0c:	7bfa      	ldrb	r2, [r7, #15]
 8011e0e:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8011e10:	bf00      	nop
 8011e12:	3710      	adds	r7, #16
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b086      	sub	sp, #24
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d07f      	beq.n	8011f2e <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	781b      	ldrb	r3, [r3, #0]
 8011e34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011e38:	2b10      	cmp	r3, #16
 8011e3a:	d175      	bne.n	8011f28 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8011e3c:	697b      	ldr	r3, [r7, #20]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	785b      	ldrb	r3, [r3, #1]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d165      	bne.n	8011f12 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 8011e46:	697b      	ldr	r3, [r7, #20]
 8011e48:	681b      	ldr	r3, [r3, #0]
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	7d1b      	ldrb	r3, [r3, #20]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d002      	beq.n	8011e58 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 8011e52:	23fa      	movs	r3, #250	; 0xfa
 8011e54:	72fb      	strb	r3, [r7, #11]
 8011e56:	e06c      	b.n	8011f32 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 8011e58:	23ff      	movs	r3, #255	; 0xff
 8011e5a:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 8011e5c:	697b      	ldr	r3, [r7, #20]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	685b      	ldr	r3, [r3, #4]
 8011e62:	f107 020b 	add.w	r2, r7, #11
 8011e66:	7cf9      	ldrb	r1, [r7, #19]
 8011e68:	4618      	mov	r0, r3
 8011e6a:	f003 f839 	bl	8014ee0 <tcp_listen_with_backlog_and_err>
 8011e6e:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8011e70:	68fb      	ldr	r3, [r7, #12]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	d05d      	beq.n	8011f32 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8011e76:	697b      	ldr	r3, [r7, #20]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	3310      	adds	r3, #16
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f00d fde2 	bl	801fa46 <sys_mbox_valid>
 8011e82:	4603      	mov	r3, r0
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d00b      	beq.n	8011ea0 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 8011e88:	697b      	ldr	r3, [r7, #20]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	3310      	adds	r3, #16
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f00d fd52 	bl	801f938 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	3310      	adds	r3, #16
 8011e9a:	4618      	mov	r0, r3
 8011e9c:	f00d fde4 	bl	801fa68 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	3314      	adds	r3, #20
 8011eaa:	4618      	mov	r0, r3
 8011eac:	f00d fdcb 	bl	801fa46 <sys_mbox_valid>
 8011eb0:	4603      	mov	r3, r0
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d108      	bne.n	8011ec8 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	3314      	adds	r3, #20
 8011ebc:	2106      	movs	r1, #6
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f00d fd18 	bl	801f8f4 <sys_mbox_new>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8011ec8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d118      	bne.n	8011f02 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2202      	movs	r2, #2
 8011ed6:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8011ed8:	697b      	ldr	r3, [r7, #20]
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	68fa      	ldr	r2, [r7, #12]
 8011ede:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	685a      	ldr	r2, [r3, #4]
 8011ee6:	697b      	ldr	r3, [r7, #20]
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	4619      	mov	r1, r3
 8011eec:	4610      	mov	r0, r2
 8011eee:	f003 ffed 	bl	8015ecc <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8011ef2:	697b      	ldr	r3, [r7, #20]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	4912      	ldr	r1, [pc, #72]	; (8011f44 <lwip_netconn_do_listen+0x12c>)
 8011efa:	4618      	mov	r0, r3
 8011efc:	f004 f85e 	bl	8015fbc <tcp_accept>
 8011f00:	e017      	b.n	8011f32 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8011f02:	68f8      	ldr	r0, [r7, #12]
 8011f04:	f002 fdce 	bl	8014aa4 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8011f08:	697b      	ldr	r3, [r7, #20]
 8011f0a:	681b      	ldr	r3, [r3, #0]
 8011f0c:	2200      	movs	r2, #0
 8011f0e:	605a      	str	r2, [r3, #4]
 8011f10:	e00f      	b.n	8011f32 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8011f12:	697b      	ldr	r3, [r7, #20]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	785b      	ldrb	r3, [r3, #1]
 8011f18:	2b02      	cmp	r3, #2
 8011f1a:	d102      	bne.n	8011f22 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8011f1c:	2300      	movs	r3, #0
 8011f1e:	72fb      	strb	r3, [r7, #11]
 8011f20:	e007      	b.n	8011f32 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8011f22:	23f5      	movs	r3, #245	; 0xf5
 8011f24:	72fb      	strb	r3, [r7, #11]
 8011f26:	e004      	b.n	8011f32 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8011f28:	23f0      	movs	r3, #240	; 0xf0
 8011f2a:	72fb      	strb	r3, [r7, #11]
 8011f2c:	e001      	b.n	8011f32 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8011f2e:	23f5      	movs	r3, #245	; 0xf5
 8011f30:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8011f32:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8011f36:	697b      	ldr	r3, [r7, #20]
 8011f38:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8011f3a:	bf00      	nop
 8011f3c:	3718      	adds	r7, #24
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bd80      	pop	{r7, pc}
 8011f42:	bf00      	nop
 8011f44:	08011419 	.word	0x08011419

08011f48 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b086      	sub	sp, #24
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8011f54:	693b      	ldr	r3, [r7, #16]
 8011f56:	2200      	movs	r2, #0
 8011f58:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8011f5a:	693b      	ldr	r3, [r7, #16]
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	685b      	ldr	r3, [r3, #4]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d022      	beq.n	8011faa <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8011f64:	693b      	ldr	r3, [r7, #16]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011f6e:	2b10      	cmp	r3, #16
 8011f70:	d11b      	bne.n	8011faa <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8011f72:	693b      	ldr	r3, [r7, #16]
 8011f74:	689b      	ldr	r3, [r3, #8]
 8011f76:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f7e:	d202      	bcs.n	8011f86 <lwip_netconn_do_recv+0x3e>
 8011f80:	697b      	ldr	r3, [r7, #20]
 8011f82:	b29b      	uxth	r3, r3
 8011f84:	e001      	b.n	8011f8a <lwip_netconn_do_recv+0x42>
 8011f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011f8a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	685b      	ldr	r3, [r3, #4]
 8011f92:	89fa      	ldrh	r2, [r7, #14]
 8011f94:	4611      	mov	r1, r2
 8011f96:	4618      	mov	r0, r3
 8011f98:	f003 f8c6 	bl	8015128 <tcp_recved>
        remaining -= recved;
 8011f9c:	89fb      	ldrh	r3, [r7, #14]
 8011f9e:	697a      	ldr	r2, [r7, #20]
 8011fa0:	1ad3      	subs	r3, r2, r3
 8011fa2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d1e6      	bne.n	8011f78 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011faa:	bf00      	nop
 8011fac:	3718      	adds	r7, #24
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}
	...

08011fb4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b088      	sub	sp, #32
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	460b      	mov	r3, r1
 8011fbe:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d106      	bne.n	8011fd8 <lwip_netconn_do_writemore+0x24>
 8011fca:	4b61      	ldr	r3, [pc, #388]	; (8012150 <lwip_netconn_do_writemore+0x19c>)
 8011fcc:	f240 6273 	movw	r2, #1651	; 0x673
 8011fd0:	4960      	ldr	r1, [pc, #384]	; (8012154 <lwip_netconn_do_writemore+0x1a0>)
 8011fd2:	4861      	ldr	r0, [pc, #388]	; (8012158 <lwip_netconn_do_writemore+0x1a4>)
 8011fd4:	f00f f9f0 	bl	80213b8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	785b      	ldrb	r3, [r3, #1]
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d006      	beq.n	8011fee <lwip_netconn_do_writemore+0x3a>
 8011fe0:	4b5b      	ldr	r3, [pc, #364]	; (8012150 <lwip_netconn_do_writemore+0x19c>)
 8011fe2:	f240 6274 	movw	r2, #1652	; 0x674
 8011fe6:	495d      	ldr	r1, [pc, #372]	; (801215c <lwip_netconn_do_writemore+0x1a8>)
 8011fe8:	485b      	ldr	r0, [pc, #364]	; (8012158 <lwip_netconn_do_writemore+0x1a4>)
 8011fea:	f00f f9e5 	bl	80213b8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d106      	bne.n	8012004 <lwip_netconn_do_writemore+0x50>
 8011ff6:	4b56      	ldr	r3, [pc, #344]	; (8012150 <lwip_netconn_do_writemore+0x19c>)
 8011ff8:	f240 6275 	movw	r2, #1653	; 0x675
 8011ffc:	4958      	ldr	r1, [pc, #352]	; (8012160 <lwip_netconn_do_writemore+0x1ac>)
 8011ffe:	4856      	ldr	r0, [pc, #344]	; (8012158 <lwip_netconn_do_writemore+0x1a4>)
 8012000:	f00f f9da 	bl	80213b8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	685b      	ldr	r3, [r3, #4]
 8012008:	2b00      	cmp	r3, #0
 801200a:	d106      	bne.n	801201a <lwip_netconn_do_writemore+0x66>
 801200c:	4b50      	ldr	r3, [pc, #320]	; (8012150 <lwip_netconn_do_writemore+0x19c>)
 801200e:	f240 6276 	movw	r2, #1654	; 0x676
 8012012:	4954      	ldr	r1, [pc, #336]	; (8012164 <lwip_netconn_do_writemore+0x1b0>)
 8012014:	4850      	ldr	r0, [pc, #320]	; (8012158 <lwip_netconn_do_writemore+0x1a4>)
 8012016:	f00f f9cf 	bl	80213b8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801201e:	699a      	ldr	r2, [r3, #24]
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012024:	695b      	ldr	r3, [r3, #20]
 8012026:	429a      	cmp	r2, r3
 8012028:	d306      	bcc.n	8012038 <lwip_netconn_do_writemore+0x84>
 801202a:	4b49      	ldr	r3, [pc, #292]	; (8012150 <lwip_netconn_do_writemore+0x19c>)
 801202c:	f240 6277 	movw	r2, #1655	; 0x677
 8012030:	494d      	ldr	r1, [pc, #308]	; (8012168 <lwip_netconn_do_writemore+0x1b4>)
 8012032:	4849      	ldr	r0, [pc, #292]	; (8012158 <lwip_netconn_do_writemore+0x1a4>)
 8012034:	f00f f9c0 	bl	80213b8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801203c:	899b      	ldrh	r3, [r3, #12]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d106      	bne.n	8012050 <lwip_netconn_do_writemore+0x9c>
 8012042:	4b43      	ldr	r3, [pc, #268]	; (8012150 <lwip_netconn_do_writemore+0x19c>)
 8012044:	f240 6279 	movw	r2, #1657	; 0x679
 8012048:	4948      	ldr	r1, [pc, #288]	; (801216c <lwip_netconn_do_writemore+0x1b8>)
 801204a:	4843      	ldr	r0, [pc, #268]	; (8012158 <lwip_netconn_do_writemore+0x1a4>)
 801204c:	f00f f9b4 	bl	80213b8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012054:	7f1b      	ldrb	r3, [r3, #28]
 8012056:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801205e:	f003 0302 	and.w	r3, r3, #2
 8012062:	2b00      	cmp	r3, #0
 8012064:	d104      	bne.n	8012070 <lwip_netconn_do_writemore+0xbc>
 8012066:	7ebb      	ldrb	r3, [r7, #26]
 8012068:	f003 0304 	and.w	r3, r3, #4
 801206c:	2b00      	cmp	r3, #0
 801206e:	d001      	beq.n	8012074 <lwip_netconn_do_writemore+0xc0>
 8012070:	2301      	movs	r3, #1
 8012072:	e000      	b.n	8012076 <lwip_netconn_do_writemore+0xc2>
 8012074:	2300      	movs	r3, #0
 8012076:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801207c:	689b      	ldr	r3, [r3, #8]
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012084:	691b      	ldr	r3, [r3, #16]
 8012086:	4413      	add	r3, r2
 8012088:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801208e:	689b      	ldr	r3, [r3, #8]
 8012090:	685a      	ldr	r2, [r3, #4]
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012096:	691b      	ldr	r3, [r3, #16]
 8012098:	1ad3      	subs	r3, r2, r3
 801209a:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801209c:	693b      	ldr	r3, [r7, #16]
 801209e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80120a2:	d307      	bcc.n	80120b4 <lwip_netconn_do_writemore+0x100>
        len = 0xffff;
 80120a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80120a8:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80120aa:	7ebb      	ldrb	r3, [r7, #26]
 80120ac:	f043 0302 	orr.w	r3, r3, #2
 80120b0:	76bb      	strb	r3, [r7, #26]
 80120b2:	e001      	b.n	80120b8 <lwip_netconn_do_writemore+0x104>
      } else {
        len = (u16_t)diff;
 80120b4:	693b      	ldr	r3, [r7, #16]
 80120b6:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	685b      	ldr	r3, [r3, #4]
 80120bc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80120c0:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80120c2:	89fa      	ldrh	r2, [r7, #14]
 80120c4:	8bbb      	ldrh	r3, [r7, #28]
 80120c6:	429a      	cmp	r2, r3
 80120c8:	d216      	bcs.n	80120f8 <lwip_netconn_do_writemore+0x144>
        /* don't try to write more than sendbuf */
        len = available;
 80120ca:	89fb      	ldrh	r3, [r7, #14]
 80120cc:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80120ce:	7e3b      	ldrb	r3, [r7, #24]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d00d      	beq.n	80120f0 <lwip_netconn_do_writemore+0x13c>
          if (!len) {
 80120d4:	8bbb      	ldrh	r3, [r7, #28]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d10e      	bne.n	80120f8 <lwip_netconn_do_writemore+0x144>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120de:	699b      	ldr	r3, [r3, #24]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d102      	bne.n	80120ea <lwip_netconn_do_writemore+0x136>
 80120e4:	f06f 0306 	mvn.w	r3, #6
 80120e8:	e000      	b.n	80120ec <lwip_netconn_do_writemore+0x138>
 80120ea:	2300      	movs	r3, #0
 80120ec:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80120ee:	e08f      	b.n	8012210 <lwip_netconn_do_writemore+0x25c>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80120f0:	7ebb      	ldrb	r3, [r7, #26]
 80120f2:	f043 0302 	orr.w	r3, r3, #2
 80120f6:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120fc:	691a      	ldr	r2, [r3, #16]
 80120fe:	8bbb      	ldrh	r3, [r7, #28]
 8012100:	441a      	add	r2, r3
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	685b      	ldr	r3, [r3, #4]
 801210a:	429a      	cmp	r2, r3
 801210c:	d906      	bls.n	801211c <lwip_netconn_do_writemore+0x168>
 801210e:	4b10      	ldr	r3, [pc, #64]	; (8012150 <lwip_netconn_do_writemore+0x19c>)
 8012110:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8012114:	4916      	ldr	r1, [pc, #88]	; (8012170 <lwip_netconn_do_writemore+0x1bc>)
 8012116:	4810      	ldr	r0, [pc, #64]	; (8012158 <lwip_netconn_do_writemore+0x1a4>)
 8012118:	f00f f94e 	bl	80213b8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 801211c:	8bbb      	ldrh	r3, [r7, #28]
 801211e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012122:	4293      	cmp	r3, r2
 8012124:	d103      	bne.n	801212e <lwip_netconn_do_writemore+0x17a>
 8012126:	693b      	ldr	r3, [r7, #16]
 8012128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801212c:	d209      	bcs.n	8012142 <lwip_netconn_do_writemore+0x18e>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801212e:	693b      	ldr	r3, [r7, #16]
 8012130:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012132:	8bba      	ldrh	r2, [r7, #28]
 8012134:	429a      	cmp	r2, r3
 8012136:	d11d      	bne.n	8012174 <lwip_netconn_do_writemore+0x1c0>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801213c:	899b      	ldrh	r3, [r3, #12]
 801213e:	2b01      	cmp	r3, #1
 8012140:	d918      	bls.n	8012174 <lwip_netconn_do_writemore+0x1c0>
        write_more = 1;
 8012142:	2301      	movs	r3, #1
 8012144:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012146:	7ebb      	ldrb	r3, [r7, #26]
 8012148:	f043 0302 	orr.w	r3, r3, #2
 801214c:	76bb      	strb	r3, [r7, #26]
 801214e:	e013      	b.n	8012178 <lwip_netconn_do_writemore+0x1c4>
 8012150:	08023a90 	.word	0x08023a90
 8012154:	08023be8 	.word	0x08023be8
 8012158:	08023ad4 	.word	0x08023ad4
 801215c:	08023ef0 	.word	0x08023ef0
 8012160:	08023bf8 	.word	0x08023bf8
 8012164:	08023f10 	.word	0x08023f10
 8012168:	08023f28 	.word	0x08023f28
 801216c:	08023f68 	.word	0x08023f68
 8012170:	08023f90 	.word	0x08023f90
      } else {
        write_more = 0;
 8012174:	2300      	movs	r3, #0
 8012176:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	6858      	ldr	r0, [r3, #4]
 801217c:	7ebb      	ldrb	r3, [r7, #26]
 801217e:	8bba      	ldrh	r2, [r7, #28]
 8012180:	6979      	ldr	r1, [r7, #20]
 8012182:	f006 fdf3 	bl	8018d6c <tcp_write>
 8012186:	4603      	mov	r3, r0
 8012188:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 801218a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d12c      	bne.n	80121ec <lwip_netconn_do_writemore+0x238>
        conn->current_msg->msg.w.offset += len;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012196:	6999      	ldr	r1, [r3, #24]
 8012198:	8bba      	ldrh	r2, [r7, #28]
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801219e:	440a      	add	r2, r1
 80121a0:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a6:	6919      	ldr	r1, [r3, #16]
 80121a8:	8bba      	ldrh	r2, [r7, #28]
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ae:	440a      	add	r2, r1
 80121b0:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121b6:	691a      	ldr	r2, [r3, #16]
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121bc:	689b      	ldr	r3, [r3, #8]
 80121be:	685b      	ldr	r3, [r3, #4]
 80121c0:	429a      	cmp	r2, r3
 80121c2:	d113      	bne.n	80121ec <lwip_netconn_do_writemore+0x238>
          conn->current_msg->msg.w.vector_cnt--;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121c8:	899a      	ldrh	r2, [r3, #12]
 80121ca:	3a01      	subs	r2, #1
 80121cc:	b292      	uxth	r2, r2
 80121ce:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121d4:	899b      	ldrh	r3, [r3, #12]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d008      	beq.n	80121ec <lwip_netconn_do_writemore+0x238>
            conn->current_msg->msg.w.vector++;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121de:	689a      	ldr	r2, [r3, #8]
 80121e0:	3208      	adds	r2, #8
 80121e2:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e8:	2200      	movs	r2, #0
 80121ea:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80121ec:	7e7b      	ldrb	r3, [r7, #25]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d004      	beq.n	80121fc <lwip_netconn_do_writemore+0x248>
 80121f2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	f43f af3e 	beq.w	8012078 <lwip_netconn_do_writemore+0xc4>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80121fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d004      	beq.n	801220e <lwip_netconn_do_writemore+0x25a>
 8012204:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801220c:	d136      	bne.n	801227c <lwip_netconn_do_writemore+0x2c8>
err_mem:
 801220e:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8012210:	7e3b      	ldrb	r3, [r7, #24]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d01b      	beq.n	801224e <lwip_netconn_do_writemore+0x29a>
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801221a:	699a      	ldr	r2, [r3, #24]
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012220:	695b      	ldr	r3, [r3, #20]
 8012222:	429a      	cmp	r2, r3
 8012224:	d213      	bcs.n	801224e <lwip_netconn_do_writemore+0x29a>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801222a:	2b00      	cmp	r3, #0
 801222c:	d005      	beq.n	801223a <lwip_netconn_do_writemore+0x286>
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012232:	2200      	movs	r2, #0
 8012234:	2103      	movs	r1, #3
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012240:	f043 0310 	orr.w	r3, r3, #16
 8012244:	b2da      	uxtb	r2, r3
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f883 2020 	strb.w	r2, [r3, #32]
 801224c:	e016      	b.n	801227c <lwip_netconn_do_writemore+0x2c8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	685b      	ldr	r3, [r3, #4]
 8012252:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012256:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801225a:	d305      	bcc.n	8012268 <lwip_netconn_do_writemore+0x2b4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	685b      	ldr	r3, [r3, #4]
 8012260:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012264:	2b04      	cmp	r3, #4
 8012266:	d909      	bls.n	801227c <lwip_netconn_do_writemore+0x2c8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801226c:	2b00      	cmp	r3, #0
 801226e:	d005      	beq.n	801227c <lwip_netconn_do_writemore+0x2c8>
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012274:	2200      	movs	r2, #0
 8012276:	2103      	movs	r1, #3
 8012278:	6878      	ldr	r0, [r7, #4]
 801227a:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 801227c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012280:	2b00      	cmp	r3, #0
 8012282:	d11d      	bne.n	80122c0 <lwip_netconn_do_writemore+0x30c>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012288:	699a      	ldr	r2, [r3, #24]
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801228e:	695b      	ldr	r3, [r3, #20]
 8012290:	429a      	cmp	r2, r3
 8012292:	d002      	beq.n	801229a <lwip_netconn_do_writemore+0x2e6>
 8012294:	7e3b      	ldrb	r3, [r7, #24]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d001      	beq.n	801229e <lwip_netconn_do_writemore+0x2ea>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 801229a:	2301      	movs	r3, #1
 801229c:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	685b      	ldr	r3, [r3, #4]
 80122a2:	4618      	mov	r0, r3
 80122a4:	f007 fb4c 	bl	8019940 <tcp_output>
 80122a8:	4603      	mov	r3, r0
 80122aa:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80122ac:	f997 300c 	ldrsb.w	r3, [r7, #12]
 80122b0:	f113 0f04 	cmn.w	r3, #4
 80122b4:	d12c      	bne.n	8012310 <lwip_netconn_do_writemore+0x35c>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80122b6:	7b3b      	ldrb	r3, [r7, #12]
 80122b8:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80122ba:	2301      	movs	r3, #1
 80122bc:	76fb      	strb	r3, [r7, #27]
 80122be:	e027      	b.n	8012310 <lwip_netconn_do_writemore+0x35c>
      }
    } else if (err == ERR_MEM) {
 80122c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80122c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122c8:	d120      	bne.n	801230c <lwip_netconn_do_writemore+0x358>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	4618      	mov	r0, r3
 80122d0:	f007 fb36 	bl	8019940 <tcp_output>
 80122d4:	4603      	mov	r3, r0
 80122d6:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80122d8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80122dc:	f113 0f04 	cmn.w	r3, #4
 80122e0:	d104      	bne.n	80122ec <lwip_netconn_do_writemore+0x338>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80122e2:	7b7b      	ldrb	r3, [r7, #13]
 80122e4:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80122e6:	2301      	movs	r3, #1
 80122e8:	76fb      	strb	r3, [r7, #27]
 80122ea:	e011      	b.n	8012310 <lwip_netconn_do_writemore+0x35c>
      } else if (dontblock) {
 80122ec:	7e3b      	ldrb	r3, [r7, #24]
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d00e      	beq.n	8012310 <lwip_netconn_do_writemore+0x35c>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122f6:	699b      	ldr	r3, [r3, #24]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d102      	bne.n	8012302 <lwip_netconn_do_writemore+0x34e>
 80122fc:	f06f 0306 	mvn.w	r3, #6
 8012300:	e000      	b.n	8012304 <lwip_netconn_do_writemore+0x350>
 8012302:	2300      	movs	r3, #0
 8012304:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012306:	2301      	movs	r3, #1
 8012308:	76fb      	strb	r3, [r7, #27]
 801230a:	e001      	b.n	8012310 <lwip_netconn_do_writemore+0x35c>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 801230c:	2301      	movs	r3, #1
 801230e:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8012310:	7efb      	ldrb	r3, [r7, #27]
 8012312:	2b00      	cmp	r3, #0
 8012314:	d015      	beq.n	8012342 <lwip_netconn_do_writemore+0x38e>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	330c      	adds	r3, #12
 801231e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8012320:	687b      	ldr	r3, [r7, #4]
 8012322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012324:	7ffa      	ldrb	r2, [r7, #31]
 8012326:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2200      	movs	r2, #0
 801232c:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	2200      	movs	r2, #0
 8012332:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8012334:	78fb      	ldrb	r3, [r7, #3]
 8012336:	2b00      	cmp	r3, #0
 8012338:	d006      	beq.n	8012348 <lwip_netconn_do_writemore+0x394>
#endif
    {
      sys_sem_signal(op_completed_sem);
 801233a:	68b8      	ldr	r0, [r7, #8]
 801233c:	f00d fbfa 	bl	801fb34 <sys_sem_signal>
 8012340:	e002      	b.n	8012348 <lwip_netconn_do_writemore+0x394>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8012342:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012346:	e000      	b.n	801234a <lwip_netconn_do_writemore+0x396>
  }
#endif
  return ERR_OK;
 8012348:	2300      	movs	r3, #0
}
 801234a:	4618      	mov	r0, r3
 801234c:	3720      	adds	r7, #32
 801234e:	46bd      	mov	sp, r7
 8012350:	bd80      	pop	{r7, pc}
 8012352:	bf00      	nop

08012354 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8012354:	b580      	push	{r7, lr}
 8012356:	b084      	sub	sp, #16
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8012360:	68bb      	ldr	r3, [r7, #8]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	4618      	mov	r0, r3
 8012366:	f7fe fd08 	bl	8010d7a <netconn_err>
 801236a:	4603      	mov	r3, r0
 801236c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 801236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d166      	bne.n	8012444 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012376:	68bb      	ldr	r3, [r7, #8]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012380:	2b10      	cmp	r3, #16
 8012382:	d15d      	bne.n	8012440 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8012384:	68bb      	ldr	r3, [r7, #8]
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	785b      	ldrb	r3, [r3, #1]
 801238a:	2b00      	cmp	r3, #0
 801238c:	d002      	beq.n	8012394 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 801238e:	23fb      	movs	r3, #251	; 0xfb
 8012390:	73fb      	strb	r3, [r7, #15]
 8012392:	e057      	b.n	8012444 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8012394:	68bb      	ldr	r3, [r7, #8]
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	685b      	ldr	r3, [r3, #4]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d04d      	beq.n	801243a <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2201      	movs	r2, #1
 80123a4:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d006      	beq.n	80123be <lwip_netconn_do_write+0x6a>
 80123b0:	4b28      	ldr	r3, [pc, #160]	; (8012454 <lwip_netconn_do_write+0x100>)
 80123b2:	f240 7223 	movw	r2, #1827	; 0x723
 80123b6:	4928      	ldr	r1, [pc, #160]	; (8012458 <lwip_netconn_do_write+0x104>)
 80123b8:	4828      	ldr	r0, [pc, #160]	; (801245c <lwip_netconn_do_write+0x108>)
 80123ba:	f00e fffd 	bl	80213b8 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	695b      	ldr	r3, [r3, #20]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d106      	bne.n	80123d4 <lwip_netconn_do_write+0x80>
 80123c6:	4b23      	ldr	r3, [pc, #140]	; (8012454 <lwip_netconn_do_write+0x100>)
 80123c8:	f240 7224 	movw	r2, #1828	; 0x724
 80123cc:	4924      	ldr	r1, [pc, #144]	; (8012460 <lwip_netconn_do_write+0x10c>)
 80123ce:	4823      	ldr	r0, [pc, #140]	; (801245c <lwip_netconn_do_write+0x108>)
 80123d0:	f00e fff2 	bl	80213b8 <iprintf>
        msg->conn->current_msg = msg;
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	68ba      	ldr	r2, [r7, #8]
 80123da:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	2100      	movs	r1, #0
 80123e2:	4618      	mov	r0, r3
 80123e4:	f7ff fde6 	bl	8011fb4 <lwip_netconn_do_writemore>
 80123e8:	4603      	mov	r3, r0
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d02e      	beq.n	801244c <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	785b      	ldrb	r3, [r3, #1]
 80123f4:	2b01      	cmp	r3, #1
 80123f6:	d006      	beq.n	8012406 <lwip_netconn_do_write+0xb2>
 80123f8:	4b16      	ldr	r3, [pc, #88]	; (8012454 <lwip_netconn_do_write+0x100>)
 80123fa:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80123fe:	4919      	ldr	r1, [pc, #100]	; (8012464 <lwip_netconn_do_write+0x110>)
 8012400:	4816      	ldr	r0, [pc, #88]	; (801245c <lwip_netconn_do_write+0x108>)
 8012402:	f00e ffd9 	bl	80213b8 <iprintf>
          UNLOCK_TCPIP_CORE();
 8012406:	4818      	ldr	r0, [pc, #96]	; (8012468 <lwip_netconn_do_write+0x114>)
 8012408:	f00d fc05 	bl	801fc16 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801240c:	68bb      	ldr	r3, [r7, #8]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	330c      	adds	r3, #12
 8012412:	2100      	movs	r1, #0
 8012414:	4618      	mov	r0, r3
 8012416:	f00d fb5c 	bl	801fad2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 801241a:	4813      	ldr	r0, [pc, #76]	; (8012468 <lwip_netconn_do_write+0x114>)
 801241c:	f00d fbec 	bl	801fbf8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8012420:	68bb      	ldr	r3, [r7, #8]
 8012422:	681b      	ldr	r3, [r3, #0]
 8012424:	785b      	ldrb	r3, [r3, #1]
 8012426:	2b01      	cmp	r3, #1
 8012428:	d110      	bne.n	801244c <lwip_netconn_do_write+0xf8>
 801242a:	4b0a      	ldr	r3, [pc, #40]	; (8012454 <lwip_netconn_do_write+0x100>)
 801242c:	f240 722c 	movw	r2, #1836	; 0x72c
 8012430:	490c      	ldr	r1, [pc, #48]	; (8012464 <lwip_netconn_do_write+0x110>)
 8012432:	480a      	ldr	r0, [pc, #40]	; (801245c <lwip_netconn_do_write+0x108>)
 8012434:	f00e ffc0 	bl	80213b8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8012438:	e008      	b.n	801244c <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 801243a:	23f5      	movs	r3, #245	; 0xf5
 801243c:	73fb      	strb	r3, [r7, #15]
 801243e:	e001      	b.n	8012444 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8012440:	23fa      	movs	r3, #250	; 0xfa
 8012442:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	7bfa      	ldrb	r2, [r7, #15]
 8012448:	711a      	strb	r2, [r3, #4]
 801244a:	e000      	b.n	801244e <lwip_netconn_do_write+0xfa>
        return;
 801244c:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 801244e:	3710      	adds	r7, #16
 8012450:	46bd      	mov	sp, r7
 8012452:	bd80      	pop	{r7, pc}
 8012454:	08023a90 	.word	0x08023a90
 8012458:	08023e34 	.word	0x08023e34
 801245c:	08023ad4 	.word	0x08023ad4
 8012460:	08023fbc 	.word	0x08023fbc
 8012464:	08023e50 	.word	0x08023e50
 8012468:	2000eb20 	.word	0x2000eb20

0801246c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b084      	sub	sp, #16
 8012470:	af00      	add	r7, sp, #0
 8012472:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	785b      	ldrb	r3, [r3, #1]
 801247e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	685b      	ldr	r3, [r3, #4]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d069      	beq.n	801255e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	681b      	ldr	r3, [r3, #0]
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012494:	2b10      	cmp	r3, #16
 8012496:	d162      	bne.n	801255e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801249c:	2b03      	cmp	r3, #3
 801249e:	d002      	beq.n	80124a6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80124a0:	7afb      	ldrb	r3, [r7, #11]
 80124a2:	2b02      	cmp	r3, #2
 80124a4:	d05b      	beq.n	801255e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80124a6:	7afb      	ldrb	r3, [r7, #11]
 80124a8:	2b03      	cmp	r3, #3
 80124aa:	d103      	bne.n	80124b4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80124ac:	68fb      	ldr	r3, [r7, #12]
 80124ae:	22f5      	movs	r2, #245	; 0xf5
 80124b0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80124b2:	e059      	b.n	8012568 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80124b4:	7afb      	ldrb	r3, [r7, #11]
 80124b6:	2b01      	cmp	r3, #1
 80124b8:	d103      	bne.n	80124c2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	22fb      	movs	r2, #251	; 0xfb
 80124be:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80124c0:	e052      	b.n	8012568 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	7a1b      	ldrb	r3, [r3, #8]
 80124c6:	f003 0301 	and.w	r3, r3, #1
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d004      	beq.n	80124d8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	681b      	ldr	r3, [r3, #0]
 80124d2:	4618      	mov	r0, r3
 80124d4:	f7ff f998 	bl	8011808 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	681b      	ldr	r3, [r3, #0]
 80124dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d006      	beq.n	80124f0 <lwip_netconn_do_close+0x84>
 80124e2:	4b23      	ldr	r3, [pc, #140]	; (8012570 <lwip_netconn_do_close+0x104>)
 80124e4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80124e8:	4922      	ldr	r1, [pc, #136]	; (8012574 <lwip_netconn_do_close+0x108>)
 80124ea:	4823      	ldr	r0, [pc, #140]	; (8012578 <lwip_netconn_do_close+0x10c>)
 80124ec:	f00e ff64 	bl	80213b8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80124f0:	68fb      	ldr	r3, [r7, #12]
 80124f2:	681b      	ldr	r3, [r3, #0]
 80124f4:	2204      	movs	r2, #4
 80124f6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80124f8:	68fb      	ldr	r3, [r7, #12]
 80124fa:	681b      	ldr	r3, [r3, #0]
 80124fc:	68fa      	ldr	r2, [r7, #12]
 80124fe:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	2100      	movs	r1, #0
 8012506:	4618      	mov	r0, r3
 8012508:	f7ff f9fc 	bl	8011904 <lwip_netconn_do_close_internal>
 801250c:	4603      	mov	r3, r0
 801250e:	2b00      	cmp	r3, #0
 8012510:	d029      	beq.n	8012566 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	785b      	ldrb	r3, [r3, #1]
 8012518:	2b04      	cmp	r3, #4
 801251a:	d006      	beq.n	801252a <lwip_netconn_do_close+0xbe>
 801251c:	4b14      	ldr	r3, [pc, #80]	; (8012570 <lwip_netconn_do_close+0x104>)
 801251e:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8012522:	4916      	ldr	r1, [pc, #88]	; (801257c <lwip_netconn_do_close+0x110>)
 8012524:	4814      	ldr	r0, [pc, #80]	; (8012578 <lwip_netconn_do_close+0x10c>)
 8012526:	f00e ff47 	bl	80213b8 <iprintf>
        UNLOCK_TCPIP_CORE();
 801252a:	4815      	ldr	r0, [pc, #84]	; (8012580 <lwip_netconn_do_close+0x114>)
 801252c:	f00d fb73 	bl	801fc16 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	681b      	ldr	r3, [r3, #0]
 8012534:	330c      	adds	r3, #12
 8012536:	2100      	movs	r1, #0
 8012538:	4618      	mov	r0, r3
 801253a:	f00d faca 	bl	801fad2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801253e:	4810      	ldr	r0, [pc, #64]	; (8012580 <lwip_netconn_do_close+0x114>)
 8012540:	f00d fb5a 	bl	801fbf8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	785b      	ldrb	r3, [r3, #1]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d00b      	beq.n	8012566 <lwip_netconn_do_close+0xfa>
 801254e:	4b08      	ldr	r3, [pc, #32]	; (8012570 <lwip_netconn_do_close+0x104>)
 8012550:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8012554:	4909      	ldr	r1, [pc, #36]	; (801257c <lwip_netconn_do_close+0x110>)
 8012556:	4808      	ldr	r0, [pc, #32]	; (8012578 <lwip_netconn_do_close+0x10c>)
 8012558:	f00e ff2e 	bl	80213b8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 801255c:	e003      	b.n	8012566 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	22f5      	movs	r2, #245	; 0xf5
 8012562:	711a      	strb	r2, [r3, #4]
 8012564:	e000      	b.n	8012568 <lwip_netconn_do_close+0xfc>
      return;
 8012566:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012568:	3710      	adds	r7, #16
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}
 801256e:	bf00      	nop
 8012570:	08023a90 	.word	0x08023a90
 8012574:	08023e34 	.word	0x08023e34
 8012578:	08023ad4 	.word	0x08023ad4
 801257c:	08023e50 	.word	0x08023e50
 8012580:	2000eb20 	.word	0x2000eb20

08012584 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012584:	b580      	push	{r7, lr}
 8012586:	b082      	sub	sp, #8
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2b00      	cmp	r3, #0
 8012590:	d013      	beq.n	80125ba <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d00b      	beq.n	80125b2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	4618      	mov	r0, r3
 80125a0:	f001 fdc6 	bl	8014130 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2200      	movs	r2, #0
 80125a8:	605a      	str	r2, [r3, #4]
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	685a      	ldr	r2, [r3, #4]
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80125b2:	6879      	ldr	r1, [r7, #4]
 80125b4:	2006      	movs	r0, #6
 80125b6:	f000 ff0b 	bl	80133d0 <memp_free>
  }
}
 80125ba:	bf00      	nop
 80125bc:	3708      	adds	r7, #8
 80125be:	46bd      	mov	sp, r7
 80125c0:	bd80      	pop	{r7, pc}
	...

080125c4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
 80125cc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80125ce:	f008 fa6f 	bl	801aab0 <sys_timeouts_sleeptime>
 80125d2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80125da:	d10b      	bne.n	80125f4 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80125dc:	4813      	ldr	r0, [pc, #76]	; (801262c <tcpip_timeouts_mbox_fetch+0x68>)
 80125de:	f00d fb1a 	bl	801fc16 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80125e2:	2200      	movs	r2, #0
 80125e4:	6839      	ldr	r1, [r7, #0]
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f00d f9d2 	bl	801f990 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80125ec:	480f      	ldr	r0, [pc, #60]	; (801262c <tcpip_timeouts_mbox_fetch+0x68>)
 80125ee:	f00d fb03 	bl	801fbf8 <sys_mutex_lock>
    return;
 80125f2:	e018      	b.n	8012626 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d102      	bne.n	8012600 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80125fa:	f008 fa1f 	bl	801aa3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80125fe:	e7e6      	b.n	80125ce <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012600:	480a      	ldr	r0, [pc, #40]	; (801262c <tcpip_timeouts_mbox_fetch+0x68>)
 8012602:	f00d fb08 	bl	801fc16 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012606:	68fa      	ldr	r2, [r7, #12]
 8012608:	6839      	ldr	r1, [r7, #0]
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f00d f9c0 	bl	801f990 <sys_arch_mbox_fetch>
 8012610:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012612:	4806      	ldr	r0, [pc, #24]	; (801262c <tcpip_timeouts_mbox_fetch+0x68>)
 8012614:	f00d faf0 	bl	801fbf8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012618:	68bb      	ldr	r3, [r7, #8]
 801261a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801261e:	d102      	bne.n	8012626 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012620:	f008 fa0c 	bl	801aa3c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012624:	e7d3      	b.n	80125ce <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012626:	3710      	adds	r7, #16
 8012628:	46bd      	mov	sp, r7
 801262a:	bd80      	pop	{r7, pc}
 801262c:	2000eb20 	.word	0x2000eb20

08012630 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012638:	4810      	ldr	r0, [pc, #64]	; (801267c <tcpip_thread+0x4c>)
 801263a:	f00d fadd 	bl	801fbf8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801263e:	4b10      	ldr	r3, [pc, #64]	; (8012680 <tcpip_thread+0x50>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	2b00      	cmp	r3, #0
 8012644:	d005      	beq.n	8012652 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012646:	4b0e      	ldr	r3, [pc, #56]	; (8012680 <tcpip_thread+0x50>)
 8012648:	681b      	ldr	r3, [r3, #0]
 801264a:	4a0e      	ldr	r2, [pc, #56]	; (8012684 <tcpip_thread+0x54>)
 801264c:	6812      	ldr	r2, [r2, #0]
 801264e:	4610      	mov	r0, r2
 8012650:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012652:	f107 030c 	add.w	r3, r7, #12
 8012656:	4619      	mov	r1, r3
 8012658:	480b      	ldr	r0, [pc, #44]	; (8012688 <tcpip_thread+0x58>)
 801265a:	f7ff ffb3 	bl	80125c4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d106      	bne.n	8012672 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012664:	4b09      	ldr	r3, [pc, #36]	; (801268c <tcpip_thread+0x5c>)
 8012666:	2291      	movs	r2, #145	; 0x91
 8012668:	4909      	ldr	r1, [pc, #36]	; (8012690 <tcpip_thread+0x60>)
 801266a:	480a      	ldr	r0, [pc, #40]	; (8012694 <tcpip_thread+0x64>)
 801266c:	f00e fea4 	bl	80213b8 <iprintf>
      continue;
 8012670:	e003      	b.n	801267a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012672:	68fb      	ldr	r3, [r7, #12]
 8012674:	4618      	mov	r0, r3
 8012676:	f000 f80f 	bl	8012698 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801267a:	e7ea      	b.n	8012652 <tcpip_thread+0x22>
 801267c:	2000eb20 	.word	0x2000eb20
 8012680:	2000eb14 	.word	0x2000eb14
 8012684:	2000eb18 	.word	0x2000eb18
 8012688:	2000eb1c 	.word	0x2000eb1c
 801268c:	08023fe8 	.word	0x08023fe8
 8012690:	08024018 	.word	0x08024018
 8012694:	08024038 	.word	0x08024038

08012698 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012698:	b580      	push	{r7, lr}
 801269a:	b082      	sub	sp, #8
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	781b      	ldrb	r3, [r3, #0]
 80126a4:	2b02      	cmp	r3, #2
 80126a6:	d026      	beq.n	80126f6 <tcpip_thread_handle_msg+0x5e>
 80126a8:	2b02      	cmp	r3, #2
 80126aa:	dc2b      	bgt.n	8012704 <tcpip_thread_handle_msg+0x6c>
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d002      	beq.n	80126b6 <tcpip_thread_handle_msg+0x1e>
 80126b0:	2b01      	cmp	r3, #1
 80126b2:	d015      	beq.n	80126e0 <tcpip_thread_handle_msg+0x48>
 80126b4:	e026      	b.n	8012704 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	68db      	ldr	r3, [r3, #12]
 80126ba:	687a      	ldr	r2, [r7, #4]
 80126bc:	6850      	ldr	r0, [r2, #4]
 80126be:	687a      	ldr	r2, [r7, #4]
 80126c0:	6892      	ldr	r2, [r2, #8]
 80126c2:	4611      	mov	r1, r2
 80126c4:	4798      	blx	r3
 80126c6:	4603      	mov	r3, r0
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d004      	beq.n	80126d6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	685b      	ldr	r3, [r3, #4]
 80126d0:	4618      	mov	r0, r3
 80126d2:	f001 fd2d 	bl	8014130 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80126d6:	6879      	ldr	r1, [r7, #4]
 80126d8:	2009      	movs	r0, #9
 80126da:	f000 fe79 	bl	80133d0 <memp_free>
      break;
 80126de:	e018      	b.n	8012712 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	685b      	ldr	r3, [r3, #4]
 80126e4:	687a      	ldr	r2, [r7, #4]
 80126e6:	6892      	ldr	r2, [r2, #8]
 80126e8:	4610      	mov	r0, r2
 80126ea:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80126ec:	6879      	ldr	r1, [r7, #4]
 80126ee:	2008      	movs	r0, #8
 80126f0:	f000 fe6e 	bl	80133d0 <memp_free>
      break;
 80126f4:	e00d      	b.n	8012712 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	685b      	ldr	r3, [r3, #4]
 80126fa:	687a      	ldr	r2, [r7, #4]
 80126fc:	6892      	ldr	r2, [r2, #8]
 80126fe:	4610      	mov	r0, r2
 8012700:	4798      	blx	r3
      break;
 8012702:	e006      	b.n	8012712 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012704:	4b05      	ldr	r3, [pc, #20]	; (801271c <tcpip_thread_handle_msg+0x84>)
 8012706:	22cf      	movs	r2, #207	; 0xcf
 8012708:	4905      	ldr	r1, [pc, #20]	; (8012720 <tcpip_thread_handle_msg+0x88>)
 801270a:	4806      	ldr	r0, [pc, #24]	; (8012724 <tcpip_thread_handle_msg+0x8c>)
 801270c:	f00e fe54 	bl	80213b8 <iprintf>
      break;
 8012710:	bf00      	nop
  }
}
 8012712:	bf00      	nop
 8012714:	3708      	adds	r7, #8
 8012716:	46bd      	mov	sp, r7
 8012718:	bd80      	pop	{r7, pc}
 801271a:	bf00      	nop
 801271c:	08023fe8 	.word	0x08023fe8
 8012720:	08024018 	.word	0x08024018
 8012724:	08024038 	.word	0x08024038

08012728 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b086      	sub	sp, #24
 801272c:	af00      	add	r7, sp, #0
 801272e:	60f8      	str	r0, [r7, #12]
 8012730:	60b9      	str	r1, [r7, #8]
 8012732:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012734:	481a      	ldr	r0, [pc, #104]	; (80127a0 <tcpip_inpkt+0x78>)
 8012736:	f00d f986 	bl	801fa46 <sys_mbox_valid>
 801273a:	4603      	mov	r3, r0
 801273c:	2b00      	cmp	r3, #0
 801273e:	d105      	bne.n	801274c <tcpip_inpkt+0x24>
 8012740:	4b18      	ldr	r3, [pc, #96]	; (80127a4 <tcpip_inpkt+0x7c>)
 8012742:	22fc      	movs	r2, #252	; 0xfc
 8012744:	4918      	ldr	r1, [pc, #96]	; (80127a8 <tcpip_inpkt+0x80>)
 8012746:	4819      	ldr	r0, [pc, #100]	; (80127ac <tcpip_inpkt+0x84>)
 8012748:	f00e fe36 	bl	80213b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 801274c:	2009      	movs	r0, #9
 801274e:	f000 fdc9 	bl	80132e4 <memp_malloc>
 8012752:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012754:	697b      	ldr	r3, [r7, #20]
 8012756:	2b00      	cmp	r3, #0
 8012758:	d102      	bne.n	8012760 <tcpip_inpkt+0x38>
    return ERR_MEM;
 801275a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801275e:	e01a      	b.n	8012796 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012760:	697b      	ldr	r3, [r7, #20]
 8012762:	2200      	movs	r2, #0
 8012764:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	68fa      	ldr	r2, [r7, #12]
 801276a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 801276c:	697b      	ldr	r3, [r7, #20]
 801276e:	68ba      	ldr	r2, [r7, #8]
 8012770:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012778:	6979      	ldr	r1, [r7, #20]
 801277a:	4809      	ldr	r0, [pc, #36]	; (80127a0 <tcpip_inpkt+0x78>)
 801277c:	f00d f8ee 	bl	801f95c <sys_mbox_trypost>
 8012780:	4603      	mov	r3, r0
 8012782:	2b00      	cmp	r3, #0
 8012784:	d006      	beq.n	8012794 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012786:	6979      	ldr	r1, [r7, #20]
 8012788:	2009      	movs	r0, #9
 801278a:	f000 fe21 	bl	80133d0 <memp_free>
    return ERR_MEM;
 801278e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012792:	e000      	b.n	8012796 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012794:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012796:	4618      	mov	r0, r3
 8012798:	3718      	adds	r7, #24
 801279a:	46bd      	mov	sp, r7
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	2000eb1c 	.word	0x2000eb1c
 80127a4:	08023fe8 	.word	0x08023fe8
 80127a8:	08024060 	.word	0x08024060
 80127ac:	08024038 	.word	0x08024038

080127b0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
 80127b8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80127c0:	f003 0318 	and.w	r3, r3, #24
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d006      	beq.n	80127d6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80127c8:	4a08      	ldr	r2, [pc, #32]	; (80127ec <tcpip_input+0x3c>)
 80127ca:	6839      	ldr	r1, [r7, #0]
 80127cc:	6878      	ldr	r0, [r7, #4]
 80127ce:	f7ff ffab 	bl	8012728 <tcpip_inpkt>
 80127d2:	4603      	mov	r3, r0
 80127d4:	e005      	b.n	80127e2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80127d6:	4a06      	ldr	r2, [pc, #24]	; (80127f0 <tcpip_input+0x40>)
 80127d8:	6839      	ldr	r1, [r7, #0]
 80127da:	6878      	ldr	r0, [r7, #4]
 80127dc:	f7ff ffa4 	bl	8012728 <tcpip_inpkt>
 80127e0:	4603      	mov	r3, r0
}
 80127e2:	4618      	mov	r0, r3
 80127e4:	3708      	adds	r7, #8
 80127e6:	46bd      	mov	sp, r7
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	0801f749 	.word	0x0801f749
 80127f0:	0801e4f5 	.word	0x0801e4f5

080127f4 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b084      	sub	sp, #16
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	6078      	str	r0, [r7, #4]
 80127fc:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80127fe:	4819      	ldr	r0, [pc, #100]	; (8012864 <tcpip_try_callback+0x70>)
 8012800:	f00d f921 	bl	801fa46 <sys_mbox_valid>
 8012804:	4603      	mov	r3, r0
 8012806:	2b00      	cmp	r3, #0
 8012808:	d106      	bne.n	8012818 <tcpip_try_callback+0x24>
 801280a:	4b17      	ldr	r3, [pc, #92]	; (8012868 <tcpip_try_callback+0x74>)
 801280c:	f240 125d 	movw	r2, #349	; 0x15d
 8012810:	4916      	ldr	r1, [pc, #88]	; (801286c <tcpip_try_callback+0x78>)
 8012812:	4817      	ldr	r0, [pc, #92]	; (8012870 <tcpip_try_callback+0x7c>)
 8012814:	f00e fdd0 	bl	80213b8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012818:	2008      	movs	r0, #8
 801281a:	f000 fd63 	bl	80132e4 <memp_malloc>
 801281e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d102      	bne.n	801282c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801282a:	e017      	b.n	801285c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 801282c:	68fb      	ldr	r3, [r7, #12]
 801282e:	2201      	movs	r2, #1
 8012830:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	687a      	ldr	r2, [r7, #4]
 8012836:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	683a      	ldr	r2, [r7, #0]
 801283c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801283e:	68f9      	ldr	r1, [r7, #12]
 8012840:	4808      	ldr	r0, [pc, #32]	; (8012864 <tcpip_try_callback+0x70>)
 8012842:	f00d f88b 	bl	801f95c <sys_mbox_trypost>
 8012846:	4603      	mov	r3, r0
 8012848:	2b00      	cmp	r3, #0
 801284a:	d006      	beq.n	801285a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801284c:	68f9      	ldr	r1, [r7, #12]
 801284e:	2008      	movs	r0, #8
 8012850:	f000 fdbe 	bl	80133d0 <memp_free>
    return ERR_MEM;
 8012854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012858:	e000      	b.n	801285c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 801285a:	2300      	movs	r3, #0
}
 801285c:	4618      	mov	r0, r3
 801285e:	3710      	adds	r7, #16
 8012860:	46bd      	mov	sp, r7
 8012862:	bd80      	pop	{r7, pc}
 8012864:	2000eb1c 	.word	0x2000eb1c
 8012868:	08023fe8 	.word	0x08023fe8
 801286c:	08024060 	.word	0x08024060
 8012870:	08024038 	.word	0x08024038

08012874 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b084      	sub	sp, #16
 8012878:	af00      	add	r7, sp, #0
 801287a:	60f8      	str	r0, [r7, #12]
 801287c:	60b9      	str	r1, [r7, #8]
 801287e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012880:	4806      	ldr	r0, [pc, #24]	; (801289c <tcpip_send_msg_wait_sem+0x28>)
 8012882:	f00d f9b9 	bl	801fbf8 <sys_mutex_lock>
  fn(apimsg);
 8012886:	68fb      	ldr	r3, [r7, #12]
 8012888:	68b8      	ldr	r0, [r7, #8]
 801288a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801288c:	4803      	ldr	r0, [pc, #12]	; (801289c <tcpip_send_msg_wait_sem+0x28>)
 801288e:	f00d f9c2 	bl	801fc16 <sys_mutex_unlock>
  return ERR_OK;
 8012892:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8012894:	4618      	mov	r0, r3
 8012896:	3710      	adds	r7, #16
 8012898:	46bd      	mov	sp, r7
 801289a:	bd80      	pop	{r7, pc}
 801289c:	2000eb20 	.word	0x2000eb20

080128a0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b084      	sub	sp, #16
 80128a4:	af02      	add	r7, sp, #8
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	6039      	str	r1, [r7, #0]
  lwip_init();
 80128aa:	f000 f871 	bl	8012990 <lwip_init>

  tcpip_init_done = initfunc;
 80128ae:	4a17      	ldr	r2, [pc, #92]	; (801290c <tcpip_init+0x6c>)
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80128b4:	4a16      	ldr	r2, [pc, #88]	; (8012910 <tcpip_init+0x70>)
 80128b6:	683b      	ldr	r3, [r7, #0]
 80128b8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80128ba:	2106      	movs	r1, #6
 80128bc:	4815      	ldr	r0, [pc, #84]	; (8012914 <tcpip_init+0x74>)
 80128be:	f00d f819 	bl	801f8f4 <sys_mbox_new>
 80128c2:	4603      	mov	r3, r0
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d006      	beq.n	80128d6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80128c8:	4b13      	ldr	r3, [pc, #76]	; (8012918 <tcpip_init+0x78>)
 80128ca:	f240 2261 	movw	r2, #609	; 0x261
 80128ce:	4913      	ldr	r1, [pc, #76]	; (801291c <tcpip_init+0x7c>)
 80128d0:	4813      	ldr	r0, [pc, #76]	; (8012920 <tcpip_init+0x80>)
 80128d2:	f00e fd71 	bl	80213b8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80128d6:	4813      	ldr	r0, [pc, #76]	; (8012924 <tcpip_init+0x84>)
 80128d8:	f00d f972 	bl	801fbc0 <sys_mutex_new>
 80128dc:	4603      	mov	r3, r0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d006      	beq.n	80128f0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80128e2:	4b0d      	ldr	r3, [pc, #52]	; (8012918 <tcpip_init+0x78>)
 80128e4:	f240 2265 	movw	r2, #613	; 0x265
 80128e8:	490f      	ldr	r1, [pc, #60]	; (8012928 <tcpip_init+0x88>)
 80128ea:	480d      	ldr	r0, [pc, #52]	; (8012920 <tcpip_init+0x80>)
 80128ec:	f00e fd64 	bl	80213b8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80128f0:	2300      	movs	r3, #0
 80128f2:	9300      	str	r3, [sp, #0]
 80128f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80128f8:	2200      	movs	r2, #0
 80128fa:	490c      	ldr	r1, [pc, #48]	; (801292c <tcpip_init+0x8c>)
 80128fc:	480c      	ldr	r0, [pc, #48]	; (8012930 <tcpip_init+0x90>)
 80128fe:	f00d f997 	bl	801fc30 <sys_thread_new>
}
 8012902:	bf00      	nop
 8012904:	3708      	adds	r7, #8
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	2000eb14 	.word	0x2000eb14
 8012910:	2000eb18 	.word	0x2000eb18
 8012914:	2000eb1c 	.word	0x2000eb1c
 8012918:	08023fe8 	.word	0x08023fe8
 801291c:	08024070 	.word	0x08024070
 8012920:	08024038 	.word	0x08024038
 8012924:	2000eb20 	.word	0x2000eb20
 8012928:	08024094 	.word	0x08024094
 801292c:	08012631 	.word	0x08012631
 8012930:	080240b8 	.word	0x080240b8

08012934 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012934:	b480      	push	{r7}
 8012936:	b083      	sub	sp, #12
 8012938:	af00      	add	r7, sp, #0
 801293a:	4603      	mov	r3, r0
 801293c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801293e:	88fb      	ldrh	r3, [r7, #6]
 8012940:	021b      	lsls	r3, r3, #8
 8012942:	b21a      	sxth	r2, r3
 8012944:	88fb      	ldrh	r3, [r7, #6]
 8012946:	0a1b      	lsrs	r3, r3, #8
 8012948:	b29b      	uxth	r3, r3
 801294a:	b21b      	sxth	r3, r3
 801294c:	4313      	orrs	r3, r2
 801294e:	b21b      	sxth	r3, r3
 8012950:	b29b      	uxth	r3, r3
}
 8012952:	4618      	mov	r0, r3
 8012954:	370c      	adds	r7, #12
 8012956:	46bd      	mov	sp, r7
 8012958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295c:	4770      	bx	lr

0801295e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801295e:	b480      	push	{r7}
 8012960:	b083      	sub	sp, #12
 8012962:	af00      	add	r7, sp, #0
 8012964:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	061a      	lsls	r2, r3, #24
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	021b      	lsls	r3, r3, #8
 801296e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012972:	431a      	orrs	r2, r3
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	0a1b      	lsrs	r3, r3, #8
 8012978:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801297c:	431a      	orrs	r2, r3
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	0e1b      	lsrs	r3, r3, #24
 8012982:	4313      	orrs	r3, r2
}
 8012984:	4618      	mov	r0, r3
 8012986:	370c      	adds	r7, #12
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr

08012990 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012990:	b580      	push	{r7, lr}
 8012992:	b082      	sub	sp, #8
 8012994:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012996:	2300      	movs	r3, #0
 8012998:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801299a:	f00d f903 	bl	801fba4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801299e:	f000 f8d5 	bl	8012b4c <mem_init>
  memp_init();
 80129a2:	f000 fc31 	bl	8013208 <memp_init>
  pbuf_init();
  netif_init();
 80129a6:	f000 fd3d 	bl	8013424 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80129aa:	f008 f8b9 	bl	801ab20 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80129ae:	f001 fe69 	bl	8014684 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80129b2:	f007 fffb 	bl	801a9ac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80129b6:	bf00      	nop
 80129b8:	3708      	adds	r7, #8
 80129ba:	46bd      	mov	sp, r7
 80129bc:	bd80      	pop	{r7, pc}
	...

080129c0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80129c0:	b480      	push	{r7}
 80129c2:	b083      	sub	sp, #12
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	4603      	mov	r3, r0
 80129c8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80129ca:	4b05      	ldr	r3, [pc, #20]	; (80129e0 <ptr_to_mem+0x20>)
 80129cc:	681a      	ldr	r2, [r3, #0]
 80129ce:	88fb      	ldrh	r3, [r7, #6]
 80129d0:	4413      	add	r3, r2
}
 80129d2:	4618      	mov	r0, r3
 80129d4:	370c      	adds	r7, #12
 80129d6:	46bd      	mov	sp, r7
 80129d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129dc:	4770      	bx	lr
 80129de:	bf00      	nop
 80129e0:	2000f190 	.word	0x2000f190

080129e4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80129e4:	b480      	push	{r7}
 80129e6:	b083      	sub	sp, #12
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80129ec:	4b05      	ldr	r3, [pc, #20]	; (8012a04 <mem_to_ptr+0x20>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	1ad3      	subs	r3, r2, r3
 80129f4:	b29b      	uxth	r3, r3
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	370c      	adds	r7, #12
 80129fa:	46bd      	mov	sp, r7
 80129fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a00:	4770      	bx	lr
 8012a02:	bf00      	nop
 8012a04:	2000f190 	.word	0x2000f190

08012a08 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8012a08:	b590      	push	{r4, r7, lr}
 8012a0a:	b085      	sub	sp, #20
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8012a10:	4b45      	ldr	r3, [pc, #276]	; (8012b28 <plug_holes+0x120>)
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	687a      	ldr	r2, [r7, #4]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d206      	bcs.n	8012a28 <plug_holes+0x20>
 8012a1a:	4b44      	ldr	r3, [pc, #272]	; (8012b2c <plug_holes+0x124>)
 8012a1c:	f240 12df 	movw	r2, #479	; 0x1df
 8012a20:	4943      	ldr	r1, [pc, #268]	; (8012b30 <plug_holes+0x128>)
 8012a22:	4844      	ldr	r0, [pc, #272]	; (8012b34 <plug_holes+0x12c>)
 8012a24:	f00e fcc8 	bl	80213b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8012a28:	4b43      	ldr	r3, [pc, #268]	; (8012b38 <plug_holes+0x130>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	687a      	ldr	r2, [r7, #4]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d306      	bcc.n	8012a40 <plug_holes+0x38>
 8012a32:	4b3e      	ldr	r3, [pc, #248]	; (8012b2c <plug_holes+0x124>)
 8012a34:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012a38:	4940      	ldr	r1, [pc, #256]	; (8012b3c <plug_holes+0x134>)
 8012a3a:	483e      	ldr	r0, [pc, #248]	; (8012b34 <plug_holes+0x12c>)
 8012a3c:	f00e fcbc 	bl	80213b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	791b      	ldrb	r3, [r3, #4]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d006      	beq.n	8012a56 <plug_holes+0x4e>
 8012a48:	4b38      	ldr	r3, [pc, #224]	; (8012b2c <plug_holes+0x124>)
 8012a4a:	f240 12e1 	movw	r2, #481	; 0x1e1
 8012a4e:	493c      	ldr	r1, [pc, #240]	; (8012b40 <plug_holes+0x138>)
 8012a50:	4838      	ldr	r0, [pc, #224]	; (8012b34 <plug_holes+0x12c>)
 8012a52:	f00e fcb1 	bl	80213b8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	881b      	ldrh	r3, [r3, #0]
 8012a5a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012a5e:	d906      	bls.n	8012a6e <plug_holes+0x66>
 8012a60:	4b32      	ldr	r3, [pc, #200]	; (8012b2c <plug_holes+0x124>)
 8012a62:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8012a66:	4937      	ldr	r1, [pc, #220]	; (8012b44 <plug_holes+0x13c>)
 8012a68:	4832      	ldr	r0, [pc, #200]	; (8012b34 <plug_holes+0x12c>)
 8012a6a:	f00e fca5 	bl	80213b8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	881b      	ldrh	r3, [r3, #0]
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7ff ffa4 	bl	80129c0 <ptr_to_mem>
 8012a78:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8012a7a:	687a      	ldr	r2, [r7, #4]
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	429a      	cmp	r2, r3
 8012a80:	d024      	beq.n	8012acc <plug_holes+0xc4>
 8012a82:	68fb      	ldr	r3, [r7, #12]
 8012a84:	791b      	ldrb	r3, [r3, #4]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d120      	bne.n	8012acc <plug_holes+0xc4>
 8012a8a:	4b2b      	ldr	r3, [pc, #172]	; (8012b38 <plug_holes+0x130>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	68fa      	ldr	r2, [r7, #12]
 8012a90:	429a      	cmp	r2, r3
 8012a92:	d01b      	beq.n	8012acc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012a94:	4b2c      	ldr	r3, [pc, #176]	; (8012b48 <plug_holes+0x140>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	68fa      	ldr	r2, [r7, #12]
 8012a9a:	429a      	cmp	r2, r3
 8012a9c:	d102      	bne.n	8012aa4 <plug_holes+0x9c>
      lfree = mem;
 8012a9e:	4a2a      	ldr	r2, [pc, #168]	; (8012b48 <plug_holes+0x140>)
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	881a      	ldrh	r2, [r3, #0]
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	881b      	ldrh	r3, [r3, #0]
 8012ab0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012ab4:	d00a      	beq.n	8012acc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	881b      	ldrh	r3, [r3, #0]
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7ff ff80 	bl	80129c0 <ptr_to_mem>
 8012ac0:	4604      	mov	r4, r0
 8012ac2:	6878      	ldr	r0, [r7, #4]
 8012ac4:	f7ff ff8e 	bl	80129e4 <mem_to_ptr>
 8012ac8:	4603      	mov	r3, r0
 8012aca:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	885b      	ldrh	r3, [r3, #2]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7ff ff75 	bl	80129c0 <ptr_to_mem>
 8012ad6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8012ad8:	68ba      	ldr	r2, [r7, #8]
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d01f      	beq.n	8012b20 <plug_holes+0x118>
 8012ae0:	68bb      	ldr	r3, [r7, #8]
 8012ae2:	791b      	ldrb	r3, [r3, #4]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d11b      	bne.n	8012b20 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8012ae8:	4b17      	ldr	r3, [pc, #92]	; (8012b48 <plug_holes+0x140>)
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	687a      	ldr	r2, [r7, #4]
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d102      	bne.n	8012af8 <plug_holes+0xf0>
      lfree = pmem;
 8012af2:	4a15      	ldr	r2, [pc, #84]	; (8012b48 <plug_holes+0x140>)
 8012af4:	68bb      	ldr	r3, [r7, #8]
 8012af6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	881a      	ldrh	r2, [r3, #0]
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	881b      	ldrh	r3, [r3, #0]
 8012b04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012b08:	d00a      	beq.n	8012b20 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	881b      	ldrh	r3, [r3, #0]
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7ff ff56 	bl	80129c0 <ptr_to_mem>
 8012b14:	4604      	mov	r4, r0
 8012b16:	68b8      	ldr	r0, [r7, #8]
 8012b18:	f7ff ff64 	bl	80129e4 <mem_to_ptr>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8012b20:	bf00      	nop
 8012b22:	3714      	adds	r7, #20
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd90      	pop	{r4, r7, pc}
 8012b28:	2000f190 	.word	0x2000f190
 8012b2c:	080240c8 	.word	0x080240c8
 8012b30:	080240f8 	.word	0x080240f8
 8012b34:	08024110 	.word	0x08024110
 8012b38:	2000f194 	.word	0x2000f194
 8012b3c:	08024138 	.word	0x08024138
 8012b40:	08024154 	.word	0x08024154
 8012b44:	08024170 	.word	0x08024170
 8012b48:	2000f19c 	.word	0x2000f19c

08012b4c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8012b4c:	b580      	push	{r7, lr}
 8012b4e:	b082      	sub	sp, #8
 8012b50:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8012b52:	4b1f      	ldr	r3, [pc, #124]	; (8012bd0 <mem_init+0x84>)
 8012b54:	3303      	adds	r3, #3
 8012b56:	f023 0303 	bic.w	r3, r3, #3
 8012b5a:	461a      	mov	r2, r3
 8012b5c:	4b1d      	ldr	r3, [pc, #116]	; (8012bd4 <mem_init+0x88>)
 8012b5e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012b60:	4b1c      	ldr	r3, [pc, #112]	; (8012bd4 <mem_init+0x88>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8012b6c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	2200      	movs	r2, #0
 8012b72:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	2200      	movs	r2, #0
 8012b78:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012b7a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8012b7e:	f7ff ff1f 	bl	80129c0 <ptr_to_mem>
 8012b82:	4603      	mov	r3, r0
 8012b84:	4a14      	ldr	r2, [pc, #80]	; (8012bd8 <mem_init+0x8c>)
 8012b86:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012b88:	4b13      	ldr	r3, [pc, #76]	; (8012bd8 <mem_init+0x8c>)
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	2201      	movs	r2, #1
 8012b8e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012b90:	4b11      	ldr	r3, [pc, #68]	; (8012bd8 <mem_init+0x8c>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8012b98:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012b9a:	4b0f      	ldr	r3, [pc, #60]	; (8012bd8 <mem_init+0x8c>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8012ba2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8012ba4:	4b0b      	ldr	r3, [pc, #44]	; (8012bd4 <mem_init+0x88>)
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	4a0c      	ldr	r2, [pc, #48]	; (8012bdc <mem_init+0x90>)
 8012baa:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012bac:	480c      	ldr	r0, [pc, #48]	; (8012be0 <mem_init+0x94>)
 8012bae:	f00d f807 	bl	801fbc0 <sys_mutex_new>
 8012bb2:	4603      	mov	r3, r0
 8012bb4:	2b00      	cmp	r3, #0
 8012bb6:	d006      	beq.n	8012bc6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012bb8:	4b0a      	ldr	r3, [pc, #40]	; (8012be4 <mem_init+0x98>)
 8012bba:	f240 221f 	movw	r2, #543	; 0x21f
 8012bbe:	490a      	ldr	r1, [pc, #40]	; (8012be8 <mem_init+0x9c>)
 8012bc0:	480a      	ldr	r0, [pc, #40]	; (8012bec <mem_init+0xa0>)
 8012bc2:	f00e fbf9 	bl	80213b8 <iprintf>
  }
}
 8012bc6:	bf00      	nop
 8012bc8:	3708      	adds	r7, #8
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	2000eb3c 	.word	0x2000eb3c
 8012bd4:	2000f190 	.word	0x2000f190
 8012bd8:	2000f194 	.word	0x2000f194
 8012bdc:	2000f19c 	.word	0x2000f19c
 8012be0:	2000f198 	.word	0x2000f198
 8012be4:	080240c8 	.word	0x080240c8
 8012be8:	0802419c 	.word	0x0802419c
 8012bec:	08024110 	.word	0x08024110

08012bf0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	b086      	sub	sp, #24
 8012bf4:	af00      	add	r7, sp, #0
 8012bf6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8012bf8:	6878      	ldr	r0, [r7, #4]
 8012bfa:	f7ff fef3 	bl	80129e4 <mem_to_ptr>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	881b      	ldrh	r3, [r3, #0]
 8012c06:	4618      	mov	r0, r3
 8012c08:	f7ff feda 	bl	80129c0 <ptr_to_mem>
 8012c0c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	885b      	ldrh	r3, [r3, #2]
 8012c12:	4618      	mov	r0, r3
 8012c14:	f7ff fed4 	bl	80129c0 <ptr_to_mem>
 8012c18:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	881b      	ldrh	r3, [r3, #0]
 8012c1e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012c22:	d818      	bhi.n	8012c56 <mem_link_valid+0x66>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	885b      	ldrh	r3, [r3, #2]
 8012c28:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012c2c:	d813      	bhi.n	8012c56 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8012c32:	8afa      	ldrh	r2, [r7, #22]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d004      	beq.n	8012c42 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	881b      	ldrh	r3, [r3, #0]
 8012c3c:	8afa      	ldrh	r2, [r7, #22]
 8012c3e:	429a      	cmp	r2, r3
 8012c40:	d109      	bne.n	8012c56 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012c42:	4b08      	ldr	r3, [pc, #32]	; (8012c64 <mem_link_valid+0x74>)
 8012c44:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8012c46:	693a      	ldr	r2, [r7, #16]
 8012c48:	429a      	cmp	r2, r3
 8012c4a:	d006      	beq.n	8012c5a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8012c4c:	693b      	ldr	r3, [r7, #16]
 8012c4e:	885b      	ldrh	r3, [r3, #2]
 8012c50:	8afa      	ldrh	r2, [r7, #22]
 8012c52:	429a      	cmp	r2, r3
 8012c54:	d001      	beq.n	8012c5a <mem_link_valid+0x6a>
    return 0;
 8012c56:	2300      	movs	r3, #0
 8012c58:	e000      	b.n	8012c5c <mem_link_valid+0x6c>
  }
  return 1;
 8012c5a:	2301      	movs	r3, #1
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	3718      	adds	r7, #24
 8012c60:	46bd      	mov	sp, r7
 8012c62:	bd80      	pop	{r7, pc}
 8012c64:	2000f194 	.word	0x2000f194

08012c68 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b088      	sub	sp, #32
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d070      	beq.n	8012d58 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f003 0303 	and.w	r3, r3, #3
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d00d      	beq.n	8012c9c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8012c80:	4b37      	ldr	r3, [pc, #220]	; (8012d60 <mem_free+0xf8>)
 8012c82:	f240 2273 	movw	r2, #627	; 0x273
 8012c86:	4937      	ldr	r1, [pc, #220]	; (8012d64 <mem_free+0xfc>)
 8012c88:	4837      	ldr	r0, [pc, #220]	; (8012d68 <mem_free+0x100>)
 8012c8a:	f00e fb95 	bl	80213b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012c8e:	f00c fff5 	bl	801fc7c <sys_arch_protect>
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	68f8      	ldr	r0, [r7, #12]
 8012c96:	f00c ffff 	bl	801fc98 <sys_arch_unprotect>
    return;
 8012c9a:	e05e      	b.n	8012d5a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	3b08      	subs	r3, #8
 8012ca0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8012ca2:	4b32      	ldr	r3, [pc, #200]	; (8012d6c <mem_free+0x104>)
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	69fa      	ldr	r2, [r7, #28]
 8012ca8:	429a      	cmp	r2, r3
 8012caa:	d306      	bcc.n	8012cba <mem_free+0x52>
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	f103 020c 	add.w	r2, r3, #12
 8012cb2:	4b2f      	ldr	r3, [pc, #188]	; (8012d70 <mem_free+0x108>)
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	429a      	cmp	r2, r3
 8012cb8:	d90d      	bls.n	8012cd6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012cba:	4b29      	ldr	r3, [pc, #164]	; (8012d60 <mem_free+0xf8>)
 8012cbc:	f240 227f 	movw	r2, #639	; 0x27f
 8012cc0:	492c      	ldr	r1, [pc, #176]	; (8012d74 <mem_free+0x10c>)
 8012cc2:	4829      	ldr	r0, [pc, #164]	; (8012d68 <mem_free+0x100>)
 8012cc4:	f00e fb78 	bl	80213b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012cc8:	f00c ffd8 	bl	801fc7c <sys_arch_protect>
 8012ccc:	6138      	str	r0, [r7, #16]
 8012cce:	6938      	ldr	r0, [r7, #16]
 8012cd0:	f00c ffe2 	bl	801fc98 <sys_arch_unprotect>
    return;
 8012cd4:	e041      	b.n	8012d5a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012cd6:	4828      	ldr	r0, [pc, #160]	; (8012d78 <mem_free+0x110>)
 8012cd8:	f00c ff8e 	bl	801fbf8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	791b      	ldrb	r3, [r3, #4]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d110      	bne.n	8012d06 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012ce4:	4b1e      	ldr	r3, [pc, #120]	; (8012d60 <mem_free+0xf8>)
 8012ce6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8012cea:	4924      	ldr	r1, [pc, #144]	; (8012d7c <mem_free+0x114>)
 8012cec:	481e      	ldr	r0, [pc, #120]	; (8012d68 <mem_free+0x100>)
 8012cee:	f00e fb63 	bl	80213b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012cf2:	4821      	ldr	r0, [pc, #132]	; (8012d78 <mem_free+0x110>)
 8012cf4:	f00c ff8f 	bl	801fc16 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012cf8:	f00c ffc0 	bl	801fc7c <sys_arch_protect>
 8012cfc:	6178      	str	r0, [r7, #20]
 8012cfe:	6978      	ldr	r0, [r7, #20]
 8012d00:	f00c ffca 	bl	801fc98 <sys_arch_unprotect>
    return;
 8012d04:	e029      	b.n	8012d5a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8012d06:	69f8      	ldr	r0, [r7, #28]
 8012d08:	f7ff ff72 	bl	8012bf0 <mem_link_valid>
 8012d0c:	4603      	mov	r3, r0
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d110      	bne.n	8012d34 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8012d12:	4b13      	ldr	r3, [pc, #76]	; (8012d60 <mem_free+0xf8>)
 8012d14:	f240 2295 	movw	r2, #661	; 0x295
 8012d18:	4919      	ldr	r1, [pc, #100]	; (8012d80 <mem_free+0x118>)
 8012d1a:	4813      	ldr	r0, [pc, #76]	; (8012d68 <mem_free+0x100>)
 8012d1c:	f00e fb4c 	bl	80213b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8012d20:	4815      	ldr	r0, [pc, #84]	; (8012d78 <mem_free+0x110>)
 8012d22:	f00c ff78 	bl	801fc16 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012d26:	f00c ffa9 	bl	801fc7c <sys_arch_protect>
 8012d2a:	61b8      	str	r0, [r7, #24]
 8012d2c:	69b8      	ldr	r0, [r7, #24]
 8012d2e:	f00c ffb3 	bl	801fc98 <sys_arch_unprotect>
    return;
 8012d32:	e012      	b.n	8012d5a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8012d34:	69fb      	ldr	r3, [r7, #28]
 8012d36:	2200      	movs	r2, #0
 8012d38:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8012d3a:	4b12      	ldr	r3, [pc, #72]	; (8012d84 <mem_free+0x11c>)
 8012d3c:	681b      	ldr	r3, [r3, #0]
 8012d3e:	69fa      	ldr	r2, [r7, #28]
 8012d40:	429a      	cmp	r2, r3
 8012d42:	d202      	bcs.n	8012d4a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8012d44:	4a0f      	ldr	r2, [pc, #60]	; (8012d84 <mem_free+0x11c>)
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8012d4a:	69f8      	ldr	r0, [r7, #28]
 8012d4c:	f7ff fe5c 	bl	8012a08 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012d50:	4809      	ldr	r0, [pc, #36]	; (8012d78 <mem_free+0x110>)
 8012d52:	f00c ff60 	bl	801fc16 <sys_mutex_unlock>
 8012d56:	e000      	b.n	8012d5a <mem_free+0xf2>
    return;
 8012d58:	bf00      	nop
}
 8012d5a:	3720      	adds	r7, #32
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	080240c8 	.word	0x080240c8
 8012d64:	080241b8 	.word	0x080241b8
 8012d68:	08024110 	.word	0x08024110
 8012d6c:	2000f190 	.word	0x2000f190
 8012d70:	2000f194 	.word	0x2000f194
 8012d74:	080241dc 	.word	0x080241dc
 8012d78:	2000f198 	.word	0x2000f198
 8012d7c:	080241f8 	.word	0x080241f8
 8012d80:	08024220 	.word	0x08024220
 8012d84:	2000f19c 	.word	0x2000f19c

08012d88 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b088      	sub	sp, #32
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	460b      	mov	r3, r1
 8012d92:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012d94:	887b      	ldrh	r3, [r7, #2]
 8012d96:	3303      	adds	r3, #3
 8012d98:	b29b      	uxth	r3, r3
 8012d9a:	f023 0303 	bic.w	r3, r3, #3
 8012d9e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8012da0:	8bfb      	ldrh	r3, [r7, #30]
 8012da2:	2b0b      	cmp	r3, #11
 8012da4:	d801      	bhi.n	8012daa <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012da6:	230c      	movs	r3, #12
 8012da8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012daa:	8bfb      	ldrh	r3, [r7, #30]
 8012dac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012db0:	d803      	bhi.n	8012dba <mem_trim+0x32>
 8012db2:	8bfa      	ldrh	r2, [r7, #30]
 8012db4:	887b      	ldrh	r3, [r7, #2]
 8012db6:	429a      	cmp	r2, r3
 8012db8:	d201      	bcs.n	8012dbe <mem_trim+0x36>
    return NULL;
 8012dba:	2300      	movs	r3, #0
 8012dbc:	e0d8      	b.n	8012f70 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8012dbe:	4b6e      	ldr	r3, [pc, #440]	; (8012f78 <mem_trim+0x1f0>)
 8012dc0:	681b      	ldr	r3, [r3, #0]
 8012dc2:	687a      	ldr	r2, [r7, #4]
 8012dc4:	429a      	cmp	r2, r3
 8012dc6:	d304      	bcc.n	8012dd2 <mem_trim+0x4a>
 8012dc8:	4b6c      	ldr	r3, [pc, #432]	; (8012f7c <mem_trim+0x1f4>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	687a      	ldr	r2, [r7, #4]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d306      	bcc.n	8012de0 <mem_trim+0x58>
 8012dd2:	4b6b      	ldr	r3, [pc, #428]	; (8012f80 <mem_trim+0x1f8>)
 8012dd4:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012dd8:	496a      	ldr	r1, [pc, #424]	; (8012f84 <mem_trim+0x1fc>)
 8012dda:	486b      	ldr	r0, [pc, #428]	; (8012f88 <mem_trim+0x200>)
 8012ddc:	f00e faec 	bl	80213b8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8012de0:	4b65      	ldr	r3, [pc, #404]	; (8012f78 <mem_trim+0x1f0>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	687a      	ldr	r2, [r7, #4]
 8012de6:	429a      	cmp	r2, r3
 8012de8:	d304      	bcc.n	8012df4 <mem_trim+0x6c>
 8012dea:	4b64      	ldr	r3, [pc, #400]	; (8012f7c <mem_trim+0x1f4>)
 8012dec:	681b      	ldr	r3, [r3, #0]
 8012dee:	687a      	ldr	r2, [r7, #4]
 8012df0:	429a      	cmp	r2, r3
 8012df2:	d307      	bcc.n	8012e04 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012df4:	f00c ff42 	bl	801fc7c <sys_arch_protect>
 8012df8:	60b8      	str	r0, [r7, #8]
 8012dfa:	68b8      	ldr	r0, [r7, #8]
 8012dfc:	f00c ff4c 	bl	801fc98 <sys_arch_unprotect>
    return rmem;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	e0b5      	b.n	8012f70 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	3b08      	subs	r3, #8
 8012e08:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8012e0a:	69b8      	ldr	r0, [r7, #24]
 8012e0c:	f7ff fdea 	bl	80129e4 <mem_to_ptr>
 8012e10:	4603      	mov	r3, r0
 8012e12:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8012e14:	69bb      	ldr	r3, [r7, #24]
 8012e16:	881a      	ldrh	r2, [r3, #0]
 8012e18:	8afb      	ldrh	r3, [r7, #22]
 8012e1a:	1ad3      	subs	r3, r2, r3
 8012e1c:	b29b      	uxth	r3, r3
 8012e1e:	3b08      	subs	r3, #8
 8012e20:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8012e22:	8bfa      	ldrh	r2, [r7, #30]
 8012e24:	8abb      	ldrh	r3, [r7, #20]
 8012e26:	429a      	cmp	r2, r3
 8012e28:	d906      	bls.n	8012e38 <mem_trim+0xb0>
 8012e2a:	4b55      	ldr	r3, [pc, #340]	; (8012f80 <mem_trim+0x1f8>)
 8012e2c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8012e30:	4956      	ldr	r1, [pc, #344]	; (8012f8c <mem_trim+0x204>)
 8012e32:	4855      	ldr	r0, [pc, #340]	; (8012f88 <mem_trim+0x200>)
 8012e34:	f00e fac0 	bl	80213b8 <iprintf>
  if (newsize > size) {
 8012e38:	8bfa      	ldrh	r2, [r7, #30]
 8012e3a:	8abb      	ldrh	r3, [r7, #20]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d901      	bls.n	8012e44 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8012e40:	2300      	movs	r3, #0
 8012e42:	e095      	b.n	8012f70 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8012e44:	8bfa      	ldrh	r2, [r7, #30]
 8012e46:	8abb      	ldrh	r3, [r7, #20]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d101      	bne.n	8012e50 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	e08f      	b.n	8012f70 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012e50:	484f      	ldr	r0, [pc, #316]	; (8012f90 <mem_trim+0x208>)
 8012e52:	f00c fed1 	bl	801fbf8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012e56:	69bb      	ldr	r3, [r7, #24]
 8012e58:	881b      	ldrh	r3, [r3, #0]
 8012e5a:	4618      	mov	r0, r3
 8012e5c:	f7ff fdb0 	bl	80129c0 <ptr_to_mem>
 8012e60:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	791b      	ldrb	r3, [r3, #4]
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d13f      	bne.n	8012eea <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012e6a:	69bb      	ldr	r3, [r7, #24]
 8012e6c:	881b      	ldrh	r3, [r3, #0]
 8012e6e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012e72:	d106      	bne.n	8012e82 <mem_trim+0xfa>
 8012e74:	4b42      	ldr	r3, [pc, #264]	; (8012f80 <mem_trim+0x1f8>)
 8012e76:	f240 22f5 	movw	r2, #757	; 0x2f5
 8012e7a:	4946      	ldr	r1, [pc, #280]	; (8012f94 <mem_trim+0x20c>)
 8012e7c:	4842      	ldr	r0, [pc, #264]	; (8012f88 <mem_trim+0x200>)
 8012e7e:	f00e fa9b 	bl	80213b8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012e88:	8afa      	ldrh	r2, [r7, #22]
 8012e8a:	8bfb      	ldrh	r3, [r7, #30]
 8012e8c:	4413      	add	r3, r2
 8012e8e:	b29b      	uxth	r3, r3
 8012e90:	3308      	adds	r3, #8
 8012e92:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012e94:	4b40      	ldr	r3, [pc, #256]	; (8012f98 <mem_trim+0x210>)
 8012e96:	681b      	ldr	r3, [r3, #0]
 8012e98:	693a      	ldr	r2, [r7, #16]
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d106      	bne.n	8012eac <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012e9e:	89fb      	ldrh	r3, [r7, #14]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	f7ff fd8d 	bl	80129c0 <ptr_to_mem>
 8012ea6:	4603      	mov	r3, r0
 8012ea8:	4a3b      	ldr	r2, [pc, #236]	; (8012f98 <mem_trim+0x210>)
 8012eaa:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012eac:	89fb      	ldrh	r3, [r7, #14]
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7ff fd86 	bl	80129c0 <ptr_to_mem>
 8012eb4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012eb6:	693b      	ldr	r3, [r7, #16]
 8012eb8:	2200      	movs	r2, #0
 8012eba:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012ebc:	693b      	ldr	r3, [r7, #16]
 8012ebe:	89ba      	ldrh	r2, [r7, #12]
 8012ec0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012ec2:	693b      	ldr	r3, [r7, #16]
 8012ec4:	8afa      	ldrh	r2, [r7, #22]
 8012ec6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012ec8:	69bb      	ldr	r3, [r7, #24]
 8012eca:	89fa      	ldrh	r2, [r7, #14]
 8012ecc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	881b      	ldrh	r3, [r3, #0]
 8012ed2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012ed6:	d047      	beq.n	8012f68 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012ed8:	693b      	ldr	r3, [r7, #16]
 8012eda:	881b      	ldrh	r3, [r3, #0]
 8012edc:	4618      	mov	r0, r3
 8012ede:	f7ff fd6f 	bl	80129c0 <ptr_to_mem>
 8012ee2:	4602      	mov	r2, r0
 8012ee4:	89fb      	ldrh	r3, [r7, #14]
 8012ee6:	8053      	strh	r3, [r2, #2]
 8012ee8:	e03e      	b.n	8012f68 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012eea:	8bfb      	ldrh	r3, [r7, #30]
 8012eec:	f103 0214 	add.w	r2, r3, #20
 8012ef0:	8abb      	ldrh	r3, [r7, #20]
 8012ef2:	429a      	cmp	r2, r3
 8012ef4:	d838      	bhi.n	8012f68 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012ef6:	8afa      	ldrh	r2, [r7, #22]
 8012ef8:	8bfb      	ldrh	r3, [r7, #30]
 8012efa:	4413      	add	r3, r2
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	3308      	adds	r3, #8
 8012f00:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012f02:	69bb      	ldr	r3, [r7, #24]
 8012f04:	881b      	ldrh	r3, [r3, #0]
 8012f06:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012f0a:	d106      	bne.n	8012f1a <mem_trim+0x192>
 8012f0c:	4b1c      	ldr	r3, [pc, #112]	; (8012f80 <mem_trim+0x1f8>)
 8012f0e:	f240 3216 	movw	r2, #790	; 0x316
 8012f12:	4920      	ldr	r1, [pc, #128]	; (8012f94 <mem_trim+0x20c>)
 8012f14:	481c      	ldr	r0, [pc, #112]	; (8012f88 <mem_trim+0x200>)
 8012f16:	f00e fa4f 	bl	80213b8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012f1a:	89fb      	ldrh	r3, [r7, #14]
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7ff fd4f 	bl	80129c0 <ptr_to_mem>
 8012f22:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012f24:	4b1c      	ldr	r3, [pc, #112]	; (8012f98 <mem_trim+0x210>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	693a      	ldr	r2, [r7, #16]
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d202      	bcs.n	8012f34 <mem_trim+0x1ac>
      lfree = mem2;
 8012f2e:	4a1a      	ldr	r2, [pc, #104]	; (8012f98 <mem_trim+0x210>)
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012f34:	693b      	ldr	r3, [r7, #16]
 8012f36:	2200      	movs	r2, #0
 8012f38:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012f3a:	69bb      	ldr	r3, [r7, #24]
 8012f3c:	881a      	ldrh	r2, [r3, #0]
 8012f3e:	693b      	ldr	r3, [r7, #16]
 8012f40:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	8afa      	ldrh	r2, [r7, #22]
 8012f46:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012f48:	69bb      	ldr	r3, [r7, #24]
 8012f4a:	89fa      	ldrh	r2, [r7, #14]
 8012f4c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012f4e:	693b      	ldr	r3, [r7, #16]
 8012f50:	881b      	ldrh	r3, [r3, #0]
 8012f52:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012f56:	d007      	beq.n	8012f68 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012f58:	693b      	ldr	r3, [r7, #16]
 8012f5a:	881b      	ldrh	r3, [r3, #0]
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	f7ff fd2f 	bl	80129c0 <ptr_to_mem>
 8012f62:	4602      	mov	r2, r0
 8012f64:	89fb      	ldrh	r3, [r7, #14]
 8012f66:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012f68:	4809      	ldr	r0, [pc, #36]	; (8012f90 <mem_trim+0x208>)
 8012f6a:	f00c fe54 	bl	801fc16 <sys_mutex_unlock>
  return rmem;
 8012f6e:	687b      	ldr	r3, [r7, #4]
}
 8012f70:	4618      	mov	r0, r3
 8012f72:	3720      	adds	r7, #32
 8012f74:	46bd      	mov	sp, r7
 8012f76:	bd80      	pop	{r7, pc}
 8012f78:	2000f190 	.word	0x2000f190
 8012f7c:	2000f194 	.word	0x2000f194
 8012f80:	080240c8 	.word	0x080240c8
 8012f84:	08024254 	.word	0x08024254
 8012f88:	08024110 	.word	0x08024110
 8012f8c:	0802426c 	.word	0x0802426c
 8012f90:	2000f198 	.word	0x2000f198
 8012f94:	0802428c 	.word	0x0802428c
 8012f98:	2000f19c 	.word	0x2000f19c

08012f9c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b088      	sub	sp, #32
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012fa6:	88fb      	ldrh	r3, [r7, #6]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d101      	bne.n	8012fb0 <mem_malloc+0x14>
    return NULL;
 8012fac:	2300      	movs	r3, #0
 8012fae:	e0e2      	b.n	8013176 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012fb0:	88fb      	ldrh	r3, [r7, #6]
 8012fb2:	3303      	adds	r3, #3
 8012fb4:	b29b      	uxth	r3, r3
 8012fb6:	f023 0303 	bic.w	r3, r3, #3
 8012fba:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012fbc:	8bbb      	ldrh	r3, [r7, #28]
 8012fbe:	2b0b      	cmp	r3, #11
 8012fc0:	d801      	bhi.n	8012fc6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012fc2:	230c      	movs	r3, #12
 8012fc4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012fc6:	8bbb      	ldrh	r3, [r7, #28]
 8012fc8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012fcc:	d803      	bhi.n	8012fd6 <mem_malloc+0x3a>
 8012fce:	8bba      	ldrh	r2, [r7, #28]
 8012fd0:	88fb      	ldrh	r3, [r7, #6]
 8012fd2:	429a      	cmp	r2, r3
 8012fd4:	d201      	bcs.n	8012fda <mem_malloc+0x3e>
    return NULL;
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	e0cd      	b.n	8013176 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012fda:	4869      	ldr	r0, [pc, #420]	; (8013180 <mem_malloc+0x1e4>)
 8012fdc:	f00c fe0c 	bl	801fbf8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012fe0:	4b68      	ldr	r3, [pc, #416]	; (8013184 <mem_malloc+0x1e8>)
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f7ff fcfd 	bl	80129e4 <mem_to_ptr>
 8012fea:	4603      	mov	r3, r0
 8012fec:	83fb      	strh	r3, [r7, #30]
 8012fee:	e0b7      	b.n	8013160 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012ff0:	8bfb      	ldrh	r3, [r7, #30]
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7ff fce4 	bl	80129c0 <ptr_to_mem>
 8012ff8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012ffa:	697b      	ldr	r3, [r7, #20]
 8012ffc:	791b      	ldrb	r3, [r3, #4]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	f040 80a7 	bne.w	8013152 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	881b      	ldrh	r3, [r3, #0]
 8013008:	461a      	mov	r2, r3
 801300a:	8bfb      	ldrh	r3, [r7, #30]
 801300c:	1ad3      	subs	r3, r2, r3
 801300e:	f1a3 0208 	sub.w	r2, r3, #8
 8013012:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013014:	429a      	cmp	r2, r3
 8013016:	f0c0 809c 	bcc.w	8013152 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801301a:	697b      	ldr	r3, [r7, #20]
 801301c:	881b      	ldrh	r3, [r3, #0]
 801301e:	461a      	mov	r2, r3
 8013020:	8bfb      	ldrh	r3, [r7, #30]
 8013022:	1ad3      	subs	r3, r2, r3
 8013024:	f1a3 0208 	sub.w	r2, r3, #8
 8013028:	8bbb      	ldrh	r3, [r7, #28]
 801302a:	3314      	adds	r3, #20
 801302c:	429a      	cmp	r2, r3
 801302e:	d333      	bcc.n	8013098 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013030:	8bfa      	ldrh	r2, [r7, #30]
 8013032:	8bbb      	ldrh	r3, [r7, #28]
 8013034:	4413      	add	r3, r2
 8013036:	b29b      	uxth	r3, r3
 8013038:	3308      	adds	r3, #8
 801303a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801303c:	8a7b      	ldrh	r3, [r7, #18]
 801303e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013042:	d106      	bne.n	8013052 <mem_malloc+0xb6>
 8013044:	4b50      	ldr	r3, [pc, #320]	; (8013188 <mem_malloc+0x1ec>)
 8013046:	f240 3287 	movw	r2, #903	; 0x387
 801304a:	4950      	ldr	r1, [pc, #320]	; (801318c <mem_malloc+0x1f0>)
 801304c:	4850      	ldr	r0, [pc, #320]	; (8013190 <mem_malloc+0x1f4>)
 801304e:	f00e f9b3 	bl	80213b8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013052:	8a7b      	ldrh	r3, [r7, #18]
 8013054:	4618      	mov	r0, r3
 8013056:	f7ff fcb3 	bl	80129c0 <ptr_to_mem>
 801305a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2200      	movs	r2, #0
 8013060:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013062:	697b      	ldr	r3, [r7, #20]
 8013064:	881a      	ldrh	r2, [r3, #0]
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	8bfa      	ldrh	r2, [r7, #30]
 801306e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013070:	697b      	ldr	r3, [r7, #20]
 8013072:	8a7a      	ldrh	r2, [r7, #18]
 8013074:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013076:	697b      	ldr	r3, [r7, #20]
 8013078:	2201      	movs	r2, #1
 801307a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	881b      	ldrh	r3, [r3, #0]
 8013080:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013084:	d00b      	beq.n	801309e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	881b      	ldrh	r3, [r3, #0]
 801308a:	4618      	mov	r0, r3
 801308c:	f7ff fc98 	bl	80129c0 <ptr_to_mem>
 8013090:	4602      	mov	r2, r0
 8013092:	8a7b      	ldrh	r3, [r7, #18]
 8013094:	8053      	strh	r3, [r2, #2]
 8013096:	e002      	b.n	801309e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	2201      	movs	r2, #1
 801309c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801309e:	4b39      	ldr	r3, [pc, #228]	; (8013184 <mem_malloc+0x1e8>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	697a      	ldr	r2, [r7, #20]
 80130a4:	429a      	cmp	r2, r3
 80130a6:	d127      	bne.n	80130f8 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80130a8:	4b36      	ldr	r3, [pc, #216]	; (8013184 <mem_malloc+0x1e8>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80130ae:	e005      	b.n	80130bc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80130b0:	69bb      	ldr	r3, [r7, #24]
 80130b2:	881b      	ldrh	r3, [r3, #0]
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7ff fc83 	bl	80129c0 <ptr_to_mem>
 80130ba:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80130bc:	69bb      	ldr	r3, [r7, #24]
 80130be:	791b      	ldrb	r3, [r3, #4]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d004      	beq.n	80130ce <mem_malloc+0x132>
 80130c4:	4b33      	ldr	r3, [pc, #204]	; (8013194 <mem_malloc+0x1f8>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	69ba      	ldr	r2, [r7, #24]
 80130ca:	429a      	cmp	r2, r3
 80130cc:	d1f0      	bne.n	80130b0 <mem_malloc+0x114>
          }
          lfree = cur;
 80130ce:	4a2d      	ldr	r2, [pc, #180]	; (8013184 <mem_malloc+0x1e8>)
 80130d0:	69bb      	ldr	r3, [r7, #24]
 80130d2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80130d4:	4b2b      	ldr	r3, [pc, #172]	; (8013184 <mem_malloc+0x1e8>)
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	4b2e      	ldr	r3, [pc, #184]	; (8013194 <mem_malloc+0x1f8>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	429a      	cmp	r2, r3
 80130de:	d00b      	beq.n	80130f8 <mem_malloc+0x15c>
 80130e0:	4b28      	ldr	r3, [pc, #160]	; (8013184 <mem_malloc+0x1e8>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	791b      	ldrb	r3, [r3, #4]
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d006      	beq.n	80130f8 <mem_malloc+0x15c>
 80130ea:	4b27      	ldr	r3, [pc, #156]	; (8013188 <mem_malloc+0x1ec>)
 80130ec:	f240 32b5 	movw	r2, #949	; 0x3b5
 80130f0:	4929      	ldr	r1, [pc, #164]	; (8013198 <mem_malloc+0x1fc>)
 80130f2:	4827      	ldr	r0, [pc, #156]	; (8013190 <mem_malloc+0x1f4>)
 80130f4:	f00e f960 	bl	80213b8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80130f8:	4821      	ldr	r0, [pc, #132]	; (8013180 <mem_malloc+0x1e4>)
 80130fa:	f00c fd8c 	bl	801fc16 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80130fe:	8bba      	ldrh	r2, [r7, #28]
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	4413      	add	r3, r2
 8013104:	3308      	adds	r3, #8
 8013106:	4a23      	ldr	r2, [pc, #140]	; (8013194 <mem_malloc+0x1f8>)
 8013108:	6812      	ldr	r2, [r2, #0]
 801310a:	4293      	cmp	r3, r2
 801310c:	d906      	bls.n	801311c <mem_malloc+0x180>
 801310e:	4b1e      	ldr	r3, [pc, #120]	; (8013188 <mem_malloc+0x1ec>)
 8013110:	f240 32b9 	movw	r2, #953	; 0x3b9
 8013114:	4921      	ldr	r1, [pc, #132]	; (801319c <mem_malloc+0x200>)
 8013116:	481e      	ldr	r0, [pc, #120]	; (8013190 <mem_malloc+0x1f4>)
 8013118:	f00e f94e 	bl	80213b8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	f003 0303 	and.w	r3, r3, #3
 8013122:	2b00      	cmp	r3, #0
 8013124:	d006      	beq.n	8013134 <mem_malloc+0x198>
 8013126:	4b18      	ldr	r3, [pc, #96]	; (8013188 <mem_malloc+0x1ec>)
 8013128:	f240 32bb 	movw	r2, #955	; 0x3bb
 801312c:	491c      	ldr	r1, [pc, #112]	; (80131a0 <mem_malloc+0x204>)
 801312e:	4818      	ldr	r0, [pc, #96]	; (8013190 <mem_malloc+0x1f4>)
 8013130:	f00e f942 	bl	80213b8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013134:	697b      	ldr	r3, [r7, #20]
 8013136:	f003 0303 	and.w	r3, r3, #3
 801313a:	2b00      	cmp	r3, #0
 801313c:	d006      	beq.n	801314c <mem_malloc+0x1b0>
 801313e:	4b12      	ldr	r3, [pc, #72]	; (8013188 <mem_malloc+0x1ec>)
 8013140:	f240 32bd 	movw	r2, #957	; 0x3bd
 8013144:	4917      	ldr	r1, [pc, #92]	; (80131a4 <mem_malloc+0x208>)
 8013146:	4812      	ldr	r0, [pc, #72]	; (8013190 <mem_malloc+0x1f4>)
 8013148:	f00e f936 	bl	80213b8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801314c:	697b      	ldr	r3, [r7, #20]
 801314e:	3308      	adds	r3, #8
 8013150:	e011      	b.n	8013176 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013152:	8bfb      	ldrh	r3, [r7, #30]
 8013154:	4618      	mov	r0, r3
 8013156:	f7ff fc33 	bl	80129c0 <ptr_to_mem>
 801315a:	4603      	mov	r3, r0
 801315c:	881b      	ldrh	r3, [r3, #0]
 801315e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013160:	8bfa      	ldrh	r2, [r7, #30]
 8013162:	8bbb      	ldrh	r3, [r7, #28]
 8013164:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8013168:	429a      	cmp	r2, r3
 801316a:	f4ff af41 	bcc.w	8012ff0 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801316e:	4804      	ldr	r0, [pc, #16]	; (8013180 <mem_malloc+0x1e4>)
 8013170:	f00c fd51 	bl	801fc16 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013174:	2300      	movs	r3, #0
}
 8013176:	4618      	mov	r0, r3
 8013178:	3720      	adds	r7, #32
 801317a:	46bd      	mov	sp, r7
 801317c:	bd80      	pop	{r7, pc}
 801317e:	bf00      	nop
 8013180:	2000f198 	.word	0x2000f198
 8013184:	2000f19c 	.word	0x2000f19c
 8013188:	080240c8 	.word	0x080240c8
 801318c:	0802428c 	.word	0x0802428c
 8013190:	08024110 	.word	0x08024110
 8013194:	2000f194 	.word	0x2000f194
 8013198:	080242a0 	.word	0x080242a0
 801319c:	080242bc 	.word	0x080242bc
 80131a0:	080242ec 	.word	0x080242ec
 80131a4:	0802431c 	.word	0x0802431c

080131a8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80131a8:	b480      	push	{r7}
 80131aa:	b085      	sub	sp, #20
 80131ac:	af00      	add	r7, sp, #0
 80131ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	689b      	ldr	r3, [r3, #8]
 80131b4:	2200      	movs	r2, #0
 80131b6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	685b      	ldr	r3, [r3, #4]
 80131bc:	3303      	adds	r3, #3
 80131be:	f023 0303 	bic.w	r3, r3, #3
 80131c2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80131c4:	2300      	movs	r3, #0
 80131c6:	60fb      	str	r3, [r7, #12]
 80131c8:	e011      	b.n	80131ee <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80131ca:	687b      	ldr	r3, [r7, #4]
 80131cc:	689b      	ldr	r3, [r3, #8]
 80131ce:	681a      	ldr	r2, [r3, #0]
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	689b      	ldr	r3, [r3, #8]
 80131d8:	68ba      	ldr	r2, [r7, #8]
 80131da:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	881b      	ldrh	r3, [r3, #0]
 80131e0:	461a      	mov	r2, r3
 80131e2:	68bb      	ldr	r3, [r7, #8]
 80131e4:	4413      	add	r3, r2
 80131e6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	3301      	adds	r3, #1
 80131ec:	60fb      	str	r3, [r7, #12]
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	885b      	ldrh	r3, [r3, #2]
 80131f2:	461a      	mov	r2, r3
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	4293      	cmp	r3, r2
 80131f8:	dbe7      	blt.n	80131ca <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80131fa:	bf00      	nop
 80131fc:	bf00      	nop
 80131fe:	3714      	adds	r7, #20
 8013200:	46bd      	mov	sp, r7
 8013202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013206:	4770      	bx	lr

08013208 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013208:	b580      	push	{r7, lr}
 801320a:	b082      	sub	sp, #8
 801320c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801320e:	2300      	movs	r3, #0
 8013210:	80fb      	strh	r3, [r7, #6]
 8013212:	e009      	b.n	8013228 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013214:	88fb      	ldrh	r3, [r7, #6]
 8013216:	4a08      	ldr	r2, [pc, #32]	; (8013238 <memp_init+0x30>)
 8013218:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801321c:	4618      	mov	r0, r3
 801321e:	f7ff ffc3 	bl	80131a8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013222:	88fb      	ldrh	r3, [r7, #6]
 8013224:	3301      	adds	r3, #1
 8013226:	80fb      	strh	r3, [r7, #6]
 8013228:	88fb      	ldrh	r3, [r7, #6]
 801322a:	2b0c      	cmp	r3, #12
 801322c:	d9f2      	bls.n	8013214 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801322e:	bf00      	nop
 8013230:	bf00      	nop
 8013232:	3708      	adds	r7, #8
 8013234:	46bd      	mov	sp, r7
 8013236:	bd80      	pop	{r7, pc}
 8013238:	08026fec 	.word	0x08026fec

0801323c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801323c:	b580      	push	{r7, lr}
 801323e:	b084      	sub	sp, #16
 8013240:	af00      	add	r7, sp, #0
 8013242:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013244:	f00c fd1a 	bl	801fc7c <sys_arch_protect>
 8013248:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	689b      	ldr	r3, [r3, #8]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013252:	68bb      	ldr	r3, [r7, #8]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d015      	beq.n	8013284 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	689b      	ldr	r3, [r3, #8]
 801325c:	68ba      	ldr	r2, [r7, #8]
 801325e:	6812      	ldr	r2, [r2, #0]
 8013260:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	f003 0303 	and.w	r3, r3, #3
 8013268:	2b00      	cmp	r3, #0
 801326a:	d006      	beq.n	801327a <do_memp_malloc_pool+0x3e>
 801326c:	4b09      	ldr	r3, [pc, #36]	; (8013294 <do_memp_malloc_pool+0x58>)
 801326e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013272:	4909      	ldr	r1, [pc, #36]	; (8013298 <do_memp_malloc_pool+0x5c>)
 8013274:	4809      	ldr	r0, [pc, #36]	; (801329c <do_memp_malloc_pool+0x60>)
 8013276:	f00e f89f 	bl	80213b8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801327a:	68f8      	ldr	r0, [r7, #12]
 801327c:	f00c fd0c 	bl	801fc98 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013280:	68bb      	ldr	r3, [r7, #8]
 8013282:	e003      	b.n	801328c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013284:	68f8      	ldr	r0, [r7, #12]
 8013286:	f00c fd07 	bl	801fc98 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801328a:	2300      	movs	r3, #0
}
 801328c:	4618      	mov	r0, r3
 801328e:	3710      	adds	r7, #16
 8013290:	46bd      	mov	sp, r7
 8013292:	bd80      	pop	{r7, pc}
 8013294:	08024340 	.word	0x08024340
 8013298:	08024370 	.word	0x08024370
 801329c:	08024394 	.word	0x08024394

080132a0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b082      	sub	sp, #8
 80132a4:	af00      	add	r7, sp, #0
 80132a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d106      	bne.n	80132bc <memp_malloc_pool+0x1c>
 80132ae:	4b0a      	ldr	r3, [pc, #40]	; (80132d8 <memp_malloc_pool+0x38>)
 80132b0:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80132b4:	4909      	ldr	r1, [pc, #36]	; (80132dc <memp_malloc_pool+0x3c>)
 80132b6:	480a      	ldr	r0, [pc, #40]	; (80132e0 <memp_malloc_pool+0x40>)
 80132b8:	f00e f87e 	bl	80213b8 <iprintf>
  if (desc == NULL) {
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d101      	bne.n	80132c6 <memp_malloc_pool+0x26>
    return NULL;
 80132c2:	2300      	movs	r3, #0
 80132c4:	e003      	b.n	80132ce <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80132c6:	6878      	ldr	r0, [r7, #4]
 80132c8:	f7ff ffb8 	bl	801323c <do_memp_malloc_pool>
 80132cc:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3708      	adds	r7, #8
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
 80132d6:	bf00      	nop
 80132d8:	08024340 	.word	0x08024340
 80132dc:	080243bc 	.word	0x080243bc
 80132e0:	08024394 	.word	0x08024394

080132e4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80132e4:	b580      	push	{r7, lr}
 80132e6:	b084      	sub	sp, #16
 80132e8:	af00      	add	r7, sp, #0
 80132ea:	4603      	mov	r3, r0
 80132ec:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80132ee:	79fb      	ldrb	r3, [r7, #7]
 80132f0:	2b0c      	cmp	r3, #12
 80132f2:	d908      	bls.n	8013306 <memp_malloc+0x22>
 80132f4:	4b0a      	ldr	r3, [pc, #40]	; (8013320 <memp_malloc+0x3c>)
 80132f6:	f240 1257 	movw	r2, #343	; 0x157
 80132fa:	490a      	ldr	r1, [pc, #40]	; (8013324 <memp_malloc+0x40>)
 80132fc:	480a      	ldr	r0, [pc, #40]	; (8013328 <memp_malloc+0x44>)
 80132fe:	f00e f85b 	bl	80213b8 <iprintf>
 8013302:	2300      	movs	r3, #0
 8013304:	e008      	b.n	8013318 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8013306:	79fb      	ldrb	r3, [r7, #7]
 8013308:	4a08      	ldr	r2, [pc, #32]	; (801332c <memp_malloc+0x48>)
 801330a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801330e:	4618      	mov	r0, r3
 8013310:	f7ff ff94 	bl	801323c <do_memp_malloc_pool>
 8013314:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8013316:	68fb      	ldr	r3, [r7, #12]
}
 8013318:	4618      	mov	r0, r3
 801331a:	3710      	adds	r7, #16
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}
 8013320:	08024340 	.word	0x08024340
 8013324:	080243d0 	.word	0x080243d0
 8013328:	08024394 	.word	0x08024394
 801332c:	08026fec 	.word	0x08026fec

08013330 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b084      	sub	sp, #16
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	f003 0303 	and.w	r3, r3, #3
 8013340:	2b00      	cmp	r3, #0
 8013342:	d006      	beq.n	8013352 <do_memp_free_pool+0x22>
 8013344:	4b0d      	ldr	r3, [pc, #52]	; (801337c <do_memp_free_pool+0x4c>)
 8013346:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801334a:	490d      	ldr	r1, [pc, #52]	; (8013380 <do_memp_free_pool+0x50>)
 801334c:	480d      	ldr	r0, [pc, #52]	; (8013384 <do_memp_free_pool+0x54>)
 801334e:	f00e f833 	bl	80213b8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8013352:	683b      	ldr	r3, [r7, #0]
 8013354:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013356:	f00c fc91 	bl	801fc7c <sys_arch_protect>
 801335a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	689b      	ldr	r3, [r3, #8]
 8013360:	681a      	ldr	r2, [r3, #0]
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	689b      	ldr	r3, [r3, #8]
 801336a:	68fa      	ldr	r2, [r7, #12]
 801336c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801336e:	68b8      	ldr	r0, [r7, #8]
 8013370:	f00c fc92 	bl	801fc98 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013374:	bf00      	nop
 8013376:	3710      	adds	r7, #16
 8013378:	46bd      	mov	sp, r7
 801337a:	bd80      	pop	{r7, pc}
 801337c:	08024340 	.word	0x08024340
 8013380:	080243f0 	.word	0x080243f0
 8013384:	08024394 	.word	0x08024394

08013388 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	b082      	sub	sp, #8
 801338c:	af00      	add	r7, sp, #0
 801338e:	6078      	str	r0, [r7, #4]
 8013390:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	2b00      	cmp	r3, #0
 8013396:	d106      	bne.n	80133a6 <memp_free_pool+0x1e>
 8013398:	4b0a      	ldr	r3, [pc, #40]	; (80133c4 <memp_free_pool+0x3c>)
 801339a:	f240 1295 	movw	r2, #405	; 0x195
 801339e:	490a      	ldr	r1, [pc, #40]	; (80133c8 <memp_free_pool+0x40>)
 80133a0:	480a      	ldr	r0, [pc, #40]	; (80133cc <memp_free_pool+0x44>)
 80133a2:	f00e f809 	bl	80213b8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d007      	beq.n	80133bc <memp_free_pool+0x34>
 80133ac:	683b      	ldr	r3, [r7, #0]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d004      	beq.n	80133bc <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80133b2:	6839      	ldr	r1, [r7, #0]
 80133b4:	6878      	ldr	r0, [r7, #4]
 80133b6:	f7ff ffbb 	bl	8013330 <do_memp_free_pool>
 80133ba:	e000      	b.n	80133be <memp_free_pool+0x36>
    return;
 80133bc:	bf00      	nop
}
 80133be:	3708      	adds	r7, #8
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	08024340 	.word	0x08024340
 80133c8:	080243bc 	.word	0x080243bc
 80133cc:	08024394 	.word	0x08024394

080133d0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	4603      	mov	r3, r0
 80133d8:	6039      	str	r1, [r7, #0]
 80133da:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80133dc:	79fb      	ldrb	r3, [r7, #7]
 80133de:	2b0c      	cmp	r3, #12
 80133e0:	d907      	bls.n	80133f2 <memp_free+0x22>
 80133e2:	4b0c      	ldr	r3, [pc, #48]	; (8013414 <memp_free+0x44>)
 80133e4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80133e8:	490b      	ldr	r1, [pc, #44]	; (8013418 <memp_free+0x48>)
 80133ea:	480c      	ldr	r0, [pc, #48]	; (801341c <memp_free+0x4c>)
 80133ec:	f00d ffe4 	bl	80213b8 <iprintf>
 80133f0:	e00c      	b.n	801340c <memp_free+0x3c>

  if (mem == NULL) {
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d008      	beq.n	801340a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80133f8:	79fb      	ldrb	r3, [r7, #7]
 80133fa:	4a09      	ldr	r2, [pc, #36]	; (8013420 <memp_free+0x50>)
 80133fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013400:	6839      	ldr	r1, [r7, #0]
 8013402:	4618      	mov	r0, r3
 8013404:	f7ff ff94 	bl	8013330 <do_memp_free_pool>
 8013408:	e000      	b.n	801340c <memp_free+0x3c>
    return;
 801340a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801340c:	3708      	adds	r7, #8
 801340e:	46bd      	mov	sp, r7
 8013410:	bd80      	pop	{r7, pc}
 8013412:	bf00      	nop
 8013414:	08024340 	.word	0x08024340
 8013418:	08024410 	.word	0x08024410
 801341c:	08024394 	.word	0x08024394
 8013420:	08026fec 	.word	0x08026fec

08013424 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8013424:	b480      	push	{r7}
 8013426:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8013428:	bf00      	nop
 801342a:	46bd      	mov	sp, r7
 801342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013430:	4770      	bx	lr
	...

08013434 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8013434:	b580      	push	{r7, lr}
 8013436:	b086      	sub	sp, #24
 8013438:	af00      	add	r7, sp, #0
 801343a:	60f8      	str	r0, [r7, #12]
 801343c:	60b9      	str	r1, [r7, #8]
 801343e:	607a      	str	r2, [r7, #4]
 8013440:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	2b00      	cmp	r3, #0
 8013446:	d108      	bne.n	801345a <netif_add+0x26>
 8013448:	4b5b      	ldr	r3, [pc, #364]	; (80135b8 <netif_add+0x184>)
 801344a:	f240 1227 	movw	r2, #295	; 0x127
 801344e:	495b      	ldr	r1, [pc, #364]	; (80135bc <netif_add+0x188>)
 8013450:	485b      	ldr	r0, [pc, #364]	; (80135c0 <netif_add+0x18c>)
 8013452:	f00d ffb1 	bl	80213b8 <iprintf>
 8013456:	2300      	movs	r3, #0
 8013458:	e0a9      	b.n	80135ae <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801345a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345c:	2b00      	cmp	r3, #0
 801345e:	d108      	bne.n	8013472 <netif_add+0x3e>
 8013460:	4b55      	ldr	r3, [pc, #340]	; (80135b8 <netif_add+0x184>)
 8013462:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013466:	4957      	ldr	r1, [pc, #348]	; (80135c4 <netif_add+0x190>)
 8013468:	4855      	ldr	r0, [pc, #340]	; (80135c0 <netif_add+0x18c>)
 801346a:	f00d ffa5 	bl	80213b8 <iprintf>
 801346e:	2300      	movs	r3, #0
 8013470:	e09d      	b.n	80135ae <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d101      	bne.n	801347c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013478:	4b53      	ldr	r3, [pc, #332]	; (80135c8 <netif_add+0x194>)
 801347a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	2b00      	cmp	r3, #0
 8013480:	d101      	bne.n	8013486 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013482:	4b51      	ldr	r3, [pc, #324]	; (80135c8 <netif_add+0x194>)
 8013484:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d101      	bne.n	8013490 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801348c:	4b4e      	ldr	r3, [pc, #312]	; (80135c8 <netif_add+0x194>)
 801348e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	2200      	movs	r2, #0
 8013494:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	2200      	movs	r2, #0
 801349a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	2200      	movs	r2, #0
 80134a0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	4a49      	ldr	r2, [pc, #292]	; (80135cc <netif_add+0x198>)
 80134a6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	2200      	movs	r2, #0
 80134ac:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	2200      	movs	r2, #0
 80134b2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80134b6:	68fb      	ldr	r3, [r7, #12]
 80134b8:	3324      	adds	r3, #36	; 0x24
 80134ba:	2204      	movs	r2, #4
 80134bc:	2100      	movs	r1, #0
 80134be:	4618      	mov	r0, r3
 80134c0:	f00e f990 	bl	80217e4 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80134c4:	68fb      	ldr	r3, [r7, #12]
 80134c6:	2200      	movs	r2, #0
 80134c8:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	6a3a      	ldr	r2, [r7, #32]
 80134ce:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80134d0:	4b3f      	ldr	r3, [pc, #252]	; (80135d0 <netif_add+0x19c>)
 80134d2:	781a      	ldrb	r2, [r3, #0]
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134de:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	687a      	ldr	r2, [r7, #4]
 80134e4:	68b9      	ldr	r1, [r7, #8]
 80134e6:	68f8      	ldr	r0, [r7, #12]
 80134e8:	f000 f914 	bl	8013714 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80134ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ee:	68f8      	ldr	r0, [r7, #12]
 80134f0:	4798      	blx	r3
 80134f2:	4603      	mov	r3, r0
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d001      	beq.n	80134fc <netif_add+0xc8>
    return NULL;
 80134f8:	2300      	movs	r3, #0
 80134fa:	e058      	b.n	80135ae <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013502:	2bff      	cmp	r3, #255	; 0xff
 8013504:	d103      	bne.n	801350e <netif_add+0xda>
        netif->num = 0;
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	2200      	movs	r2, #0
 801350a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801350e:	2300      	movs	r3, #0
 8013510:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013512:	4b30      	ldr	r3, [pc, #192]	; (80135d4 <netif_add+0x1a0>)
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	617b      	str	r3, [r7, #20]
 8013518:	e02b      	b.n	8013572 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801351a:	697a      	ldr	r2, [r7, #20]
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	429a      	cmp	r2, r3
 8013520:	d106      	bne.n	8013530 <netif_add+0xfc>
 8013522:	4b25      	ldr	r3, [pc, #148]	; (80135b8 <netif_add+0x184>)
 8013524:	f240 128b 	movw	r2, #395	; 0x18b
 8013528:	492b      	ldr	r1, [pc, #172]	; (80135d8 <netif_add+0x1a4>)
 801352a:	4825      	ldr	r0, [pc, #148]	; (80135c0 <netif_add+0x18c>)
 801352c:	f00d ff44 	bl	80213b8 <iprintf>
        num_netifs++;
 8013530:	693b      	ldr	r3, [r7, #16]
 8013532:	3301      	adds	r3, #1
 8013534:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	2bff      	cmp	r3, #255	; 0xff
 801353a:	dd06      	ble.n	801354a <netif_add+0x116>
 801353c:	4b1e      	ldr	r3, [pc, #120]	; (80135b8 <netif_add+0x184>)
 801353e:	f240 128d 	movw	r2, #397	; 0x18d
 8013542:	4926      	ldr	r1, [pc, #152]	; (80135dc <netif_add+0x1a8>)
 8013544:	481e      	ldr	r0, [pc, #120]	; (80135c0 <netif_add+0x18c>)
 8013546:	f00d ff37 	bl	80213b8 <iprintf>
        if (netif2->num == netif->num) {
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013556:	429a      	cmp	r2, r3
 8013558:	d108      	bne.n	801356c <netif_add+0x138>
          netif->num++;
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013560:	3301      	adds	r3, #1
 8013562:	b2da      	uxtb	r2, r3
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801356a:	e005      	b.n	8013578 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801356c:	697b      	ldr	r3, [r7, #20]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	617b      	str	r3, [r7, #20]
 8013572:	697b      	ldr	r3, [r7, #20]
 8013574:	2b00      	cmp	r3, #0
 8013576:	d1d0      	bne.n	801351a <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8013578:	697b      	ldr	r3, [r7, #20]
 801357a:	2b00      	cmp	r3, #0
 801357c:	d1be      	bne.n	80134fc <netif_add+0xc8>
  }
  if (netif->num == 254) {
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013584:	2bfe      	cmp	r3, #254	; 0xfe
 8013586:	d103      	bne.n	8013590 <netif_add+0x15c>
    netif_num = 0;
 8013588:	4b11      	ldr	r3, [pc, #68]	; (80135d0 <netif_add+0x19c>)
 801358a:	2200      	movs	r2, #0
 801358c:	701a      	strb	r2, [r3, #0]
 801358e:	e006      	b.n	801359e <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013596:	3301      	adds	r3, #1
 8013598:	b2da      	uxtb	r2, r3
 801359a:	4b0d      	ldr	r3, [pc, #52]	; (80135d0 <netif_add+0x19c>)
 801359c:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801359e:	4b0d      	ldr	r3, [pc, #52]	; (80135d4 <netif_add+0x1a0>)
 80135a0:	681a      	ldr	r2, [r3, #0]
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80135a6:	4a0b      	ldr	r2, [pc, #44]	; (80135d4 <netif_add+0x1a0>)
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80135ac:	68fb      	ldr	r3, [r7, #12]
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3718      	adds	r7, #24
 80135b2:	46bd      	mov	sp, r7
 80135b4:	bd80      	pop	{r7, pc}
 80135b6:	bf00      	nop
 80135b8:	0802442c 	.word	0x0802442c
 80135bc:	080244c0 	.word	0x080244c0
 80135c0:	0802447c 	.word	0x0802447c
 80135c4:	080244dc 	.word	0x080244dc
 80135c8:	08027070 	.word	0x08027070
 80135cc:	080139f7 	.word	0x080139f7
 80135d0:	200122cc 	.word	0x200122cc
 80135d4:	200122c4 	.word	0x200122c4
 80135d8:	08024500 	.word	0x08024500
 80135dc:	08024514 	.word	0x08024514

080135e0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80135e0:	b580      	push	{r7, lr}
 80135e2:	b082      	sub	sp, #8
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
 80135e8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80135ea:	6839      	ldr	r1, [r7, #0]
 80135ec:	6878      	ldr	r0, [r7, #4]
 80135ee:	f002 fea3 	bl	8016338 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80135f2:	6839      	ldr	r1, [r7, #0]
 80135f4:	6878      	ldr	r0, [r7, #4]
 80135f6:	f007 ff43 	bl	801b480 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80135fa:	bf00      	nop
 80135fc:	3708      	adds	r7, #8
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
	...

08013604 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b086      	sub	sp, #24
 8013608:	af00      	add	r7, sp, #0
 801360a:	60f8      	str	r0, [r7, #12]
 801360c:	60b9      	str	r1, [r7, #8]
 801360e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d106      	bne.n	8013624 <netif_do_set_ipaddr+0x20>
 8013616:	4b1d      	ldr	r3, [pc, #116]	; (801368c <netif_do_set_ipaddr+0x88>)
 8013618:	f240 12cb 	movw	r2, #459	; 0x1cb
 801361c:	491c      	ldr	r1, [pc, #112]	; (8013690 <netif_do_set_ipaddr+0x8c>)
 801361e:	481d      	ldr	r0, [pc, #116]	; (8013694 <netif_do_set_ipaddr+0x90>)
 8013620:	f00d feca 	bl	80213b8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	2b00      	cmp	r3, #0
 8013628:	d106      	bne.n	8013638 <netif_do_set_ipaddr+0x34>
 801362a:	4b18      	ldr	r3, [pc, #96]	; (801368c <netif_do_set_ipaddr+0x88>)
 801362c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013630:	4917      	ldr	r1, [pc, #92]	; (8013690 <netif_do_set_ipaddr+0x8c>)
 8013632:	4818      	ldr	r0, [pc, #96]	; (8013694 <netif_do_set_ipaddr+0x90>)
 8013634:	f00d fec0 	bl	80213b8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	681a      	ldr	r2, [r3, #0]
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	3304      	adds	r3, #4
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	429a      	cmp	r2, r3
 8013644:	d01c      	beq.n	8013680 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	3304      	adds	r3, #4
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013656:	f107 0314 	add.w	r3, r7, #20
 801365a:	4619      	mov	r1, r3
 801365c:	6878      	ldr	r0, [r7, #4]
 801365e:	f7ff ffbf 	bl	80135e0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	2b00      	cmp	r3, #0
 8013666:	d002      	beq.n	801366e <netif_do_set_ipaddr+0x6a>
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	e000      	b.n	8013670 <netif_do_set_ipaddr+0x6c>
 801366e:	2300      	movs	r3, #0
 8013670:	68fa      	ldr	r2, [r7, #12]
 8013672:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013674:	2101      	movs	r1, #1
 8013676:	68f8      	ldr	r0, [r7, #12]
 8013678:	f000 f8d2 	bl	8013820 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801367c:	2301      	movs	r3, #1
 801367e:	e000      	b.n	8013682 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013680:	2300      	movs	r3, #0
}
 8013682:	4618      	mov	r0, r3
 8013684:	3718      	adds	r7, #24
 8013686:	46bd      	mov	sp, r7
 8013688:	bd80      	pop	{r7, pc}
 801368a:	bf00      	nop
 801368c:	0802442c 	.word	0x0802442c
 8013690:	08024544 	.word	0x08024544
 8013694:	0802447c 	.word	0x0802447c

08013698 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013698:	b480      	push	{r7}
 801369a:	b085      	sub	sp, #20
 801369c:	af00      	add	r7, sp, #0
 801369e:	60f8      	str	r0, [r7, #12]
 80136a0:	60b9      	str	r1, [r7, #8]
 80136a2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80136a4:	68bb      	ldr	r3, [r7, #8]
 80136a6:	681a      	ldr	r2, [r3, #0]
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	3308      	adds	r3, #8
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	429a      	cmp	r2, r3
 80136b0:	d00a      	beq.n	80136c8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d002      	beq.n	80136be <netif_do_set_netmask+0x26>
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	e000      	b.n	80136c0 <netif_do_set_netmask+0x28>
 80136be:	2300      	movs	r3, #0
 80136c0:	68fa      	ldr	r2, [r7, #12]
 80136c2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80136c4:	2301      	movs	r3, #1
 80136c6:	e000      	b.n	80136ca <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80136c8:	2300      	movs	r3, #0
}
 80136ca:	4618      	mov	r0, r3
 80136cc:	3714      	adds	r7, #20
 80136ce:	46bd      	mov	sp, r7
 80136d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136d4:	4770      	bx	lr

080136d6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80136d6:	b480      	push	{r7}
 80136d8:	b085      	sub	sp, #20
 80136da:	af00      	add	r7, sp, #0
 80136dc:	60f8      	str	r0, [r7, #12]
 80136de:	60b9      	str	r1, [r7, #8]
 80136e0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	681a      	ldr	r2, [r3, #0]
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	330c      	adds	r3, #12
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d00a      	beq.n	8013706 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80136f0:	68bb      	ldr	r3, [r7, #8]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d002      	beq.n	80136fc <netif_do_set_gw+0x26>
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	e000      	b.n	80136fe <netif_do_set_gw+0x28>
 80136fc:	2300      	movs	r3, #0
 80136fe:	68fa      	ldr	r2, [r7, #12]
 8013700:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013702:	2301      	movs	r3, #1
 8013704:	e000      	b.n	8013708 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013706:	2300      	movs	r3, #0
}
 8013708:	4618      	mov	r0, r3
 801370a:	3714      	adds	r7, #20
 801370c:	46bd      	mov	sp, r7
 801370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013712:	4770      	bx	lr

08013714 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013714:	b580      	push	{r7, lr}
 8013716:	b088      	sub	sp, #32
 8013718:	af00      	add	r7, sp, #0
 801371a:	60f8      	str	r0, [r7, #12]
 801371c:	60b9      	str	r1, [r7, #8]
 801371e:	607a      	str	r2, [r7, #4]
 8013720:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013722:	2300      	movs	r3, #0
 8013724:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013726:	2300      	movs	r3, #0
 8013728:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801372a:	68bb      	ldr	r3, [r7, #8]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d101      	bne.n	8013734 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013730:	4b1c      	ldr	r3, [pc, #112]	; (80137a4 <netif_set_addr+0x90>)
 8013732:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	2b00      	cmp	r3, #0
 8013738:	d101      	bne.n	801373e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801373a:	4b1a      	ldr	r3, [pc, #104]	; (80137a4 <netif_set_addr+0x90>)
 801373c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d101      	bne.n	8013748 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013744:	4b17      	ldr	r3, [pc, #92]	; (80137a4 <netif_set_addr+0x90>)
 8013746:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013748:	68bb      	ldr	r3, [r7, #8]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d003      	beq.n	8013756 <netif_set_addr+0x42>
 801374e:	68bb      	ldr	r3, [r7, #8]
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d101      	bne.n	801375a <netif_set_addr+0x46>
 8013756:	2301      	movs	r3, #1
 8013758:	e000      	b.n	801375c <netif_set_addr+0x48>
 801375a:	2300      	movs	r3, #0
 801375c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d006      	beq.n	8013772 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013764:	f107 0310 	add.w	r3, r7, #16
 8013768:	461a      	mov	r2, r3
 801376a:	68b9      	ldr	r1, [r7, #8]
 801376c:	68f8      	ldr	r0, [r7, #12]
 801376e:	f7ff ff49 	bl	8013604 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013772:	69fa      	ldr	r2, [r7, #28]
 8013774:	6879      	ldr	r1, [r7, #4]
 8013776:	68f8      	ldr	r0, [r7, #12]
 8013778:	f7ff ff8e 	bl	8013698 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801377c:	69ba      	ldr	r2, [r7, #24]
 801377e:	6839      	ldr	r1, [r7, #0]
 8013780:	68f8      	ldr	r0, [r7, #12]
 8013782:	f7ff ffa8 	bl	80136d6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013786:	697b      	ldr	r3, [r7, #20]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d106      	bne.n	801379a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801378c:	f107 0310 	add.w	r3, r7, #16
 8013790:	461a      	mov	r2, r3
 8013792:	68b9      	ldr	r1, [r7, #8]
 8013794:	68f8      	ldr	r0, [r7, #12]
 8013796:	f7ff ff35 	bl	8013604 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801379a:	bf00      	nop
 801379c:	3720      	adds	r7, #32
 801379e:	46bd      	mov	sp, r7
 80137a0:	bd80      	pop	{r7, pc}
 80137a2:	bf00      	nop
 80137a4:	08027070 	.word	0x08027070

080137a8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80137b0:	4a04      	ldr	r2, [pc, #16]	; (80137c4 <netif_set_default+0x1c>)
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80137b6:	bf00      	nop
 80137b8:	370c      	adds	r7, #12
 80137ba:	46bd      	mov	sp, r7
 80137bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c0:	4770      	bx	lr
 80137c2:	bf00      	nop
 80137c4:	200122c8 	.word	0x200122c8

080137c8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b082      	sub	sp, #8
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d107      	bne.n	80137e6 <netif_set_up+0x1e>
 80137d6:	4b0f      	ldr	r3, [pc, #60]	; (8013814 <netif_set_up+0x4c>)
 80137d8:	f44f 7254 	mov.w	r2, #848	; 0x350
 80137dc:	490e      	ldr	r1, [pc, #56]	; (8013818 <netif_set_up+0x50>)
 80137de:	480f      	ldr	r0, [pc, #60]	; (801381c <netif_set_up+0x54>)
 80137e0:	f00d fdea 	bl	80213b8 <iprintf>
 80137e4:	e013      	b.n	801380e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80137ec:	f003 0301 	and.w	r3, r3, #1
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d10c      	bne.n	801380e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80137fa:	f043 0301 	orr.w	r3, r3, #1
 80137fe:	b2da      	uxtb	r2, r3
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013806:	2103      	movs	r1, #3
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f000 f809 	bl	8013820 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801380e:	3708      	adds	r7, #8
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}
 8013814:	0802442c 	.word	0x0802442c
 8013818:	080245b4 	.word	0x080245b4
 801381c:	0802447c 	.word	0x0802447c

08013820 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013820:	b580      	push	{r7, lr}
 8013822:	b082      	sub	sp, #8
 8013824:	af00      	add	r7, sp, #0
 8013826:	6078      	str	r0, [r7, #4]
 8013828:	460b      	mov	r3, r1
 801382a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d106      	bne.n	8013840 <netif_issue_reports+0x20>
 8013832:	4b18      	ldr	r3, [pc, #96]	; (8013894 <netif_issue_reports+0x74>)
 8013834:	f240 326d 	movw	r2, #877	; 0x36d
 8013838:	4917      	ldr	r1, [pc, #92]	; (8013898 <netif_issue_reports+0x78>)
 801383a:	4818      	ldr	r0, [pc, #96]	; (801389c <netif_issue_reports+0x7c>)
 801383c:	f00d fdbc 	bl	80213b8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013846:	f003 0304 	and.w	r3, r3, #4
 801384a:	2b00      	cmp	r3, #0
 801384c:	d01e      	beq.n	801388c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013854:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013858:	2b00      	cmp	r3, #0
 801385a:	d017      	beq.n	801388c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801385c:	78fb      	ldrb	r3, [r7, #3]
 801385e:	f003 0301 	and.w	r3, r3, #1
 8013862:	2b00      	cmp	r3, #0
 8013864:	d013      	beq.n	801388e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	3304      	adds	r3, #4
 801386a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801386c:	2b00      	cmp	r3, #0
 801386e:	d00e      	beq.n	801388e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013876:	f003 0308 	and.w	r3, r3, #8
 801387a:	2b00      	cmp	r3, #0
 801387c:	d007      	beq.n	801388e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	3304      	adds	r3, #4
 8013882:	4619      	mov	r1, r3
 8013884:	6878      	ldr	r0, [r7, #4]
 8013886:	f00a fbfb 	bl	801e080 <etharp_request>
 801388a:	e000      	b.n	801388e <netif_issue_reports+0x6e>
    return;
 801388c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801388e:	3708      	adds	r7, #8
 8013890:	46bd      	mov	sp, r7
 8013892:	bd80      	pop	{r7, pc}
 8013894:	0802442c 	.word	0x0802442c
 8013898:	080245d0 	.word	0x080245d0
 801389c:	0802447c 	.word	0x0802447c

080138a0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80138a0:	b580      	push	{r7, lr}
 80138a2:	b082      	sub	sp, #8
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80138a8:	687b      	ldr	r3, [r7, #4]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d107      	bne.n	80138be <netif_set_down+0x1e>
 80138ae:	4b12      	ldr	r3, [pc, #72]	; (80138f8 <netif_set_down+0x58>)
 80138b0:	f240 329b 	movw	r2, #923	; 0x39b
 80138b4:	4911      	ldr	r1, [pc, #68]	; (80138fc <netif_set_down+0x5c>)
 80138b6:	4812      	ldr	r0, [pc, #72]	; (8013900 <netif_set_down+0x60>)
 80138b8:	f00d fd7e 	bl	80213b8 <iprintf>
 80138bc:	e019      	b.n	80138f2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138c4:	f003 0301 	and.w	r3, r3, #1
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d012      	beq.n	80138f2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138d2:	f023 0301 	bic.w	r3, r3, #1
 80138d6:	b2da      	uxtb	r2, r3
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80138e4:	f003 0308 	and.w	r3, r3, #8
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d002      	beq.n	80138f2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f009 ff81 	bl	801d7f4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80138f2:	3708      	adds	r7, #8
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd80      	pop	{r7, pc}
 80138f8:	0802442c 	.word	0x0802442c
 80138fc:	080245f4 	.word	0x080245f4
 8013900:	0802447c 	.word	0x0802447c

08013904 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b082      	sub	sp, #8
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d107      	bne.n	8013922 <netif_set_link_up+0x1e>
 8013912:	4b15      	ldr	r3, [pc, #84]	; (8013968 <netif_set_link_up+0x64>)
 8013914:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8013918:	4914      	ldr	r1, [pc, #80]	; (801396c <netif_set_link_up+0x68>)
 801391a:	4815      	ldr	r0, [pc, #84]	; (8013970 <netif_set_link_up+0x6c>)
 801391c:	f00d fd4c 	bl	80213b8 <iprintf>
 8013920:	e01e      	b.n	8013960 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013928:	f003 0304 	and.w	r3, r3, #4
 801392c:	2b00      	cmp	r3, #0
 801392e:	d117      	bne.n	8013960 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013936:	f043 0304 	orr.w	r3, r3, #4
 801393a:	b2da      	uxtb	r2, r3
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f008 f9c6 	bl	801bcd4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013948:	2103      	movs	r1, #3
 801394a:	6878      	ldr	r0, [r7, #4]
 801394c:	f7ff ff68 	bl	8013820 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	69db      	ldr	r3, [r3, #28]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d003      	beq.n	8013960 <netif_set_link_up+0x5c>
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	69db      	ldr	r3, [r3, #28]
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8013960:	3708      	adds	r7, #8
 8013962:	46bd      	mov	sp, r7
 8013964:	bd80      	pop	{r7, pc}
 8013966:	bf00      	nop
 8013968:	0802442c 	.word	0x0802442c
 801396c:	08024614 	.word	0x08024614
 8013970:	0802447c 	.word	0x0802447c

08013974 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	b082      	sub	sp, #8
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	2b00      	cmp	r3, #0
 8013980:	d107      	bne.n	8013992 <netif_set_link_down+0x1e>
 8013982:	4b11      	ldr	r3, [pc, #68]	; (80139c8 <netif_set_link_down+0x54>)
 8013984:	f240 4206 	movw	r2, #1030	; 0x406
 8013988:	4910      	ldr	r1, [pc, #64]	; (80139cc <netif_set_link_down+0x58>)
 801398a:	4811      	ldr	r0, [pc, #68]	; (80139d0 <netif_set_link_down+0x5c>)
 801398c:	f00d fd14 	bl	80213b8 <iprintf>
 8013990:	e017      	b.n	80139c2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013998:	f003 0304 	and.w	r3, r3, #4
 801399c:	2b00      	cmp	r3, #0
 801399e:	d010      	beq.n	80139c2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139a6:	f023 0304 	bic.w	r3, r3, #4
 80139aa:	b2da      	uxtb	r2, r3
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	69db      	ldr	r3, [r3, #28]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d003      	beq.n	80139c2 <netif_set_link_down+0x4e>
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	69db      	ldr	r3, [r3, #28]
 80139be:	6878      	ldr	r0, [r7, #4]
 80139c0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80139c2:	3708      	adds	r7, #8
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd80      	pop	{r7, pc}
 80139c8:	0802442c 	.word	0x0802442c
 80139cc:	08024638 	.word	0x08024638
 80139d0:	0802447c 	.word	0x0802447c

080139d4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80139d4:	b480      	push	{r7}
 80139d6:	b083      	sub	sp, #12
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d002      	beq.n	80139ea <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	683a      	ldr	r2, [r7, #0]
 80139e8:	61da      	str	r2, [r3, #28]
  }
}
 80139ea:	bf00      	nop
 80139ec:	370c      	adds	r7, #12
 80139ee:	46bd      	mov	sp, r7
 80139f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f4:	4770      	bx	lr

080139f6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80139f6:	b480      	push	{r7}
 80139f8:	b085      	sub	sp, #20
 80139fa:	af00      	add	r7, sp, #0
 80139fc:	60f8      	str	r0, [r7, #12]
 80139fe:	60b9      	str	r1, [r7, #8]
 8013a00:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013a02:	f06f 030b 	mvn.w	r3, #11
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3714      	adds	r7, #20
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a10:	4770      	bx	lr
	...

08013a14 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013a14:	b480      	push	{r7}
 8013a16:	b085      	sub	sp, #20
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013a1e:	79fb      	ldrb	r3, [r7, #7]
 8013a20:	2b00      	cmp	r3, #0
 8013a22:	d013      	beq.n	8013a4c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013a24:	4b0d      	ldr	r3, [pc, #52]	; (8013a5c <netif_get_by_index+0x48>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	60fb      	str	r3, [r7, #12]
 8013a2a:	e00c      	b.n	8013a46 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013a32:	3301      	adds	r3, #1
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	79fa      	ldrb	r2, [r7, #7]
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d101      	bne.n	8013a40 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	e006      	b.n	8013a4e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	60fb      	str	r3, [r7, #12]
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d1ef      	bne.n	8013a2c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013a4c:	2300      	movs	r3, #0
}
 8013a4e:	4618      	mov	r0, r3
 8013a50:	3714      	adds	r7, #20
 8013a52:	46bd      	mov	sp, r7
 8013a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a58:	4770      	bx	lr
 8013a5a:	bf00      	nop
 8013a5c:	200122c4 	.word	0x200122c4

08013a60 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b082      	sub	sp, #8
 8013a64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013a66:	f00c f909 	bl	801fc7c <sys_arch_protect>
 8013a6a:	6038      	str	r0, [r7, #0]
 8013a6c:	4b0d      	ldr	r3, [pc, #52]	; (8013aa4 <pbuf_free_ooseq+0x44>)
 8013a6e:	2200      	movs	r2, #0
 8013a70:	701a      	strb	r2, [r3, #0]
 8013a72:	6838      	ldr	r0, [r7, #0]
 8013a74:	f00c f910 	bl	801fc98 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013a78:	4b0b      	ldr	r3, [pc, #44]	; (8013aa8 <pbuf_free_ooseq+0x48>)
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	607b      	str	r3, [r7, #4]
 8013a7e:	e00a      	b.n	8013a96 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d003      	beq.n	8013a90 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013a88:	6878      	ldr	r0, [r7, #4]
 8013a8a:	f002 fc93 	bl	80163b4 <tcp_free_ooseq>
      return;
 8013a8e:	e005      	b.n	8013a9c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	68db      	ldr	r3, [r3, #12]
 8013a94:	607b      	str	r3, [r7, #4]
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d1f1      	bne.n	8013a80 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013a9c:	3708      	adds	r7, #8
 8013a9e:	46bd      	mov	sp, r7
 8013aa0:	bd80      	pop	{r7, pc}
 8013aa2:	bf00      	nop
 8013aa4:	200122cd 	.word	0x200122cd
 8013aa8:	200122dc 	.word	0x200122dc

08013aac <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013ab4:	f7ff ffd4 	bl	8013a60 <pbuf_free_ooseq>
}
 8013ab8:	bf00      	nop
 8013aba:	3708      	adds	r7, #8
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}

08013ac0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b082      	sub	sp, #8
 8013ac4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013ac6:	f00c f8d9 	bl	801fc7c <sys_arch_protect>
 8013aca:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013acc:	4b0f      	ldr	r3, [pc, #60]	; (8013b0c <pbuf_pool_is_empty+0x4c>)
 8013ace:	781b      	ldrb	r3, [r3, #0]
 8013ad0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013ad2:	4b0e      	ldr	r3, [pc, #56]	; (8013b0c <pbuf_pool_is_empty+0x4c>)
 8013ad4:	2201      	movs	r2, #1
 8013ad6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013ad8:	6878      	ldr	r0, [r7, #4]
 8013ada:	f00c f8dd 	bl	801fc98 <sys_arch_unprotect>

  if (!queued) {
 8013ade:	78fb      	ldrb	r3, [r7, #3]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d10f      	bne.n	8013b04 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013ae4:	2100      	movs	r1, #0
 8013ae6:	480a      	ldr	r0, [pc, #40]	; (8013b10 <pbuf_pool_is_empty+0x50>)
 8013ae8:	f7fe fe84 	bl	80127f4 <tcpip_try_callback>
 8013aec:	4603      	mov	r3, r0
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d008      	beq.n	8013b04 <pbuf_pool_is_empty+0x44>
 8013af2:	f00c f8c3 	bl	801fc7c <sys_arch_protect>
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	4b04      	ldr	r3, [pc, #16]	; (8013b0c <pbuf_pool_is_empty+0x4c>)
 8013afa:	2200      	movs	r2, #0
 8013afc:	701a      	strb	r2, [r3, #0]
 8013afe:	6878      	ldr	r0, [r7, #4]
 8013b00:	f00c f8ca 	bl	801fc98 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013b04:	bf00      	nop
 8013b06:	3708      	adds	r7, #8
 8013b08:	46bd      	mov	sp, r7
 8013b0a:	bd80      	pop	{r7, pc}
 8013b0c:	200122cd 	.word	0x200122cd
 8013b10:	08013aad 	.word	0x08013aad

08013b14 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013b14:	b480      	push	{r7}
 8013b16:	b085      	sub	sp, #20
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	60f8      	str	r0, [r7, #12]
 8013b1c:	60b9      	str	r1, [r7, #8]
 8013b1e:	4611      	mov	r1, r2
 8013b20:	461a      	mov	r2, r3
 8013b22:	460b      	mov	r3, r1
 8013b24:	80fb      	strh	r3, [r7, #6]
 8013b26:	4613      	mov	r3, r2
 8013b28:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	68ba      	ldr	r2, [r7, #8]
 8013b34:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	88fa      	ldrh	r2, [r7, #6]
 8013b3a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	88ba      	ldrh	r2, [r7, #4]
 8013b40:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013b42:	8b3b      	ldrh	r3, [r7, #24]
 8013b44:	b2da      	uxtb	r2, r3
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	7f3a      	ldrb	r2, [r7, #28]
 8013b4e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013b50:	68fb      	ldr	r3, [r7, #12]
 8013b52:	2201      	movs	r2, #1
 8013b54:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	2200      	movs	r2, #0
 8013b5a:	73da      	strb	r2, [r3, #15]
}
 8013b5c:	bf00      	nop
 8013b5e:	3714      	adds	r7, #20
 8013b60:	46bd      	mov	sp, r7
 8013b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b66:	4770      	bx	lr

08013b68 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b08c      	sub	sp, #48	; 0x30
 8013b6c:	af02      	add	r7, sp, #8
 8013b6e:	4603      	mov	r3, r0
 8013b70:	71fb      	strb	r3, [r7, #7]
 8013b72:	460b      	mov	r3, r1
 8013b74:	80bb      	strh	r3, [r7, #4]
 8013b76:	4613      	mov	r3, r2
 8013b78:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013b7a:	79fb      	ldrb	r3, [r7, #7]
 8013b7c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013b7e:	887b      	ldrh	r3, [r7, #2]
 8013b80:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013b84:	d07f      	beq.n	8013c86 <pbuf_alloc+0x11e>
 8013b86:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013b8a:	f300 80c8 	bgt.w	8013d1e <pbuf_alloc+0x1b6>
 8013b8e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013b92:	d010      	beq.n	8013bb6 <pbuf_alloc+0x4e>
 8013b94:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013b98:	f300 80c1 	bgt.w	8013d1e <pbuf_alloc+0x1b6>
 8013b9c:	2b01      	cmp	r3, #1
 8013b9e:	d002      	beq.n	8013ba6 <pbuf_alloc+0x3e>
 8013ba0:	2b41      	cmp	r3, #65	; 0x41
 8013ba2:	f040 80bc 	bne.w	8013d1e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8013ba6:	887a      	ldrh	r2, [r7, #2]
 8013ba8:	88bb      	ldrh	r3, [r7, #4]
 8013baa:	4619      	mov	r1, r3
 8013bac:	2000      	movs	r0, #0
 8013bae:	f000 f8d1 	bl	8013d54 <pbuf_alloc_reference>
 8013bb2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8013bb4:	e0bd      	b.n	8013d32 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8013bba:	2300      	movs	r3, #0
 8013bbc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013bbe:	88bb      	ldrh	r3, [r7, #4]
 8013bc0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8013bc2:	200c      	movs	r0, #12
 8013bc4:	f7ff fb8e 	bl	80132e4 <memp_malloc>
 8013bc8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013bca:	693b      	ldr	r3, [r7, #16]
 8013bcc:	2b00      	cmp	r3, #0
 8013bce:	d109      	bne.n	8013be4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013bd0:	f7ff ff76 	bl	8013ac0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8013bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d002      	beq.n	8013be0 <pbuf_alloc+0x78>
            pbuf_free(p);
 8013bda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013bdc:	f000 faa8 	bl	8014130 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013be0:	2300      	movs	r3, #0
 8013be2:	e0a7      	b.n	8013d34 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8013be4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013be6:	3303      	adds	r3, #3
 8013be8:	b29b      	uxth	r3, r3
 8013bea:	f023 0303 	bic.w	r3, r3, #3
 8013bee:	b29b      	uxth	r3, r3
 8013bf0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8013bf4:	b29b      	uxth	r3, r3
 8013bf6:	8b7a      	ldrh	r2, [r7, #26]
 8013bf8:	4293      	cmp	r3, r2
 8013bfa:	bf28      	it	cs
 8013bfc:	4613      	movcs	r3, r2
 8013bfe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8013c00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c02:	3310      	adds	r3, #16
 8013c04:	693a      	ldr	r2, [r7, #16]
 8013c06:	4413      	add	r3, r2
 8013c08:	3303      	adds	r3, #3
 8013c0a:	f023 0303 	bic.w	r3, r3, #3
 8013c0e:	4618      	mov	r0, r3
 8013c10:	89f9      	ldrh	r1, [r7, #14]
 8013c12:	8b7a      	ldrh	r2, [r7, #26]
 8013c14:	2300      	movs	r3, #0
 8013c16:	9301      	str	r3, [sp, #4]
 8013c18:	887b      	ldrh	r3, [r7, #2]
 8013c1a:	9300      	str	r3, [sp, #0]
 8013c1c:	460b      	mov	r3, r1
 8013c1e:	4601      	mov	r1, r0
 8013c20:	6938      	ldr	r0, [r7, #16]
 8013c22:	f7ff ff77 	bl	8013b14 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	685b      	ldr	r3, [r3, #4]
 8013c2a:	f003 0303 	and.w	r3, r3, #3
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d006      	beq.n	8013c40 <pbuf_alloc+0xd8>
 8013c32:	4b42      	ldr	r3, [pc, #264]	; (8013d3c <pbuf_alloc+0x1d4>)
 8013c34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013c38:	4941      	ldr	r1, [pc, #260]	; (8013d40 <pbuf_alloc+0x1d8>)
 8013c3a:	4842      	ldr	r0, [pc, #264]	; (8013d44 <pbuf_alloc+0x1dc>)
 8013c3c:	f00d fbbc 	bl	80213b8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8013c40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c42:	3303      	adds	r3, #3
 8013c44:	f023 0303 	bic.w	r3, r3, #3
 8013c48:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8013c4c:	d106      	bne.n	8013c5c <pbuf_alloc+0xf4>
 8013c4e:	4b3b      	ldr	r3, [pc, #236]	; (8013d3c <pbuf_alloc+0x1d4>)
 8013c50:	f44f 7281 	mov.w	r2, #258	; 0x102
 8013c54:	493c      	ldr	r1, [pc, #240]	; (8013d48 <pbuf_alloc+0x1e0>)
 8013c56:	483b      	ldr	r0, [pc, #236]	; (8013d44 <pbuf_alloc+0x1dc>)
 8013c58:	f00d fbae 	bl	80213b8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d102      	bne.n	8013c68 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	627b      	str	r3, [r7, #36]	; 0x24
 8013c66:	e002      	b.n	8013c6e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	693a      	ldr	r2, [r7, #16]
 8013c6c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8013c72:	8b7a      	ldrh	r2, [r7, #26]
 8013c74:	89fb      	ldrh	r3, [r7, #14]
 8013c76:	1ad3      	subs	r3, r2, r3
 8013c78:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8013c7e:	8b7b      	ldrh	r3, [r7, #26]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d19e      	bne.n	8013bc2 <pbuf_alloc+0x5a>
      break;
 8013c84:	e055      	b.n	8013d32 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8013c86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013c88:	3303      	adds	r3, #3
 8013c8a:	b29b      	uxth	r3, r3
 8013c8c:	f023 0303 	bic.w	r3, r3, #3
 8013c90:	b29a      	uxth	r2, r3
 8013c92:	88bb      	ldrh	r3, [r7, #4]
 8013c94:	3303      	adds	r3, #3
 8013c96:	b29b      	uxth	r3, r3
 8013c98:	f023 0303 	bic.w	r3, r3, #3
 8013c9c:	b29b      	uxth	r3, r3
 8013c9e:	4413      	add	r3, r2
 8013ca0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8013ca2:	8b3b      	ldrh	r3, [r7, #24]
 8013ca4:	3310      	adds	r3, #16
 8013ca6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013ca8:	8b3a      	ldrh	r2, [r7, #24]
 8013caa:	88bb      	ldrh	r3, [r7, #4]
 8013cac:	3303      	adds	r3, #3
 8013cae:	f023 0303 	bic.w	r3, r3, #3
 8013cb2:	429a      	cmp	r2, r3
 8013cb4:	d306      	bcc.n	8013cc4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8013cb6:	8afa      	ldrh	r2, [r7, #22]
 8013cb8:	88bb      	ldrh	r3, [r7, #4]
 8013cba:	3303      	adds	r3, #3
 8013cbc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d201      	bcs.n	8013cc8 <pbuf_alloc+0x160>
        return NULL;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	e035      	b.n	8013d34 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013cc8:	8afb      	ldrh	r3, [r7, #22]
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f7ff f966 	bl	8012f9c <mem_malloc>
 8013cd0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8013cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d101      	bne.n	8013cdc <pbuf_alloc+0x174>
        return NULL;
 8013cd8:	2300      	movs	r3, #0
 8013cda:	e02b      	b.n	8013d34 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013cdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013cde:	3310      	adds	r3, #16
 8013ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ce2:	4413      	add	r3, r2
 8013ce4:	3303      	adds	r3, #3
 8013ce6:	f023 0303 	bic.w	r3, r3, #3
 8013cea:	4618      	mov	r0, r3
 8013cec:	88b9      	ldrh	r1, [r7, #4]
 8013cee:	88ba      	ldrh	r2, [r7, #4]
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	9301      	str	r3, [sp, #4]
 8013cf4:	887b      	ldrh	r3, [r7, #2]
 8013cf6:	9300      	str	r3, [sp, #0]
 8013cf8:	460b      	mov	r3, r1
 8013cfa:	4601      	mov	r1, r0
 8013cfc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cfe:	f7ff ff09 	bl	8013b14 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8013d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d04:	685b      	ldr	r3, [r3, #4]
 8013d06:	f003 0303 	and.w	r3, r3, #3
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d010      	beq.n	8013d30 <pbuf_alloc+0x1c8>
 8013d0e:	4b0b      	ldr	r3, [pc, #44]	; (8013d3c <pbuf_alloc+0x1d4>)
 8013d10:	f44f 7291 	mov.w	r2, #290	; 0x122
 8013d14:	490d      	ldr	r1, [pc, #52]	; (8013d4c <pbuf_alloc+0x1e4>)
 8013d16:	480b      	ldr	r0, [pc, #44]	; (8013d44 <pbuf_alloc+0x1dc>)
 8013d18:	f00d fb4e 	bl	80213b8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8013d1c:	e008      	b.n	8013d30 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8013d1e:	4b07      	ldr	r3, [pc, #28]	; (8013d3c <pbuf_alloc+0x1d4>)
 8013d20:	f240 1227 	movw	r2, #295	; 0x127
 8013d24:	490a      	ldr	r1, [pc, #40]	; (8013d50 <pbuf_alloc+0x1e8>)
 8013d26:	4807      	ldr	r0, [pc, #28]	; (8013d44 <pbuf_alloc+0x1dc>)
 8013d28:	f00d fb46 	bl	80213b8 <iprintf>
      return NULL;
 8013d2c:	2300      	movs	r3, #0
 8013d2e:	e001      	b.n	8013d34 <pbuf_alloc+0x1cc>
      break;
 8013d30:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8013d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013d34:	4618      	mov	r0, r3
 8013d36:	3728      	adds	r7, #40	; 0x28
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	0802465c 	.word	0x0802465c
 8013d40:	0802468c 	.word	0x0802468c
 8013d44:	080246bc 	.word	0x080246bc
 8013d48:	080246e4 	.word	0x080246e4
 8013d4c:	08024718 	.word	0x08024718
 8013d50:	08024744 	.word	0x08024744

08013d54 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b086      	sub	sp, #24
 8013d58:	af02      	add	r7, sp, #8
 8013d5a:	6078      	str	r0, [r7, #4]
 8013d5c:	460b      	mov	r3, r1
 8013d5e:	807b      	strh	r3, [r7, #2]
 8013d60:	4613      	mov	r3, r2
 8013d62:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8013d64:	883b      	ldrh	r3, [r7, #0]
 8013d66:	2b41      	cmp	r3, #65	; 0x41
 8013d68:	d009      	beq.n	8013d7e <pbuf_alloc_reference+0x2a>
 8013d6a:	883b      	ldrh	r3, [r7, #0]
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	d006      	beq.n	8013d7e <pbuf_alloc_reference+0x2a>
 8013d70:	4b0f      	ldr	r3, [pc, #60]	; (8013db0 <pbuf_alloc_reference+0x5c>)
 8013d72:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8013d76:	490f      	ldr	r1, [pc, #60]	; (8013db4 <pbuf_alloc_reference+0x60>)
 8013d78:	480f      	ldr	r0, [pc, #60]	; (8013db8 <pbuf_alloc_reference+0x64>)
 8013d7a:	f00d fb1d 	bl	80213b8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013d7e:	200b      	movs	r0, #11
 8013d80:	f7ff fab0 	bl	80132e4 <memp_malloc>
 8013d84:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d101      	bne.n	8013d90 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	e00b      	b.n	8013da8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013d90:	8879      	ldrh	r1, [r7, #2]
 8013d92:	887a      	ldrh	r2, [r7, #2]
 8013d94:	2300      	movs	r3, #0
 8013d96:	9301      	str	r3, [sp, #4]
 8013d98:	883b      	ldrh	r3, [r7, #0]
 8013d9a:	9300      	str	r3, [sp, #0]
 8013d9c:	460b      	mov	r3, r1
 8013d9e:	6879      	ldr	r1, [r7, #4]
 8013da0:	68f8      	ldr	r0, [r7, #12]
 8013da2:	f7ff feb7 	bl	8013b14 <pbuf_init_alloced_pbuf>
  return p;
 8013da6:	68fb      	ldr	r3, [r7, #12]
}
 8013da8:	4618      	mov	r0, r3
 8013daa:	3710      	adds	r7, #16
 8013dac:	46bd      	mov	sp, r7
 8013dae:	bd80      	pop	{r7, pc}
 8013db0:	0802465c 	.word	0x0802465c
 8013db4:	08024760 	.word	0x08024760
 8013db8:	080246bc 	.word	0x080246bc

08013dbc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b088      	sub	sp, #32
 8013dc0:	af02      	add	r7, sp, #8
 8013dc2:	607b      	str	r3, [r7, #4]
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	73fb      	strb	r3, [r7, #15]
 8013dc8:	460b      	mov	r3, r1
 8013dca:	81bb      	strh	r3, [r7, #12]
 8013dcc:	4613      	mov	r3, r2
 8013dce:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013dd0:	7bfb      	ldrb	r3, [r7, #15]
 8013dd2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8013dd4:	8a7b      	ldrh	r3, [r7, #18]
 8013dd6:	3303      	adds	r3, #3
 8013dd8:	f023 0203 	bic.w	r2, r3, #3
 8013ddc:	89bb      	ldrh	r3, [r7, #12]
 8013dde:	441a      	add	r2, r3
 8013de0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013de2:	429a      	cmp	r2, r3
 8013de4:	d901      	bls.n	8013dea <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8013de6:	2300      	movs	r3, #0
 8013de8:	e018      	b.n	8013e1c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013dea:	6a3b      	ldr	r3, [r7, #32]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d007      	beq.n	8013e00 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013df0:	8a7b      	ldrh	r3, [r7, #18]
 8013df2:	3303      	adds	r3, #3
 8013df4:	f023 0303 	bic.w	r3, r3, #3
 8013df8:	6a3a      	ldr	r2, [r7, #32]
 8013dfa:	4413      	add	r3, r2
 8013dfc:	617b      	str	r3, [r7, #20]
 8013dfe:	e001      	b.n	8013e04 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013e00:	2300      	movs	r3, #0
 8013e02:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8013e04:	6878      	ldr	r0, [r7, #4]
 8013e06:	89b9      	ldrh	r1, [r7, #12]
 8013e08:	89ba      	ldrh	r2, [r7, #12]
 8013e0a:	2302      	movs	r3, #2
 8013e0c:	9301      	str	r3, [sp, #4]
 8013e0e:	897b      	ldrh	r3, [r7, #10]
 8013e10:	9300      	str	r3, [sp, #0]
 8013e12:	460b      	mov	r3, r1
 8013e14:	6979      	ldr	r1, [r7, #20]
 8013e16:	f7ff fe7d 	bl	8013b14 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8013e1a:	687b      	ldr	r3, [r7, #4]
}
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	3718      	adds	r7, #24
 8013e20:	46bd      	mov	sp, r7
 8013e22:	bd80      	pop	{r7, pc}

08013e24 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
 8013e2c:	460b      	mov	r3, r1
 8013e2e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d106      	bne.n	8013e44 <pbuf_realloc+0x20>
 8013e36:	4b3a      	ldr	r3, [pc, #232]	; (8013f20 <pbuf_realloc+0xfc>)
 8013e38:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8013e3c:	4939      	ldr	r1, [pc, #228]	; (8013f24 <pbuf_realloc+0x100>)
 8013e3e:	483a      	ldr	r0, [pc, #232]	; (8013f28 <pbuf_realloc+0x104>)
 8013e40:	f00d faba 	bl	80213b8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	891b      	ldrh	r3, [r3, #8]
 8013e48:	887a      	ldrh	r2, [r7, #2]
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d263      	bcs.n	8013f16 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	891a      	ldrh	r2, [r3, #8]
 8013e52:	887b      	ldrh	r3, [r7, #2]
 8013e54:	1ad3      	subs	r3, r2, r3
 8013e56:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013e58:	887b      	ldrh	r3, [r7, #2]
 8013e5a:	817b      	strh	r3, [r7, #10]
  q = p;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013e60:	e018      	b.n	8013e94 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	895b      	ldrh	r3, [r3, #10]
 8013e66:	897a      	ldrh	r2, [r7, #10]
 8013e68:	1ad3      	subs	r3, r2, r3
 8013e6a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	891a      	ldrh	r2, [r3, #8]
 8013e70:	893b      	ldrh	r3, [r7, #8]
 8013e72:	1ad3      	subs	r3, r2, r3
 8013e74:	b29a      	uxth	r2, r3
 8013e76:	68fb      	ldr	r3, [r7, #12]
 8013e78:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013e7a:	68fb      	ldr	r3, [r7, #12]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	2b00      	cmp	r3, #0
 8013e84:	d106      	bne.n	8013e94 <pbuf_realloc+0x70>
 8013e86:	4b26      	ldr	r3, [pc, #152]	; (8013f20 <pbuf_realloc+0xfc>)
 8013e88:	f240 12af 	movw	r2, #431	; 0x1af
 8013e8c:	4927      	ldr	r1, [pc, #156]	; (8013f2c <pbuf_realloc+0x108>)
 8013e8e:	4826      	ldr	r0, [pc, #152]	; (8013f28 <pbuf_realloc+0x104>)
 8013e90:	f00d fa92 	bl	80213b8 <iprintf>
  while (rem_len > q->len) {
 8013e94:	68fb      	ldr	r3, [r7, #12]
 8013e96:	895b      	ldrh	r3, [r3, #10]
 8013e98:	897a      	ldrh	r2, [r7, #10]
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d8e1      	bhi.n	8013e62 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	7b1b      	ldrb	r3, [r3, #12]
 8013ea2:	f003 030f 	and.w	r3, r3, #15
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d121      	bne.n	8013eee <pbuf_realloc+0xca>
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	895b      	ldrh	r3, [r3, #10]
 8013eae:	897a      	ldrh	r2, [r7, #10]
 8013eb0:	429a      	cmp	r2, r3
 8013eb2:	d01c      	beq.n	8013eee <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	7b5b      	ldrb	r3, [r3, #13]
 8013eb8:	f003 0302 	and.w	r3, r3, #2
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d116      	bne.n	8013eee <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	685a      	ldr	r2, [r3, #4]
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	1ad3      	subs	r3, r2, r3
 8013ec8:	b29a      	uxth	r2, r3
 8013eca:	897b      	ldrh	r3, [r7, #10]
 8013ecc:	4413      	add	r3, r2
 8013ece:	b29b      	uxth	r3, r3
 8013ed0:	4619      	mov	r1, r3
 8013ed2:	68f8      	ldr	r0, [r7, #12]
 8013ed4:	f7fe ff58 	bl	8012d88 <mem_trim>
 8013ed8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d106      	bne.n	8013eee <pbuf_realloc+0xca>
 8013ee0:	4b0f      	ldr	r3, [pc, #60]	; (8013f20 <pbuf_realloc+0xfc>)
 8013ee2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8013ee6:	4912      	ldr	r1, [pc, #72]	; (8013f30 <pbuf_realloc+0x10c>)
 8013ee8:	480f      	ldr	r0, [pc, #60]	; (8013f28 <pbuf_realloc+0x104>)
 8013eea:	f00d fa65 	bl	80213b8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	897a      	ldrh	r2, [r7, #10]
 8013ef2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	895a      	ldrh	r2, [r3, #10]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d004      	beq.n	8013f0e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013f04:	68fb      	ldr	r3, [r7, #12]
 8013f06:	681b      	ldr	r3, [r3, #0]
 8013f08:	4618      	mov	r0, r3
 8013f0a:	f000 f911 	bl	8014130 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	2200      	movs	r2, #0
 8013f12:	601a      	str	r2, [r3, #0]
 8013f14:	e000      	b.n	8013f18 <pbuf_realloc+0xf4>
    return;
 8013f16:	bf00      	nop

}
 8013f18:	3710      	adds	r7, #16
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	0802465c 	.word	0x0802465c
 8013f24:	08024774 	.word	0x08024774
 8013f28:	080246bc 	.word	0x080246bc
 8013f2c:	0802478c 	.word	0x0802478c
 8013f30:	080247a4 	.word	0x080247a4

08013f34 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b086      	sub	sp, #24
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	60f8      	str	r0, [r7, #12]
 8013f3c:	60b9      	str	r1, [r7, #8]
 8013f3e:	4613      	mov	r3, r2
 8013f40:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013f42:	68fb      	ldr	r3, [r7, #12]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d106      	bne.n	8013f56 <pbuf_add_header_impl+0x22>
 8013f48:	4b2b      	ldr	r3, [pc, #172]	; (8013ff8 <pbuf_add_header_impl+0xc4>)
 8013f4a:	f240 12df 	movw	r2, #479	; 0x1df
 8013f4e:	492b      	ldr	r1, [pc, #172]	; (8013ffc <pbuf_add_header_impl+0xc8>)
 8013f50:	482b      	ldr	r0, [pc, #172]	; (8014000 <pbuf_add_header_impl+0xcc>)
 8013f52:	f00d fa31 	bl	80213b8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d003      	beq.n	8013f64 <pbuf_add_header_impl+0x30>
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f62:	d301      	bcc.n	8013f68 <pbuf_add_header_impl+0x34>
    return 1;
 8013f64:	2301      	movs	r3, #1
 8013f66:	e043      	b.n	8013ff0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013f68:	68bb      	ldr	r3, [r7, #8]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d101      	bne.n	8013f72 <pbuf_add_header_impl+0x3e>
    return 0;
 8013f6e:	2300      	movs	r3, #0
 8013f70:	e03e      	b.n	8013ff0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013f72:	68bb      	ldr	r3, [r7, #8]
 8013f74:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	891a      	ldrh	r2, [r3, #8]
 8013f7a:	8a7b      	ldrh	r3, [r7, #18]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	b29b      	uxth	r3, r3
 8013f80:	8a7a      	ldrh	r2, [r7, #18]
 8013f82:	429a      	cmp	r2, r3
 8013f84:	d901      	bls.n	8013f8a <pbuf_add_header_impl+0x56>
    return 1;
 8013f86:	2301      	movs	r3, #1
 8013f88:	e032      	b.n	8013ff0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	7b1b      	ldrb	r3, [r3, #12]
 8013f8e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013f90:	8a3b      	ldrh	r3, [r7, #16]
 8013f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d00c      	beq.n	8013fb4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	685a      	ldr	r2, [r3, #4]
 8013f9e:	68bb      	ldr	r3, [r7, #8]
 8013fa0:	425b      	negs	r3, r3
 8013fa2:	4413      	add	r3, r2
 8013fa4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	3310      	adds	r3, #16
 8013faa:	697a      	ldr	r2, [r7, #20]
 8013fac:	429a      	cmp	r2, r3
 8013fae:	d20d      	bcs.n	8013fcc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013fb0:	2301      	movs	r3, #1
 8013fb2:	e01d      	b.n	8013ff0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013fb4:	79fb      	ldrb	r3, [r7, #7]
 8013fb6:	2b00      	cmp	r3, #0
 8013fb8:	d006      	beq.n	8013fc8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013fba:	68fb      	ldr	r3, [r7, #12]
 8013fbc:	685a      	ldr	r2, [r3, #4]
 8013fbe:	68bb      	ldr	r3, [r7, #8]
 8013fc0:	425b      	negs	r3, r3
 8013fc2:	4413      	add	r3, r2
 8013fc4:	617b      	str	r3, [r7, #20]
 8013fc6:	e001      	b.n	8013fcc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013fc8:	2301      	movs	r3, #1
 8013fca:	e011      	b.n	8013ff0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	697a      	ldr	r2, [r7, #20]
 8013fd0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	895a      	ldrh	r2, [r3, #10]
 8013fd6:	8a7b      	ldrh	r3, [r7, #18]
 8013fd8:	4413      	add	r3, r2
 8013fda:	b29a      	uxth	r2, r3
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	891a      	ldrh	r2, [r3, #8]
 8013fe4:	8a7b      	ldrh	r3, [r7, #18]
 8013fe6:	4413      	add	r3, r2
 8013fe8:	b29a      	uxth	r2, r3
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	811a      	strh	r2, [r3, #8]


  return 0;
 8013fee:	2300      	movs	r3, #0
}
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	3718      	adds	r7, #24
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	0802465c 	.word	0x0802465c
 8013ffc:	080247c0 	.word	0x080247c0
 8014000:	080246bc 	.word	0x080246bc

08014004 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8014004:	b580      	push	{r7, lr}
 8014006:	b082      	sub	sp, #8
 8014008:	af00      	add	r7, sp, #0
 801400a:	6078      	str	r0, [r7, #4]
 801400c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801400e:	2200      	movs	r2, #0
 8014010:	6839      	ldr	r1, [r7, #0]
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f7ff ff8e 	bl	8013f34 <pbuf_add_header_impl>
 8014018:	4603      	mov	r3, r0
}
 801401a:	4618      	mov	r0, r3
 801401c:	3708      	adds	r7, #8
 801401e:	46bd      	mov	sp, r7
 8014020:	bd80      	pop	{r7, pc}
	...

08014024 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b084      	sub	sp, #16
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
 801402c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d106      	bne.n	8014042 <pbuf_remove_header+0x1e>
 8014034:	4b20      	ldr	r3, [pc, #128]	; (80140b8 <pbuf_remove_header+0x94>)
 8014036:	f240 224b 	movw	r2, #587	; 0x24b
 801403a:	4920      	ldr	r1, [pc, #128]	; (80140bc <pbuf_remove_header+0x98>)
 801403c:	4820      	ldr	r0, [pc, #128]	; (80140c0 <pbuf_remove_header+0x9c>)
 801403e:	f00d f9bb 	bl	80213b8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d003      	beq.n	8014050 <pbuf_remove_header+0x2c>
 8014048:	683b      	ldr	r3, [r7, #0]
 801404a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801404e:	d301      	bcc.n	8014054 <pbuf_remove_header+0x30>
    return 1;
 8014050:	2301      	movs	r3, #1
 8014052:	e02c      	b.n	80140ae <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	2b00      	cmp	r3, #0
 8014058:	d101      	bne.n	801405e <pbuf_remove_header+0x3a>
    return 0;
 801405a:	2300      	movs	r3, #0
 801405c:	e027      	b.n	80140ae <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	895b      	ldrh	r3, [r3, #10]
 8014066:	89fa      	ldrh	r2, [r7, #14]
 8014068:	429a      	cmp	r2, r3
 801406a:	d908      	bls.n	801407e <pbuf_remove_header+0x5a>
 801406c:	4b12      	ldr	r3, [pc, #72]	; (80140b8 <pbuf_remove_header+0x94>)
 801406e:	f240 2255 	movw	r2, #597	; 0x255
 8014072:	4914      	ldr	r1, [pc, #80]	; (80140c4 <pbuf_remove_header+0xa0>)
 8014074:	4812      	ldr	r0, [pc, #72]	; (80140c0 <pbuf_remove_header+0x9c>)
 8014076:	f00d f99f 	bl	80213b8 <iprintf>
 801407a:	2301      	movs	r3, #1
 801407c:	e017      	b.n	80140ae <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	685b      	ldr	r3, [r3, #4]
 8014082:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	685a      	ldr	r2, [r3, #4]
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	441a      	add	r2, r3
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	895a      	ldrh	r2, [r3, #10]
 8014094:	89fb      	ldrh	r3, [r7, #14]
 8014096:	1ad3      	subs	r3, r2, r3
 8014098:	b29a      	uxth	r2, r3
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	891a      	ldrh	r2, [r3, #8]
 80140a2:	89fb      	ldrh	r3, [r7, #14]
 80140a4:	1ad3      	subs	r3, r2, r3
 80140a6:	b29a      	uxth	r2, r3
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80140ac:	2300      	movs	r3, #0
}
 80140ae:	4618      	mov	r0, r3
 80140b0:	3710      	adds	r7, #16
 80140b2:	46bd      	mov	sp, r7
 80140b4:	bd80      	pop	{r7, pc}
 80140b6:	bf00      	nop
 80140b8:	0802465c 	.word	0x0802465c
 80140bc:	080247c0 	.word	0x080247c0
 80140c0:	080246bc 	.word	0x080246bc
 80140c4:	080247cc 	.word	0x080247cc

080140c8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b082      	sub	sp, #8
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	6078      	str	r0, [r7, #4]
 80140d0:	460b      	mov	r3, r1
 80140d2:	807b      	strh	r3, [r7, #2]
 80140d4:	4613      	mov	r3, r2
 80140d6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80140d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	da08      	bge.n	80140f2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80140e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80140e4:	425b      	negs	r3, r3
 80140e6:	4619      	mov	r1, r3
 80140e8:	6878      	ldr	r0, [r7, #4]
 80140ea:	f7ff ff9b 	bl	8014024 <pbuf_remove_header>
 80140ee:	4603      	mov	r3, r0
 80140f0:	e007      	b.n	8014102 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80140f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80140f6:	787a      	ldrb	r2, [r7, #1]
 80140f8:	4619      	mov	r1, r3
 80140fa:	6878      	ldr	r0, [r7, #4]
 80140fc:	f7ff ff1a 	bl	8013f34 <pbuf_add_header_impl>
 8014100:	4603      	mov	r3, r0
  }
}
 8014102:	4618      	mov	r0, r3
 8014104:	3708      	adds	r7, #8
 8014106:	46bd      	mov	sp, r7
 8014108:	bd80      	pop	{r7, pc}

0801410a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801410a:	b580      	push	{r7, lr}
 801410c:	b082      	sub	sp, #8
 801410e:	af00      	add	r7, sp, #0
 8014110:	6078      	str	r0, [r7, #4]
 8014112:	460b      	mov	r3, r1
 8014114:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8014116:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801411a:	2201      	movs	r2, #1
 801411c:	4619      	mov	r1, r3
 801411e:	6878      	ldr	r0, [r7, #4]
 8014120:	f7ff ffd2 	bl	80140c8 <pbuf_header_impl>
 8014124:	4603      	mov	r3, r0
}
 8014126:	4618      	mov	r0, r3
 8014128:	3708      	adds	r7, #8
 801412a:	46bd      	mov	sp, r7
 801412c:	bd80      	pop	{r7, pc}
	...

08014130 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8014130:	b580      	push	{r7, lr}
 8014132:	b088      	sub	sp, #32
 8014134:	af00      	add	r7, sp, #0
 8014136:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d10b      	bne.n	8014156 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801413e:	687b      	ldr	r3, [r7, #4]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d106      	bne.n	8014152 <pbuf_free+0x22>
 8014144:	4b3b      	ldr	r3, [pc, #236]	; (8014234 <pbuf_free+0x104>)
 8014146:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801414a:	493b      	ldr	r1, [pc, #236]	; (8014238 <pbuf_free+0x108>)
 801414c:	483b      	ldr	r0, [pc, #236]	; (801423c <pbuf_free+0x10c>)
 801414e:	f00d f933 	bl	80213b8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8014152:	2300      	movs	r3, #0
 8014154:	e069      	b.n	801422a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8014156:	2300      	movs	r3, #0
 8014158:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801415a:	e062      	b.n	8014222 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 801415c:	f00b fd8e 	bl	801fc7c <sys_arch_protect>
 8014160:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	7b9b      	ldrb	r3, [r3, #14]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d106      	bne.n	8014178 <pbuf_free+0x48>
 801416a:	4b32      	ldr	r3, [pc, #200]	; (8014234 <pbuf_free+0x104>)
 801416c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014170:	4933      	ldr	r1, [pc, #204]	; (8014240 <pbuf_free+0x110>)
 8014172:	4832      	ldr	r0, [pc, #200]	; (801423c <pbuf_free+0x10c>)
 8014174:	f00d f920 	bl	80213b8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	7b9b      	ldrb	r3, [r3, #14]
 801417c:	3b01      	subs	r3, #1
 801417e:	b2da      	uxtb	r2, r3
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	739a      	strb	r2, [r3, #14]
 8014184:	687b      	ldr	r3, [r7, #4]
 8014186:	7b9b      	ldrb	r3, [r3, #14]
 8014188:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801418a:	69b8      	ldr	r0, [r7, #24]
 801418c:	f00b fd84 	bl	801fc98 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014190:	7dfb      	ldrb	r3, [r7, #23]
 8014192:	2b00      	cmp	r3, #0
 8014194:	d143      	bne.n	801421e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	681b      	ldr	r3, [r3, #0]
 801419a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	7b1b      	ldrb	r3, [r3, #12]
 80141a0:	f003 030f 	and.w	r3, r3, #15
 80141a4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	7b5b      	ldrb	r3, [r3, #13]
 80141aa:	f003 0302 	and.w	r3, r3, #2
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d011      	beq.n	80141d6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	691b      	ldr	r3, [r3, #16]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d106      	bne.n	80141cc <pbuf_free+0x9c>
 80141be:	4b1d      	ldr	r3, [pc, #116]	; (8014234 <pbuf_free+0x104>)
 80141c0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80141c4:	491f      	ldr	r1, [pc, #124]	; (8014244 <pbuf_free+0x114>)
 80141c6:	481d      	ldr	r0, [pc, #116]	; (801423c <pbuf_free+0x10c>)
 80141c8:	f00d f8f6 	bl	80213b8 <iprintf>
        pc->custom_free_function(p);
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	691b      	ldr	r3, [r3, #16]
 80141d0:	6878      	ldr	r0, [r7, #4]
 80141d2:	4798      	blx	r3
 80141d4:	e01d      	b.n	8014212 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80141d6:	7bfb      	ldrb	r3, [r7, #15]
 80141d8:	2b02      	cmp	r3, #2
 80141da:	d104      	bne.n	80141e6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80141dc:	6879      	ldr	r1, [r7, #4]
 80141de:	200c      	movs	r0, #12
 80141e0:	f7ff f8f6 	bl	80133d0 <memp_free>
 80141e4:	e015      	b.n	8014212 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80141e6:	7bfb      	ldrb	r3, [r7, #15]
 80141e8:	2b01      	cmp	r3, #1
 80141ea:	d104      	bne.n	80141f6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80141ec:	6879      	ldr	r1, [r7, #4]
 80141ee:	200b      	movs	r0, #11
 80141f0:	f7ff f8ee 	bl	80133d0 <memp_free>
 80141f4:	e00d      	b.n	8014212 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80141f6:	7bfb      	ldrb	r3, [r7, #15]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d103      	bne.n	8014204 <pbuf_free+0xd4>
          mem_free(p);
 80141fc:	6878      	ldr	r0, [r7, #4]
 80141fe:	f7fe fd33 	bl	8012c68 <mem_free>
 8014202:	e006      	b.n	8014212 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8014204:	4b0b      	ldr	r3, [pc, #44]	; (8014234 <pbuf_free+0x104>)
 8014206:	f240 320f 	movw	r2, #783	; 0x30f
 801420a:	490f      	ldr	r1, [pc, #60]	; (8014248 <pbuf_free+0x118>)
 801420c:	480b      	ldr	r0, [pc, #44]	; (801423c <pbuf_free+0x10c>)
 801420e:	f00d f8d3 	bl	80213b8 <iprintf>
        }
      }
      count++;
 8014212:	7ffb      	ldrb	r3, [r7, #31]
 8014214:	3301      	adds	r3, #1
 8014216:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8014218:	693b      	ldr	r3, [r7, #16]
 801421a:	607b      	str	r3, [r7, #4]
 801421c:	e001      	b.n	8014222 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801421e:	2300      	movs	r3, #0
 8014220:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	2b00      	cmp	r3, #0
 8014226:	d199      	bne.n	801415c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8014228:	7ffb      	ldrb	r3, [r7, #31]
}
 801422a:	4618      	mov	r0, r3
 801422c:	3720      	adds	r7, #32
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}
 8014232:	bf00      	nop
 8014234:	0802465c 	.word	0x0802465c
 8014238:	080247c0 	.word	0x080247c0
 801423c:	080246bc 	.word	0x080246bc
 8014240:	080247ec 	.word	0x080247ec
 8014244:	08024804 	.word	0x08024804
 8014248:	08024828 	.word	0x08024828

0801424c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801424c:	b480      	push	{r7}
 801424e:	b085      	sub	sp, #20
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8014254:	2300      	movs	r3, #0
 8014256:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8014258:	e005      	b.n	8014266 <pbuf_clen+0x1a>
    ++len;
 801425a:	89fb      	ldrh	r3, [r7, #14]
 801425c:	3301      	adds	r3, #1
 801425e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d1f6      	bne.n	801425a <pbuf_clen+0xe>
  }
  return len;
 801426c:	89fb      	ldrh	r3, [r7, #14]
}
 801426e:	4618      	mov	r0, r3
 8014270:	3714      	adds	r7, #20
 8014272:	46bd      	mov	sp, r7
 8014274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014278:	4770      	bx	lr
	...

0801427c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801427c:	b580      	push	{r7, lr}
 801427e:	b084      	sub	sp, #16
 8014280:	af00      	add	r7, sp, #0
 8014282:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d016      	beq.n	80142b8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801428a:	f00b fcf7 	bl	801fc7c <sys_arch_protect>
 801428e:	60f8      	str	r0, [r7, #12]
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	7b9b      	ldrb	r3, [r3, #14]
 8014294:	3301      	adds	r3, #1
 8014296:	b2da      	uxtb	r2, r3
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	739a      	strb	r2, [r3, #14]
 801429c:	68f8      	ldr	r0, [r7, #12]
 801429e:	f00b fcfb 	bl	801fc98 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	7b9b      	ldrb	r3, [r3, #14]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d106      	bne.n	80142b8 <pbuf_ref+0x3c>
 80142aa:	4b05      	ldr	r3, [pc, #20]	; (80142c0 <pbuf_ref+0x44>)
 80142ac:	f240 3242 	movw	r2, #834	; 0x342
 80142b0:	4904      	ldr	r1, [pc, #16]	; (80142c4 <pbuf_ref+0x48>)
 80142b2:	4805      	ldr	r0, [pc, #20]	; (80142c8 <pbuf_ref+0x4c>)
 80142b4:	f00d f880 	bl	80213b8 <iprintf>
  }
}
 80142b8:	bf00      	nop
 80142ba:	3710      	adds	r7, #16
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}
 80142c0:	0802465c 	.word	0x0802465c
 80142c4:	0802483c 	.word	0x0802483c
 80142c8:	080246bc 	.word	0x080246bc

080142cc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b084      	sub	sp, #16
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
 80142d4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d002      	beq.n	80142e2 <pbuf_cat+0x16>
 80142dc:	683b      	ldr	r3, [r7, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d107      	bne.n	80142f2 <pbuf_cat+0x26>
 80142e2:	4b20      	ldr	r3, [pc, #128]	; (8014364 <pbuf_cat+0x98>)
 80142e4:	f240 3259 	movw	r2, #857	; 0x359
 80142e8:	491f      	ldr	r1, [pc, #124]	; (8014368 <pbuf_cat+0x9c>)
 80142ea:	4820      	ldr	r0, [pc, #128]	; (801436c <pbuf_cat+0xa0>)
 80142ec:	f00d f864 	bl	80213b8 <iprintf>
 80142f0:	e034      	b.n	801435c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	60fb      	str	r3, [r7, #12]
 80142f6:	e00a      	b.n	801430e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	891a      	ldrh	r2, [r3, #8]
 80142fc:	683b      	ldr	r3, [r7, #0]
 80142fe:	891b      	ldrh	r3, [r3, #8]
 8014300:	4413      	add	r3, r2
 8014302:	b29a      	uxth	r2, r3
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	60fb      	str	r3, [r7, #12]
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	2b00      	cmp	r3, #0
 8014314:	d1f0      	bne.n	80142f8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	891a      	ldrh	r2, [r3, #8]
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	895b      	ldrh	r3, [r3, #10]
 801431e:	429a      	cmp	r2, r3
 8014320:	d006      	beq.n	8014330 <pbuf_cat+0x64>
 8014322:	4b10      	ldr	r3, [pc, #64]	; (8014364 <pbuf_cat+0x98>)
 8014324:	f240 3262 	movw	r2, #866	; 0x362
 8014328:	4911      	ldr	r1, [pc, #68]	; (8014370 <pbuf_cat+0xa4>)
 801432a:	4810      	ldr	r0, [pc, #64]	; (801436c <pbuf_cat+0xa0>)
 801432c:	f00d f844 	bl	80213b8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d006      	beq.n	8014346 <pbuf_cat+0x7a>
 8014338:	4b0a      	ldr	r3, [pc, #40]	; (8014364 <pbuf_cat+0x98>)
 801433a:	f240 3263 	movw	r2, #867	; 0x363
 801433e:	490d      	ldr	r1, [pc, #52]	; (8014374 <pbuf_cat+0xa8>)
 8014340:	480a      	ldr	r0, [pc, #40]	; (801436c <pbuf_cat+0xa0>)
 8014342:	f00d f839 	bl	80213b8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8014346:	68fb      	ldr	r3, [r7, #12]
 8014348:	891a      	ldrh	r2, [r3, #8]
 801434a:	683b      	ldr	r3, [r7, #0]
 801434c:	891b      	ldrh	r3, [r3, #8]
 801434e:	4413      	add	r3, r2
 8014350:	b29a      	uxth	r2, r3
 8014352:	68fb      	ldr	r3, [r7, #12]
 8014354:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8014356:	68fb      	ldr	r3, [r7, #12]
 8014358:	683a      	ldr	r2, [r7, #0]
 801435a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801435c:	3710      	adds	r7, #16
 801435e:	46bd      	mov	sp, r7
 8014360:	bd80      	pop	{r7, pc}
 8014362:	bf00      	nop
 8014364:	0802465c 	.word	0x0802465c
 8014368:	08024850 	.word	0x08024850
 801436c:	080246bc 	.word	0x080246bc
 8014370:	08024888 	.word	0x08024888
 8014374:	080248b8 	.word	0x080248b8

08014378 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b082      	sub	sp, #8
 801437c:	af00      	add	r7, sp, #0
 801437e:	6078      	str	r0, [r7, #4]
 8014380:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014382:	6839      	ldr	r1, [r7, #0]
 8014384:	6878      	ldr	r0, [r7, #4]
 8014386:	f7ff ffa1 	bl	80142cc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801438a:	6838      	ldr	r0, [r7, #0]
 801438c:	f7ff ff76 	bl	801427c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014390:	bf00      	nop
 8014392:	3708      	adds	r7, #8
 8014394:	46bd      	mov	sp, r7
 8014396:	bd80      	pop	{r7, pc}

08014398 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b086      	sub	sp, #24
 801439c:	af00      	add	r7, sp, #0
 801439e:	6078      	str	r0, [r7, #4]
 80143a0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80143a2:	2300      	movs	r3, #0
 80143a4:	617b      	str	r3, [r7, #20]
 80143a6:	2300      	movs	r3, #0
 80143a8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d008      	beq.n	80143c2 <pbuf_copy+0x2a>
 80143b0:	683b      	ldr	r3, [r7, #0]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d005      	beq.n	80143c2 <pbuf_copy+0x2a>
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	891a      	ldrh	r2, [r3, #8]
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	891b      	ldrh	r3, [r3, #8]
 80143be:	429a      	cmp	r2, r3
 80143c0:	d209      	bcs.n	80143d6 <pbuf_copy+0x3e>
 80143c2:	4b57      	ldr	r3, [pc, #348]	; (8014520 <pbuf_copy+0x188>)
 80143c4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80143c8:	4956      	ldr	r1, [pc, #344]	; (8014524 <pbuf_copy+0x18c>)
 80143ca:	4857      	ldr	r0, [pc, #348]	; (8014528 <pbuf_copy+0x190>)
 80143cc:	f00c fff4 	bl	80213b8 <iprintf>
 80143d0:	f06f 030f 	mvn.w	r3, #15
 80143d4:	e09f      	b.n	8014516 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	895b      	ldrh	r3, [r3, #10]
 80143da:	461a      	mov	r2, r3
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	1ad2      	subs	r2, r2, r3
 80143e0:	683b      	ldr	r3, [r7, #0]
 80143e2:	895b      	ldrh	r3, [r3, #10]
 80143e4:	4619      	mov	r1, r3
 80143e6:	693b      	ldr	r3, [r7, #16]
 80143e8:	1acb      	subs	r3, r1, r3
 80143ea:	429a      	cmp	r2, r3
 80143ec:	d306      	bcc.n	80143fc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	895b      	ldrh	r3, [r3, #10]
 80143f2:	461a      	mov	r2, r3
 80143f4:	693b      	ldr	r3, [r7, #16]
 80143f6:	1ad3      	subs	r3, r2, r3
 80143f8:	60fb      	str	r3, [r7, #12]
 80143fa:	e005      	b.n	8014408 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	895b      	ldrh	r3, [r3, #10]
 8014400:	461a      	mov	r2, r3
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	1ad3      	subs	r3, r2, r3
 8014406:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	685a      	ldr	r2, [r3, #4]
 801440c:	697b      	ldr	r3, [r7, #20]
 801440e:	18d0      	adds	r0, r2, r3
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	685a      	ldr	r2, [r3, #4]
 8014414:	693b      	ldr	r3, [r7, #16]
 8014416:	4413      	add	r3, r2
 8014418:	68fa      	ldr	r2, [r7, #12]
 801441a:	4619      	mov	r1, r3
 801441c:	f00d faeb 	bl	80219f6 <memcpy>
    offset_to += len;
 8014420:	697a      	ldr	r2, [r7, #20]
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	4413      	add	r3, r2
 8014426:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8014428:	693a      	ldr	r2, [r7, #16]
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	4413      	add	r3, r2
 801442e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	895b      	ldrh	r3, [r3, #10]
 8014434:	461a      	mov	r2, r3
 8014436:	697b      	ldr	r3, [r7, #20]
 8014438:	4293      	cmp	r3, r2
 801443a:	d906      	bls.n	801444a <pbuf_copy+0xb2>
 801443c:	4b38      	ldr	r3, [pc, #224]	; (8014520 <pbuf_copy+0x188>)
 801443e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8014442:	493a      	ldr	r1, [pc, #232]	; (801452c <pbuf_copy+0x194>)
 8014444:	4838      	ldr	r0, [pc, #224]	; (8014528 <pbuf_copy+0x190>)
 8014446:	f00c ffb7 	bl	80213b8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801444a:	683b      	ldr	r3, [r7, #0]
 801444c:	895b      	ldrh	r3, [r3, #10]
 801444e:	461a      	mov	r2, r3
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	4293      	cmp	r3, r2
 8014454:	d906      	bls.n	8014464 <pbuf_copy+0xcc>
 8014456:	4b32      	ldr	r3, [pc, #200]	; (8014520 <pbuf_copy+0x188>)
 8014458:	f240 32da 	movw	r2, #986	; 0x3da
 801445c:	4934      	ldr	r1, [pc, #208]	; (8014530 <pbuf_copy+0x198>)
 801445e:	4832      	ldr	r0, [pc, #200]	; (8014528 <pbuf_copy+0x190>)
 8014460:	f00c ffaa 	bl	80213b8 <iprintf>
    if (offset_from >= p_from->len) {
 8014464:	683b      	ldr	r3, [r7, #0]
 8014466:	895b      	ldrh	r3, [r3, #10]
 8014468:	461a      	mov	r2, r3
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	4293      	cmp	r3, r2
 801446e:	d304      	bcc.n	801447a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014470:	2300      	movs	r3, #0
 8014472:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014474:	683b      	ldr	r3, [r7, #0]
 8014476:	681b      	ldr	r3, [r3, #0]
 8014478:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	895b      	ldrh	r3, [r3, #10]
 801447e:	461a      	mov	r2, r3
 8014480:	697b      	ldr	r3, [r7, #20]
 8014482:	4293      	cmp	r3, r2
 8014484:	d114      	bne.n	80144b0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8014486:	2300      	movs	r3, #0
 8014488:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	2b00      	cmp	r3, #0
 8014494:	d10c      	bne.n	80144b0 <pbuf_copy+0x118>
 8014496:	683b      	ldr	r3, [r7, #0]
 8014498:	2b00      	cmp	r3, #0
 801449a:	d009      	beq.n	80144b0 <pbuf_copy+0x118>
 801449c:	4b20      	ldr	r3, [pc, #128]	; (8014520 <pbuf_copy+0x188>)
 801449e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80144a2:	4924      	ldr	r1, [pc, #144]	; (8014534 <pbuf_copy+0x19c>)
 80144a4:	4820      	ldr	r0, [pc, #128]	; (8014528 <pbuf_copy+0x190>)
 80144a6:	f00c ff87 	bl	80213b8 <iprintf>
 80144aa:	f06f 030f 	mvn.w	r3, #15
 80144ae:	e032      	b.n	8014516 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80144b0:	683b      	ldr	r3, [r7, #0]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d013      	beq.n	80144de <pbuf_copy+0x146>
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	895a      	ldrh	r2, [r3, #10]
 80144ba:	683b      	ldr	r3, [r7, #0]
 80144bc:	891b      	ldrh	r3, [r3, #8]
 80144be:	429a      	cmp	r2, r3
 80144c0:	d10d      	bne.n	80144de <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80144c2:	683b      	ldr	r3, [r7, #0]
 80144c4:	681b      	ldr	r3, [r3, #0]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d009      	beq.n	80144de <pbuf_copy+0x146>
 80144ca:	4b15      	ldr	r3, [pc, #84]	; (8014520 <pbuf_copy+0x188>)
 80144cc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80144d0:	4919      	ldr	r1, [pc, #100]	; (8014538 <pbuf_copy+0x1a0>)
 80144d2:	4815      	ldr	r0, [pc, #84]	; (8014528 <pbuf_copy+0x190>)
 80144d4:	f00c ff70 	bl	80213b8 <iprintf>
 80144d8:	f06f 0305 	mvn.w	r3, #5
 80144dc:	e01b      	b.n	8014516 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	2b00      	cmp	r3, #0
 80144e2:	d013      	beq.n	801450c <pbuf_copy+0x174>
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	895a      	ldrh	r2, [r3, #10]
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	891b      	ldrh	r3, [r3, #8]
 80144ec:	429a      	cmp	r2, r3
 80144ee:	d10d      	bne.n	801450c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d009      	beq.n	801450c <pbuf_copy+0x174>
 80144f8:	4b09      	ldr	r3, [pc, #36]	; (8014520 <pbuf_copy+0x188>)
 80144fa:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80144fe:	490e      	ldr	r1, [pc, #56]	; (8014538 <pbuf_copy+0x1a0>)
 8014500:	4809      	ldr	r0, [pc, #36]	; (8014528 <pbuf_copy+0x190>)
 8014502:	f00c ff59 	bl	80213b8 <iprintf>
 8014506:	f06f 0305 	mvn.w	r3, #5
 801450a:	e004      	b.n	8014516 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801450c:	683b      	ldr	r3, [r7, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	f47f af61 	bne.w	80143d6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8014514:	2300      	movs	r3, #0
}
 8014516:	4618      	mov	r0, r3
 8014518:	3718      	adds	r7, #24
 801451a:	46bd      	mov	sp, r7
 801451c:	bd80      	pop	{r7, pc}
 801451e:	bf00      	nop
 8014520:	0802465c 	.word	0x0802465c
 8014524:	08024904 	.word	0x08024904
 8014528:	080246bc 	.word	0x080246bc
 801452c:	08024934 	.word	0x08024934
 8014530:	0802494c 	.word	0x0802494c
 8014534:	08024968 	.word	0x08024968
 8014538:	08024978 	.word	0x08024978

0801453c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801453c:	b580      	push	{r7, lr}
 801453e:	b088      	sub	sp, #32
 8014540:	af00      	add	r7, sp, #0
 8014542:	60f8      	str	r0, [r7, #12]
 8014544:	60b9      	str	r1, [r7, #8]
 8014546:	4611      	mov	r1, r2
 8014548:	461a      	mov	r2, r3
 801454a:	460b      	mov	r3, r1
 801454c:	80fb      	strh	r3, [r7, #6]
 801454e:	4613      	mov	r3, r2
 8014550:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8014552:	2300      	movs	r3, #0
 8014554:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8014556:	2300      	movs	r3, #0
 8014558:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d108      	bne.n	8014572 <pbuf_copy_partial+0x36>
 8014560:	4b2b      	ldr	r3, [pc, #172]	; (8014610 <pbuf_copy_partial+0xd4>)
 8014562:	f240 420a 	movw	r2, #1034	; 0x40a
 8014566:	492b      	ldr	r1, [pc, #172]	; (8014614 <pbuf_copy_partial+0xd8>)
 8014568:	482b      	ldr	r0, [pc, #172]	; (8014618 <pbuf_copy_partial+0xdc>)
 801456a:	f00c ff25 	bl	80213b8 <iprintf>
 801456e:	2300      	movs	r3, #0
 8014570:	e04a      	b.n	8014608 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014572:	68bb      	ldr	r3, [r7, #8]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d108      	bne.n	801458a <pbuf_copy_partial+0x4e>
 8014578:	4b25      	ldr	r3, [pc, #148]	; (8014610 <pbuf_copy_partial+0xd4>)
 801457a:	f240 420b 	movw	r2, #1035	; 0x40b
 801457e:	4927      	ldr	r1, [pc, #156]	; (801461c <pbuf_copy_partial+0xe0>)
 8014580:	4825      	ldr	r0, [pc, #148]	; (8014618 <pbuf_copy_partial+0xdc>)
 8014582:	f00c ff19 	bl	80213b8 <iprintf>
 8014586:	2300      	movs	r3, #0
 8014588:	e03e      	b.n	8014608 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	61fb      	str	r3, [r7, #28]
 801458e:	e034      	b.n	80145fa <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014590:	88bb      	ldrh	r3, [r7, #4]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d00a      	beq.n	80145ac <pbuf_copy_partial+0x70>
 8014596:	69fb      	ldr	r3, [r7, #28]
 8014598:	895b      	ldrh	r3, [r3, #10]
 801459a:	88ba      	ldrh	r2, [r7, #4]
 801459c:	429a      	cmp	r2, r3
 801459e:	d305      	bcc.n	80145ac <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80145a0:	69fb      	ldr	r3, [r7, #28]
 80145a2:	895b      	ldrh	r3, [r3, #10]
 80145a4:	88ba      	ldrh	r2, [r7, #4]
 80145a6:	1ad3      	subs	r3, r2, r3
 80145a8:	80bb      	strh	r3, [r7, #4]
 80145aa:	e023      	b.n	80145f4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80145ac:	69fb      	ldr	r3, [r7, #28]
 80145ae:	895a      	ldrh	r2, [r3, #10]
 80145b0:	88bb      	ldrh	r3, [r7, #4]
 80145b2:	1ad3      	subs	r3, r2, r3
 80145b4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80145b6:	8b3a      	ldrh	r2, [r7, #24]
 80145b8:	88fb      	ldrh	r3, [r7, #6]
 80145ba:	429a      	cmp	r2, r3
 80145bc:	d901      	bls.n	80145c2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80145be:	88fb      	ldrh	r3, [r7, #6]
 80145c0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80145c2:	8b7b      	ldrh	r3, [r7, #26]
 80145c4:	68ba      	ldr	r2, [r7, #8]
 80145c6:	18d0      	adds	r0, r2, r3
 80145c8:	69fb      	ldr	r3, [r7, #28]
 80145ca:	685a      	ldr	r2, [r3, #4]
 80145cc:	88bb      	ldrh	r3, [r7, #4]
 80145ce:	4413      	add	r3, r2
 80145d0:	8b3a      	ldrh	r2, [r7, #24]
 80145d2:	4619      	mov	r1, r3
 80145d4:	f00d fa0f 	bl	80219f6 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80145d8:	8afa      	ldrh	r2, [r7, #22]
 80145da:	8b3b      	ldrh	r3, [r7, #24]
 80145dc:	4413      	add	r3, r2
 80145de:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80145e0:	8b7a      	ldrh	r2, [r7, #26]
 80145e2:	8b3b      	ldrh	r3, [r7, #24]
 80145e4:	4413      	add	r3, r2
 80145e6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80145e8:	88fa      	ldrh	r2, [r7, #6]
 80145ea:	8b3b      	ldrh	r3, [r7, #24]
 80145ec:	1ad3      	subs	r3, r2, r3
 80145ee:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80145f0:	2300      	movs	r3, #0
 80145f2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80145f4:	69fb      	ldr	r3, [r7, #28]
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	61fb      	str	r3, [r7, #28]
 80145fa:	88fb      	ldrh	r3, [r7, #6]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d002      	beq.n	8014606 <pbuf_copy_partial+0xca>
 8014600:	69fb      	ldr	r3, [r7, #28]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d1c4      	bne.n	8014590 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014606:	8afb      	ldrh	r3, [r7, #22]
}
 8014608:	4618      	mov	r0, r3
 801460a:	3720      	adds	r7, #32
 801460c:	46bd      	mov	sp, r7
 801460e:	bd80      	pop	{r7, pc}
 8014610:	0802465c 	.word	0x0802465c
 8014614:	080249a4 	.word	0x080249a4
 8014618:	080246bc 	.word	0x080246bc
 801461c:	080249c4 	.word	0x080249c4

08014620 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014620:	b580      	push	{r7, lr}
 8014622:	b084      	sub	sp, #16
 8014624:	af00      	add	r7, sp, #0
 8014626:	4603      	mov	r3, r0
 8014628:	603a      	str	r2, [r7, #0]
 801462a:	71fb      	strb	r3, [r7, #7]
 801462c:	460b      	mov	r3, r1
 801462e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014630:	683b      	ldr	r3, [r7, #0]
 8014632:	8919      	ldrh	r1, [r3, #8]
 8014634:	88ba      	ldrh	r2, [r7, #4]
 8014636:	79fb      	ldrb	r3, [r7, #7]
 8014638:	4618      	mov	r0, r3
 801463a:	f7ff fa95 	bl	8013b68 <pbuf_alloc>
 801463e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d101      	bne.n	801464a <pbuf_clone+0x2a>
    return NULL;
 8014646:	2300      	movs	r3, #0
 8014648:	e011      	b.n	801466e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801464a:	6839      	ldr	r1, [r7, #0]
 801464c:	68f8      	ldr	r0, [r7, #12]
 801464e:	f7ff fea3 	bl	8014398 <pbuf_copy>
 8014652:	4603      	mov	r3, r0
 8014654:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014656:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d006      	beq.n	801466c <pbuf_clone+0x4c>
 801465e:	4b06      	ldr	r3, [pc, #24]	; (8014678 <pbuf_clone+0x58>)
 8014660:	f240 5224 	movw	r2, #1316	; 0x524
 8014664:	4905      	ldr	r1, [pc, #20]	; (801467c <pbuf_clone+0x5c>)
 8014666:	4806      	ldr	r0, [pc, #24]	; (8014680 <pbuf_clone+0x60>)
 8014668:	f00c fea6 	bl	80213b8 <iprintf>
  return q;
 801466c:	68fb      	ldr	r3, [r7, #12]
}
 801466e:	4618      	mov	r0, r3
 8014670:	3710      	adds	r7, #16
 8014672:	46bd      	mov	sp, r7
 8014674:	bd80      	pop	{r7, pc}
 8014676:	bf00      	nop
 8014678:	0802465c 	.word	0x0802465c
 801467c:	08024ad0 	.word	0x08024ad0
 8014680:	080246bc 	.word	0x080246bc

08014684 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014684:	b580      	push	{r7, lr}
 8014686:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014688:	f00c fd1a 	bl	80210c0 <rand>
 801468c:	4603      	mov	r3, r0
 801468e:	b29b      	uxth	r3, r3
 8014690:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014694:	b29b      	uxth	r3, r3
 8014696:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801469a:	b29a      	uxth	r2, r3
 801469c:	4b01      	ldr	r3, [pc, #4]	; (80146a4 <tcp_init+0x20>)
 801469e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80146a0:	bf00      	nop
 80146a2:	bd80      	pop	{r7, pc}
 80146a4:	20000024 	.word	0x20000024

080146a8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b082      	sub	sp, #8
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80146b0:	687b      	ldr	r3, [r7, #4]
 80146b2:	7d1b      	ldrb	r3, [r3, #20]
 80146b4:	2b01      	cmp	r3, #1
 80146b6:	d105      	bne.n	80146c4 <tcp_free+0x1c>
 80146b8:	4b06      	ldr	r3, [pc, #24]	; (80146d4 <tcp_free+0x2c>)
 80146ba:	22d4      	movs	r2, #212	; 0xd4
 80146bc:	4906      	ldr	r1, [pc, #24]	; (80146d8 <tcp_free+0x30>)
 80146be:	4807      	ldr	r0, [pc, #28]	; (80146dc <tcp_free+0x34>)
 80146c0:	f00c fe7a 	bl	80213b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80146c4:	6879      	ldr	r1, [r7, #4]
 80146c6:	2001      	movs	r0, #1
 80146c8:	f7fe fe82 	bl	80133d0 <memp_free>
}
 80146cc:	bf00      	nop
 80146ce:	3708      	adds	r7, #8
 80146d0:	46bd      	mov	sp, r7
 80146d2:	bd80      	pop	{r7, pc}
 80146d4:	08024b5c 	.word	0x08024b5c
 80146d8:	08024b8c 	.word	0x08024b8c
 80146dc:	08024ba0 	.word	0x08024ba0

080146e0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80146e0:	b580      	push	{r7, lr}
 80146e2:	b082      	sub	sp, #8
 80146e4:	af00      	add	r7, sp, #0
 80146e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	7d1b      	ldrb	r3, [r3, #20]
 80146ec:	2b01      	cmp	r3, #1
 80146ee:	d105      	bne.n	80146fc <tcp_free_listen+0x1c>
 80146f0:	4b06      	ldr	r3, [pc, #24]	; (801470c <tcp_free_listen+0x2c>)
 80146f2:	22df      	movs	r2, #223	; 0xdf
 80146f4:	4906      	ldr	r1, [pc, #24]	; (8014710 <tcp_free_listen+0x30>)
 80146f6:	4807      	ldr	r0, [pc, #28]	; (8014714 <tcp_free_listen+0x34>)
 80146f8:	f00c fe5e 	bl	80213b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80146fc:	6879      	ldr	r1, [r7, #4]
 80146fe:	2002      	movs	r0, #2
 8014700:	f7fe fe66 	bl	80133d0 <memp_free>
}
 8014704:	bf00      	nop
 8014706:	3708      	adds	r7, #8
 8014708:	46bd      	mov	sp, r7
 801470a:	bd80      	pop	{r7, pc}
 801470c:	08024b5c 	.word	0x08024b5c
 8014710:	08024bc8 	.word	0x08024bc8
 8014714:	08024ba0 	.word	0x08024ba0

08014718 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014718:	b580      	push	{r7, lr}
 801471a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801471c:	f001 f8dc 	bl	80158d8 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014720:	4b07      	ldr	r3, [pc, #28]	; (8014740 <tcp_tmr+0x28>)
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	3301      	adds	r3, #1
 8014726:	b2da      	uxtb	r2, r3
 8014728:	4b05      	ldr	r3, [pc, #20]	; (8014740 <tcp_tmr+0x28>)
 801472a:	701a      	strb	r2, [r3, #0]
 801472c:	4b04      	ldr	r3, [pc, #16]	; (8014740 <tcp_tmr+0x28>)
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	f003 0301 	and.w	r3, r3, #1
 8014734:	2b00      	cmp	r3, #0
 8014736:	d001      	beq.n	801473c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014738:	f000 fd8c 	bl	8015254 <tcp_slowtmr>
  }
}
 801473c:	bf00      	nop
 801473e:	bd80      	pop	{r7, pc}
 8014740:	200122e5 	.word	0x200122e5

08014744 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014744:	b580      	push	{r7, lr}
 8014746:	b084      	sub	sp, #16
 8014748:	af00      	add	r7, sp, #0
 801474a:	6078      	str	r0, [r7, #4]
 801474c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801474e:	683b      	ldr	r3, [r7, #0]
 8014750:	2b00      	cmp	r3, #0
 8014752:	d105      	bne.n	8014760 <tcp_remove_listener+0x1c>
 8014754:	4b0d      	ldr	r3, [pc, #52]	; (801478c <tcp_remove_listener+0x48>)
 8014756:	22ff      	movs	r2, #255	; 0xff
 8014758:	490d      	ldr	r1, [pc, #52]	; (8014790 <tcp_remove_listener+0x4c>)
 801475a:	480e      	ldr	r0, [pc, #56]	; (8014794 <tcp_remove_listener+0x50>)
 801475c:	f00c fe2c 	bl	80213b8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	60fb      	str	r3, [r7, #12]
 8014764:	e00a      	b.n	801477c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801476a:	683a      	ldr	r2, [r7, #0]
 801476c:	429a      	cmp	r2, r3
 801476e:	d102      	bne.n	8014776 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2200      	movs	r2, #0
 8014774:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	68db      	ldr	r3, [r3, #12]
 801477a:	60fb      	str	r3, [r7, #12]
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	2b00      	cmp	r3, #0
 8014780:	d1f1      	bne.n	8014766 <tcp_remove_listener+0x22>
    }
  }
}
 8014782:	bf00      	nop
 8014784:	bf00      	nop
 8014786:	3710      	adds	r7, #16
 8014788:	46bd      	mov	sp, r7
 801478a:	bd80      	pop	{r7, pc}
 801478c:	08024b5c 	.word	0x08024b5c
 8014790:	08024be4 	.word	0x08024be4
 8014794:	08024ba0 	.word	0x08024ba0

08014798 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b084      	sub	sp, #16
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d106      	bne.n	80147b4 <tcp_listen_closed+0x1c>
 80147a6:	4b14      	ldr	r3, [pc, #80]	; (80147f8 <tcp_listen_closed+0x60>)
 80147a8:	f240 1211 	movw	r2, #273	; 0x111
 80147ac:	4913      	ldr	r1, [pc, #76]	; (80147fc <tcp_listen_closed+0x64>)
 80147ae:	4814      	ldr	r0, [pc, #80]	; (8014800 <tcp_listen_closed+0x68>)
 80147b0:	f00c fe02 	bl	80213b8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	7d1b      	ldrb	r3, [r3, #20]
 80147b8:	2b01      	cmp	r3, #1
 80147ba:	d006      	beq.n	80147ca <tcp_listen_closed+0x32>
 80147bc:	4b0e      	ldr	r3, [pc, #56]	; (80147f8 <tcp_listen_closed+0x60>)
 80147be:	f44f 7289 	mov.w	r2, #274	; 0x112
 80147c2:	4910      	ldr	r1, [pc, #64]	; (8014804 <tcp_listen_closed+0x6c>)
 80147c4:	480e      	ldr	r0, [pc, #56]	; (8014800 <tcp_listen_closed+0x68>)
 80147c6:	f00c fdf7 	bl	80213b8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80147ca:	2301      	movs	r3, #1
 80147cc:	60fb      	str	r3, [r7, #12]
 80147ce:	e00b      	b.n	80147e8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80147d0:	4a0d      	ldr	r2, [pc, #52]	; (8014808 <tcp_listen_closed+0x70>)
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	6879      	ldr	r1, [r7, #4]
 80147dc:	4618      	mov	r0, r3
 80147de:	f7ff ffb1 	bl	8014744 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	3301      	adds	r3, #1
 80147e6:	60fb      	str	r3, [r7, #12]
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	2b03      	cmp	r3, #3
 80147ec:	d9f0      	bls.n	80147d0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80147ee:	bf00      	nop
 80147f0:	bf00      	nop
 80147f2:	3710      	adds	r7, #16
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd80      	pop	{r7, pc}
 80147f8:	08024b5c 	.word	0x08024b5c
 80147fc:	08024c0c 	.word	0x08024c0c
 8014800:	08024ba0 	.word	0x08024ba0
 8014804:	08024c18 	.word	0x08024c18
 8014808:	08027038 	.word	0x08027038

0801480c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 801480c:	b5b0      	push	{r4, r5, r7, lr}
 801480e:	b088      	sub	sp, #32
 8014810:	af04      	add	r7, sp, #16
 8014812:	6078      	str	r0, [r7, #4]
 8014814:	460b      	mov	r3, r1
 8014816:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2b00      	cmp	r3, #0
 801481c:	d106      	bne.n	801482c <tcp_close_shutdown+0x20>
 801481e:	4b63      	ldr	r3, [pc, #396]	; (80149ac <tcp_close_shutdown+0x1a0>)
 8014820:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014824:	4962      	ldr	r1, [pc, #392]	; (80149b0 <tcp_close_shutdown+0x1a4>)
 8014826:	4863      	ldr	r0, [pc, #396]	; (80149b4 <tcp_close_shutdown+0x1a8>)
 8014828:	f00c fdc6 	bl	80213b8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801482c:	78fb      	ldrb	r3, [r7, #3]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d066      	beq.n	8014900 <tcp_close_shutdown+0xf4>
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	7d1b      	ldrb	r3, [r3, #20]
 8014836:	2b04      	cmp	r3, #4
 8014838:	d003      	beq.n	8014842 <tcp_close_shutdown+0x36>
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	7d1b      	ldrb	r3, [r3, #20]
 801483e:	2b07      	cmp	r3, #7
 8014840:	d15e      	bne.n	8014900 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014846:	2b00      	cmp	r3, #0
 8014848:	d104      	bne.n	8014854 <tcp_close_shutdown+0x48>
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801484e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014852:	d055      	beq.n	8014900 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	8b5b      	ldrh	r3, [r3, #26]
 8014858:	f003 0310 	and.w	r3, r3, #16
 801485c:	2b00      	cmp	r3, #0
 801485e:	d106      	bne.n	801486e <tcp_close_shutdown+0x62>
 8014860:	4b52      	ldr	r3, [pc, #328]	; (80149ac <tcp_close_shutdown+0x1a0>)
 8014862:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014866:	4954      	ldr	r1, [pc, #336]	; (80149b8 <tcp_close_shutdown+0x1ac>)
 8014868:	4852      	ldr	r0, [pc, #328]	; (80149b4 <tcp_close_shutdown+0x1a8>)
 801486a:	f00c fda5 	bl	80213b8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014872:	687b      	ldr	r3, [r7, #4]
 8014874:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014876:	687d      	ldr	r5, [r7, #4]
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	3304      	adds	r3, #4
 801487c:	687a      	ldr	r2, [r7, #4]
 801487e:	8ad2      	ldrh	r2, [r2, #22]
 8014880:	6879      	ldr	r1, [r7, #4]
 8014882:	8b09      	ldrh	r1, [r1, #24]
 8014884:	9102      	str	r1, [sp, #8]
 8014886:	9201      	str	r2, [sp, #4]
 8014888:	9300      	str	r3, [sp, #0]
 801488a:	462b      	mov	r3, r5
 801488c:	4622      	mov	r2, r4
 801488e:	4601      	mov	r1, r0
 8014890:	6878      	ldr	r0, [r7, #4]
 8014892:	f005 fe09 	bl	801a4a8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f001 fbd8 	bl	801604c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801489c:	4b47      	ldr	r3, [pc, #284]	; (80149bc <tcp_close_shutdown+0x1b0>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	687a      	ldr	r2, [r7, #4]
 80148a2:	429a      	cmp	r2, r3
 80148a4:	d105      	bne.n	80148b2 <tcp_close_shutdown+0xa6>
 80148a6:	4b45      	ldr	r3, [pc, #276]	; (80149bc <tcp_close_shutdown+0x1b0>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	68db      	ldr	r3, [r3, #12]
 80148ac:	4a43      	ldr	r2, [pc, #268]	; (80149bc <tcp_close_shutdown+0x1b0>)
 80148ae:	6013      	str	r3, [r2, #0]
 80148b0:	e013      	b.n	80148da <tcp_close_shutdown+0xce>
 80148b2:	4b42      	ldr	r3, [pc, #264]	; (80149bc <tcp_close_shutdown+0x1b0>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	60fb      	str	r3, [r7, #12]
 80148b8:	e00c      	b.n	80148d4 <tcp_close_shutdown+0xc8>
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	68db      	ldr	r3, [r3, #12]
 80148be:	687a      	ldr	r2, [r7, #4]
 80148c0:	429a      	cmp	r2, r3
 80148c2:	d104      	bne.n	80148ce <tcp_close_shutdown+0xc2>
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	68da      	ldr	r2, [r3, #12]
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	60da      	str	r2, [r3, #12]
 80148cc:	e005      	b.n	80148da <tcp_close_shutdown+0xce>
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	68db      	ldr	r3, [r3, #12]
 80148d2:	60fb      	str	r3, [r7, #12]
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d1ef      	bne.n	80148ba <tcp_close_shutdown+0xae>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2200      	movs	r2, #0
 80148de:	60da      	str	r2, [r3, #12]
 80148e0:	4b37      	ldr	r3, [pc, #220]	; (80149c0 <tcp_close_shutdown+0x1b4>)
 80148e2:	2201      	movs	r2, #1
 80148e4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80148e6:	4b37      	ldr	r3, [pc, #220]	; (80149c4 <tcp_close_shutdown+0x1b8>)
 80148e8:	681b      	ldr	r3, [r3, #0]
 80148ea:	687a      	ldr	r2, [r7, #4]
 80148ec:	429a      	cmp	r2, r3
 80148ee:	d102      	bne.n	80148f6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80148f0:	f004 f87e 	bl	80189f0 <tcp_trigger_input_pcb_close>
 80148f4:	e002      	b.n	80148fc <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80148f6:	6878      	ldr	r0, [r7, #4]
 80148f8:	f7ff fed6 	bl	80146a8 <tcp_free>
      }
      return ERR_OK;
 80148fc:	2300      	movs	r3, #0
 80148fe:	e050      	b.n	80149a2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	7d1b      	ldrb	r3, [r3, #20]
 8014904:	2b02      	cmp	r3, #2
 8014906:	d03b      	beq.n	8014980 <tcp_close_shutdown+0x174>
 8014908:	2b02      	cmp	r3, #2
 801490a:	dc44      	bgt.n	8014996 <tcp_close_shutdown+0x18a>
 801490c:	2b00      	cmp	r3, #0
 801490e:	d002      	beq.n	8014916 <tcp_close_shutdown+0x10a>
 8014910:	2b01      	cmp	r3, #1
 8014912:	d02a      	beq.n	801496a <tcp_close_shutdown+0x15e>
 8014914:	e03f      	b.n	8014996 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	8adb      	ldrh	r3, [r3, #22]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d021      	beq.n	8014962 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801491e:	4b2a      	ldr	r3, [pc, #168]	; (80149c8 <tcp_close_shutdown+0x1bc>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	687a      	ldr	r2, [r7, #4]
 8014924:	429a      	cmp	r2, r3
 8014926:	d105      	bne.n	8014934 <tcp_close_shutdown+0x128>
 8014928:	4b27      	ldr	r3, [pc, #156]	; (80149c8 <tcp_close_shutdown+0x1bc>)
 801492a:	681b      	ldr	r3, [r3, #0]
 801492c:	68db      	ldr	r3, [r3, #12]
 801492e:	4a26      	ldr	r2, [pc, #152]	; (80149c8 <tcp_close_shutdown+0x1bc>)
 8014930:	6013      	str	r3, [r2, #0]
 8014932:	e013      	b.n	801495c <tcp_close_shutdown+0x150>
 8014934:	4b24      	ldr	r3, [pc, #144]	; (80149c8 <tcp_close_shutdown+0x1bc>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	60bb      	str	r3, [r7, #8]
 801493a:	e00c      	b.n	8014956 <tcp_close_shutdown+0x14a>
 801493c:	68bb      	ldr	r3, [r7, #8]
 801493e:	68db      	ldr	r3, [r3, #12]
 8014940:	687a      	ldr	r2, [r7, #4]
 8014942:	429a      	cmp	r2, r3
 8014944:	d104      	bne.n	8014950 <tcp_close_shutdown+0x144>
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	68da      	ldr	r2, [r3, #12]
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	60da      	str	r2, [r3, #12]
 801494e:	e005      	b.n	801495c <tcp_close_shutdown+0x150>
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	68db      	ldr	r3, [r3, #12]
 8014954:	60bb      	str	r3, [r7, #8]
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d1ef      	bne.n	801493c <tcp_close_shutdown+0x130>
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	2200      	movs	r2, #0
 8014960:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014962:	6878      	ldr	r0, [r7, #4]
 8014964:	f7ff fea0 	bl	80146a8 <tcp_free>
      break;
 8014968:	e01a      	b.n	80149a0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801496a:	6878      	ldr	r0, [r7, #4]
 801496c:	f7ff ff14 	bl	8014798 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014970:	6879      	ldr	r1, [r7, #4]
 8014972:	4816      	ldr	r0, [pc, #88]	; (80149cc <tcp_close_shutdown+0x1c0>)
 8014974:	f001 fbba 	bl	80160ec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014978:	6878      	ldr	r0, [r7, #4]
 801497a:	f7ff feb1 	bl	80146e0 <tcp_free_listen>
      break;
 801497e:	e00f      	b.n	80149a0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014980:	6879      	ldr	r1, [r7, #4]
 8014982:	480e      	ldr	r0, [pc, #56]	; (80149bc <tcp_close_shutdown+0x1b0>)
 8014984:	f001 fbb2 	bl	80160ec <tcp_pcb_remove>
 8014988:	4b0d      	ldr	r3, [pc, #52]	; (80149c0 <tcp_close_shutdown+0x1b4>)
 801498a:	2201      	movs	r2, #1
 801498c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801498e:	6878      	ldr	r0, [r7, #4]
 8014990:	f7ff fe8a 	bl	80146a8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014994:	e004      	b.n	80149a0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014996:	6878      	ldr	r0, [r7, #4]
 8014998:	f000 f81a 	bl	80149d0 <tcp_close_shutdown_fin>
 801499c:	4603      	mov	r3, r0
 801499e:	e000      	b.n	80149a2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80149a0:	2300      	movs	r3, #0
}
 80149a2:	4618      	mov	r0, r3
 80149a4:	3710      	adds	r7, #16
 80149a6:	46bd      	mov	sp, r7
 80149a8:	bdb0      	pop	{r4, r5, r7, pc}
 80149aa:	bf00      	nop
 80149ac:	08024b5c 	.word	0x08024b5c
 80149b0:	08024c30 	.word	0x08024c30
 80149b4:	08024ba0 	.word	0x08024ba0
 80149b8:	08024c50 	.word	0x08024c50
 80149bc:	200122dc 	.word	0x200122dc
 80149c0:	200122e4 	.word	0x200122e4
 80149c4:	2001231c 	.word	0x2001231c
 80149c8:	200122d4 	.word	0x200122d4
 80149cc:	200122d8 	.word	0x200122d8

080149d0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	b084      	sub	sp, #16
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2b00      	cmp	r3, #0
 80149dc:	d106      	bne.n	80149ec <tcp_close_shutdown_fin+0x1c>
 80149de:	4b2e      	ldr	r3, [pc, #184]	; (8014a98 <tcp_close_shutdown_fin+0xc8>)
 80149e0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80149e4:	492d      	ldr	r1, [pc, #180]	; (8014a9c <tcp_close_shutdown_fin+0xcc>)
 80149e6:	482e      	ldr	r0, [pc, #184]	; (8014aa0 <tcp_close_shutdown_fin+0xd0>)
 80149e8:	f00c fce6 	bl	80213b8 <iprintf>

  switch (pcb->state) {
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	7d1b      	ldrb	r3, [r3, #20]
 80149f0:	2b07      	cmp	r3, #7
 80149f2:	d020      	beq.n	8014a36 <tcp_close_shutdown_fin+0x66>
 80149f4:	2b07      	cmp	r3, #7
 80149f6:	dc2b      	bgt.n	8014a50 <tcp_close_shutdown_fin+0x80>
 80149f8:	2b03      	cmp	r3, #3
 80149fa:	d002      	beq.n	8014a02 <tcp_close_shutdown_fin+0x32>
 80149fc:	2b04      	cmp	r3, #4
 80149fe:	d00d      	beq.n	8014a1c <tcp_close_shutdown_fin+0x4c>
 8014a00:	e026      	b.n	8014a50 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014a02:	6878      	ldr	r0, [r7, #4]
 8014a04:	f004 fe5e 	bl	80196c4 <tcp_send_fin>
 8014a08:	4603      	mov	r3, r0
 8014a0a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014a0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d11f      	bne.n	8014a54 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	2205      	movs	r2, #5
 8014a18:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014a1a:	e01b      	b.n	8014a54 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014a1c:	6878      	ldr	r0, [r7, #4]
 8014a1e:	f004 fe51 	bl	80196c4 <tcp_send_fin>
 8014a22:	4603      	mov	r3, r0
 8014a24:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d114      	bne.n	8014a58 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	2205      	movs	r2, #5
 8014a32:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014a34:	e010      	b.n	8014a58 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014a36:	6878      	ldr	r0, [r7, #4]
 8014a38:	f004 fe44 	bl	80196c4 <tcp_send_fin>
 8014a3c:	4603      	mov	r3, r0
 8014a3e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014a40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d109      	bne.n	8014a5c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	2209      	movs	r2, #9
 8014a4c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014a4e:	e005      	b.n	8014a5c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014a50:	2300      	movs	r3, #0
 8014a52:	e01c      	b.n	8014a8e <tcp_close_shutdown_fin+0xbe>
      break;
 8014a54:	bf00      	nop
 8014a56:	e002      	b.n	8014a5e <tcp_close_shutdown_fin+0x8e>
      break;
 8014a58:	bf00      	nop
 8014a5a:	e000      	b.n	8014a5e <tcp_close_shutdown_fin+0x8e>
      break;
 8014a5c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d103      	bne.n	8014a6e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f004 ff6a 	bl	8019940 <tcp_output>
 8014a6c:	e00d      	b.n	8014a8a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a76:	d108      	bne.n	8014a8a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014a78:	687b      	ldr	r3, [r7, #4]
 8014a7a:	8b5b      	ldrh	r3, [r3, #26]
 8014a7c:	f043 0308 	orr.w	r3, r3, #8
 8014a80:	b29a      	uxth	r2, r3
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014a86:	2300      	movs	r3, #0
 8014a88:	e001      	b.n	8014a8e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3710      	adds	r7, #16
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	08024b5c 	.word	0x08024b5c
 8014a9c:	08024c0c 	.word	0x08024c0c
 8014aa0:	08024ba0 	.word	0x08024ba0

08014aa4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b082      	sub	sp, #8
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d109      	bne.n	8014ac6 <tcp_close+0x22>
 8014ab2:	4b0f      	ldr	r3, [pc, #60]	; (8014af0 <tcp_close+0x4c>)
 8014ab4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014ab8:	490e      	ldr	r1, [pc, #56]	; (8014af4 <tcp_close+0x50>)
 8014aba:	480f      	ldr	r0, [pc, #60]	; (8014af8 <tcp_close+0x54>)
 8014abc:	f00c fc7c 	bl	80213b8 <iprintf>
 8014ac0:	f06f 030f 	mvn.w	r3, #15
 8014ac4:	e00f      	b.n	8014ae6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	7d1b      	ldrb	r3, [r3, #20]
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d006      	beq.n	8014adc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	8b5b      	ldrh	r3, [r3, #26]
 8014ad2:	f043 0310 	orr.w	r3, r3, #16
 8014ad6:	b29a      	uxth	r2, r3
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014adc:	2101      	movs	r1, #1
 8014ade:	6878      	ldr	r0, [r7, #4]
 8014ae0:	f7ff fe94 	bl	801480c <tcp_close_shutdown>
 8014ae4:	4603      	mov	r3, r0
}
 8014ae6:	4618      	mov	r0, r3
 8014ae8:	3708      	adds	r7, #8
 8014aea:	46bd      	mov	sp, r7
 8014aec:	bd80      	pop	{r7, pc}
 8014aee:	bf00      	nop
 8014af0:	08024b5c 	.word	0x08024b5c
 8014af4:	08024c6c 	.word	0x08024c6c
 8014af8:	08024ba0 	.word	0x08024ba0

08014afc <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b084      	sub	sp, #16
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	60f8      	str	r0, [r7, #12]
 8014b04:	60b9      	str	r1, [r7, #8]
 8014b06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	d109      	bne.n	8014b22 <tcp_shutdown+0x26>
 8014b0e:	4b26      	ldr	r3, [pc, #152]	; (8014ba8 <tcp_shutdown+0xac>)
 8014b10:	f240 2207 	movw	r2, #519	; 0x207
 8014b14:	4925      	ldr	r1, [pc, #148]	; (8014bac <tcp_shutdown+0xb0>)
 8014b16:	4826      	ldr	r0, [pc, #152]	; (8014bb0 <tcp_shutdown+0xb4>)
 8014b18:	f00c fc4e 	bl	80213b8 <iprintf>
 8014b1c:	f06f 030f 	mvn.w	r3, #15
 8014b20:	e03d      	b.n	8014b9e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	7d1b      	ldrb	r3, [r3, #20]
 8014b26:	2b01      	cmp	r3, #1
 8014b28:	d102      	bne.n	8014b30 <tcp_shutdown+0x34>
    return ERR_CONN;
 8014b2a:	f06f 030a 	mvn.w	r3, #10
 8014b2e:	e036      	b.n	8014b9e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014b30:	68bb      	ldr	r3, [r7, #8]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d01b      	beq.n	8014b6e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	8b5b      	ldrh	r3, [r3, #26]
 8014b3a:	f043 0310 	orr.w	r3, r3, #16
 8014b3e:	b29a      	uxth	r2, r3
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8014b44:	687b      	ldr	r3, [r7, #4]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d005      	beq.n	8014b56 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8014b4a:	2101      	movs	r1, #1
 8014b4c:	68f8      	ldr	r0, [r7, #12]
 8014b4e:	f7ff fe5d 	bl	801480c <tcp_close_shutdown>
 8014b52:	4603      	mov	r3, r0
 8014b54:	e023      	b.n	8014b9e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8014b56:	68fb      	ldr	r3, [r7, #12]
 8014b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d007      	beq.n	8014b6e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8014b5e:	68fb      	ldr	r3, [r7, #12]
 8014b60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014b62:	4618      	mov	r0, r3
 8014b64:	f7ff fae4 	bl	8014130 <pbuf_free>
      pcb->refused_data = NULL;
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	2200      	movs	r2, #0
 8014b6c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d013      	beq.n	8014b9c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8014b74:	68fb      	ldr	r3, [r7, #12]
 8014b76:	7d1b      	ldrb	r3, [r3, #20]
 8014b78:	2b04      	cmp	r3, #4
 8014b7a:	dc02      	bgt.n	8014b82 <tcp_shutdown+0x86>
 8014b7c:	2b03      	cmp	r3, #3
 8014b7e:	da02      	bge.n	8014b86 <tcp_shutdown+0x8a>
 8014b80:	e009      	b.n	8014b96 <tcp_shutdown+0x9a>
 8014b82:	2b07      	cmp	r3, #7
 8014b84:	d107      	bne.n	8014b96 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	4619      	mov	r1, r3
 8014b8c:	68f8      	ldr	r0, [r7, #12]
 8014b8e:	f7ff fe3d 	bl	801480c <tcp_close_shutdown>
 8014b92:	4603      	mov	r3, r0
 8014b94:	e003      	b.n	8014b9e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8014b96:	f06f 030a 	mvn.w	r3, #10
 8014b9a:	e000      	b.n	8014b9e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8014b9c:	2300      	movs	r3, #0
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	3710      	adds	r7, #16
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}
 8014ba6:	bf00      	nop
 8014ba8:	08024b5c 	.word	0x08024b5c
 8014bac:	08024c84 	.word	0x08024c84
 8014bb0:	08024ba0 	.word	0x08024ba0

08014bb4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b08e      	sub	sp, #56	; 0x38
 8014bb8:	af04      	add	r7, sp, #16
 8014bba:	6078      	str	r0, [r7, #4]
 8014bbc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d107      	bne.n	8014bd4 <tcp_abandon+0x20>
 8014bc4:	4b52      	ldr	r3, [pc, #328]	; (8014d10 <tcp_abandon+0x15c>)
 8014bc6:	f240 223d 	movw	r2, #573	; 0x23d
 8014bca:	4952      	ldr	r1, [pc, #328]	; (8014d14 <tcp_abandon+0x160>)
 8014bcc:	4852      	ldr	r0, [pc, #328]	; (8014d18 <tcp_abandon+0x164>)
 8014bce:	f00c fbf3 	bl	80213b8 <iprintf>
 8014bd2:	e099      	b.n	8014d08 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	7d1b      	ldrb	r3, [r3, #20]
 8014bd8:	2b01      	cmp	r3, #1
 8014bda:	d106      	bne.n	8014bea <tcp_abandon+0x36>
 8014bdc:	4b4c      	ldr	r3, [pc, #304]	; (8014d10 <tcp_abandon+0x15c>)
 8014bde:	f44f 7210 	mov.w	r2, #576	; 0x240
 8014be2:	494e      	ldr	r1, [pc, #312]	; (8014d1c <tcp_abandon+0x168>)
 8014be4:	484c      	ldr	r0, [pc, #304]	; (8014d18 <tcp_abandon+0x164>)
 8014be6:	f00c fbe7 	bl	80213b8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	7d1b      	ldrb	r3, [r3, #20]
 8014bee:	2b0a      	cmp	r3, #10
 8014bf0:	d107      	bne.n	8014c02 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8014bf2:	6879      	ldr	r1, [r7, #4]
 8014bf4:	484a      	ldr	r0, [pc, #296]	; (8014d20 <tcp_abandon+0x16c>)
 8014bf6:	f001 fa79 	bl	80160ec <tcp_pcb_remove>
    tcp_free(pcb);
 8014bfa:	6878      	ldr	r0, [r7, #4]
 8014bfc:	f7ff fd54 	bl	80146a8 <tcp_free>
 8014c00:	e082      	b.n	8014d08 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8014c02:	2300      	movs	r3, #0
 8014c04:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8014c06:	2300      	movs	r3, #0
 8014c08:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014c0e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c14:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014c1c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	691b      	ldr	r3, [r3, #16]
 8014c22:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	7d1b      	ldrb	r3, [r3, #20]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d126      	bne.n	8014c7a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	8adb      	ldrh	r3, [r3, #22]
 8014c30:	2b00      	cmp	r3, #0
 8014c32:	d02e      	beq.n	8014c92 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014c34:	4b3b      	ldr	r3, [pc, #236]	; (8014d24 <tcp_abandon+0x170>)
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	687a      	ldr	r2, [r7, #4]
 8014c3a:	429a      	cmp	r2, r3
 8014c3c:	d105      	bne.n	8014c4a <tcp_abandon+0x96>
 8014c3e:	4b39      	ldr	r3, [pc, #228]	; (8014d24 <tcp_abandon+0x170>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	68db      	ldr	r3, [r3, #12]
 8014c44:	4a37      	ldr	r2, [pc, #220]	; (8014d24 <tcp_abandon+0x170>)
 8014c46:	6013      	str	r3, [r2, #0]
 8014c48:	e013      	b.n	8014c72 <tcp_abandon+0xbe>
 8014c4a:	4b36      	ldr	r3, [pc, #216]	; (8014d24 <tcp_abandon+0x170>)
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	61fb      	str	r3, [r7, #28]
 8014c50:	e00c      	b.n	8014c6c <tcp_abandon+0xb8>
 8014c52:	69fb      	ldr	r3, [r7, #28]
 8014c54:	68db      	ldr	r3, [r3, #12]
 8014c56:	687a      	ldr	r2, [r7, #4]
 8014c58:	429a      	cmp	r2, r3
 8014c5a:	d104      	bne.n	8014c66 <tcp_abandon+0xb2>
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	68da      	ldr	r2, [r3, #12]
 8014c60:	69fb      	ldr	r3, [r7, #28]
 8014c62:	60da      	str	r2, [r3, #12]
 8014c64:	e005      	b.n	8014c72 <tcp_abandon+0xbe>
 8014c66:	69fb      	ldr	r3, [r7, #28]
 8014c68:	68db      	ldr	r3, [r3, #12]
 8014c6a:	61fb      	str	r3, [r7, #28]
 8014c6c:	69fb      	ldr	r3, [r7, #28]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	d1ef      	bne.n	8014c52 <tcp_abandon+0x9e>
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	2200      	movs	r2, #0
 8014c76:	60da      	str	r2, [r3, #12]
 8014c78:	e00b      	b.n	8014c92 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	8adb      	ldrh	r3, [r3, #22]
 8014c82:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014c84:	6879      	ldr	r1, [r7, #4]
 8014c86:	4828      	ldr	r0, [pc, #160]	; (8014d28 <tcp_abandon+0x174>)
 8014c88:	f001 fa30 	bl	80160ec <tcp_pcb_remove>
 8014c8c:	4b27      	ldr	r3, [pc, #156]	; (8014d2c <tcp_abandon+0x178>)
 8014c8e:	2201      	movs	r2, #1
 8014c90:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d004      	beq.n	8014ca4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	f000 fefa 	bl	8015a98 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d004      	beq.n	8014cb6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f000 fef1 	bl	8015a98 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d004      	beq.n	8014cc8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f000 fee8 	bl	8015a98 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8014cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d00e      	beq.n	8014cec <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8014cce:	6879      	ldr	r1, [r7, #4]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	3304      	adds	r3, #4
 8014cd4:	687a      	ldr	r2, [r7, #4]
 8014cd6:	8b12      	ldrh	r2, [r2, #24]
 8014cd8:	9202      	str	r2, [sp, #8]
 8014cda:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014cdc:	9201      	str	r2, [sp, #4]
 8014cde:	9300      	str	r3, [sp, #0]
 8014ce0:	460b      	mov	r3, r1
 8014ce2:	697a      	ldr	r2, [r7, #20]
 8014ce4:	69b9      	ldr	r1, [r7, #24]
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f005 fbde 	bl	801a4a8 <tcp_rst>
    }
    last_state = pcb->state;
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	7d1b      	ldrb	r3, [r3, #20]
 8014cf0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8014cf2:	6878      	ldr	r0, [r7, #4]
 8014cf4:	f7ff fcd8 	bl	80146a8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d004      	beq.n	8014d08 <tcp_abandon+0x154>
 8014cfe:	693b      	ldr	r3, [r7, #16]
 8014d00:	f06f 010c 	mvn.w	r1, #12
 8014d04:	68f8      	ldr	r0, [r7, #12]
 8014d06:	4798      	blx	r3
  }
}
 8014d08:	3728      	adds	r7, #40	; 0x28
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}
 8014d0e:	bf00      	nop
 8014d10:	08024b5c 	.word	0x08024b5c
 8014d14:	08024ca0 	.word	0x08024ca0
 8014d18:	08024ba0 	.word	0x08024ba0
 8014d1c:	08024cbc 	.word	0x08024cbc
 8014d20:	200122e0 	.word	0x200122e0
 8014d24:	200122d4 	.word	0x200122d4
 8014d28:	200122dc 	.word	0x200122dc
 8014d2c:	200122e4 	.word	0x200122e4

08014d30 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014d30:	b580      	push	{r7, lr}
 8014d32:	b082      	sub	sp, #8
 8014d34:	af00      	add	r7, sp, #0
 8014d36:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014d38:	2101      	movs	r1, #1
 8014d3a:	6878      	ldr	r0, [r7, #4]
 8014d3c:	f7ff ff3a 	bl	8014bb4 <tcp_abandon>
}
 8014d40:	bf00      	nop
 8014d42:	3708      	adds	r7, #8
 8014d44:	46bd      	mov	sp, r7
 8014d46:	bd80      	pop	{r7, pc}

08014d48 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b088      	sub	sp, #32
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	60f8      	str	r0, [r7, #12]
 8014d50:	60b9      	str	r1, [r7, #8]
 8014d52:	4613      	mov	r3, r2
 8014d54:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8014d56:	2304      	movs	r3, #4
 8014d58:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d101      	bne.n	8014d64 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8014d60:	4b48      	ldr	r3, [pc, #288]	; (8014e84 <tcp_bind+0x13c>)
 8014d62:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2b00      	cmp	r3, #0
 8014d68:	d109      	bne.n	8014d7e <tcp_bind+0x36>
 8014d6a:	4b47      	ldr	r3, [pc, #284]	; (8014e88 <tcp_bind+0x140>)
 8014d6c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8014d70:	4946      	ldr	r1, [pc, #280]	; (8014e8c <tcp_bind+0x144>)
 8014d72:	4847      	ldr	r0, [pc, #284]	; (8014e90 <tcp_bind+0x148>)
 8014d74:	f00c fb20 	bl	80213b8 <iprintf>
 8014d78:	f06f 030f 	mvn.w	r3, #15
 8014d7c:	e07e      	b.n	8014e7c <tcp_bind+0x134>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	7d1b      	ldrb	r3, [r3, #20]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d009      	beq.n	8014d9a <tcp_bind+0x52>
 8014d86:	4b40      	ldr	r3, [pc, #256]	; (8014e88 <tcp_bind+0x140>)
 8014d88:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014d8c:	4941      	ldr	r1, [pc, #260]	; (8014e94 <tcp_bind+0x14c>)
 8014d8e:	4840      	ldr	r0, [pc, #256]	; (8014e90 <tcp_bind+0x148>)
 8014d90:	f00c fb12 	bl	80213b8 <iprintf>
 8014d94:	f06f 0305 	mvn.w	r3, #5
 8014d98:	e070      	b.n	8014e7c <tcp_bind+0x134>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	7a5b      	ldrb	r3, [r3, #9]
 8014d9e:	f003 0304 	and.w	r3, r3, #4
 8014da2:	2b00      	cmp	r3, #0
 8014da4:	d001      	beq.n	8014daa <tcp_bind+0x62>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 8014da6:	2303      	movs	r3, #3
 8014da8:	61bb      	str	r3, [r7, #24]
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8014daa:	88fb      	ldrh	r3, [r7, #6]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d109      	bne.n	8014dc4 <tcp_bind+0x7c>
    port = tcp_new_port();
 8014db0:	f000 fa0a 	bl	80151c8 <tcp_new_port>
 8014db4:	4603      	mov	r3, r0
 8014db6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8014db8:	88fb      	ldrh	r3, [r7, #6]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	d141      	bne.n	8014e42 <tcp_bind+0xfa>
      return ERR_BUF;
 8014dbe:	f06f 0301 	mvn.w	r3, #1
 8014dc2:	e05b      	b.n	8014e7c <tcp_bind+0x134>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8014dc4:	2300      	movs	r3, #0
 8014dc6:	61fb      	str	r3, [r7, #28]
 8014dc8:	e037      	b.n	8014e3a <tcp_bind+0xf2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014dca:	4a33      	ldr	r2, [pc, #204]	; (8014e98 <tcp_bind+0x150>)
 8014dcc:	69fb      	ldr	r3, [r7, #28]
 8014dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014dd2:	681b      	ldr	r3, [r3, #0]
 8014dd4:	617b      	str	r3, [r7, #20]
 8014dd6:	e02a      	b.n	8014e2e <tcp_bind+0xe6>
        if (cpcb->local_port == port) {
 8014dd8:	697b      	ldr	r3, [r7, #20]
 8014dda:	8adb      	ldrh	r3, [r3, #22]
 8014ddc:	88fa      	ldrh	r2, [r7, #6]
 8014dde:	429a      	cmp	r2, r3
 8014de0:	d122      	bne.n	8014e28 <tcp_bind+0xe0>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	7a5b      	ldrb	r3, [r3, #9]
 8014de6:	f003 0304 	and.w	r3, r3, #4
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d005      	beq.n	8014dfa <tcp_bind+0xb2>
              !ip_get_option(cpcb, SOF_REUSEADDR))
 8014dee:	697b      	ldr	r3, [r7, #20]
 8014df0:	7a5b      	ldrb	r3, [r3, #9]
 8014df2:	f003 0304 	and.w	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8014df6:	2b00      	cmp	r3, #0
 8014df8:	d116      	bne.n	8014e28 <tcp_bind+0xe0>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8014dfa:	697b      	ldr	r3, [r7, #20]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d010      	beq.n	8014e22 <tcp_bind+0xda>
                (ip_addr_isany(&cpcb->local_ip) ||
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d00c      	beq.n	8014e22 <tcp_bind+0xda>
 8014e08:	68bb      	ldr	r3, [r7, #8]
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	d009      	beq.n	8014e22 <tcp_bind+0xda>
                 ip_addr_isany(ipaddr) ||
 8014e0e:	68bb      	ldr	r3, [r7, #8]
 8014e10:	681b      	ldr	r3, [r3, #0]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d005      	beq.n	8014e22 <tcp_bind+0xda>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	681a      	ldr	r2, [r3, #0]
 8014e1a:	68bb      	ldr	r3, [r7, #8]
 8014e1c:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d102      	bne.n	8014e28 <tcp_bind+0xe0>
              return ERR_USE;
 8014e22:	f06f 0307 	mvn.w	r3, #7
 8014e26:	e029      	b.n	8014e7c <tcp_bind+0x134>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	68db      	ldr	r3, [r3, #12]
 8014e2c:	617b      	str	r3, [r7, #20]
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d1d1      	bne.n	8014dd8 <tcp_bind+0x90>
    for (i = 0; i < max_pcb_list; i++) {
 8014e34:	69fb      	ldr	r3, [r7, #28]
 8014e36:	3301      	adds	r3, #1
 8014e38:	61fb      	str	r3, [r7, #28]
 8014e3a:	69fa      	ldr	r2, [r7, #28]
 8014e3c:	69bb      	ldr	r3, [r7, #24]
 8014e3e:	429a      	cmp	r2, r3
 8014e40:	dbc3      	blt.n	8014dca <tcp_bind+0x82>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8014e42:	68bb      	ldr	r3, [r7, #8]
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d00c      	beq.n	8014e62 <tcp_bind+0x11a>
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d008      	beq.n	8014e62 <tcp_bind+0x11a>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8014e50:	68bb      	ldr	r3, [r7, #8]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d002      	beq.n	8014e5c <tcp_bind+0x114>
 8014e56:	68bb      	ldr	r3, [r7, #8]
 8014e58:	681b      	ldr	r3, [r3, #0]
 8014e5a:	e000      	b.n	8014e5e <tcp_bind+0x116>
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	68fa      	ldr	r2, [r7, #12]
 8014e60:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	88fa      	ldrh	r2, [r7, #6]
 8014e66:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8014e68:	4b0c      	ldr	r3, [pc, #48]	; (8014e9c <tcp_bind+0x154>)
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	60da      	str	r2, [r3, #12]
 8014e70:	4a0a      	ldr	r2, [pc, #40]	; (8014e9c <tcp_bind+0x154>)
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	6013      	str	r3, [r2, #0]
 8014e76:	f005 fcd9 	bl	801a82c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8014e7a:	2300      	movs	r3, #0
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3720      	adds	r7, #32
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}
 8014e84:	08027070 	.word	0x08027070
 8014e88:	08024b5c 	.word	0x08024b5c
 8014e8c:	08024cf0 	.word	0x08024cf0
 8014e90:	08024ba0 	.word	0x08024ba0
 8014e94:	08024d08 	.word	0x08024d08
 8014e98:	08027038 	.word	0x08027038
 8014e9c:	200122d4 	.word	0x200122d4

08014ea0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b084      	sub	sp, #16
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	60f8      	str	r0, [r7, #12]
 8014ea8:	60b9      	str	r1, [r7, #8]
 8014eaa:	4613      	mov	r3, r2
 8014eac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8014eae:	68bb      	ldr	r3, [r7, #8]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d106      	bne.n	8014ec2 <tcp_accept_null+0x22>
 8014eb4:	4b07      	ldr	r3, [pc, #28]	; (8014ed4 <tcp_accept_null+0x34>)
 8014eb6:	f240 320f 	movw	r2, #783	; 0x30f
 8014eba:	4907      	ldr	r1, [pc, #28]	; (8014ed8 <tcp_accept_null+0x38>)
 8014ebc:	4807      	ldr	r0, [pc, #28]	; (8014edc <tcp_accept_null+0x3c>)
 8014ebe:	f00c fa7b 	bl	80213b8 <iprintf>

  tcp_abort(pcb);
 8014ec2:	68b8      	ldr	r0, [r7, #8]
 8014ec4:	f7ff ff34 	bl	8014d30 <tcp_abort>

  return ERR_ABRT;
 8014ec8:	f06f 030c 	mvn.w	r3, #12
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3710      	adds	r7, #16
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}
 8014ed4:	08024b5c 	.word	0x08024b5c
 8014ed8:	08024d30 	.word	0x08024d30
 8014edc:	08024ba0 	.word	0x08024ba0

08014ee0 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8014ee0:	b580      	push	{r7, lr}
 8014ee2:	b088      	sub	sp, #32
 8014ee4:	af00      	add	r7, sp, #0
 8014ee6:	60f8      	str	r0, [r7, #12]
 8014ee8:	460b      	mov	r3, r1
 8014eea:	607a      	str	r2, [r7, #4]
 8014eec:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8014ef2:	68fb      	ldr	r3, [r7, #12]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d109      	bne.n	8014f0c <tcp_listen_with_backlog_and_err+0x2c>
 8014ef8:	4b57      	ldr	r3, [pc, #348]	; (8015058 <tcp_listen_with_backlog_and_err+0x178>)
 8014efa:	f240 3259 	movw	r2, #857	; 0x359
 8014efe:	4957      	ldr	r1, [pc, #348]	; (801505c <tcp_listen_with_backlog_and_err+0x17c>)
 8014f00:	4857      	ldr	r0, [pc, #348]	; (8015060 <tcp_listen_with_backlog_and_err+0x180>)
 8014f02:	f00c fa59 	bl	80213b8 <iprintf>
 8014f06:	23f0      	movs	r3, #240	; 0xf0
 8014f08:	76fb      	strb	r3, [r7, #27]
 8014f0a:	e09a      	b.n	8015042 <tcp_listen_with_backlog_and_err+0x162>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	7d1b      	ldrb	r3, [r3, #20]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d009      	beq.n	8014f28 <tcp_listen_with_backlog_and_err+0x48>
 8014f14:	4b50      	ldr	r3, [pc, #320]	; (8015058 <tcp_listen_with_backlog_and_err+0x178>)
 8014f16:	f240 325a 	movw	r2, #858	; 0x35a
 8014f1a:	4952      	ldr	r1, [pc, #328]	; (8015064 <tcp_listen_with_backlog_and_err+0x184>)
 8014f1c:	4850      	ldr	r0, [pc, #320]	; (8015060 <tcp_listen_with_backlog_and_err+0x180>)
 8014f1e:	f00c fa4b 	bl	80213b8 <iprintf>
 8014f22:	23f1      	movs	r3, #241	; 0xf1
 8014f24:	76fb      	strb	r3, [r7, #27]
 8014f26:	e08c      	b.n	8015042 <tcp_listen_with_backlog_and_err+0x162>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8014f28:	68fb      	ldr	r3, [r7, #12]
 8014f2a:	7d1b      	ldrb	r3, [r3, #20]
 8014f2c:	2b01      	cmp	r3, #1
 8014f2e:	d104      	bne.n	8014f3a <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8014f34:	23f7      	movs	r3, #247	; 0xf7
 8014f36:	76fb      	strb	r3, [r7, #27]
    goto done;
 8014f38:	e083      	b.n	8015042 <tcp_listen_with_backlog_and_err+0x162>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 8014f3a:	68fb      	ldr	r3, [r7, #12]
 8014f3c:	7a5b      	ldrb	r3, [r3, #9]
 8014f3e:	f003 0304 	and.w	r3, r3, #4
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d01a      	beq.n	8014f7c <tcp_listen_with_backlog_and_err+0x9c>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014f46:	4b48      	ldr	r3, [pc, #288]	; (8015068 <tcp_listen_with_backlog_and_err+0x188>)
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	61fb      	str	r3, [r7, #28]
 8014f4c:	e013      	b.n	8014f76 <tcp_listen_with_backlog_and_err+0x96>
      if ((lpcb->local_port == pcb->local_port) &&
 8014f4e:	69fb      	ldr	r3, [r7, #28]
 8014f50:	8ada      	ldrh	r2, [r3, #22]
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	8adb      	ldrh	r3, [r3, #22]
 8014f56:	429a      	cmp	r2, r3
 8014f58:	d10a      	bne.n	8014f70 <tcp_listen_with_backlog_and_err+0x90>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
 8014f5a:	69fb      	ldr	r3, [r7, #28]
 8014f5c:	681a      	ldr	r2, [r3, #0]
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	681b      	ldr	r3, [r3, #0]
      if ((lpcb->local_port == pcb->local_port) &&
 8014f62:	429a      	cmp	r2, r3
 8014f64:	d104      	bne.n	8014f70 <tcp_listen_with_backlog_and_err+0x90>
        /* this address/port is already used */
        lpcb = NULL;
 8014f66:	2300      	movs	r3, #0
 8014f68:	61fb      	str	r3, [r7, #28]
        res = ERR_USE;
 8014f6a:	23f8      	movs	r3, #248	; 0xf8
 8014f6c:	76fb      	strb	r3, [r7, #27]
        goto done;
 8014f6e:	e068      	b.n	8015042 <tcp_listen_with_backlog_and_err+0x162>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014f70:	69fb      	ldr	r3, [r7, #28]
 8014f72:	68db      	ldr	r3, [r3, #12]
 8014f74:	61fb      	str	r3, [r7, #28]
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	2b00      	cmp	r3, #0
 8014f7a:	d1e8      	bne.n	8014f4e <tcp_listen_with_backlog_and_err+0x6e>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8014f7c:	2002      	movs	r0, #2
 8014f7e:	f7fe f9b1 	bl	80132e4 <memp_malloc>
 8014f82:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8014f84:	69fb      	ldr	r3, [r7, #28]
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d102      	bne.n	8014f90 <tcp_listen_with_backlog_and_err+0xb0>
    res = ERR_MEM;
 8014f8a:	23ff      	movs	r3, #255	; 0xff
 8014f8c:	76fb      	strb	r3, [r7, #27]
    goto done;
 8014f8e:	e058      	b.n	8015042 <tcp_listen_with_backlog_and_err+0x162>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8014f90:	68fb      	ldr	r3, [r7, #12]
 8014f92:	691a      	ldr	r2, [r3, #16]
 8014f94:	69fb      	ldr	r3, [r7, #28]
 8014f96:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	8ada      	ldrh	r2, [r3, #22]
 8014f9c:	69fb      	ldr	r3, [r7, #28]
 8014f9e:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8014fa0:	69fb      	ldr	r3, [r7, #28]
 8014fa2:	2201      	movs	r2, #1
 8014fa4:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	7d5a      	ldrb	r2, [r3, #21]
 8014faa:	69fb      	ldr	r3, [r7, #28]
 8014fac:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	7a5a      	ldrb	r2, [r3, #9]
 8014fb2:	69fb      	ldr	r3, [r7, #28]
 8014fb4:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8014fb6:	69fb      	ldr	r3, [r7, #28]
 8014fb8:	2200      	movs	r2, #0
 8014fba:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8014fbc:	68fb      	ldr	r3, [r7, #12]
 8014fbe:	7ada      	ldrb	r2, [r3, #11]
 8014fc0:	69fb      	ldr	r3, [r7, #28]
 8014fc2:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	7a9a      	ldrb	r2, [r3, #10]
 8014fc8:	69fb      	ldr	r3, [r7, #28]
 8014fca:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	681a      	ldr	r2, [r3, #0]
 8014fd0:	69fb      	ldr	r3, [r7, #28]
 8014fd2:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	8adb      	ldrh	r3, [r3, #22]
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d021      	beq.n	8015020 <tcp_listen_with_backlog_and_err+0x140>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8014fdc:	4b23      	ldr	r3, [pc, #140]	; (801506c <tcp_listen_with_backlog_and_err+0x18c>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	68fa      	ldr	r2, [r7, #12]
 8014fe2:	429a      	cmp	r2, r3
 8014fe4:	d105      	bne.n	8014ff2 <tcp_listen_with_backlog_and_err+0x112>
 8014fe6:	4b21      	ldr	r3, [pc, #132]	; (801506c <tcp_listen_with_backlog_and_err+0x18c>)
 8014fe8:	681b      	ldr	r3, [r3, #0]
 8014fea:	68db      	ldr	r3, [r3, #12]
 8014fec:	4a1f      	ldr	r2, [pc, #124]	; (801506c <tcp_listen_with_backlog_and_err+0x18c>)
 8014fee:	6013      	str	r3, [r2, #0]
 8014ff0:	e013      	b.n	801501a <tcp_listen_with_backlog_and_err+0x13a>
 8014ff2:	4b1e      	ldr	r3, [pc, #120]	; (801506c <tcp_listen_with_backlog_and_err+0x18c>)
 8014ff4:	681b      	ldr	r3, [r3, #0]
 8014ff6:	617b      	str	r3, [r7, #20]
 8014ff8:	e00c      	b.n	8015014 <tcp_listen_with_backlog_and_err+0x134>
 8014ffa:	697b      	ldr	r3, [r7, #20]
 8014ffc:	68db      	ldr	r3, [r3, #12]
 8014ffe:	68fa      	ldr	r2, [r7, #12]
 8015000:	429a      	cmp	r2, r3
 8015002:	d104      	bne.n	801500e <tcp_listen_with_backlog_and_err+0x12e>
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	68da      	ldr	r2, [r3, #12]
 8015008:	697b      	ldr	r3, [r7, #20]
 801500a:	60da      	str	r2, [r3, #12]
 801500c:	e005      	b.n	801501a <tcp_listen_with_backlog_and_err+0x13a>
 801500e:	697b      	ldr	r3, [r7, #20]
 8015010:	68db      	ldr	r3, [r3, #12]
 8015012:	617b      	str	r3, [r7, #20]
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d1ef      	bne.n	8014ffa <tcp_listen_with_backlog_and_err+0x11a>
 801501a:	68fb      	ldr	r3, [r7, #12]
 801501c:	2200      	movs	r2, #0
 801501e:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8015020:	68f8      	ldr	r0, [r7, #12]
 8015022:	f7ff fb41 	bl	80146a8 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8015026:	69fb      	ldr	r3, [r7, #28]
 8015028:	4a11      	ldr	r2, [pc, #68]	; (8015070 <tcp_listen_with_backlog_and_err+0x190>)
 801502a:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801502c:	4b0e      	ldr	r3, [pc, #56]	; (8015068 <tcp_listen_with_backlog_and_err+0x188>)
 801502e:	681a      	ldr	r2, [r3, #0]
 8015030:	69fb      	ldr	r3, [r7, #28]
 8015032:	60da      	str	r2, [r3, #12]
 8015034:	4a0c      	ldr	r2, [pc, #48]	; (8015068 <tcp_listen_with_backlog_and_err+0x188>)
 8015036:	69fb      	ldr	r3, [r7, #28]
 8015038:	6013      	str	r3, [r2, #0]
 801503a:	f005 fbf7 	bl	801a82c <tcp_timer_needed>
  res = ERR_OK;
 801503e:	2300      	movs	r3, #0
 8015040:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	2b00      	cmp	r3, #0
 8015046:	d002      	beq.n	801504e <tcp_listen_with_backlog_and_err+0x16e>
    *err = res;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	7efa      	ldrb	r2, [r7, #27]
 801504c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801504e:	69fb      	ldr	r3, [r7, #28]
}
 8015050:	4618      	mov	r0, r3
 8015052:	3720      	adds	r7, #32
 8015054:	46bd      	mov	sp, r7
 8015056:	bd80      	pop	{r7, pc}
 8015058:	08024b5c 	.word	0x08024b5c
 801505c:	08024d50 	.word	0x08024d50
 8015060:	08024ba0 	.word	0x08024ba0
 8015064:	08024d80 	.word	0x08024d80
 8015068:	200122d8 	.word	0x200122d8
 801506c:	200122d4 	.word	0x200122d4
 8015070:	08014ea1 	.word	0x08014ea1

08015074 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8015074:	b580      	push	{r7, lr}
 8015076:	b084      	sub	sp, #16
 8015078:	af00      	add	r7, sp, #0
 801507a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d106      	bne.n	8015090 <tcp_update_rcv_ann_wnd+0x1c>
 8015082:	4b25      	ldr	r3, [pc, #148]	; (8015118 <tcp_update_rcv_ann_wnd+0xa4>)
 8015084:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015088:	4924      	ldr	r1, [pc, #144]	; (801511c <tcp_update_rcv_ann_wnd+0xa8>)
 801508a:	4825      	ldr	r0, [pc, #148]	; (8015120 <tcp_update_rcv_ann_wnd+0xac>)
 801508c:	f00c f994 	bl	80213b8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015094:	687a      	ldr	r2, [r7, #4]
 8015096:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015098:	4413      	add	r3, r2
 801509a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150a0:	687a      	ldr	r2, [r7, #4]
 80150a2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80150a4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80150a8:	bf28      	it	cs
 80150aa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80150ae:	b292      	uxth	r2, r2
 80150b0:	4413      	add	r3, r2
 80150b2:	68fa      	ldr	r2, [r7, #12]
 80150b4:	1ad3      	subs	r3, r2, r3
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	db08      	blt.n	80150cc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150c6:	68fa      	ldr	r2, [r7, #12]
 80150c8:	1ad3      	subs	r3, r2, r3
 80150ca:	e020      	b.n	801510e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150d4:	1ad3      	subs	r3, r2, r3
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	dd03      	ble.n	80150e2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	2200      	movs	r2, #0
 80150de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80150e0:	e014      	b.n	801510c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ea:	1ad3      	subs	r3, r2, r3
 80150ec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80150ee:	68bb      	ldr	r3, [r7, #8]
 80150f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80150f4:	d306      	bcc.n	8015104 <tcp_update_rcv_ann_wnd+0x90>
 80150f6:	4b08      	ldr	r3, [pc, #32]	; (8015118 <tcp_update_rcv_ann_wnd+0xa4>)
 80150f8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80150fc:	4909      	ldr	r1, [pc, #36]	; (8015124 <tcp_update_rcv_ann_wnd+0xb0>)
 80150fe:	4808      	ldr	r0, [pc, #32]	; (8015120 <tcp_update_rcv_ann_wnd+0xac>)
 8015100:	f00c f95a 	bl	80213b8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	b29a      	uxth	r2, r3
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801510c:	2300      	movs	r3, #0
  }
}
 801510e:	4618      	mov	r0, r3
 8015110:	3710      	adds	r7, #16
 8015112:	46bd      	mov	sp, r7
 8015114:	bd80      	pop	{r7, pc}
 8015116:	bf00      	nop
 8015118:	08024b5c 	.word	0x08024b5c
 801511c:	08024db8 	.word	0x08024db8
 8015120:	08024ba0 	.word	0x08024ba0
 8015124:	08024ddc 	.word	0x08024ddc

08015128 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b084      	sub	sp, #16
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
 8015130:	460b      	mov	r3, r1
 8015132:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2b00      	cmp	r3, #0
 8015138:	d107      	bne.n	801514a <tcp_recved+0x22>
 801513a:	4b1f      	ldr	r3, [pc, #124]	; (80151b8 <tcp_recved+0x90>)
 801513c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8015140:	491e      	ldr	r1, [pc, #120]	; (80151bc <tcp_recved+0x94>)
 8015142:	481f      	ldr	r0, [pc, #124]	; (80151c0 <tcp_recved+0x98>)
 8015144:	f00c f938 	bl	80213b8 <iprintf>
 8015148:	e032      	b.n	80151b0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	7d1b      	ldrb	r3, [r3, #20]
 801514e:	2b01      	cmp	r3, #1
 8015150:	d106      	bne.n	8015160 <tcp_recved+0x38>
 8015152:	4b19      	ldr	r3, [pc, #100]	; (80151b8 <tcp_recved+0x90>)
 8015154:	f240 32d2 	movw	r2, #978	; 0x3d2
 8015158:	491a      	ldr	r1, [pc, #104]	; (80151c4 <tcp_recved+0x9c>)
 801515a:	4819      	ldr	r0, [pc, #100]	; (80151c0 <tcp_recved+0x98>)
 801515c:	f00c f92c 	bl	80213b8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015164:	887b      	ldrh	r3, [r7, #2]
 8015166:	4413      	add	r3, r2
 8015168:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801516a:	89fb      	ldrh	r3, [r7, #14]
 801516c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015170:	d804      	bhi.n	801517c <tcp_recved+0x54>
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015176:	89fa      	ldrh	r2, [r7, #14]
 8015178:	429a      	cmp	r2, r3
 801517a:	d204      	bcs.n	8015186 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015182:	851a      	strh	r2, [r3, #40]	; 0x28
 8015184:	e002      	b.n	801518c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	89fa      	ldrh	r2, [r7, #14]
 801518a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	f7ff ff71 	bl	8015074 <tcp_update_rcv_ann_wnd>
 8015192:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801519a:	d309      	bcc.n	80151b0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	8b5b      	ldrh	r3, [r3, #26]
 80151a0:	f043 0302 	orr.w	r3, r3, #2
 80151a4:	b29a      	uxth	r2, r3
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80151aa:	6878      	ldr	r0, [r7, #4]
 80151ac:	f004 fbc8 	bl	8019940 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80151b0:	3710      	adds	r7, #16
 80151b2:	46bd      	mov	sp, r7
 80151b4:	bd80      	pop	{r7, pc}
 80151b6:	bf00      	nop
 80151b8:	08024b5c 	.word	0x08024b5c
 80151bc:	08024df8 	.word	0x08024df8
 80151c0:	08024ba0 	.word	0x08024ba0
 80151c4:	08024e10 	.word	0x08024e10

080151c8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80151c8:	b480      	push	{r7}
 80151ca:	b083      	sub	sp, #12
 80151cc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80151ce:	2300      	movs	r3, #0
 80151d0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80151d2:	4b1e      	ldr	r3, [pc, #120]	; (801524c <tcp_new_port+0x84>)
 80151d4:	881b      	ldrh	r3, [r3, #0]
 80151d6:	3301      	adds	r3, #1
 80151d8:	b29a      	uxth	r2, r3
 80151da:	4b1c      	ldr	r3, [pc, #112]	; (801524c <tcp_new_port+0x84>)
 80151dc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80151de:	4b1b      	ldr	r3, [pc, #108]	; (801524c <tcp_new_port+0x84>)
 80151e0:	881b      	ldrh	r3, [r3, #0]
 80151e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80151e6:	4293      	cmp	r3, r2
 80151e8:	d103      	bne.n	80151f2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80151ea:	4b18      	ldr	r3, [pc, #96]	; (801524c <tcp_new_port+0x84>)
 80151ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80151f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80151f2:	2300      	movs	r3, #0
 80151f4:	71fb      	strb	r3, [r7, #7]
 80151f6:	e01e      	b.n	8015236 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80151f8:	79fb      	ldrb	r3, [r7, #7]
 80151fa:	4a15      	ldr	r2, [pc, #84]	; (8015250 <tcp_new_port+0x88>)
 80151fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	603b      	str	r3, [r7, #0]
 8015204:	e011      	b.n	801522a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8015206:	683b      	ldr	r3, [r7, #0]
 8015208:	8ada      	ldrh	r2, [r3, #22]
 801520a:	4b10      	ldr	r3, [pc, #64]	; (801524c <tcp_new_port+0x84>)
 801520c:	881b      	ldrh	r3, [r3, #0]
 801520e:	429a      	cmp	r2, r3
 8015210:	d108      	bne.n	8015224 <tcp_new_port+0x5c>
        n++;
 8015212:	88bb      	ldrh	r3, [r7, #4]
 8015214:	3301      	adds	r3, #1
 8015216:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8015218:	88bb      	ldrh	r3, [r7, #4]
 801521a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801521e:	d3d8      	bcc.n	80151d2 <tcp_new_port+0xa>
          return 0;
 8015220:	2300      	movs	r3, #0
 8015222:	e00d      	b.n	8015240 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	68db      	ldr	r3, [r3, #12]
 8015228:	603b      	str	r3, [r7, #0]
 801522a:	683b      	ldr	r3, [r7, #0]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d1ea      	bne.n	8015206 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8015230:	79fb      	ldrb	r3, [r7, #7]
 8015232:	3301      	adds	r3, #1
 8015234:	71fb      	strb	r3, [r7, #7]
 8015236:	79fb      	ldrb	r3, [r7, #7]
 8015238:	2b03      	cmp	r3, #3
 801523a:	d9dd      	bls.n	80151f8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801523c:	4b03      	ldr	r3, [pc, #12]	; (801524c <tcp_new_port+0x84>)
 801523e:	881b      	ldrh	r3, [r3, #0]
}
 8015240:	4618      	mov	r0, r3
 8015242:	370c      	adds	r7, #12
 8015244:	46bd      	mov	sp, r7
 8015246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524a:	4770      	bx	lr
 801524c:	20000024 	.word	0x20000024
 8015250:	08027038 	.word	0x08027038

08015254 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8015254:	b5b0      	push	{r4, r5, r7, lr}
 8015256:	b090      	sub	sp, #64	; 0x40
 8015258:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801525a:	2300      	movs	r3, #0
 801525c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8015260:	4b94      	ldr	r3, [pc, #592]	; (80154b4 <tcp_slowtmr+0x260>)
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	3301      	adds	r3, #1
 8015266:	4a93      	ldr	r2, [pc, #588]	; (80154b4 <tcp_slowtmr+0x260>)
 8015268:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801526a:	4b93      	ldr	r3, [pc, #588]	; (80154b8 <tcp_slowtmr+0x264>)
 801526c:	781b      	ldrb	r3, [r3, #0]
 801526e:	3301      	adds	r3, #1
 8015270:	b2da      	uxtb	r2, r3
 8015272:	4b91      	ldr	r3, [pc, #580]	; (80154b8 <tcp_slowtmr+0x264>)
 8015274:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8015276:	2300      	movs	r3, #0
 8015278:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801527a:	4b90      	ldr	r3, [pc, #576]	; (80154bc <tcp_slowtmr+0x268>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8015280:	e2b7      	b.n	80157f2 <tcp_slowtmr+0x59e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8015282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015284:	7d1b      	ldrb	r3, [r3, #20]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d106      	bne.n	8015298 <tcp_slowtmr+0x44>
 801528a:	4b8d      	ldr	r3, [pc, #564]	; (80154c0 <tcp_slowtmr+0x26c>)
 801528c:	f240 42be 	movw	r2, #1214	; 0x4be
 8015290:	498c      	ldr	r1, [pc, #560]	; (80154c4 <tcp_slowtmr+0x270>)
 8015292:	488d      	ldr	r0, [pc, #564]	; (80154c8 <tcp_slowtmr+0x274>)
 8015294:	f00c f890 	bl	80213b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801529a:	7d1b      	ldrb	r3, [r3, #20]
 801529c:	2b01      	cmp	r3, #1
 801529e:	d106      	bne.n	80152ae <tcp_slowtmr+0x5a>
 80152a0:	4b87      	ldr	r3, [pc, #540]	; (80154c0 <tcp_slowtmr+0x26c>)
 80152a2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80152a6:	4989      	ldr	r1, [pc, #548]	; (80154cc <tcp_slowtmr+0x278>)
 80152a8:	4887      	ldr	r0, [pc, #540]	; (80154c8 <tcp_slowtmr+0x274>)
 80152aa:	f00c f885 	bl	80213b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80152ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152b0:	7d1b      	ldrb	r3, [r3, #20]
 80152b2:	2b0a      	cmp	r3, #10
 80152b4:	d106      	bne.n	80152c4 <tcp_slowtmr+0x70>
 80152b6:	4b82      	ldr	r3, [pc, #520]	; (80154c0 <tcp_slowtmr+0x26c>)
 80152b8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80152bc:	4984      	ldr	r1, [pc, #528]	; (80154d0 <tcp_slowtmr+0x27c>)
 80152be:	4882      	ldr	r0, [pc, #520]	; (80154c8 <tcp_slowtmr+0x274>)
 80152c0:	f00c f87a 	bl	80213b8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80152c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152c6:	7f9a      	ldrb	r2, [r3, #30]
 80152c8:	4b7b      	ldr	r3, [pc, #492]	; (80154b8 <tcp_slowtmr+0x264>)
 80152ca:	781b      	ldrb	r3, [r3, #0]
 80152cc:	429a      	cmp	r2, r3
 80152ce:	d105      	bne.n	80152dc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80152d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80152d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152d6:	68db      	ldr	r3, [r3, #12]
 80152d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80152da:	e28a      	b.n	80157f2 <tcp_slowtmr+0x59e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80152dc:	4b76      	ldr	r3, [pc, #472]	; (80154b8 <tcp_slowtmr+0x264>)
 80152de:	781a      	ldrb	r2, [r3, #0]
 80152e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152e2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80152e4:	2300      	movs	r3, #0
 80152e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80152ea:	2300      	movs	r3, #0
 80152ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80152f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152f2:	7d1b      	ldrb	r3, [r3, #20]
 80152f4:	2b02      	cmp	r3, #2
 80152f6:	d10a      	bne.n	801530e <tcp_slowtmr+0xba>
 80152f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80152fe:	2b05      	cmp	r3, #5
 8015300:	d905      	bls.n	801530e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8015302:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015306:	3301      	adds	r3, #1
 8015308:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801530c:	e11e      	b.n	801554c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801530e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015310:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015314:	2b0b      	cmp	r3, #11
 8015316:	d905      	bls.n	8015324 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8015318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801531c:	3301      	adds	r3, #1
 801531e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015322:	e113      	b.n	801554c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8015324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015326:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801532a:	2b00      	cmp	r3, #0
 801532c:	d075      	beq.n	801541a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801532e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015332:	2b00      	cmp	r3, #0
 8015334:	d006      	beq.n	8015344 <tcp_slowtmr+0xf0>
 8015336:	4b62      	ldr	r3, [pc, #392]	; (80154c0 <tcp_slowtmr+0x26c>)
 8015338:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801533c:	4965      	ldr	r1, [pc, #404]	; (80154d4 <tcp_slowtmr+0x280>)
 801533e:	4862      	ldr	r0, [pc, #392]	; (80154c8 <tcp_slowtmr+0x274>)
 8015340:	f00c f83a 	bl	80213b8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8015344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015348:	2b00      	cmp	r3, #0
 801534a:	d106      	bne.n	801535a <tcp_slowtmr+0x106>
 801534c:	4b5c      	ldr	r3, [pc, #368]	; (80154c0 <tcp_slowtmr+0x26c>)
 801534e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8015352:	4961      	ldr	r1, [pc, #388]	; (80154d8 <tcp_slowtmr+0x284>)
 8015354:	485c      	ldr	r0, [pc, #368]	; (80154c8 <tcp_slowtmr+0x274>)
 8015356:	f00c f82f 	bl	80213b8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801535c:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8015360:	2b0b      	cmp	r3, #11
 8015362:	d905      	bls.n	8015370 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8015364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015368:	3301      	adds	r3, #1
 801536a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801536e:	e0ed      	b.n	801554c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015372:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8015376:	3b01      	subs	r3, #1
 8015378:	4a58      	ldr	r2, [pc, #352]	; (80154dc <tcp_slowtmr+0x288>)
 801537a:	5cd3      	ldrb	r3, [r2, r3]
 801537c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801537e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015380:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8015384:	7c7a      	ldrb	r2, [r7, #17]
 8015386:	429a      	cmp	r2, r3
 8015388:	d907      	bls.n	801539a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801538a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801538c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8015390:	3301      	adds	r3, #1
 8015392:	b2da      	uxtb	r2, r3
 8015394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015396:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801539c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80153a0:	7c7a      	ldrb	r2, [r7, #17]
 80153a2:	429a      	cmp	r2, r3
 80153a4:	f200 80d2 	bhi.w	801554c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80153a8:	2301      	movs	r3, #1
 80153aa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80153ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d108      	bne.n	80153c8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80153b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80153b8:	f005 f96a 	bl	801a690 <tcp_zero_window_probe>
 80153bc:	4603      	mov	r3, r0
 80153be:	2b00      	cmp	r3, #0
 80153c0:	d014      	beq.n	80153ec <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80153c2:	2300      	movs	r3, #0
 80153c4:	623b      	str	r3, [r7, #32]
 80153c6:	e011      	b.n	80153ec <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80153c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80153ce:	4619      	mov	r1, r3
 80153d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80153d2:	f004 f82f 	bl	8019434 <tcp_split_unsent_seg>
 80153d6:	4603      	mov	r3, r0
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d107      	bne.n	80153ec <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80153dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80153de:	f004 faaf 	bl	8019940 <tcp_output>
 80153e2:	4603      	mov	r3, r0
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	d101      	bne.n	80153ec <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80153e8:	2300      	movs	r3, #0
 80153ea:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80153ec:	6a3b      	ldr	r3, [r7, #32]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	f000 80ac 	beq.w	801554c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80153f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153f6:	2200      	movs	r2, #0
 80153f8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80153fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153fe:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8015402:	2b06      	cmp	r3, #6
 8015404:	f200 80a2 	bhi.w	801554c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8015408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801540a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 801540e:	3301      	adds	r3, #1
 8015410:	b2da      	uxtb	r2, r3
 8015412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015414:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
 8015418:	e098      	b.n	801554c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801541c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015420:	2b00      	cmp	r3, #0
 8015422:	db0f      	blt.n	8015444 <tcp_slowtmr+0x1f0>
 8015424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015426:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801542a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801542e:	4293      	cmp	r3, r2
 8015430:	d008      	beq.n	8015444 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8015432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015434:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015438:	b29b      	uxth	r3, r3
 801543a:	3301      	adds	r3, #1
 801543c:	b29b      	uxth	r3, r3
 801543e:	b21a      	sxth	r2, r3
 8015440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015442:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8015444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015446:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801544a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801544c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015450:	429a      	cmp	r2, r3
 8015452:	db7b      	blt.n	801554c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8015454:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015456:	f004 fd67 	bl	8019f28 <tcp_rexmit_rto_prepare>
 801545a:	4603      	mov	r3, r0
 801545c:	2b00      	cmp	r3, #0
 801545e:	d007      	beq.n	8015470 <tcp_slowtmr+0x21c>
 8015460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015464:	2b00      	cmp	r3, #0
 8015466:	d171      	bne.n	801554c <tcp_slowtmr+0x2f8>
 8015468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801546a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801546c:	2b00      	cmp	r3, #0
 801546e:	d06d      	beq.n	801554c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8015470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015472:	7d1b      	ldrb	r3, [r3, #20]
 8015474:	2b02      	cmp	r3, #2
 8015476:	d03a      	beq.n	80154ee <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801547a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801547e:	2b0c      	cmp	r3, #12
 8015480:	bf28      	it	cs
 8015482:	230c      	movcs	r3, #12
 8015484:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8015486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015488:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801548c:	10db      	asrs	r3, r3, #3
 801548e:	b21b      	sxth	r3, r3
 8015490:	461a      	mov	r2, r3
 8015492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015494:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015498:	4413      	add	r3, r2
 801549a:	7efa      	ldrb	r2, [r7, #27]
 801549c:	4910      	ldr	r1, [pc, #64]	; (80154e0 <tcp_slowtmr+0x28c>)
 801549e:	5c8a      	ldrb	r2, [r1, r2]
 80154a0:	4093      	lsls	r3, r2
 80154a2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80154aa:	4293      	cmp	r3, r2
 80154ac:	dc1a      	bgt.n	80154e4 <tcp_slowtmr+0x290>
 80154ae:	697b      	ldr	r3, [r7, #20]
 80154b0:	b21a      	sxth	r2, r3
 80154b2:	e019      	b.n	80154e8 <tcp_slowtmr+0x294>
 80154b4:	200122d0 	.word	0x200122d0
 80154b8:	200122e6 	.word	0x200122e6
 80154bc:	200122dc 	.word	0x200122dc
 80154c0:	08024b5c 	.word	0x08024b5c
 80154c4:	08024ea0 	.word	0x08024ea0
 80154c8:	08024ba0 	.word	0x08024ba0
 80154cc:	08024ecc 	.word	0x08024ecc
 80154d0:	08024ef8 	.word	0x08024ef8
 80154d4:	08024f28 	.word	0x08024f28
 80154d8:	08024f5c 	.word	0x08024f5c
 80154dc:	08027030 	.word	0x08027030
 80154e0:	08027020 	.word	0x08027020
 80154e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80154e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80154ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f0:	2200      	movs	r2, #0
 80154f2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80154f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80154fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015500:	4293      	cmp	r3, r2
 8015502:	bf28      	it	cs
 8015504:	4613      	movcs	r3, r2
 8015506:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8015508:	8a7b      	ldrh	r3, [r7, #18]
 801550a:	085b      	lsrs	r3, r3, #1
 801550c:	b29a      	uxth	r2, r3
 801550e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015510:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8015514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015516:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801551c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801551e:	005b      	lsls	r3, r3, #1
 8015520:	b29b      	uxth	r3, r3
 8015522:	429a      	cmp	r2, r3
 8015524:	d206      	bcs.n	8015534 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8015526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801552a:	005b      	lsls	r3, r3, #1
 801552c:	b29a      	uxth	r2, r3
 801552e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015530:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8015534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015536:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8015538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801553a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015540:	2200      	movs	r2, #0
 8015542:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8015546:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015548:	f004 fd5e 	bl	801a008 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801554e:	7d1b      	ldrb	r3, [r3, #20]
 8015550:	2b06      	cmp	r3, #6
 8015552:	d111      	bne.n	8015578 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8015554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015556:	8b5b      	ldrh	r3, [r3, #26]
 8015558:	f003 0310 	and.w	r3, r3, #16
 801555c:	2b00      	cmp	r3, #0
 801555e:	d00b      	beq.n	8015578 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015560:	4b98      	ldr	r3, [pc, #608]	; (80157c4 <tcp_slowtmr+0x570>)
 8015562:	681a      	ldr	r2, [r3, #0]
 8015564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015566:	6a1b      	ldr	r3, [r3, #32]
 8015568:	1ad3      	subs	r3, r2, r3
 801556a:	2b28      	cmp	r3, #40	; 0x28
 801556c:	d904      	bls.n	8015578 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801556e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015572:	3301      	adds	r3, #1
 8015574:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557a:	7a5b      	ldrb	r3, [r3, #9]
 801557c:	f003 0308 	and.w	r3, r3, #8
 8015580:	2b00      	cmp	r3, #0
 8015582:	d053      	beq.n	801562c <tcp_slowtmr+0x3d8>
        ((pcb->state == ESTABLISHED) ||
 8015584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015586:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015588:	2b04      	cmp	r3, #4
 801558a:	d003      	beq.n	8015594 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801558c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801558e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015590:	2b07      	cmp	r3, #7
 8015592:	d14b      	bne.n	801562c <tcp_slowtmr+0x3d8>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015594:	4b8b      	ldr	r3, [pc, #556]	; (80157c4 <tcp_slowtmr+0x570>)
 8015596:	681a      	ldr	r2, [r3, #0]
 8015598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559a:	6a1b      	ldr	r3, [r3, #32]
 801559c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801559e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155a0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80155a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80155aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80155ac:	f8d0 0098 	ldr.w	r0, [r0, #152]	; 0x98
 80155b0:	fb00 f303 	mul.w	r3, r0, r3
 80155b4:	440b      	add	r3, r1
 80155b6:	4984      	ldr	r1, [pc, #528]	; (80157c8 <tcp_slowtmr+0x574>)
 80155b8:	fba1 1303 	umull	r1, r3, r1, r3
 80155bc:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80155be:	429a      	cmp	r2, r3
 80155c0:	d90a      	bls.n	80155d8 <tcp_slowtmr+0x384>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80155c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155c6:	3301      	adds	r3, #1
 80155c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80155cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80155d0:	3301      	adds	r3, #1
 80155d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80155d6:	e029      	b.n	801562c <tcp_slowtmr+0x3d8>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80155d8:	4b7a      	ldr	r3, [pc, #488]	; (80157c4 <tcp_slowtmr+0x570>)
 80155da:	681a      	ldr	r2, [r3, #0]
 80155dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155de:	6a1b      	ldr	r3, [r3, #32]
 80155e0:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80155e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155e4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80155e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ea:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 80155ee:	4618      	mov	r0, r3
 80155f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80155f6:	fb00 f303 	mul.w	r3, r0, r3
 80155fa:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80155fc:	4972      	ldr	r1, [pc, #456]	; (80157c8 <tcp_slowtmr+0x574>)
 80155fe:	fba1 1303 	umull	r1, r3, r1, r3
 8015602:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015604:	429a      	cmp	r2, r3
 8015606:	d911      	bls.n	801562c <tcp_slowtmr+0x3d8>
        err = tcp_keepalive(pcb);
 8015608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801560a:	f005 f801 	bl	801a610 <tcp_keepalive>
 801560e:	4603      	mov	r3, r0
 8015610:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8015614:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015618:	2b00      	cmp	r3, #0
 801561a:	d107      	bne.n	801562c <tcp_slowtmr+0x3d8>
          pcb->keep_cnt_sent++;
 801561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801561e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8015622:	3301      	adds	r3, #1
 8015624:	b2da      	uxtb	r2, r3
 8015626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015628:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801562e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015630:	2b00      	cmp	r3, #0
 8015632:	d011      	beq.n	8015658 <tcp_slowtmr+0x404>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8015634:	4b63      	ldr	r3, [pc, #396]	; (80157c4 <tcp_slowtmr+0x570>)
 8015636:	681a      	ldr	r2, [r3, #0]
 8015638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801563a:	6a1b      	ldr	r3, [r3, #32]
 801563c:	1ad2      	subs	r2, r2, r3
 801563e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015640:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8015644:	4619      	mov	r1, r3
 8015646:	460b      	mov	r3, r1
 8015648:	005b      	lsls	r3, r3, #1
 801564a:	440b      	add	r3, r1
 801564c:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801564e:	429a      	cmp	r2, r3
 8015650:	d302      	bcc.n	8015658 <tcp_slowtmr+0x404>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8015652:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015654:	f000 feae 	bl	80163b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8015658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565a:	7d1b      	ldrb	r3, [r3, #20]
 801565c:	2b03      	cmp	r3, #3
 801565e:	d10b      	bne.n	8015678 <tcp_slowtmr+0x424>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015660:	4b58      	ldr	r3, [pc, #352]	; (80157c4 <tcp_slowtmr+0x570>)
 8015662:	681a      	ldr	r2, [r3, #0]
 8015664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015666:	6a1b      	ldr	r3, [r3, #32]
 8015668:	1ad3      	subs	r3, r2, r3
 801566a:	2b28      	cmp	r3, #40	; 0x28
 801566c:	d904      	bls.n	8015678 <tcp_slowtmr+0x424>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801566e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015672:	3301      	adds	r3, #1
 8015674:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8015678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801567a:	7d1b      	ldrb	r3, [r3, #20]
 801567c:	2b09      	cmp	r3, #9
 801567e:	d10b      	bne.n	8015698 <tcp_slowtmr+0x444>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015680:	4b50      	ldr	r3, [pc, #320]	; (80157c4 <tcp_slowtmr+0x570>)
 8015682:	681a      	ldr	r2, [r3, #0]
 8015684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015686:	6a1b      	ldr	r3, [r3, #32]
 8015688:	1ad3      	subs	r3, r2, r3
 801568a:	2bf0      	cmp	r3, #240	; 0xf0
 801568c:	d904      	bls.n	8015698 <tcp_slowtmr+0x444>
        ++pcb_remove;
 801568e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015692:	3301      	adds	r3, #1
 8015694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801569c:	2b00      	cmp	r3, #0
 801569e:	d060      	beq.n	8015762 <tcp_slowtmr+0x50e>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80156a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80156a6:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80156a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156aa:	f000 fccf 	bl	801604c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80156ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d010      	beq.n	80156d6 <tcp_slowtmr+0x482>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80156b4:	4b45      	ldr	r3, [pc, #276]	; (80157cc <tcp_slowtmr+0x578>)
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156ba:	429a      	cmp	r2, r3
 80156bc:	d106      	bne.n	80156cc <tcp_slowtmr+0x478>
 80156be:	4b44      	ldr	r3, [pc, #272]	; (80157d0 <tcp_slowtmr+0x57c>)
 80156c0:	f240 526d 	movw	r2, #1389	; 0x56d
 80156c4:	4943      	ldr	r1, [pc, #268]	; (80157d4 <tcp_slowtmr+0x580>)
 80156c6:	4844      	ldr	r0, [pc, #272]	; (80157d8 <tcp_slowtmr+0x584>)
 80156c8:	f00b fe76 	bl	80213b8 <iprintf>
        prev->next = pcb->next;
 80156cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ce:	68da      	ldr	r2, [r3, #12]
 80156d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d2:	60da      	str	r2, [r3, #12]
 80156d4:	e00f      	b.n	80156f6 <tcp_slowtmr+0x4a2>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80156d6:	4b3d      	ldr	r3, [pc, #244]	; (80157cc <tcp_slowtmr+0x578>)
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156dc:	429a      	cmp	r2, r3
 80156de:	d006      	beq.n	80156ee <tcp_slowtmr+0x49a>
 80156e0:	4b3b      	ldr	r3, [pc, #236]	; (80157d0 <tcp_slowtmr+0x57c>)
 80156e2:	f240 5271 	movw	r2, #1393	; 0x571
 80156e6:	493d      	ldr	r1, [pc, #244]	; (80157dc <tcp_slowtmr+0x588>)
 80156e8:	483b      	ldr	r0, [pc, #236]	; (80157d8 <tcp_slowtmr+0x584>)
 80156ea:	f00b fe65 	bl	80213b8 <iprintf>
        tcp_active_pcbs = pcb->next;
 80156ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f0:	68db      	ldr	r3, [r3, #12]
 80156f2:	4a36      	ldr	r2, [pc, #216]	; (80157cc <tcp_slowtmr+0x578>)
 80156f4:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80156f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d013      	beq.n	8015726 <tcp_slowtmr+0x4d2>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80156fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015700:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8015702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015704:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8015706:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8015708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570a:	3304      	adds	r3, #4
 801570c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801570e:	8ad2      	ldrh	r2, [r2, #22]
 8015710:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015712:	8b09      	ldrh	r1, [r1, #24]
 8015714:	9102      	str	r1, [sp, #8]
 8015716:	9201      	str	r2, [sp, #4]
 8015718:	9300      	str	r3, [sp, #0]
 801571a:	462b      	mov	r3, r5
 801571c:	4622      	mov	r2, r4
 801571e:	4601      	mov	r1, r0
 8015720:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015722:	f004 fec1 	bl	801a4a8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8015726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015728:	691b      	ldr	r3, [r3, #16]
 801572a:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801572c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801572e:	7d1b      	ldrb	r3, [r3, #20]
 8015730:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8015732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015734:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8015736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015738:	68db      	ldr	r3, [r3, #12]
 801573a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801573c:	6838      	ldr	r0, [r7, #0]
 801573e:	f7fe ffb3 	bl	80146a8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8015742:	4b27      	ldr	r3, [pc, #156]	; (80157e0 <tcp_slowtmr+0x58c>)
 8015744:	2200      	movs	r2, #0
 8015746:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8015748:	68fb      	ldr	r3, [r7, #12]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d004      	beq.n	8015758 <tcp_slowtmr+0x504>
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	f06f 010c 	mvn.w	r1, #12
 8015754:	68b8      	ldr	r0, [r7, #8]
 8015756:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8015758:	4b21      	ldr	r3, [pc, #132]	; (80157e0 <tcp_slowtmr+0x58c>)
 801575a:	781b      	ldrb	r3, [r3, #0]
 801575c:	2b00      	cmp	r3, #0
 801575e:	d048      	beq.n	80157f2 <tcp_slowtmr+0x59e>
        goto tcp_slowtmr_start;
 8015760:	e589      	b.n	8015276 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8015762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015764:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015768:	68db      	ldr	r3, [r3, #12]
 801576a:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801576e:	7f1b      	ldrb	r3, [r3, #28]
 8015770:	3301      	adds	r3, #1
 8015772:	b2da      	uxtb	r2, r3
 8015774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015776:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577a:	7f1a      	ldrb	r2, [r3, #28]
 801577c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801577e:	7f5b      	ldrb	r3, [r3, #29]
 8015780:	429a      	cmp	r2, r3
 8015782:	d336      	bcc.n	80157f2 <tcp_slowtmr+0x59e>
        prev->polltmr = 0;
 8015784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015786:	2200      	movs	r2, #0
 8015788:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801578a:	4b15      	ldr	r3, [pc, #84]	; (80157e0 <tcp_slowtmr+0x58c>)
 801578c:	2200      	movs	r2, #0
 801578e:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015792:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015796:	2b00      	cmp	r3, #0
 8015798:	d00b      	beq.n	80157b2 <tcp_slowtmr+0x55e>
 801579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801579c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80157a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80157a2:	6912      	ldr	r2, [r2, #16]
 80157a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80157a6:	4610      	mov	r0, r2
 80157a8:	4798      	blx	r3
 80157aa:	4603      	mov	r3, r0
 80157ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80157b0:	e002      	b.n	80157b8 <tcp_slowtmr+0x564>
 80157b2:	2300      	movs	r3, #0
 80157b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80157b8:	4b09      	ldr	r3, [pc, #36]	; (80157e0 <tcp_slowtmr+0x58c>)
 80157ba:	781b      	ldrb	r3, [r3, #0]
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d011      	beq.n	80157e4 <tcp_slowtmr+0x590>
          goto tcp_slowtmr_start;
 80157c0:	e559      	b.n	8015276 <tcp_slowtmr+0x22>
 80157c2:	bf00      	nop
 80157c4:	200122d0 	.word	0x200122d0
 80157c8:	10624dd3 	.word	0x10624dd3
 80157cc:	200122dc 	.word	0x200122dc
 80157d0:	08024b5c 	.word	0x08024b5c
 80157d4:	08024f94 	.word	0x08024f94
 80157d8:	08024ba0 	.word	0x08024ba0
 80157dc:	08024fc0 	.word	0x08024fc0
 80157e0:	200122e4 	.word	0x200122e4
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80157e4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d102      	bne.n	80157f2 <tcp_slowtmr+0x59e>
          tcp_output(prev);
 80157ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157ee:	f004 f8a7 	bl	8019940 <tcp_output>
  while (pcb != NULL) {
 80157f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	f47f ad44 	bne.w	8015282 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80157fa:	2300      	movs	r3, #0
 80157fc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80157fe:	4b2f      	ldr	r3, [pc, #188]	; (80158bc <tcp_slowtmr+0x668>)
 8015800:	681b      	ldr	r3, [r3, #0]
 8015802:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015804:	e052      	b.n	80158ac <tcp_slowtmr+0x658>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015808:	7d1b      	ldrb	r3, [r3, #20]
 801580a:	2b0a      	cmp	r3, #10
 801580c:	d006      	beq.n	801581c <tcp_slowtmr+0x5c8>
 801580e:	4b2c      	ldr	r3, [pc, #176]	; (80158c0 <tcp_slowtmr+0x66c>)
 8015810:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015814:	492b      	ldr	r1, [pc, #172]	; (80158c4 <tcp_slowtmr+0x670>)
 8015816:	482c      	ldr	r0, [pc, #176]	; (80158c8 <tcp_slowtmr+0x674>)
 8015818:	f00b fdce 	bl	80213b8 <iprintf>
    pcb_remove = 0;
 801581c:	2300      	movs	r3, #0
 801581e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015822:	4b2a      	ldr	r3, [pc, #168]	; (80158cc <tcp_slowtmr+0x678>)
 8015824:	681a      	ldr	r2, [r3, #0]
 8015826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015828:	6a1b      	ldr	r3, [r3, #32]
 801582a:	1ad3      	subs	r3, r2, r3
 801582c:	2bf0      	cmp	r3, #240	; 0xf0
 801582e:	d904      	bls.n	801583a <tcp_slowtmr+0x5e6>
      ++pcb_remove;
 8015830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015834:	3301      	adds	r3, #1
 8015836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801583a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801583e:	2b00      	cmp	r3, #0
 8015840:	d02f      	beq.n	80158a2 <tcp_slowtmr+0x64e>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015844:	f000 fc02 	bl	801604c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801584a:	2b00      	cmp	r3, #0
 801584c:	d010      	beq.n	8015870 <tcp_slowtmr+0x61c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801584e:	4b1b      	ldr	r3, [pc, #108]	; (80158bc <tcp_slowtmr+0x668>)
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015854:	429a      	cmp	r2, r3
 8015856:	d106      	bne.n	8015866 <tcp_slowtmr+0x612>
 8015858:	4b19      	ldr	r3, [pc, #100]	; (80158c0 <tcp_slowtmr+0x66c>)
 801585a:	f240 52af 	movw	r2, #1455	; 0x5af
 801585e:	491c      	ldr	r1, [pc, #112]	; (80158d0 <tcp_slowtmr+0x67c>)
 8015860:	4819      	ldr	r0, [pc, #100]	; (80158c8 <tcp_slowtmr+0x674>)
 8015862:	f00b fda9 	bl	80213b8 <iprintf>
        prev->next = pcb->next;
 8015866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015868:	68da      	ldr	r2, [r3, #12]
 801586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801586c:	60da      	str	r2, [r3, #12]
 801586e:	e00f      	b.n	8015890 <tcp_slowtmr+0x63c>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015870:	4b12      	ldr	r3, [pc, #72]	; (80158bc <tcp_slowtmr+0x668>)
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015876:	429a      	cmp	r2, r3
 8015878:	d006      	beq.n	8015888 <tcp_slowtmr+0x634>
 801587a:	4b11      	ldr	r3, [pc, #68]	; (80158c0 <tcp_slowtmr+0x66c>)
 801587c:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015880:	4914      	ldr	r1, [pc, #80]	; (80158d4 <tcp_slowtmr+0x680>)
 8015882:	4811      	ldr	r0, [pc, #68]	; (80158c8 <tcp_slowtmr+0x674>)
 8015884:	f00b fd98 	bl	80213b8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801588a:	68db      	ldr	r3, [r3, #12]
 801588c:	4a0b      	ldr	r2, [pc, #44]	; (80158bc <tcp_slowtmr+0x668>)
 801588e:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015892:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015896:	68db      	ldr	r3, [r3, #12]
 8015898:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801589a:	69f8      	ldr	r0, [r7, #28]
 801589c:	f7fe ff04 	bl	80146a8 <tcp_free>
 80158a0:	e004      	b.n	80158ac <tcp_slowtmr+0x658>
    } else {
      prev = pcb;
 80158a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a4:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80158a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a8:	68db      	ldr	r3, [r3, #12]
 80158aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80158ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d1a9      	bne.n	8015806 <tcp_slowtmr+0x5b2>
    }
  }
}
 80158b2:	bf00      	nop
 80158b4:	bf00      	nop
 80158b6:	3730      	adds	r7, #48	; 0x30
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bdb0      	pop	{r4, r5, r7, pc}
 80158bc:	200122e0 	.word	0x200122e0
 80158c0:	08024b5c 	.word	0x08024b5c
 80158c4:	08024fec 	.word	0x08024fec
 80158c8:	08024ba0 	.word	0x08024ba0
 80158cc:	200122d0 	.word	0x200122d0
 80158d0:	0802501c 	.word	0x0802501c
 80158d4:	08025044 	.word	0x08025044

080158d8 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80158d8:	b580      	push	{r7, lr}
 80158da:	b082      	sub	sp, #8
 80158dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80158de:	4b2d      	ldr	r3, [pc, #180]	; (8015994 <tcp_fasttmr+0xbc>)
 80158e0:	781b      	ldrb	r3, [r3, #0]
 80158e2:	3301      	adds	r3, #1
 80158e4:	b2da      	uxtb	r2, r3
 80158e6:	4b2b      	ldr	r3, [pc, #172]	; (8015994 <tcp_fasttmr+0xbc>)
 80158e8:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80158ea:	4b2b      	ldr	r3, [pc, #172]	; (8015998 <tcp_fasttmr+0xc0>)
 80158ec:	681b      	ldr	r3, [r3, #0]
 80158ee:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80158f0:	e048      	b.n	8015984 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	7f9a      	ldrb	r2, [r3, #30]
 80158f6:	4b27      	ldr	r3, [pc, #156]	; (8015994 <tcp_fasttmr+0xbc>)
 80158f8:	781b      	ldrb	r3, [r3, #0]
 80158fa:	429a      	cmp	r2, r3
 80158fc:	d03f      	beq.n	801597e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80158fe:	4b25      	ldr	r3, [pc, #148]	; (8015994 <tcp_fasttmr+0xbc>)
 8015900:	781a      	ldrb	r2, [r3, #0]
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	8b5b      	ldrh	r3, [r3, #26]
 801590a:	f003 0301 	and.w	r3, r3, #1
 801590e:	2b00      	cmp	r3, #0
 8015910:	d010      	beq.n	8015934 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	8b5b      	ldrh	r3, [r3, #26]
 8015916:	f043 0302 	orr.w	r3, r3, #2
 801591a:	b29a      	uxth	r2, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015920:	6878      	ldr	r0, [r7, #4]
 8015922:	f004 f80d 	bl	8019940 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	8b5b      	ldrh	r3, [r3, #26]
 801592a:	f023 0303 	bic.w	r3, r3, #3
 801592e:	b29a      	uxth	r2, r3
 8015930:	687b      	ldr	r3, [r7, #4]
 8015932:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	8b5b      	ldrh	r3, [r3, #26]
 8015938:	f003 0308 	and.w	r3, r3, #8
 801593c:	2b00      	cmp	r3, #0
 801593e:	d009      	beq.n	8015954 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	8b5b      	ldrh	r3, [r3, #26]
 8015944:	f023 0308 	bic.w	r3, r3, #8
 8015948:	b29a      	uxth	r2, r3
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801594e:	6878      	ldr	r0, [r7, #4]
 8015950:	f7ff f83e 	bl	80149d0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801595e:	2b00      	cmp	r3, #0
 8015960:	d00a      	beq.n	8015978 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015962:	4b0e      	ldr	r3, [pc, #56]	; (801599c <tcp_fasttmr+0xc4>)
 8015964:	2200      	movs	r2, #0
 8015966:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015968:	6878      	ldr	r0, [r7, #4]
 801596a:	f000 f819 	bl	80159a0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801596e:	4b0b      	ldr	r3, [pc, #44]	; (801599c <tcp_fasttmr+0xc4>)
 8015970:	781b      	ldrb	r3, [r3, #0]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d000      	beq.n	8015978 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015976:	e7b8      	b.n	80158ea <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015978:	683b      	ldr	r3, [r7, #0]
 801597a:	607b      	str	r3, [r7, #4]
 801597c:	e002      	b.n	8015984 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801597e:	687b      	ldr	r3, [r7, #4]
 8015980:	68db      	ldr	r3, [r3, #12]
 8015982:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d1b3      	bne.n	80158f2 <tcp_fasttmr+0x1a>
    }
  }
}
 801598a:	bf00      	nop
 801598c:	bf00      	nop
 801598e:	3708      	adds	r7, #8
 8015990:	46bd      	mov	sp, r7
 8015992:	bd80      	pop	{r7, pc}
 8015994:	200122e6 	.word	0x200122e6
 8015998:	200122dc 	.word	0x200122dc
 801599c:	200122e4 	.word	0x200122e4

080159a0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80159a0:	b590      	push	{r4, r7, lr}
 80159a2:	b085      	sub	sp, #20
 80159a4:	af00      	add	r7, sp, #0
 80159a6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d109      	bne.n	80159c2 <tcp_process_refused_data+0x22>
 80159ae:	4b37      	ldr	r3, [pc, #220]	; (8015a8c <tcp_process_refused_data+0xec>)
 80159b0:	f240 6209 	movw	r2, #1545	; 0x609
 80159b4:	4936      	ldr	r1, [pc, #216]	; (8015a90 <tcp_process_refused_data+0xf0>)
 80159b6:	4837      	ldr	r0, [pc, #220]	; (8015a94 <tcp_process_refused_data+0xf4>)
 80159b8:	f00b fcfe 	bl	80213b8 <iprintf>
 80159bc:	f06f 030f 	mvn.w	r3, #15
 80159c0:	e060      	b.n	8015a84 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80159c6:	7b5b      	ldrb	r3, [r3, #13]
 80159c8:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80159ce:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	2200      	movs	r2, #0
 80159d4:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d00b      	beq.n	80159f8 <tcp_process_refused_data+0x58>
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	6918      	ldr	r0, [r3, #16]
 80159ea:	2300      	movs	r3, #0
 80159ec:	68ba      	ldr	r2, [r7, #8]
 80159ee:	6879      	ldr	r1, [r7, #4]
 80159f0:	47a0      	blx	r4
 80159f2:	4603      	mov	r3, r0
 80159f4:	73fb      	strb	r3, [r7, #15]
 80159f6:	e007      	b.n	8015a08 <tcp_process_refused_data+0x68>
 80159f8:	2300      	movs	r3, #0
 80159fa:	68ba      	ldr	r2, [r7, #8]
 80159fc:	6879      	ldr	r1, [r7, #4]
 80159fe:	2000      	movs	r0, #0
 8015a00:	f000 f8a4 	bl	8015b4c <tcp_recv_null>
 8015a04:	4603      	mov	r3, r0
 8015a06:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015a08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d12a      	bne.n	8015a66 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015a10:	7bbb      	ldrb	r3, [r7, #14]
 8015a12:	f003 0320 	and.w	r3, r3, #32
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d033      	beq.n	8015a82 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a1e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015a22:	d005      	beq.n	8015a30 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a28:	3301      	adds	r3, #1
 8015a2a:	b29a      	uxth	r2, r3
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d00b      	beq.n	8015a52 <tcp_process_refused_data+0xb2>
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6918      	ldr	r0, [r3, #16]
 8015a44:	2300      	movs	r3, #0
 8015a46:	2200      	movs	r2, #0
 8015a48:	6879      	ldr	r1, [r7, #4]
 8015a4a:	47a0      	blx	r4
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	73fb      	strb	r3, [r7, #15]
 8015a50:	e001      	b.n	8015a56 <tcp_process_refused_data+0xb6>
 8015a52:	2300      	movs	r3, #0
 8015a54:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a5a:	f113 0f0d 	cmn.w	r3, #13
 8015a5e:	d110      	bne.n	8015a82 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015a60:	f06f 030c 	mvn.w	r3, #12
 8015a64:	e00e      	b.n	8015a84 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015a6a:	f113 0f0d 	cmn.w	r3, #13
 8015a6e:	d102      	bne.n	8015a76 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015a70:	f06f 030c 	mvn.w	r3, #12
 8015a74:	e006      	b.n	8015a84 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	68ba      	ldr	r2, [r7, #8]
 8015a7a:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8015a7c:	f06f 0304 	mvn.w	r3, #4
 8015a80:	e000      	b.n	8015a84 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015a82:	2300      	movs	r3, #0
}
 8015a84:	4618      	mov	r0, r3
 8015a86:	3714      	adds	r7, #20
 8015a88:	46bd      	mov	sp, r7
 8015a8a:	bd90      	pop	{r4, r7, pc}
 8015a8c:	08024b5c 	.word	0x08024b5c
 8015a90:	0802506c 	.word	0x0802506c
 8015a94:	08024ba0 	.word	0x08024ba0

08015a98 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b084      	sub	sp, #16
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015aa0:	e007      	b.n	8015ab2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015aa2:	687b      	ldr	r3, [r7, #4]
 8015aa4:	681b      	ldr	r3, [r3, #0]
 8015aa6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015aa8:	6878      	ldr	r0, [r7, #4]
 8015aaa:	f000 f80a 	bl	8015ac2 <tcp_seg_free>
    seg = next;
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d1f4      	bne.n	8015aa2 <tcp_segs_free+0xa>
  }
}
 8015ab8:	bf00      	nop
 8015aba:	bf00      	nop
 8015abc:	3710      	adds	r7, #16
 8015abe:	46bd      	mov	sp, r7
 8015ac0:	bd80      	pop	{r7, pc}

08015ac2 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015ac2:	b580      	push	{r7, lr}
 8015ac4:	b082      	sub	sp, #8
 8015ac6:	af00      	add	r7, sp, #0
 8015ac8:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	2b00      	cmp	r3, #0
 8015ace:	d00c      	beq.n	8015aea <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	685b      	ldr	r3, [r3, #4]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d004      	beq.n	8015ae2 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	685b      	ldr	r3, [r3, #4]
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7fe fb27 	bl	8014130 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015ae2:	6879      	ldr	r1, [r7, #4]
 8015ae4:	2003      	movs	r0, #3
 8015ae6:	f7fd fc73 	bl	80133d0 <memp_free>
  }
}
 8015aea:	bf00      	nop
 8015aec:	3708      	adds	r7, #8
 8015aee:	46bd      	mov	sp, r7
 8015af0:	bd80      	pop	{r7, pc}
	...

08015af4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015af4:	b580      	push	{r7, lr}
 8015af6:	b084      	sub	sp, #16
 8015af8:	af00      	add	r7, sp, #0
 8015afa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d106      	bne.n	8015b10 <tcp_seg_copy+0x1c>
 8015b02:	4b0f      	ldr	r3, [pc, #60]	; (8015b40 <tcp_seg_copy+0x4c>)
 8015b04:	f240 6282 	movw	r2, #1666	; 0x682
 8015b08:	490e      	ldr	r1, [pc, #56]	; (8015b44 <tcp_seg_copy+0x50>)
 8015b0a:	480f      	ldr	r0, [pc, #60]	; (8015b48 <tcp_seg_copy+0x54>)
 8015b0c:	f00b fc54 	bl	80213b8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015b10:	2003      	movs	r0, #3
 8015b12:	f7fd fbe7 	bl	80132e4 <memp_malloc>
 8015b16:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d101      	bne.n	8015b22 <tcp_seg_copy+0x2e>
    return NULL;
 8015b1e:	2300      	movs	r3, #0
 8015b20:	e00a      	b.n	8015b38 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015b22:	2210      	movs	r2, #16
 8015b24:	6879      	ldr	r1, [r7, #4]
 8015b26:	68f8      	ldr	r0, [r7, #12]
 8015b28:	f00b ff65 	bl	80219f6 <memcpy>
  pbuf_ref(cseg->p);
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	685b      	ldr	r3, [r3, #4]
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7fe fba3 	bl	801427c <pbuf_ref>
  return cseg;
 8015b36:	68fb      	ldr	r3, [r7, #12]
}
 8015b38:	4618      	mov	r0, r3
 8015b3a:	3710      	adds	r7, #16
 8015b3c:	46bd      	mov	sp, r7
 8015b3e:	bd80      	pop	{r7, pc}
 8015b40:	08024b5c 	.word	0x08024b5c
 8015b44:	080250b0 	.word	0x080250b0
 8015b48:	08024ba0 	.word	0x08024ba0

08015b4c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015b4c:	b580      	push	{r7, lr}
 8015b4e:	b084      	sub	sp, #16
 8015b50:	af00      	add	r7, sp, #0
 8015b52:	60f8      	str	r0, [r7, #12]
 8015b54:	60b9      	str	r1, [r7, #8]
 8015b56:	607a      	str	r2, [r7, #4]
 8015b58:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015b5a:	68bb      	ldr	r3, [r7, #8]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d109      	bne.n	8015b74 <tcp_recv_null+0x28>
 8015b60:	4b12      	ldr	r3, [pc, #72]	; (8015bac <tcp_recv_null+0x60>)
 8015b62:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015b66:	4912      	ldr	r1, [pc, #72]	; (8015bb0 <tcp_recv_null+0x64>)
 8015b68:	4812      	ldr	r0, [pc, #72]	; (8015bb4 <tcp_recv_null+0x68>)
 8015b6a:	f00b fc25 	bl	80213b8 <iprintf>
 8015b6e:	f06f 030f 	mvn.w	r3, #15
 8015b72:	e016      	b.n	8015ba2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d009      	beq.n	8015b8e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	891b      	ldrh	r3, [r3, #8]
 8015b7e:	4619      	mov	r1, r3
 8015b80:	68b8      	ldr	r0, [r7, #8]
 8015b82:	f7ff fad1 	bl	8015128 <tcp_recved>
    pbuf_free(p);
 8015b86:	6878      	ldr	r0, [r7, #4]
 8015b88:	f7fe fad2 	bl	8014130 <pbuf_free>
 8015b8c:	e008      	b.n	8015ba0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015b8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d104      	bne.n	8015ba0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015b96:	68b8      	ldr	r0, [r7, #8]
 8015b98:	f7fe ff84 	bl	8014aa4 <tcp_close>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	e000      	b.n	8015ba2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015ba0:	2300      	movs	r3, #0
}
 8015ba2:	4618      	mov	r0, r3
 8015ba4:	3710      	adds	r7, #16
 8015ba6:	46bd      	mov	sp, r7
 8015ba8:	bd80      	pop	{r7, pc}
 8015baa:	bf00      	nop
 8015bac:	08024b5c 	.word	0x08024b5c
 8015bb0:	080250cc 	.word	0x080250cc
 8015bb4:	08024ba0 	.word	0x08024ba0

08015bb8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b086      	sub	sp, #24
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	4603      	mov	r3, r0
 8015bc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	db01      	blt.n	8015bce <tcp_kill_prio+0x16>
 8015bca:	79fb      	ldrb	r3, [r7, #7]
 8015bcc:	e000      	b.n	8015bd0 <tcp_kill_prio+0x18>
 8015bce:	237f      	movs	r3, #127	; 0x7f
 8015bd0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015bd2:	7afb      	ldrb	r3, [r7, #11]
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d034      	beq.n	8015c42 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015bd8:	7afb      	ldrb	r3, [r7, #11]
 8015bda:	3b01      	subs	r3, #1
 8015bdc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015bde:	2300      	movs	r3, #0
 8015be0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015be2:	2300      	movs	r3, #0
 8015be4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015be6:	4b19      	ldr	r3, [pc, #100]	; (8015c4c <tcp_kill_prio+0x94>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	617b      	str	r3, [r7, #20]
 8015bec:	e01f      	b.n	8015c2e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015bee:	697b      	ldr	r3, [r7, #20]
 8015bf0:	7d5b      	ldrb	r3, [r3, #21]
 8015bf2:	7afa      	ldrb	r2, [r7, #11]
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d80c      	bhi.n	8015c12 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015bfc:	7afa      	ldrb	r2, [r7, #11]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d112      	bne.n	8015c28 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015c02:	4b13      	ldr	r3, [pc, #76]	; (8015c50 <tcp_kill_prio+0x98>)
 8015c04:	681a      	ldr	r2, [r3, #0]
 8015c06:	697b      	ldr	r3, [r7, #20]
 8015c08:	6a1b      	ldr	r3, [r3, #32]
 8015c0a:	1ad3      	subs	r3, r2, r3
 8015c0c:	68fa      	ldr	r2, [r7, #12]
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	d80a      	bhi.n	8015c28 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015c12:	4b0f      	ldr	r3, [pc, #60]	; (8015c50 <tcp_kill_prio+0x98>)
 8015c14:	681a      	ldr	r2, [r3, #0]
 8015c16:	697b      	ldr	r3, [r7, #20]
 8015c18:	6a1b      	ldr	r3, [r3, #32]
 8015c1a:	1ad3      	subs	r3, r2, r3
 8015c1c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015c1e:	697b      	ldr	r3, [r7, #20]
 8015c20:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015c22:	697b      	ldr	r3, [r7, #20]
 8015c24:	7d5b      	ldrb	r3, [r3, #21]
 8015c26:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c28:	697b      	ldr	r3, [r7, #20]
 8015c2a:	68db      	ldr	r3, [r3, #12]
 8015c2c:	617b      	str	r3, [r7, #20]
 8015c2e:	697b      	ldr	r3, [r7, #20]
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d1dc      	bne.n	8015bee <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015c34:	693b      	ldr	r3, [r7, #16]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d004      	beq.n	8015c44 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015c3a:	6938      	ldr	r0, [r7, #16]
 8015c3c:	f7ff f878 	bl	8014d30 <tcp_abort>
 8015c40:	e000      	b.n	8015c44 <tcp_kill_prio+0x8c>
    return;
 8015c42:	bf00      	nop
  }
}
 8015c44:	3718      	adds	r7, #24
 8015c46:	46bd      	mov	sp, r7
 8015c48:	bd80      	pop	{r7, pc}
 8015c4a:	bf00      	nop
 8015c4c:	200122dc 	.word	0x200122dc
 8015c50:	200122d0 	.word	0x200122d0

08015c54 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015c54:	b580      	push	{r7, lr}
 8015c56:	b086      	sub	sp, #24
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015c5e:	79fb      	ldrb	r3, [r7, #7]
 8015c60:	2b08      	cmp	r3, #8
 8015c62:	d009      	beq.n	8015c78 <tcp_kill_state+0x24>
 8015c64:	79fb      	ldrb	r3, [r7, #7]
 8015c66:	2b09      	cmp	r3, #9
 8015c68:	d006      	beq.n	8015c78 <tcp_kill_state+0x24>
 8015c6a:	4b1a      	ldr	r3, [pc, #104]	; (8015cd4 <tcp_kill_state+0x80>)
 8015c6c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8015c70:	4919      	ldr	r1, [pc, #100]	; (8015cd8 <tcp_kill_state+0x84>)
 8015c72:	481a      	ldr	r0, [pc, #104]	; (8015cdc <tcp_kill_state+0x88>)
 8015c74:	f00b fba0 	bl	80213b8 <iprintf>

  inactivity = 0;
 8015c78:	2300      	movs	r3, #0
 8015c7a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015c80:	4b17      	ldr	r3, [pc, #92]	; (8015ce0 <tcp_kill_state+0x8c>)
 8015c82:	681b      	ldr	r3, [r3, #0]
 8015c84:	617b      	str	r3, [r7, #20]
 8015c86:	e017      	b.n	8015cb8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	7d1b      	ldrb	r3, [r3, #20]
 8015c8c:	79fa      	ldrb	r2, [r7, #7]
 8015c8e:	429a      	cmp	r2, r3
 8015c90:	d10f      	bne.n	8015cb2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015c92:	4b14      	ldr	r3, [pc, #80]	; (8015ce4 <tcp_kill_state+0x90>)
 8015c94:	681a      	ldr	r2, [r3, #0]
 8015c96:	697b      	ldr	r3, [r7, #20]
 8015c98:	6a1b      	ldr	r3, [r3, #32]
 8015c9a:	1ad3      	subs	r3, r2, r3
 8015c9c:	68fa      	ldr	r2, [r7, #12]
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	d807      	bhi.n	8015cb2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015ca2:	4b10      	ldr	r3, [pc, #64]	; (8015ce4 <tcp_kill_state+0x90>)
 8015ca4:	681a      	ldr	r2, [r3, #0]
 8015ca6:	697b      	ldr	r3, [r7, #20]
 8015ca8:	6a1b      	ldr	r3, [r3, #32]
 8015caa:	1ad3      	subs	r3, r2, r3
 8015cac:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015cb2:	697b      	ldr	r3, [r7, #20]
 8015cb4:	68db      	ldr	r3, [r3, #12]
 8015cb6:	617b      	str	r3, [r7, #20]
 8015cb8:	697b      	ldr	r3, [r7, #20]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d1e4      	bne.n	8015c88 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015cbe:	693b      	ldr	r3, [r7, #16]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d003      	beq.n	8015ccc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015cc4:	2100      	movs	r1, #0
 8015cc6:	6938      	ldr	r0, [r7, #16]
 8015cc8:	f7fe ff74 	bl	8014bb4 <tcp_abandon>
  }
}
 8015ccc:	bf00      	nop
 8015cce:	3718      	adds	r7, #24
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	bd80      	pop	{r7, pc}
 8015cd4:	08024b5c 	.word	0x08024b5c
 8015cd8:	080250e8 	.word	0x080250e8
 8015cdc:	08024ba0 	.word	0x08024ba0
 8015ce0:	200122dc 	.word	0x200122dc
 8015ce4:	200122d0 	.word	0x200122d0

08015ce8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b084      	sub	sp, #16
 8015cec:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015cf6:	4b12      	ldr	r3, [pc, #72]	; (8015d40 <tcp_kill_timewait+0x58>)
 8015cf8:	681b      	ldr	r3, [r3, #0]
 8015cfa:	60fb      	str	r3, [r7, #12]
 8015cfc:	e012      	b.n	8015d24 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015cfe:	4b11      	ldr	r3, [pc, #68]	; (8015d44 <tcp_kill_timewait+0x5c>)
 8015d00:	681a      	ldr	r2, [r3, #0]
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	6a1b      	ldr	r3, [r3, #32]
 8015d06:	1ad3      	subs	r3, r2, r3
 8015d08:	687a      	ldr	r2, [r7, #4]
 8015d0a:	429a      	cmp	r2, r3
 8015d0c:	d807      	bhi.n	8015d1e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015d0e:	4b0d      	ldr	r3, [pc, #52]	; (8015d44 <tcp_kill_timewait+0x5c>)
 8015d10:	681a      	ldr	r2, [r3, #0]
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	6a1b      	ldr	r3, [r3, #32]
 8015d16:	1ad3      	subs	r3, r2, r3
 8015d18:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	68db      	ldr	r3, [r3, #12]
 8015d22:	60fb      	str	r3, [r7, #12]
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d1e9      	bne.n	8015cfe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015d2a:	68bb      	ldr	r3, [r7, #8]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d002      	beq.n	8015d36 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015d30:	68b8      	ldr	r0, [r7, #8]
 8015d32:	f7fe fffd 	bl	8014d30 <tcp_abort>
  }
}
 8015d36:	bf00      	nop
 8015d38:	3710      	adds	r7, #16
 8015d3a:	46bd      	mov	sp, r7
 8015d3c:	bd80      	pop	{r7, pc}
 8015d3e:	bf00      	nop
 8015d40:	200122e0 	.word	0x200122e0
 8015d44:	200122d0 	.word	0x200122d0

08015d48 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b082      	sub	sp, #8
 8015d4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015d4e:	4b10      	ldr	r3, [pc, #64]	; (8015d90 <tcp_handle_closepend+0x48>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015d54:	e014      	b.n	8015d80 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	68db      	ldr	r3, [r3, #12]
 8015d5a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015d5c:	687b      	ldr	r3, [r7, #4]
 8015d5e:	8b5b      	ldrh	r3, [r3, #26]
 8015d60:	f003 0308 	and.w	r3, r3, #8
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d009      	beq.n	8015d7c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	8b5b      	ldrh	r3, [r3, #26]
 8015d6c:	f023 0308 	bic.w	r3, r3, #8
 8015d70:	b29a      	uxth	r2, r3
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f7fe fe2a 	bl	80149d0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8015d7c:	683b      	ldr	r3, [r7, #0]
 8015d7e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015d80:	687b      	ldr	r3, [r7, #4]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d1e7      	bne.n	8015d56 <tcp_handle_closepend+0xe>
  }
}
 8015d86:	bf00      	nop
 8015d88:	bf00      	nop
 8015d8a:	3708      	adds	r7, #8
 8015d8c:	46bd      	mov	sp, r7
 8015d8e:	bd80      	pop	{r7, pc}
 8015d90:	200122dc 	.word	0x200122dc

08015d94 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8015d94:	b580      	push	{r7, lr}
 8015d96:	b084      	sub	sp, #16
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	4603      	mov	r3, r0
 8015d9c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015d9e:	2001      	movs	r0, #1
 8015da0:	f7fd faa0 	bl	80132e4 <memp_malloc>
 8015da4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8015da6:	68fb      	ldr	r3, [r7, #12]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d126      	bne.n	8015dfa <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8015dac:	f7ff ffcc 	bl	8015d48 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8015db0:	f7ff ff9a 	bl	8015ce8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015db4:	2001      	movs	r0, #1
 8015db6:	f7fd fa95 	bl	80132e4 <memp_malloc>
 8015dba:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d11b      	bne.n	8015dfa <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8015dc2:	2009      	movs	r0, #9
 8015dc4:	f7ff ff46 	bl	8015c54 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015dc8:	2001      	movs	r0, #1
 8015dca:	f7fd fa8b 	bl	80132e4 <memp_malloc>
 8015dce:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d111      	bne.n	8015dfa <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8015dd6:	2008      	movs	r0, #8
 8015dd8:	f7ff ff3c 	bl	8015c54 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015ddc:	2001      	movs	r0, #1
 8015dde:	f7fd fa81 	bl	80132e4 <memp_malloc>
 8015de2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d107      	bne.n	8015dfa <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8015dea:	79fb      	ldrb	r3, [r7, #7]
 8015dec:	4618      	mov	r0, r3
 8015dee:	f7ff fee3 	bl	8015bb8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015df2:	2001      	movs	r0, #1
 8015df4:	f7fd fa76 	bl	80132e4 <memp_malloc>
 8015df8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d047      	beq.n	8015e90 <tcp_alloc+0xfc>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015e00:	22a4      	movs	r2, #164	; 0xa4
 8015e02:	2100      	movs	r1, #0
 8015e04:	68f8      	ldr	r0, [r7, #12]
 8015e06:	f00b fced 	bl	80217e4 <memset>
    pcb->prio = prio;
 8015e0a:	68fb      	ldr	r3, [r7, #12]
 8015e0c:	79fa      	ldrb	r2, [r7, #7]
 8015e0e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8015e16:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8015e1a:	68fb      	ldr	r3, [r7, #12]
 8015e1c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015e20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8015e2a:	68fb      	ldr	r3, [r7, #12]
 8015e2c:	22ff      	movs	r2, #255	; 0xff
 8015e2e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015e36:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	2206      	movs	r2, #6
 8015e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	2206      	movs	r2, #6
 8015e44:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015e4c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8015e4e:	68fb      	ldr	r3, [r7, #12]
 8015e50:	2201      	movs	r2, #1
 8015e52:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8015e56:	4b11      	ldr	r3, [pc, #68]	; (8015e9c <tcp_alloc+0x108>)
 8015e58:	681a      	ldr	r2, [r3, #0]
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8015e5e:	4b10      	ldr	r3, [pc, #64]	; (8015ea0 <tcp_alloc+0x10c>)
 8015e60:	781a      	ldrb	r2, [r3, #0]
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8015e66:	68fb      	ldr	r3, [r7, #12]
 8015e68:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8015e6c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	4a0c      	ldr	r2, [pc, #48]	; (8015ea4 <tcp_alloc+0x110>)
 8015e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8015e78:	68fb      	ldr	r3, [r7, #12]
 8015e7a:	4a0b      	ldr	r2, [pc, #44]	; (8015ea8 <tcp_alloc+0x114>)
 8015e7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	4a0a      	ldr	r2, [pc, #40]	; (8015eac <tcp_alloc+0x118>)
 8015e84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	2209      	movs	r2, #9
 8015e8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8015e90:	68fb      	ldr	r3, [r7, #12]
}
 8015e92:	4618      	mov	r0, r3
 8015e94:	3710      	adds	r7, #16
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}
 8015e9a:	bf00      	nop
 8015e9c:	200122d0 	.word	0x200122d0
 8015ea0:	200122e6 	.word	0x200122e6
 8015ea4:	08015b4d 	.word	0x08015b4d
 8015ea8:	006ddd00 	.word	0x006ddd00
 8015eac:	000124f8 	.word	0x000124f8

08015eb0 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b084      	sub	sp, #16
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8015eba:	2040      	movs	r0, #64	; 0x40
 8015ebc:	f7ff ff6a 	bl	8015d94 <tcp_alloc>
 8015ec0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8015ec2:	68fb      	ldr	r3, [r7, #12]
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3710      	adds	r7, #16
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}

08015ecc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b083      	sub	sp, #12
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
 8015ed4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d002      	beq.n	8015ee2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	683a      	ldr	r2, [r7, #0]
 8015ee0:	611a      	str	r2, [r3, #16]
  }
}
 8015ee2:	bf00      	nop
 8015ee4:	370c      	adds	r7, #12
 8015ee6:	46bd      	mov	sp, r7
 8015ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eec:	4770      	bx	lr
	...

08015ef0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8015ef0:	b580      	push	{r7, lr}
 8015ef2:	b082      	sub	sp, #8
 8015ef4:	af00      	add	r7, sp, #0
 8015ef6:	6078      	str	r0, [r7, #4]
 8015ef8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	2b00      	cmp	r3, #0
 8015efe:	d00e      	beq.n	8015f1e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	7d1b      	ldrb	r3, [r3, #20]
 8015f04:	2b01      	cmp	r3, #1
 8015f06:	d106      	bne.n	8015f16 <tcp_recv+0x26>
 8015f08:	4b07      	ldr	r3, [pc, #28]	; (8015f28 <tcp_recv+0x38>)
 8015f0a:	f240 72df 	movw	r2, #2015	; 0x7df
 8015f0e:	4907      	ldr	r1, [pc, #28]	; (8015f2c <tcp_recv+0x3c>)
 8015f10:	4807      	ldr	r0, [pc, #28]	; (8015f30 <tcp_recv+0x40>)
 8015f12:	f00b fa51 	bl	80213b8 <iprintf>
    pcb->recv = recv;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	683a      	ldr	r2, [r7, #0]
 8015f1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8015f1e:	bf00      	nop
 8015f20:	3708      	adds	r7, #8
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
 8015f26:	bf00      	nop
 8015f28:	08024b5c 	.word	0x08024b5c
 8015f2c:	080250f8 	.word	0x080250f8
 8015f30:	08024ba0 	.word	0x08024ba0

08015f34 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8015f34:	b580      	push	{r7, lr}
 8015f36:	b082      	sub	sp, #8
 8015f38:	af00      	add	r7, sp, #0
 8015f3a:	6078      	str	r0, [r7, #4]
 8015f3c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d00e      	beq.n	8015f62 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	7d1b      	ldrb	r3, [r3, #20]
 8015f48:	2b01      	cmp	r3, #1
 8015f4a:	d106      	bne.n	8015f5a <tcp_sent+0x26>
 8015f4c:	4b07      	ldr	r3, [pc, #28]	; (8015f6c <tcp_sent+0x38>)
 8015f4e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8015f52:	4907      	ldr	r1, [pc, #28]	; (8015f70 <tcp_sent+0x3c>)
 8015f54:	4807      	ldr	r0, [pc, #28]	; (8015f74 <tcp_sent+0x40>)
 8015f56:	f00b fa2f 	bl	80213b8 <iprintf>
    pcb->sent = sent;
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	683a      	ldr	r2, [r7, #0]
 8015f5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8015f62:	bf00      	nop
 8015f64:	3708      	adds	r7, #8
 8015f66:	46bd      	mov	sp, r7
 8015f68:	bd80      	pop	{r7, pc}
 8015f6a:	bf00      	nop
 8015f6c:	08024b5c 	.word	0x08024b5c
 8015f70:	08025120 	.word	0x08025120
 8015f74:	08024ba0 	.word	0x08024ba0

08015f78 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b082      	sub	sp, #8
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
 8015f80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d00e      	beq.n	8015fa6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	7d1b      	ldrb	r3, [r3, #20]
 8015f8c:	2b01      	cmp	r3, #1
 8015f8e:	d106      	bne.n	8015f9e <tcp_err+0x26>
 8015f90:	4b07      	ldr	r3, [pc, #28]	; (8015fb0 <tcp_err+0x38>)
 8015f92:	f640 020d 	movw	r2, #2061	; 0x80d
 8015f96:	4907      	ldr	r1, [pc, #28]	; (8015fb4 <tcp_err+0x3c>)
 8015f98:	4807      	ldr	r0, [pc, #28]	; (8015fb8 <tcp_err+0x40>)
 8015f9a:	f00b fa0d 	bl	80213b8 <iprintf>
    pcb->errf = err;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	683a      	ldr	r2, [r7, #0]
 8015fa2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8015fa6:	bf00      	nop
 8015fa8:	3708      	adds	r7, #8
 8015faa:	46bd      	mov	sp, r7
 8015fac:	bd80      	pop	{r7, pc}
 8015fae:	bf00      	nop
 8015fb0:	08024b5c 	.word	0x08024b5c
 8015fb4:	08025148 	.word	0x08025148
 8015fb8:	08024ba0 	.word	0x08024ba0

08015fbc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8015fbc:	b480      	push	{r7}
 8015fbe:	b085      	sub	sp, #20
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d008      	beq.n	8015fde <tcp_accept+0x22>
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	7d1b      	ldrb	r3, [r3, #20]
 8015fd0:	2b01      	cmp	r3, #1
 8015fd2:	d104      	bne.n	8015fde <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8015fd8:	68fb      	ldr	r3, [r7, #12]
 8015fda:	683a      	ldr	r2, [r7, #0]
 8015fdc:	619a      	str	r2, [r3, #24]
  }
}
 8015fde:	bf00      	nop
 8015fe0:	3714      	adds	r7, #20
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe8:	4770      	bx	lr
	...

08015fec <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b084      	sub	sp, #16
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	60f8      	str	r0, [r7, #12]
 8015ff4:	60b9      	str	r1, [r7, #8]
 8015ff6:	4613      	mov	r3, r2
 8015ff8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d107      	bne.n	8016010 <tcp_poll+0x24>
 8016000:	4b0e      	ldr	r3, [pc, #56]	; (801603c <tcp_poll+0x50>)
 8016002:	f640 023d 	movw	r2, #2109	; 0x83d
 8016006:	490e      	ldr	r1, [pc, #56]	; (8016040 <tcp_poll+0x54>)
 8016008:	480e      	ldr	r0, [pc, #56]	; (8016044 <tcp_poll+0x58>)
 801600a:	f00b f9d5 	bl	80213b8 <iprintf>
 801600e:	e011      	b.n	8016034 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	7d1b      	ldrb	r3, [r3, #20]
 8016014:	2b01      	cmp	r3, #1
 8016016:	d106      	bne.n	8016026 <tcp_poll+0x3a>
 8016018:	4b08      	ldr	r3, [pc, #32]	; (801603c <tcp_poll+0x50>)
 801601a:	f640 023e 	movw	r2, #2110	; 0x83e
 801601e:	490a      	ldr	r1, [pc, #40]	; (8016048 <tcp_poll+0x5c>)
 8016020:	4808      	ldr	r0, [pc, #32]	; (8016044 <tcp_poll+0x58>)
 8016022:	f00b f9c9 	bl	80213b8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	68ba      	ldr	r2, [r7, #8]
 801602a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801602e:	68fb      	ldr	r3, [r7, #12]
 8016030:	79fa      	ldrb	r2, [r7, #7]
 8016032:	775a      	strb	r2, [r3, #29]
}
 8016034:	3710      	adds	r7, #16
 8016036:	46bd      	mov	sp, r7
 8016038:	bd80      	pop	{r7, pc}
 801603a:	bf00      	nop
 801603c:	08024b5c 	.word	0x08024b5c
 8016040:	08025170 	.word	0x08025170
 8016044:	08024ba0 	.word	0x08024ba0
 8016048:	08025188 	.word	0x08025188

0801604c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d107      	bne.n	801606a <tcp_pcb_purge+0x1e>
 801605a:	4b21      	ldr	r3, [pc, #132]	; (80160e0 <tcp_pcb_purge+0x94>)
 801605c:	f640 0251 	movw	r2, #2129	; 0x851
 8016060:	4920      	ldr	r1, [pc, #128]	; (80160e4 <tcp_pcb_purge+0x98>)
 8016062:	4821      	ldr	r0, [pc, #132]	; (80160e8 <tcp_pcb_purge+0x9c>)
 8016064:	f00b f9a8 	bl	80213b8 <iprintf>
 8016068:	e037      	b.n	80160da <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	7d1b      	ldrb	r3, [r3, #20]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d033      	beq.n	80160da <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016076:	2b0a      	cmp	r3, #10
 8016078:	d02f      	beq.n	80160da <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801607e:	2b01      	cmp	r3, #1
 8016080:	d02b      	beq.n	80160da <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016086:	2b00      	cmp	r3, #0
 8016088:	d007      	beq.n	801609a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801608e:	4618      	mov	r0, r3
 8016090:	f7fe f84e 	bl	8014130 <pbuf_free>
      pcb->refused_data = NULL;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	2200      	movs	r2, #0
 8016098:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d002      	beq.n	80160a8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80160a2:	6878      	ldr	r0, [r7, #4]
 80160a4:	f000 f986 	bl	80163b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80160ae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160b4:	4618      	mov	r0, r3
 80160b6:	f7ff fcef 	bl	8015a98 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160be:	4618      	mov	r0, r3
 80160c0:	f7ff fcea 	bl	8015a98 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	2200      	movs	r2, #0
 80160c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	2200      	movs	r2, #0
 80160d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80160da:	3708      	adds	r7, #8
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}
 80160e0:	08024b5c 	.word	0x08024b5c
 80160e4:	080251a8 	.word	0x080251a8
 80160e8:	08024ba0 	.word	0x08024ba0

080160ec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80160ec:	b580      	push	{r7, lr}
 80160ee:	b084      	sub	sp, #16
 80160f0:	af00      	add	r7, sp, #0
 80160f2:	6078      	str	r0, [r7, #4]
 80160f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80160f6:	683b      	ldr	r3, [r7, #0]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d106      	bne.n	801610a <tcp_pcb_remove+0x1e>
 80160fc:	4b3e      	ldr	r3, [pc, #248]	; (80161f8 <tcp_pcb_remove+0x10c>)
 80160fe:	f640 0283 	movw	r2, #2179	; 0x883
 8016102:	493e      	ldr	r1, [pc, #248]	; (80161fc <tcp_pcb_remove+0x110>)
 8016104:	483e      	ldr	r0, [pc, #248]	; (8016200 <tcp_pcb_remove+0x114>)
 8016106:	f00b f957 	bl	80213b8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d106      	bne.n	801611e <tcp_pcb_remove+0x32>
 8016110:	4b39      	ldr	r3, [pc, #228]	; (80161f8 <tcp_pcb_remove+0x10c>)
 8016112:	f640 0284 	movw	r2, #2180	; 0x884
 8016116:	493b      	ldr	r1, [pc, #236]	; (8016204 <tcp_pcb_remove+0x118>)
 8016118:	4839      	ldr	r0, [pc, #228]	; (8016200 <tcp_pcb_remove+0x114>)
 801611a:	f00b f94d 	bl	80213b8 <iprintf>

  TCP_RMV(pcblist, pcb);
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	683a      	ldr	r2, [r7, #0]
 8016124:	429a      	cmp	r2, r3
 8016126:	d105      	bne.n	8016134 <tcp_pcb_remove+0x48>
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	68da      	ldr	r2, [r3, #12]
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	601a      	str	r2, [r3, #0]
 8016132:	e013      	b.n	801615c <tcp_pcb_remove+0x70>
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	60fb      	str	r3, [r7, #12]
 801613a:	e00c      	b.n	8016156 <tcp_pcb_remove+0x6a>
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	68db      	ldr	r3, [r3, #12]
 8016140:	683a      	ldr	r2, [r7, #0]
 8016142:	429a      	cmp	r2, r3
 8016144:	d104      	bne.n	8016150 <tcp_pcb_remove+0x64>
 8016146:	683b      	ldr	r3, [r7, #0]
 8016148:	68da      	ldr	r2, [r3, #12]
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	60da      	str	r2, [r3, #12]
 801614e:	e005      	b.n	801615c <tcp_pcb_remove+0x70>
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	68db      	ldr	r3, [r3, #12]
 8016154:	60fb      	str	r3, [r7, #12]
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	2b00      	cmp	r3, #0
 801615a:	d1ef      	bne.n	801613c <tcp_pcb_remove+0x50>
 801615c:	683b      	ldr	r3, [r7, #0]
 801615e:	2200      	movs	r2, #0
 8016160:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8016162:	6838      	ldr	r0, [r7, #0]
 8016164:	f7ff ff72 	bl	801604c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8016168:	683b      	ldr	r3, [r7, #0]
 801616a:	7d1b      	ldrb	r3, [r3, #20]
 801616c:	2b0a      	cmp	r3, #10
 801616e:	d013      	beq.n	8016198 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016170:	683b      	ldr	r3, [r7, #0]
 8016172:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016174:	2b01      	cmp	r3, #1
 8016176:	d00f      	beq.n	8016198 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016178:	683b      	ldr	r3, [r7, #0]
 801617a:	8b5b      	ldrh	r3, [r3, #26]
 801617c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016180:	2b00      	cmp	r3, #0
 8016182:	d009      	beq.n	8016198 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016184:	683b      	ldr	r3, [r7, #0]
 8016186:	8b5b      	ldrh	r3, [r3, #26]
 8016188:	f043 0302 	orr.w	r3, r3, #2
 801618c:	b29a      	uxth	r2, r3
 801618e:	683b      	ldr	r3, [r7, #0]
 8016190:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016192:	6838      	ldr	r0, [r7, #0]
 8016194:	f003 fbd4 	bl	8019940 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	7d1b      	ldrb	r3, [r3, #20]
 801619c:	2b01      	cmp	r3, #1
 801619e:	d020      	beq.n	80161e2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d006      	beq.n	80161b6 <tcp_pcb_remove+0xca>
 80161a8:	4b13      	ldr	r3, [pc, #76]	; (80161f8 <tcp_pcb_remove+0x10c>)
 80161aa:	f640 0293 	movw	r2, #2195	; 0x893
 80161ae:	4916      	ldr	r1, [pc, #88]	; (8016208 <tcp_pcb_remove+0x11c>)
 80161b0:	4813      	ldr	r0, [pc, #76]	; (8016200 <tcp_pcb_remove+0x114>)
 80161b2:	f00b f901 	bl	80213b8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d006      	beq.n	80161cc <tcp_pcb_remove+0xe0>
 80161be:	4b0e      	ldr	r3, [pc, #56]	; (80161f8 <tcp_pcb_remove+0x10c>)
 80161c0:	f640 0294 	movw	r2, #2196	; 0x894
 80161c4:	4911      	ldr	r1, [pc, #68]	; (801620c <tcp_pcb_remove+0x120>)
 80161c6:	480e      	ldr	r0, [pc, #56]	; (8016200 <tcp_pcb_remove+0x114>)
 80161c8:	f00b f8f6 	bl	80213b8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80161cc:	683b      	ldr	r3, [r7, #0]
 80161ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d006      	beq.n	80161e2 <tcp_pcb_remove+0xf6>
 80161d4:	4b08      	ldr	r3, [pc, #32]	; (80161f8 <tcp_pcb_remove+0x10c>)
 80161d6:	f640 0296 	movw	r2, #2198	; 0x896
 80161da:	490d      	ldr	r1, [pc, #52]	; (8016210 <tcp_pcb_remove+0x124>)
 80161dc:	4808      	ldr	r0, [pc, #32]	; (8016200 <tcp_pcb_remove+0x114>)
 80161de:	f00b f8eb 	bl	80213b8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80161e2:	683b      	ldr	r3, [r7, #0]
 80161e4:	2200      	movs	r2, #0
 80161e6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80161e8:	683b      	ldr	r3, [r7, #0]
 80161ea:	2200      	movs	r2, #0
 80161ec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80161ee:	bf00      	nop
 80161f0:	3710      	adds	r7, #16
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}
 80161f6:	bf00      	nop
 80161f8:	08024b5c 	.word	0x08024b5c
 80161fc:	080251c4 	.word	0x080251c4
 8016200:	08024ba0 	.word	0x08024ba0
 8016204:	080251e0 	.word	0x080251e0
 8016208:	08025200 	.word	0x08025200
 801620c:	08025218 	.word	0x08025218
 8016210:	08025234 	.word	0x08025234

08016214 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b082      	sub	sp, #8
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d106      	bne.n	8016230 <tcp_next_iss+0x1c>
 8016222:	4b0a      	ldr	r3, [pc, #40]	; (801624c <tcp_next_iss+0x38>)
 8016224:	f640 02af 	movw	r2, #2223	; 0x8af
 8016228:	4909      	ldr	r1, [pc, #36]	; (8016250 <tcp_next_iss+0x3c>)
 801622a:	480a      	ldr	r0, [pc, #40]	; (8016254 <tcp_next_iss+0x40>)
 801622c:	f00b f8c4 	bl	80213b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8016230:	4b09      	ldr	r3, [pc, #36]	; (8016258 <tcp_next_iss+0x44>)
 8016232:	681a      	ldr	r2, [r3, #0]
 8016234:	4b09      	ldr	r3, [pc, #36]	; (801625c <tcp_next_iss+0x48>)
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	4413      	add	r3, r2
 801623a:	4a07      	ldr	r2, [pc, #28]	; (8016258 <tcp_next_iss+0x44>)
 801623c:	6013      	str	r3, [r2, #0]
  return iss;
 801623e:	4b06      	ldr	r3, [pc, #24]	; (8016258 <tcp_next_iss+0x44>)
 8016240:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8016242:	4618      	mov	r0, r3
 8016244:	3708      	adds	r7, #8
 8016246:	46bd      	mov	sp, r7
 8016248:	bd80      	pop	{r7, pc}
 801624a:	bf00      	nop
 801624c:	08024b5c 	.word	0x08024b5c
 8016250:	0802524c 	.word	0x0802524c
 8016254:	08024ba0 	.word	0x08024ba0
 8016258:	20000028 	.word	0x20000028
 801625c:	200122d0 	.word	0x200122d0

08016260 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8016260:	b580      	push	{r7, lr}
 8016262:	b086      	sub	sp, #24
 8016264:	af00      	add	r7, sp, #0
 8016266:	4603      	mov	r3, r0
 8016268:	60b9      	str	r1, [r7, #8]
 801626a:	607a      	str	r2, [r7, #4]
 801626c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d106      	bne.n	8016282 <tcp_eff_send_mss_netif+0x22>
 8016274:	4b14      	ldr	r3, [pc, #80]	; (80162c8 <tcp_eff_send_mss_netif+0x68>)
 8016276:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801627a:	4914      	ldr	r1, [pc, #80]	; (80162cc <tcp_eff_send_mss_netif+0x6c>)
 801627c:	4814      	ldr	r0, [pc, #80]	; (80162d0 <tcp_eff_send_mss_netif+0x70>)
 801627e:	f00b f89b 	bl	80213b8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d101      	bne.n	801628c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016288:	89fb      	ldrh	r3, [r7, #14]
 801628a:	e019      	b.n	80162c0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801628c:	68bb      	ldr	r3, [r7, #8]
 801628e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016290:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016292:	8afb      	ldrh	r3, [r7, #22]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d012      	beq.n	80162be <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016298:	2328      	movs	r3, #40	; 0x28
 801629a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801629c:	8afa      	ldrh	r2, [r7, #22]
 801629e:	8abb      	ldrh	r3, [r7, #20]
 80162a0:	429a      	cmp	r2, r3
 80162a2:	d904      	bls.n	80162ae <tcp_eff_send_mss_netif+0x4e>
 80162a4:	8afa      	ldrh	r2, [r7, #22]
 80162a6:	8abb      	ldrh	r3, [r7, #20]
 80162a8:	1ad3      	subs	r3, r2, r3
 80162aa:	b29b      	uxth	r3, r3
 80162ac:	e000      	b.n	80162b0 <tcp_eff_send_mss_netif+0x50>
 80162ae:	2300      	movs	r3, #0
 80162b0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80162b2:	8a7a      	ldrh	r2, [r7, #18]
 80162b4:	89fb      	ldrh	r3, [r7, #14]
 80162b6:	4293      	cmp	r3, r2
 80162b8:	bf28      	it	cs
 80162ba:	4613      	movcs	r3, r2
 80162bc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80162be:	89fb      	ldrh	r3, [r7, #14]
}
 80162c0:	4618      	mov	r0, r3
 80162c2:	3718      	adds	r7, #24
 80162c4:	46bd      	mov	sp, r7
 80162c6:	bd80      	pop	{r7, pc}
 80162c8:	08024b5c 	.word	0x08024b5c
 80162cc:	08025268 	.word	0x08025268
 80162d0:	08024ba0 	.word	0x08024ba0

080162d4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b084      	sub	sp, #16
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
 80162dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80162de:	683b      	ldr	r3, [r7, #0]
 80162e0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d119      	bne.n	801631c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80162e8:	4b10      	ldr	r3, [pc, #64]	; (801632c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80162ea:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80162ee:	4910      	ldr	r1, [pc, #64]	; (8016330 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80162f0:	4810      	ldr	r0, [pc, #64]	; (8016334 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80162f2:	f00b f861 	bl	80213b8 <iprintf>

  while (pcb != NULL) {
 80162f6:	e011      	b.n	801631c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80162f8:	68fb      	ldr	r3, [r7, #12]
 80162fa:	681a      	ldr	r2, [r3, #0]
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	429a      	cmp	r2, r3
 8016302:	d108      	bne.n	8016316 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016304:	68fb      	ldr	r3, [r7, #12]
 8016306:	68db      	ldr	r3, [r3, #12]
 8016308:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801630a:	68f8      	ldr	r0, [r7, #12]
 801630c:	f7fe fd10 	bl	8014d30 <tcp_abort>
      pcb = next;
 8016310:	68bb      	ldr	r3, [r7, #8]
 8016312:	60fb      	str	r3, [r7, #12]
 8016314:	e002      	b.n	801631c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	68db      	ldr	r3, [r3, #12]
 801631a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d1ea      	bne.n	80162f8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8016322:	bf00      	nop
 8016324:	bf00      	nop
 8016326:	3710      	adds	r7, #16
 8016328:	46bd      	mov	sp, r7
 801632a:	bd80      	pop	{r7, pc}
 801632c:	08024b5c 	.word	0x08024b5c
 8016330:	08025290 	.word	0x08025290
 8016334:	08024ba0 	.word	0x08024ba0

08016338 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016338:	b580      	push	{r7, lr}
 801633a:	b084      	sub	sp, #16
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
 8016340:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d02a      	beq.n	801639e <tcp_netif_ip_addr_changed+0x66>
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	681b      	ldr	r3, [r3, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d026      	beq.n	801639e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8016350:	4b15      	ldr	r3, [pc, #84]	; (80163a8 <tcp_netif_ip_addr_changed+0x70>)
 8016352:	681b      	ldr	r3, [r3, #0]
 8016354:	4619      	mov	r1, r3
 8016356:	6878      	ldr	r0, [r7, #4]
 8016358:	f7ff ffbc 	bl	80162d4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801635c:	4b13      	ldr	r3, [pc, #76]	; (80163ac <tcp_netif_ip_addr_changed+0x74>)
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	4619      	mov	r1, r3
 8016362:	6878      	ldr	r0, [r7, #4]
 8016364:	f7ff ffb6 	bl	80162d4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8016368:	683b      	ldr	r3, [r7, #0]
 801636a:	2b00      	cmp	r3, #0
 801636c:	d017      	beq.n	801639e <tcp_netif_ip_addr_changed+0x66>
 801636e:	683b      	ldr	r3, [r7, #0]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d013      	beq.n	801639e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016376:	4b0e      	ldr	r3, [pc, #56]	; (80163b0 <tcp_netif_ip_addr_changed+0x78>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	60fb      	str	r3, [r7, #12]
 801637c:	e00c      	b.n	8016398 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801637e:	68fb      	ldr	r3, [r7, #12]
 8016380:	681a      	ldr	r2, [r3, #0]
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	681b      	ldr	r3, [r3, #0]
 8016386:	429a      	cmp	r2, r3
 8016388:	d103      	bne.n	8016392 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801638a:	683b      	ldr	r3, [r7, #0]
 801638c:	681a      	ldr	r2, [r3, #0]
 801638e:	68fb      	ldr	r3, [r7, #12]
 8016390:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016392:	68fb      	ldr	r3, [r7, #12]
 8016394:	68db      	ldr	r3, [r3, #12]
 8016396:	60fb      	str	r3, [r7, #12]
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d1ef      	bne.n	801637e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801639e:	bf00      	nop
 80163a0:	3710      	adds	r7, #16
 80163a2:	46bd      	mov	sp, r7
 80163a4:	bd80      	pop	{r7, pc}
 80163a6:	bf00      	nop
 80163a8:	200122dc 	.word	0x200122dc
 80163ac:	200122d4 	.word	0x200122d4
 80163b0:	200122d8 	.word	0x200122d8

080163b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	b082      	sub	sp, #8
 80163b8:	af00      	add	r7, sp, #0
 80163ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d007      	beq.n	80163d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80163c8:	4618      	mov	r0, r3
 80163ca:	f7ff fb65 	bl	8015a98 <tcp_segs_free>
    pcb->ooseq = NULL;
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	2200      	movs	r2, #0
 80163d2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80163d4:	bf00      	nop
 80163d6:	3708      	adds	r7, #8
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}

080163dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80163dc:	b590      	push	{r4, r7, lr}
 80163de:	b08f      	sub	sp, #60	; 0x3c
 80163e0:	af04      	add	r7, sp, #16
 80163e2:	6078      	str	r0, [r7, #4]
 80163e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
 80163e6:	2300      	movs	r3, #0
 80163e8:	61bb      	str	r3, [r7, #24]
  struct tcp_pcb_listen *lpcb_any = NULL;
 80163ea:	2300      	movs	r3, #0
 80163ec:	617b      	str	r3, [r7, #20]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d105      	bne.n	8016400 <tcp_input+0x24>
 80163f4:	4b9b      	ldr	r3, [pc, #620]	; (8016664 <tcp_input+0x288>)
 80163f6:	2283      	movs	r2, #131	; 0x83
 80163f8:	499b      	ldr	r1, [pc, #620]	; (8016668 <tcp_input+0x28c>)
 80163fa:	489c      	ldr	r0, [pc, #624]	; (801666c <tcp_input+0x290>)
 80163fc:	f00a ffdc 	bl	80213b8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016400:	687b      	ldr	r3, [r7, #4]
 8016402:	685b      	ldr	r3, [r3, #4]
 8016404:	4a9a      	ldr	r2, [pc, #616]	; (8016670 <tcp_input+0x294>)
 8016406:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	895b      	ldrh	r3, [r3, #10]
 801640c:	2b13      	cmp	r3, #19
 801640e:	f240 83db 	bls.w	8016bc8 <tcp_input+0x7ec>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016412:	4b98      	ldr	r3, [pc, #608]	; (8016674 <tcp_input+0x298>)
 8016414:	695b      	ldr	r3, [r3, #20]
 8016416:	4a97      	ldr	r2, [pc, #604]	; (8016674 <tcp_input+0x298>)
 8016418:	6812      	ldr	r2, [r2, #0]
 801641a:	4611      	mov	r1, r2
 801641c:	4618      	mov	r0, r3
 801641e:	f008 fa83 	bl	801e928 <ip4_addr_isbroadcast_u32>
 8016422:	4603      	mov	r3, r0
 8016424:	2b00      	cmp	r3, #0
 8016426:	f040 83d1 	bne.w	8016bcc <tcp_input+0x7f0>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801642a:	4b92      	ldr	r3, [pc, #584]	; (8016674 <tcp_input+0x298>)
 801642c:	695b      	ldr	r3, [r3, #20]
 801642e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8016432:	2be0      	cmp	r3, #224	; 0xe0
 8016434:	f000 83ca 	beq.w	8016bcc <tcp_input+0x7f0>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8016438:	4b8d      	ldr	r3, [pc, #564]	; (8016670 <tcp_input+0x294>)
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	899b      	ldrh	r3, [r3, #12]
 801643e:	b29b      	uxth	r3, r3
 8016440:	4618      	mov	r0, r3
 8016442:	f7fc fa77 	bl	8012934 <lwip_htons>
 8016446:	4603      	mov	r3, r0
 8016448:	0b1b      	lsrs	r3, r3, #12
 801644a:	b29b      	uxth	r3, r3
 801644c:	b2db      	uxtb	r3, r3
 801644e:	009b      	lsls	r3, r3, #2
 8016450:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8016452:	7cbb      	ldrb	r3, [r7, #18]
 8016454:	2b13      	cmp	r3, #19
 8016456:	f240 83bb 	bls.w	8016bd0 <tcp_input+0x7f4>
 801645a:	7cbb      	ldrb	r3, [r7, #18]
 801645c:	b29a      	uxth	r2, r3
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	891b      	ldrh	r3, [r3, #8]
 8016462:	429a      	cmp	r2, r3
 8016464:	f200 83b4 	bhi.w	8016bd0 <tcp_input+0x7f4>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8016468:	7cbb      	ldrb	r3, [r7, #18]
 801646a:	b29b      	uxth	r3, r3
 801646c:	3b14      	subs	r3, #20
 801646e:	b29a      	uxth	r2, r3
 8016470:	4b81      	ldr	r3, [pc, #516]	; (8016678 <tcp_input+0x29c>)
 8016472:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8016474:	4b81      	ldr	r3, [pc, #516]	; (801667c <tcp_input+0x2a0>)
 8016476:	2200      	movs	r2, #0
 8016478:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	895a      	ldrh	r2, [r3, #10]
 801647e:	7cbb      	ldrb	r3, [r7, #18]
 8016480:	b29b      	uxth	r3, r3
 8016482:	429a      	cmp	r2, r3
 8016484:	d309      	bcc.n	801649a <tcp_input+0xbe>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8016486:	4b7c      	ldr	r3, [pc, #496]	; (8016678 <tcp_input+0x29c>)
 8016488:	881a      	ldrh	r2, [r3, #0]
 801648a:	4b7d      	ldr	r3, [pc, #500]	; (8016680 <tcp_input+0x2a4>)
 801648c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801648e:	7cbb      	ldrb	r3, [r7, #18]
 8016490:	4619      	mov	r1, r3
 8016492:	6878      	ldr	r0, [r7, #4]
 8016494:	f7fd fdc6 	bl	8014024 <pbuf_remove_header>
 8016498:	e04e      	b.n	8016538 <tcp_input+0x15c>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d105      	bne.n	80164ae <tcp_input+0xd2>
 80164a2:	4b70      	ldr	r3, [pc, #448]	; (8016664 <tcp_input+0x288>)
 80164a4:	22c2      	movs	r2, #194	; 0xc2
 80164a6:	4977      	ldr	r1, [pc, #476]	; (8016684 <tcp_input+0x2a8>)
 80164a8:	4870      	ldr	r0, [pc, #448]	; (801666c <tcp_input+0x290>)
 80164aa:	f00a ff85 	bl	80213b8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80164ae:	2114      	movs	r1, #20
 80164b0:	6878      	ldr	r0, [r7, #4]
 80164b2:	f7fd fdb7 	bl	8014024 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80164b6:	687b      	ldr	r3, [r7, #4]
 80164b8:	895a      	ldrh	r2, [r3, #10]
 80164ba:	4b71      	ldr	r3, [pc, #452]	; (8016680 <tcp_input+0x2a4>)
 80164bc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80164be:	4b6e      	ldr	r3, [pc, #440]	; (8016678 <tcp_input+0x29c>)
 80164c0:	881a      	ldrh	r2, [r3, #0]
 80164c2:	4b6f      	ldr	r3, [pc, #444]	; (8016680 <tcp_input+0x2a4>)
 80164c4:	881b      	ldrh	r3, [r3, #0]
 80164c6:	1ad3      	subs	r3, r2, r3
 80164c8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80164ca:	4b6d      	ldr	r3, [pc, #436]	; (8016680 <tcp_input+0x2a4>)
 80164cc:	881b      	ldrh	r3, [r3, #0]
 80164ce:	4619      	mov	r1, r3
 80164d0:	6878      	ldr	r0, [r7, #4]
 80164d2:	f7fd fda7 	bl	8014024 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	895b      	ldrh	r3, [r3, #10]
 80164dc:	8a3a      	ldrh	r2, [r7, #16]
 80164de:	429a      	cmp	r2, r3
 80164e0:	f200 8378 	bhi.w	8016bd4 <tcp_input+0x7f8>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	681b      	ldr	r3, [r3, #0]
 80164e8:	685b      	ldr	r3, [r3, #4]
 80164ea:	4a64      	ldr	r2, [pc, #400]	; (801667c <tcp_input+0x2a0>)
 80164ec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	8a3a      	ldrh	r2, [r7, #16]
 80164f4:	4611      	mov	r1, r2
 80164f6:	4618      	mov	r0, r3
 80164f8:	f7fd fd94 	bl	8014024 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	891a      	ldrh	r2, [r3, #8]
 8016500:	8a3b      	ldrh	r3, [r7, #16]
 8016502:	1ad3      	subs	r3, r2, r3
 8016504:	b29a      	uxth	r2, r3
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	895b      	ldrh	r3, [r3, #10]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d005      	beq.n	801651e <tcp_input+0x142>
 8016512:	4b54      	ldr	r3, [pc, #336]	; (8016664 <tcp_input+0x288>)
 8016514:	22df      	movs	r2, #223	; 0xdf
 8016516:	495c      	ldr	r1, [pc, #368]	; (8016688 <tcp_input+0x2ac>)
 8016518:	4854      	ldr	r0, [pc, #336]	; (801666c <tcp_input+0x290>)
 801651a:	f00a ff4d 	bl	80213b8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	891a      	ldrh	r2, [r3, #8]
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	891b      	ldrh	r3, [r3, #8]
 8016528:	429a      	cmp	r2, r3
 801652a:	d005      	beq.n	8016538 <tcp_input+0x15c>
 801652c:	4b4d      	ldr	r3, [pc, #308]	; (8016664 <tcp_input+0x288>)
 801652e:	22e0      	movs	r2, #224	; 0xe0
 8016530:	4956      	ldr	r1, [pc, #344]	; (801668c <tcp_input+0x2b0>)
 8016532:	484e      	ldr	r0, [pc, #312]	; (801666c <tcp_input+0x290>)
 8016534:	f00a ff40 	bl	80213b8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8016538:	4b4d      	ldr	r3, [pc, #308]	; (8016670 <tcp_input+0x294>)
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	881b      	ldrh	r3, [r3, #0]
 801653e:	b29b      	uxth	r3, r3
 8016540:	4a4b      	ldr	r2, [pc, #300]	; (8016670 <tcp_input+0x294>)
 8016542:	6814      	ldr	r4, [r2, #0]
 8016544:	4618      	mov	r0, r3
 8016546:	f7fc f9f5 	bl	8012934 <lwip_htons>
 801654a:	4603      	mov	r3, r0
 801654c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801654e:	4b48      	ldr	r3, [pc, #288]	; (8016670 <tcp_input+0x294>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	885b      	ldrh	r3, [r3, #2]
 8016554:	b29b      	uxth	r3, r3
 8016556:	4a46      	ldr	r2, [pc, #280]	; (8016670 <tcp_input+0x294>)
 8016558:	6814      	ldr	r4, [r2, #0]
 801655a:	4618      	mov	r0, r3
 801655c:	f7fc f9ea 	bl	8012934 <lwip_htons>
 8016560:	4603      	mov	r3, r0
 8016562:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8016564:	4b42      	ldr	r3, [pc, #264]	; (8016670 <tcp_input+0x294>)
 8016566:	681b      	ldr	r3, [r3, #0]
 8016568:	685b      	ldr	r3, [r3, #4]
 801656a:	4a41      	ldr	r2, [pc, #260]	; (8016670 <tcp_input+0x294>)
 801656c:	6814      	ldr	r4, [r2, #0]
 801656e:	4618      	mov	r0, r3
 8016570:	f7fc f9f5 	bl	801295e <lwip_htonl>
 8016574:	4603      	mov	r3, r0
 8016576:	6063      	str	r3, [r4, #4]
 8016578:	6863      	ldr	r3, [r4, #4]
 801657a:	4a45      	ldr	r2, [pc, #276]	; (8016690 <tcp_input+0x2b4>)
 801657c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801657e:	4b3c      	ldr	r3, [pc, #240]	; (8016670 <tcp_input+0x294>)
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	689b      	ldr	r3, [r3, #8]
 8016584:	4a3a      	ldr	r2, [pc, #232]	; (8016670 <tcp_input+0x294>)
 8016586:	6814      	ldr	r4, [r2, #0]
 8016588:	4618      	mov	r0, r3
 801658a:	f7fc f9e8 	bl	801295e <lwip_htonl>
 801658e:	4603      	mov	r3, r0
 8016590:	60a3      	str	r3, [r4, #8]
 8016592:	68a3      	ldr	r3, [r4, #8]
 8016594:	4a3f      	ldr	r2, [pc, #252]	; (8016694 <tcp_input+0x2b8>)
 8016596:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016598:	4b35      	ldr	r3, [pc, #212]	; (8016670 <tcp_input+0x294>)
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	89db      	ldrh	r3, [r3, #14]
 801659e:	b29b      	uxth	r3, r3
 80165a0:	4a33      	ldr	r2, [pc, #204]	; (8016670 <tcp_input+0x294>)
 80165a2:	6814      	ldr	r4, [r2, #0]
 80165a4:	4618      	mov	r0, r3
 80165a6:	f7fc f9c5 	bl	8012934 <lwip_htons>
 80165aa:	4603      	mov	r3, r0
 80165ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80165ae:	4b30      	ldr	r3, [pc, #192]	; (8016670 <tcp_input+0x294>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	899b      	ldrh	r3, [r3, #12]
 80165b4:	b29b      	uxth	r3, r3
 80165b6:	4618      	mov	r0, r3
 80165b8:	f7fc f9bc 	bl	8012934 <lwip_htons>
 80165bc:	4603      	mov	r3, r0
 80165be:	b2db      	uxtb	r3, r3
 80165c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80165c4:	b2da      	uxtb	r2, r3
 80165c6:	4b34      	ldr	r3, [pc, #208]	; (8016698 <tcp_input+0x2bc>)
 80165c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	891a      	ldrh	r2, [r3, #8]
 80165ce:	4b33      	ldr	r3, [pc, #204]	; (801669c <tcp_input+0x2c0>)
 80165d0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80165d2:	4b31      	ldr	r3, [pc, #196]	; (8016698 <tcp_input+0x2bc>)
 80165d4:	781b      	ldrb	r3, [r3, #0]
 80165d6:	f003 0303 	and.w	r3, r3, #3
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d00c      	beq.n	80165f8 <tcp_input+0x21c>
    tcplen++;
 80165de:	4b2f      	ldr	r3, [pc, #188]	; (801669c <tcp_input+0x2c0>)
 80165e0:	881b      	ldrh	r3, [r3, #0]
 80165e2:	3301      	adds	r3, #1
 80165e4:	b29a      	uxth	r2, r3
 80165e6:	4b2d      	ldr	r3, [pc, #180]	; (801669c <tcp_input+0x2c0>)
 80165e8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	891a      	ldrh	r2, [r3, #8]
 80165ee:	4b2b      	ldr	r3, [pc, #172]	; (801669c <tcp_input+0x2c0>)
 80165f0:	881b      	ldrh	r3, [r3, #0]
 80165f2:	429a      	cmp	r2, r3
 80165f4:	f200 82f0 	bhi.w	8016bd8 <tcp_input+0x7fc>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80165f8:	2300      	movs	r3, #0
 80165fa:	623b      	str	r3, [r7, #32]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80165fc:	4b28      	ldr	r3, [pc, #160]	; (80166a0 <tcp_input+0x2c4>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	627b      	str	r3, [r7, #36]	; 0x24
 8016602:	e09d      	b.n	8016740 <tcp_input+0x364>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8016604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016606:	7d1b      	ldrb	r3, [r3, #20]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d105      	bne.n	8016618 <tcp_input+0x23c>
 801660c:	4b15      	ldr	r3, [pc, #84]	; (8016664 <tcp_input+0x288>)
 801660e:	22fb      	movs	r2, #251	; 0xfb
 8016610:	4924      	ldr	r1, [pc, #144]	; (80166a4 <tcp_input+0x2c8>)
 8016612:	4816      	ldr	r0, [pc, #88]	; (801666c <tcp_input+0x290>)
 8016614:	f00a fed0 	bl	80213b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8016618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801661a:	7d1b      	ldrb	r3, [r3, #20]
 801661c:	2b0a      	cmp	r3, #10
 801661e:	d105      	bne.n	801662c <tcp_input+0x250>
 8016620:	4b10      	ldr	r3, [pc, #64]	; (8016664 <tcp_input+0x288>)
 8016622:	22fc      	movs	r2, #252	; 0xfc
 8016624:	4920      	ldr	r1, [pc, #128]	; (80166a8 <tcp_input+0x2cc>)
 8016626:	4811      	ldr	r0, [pc, #68]	; (801666c <tcp_input+0x290>)
 8016628:	f00a fec6 	bl	80213b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801662c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801662e:	7d1b      	ldrb	r3, [r3, #20]
 8016630:	2b01      	cmp	r3, #1
 8016632:	d105      	bne.n	8016640 <tcp_input+0x264>
 8016634:	4b0b      	ldr	r3, [pc, #44]	; (8016664 <tcp_input+0x288>)
 8016636:	22fd      	movs	r2, #253	; 0xfd
 8016638:	491c      	ldr	r1, [pc, #112]	; (80166ac <tcp_input+0x2d0>)
 801663a:	480c      	ldr	r0, [pc, #48]	; (801666c <tcp_input+0x290>)
 801663c:	f00a febc 	bl	80213b8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016642:	7a1b      	ldrb	r3, [r3, #8]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d033      	beq.n	80166b0 <tcp_input+0x2d4>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801664a:	7a1a      	ldrb	r2, [r3, #8]
 801664c:	4b09      	ldr	r3, [pc, #36]	; (8016674 <tcp_input+0x298>)
 801664e:	685b      	ldr	r3, [r3, #4]
 8016650:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016654:	3301      	adds	r3, #1
 8016656:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016658:	429a      	cmp	r2, r3
 801665a:	d029      	beq.n	80166b0 <tcp_input+0x2d4>
      prev = pcb;
 801665c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801665e:	623b      	str	r3, [r7, #32]
      continue;
 8016660:	e06b      	b.n	801673a <tcp_input+0x35e>
 8016662:	bf00      	nop
 8016664:	080252c4 	.word	0x080252c4
 8016668:	080252f8 	.word	0x080252f8
 801666c:	08025310 	.word	0x08025310
 8016670:	200122f8 	.word	0x200122f8
 8016674:	2000eb24 	.word	0x2000eb24
 8016678:	200122fc 	.word	0x200122fc
 801667c:	20012300 	.word	0x20012300
 8016680:	200122fe 	.word	0x200122fe
 8016684:	08025338 	.word	0x08025338
 8016688:	08025348 	.word	0x08025348
 801668c:	08025354 	.word	0x08025354
 8016690:	20012308 	.word	0x20012308
 8016694:	2001230c 	.word	0x2001230c
 8016698:	20012314 	.word	0x20012314
 801669c:	20012312 	.word	0x20012312
 80166a0:	200122dc 	.word	0x200122dc
 80166a4:	08025374 	.word	0x08025374
 80166a8:	0802539c 	.word	0x0802539c
 80166ac:	080253c8 	.word	0x080253c8
    }

    if (pcb->remote_port == tcphdr->src &&
 80166b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166b2:	8b1a      	ldrh	r2, [r3, #24]
 80166b4:	4b77      	ldr	r3, [pc, #476]	; (8016894 <tcp_input+0x4b8>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	881b      	ldrh	r3, [r3, #0]
 80166ba:	b29b      	uxth	r3, r3
 80166bc:	429a      	cmp	r2, r3
 80166be:	d13a      	bne.n	8016736 <tcp_input+0x35a>
        pcb->local_port == tcphdr->dest &&
 80166c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166c2:	8ada      	ldrh	r2, [r3, #22]
 80166c4:	4b73      	ldr	r3, [pc, #460]	; (8016894 <tcp_input+0x4b8>)
 80166c6:	681b      	ldr	r3, [r3, #0]
 80166c8:	885b      	ldrh	r3, [r3, #2]
 80166ca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80166cc:	429a      	cmp	r2, r3
 80166ce:	d132      	bne.n	8016736 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80166d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166d2:	685a      	ldr	r2, [r3, #4]
 80166d4:	4b70      	ldr	r3, [pc, #448]	; (8016898 <tcp_input+0x4bc>)
 80166d6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80166d8:	429a      	cmp	r2, r3
 80166da:	d12c      	bne.n	8016736 <tcp_input+0x35a>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80166dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166de:	681a      	ldr	r2, [r3, #0]
 80166e0:	4b6d      	ldr	r3, [pc, #436]	; (8016898 <tcp_input+0x4bc>)
 80166e2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80166e4:	429a      	cmp	r2, r3
 80166e6:	d126      	bne.n	8016736 <tcp_input+0x35a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80166e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ea:	68db      	ldr	r3, [r3, #12]
 80166ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80166ee:	429a      	cmp	r2, r3
 80166f0:	d106      	bne.n	8016700 <tcp_input+0x324>
 80166f2:	4b6a      	ldr	r3, [pc, #424]	; (801689c <tcp_input+0x4c0>)
 80166f4:	f240 120d 	movw	r2, #269	; 0x10d
 80166f8:	4969      	ldr	r1, [pc, #420]	; (80168a0 <tcp_input+0x4c4>)
 80166fa:	486a      	ldr	r0, [pc, #424]	; (80168a4 <tcp_input+0x4c8>)
 80166fc:	f00a fe5c 	bl	80213b8 <iprintf>
      if (prev != NULL) {
 8016700:	6a3b      	ldr	r3, [r7, #32]
 8016702:	2b00      	cmp	r3, #0
 8016704:	d00a      	beq.n	801671c <tcp_input+0x340>
        prev->next = pcb->next;
 8016706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016708:	68da      	ldr	r2, [r3, #12]
 801670a:	6a3b      	ldr	r3, [r7, #32]
 801670c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801670e:	4b66      	ldr	r3, [pc, #408]	; (80168a8 <tcp_input+0x4cc>)
 8016710:	681a      	ldr	r2, [r3, #0]
 8016712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016714:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8016716:	4a64      	ldr	r2, [pc, #400]	; (80168a8 <tcp_input+0x4cc>)
 8016718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671e:	68db      	ldr	r3, [r3, #12]
 8016720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016722:	429a      	cmp	r2, r3
 8016724:	d111      	bne.n	801674a <tcp_input+0x36e>
 8016726:	4b5d      	ldr	r3, [pc, #372]	; (801689c <tcp_input+0x4c0>)
 8016728:	f240 1215 	movw	r2, #277	; 0x115
 801672c:	495f      	ldr	r1, [pc, #380]	; (80168ac <tcp_input+0x4d0>)
 801672e:	485d      	ldr	r0, [pc, #372]	; (80168a4 <tcp_input+0x4c8>)
 8016730:	f00a fe42 	bl	80213b8 <iprintf>
      break;
 8016734:	e009      	b.n	801674a <tcp_input+0x36e>
    }
    prev = pcb;
 8016736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016738:	623b      	str	r3, [r7, #32]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801673a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801673c:	68db      	ldr	r3, [r3, #12]
 801673e:	627b      	str	r3, [r7, #36]	; 0x24
 8016740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016742:	2b00      	cmp	r3, #0
 8016744:	f47f af5e 	bne.w	8016604 <tcp_input+0x228>
 8016748:	e000      	b.n	801674c <tcp_input+0x370>
      break;
 801674a:	bf00      	nop
  }

  if (pcb == NULL) {
 801674c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801674e:	2b00      	cmp	r3, #0
 8016750:	f040 80b4 	bne.w	80168bc <tcp_input+0x4e0>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016754:	4b56      	ldr	r3, [pc, #344]	; (80168b0 <tcp_input+0x4d4>)
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	627b      	str	r3, [r7, #36]	; 0x24
 801675a:	e03f      	b.n	80167dc <tcp_input+0x400>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801675e:	7d1b      	ldrb	r3, [r3, #20]
 8016760:	2b0a      	cmp	r3, #10
 8016762:	d006      	beq.n	8016772 <tcp_input+0x396>
 8016764:	4b4d      	ldr	r3, [pc, #308]	; (801689c <tcp_input+0x4c0>)
 8016766:	f240 121f 	movw	r2, #287	; 0x11f
 801676a:	4952      	ldr	r1, [pc, #328]	; (80168b4 <tcp_input+0x4d8>)
 801676c:	484d      	ldr	r0, [pc, #308]	; (80168a4 <tcp_input+0x4c8>)
 801676e:	f00a fe23 	bl	80213b8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016774:	7a1b      	ldrb	r3, [r3, #8]
 8016776:	2b00      	cmp	r3, #0
 8016778:	d009      	beq.n	801678e <tcp_input+0x3b2>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801677c:	7a1a      	ldrb	r2, [r3, #8]
 801677e:	4b46      	ldr	r3, [pc, #280]	; (8016898 <tcp_input+0x4bc>)
 8016780:	685b      	ldr	r3, [r3, #4]
 8016782:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016786:	3301      	adds	r3, #1
 8016788:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801678a:	429a      	cmp	r2, r3
 801678c:	d122      	bne.n	80167d4 <tcp_input+0x3f8>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016790:	8b1a      	ldrh	r2, [r3, #24]
 8016792:	4b40      	ldr	r3, [pc, #256]	; (8016894 <tcp_input+0x4b8>)
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	881b      	ldrh	r3, [r3, #0]
 8016798:	b29b      	uxth	r3, r3
 801679a:	429a      	cmp	r2, r3
 801679c:	d11b      	bne.n	80167d6 <tcp_input+0x3fa>
          pcb->local_port == tcphdr->dest &&
 801679e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167a0:	8ada      	ldrh	r2, [r3, #22]
 80167a2:	4b3c      	ldr	r3, [pc, #240]	; (8016894 <tcp_input+0x4b8>)
 80167a4:	681b      	ldr	r3, [r3, #0]
 80167a6:	885b      	ldrh	r3, [r3, #2]
 80167a8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80167aa:	429a      	cmp	r2, r3
 80167ac:	d113      	bne.n	80167d6 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80167ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167b0:	685a      	ldr	r2, [r3, #4]
 80167b2:	4b39      	ldr	r3, [pc, #228]	; (8016898 <tcp_input+0x4bc>)
 80167b4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80167b6:	429a      	cmp	r2, r3
 80167b8:	d10d      	bne.n	80167d6 <tcp_input+0x3fa>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80167ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167bc:	681a      	ldr	r2, [r3, #0]
 80167be:	4b36      	ldr	r3, [pc, #216]	; (8016898 <tcp_input+0x4bc>)
 80167c0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80167c2:	429a      	cmp	r2, r3
 80167c4:	d107      	bne.n	80167d6 <tcp_input+0x3fa>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80167c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167c8:	f000 fb60 	bl	8016e8c <tcp_timewait_input>
        }
        pbuf_free(p);
 80167cc:	6878      	ldr	r0, [r7, #4]
 80167ce:	f7fd fcaf 	bl	8014130 <pbuf_free>
        return;
 80167d2:	e207      	b.n	8016be4 <tcp_input+0x808>
        continue;
 80167d4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80167d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d8:	68db      	ldr	r3, [r3, #12]
 80167da:	627b      	str	r3, [r7, #36]	; 0x24
 80167dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d1bc      	bne.n	801675c <tcp_input+0x380>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80167e2:	2300      	movs	r3, #0
 80167e4:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80167e6:	4b34      	ldr	r3, [pc, #208]	; (80168b8 <tcp_input+0x4dc>)
 80167e8:	681b      	ldr	r3, [r3, #0]
 80167ea:	61fb      	str	r3, [r7, #28]
 80167ec:	e02e      	b.n	801684c <tcp_input+0x470>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80167ee:	69fb      	ldr	r3, [r7, #28]
 80167f0:	7a1b      	ldrb	r3, [r3, #8]
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d00c      	beq.n	8016810 <tcp_input+0x434>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80167f6:	69fb      	ldr	r3, [r7, #28]
 80167f8:	7a1a      	ldrb	r2, [r3, #8]
 80167fa:	4b27      	ldr	r3, [pc, #156]	; (8016898 <tcp_input+0x4bc>)
 80167fc:	685b      	ldr	r3, [r3, #4]
 80167fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016802:	3301      	adds	r3, #1
 8016804:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016806:	429a      	cmp	r2, r3
 8016808:	d002      	beq.n	8016810 <tcp_input+0x434>
        prev = (struct tcp_pcb *)lpcb;
 801680a:	69fb      	ldr	r3, [r7, #28]
 801680c:	623b      	str	r3, [r7, #32]
        continue;
 801680e:	e01a      	b.n	8016846 <tcp_input+0x46a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016810:	69fb      	ldr	r3, [r7, #28]
 8016812:	8ada      	ldrh	r2, [r3, #22]
 8016814:	4b1f      	ldr	r3, [pc, #124]	; (8016894 <tcp_input+0x4b8>)
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	885b      	ldrh	r3, [r3, #2]
 801681a:	b29b      	uxth	r3, r3
 801681c:	429a      	cmp	r2, r3
 801681e:	d110      	bne.n	8016842 <tcp_input+0x466>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016820:	69fb      	ldr	r3, [r7, #28]
 8016822:	681a      	ldr	r2, [r3, #0]
 8016824:	4b1c      	ldr	r3, [pc, #112]	; (8016898 <tcp_input+0x4bc>)
 8016826:	695b      	ldr	r3, [r3, #20]
 8016828:	429a      	cmp	r2, r3
 801682a:	d013      	beq.n	8016854 <tcp_input+0x478>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801682c:	69fb      	ldr	r3, [r7, #28]
 801682e:	2b00      	cmp	r3, #0
 8016830:	d003      	beq.n	801683a <tcp_input+0x45e>
 8016832:	69fb      	ldr	r3, [r7, #28]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	2b00      	cmp	r3, #0
 8016838:	d103      	bne.n	8016842 <tcp_input+0x466>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
 801683a:	69fb      	ldr	r3, [r7, #28]
 801683c:	617b      	str	r3, [r7, #20]
            lpcb_prev = prev;
 801683e:	6a3b      	ldr	r3, [r7, #32]
 8016840:	61bb      	str	r3, [r7, #24]
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016842:	69fb      	ldr	r3, [r7, #28]
 8016844:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016846:	69fb      	ldr	r3, [r7, #28]
 8016848:	68db      	ldr	r3, [r3, #12]
 801684a:	61fb      	str	r3, [r7, #28]
 801684c:	69fb      	ldr	r3, [r7, #28]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d1cd      	bne.n	80167ee <tcp_input+0x412>
 8016852:	e000      	b.n	8016856 <tcp_input+0x47a>
            break;
 8016854:	bf00      	nop
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d103      	bne.n	8016864 <tcp_input+0x488>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
 801685c:	697b      	ldr	r3, [r7, #20]
 801685e:	61fb      	str	r3, [r7, #28]
      prev = lpcb_prev;
 8016860:	69bb      	ldr	r3, [r7, #24]
 8016862:	623b      	str	r3, [r7, #32]
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016864:	69fb      	ldr	r3, [r7, #28]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d028      	beq.n	80168bc <tcp_input+0x4e0>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801686a:	6a3b      	ldr	r3, [r7, #32]
 801686c:	2b00      	cmp	r3, #0
 801686e:	d00a      	beq.n	8016886 <tcp_input+0x4aa>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016870:	69fb      	ldr	r3, [r7, #28]
 8016872:	68da      	ldr	r2, [r3, #12]
 8016874:	6a3b      	ldr	r3, [r7, #32]
 8016876:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016878:	4b0f      	ldr	r3, [pc, #60]	; (80168b8 <tcp_input+0x4dc>)
 801687a:	681a      	ldr	r2, [r3, #0]
 801687c:	69fb      	ldr	r3, [r7, #28]
 801687e:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016880:	4a0d      	ldr	r2, [pc, #52]	; (80168b8 <tcp_input+0x4dc>)
 8016882:	69fb      	ldr	r3, [r7, #28]
 8016884:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016886:	69f8      	ldr	r0, [r7, #28]
 8016888:	f000 fa02 	bl	8016c90 <tcp_listen_input>
      }
      pbuf_free(p);
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f7fd fc4f 	bl	8014130 <pbuf_free>
      return;
 8016892:	e1a7      	b.n	8016be4 <tcp_input+0x808>
 8016894:	200122f8 	.word	0x200122f8
 8016898:	2000eb24 	.word	0x2000eb24
 801689c:	080252c4 	.word	0x080252c4
 80168a0:	080253f0 	.word	0x080253f0
 80168a4:	08025310 	.word	0x08025310
 80168a8:	200122dc 	.word	0x200122dc
 80168ac:	0802541c 	.word	0x0802541c
 80168b0:	200122e0 	.word	0x200122e0
 80168b4:	08025448 	.word	0x08025448
 80168b8:	200122d8 	.word	0x200122d8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80168bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168be:	2b00      	cmp	r3, #0
 80168c0:	f000 8158 	beq.w	8016b74 <tcp_input+0x798>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80168c4:	4b95      	ldr	r3, [pc, #596]	; (8016b1c <tcp_input+0x740>)
 80168c6:	2200      	movs	r2, #0
 80168c8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	891a      	ldrh	r2, [r3, #8]
 80168ce:	4b93      	ldr	r3, [pc, #588]	; (8016b1c <tcp_input+0x740>)
 80168d0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80168d2:	4a92      	ldr	r2, [pc, #584]	; (8016b1c <tcp_input+0x740>)
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80168d8:	4b91      	ldr	r3, [pc, #580]	; (8016b20 <tcp_input+0x744>)
 80168da:	681b      	ldr	r3, [r3, #0]
 80168dc:	4a8f      	ldr	r2, [pc, #572]	; (8016b1c <tcp_input+0x740>)
 80168de:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80168e0:	4b90      	ldr	r3, [pc, #576]	; (8016b24 <tcp_input+0x748>)
 80168e2:	2200      	movs	r2, #0
 80168e4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80168e6:	4b90      	ldr	r3, [pc, #576]	; (8016b28 <tcp_input+0x74c>)
 80168e8:	2200      	movs	r2, #0
 80168ea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80168ec:	4b8f      	ldr	r3, [pc, #572]	; (8016b2c <tcp_input+0x750>)
 80168ee:	2200      	movs	r2, #0
 80168f0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80168f2:	4b8f      	ldr	r3, [pc, #572]	; (8016b30 <tcp_input+0x754>)
 80168f4:	781b      	ldrb	r3, [r3, #0]
 80168f6:	f003 0308 	and.w	r3, r3, #8
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d006      	beq.n	801690c <tcp_input+0x530>
      p->flags |= PBUF_FLAG_PUSH;
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	7b5b      	ldrb	r3, [r3, #13]
 8016902:	f043 0301 	orr.w	r3, r3, #1
 8016906:	b2da      	uxtb	r2, r3
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801690e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016910:	2b00      	cmp	r3, #0
 8016912:	d017      	beq.n	8016944 <tcp_input+0x568>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016914:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016916:	f7ff f843 	bl	80159a0 <tcp_process_refused_data>
 801691a:	4603      	mov	r3, r0
 801691c:	f113 0f0d 	cmn.w	r3, #13
 8016920:	d007      	beq.n	8016932 <tcp_input+0x556>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016926:	2b00      	cmp	r3, #0
 8016928:	d00c      	beq.n	8016944 <tcp_input+0x568>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801692a:	4b82      	ldr	r3, [pc, #520]	; (8016b34 <tcp_input+0x758>)
 801692c:	881b      	ldrh	r3, [r3, #0]
 801692e:	2b00      	cmp	r3, #0
 8016930:	d008      	beq.n	8016944 <tcp_input+0x568>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016936:	2b00      	cmp	r3, #0
 8016938:	f040 80e3 	bne.w	8016b02 <tcp_input+0x726>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801693c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801693e:	f003 fe05 	bl	801a54c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016942:	e0de      	b.n	8016b02 <tcp_input+0x726>
      }
    }
    tcp_input_pcb = pcb;
 8016944:	4a7c      	ldr	r2, [pc, #496]	; (8016b38 <tcp_input+0x75c>)
 8016946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016948:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801694a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801694c:	f000 fb18 	bl	8016f80 <tcp_process>
 8016950:	4603      	mov	r3, r0
 8016952:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016954:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016958:	f113 0f0d 	cmn.w	r3, #13
 801695c:	f000 80d3 	beq.w	8016b06 <tcp_input+0x72a>
      if (recv_flags & TF_RESET) {
 8016960:	4b71      	ldr	r3, [pc, #452]	; (8016b28 <tcp_input+0x74c>)
 8016962:	781b      	ldrb	r3, [r3, #0]
 8016964:	f003 0308 	and.w	r3, r3, #8
 8016968:	2b00      	cmp	r3, #0
 801696a:	d015      	beq.n	8016998 <tcp_input+0x5bc>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016972:	2b00      	cmp	r3, #0
 8016974:	d008      	beq.n	8016988 <tcp_input+0x5ac>
 8016976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801697c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801697e:	6912      	ldr	r2, [r2, #16]
 8016980:	f06f 010d 	mvn.w	r1, #13
 8016984:	4610      	mov	r0, r2
 8016986:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016988:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801698a:	486c      	ldr	r0, [pc, #432]	; (8016b3c <tcp_input+0x760>)
 801698c:	f7ff fbae 	bl	80160ec <tcp_pcb_remove>
        tcp_free(pcb);
 8016990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016992:	f7fd fe89 	bl	80146a8 <tcp_free>
 8016996:	e0da      	b.n	8016b4e <tcp_input+0x772>
      } else {
        err = ERR_OK;
 8016998:	2300      	movs	r3, #0
 801699a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801699c:	4b63      	ldr	r3, [pc, #396]	; (8016b2c <tcp_input+0x750>)
 801699e:	881b      	ldrh	r3, [r3, #0]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d01d      	beq.n	80169e0 <tcp_input+0x604>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80169a4:	4b61      	ldr	r3, [pc, #388]	; (8016b2c <tcp_input+0x750>)
 80169a6:	881b      	ldrh	r3, [r3, #0]
 80169a8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80169aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d00a      	beq.n	80169ca <tcp_input+0x5ee>
 80169b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80169ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80169bc:	6910      	ldr	r0, [r2, #16]
 80169be:	89fa      	ldrh	r2, [r7, #14]
 80169c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80169c2:	4798      	blx	r3
 80169c4:	4603      	mov	r3, r0
 80169c6:	74fb      	strb	r3, [r7, #19]
 80169c8:	e001      	b.n	80169ce <tcp_input+0x5f2>
 80169ca:	2300      	movs	r3, #0
 80169cc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80169ce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80169d2:	f113 0f0d 	cmn.w	r3, #13
 80169d6:	f000 8098 	beq.w	8016b0a <tcp_input+0x72e>
              goto aborted;
            }
          }
          recv_acked = 0;
 80169da:	4b54      	ldr	r3, [pc, #336]	; (8016b2c <tcp_input+0x750>)
 80169dc:	2200      	movs	r2, #0
 80169de:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80169e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80169e2:	f000 f915 	bl	8016c10 <tcp_input_delayed_close>
 80169e6:	4603      	mov	r3, r0
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	f040 8090 	bne.w	8016b0e <tcp_input+0x732>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80169ee:	4b4d      	ldr	r3, [pc, #308]	; (8016b24 <tcp_input+0x748>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d041      	beq.n	8016a7a <tcp_input+0x69e>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80169f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	d006      	beq.n	8016a0c <tcp_input+0x630>
 80169fe:	4b50      	ldr	r3, [pc, #320]	; (8016b40 <tcp_input+0x764>)
 8016a00:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016a04:	494f      	ldr	r1, [pc, #316]	; (8016b44 <tcp_input+0x768>)
 8016a06:	4850      	ldr	r0, [pc, #320]	; (8016b48 <tcp_input+0x76c>)
 8016a08:	f00a fcd6 	bl	80213b8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a0e:	8b5b      	ldrh	r3, [r3, #26]
 8016a10:	f003 0310 	and.w	r3, r3, #16
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d008      	beq.n	8016a2a <tcp_input+0x64e>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016a18:	4b42      	ldr	r3, [pc, #264]	; (8016b24 <tcp_input+0x748>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f7fd fb87 	bl	8014130 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016a22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a24:	f7fe f984 	bl	8014d30 <tcp_abort>
            goto aborted;
 8016a28:	e091      	b.n	8016b4e <tcp_input+0x772>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d00c      	beq.n	8016a4e <tcp_input+0x672>
 8016a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a36:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a3c:	6918      	ldr	r0, [r3, #16]
 8016a3e:	4b39      	ldr	r3, [pc, #228]	; (8016b24 <tcp_input+0x748>)
 8016a40:	681a      	ldr	r2, [r3, #0]
 8016a42:	2300      	movs	r3, #0
 8016a44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a46:	47a0      	blx	r4
 8016a48:	4603      	mov	r3, r0
 8016a4a:	74fb      	strb	r3, [r7, #19]
 8016a4c:	e008      	b.n	8016a60 <tcp_input+0x684>
 8016a4e:	4b35      	ldr	r3, [pc, #212]	; (8016b24 <tcp_input+0x748>)
 8016a50:	681a      	ldr	r2, [r3, #0]
 8016a52:	2300      	movs	r3, #0
 8016a54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016a56:	2000      	movs	r0, #0
 8016a58:	f7ff f878 	bl	8015b4c <tcp_recv_null>
 8016a5c:	4603      	mov	r3, r0
 8016a5e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016a60:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a64:	f113 0f0d 	cmn.w	r3, #13
 8016a68:	d053      	beq.n	8016b12 <tcp_input+0x736>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016a6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d003      	beq.n	8016a7a <tcp_input+0x69e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016a72:	4b2c      	ldr	r3, [pc, #176]	; (8016b24 <tcp_input+0x748>)
 8016a74:	681a      	ldr	r2, [r3, #0]
 8016a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a78:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016a7a:	4b2b      	ldr	r3, [pc, #172]	; (8016b28 <tcp_input+0x74c>)
 8016a7c:	781b      	ldrb	r3, [r3, #0]
 8016a7e:	f003 0320 	and.w	r3, r3, #32
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d030      	beq.n	8016ae8 <tcp_input+0x70c>
          if (pcb->refused_data != NULL) {
 8016a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016a8a:	2b00      	cmp	r3, #0
 8016a8c:	d009      	beq.n	8016aa2 <tcp_input+0x6c6>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016a92:	7b5a      	ldrb	r2, [r3, #13]
 8016a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016a98:	f042 0220 	orr.w	r2, r2, #32
 8016a9c:	b2d2      	uxtb	r2, r2
 8016a9e:	735a      	strb	r2, [r3, #13]
 8016aa0:	e022      	b.n	8016ae8 <tcp_input+0x70c>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016aa6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016aaa:	d005      	beq.n	8016ab8 <tcp_input+0x6dc>
              pcb->rcv_wnd++;
 8016aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016ab0:	3301      	adds	r3, #1
 8016ab2:	b29a      	uxth	r2, r3
 8016ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d00b      	beq.n	8016ada <tcp_input+0x6fe>
 8016ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ac4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aca:	6918      	ldr	r0, [r3, #16]
 8016acc:	2300      	movs	r3, #0
 8016ace:	2200      	movs	r2, #0
 8016ad0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016ad2:	47a0      	blx	r4
 8016ad4:	4603      	mov	r3, r0
 8016ad6:	74fb      	strb	r3, [r7, #19]
 8016ad8:	e001      	b.n	8016ade <tcp_input+0x702>
 8016ada:	2300      	movs	r3, #0
 8016adc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016ade:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016ae2:	f113 0f0d 	cmn.w	r3, #13
 8016ae6:	d016      	beq.n	8016b16 <tcp_input+0x73a>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016ae8:	4b13      	ldr	r3, [pc, #76]	; (8016b38 <tcp_input+0x75c>)
 8016aea:	2200      	movs	r2, #0
 8016aec:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016aee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016af0:	f000 f88e 	bl	8016c10 <tcp_input_delayed_close>
 8016af4:	4603      	mov	r3, r0
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d128      	bne.n	8016b4c <tcp_input+0x770>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016afa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016afc:	f002 ff20 	bl	8019940 <tcp_output>
 8016b00:	e025      	b.n	8016b4e <tcp_input+0x772>
        goto aborted;
 8016b02:	bf00      	nop
 8016b04:	e023      	b.n	8016b4e <tcp_input+0x772>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016b06:	bf00      	nop
 8016b08:	e021      	b.n	8016b4e <tcp_input+0x772>
              goto aborted;
 8016b0a:	bf00      	nop
 8016b0c:	e01f      	b.n	8016b4e <tcp_input+0x772>
          goto aborted;
 8016b0e:	bf00      	nop
 8016b10:	e01d      	b.n	8016b4e <tcp_input+0x772>
            goto aborted;
 8016b12:	bf00      	nop
 8016b14:	e01b      	b.n	8016b4e <tcp_input+0x772>
              goto aborted;
 8016b16:	bf00      	nop
 8016b18:	e019      	b.n	8016b4e <tcp_input+0x772>
 8016b1a:	bf00      	nop
 8016b1c:	200122e8 	.word	0x200122e8
 8016b20:	200122f8 	.word	0x200122f8
 8016b24:	20012318 	.word	0x20012318
 8016b28:	20012315 	.word	0x20012315
 8016b2c:	20012310 	.word	0x20012310
 8016b30:	20012314 	.word	0x20012314
 8016b34:	20012312 	.word	0x20012312
 8016b38:	2001231c 	.word	0x2001231c
 8016b3c:	200122dc 	.word	0x200122dc
 8016b40:	080252c4 	.word	0x080252c4
 8016b44:	08025478 	.word	0x08025478
 8016b48:	08025310 	.word	0x08025310
          goto aborted;
 8016b4c:	bf00      	nop
    tcp_input_pcb = NULL;
 8016b4e:	4b27      	ldr	r3, [pc, #156]	; (8016bec <tcp_input+0x810>)
 8016b50:	2200      	movs	r2, #0
 8016b52:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016b54:	4b26      	ldr	r3, [pc, #152]	; (8016bf0 <tcp_input+0x814>)
 8016b56:	2200      	movs	r2, #0
 8016b58:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016b5a:	4b26      	ldr	r3, [pc, #152]	; (8016bf4 <tcp_input+0x818>)
 8016b5c:	685b      	ldr	r3, [r3, #4]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d03f      	beq.n	8016be2 <tcp_input+0x806>
      pbuf_free(inseg.p);
 8016b62:	4b24      	ldr	r3, [pc, #144]	; (8016bf4 <tcp_input+0x818>)
 8016b64:	685b      	ldr	r3, [r3, #4]
 8016b66:	4618      	mov	r0, r3
 8016b68:	f7fd fae2 	bl	8014130 <pbuf_free>
      inseg.p = NULL;
 8016b6c:	4b21      	ldr	r3, [pc, #132]	; (8016bf4 <tcp_input+0x818>)
 8016b6e:	2200      	movs	r2, #0
 8016b70:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016b72:	e036      	b.n	8016be2 <tcp_input+0x806>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016b74:	4b20      	ldr	r3, [pc, #128]	; (8016bf8 <tcp_input+0x81c>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	899b      	ldrh	r3, [r3, #12]
 8016b7a:	b29b      	uxth	r3, r3
 8016b7c:	4618      	mov	r0, r3
 8016b7e:	f7fb fed9 	bl	8012934 <lwip_htons>
 8016b82:	4603      	mov	r3, r0
 8016b84:	b2db      	uxtb	r3, r3
 8016b86:	f003 0304 	and.w	r3, r3, #4
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d118      	bne.n	8016bc0 <tcp_input+0x7e4>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016b8e:	4b1b      	ldr	r3, [pc, #108]	; (8016bfc <tcp_input+0x820>)
 8016b90:	6819      	ldr	r1, [r3, #0]
 8016b92:	4b1b      	ldr	r3, [pc, #108]	; (8016c00 <tcp_input+0x824>)
 8016b94:	881b      	ldrh	r3, [r3, #0]
 8016b96:	461a      	mov	r2, r3
 8016b98:	4b1a      	ldr	r3, [pc, #104]	; (8016c04 <tcp_input+0x828>)
 8016b9a:	681b      	ldr	r3, [r3, #0]
 8016b9c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016b9e:	4b16      	ldr	r3, [pc, #88]	; (8016bf8 <tcp_input+0x81c>)
 8016ba0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ba2:	885b      	ldrh	r3, [r3, #2]
 8016ba4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016ba6:	4a14      	ldr	r2, [pc, #80]	; (8016bf8 <tcp_input+0x81c>)
 8016ba8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016baa:	8812      	ldrh	r2, [r2, #0]
 8016bac:	b292      	uxth	r2, r2
 8016bae:	9202      	str	r2, [sp, #8]
 8016bb0:	9301      	str	r3, [sp, #4]
 8016bb2:	4b15      	ldr	r3, [pc, #84]	; (8016c08 <tcp_input+0x82c>)
 8016bb4:	9300      	str	r3, [sp, #0]
 8016bb6:	4b15      	ldr	r3, [pc, #84]	; (8016c0c <tcp_input+0x830>)
 8016bb8:	4602      	mov	r2, r0
 8016bba:	2000      	movs	r0, #0
 8016bbc:	f003 fc74 	bl	801a4a8 <tcp_rst>
    pbuf_free(p);
 8016bc0:	6878      	ldr	r0, [r7, #4]
 8016bc2:	f7fd fab5 	bl	8014130 <pbuf_free>
  return;
 8016bc6:	e00c      	b.n	8016be2 <tcp_input+0x806>
    goto dropped;
 8016bc8:	bf00      	nop
 8016bca:	e006      	b.n	8016bda <tcp_input+0x7fe>
    goto dropped;
 8016bcc:	bf00      	nop
 8016bce:	e004      	b.n	8016bda <tcp_input+0x7fe>
    goto dropped;
 8016bd0:	bf00      	nop
 8016bd2:	e002      	b.n	8016bda <tcp_input+0x7fe>
      goto dropped;
 8016bd4:	bf00      	nop
 8016bd6:	e000      	b.n	8016bda <tcp_input+0x7fe>
      goto dropped;
 8016bd8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016bda:	6878      	ldr	r0, [r7, #4]
 8016bdc:	f7fd faa8 	bl	8014130 <pbuf_free>
 8016be0:	e000      	b.n	8016be4 <tcp_input+0x808>
  return;
 8016be2:	bf00      	nop
}
 8016be4:	372c      	adds	r7, #44	; 0x2c
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd90      	pop	{r4, r7, pc}
 8016bea:	bf00      	nop
 8016bec:	2001231c 	.word	0x2001231c
 8016bf0:	20012318 	.word	0x20012318
 8016bf4:	200122e8 	.word	0x200122e8
 8016bf8:	200122f8 	.word	0x200122f8
 8016bfc:	2001230c 	.word	0x2001230c
 8016c00:	20012312 	.word	0x20012312
 8016c04:	20012308 	.word	0x20012308
 8016c08:	2000eb34 	.word	0x2000eb34
 8016c0c:	2000eb38 	.word	0x2000eb38

08016c10 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016c10:	b580      	push	{r7, lr}
 8016c12:	b082      	sub	sp, #8
 8016c14:	af00      	add	r7, sp, #0
 8016c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d106      	bne.n	8016c2c <tcp_input_delayed_close+0x1c>
 8016c1e:	4b17      	ldr	r3, [pc, #92]	; (8016c7c <tcp_input_delayed_close+0x6c>)
 8016c20:	f240 225a 	movw	r2, #602	; 0x25a
 8016c24:	4916      	ldr	r1, [pc, #88]	; (8016c80 <tcp_input_delayed_close+0x70>)
 8016c26:	4817      	ldr	r0, [pc, #92]	; (8016c84 <tcp_input_delayed_close+0x74>)
 8016c28:	f00a fbc6 	bl	80213b8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016c2c:	4b16      	ldr	r3, [pc, #88]	; (8016c88 <tcp_input_delayed_close+0x78>)
 8016c2e:	781b      	ldrb	r3, [r3, #0]
 8016c30:	f003 0310 	and.w	r3, r3, #16
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d01c      	beq.n	8016c72 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	8b5b      	ldrh	r3, [r3, #26]
 8016c3c:	f003 0310 	and.w	r3, r3, #16
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d10d      	bne.n	8016c60 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	d008      	beq.n	8016c60 <tcp_input_delayed_close+0x50>
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c54:	687a      	ldr	r2, [r7, #4]
 8016c56:	6912      	ldr	r2, [r2, #16]
 8016c58:	f06f 010e 	mvn.w	r1, #14
 8016c5c:	4610      	mov	r0, r2
 8016c5e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016c60:	6879      	ldr	r1, [r7, #4]
 8016c62:	480a      	ldr	r0, [pc, #40]	; (8016c8c <tcp_input_delayed_close+0x7c>)
 8016c64:	f7ff fa42 	bl	80160ec <tcp_pcb_remove>
    tcp_free(pcb);
 8016c68:	6878      	ldr	r0, [r7, #4]
 8016c6a:	f7fd fd1d 	bl	80146a8 <tcp_free>
    return 1;
 8016c6e:	2301      	movs	r3, #1
 8016c70:	e000      	b.n	8016c74 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016c72:	2300      	movs	r3, #0
}
 8016c74:	4618      	mov	r0, r3
 8016c76:	3708      	adds	r7, #8
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}
 8016c7c:	080252c4 	.word	0x080252c4
 8016c80:	08025494 	.word	0x08025494
 8016c84:	08025310 	.word	0x08025310
 8016c88:	20012315 	.word	0x20012315
 8016c8c:	200122dc 	.word	0x200122dc

08016c90 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016c90:	b590      	push	{r4, r7, lr}
 8016c92:	b08b      	sub	sp, #44	; 0x2c
 8016c94:	af04      	add	r7, sp, #16
 8016c96:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016c98:	4b6f      	ldr	r3, [pc, #444]	; (8016e58 <tcp_listen_input+0x1c8>)
 8016c9a:	781b      	ldrb	r3, [r3, #0]
 8016c9c:	f003 0304 	and.w	r3, r3, #4
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	f040 80d2 	bne.w	8016e4a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d106      	bne.n	8016cba <tcp_listen_input+0x2a>
 8016cac:	4b6b      	ldr	r3, [pc, #428]	; (8016e5c <tcp_listen_input+0x1cc>)
 8016cae:	f240 2281 	movw	r2, #641	; 0x281
 8016cb2:	496b      	ldr	r1, [pc, #428]	; (8016e60 <tcp_listen_input+0x1d0>)
 8016cb4:	486b      	ldr	r0, [pc, #428]	; (8016e64 <tcp_listen_input+0x1d4>)
 8016cb6:	f00a fb7f 	bl	80213b8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016cba:	4b67      	ldr	r3, [pc, #412]	; (8016e58 <tcp_listen_input+0x1c8>)
 8016cbc:	781b      	ldrb	r3, [r3, #0]
 8016cbe:	f003 0310 	and.w	r3, r3, #16
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d019      	beq.n	8016cfa <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016cc6:	4b68      	ldr	r3, [pc, #416]	; (8016e68 <tcp_listen_input+0x1d8>)
 8016cc8:	6819      	ldr	r1, [r3, #0]
 8016cca:	4b68      	ldr	r3, [pc, #416]	; (8016e6c <tcp_listen_input+0x1dc>)
 8016ccc:	881b      	ldrh	r3, [r3, #0]
 8016cce:	461a      	mov	r2, r3
 8016cd0:	4b67      	ldr	r3, [pc, #412]	; (8016e70 <tcp_listen_input+0x1e0>)
 8016cd2:	681b      	ldr	r3, [r3, #0]
 8016cd4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016cd6:	4b67      	ldr	r3, [pc, #412]	; (8016e74 <tcp_listen_input+0x1e4>)
 8016cd8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016cda:	885b      	ldrh	r3, [r3, #2]
 8016cdc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016cde:	4a65      	ldr	r2, [pc, #404]	; (8016e74 <tcp_listen_input+0x1e4>)
 8016ce0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ce2:	8812      	ldrh	r2, [r2, #0]
 8016ce4:	b292      	uxth	r2, r2
 8016ce6:	9202      	str	r2, [sp, #8]
 8016ce8:	9301      	str	r3, [sp, #4]
 8016cea:	4b63      	ldr	r3, [pc, #396]	; (8016e78 <tcp_listen_input+0x1e8>)
 8016cec:	9300      	str	r3, [sp, #0]
 8016cee:	4b63      	ldr	r3, [pc, #396]	; (8016e7c <tcp_listen_input+0x1ec>)
 8016cf0:	4602      	mov	r2, r0
 8016cf2:	6878      	ldr	r0, [r7, #4]
 8016cf4:	f003 fbd8 	bl	801a4a8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016cf8:	e0a9      	b.n	8016e4e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016cfa:	4b57      	ldr	r3, [pc, #348]	; (8016e58 <tcp_listen_input+0x1c8>)
 8016cfc:	781b      	ldrb	r3, [r3, #0]
 8016cfe:	f003 0302 	and.w	r3, r3, #2
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	f000 80a3 	beq.w	8016e4e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	7d5b      	ldrb	r3, [r3, #21]
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f7ff f841 	bl	8015d94 <tcp_alloc>
 8016d12:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016d14:	697b      	ldr	r3, [r7, #20]
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d111      	bne.n	8016d3e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	699b      	ldr	r3, [r3, #24]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d00a      	beq.n	8016d38 <tcp_listen_input+0xa8>
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	699b      	ldr	r3, [r3, #24]
 8016d26:	687a      	ldr	r2, [r7, #4]
 8016d28:	6910      	ldr	r0, [r2, #16]
 8016d2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016d2e:	2100      	movs	r1, #0
 8016d30:	4798      	blx	r3
 8016d32:	4603      	mov	r3, r0
 8016d34:	73bb      	strb	r3, [r7, #14]
      return;
 8016d36:	e08b      	b.n	8016e50 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016d38:	23f0      	movs	r3, #240	; 0xf0
 8016d3a:	73bb      	strb	r3, [r7, #14]
      return;
 8016d3c:	e088      	b.n	8016e50 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016d3e:	4b50      	ldr	r3, [pc, #320]	; (8016e80 <tcp_listen_input+0x1f0>)
 8016d40:	695a      	ldr	r2, [r3, #20]
 8016d42:	697b      	ldr	r3, [r7, #20]
 8016d44:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016d46:	4b4e      	ldr	r3, [pc, #312]	; (8016e80 <tcp_listen_input+0x1f0>)
 8016d48:	691a      	ldr	r2, [r3, #16]
 8016d4a:	697b      	ldr	r3, [r7, #20]
 8016d4c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	8ada      	ldrh	r2, [r3, #22]
 8016d52:	697b      	ldr	r3, [r7, #20]
 8016d54:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016d56:	4b47      	ldr	r3, [pc, #284]	; (8016e74 <tcp_listen_input+0x1e4>)
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	881b      	ldrh	r3, [r3, #0]
 8016d5c:	b29a      	uxth	r2, r3
 8016d5e:	697b      	ldr	r3, [r7, #20]
 8016d60:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016d62:	697b      	ldr	r3, [r7, #20]
 8016d64:	2203      	movs	r2, #3
 8016d66:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016d68:	4b41      	ldr	r3, [pc, #260]	; (8016e70 <tcp_listen_input+0x1e0>)
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	1c5a      	adds	r2, r3, #1
 8016d6e:	697b      	ldr	r3, [r7, #20]
 8016d70:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016d72:	697b      	ldr	r3, [r7, #20]
 8016d74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016d76:	697b      	ldr	r3, [r7, #20]
 8016d78:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8016d7a:	6978      	ldr	r0, [r7, #20]
 8016d7c:	f7ff fa4a 	bl	8016214 <tcp_next_iss>
 8016d80:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016d82:	697b      	ldr	r3, [r7, #20]
 8016d84:	693a      	ldr	r2, [r7, #16]
 8016d86:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8016d88:	697b      	ldr	r3, [r7, #20]
 8016d8a:	693a      	ldr	r2, [r7, #16]
 8016d8c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8016d8e:	697b      	ldr	r3, [r7, #20]
 8016d90:	693a      	ldr	r2, [r7, #16]
 8016d92:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8016d94:	697b      	ldr	r3, [r7, #20]
 8016d96:	693a      	ldr	r2, [r7, #16]
 8016d98:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016d9a:	4b35      	ldr	r3, [pc, #212]	; (8016e70 <tcp_listen_input+0x1e0>)
 8016d9c:	681b      	ldr	r3, [r3, #0]
 8016d9e:	1e5a      	subs	r2, r3, #1
 8016da0:	697b      	ldr	r3, [r7, #20]
 8016da2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	691a      	ldr	r2, [r3, #16]
 8016da8:	697b      	ldr	r3, [r7, #20]
 8016daa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016dac:	697b      	ldr	r3, [r7, #20]
 8016dae:	687a      	ldr	r2, [r7, #4]
 8016db0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	7a5b      	ldrb	r3, [r3, #9]
 8016db6:	f003 030c 	and.w	r3, r3, #12
 8016dba:	b2da      	uxtb	r2, r3
 8016dbc:	697b      	ldr	r3, [r7, #20]
 8016dbe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	7a1a      	ldrb	r2, [r3, #8]
 8016dc4:	697b      	ldr	r3, [r7, #20]
 8016dc6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016dc8:	4b2e      	ldr	r3, [pc, #184]	; (8016e84 <tcp_listen_input+0x1f4>)
 8016dca:	681a      	ldr	r2, [r3, #0]
 8016dcc:	697b      	ldr	r3, [r7, #20]
 8016dce:	60da      	str	r2, [r3, #12]
 8016dd0:	4a2c      	ldr	r2, [pc, #176]	; (8016e84 <tcp_listen_input+0x1f4>)
 8016dd2:	697b      	ldr	r3, [r7, #20]
 8016dd4:	6013      	str	r3, [r2, #0]
 8016dd6:	f003 fd29 	bl	801a82c <tcp_timer_needed>
 8016dda:	4b2b      	ldr	r3, [pc, #172]	; (8016e88 <tcp_listen_input+0x1f8>)
 8016ddc:	2201      	movs	r2, #1
 8016dde:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016de0:	6978      	ldr	r0, [r7, #20]
 8016de2:	f001 fd8f 	bl	8018904 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8016de6:	4b23      	ldr	r3, [pc, #140]	; (8016e74 <tcp_listen_input+0x1e4>)
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	89db      	ldrh	r3, [r3, #14]
 8016dec:	b29a      	uxth	r2, r3
 8016dee:	697b      	ldr	r3, [r7, #20]
 8016df0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8016df4:	697b      	ldr	r3, [r7, #20]
 8016df6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016dfa:	697b      	ldr	r3, [r7, #20]
 8016dfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016e00:	697b      	ldr	r3, [r7, #20]
 8016e02:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8016e04:	697b      	ldr	r3, [r7, #20]
 8016e06:	3304      	adds	r3, #4
 8016e08:	4618      	mov	r0, r3
 8016e0a:	f007 fad9 	bl	801e3c0 <ip4_route>
 8016e0e:	4601      	mov	r1, r0
 8016e10:	697b      	ldr	r3, [r7, #20]
 8016e12:	3304      	adds	r3, #4
 8016e14:	461a      	mov	r2, r3
 8016e16:	4620      	mov	r0, r4
 8016e18:	f7ff fa22 	bl	8016260 <tcp_eff_send_mss_netif>
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	461a      	mov	r2, r3
 8016e20:	697b      	ldr	r3, [r7, #20]
 8016e22:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8016e24:	2112      	movs	r1, #18
 8016e26:	6978      	ldr	r0, [r7, #20]
 8016e28:	f002 fc9c 	bl	8019764 <tcp_enqueue_flags>
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d004      	beq.n	8016e42 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8016e38:	2100      	movs	r1, #0
 8016e3a:	6978      	ldr	r0, [r7, #20]
 8016e3c:	f7fd feba 	bl	8014bb4 <tcp_abandon>
      return;
 8016e40:	e006      	b.n	8016e50 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8016e42:	6978      	ldr	r0, [r7, #20]
 8016e44:	f002 fd7c 	bl	8019940 <tcp_output>
  return;
 8016e48:	e001      	b.n	8016e4e <tcp_listen_input+0x1be>
    return;
 8016e4a:	bf00      	nop
 8016e4c:	e000      	b.n	8016e50 <tcp_listen_input+0x1c0>
  return;
 8016e4e:	bf00      	nop
}
 8016e50:	371c      	adds	r7, #28
 8016e52:	46bd      	mov	sp, r7
 8016e54:	bd90      	pop	{r4, r7, pc}
 8016e56:	bf00      	nop
 8016e58:	20012314 	.word	0x20012314
 8016e5c:	080252c4 	.word	0x080252c4
 8016e60:	080254bc 	.word	0x080254bc
 8016e64:	08025310 	.word	0x08025310
 8016e68:	2001230c 	.word	0x2001230c
 8016e6c:	20012312 	.word	0x20012312
 8016e70:	20012308 	.word	0x20012308
 8016e74:	200122f8 	.word	0x200122f8
 8016e78:	2000eb34 	.word	0x2000eb34
 8016e7c:	2000eb38 	.word	0x2000eb38
 8016e80:	2000eb24 	.word	0x2000eb24
 8016e84:	200122dc 	.word	0x200122dc
 8016e88:	200122e4 	.word	0x200122e4

08016e8c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8016e8c:	b580      	push	{r7, lr}
 8016e8e:	b086      	sub	sp, #24
 8016e90:	af04      	add	r7, sp, #16
 8016e92:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8016e94:	4b2f      	ldr	r3, [pc, #188]	; (8016f54 <tcp_timewait_input+0xc8>)
 8016e96:	781b      	ldrb	r3, [r3, #0]
 8016e98:	f003 0304 	and.w	r3, r3, #4
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d153      	bne.n	8016f48 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d106      	bne.n	8016eb4 <tcp_timewait_input+0x28>
 8016ea6:	4b2c      	ldr	r3, [pc, #176]	; (8016f58 <tcp_timewait_input+0xcc>)
 8016ea8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016eac:	492b      	ldr	r1, [pc, #172]	; (8016f5c <tcp_timewait_input+0xd0>)
 8016eae:	482c      	ldr	r0, [pc, #176]	; (8016f60 <tcp_timewait_input+0xd4>)
 8016eb0:	f00a fa82 	bl	80213b8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8016eb4:	4b27      	ldr	r3, [pc, #156]	; (8016f54 <tcp_timewait_input+0xc8>)
 8016eb6:	781b      	ldrb	r3, [r3, #0]
 8016eb8:	f003 0302 	and.w	r3, r3, #2
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d02a      	beq.n	8016f16 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016ec0:	4b28      	ldr	r3, [pc, #160]	; (8016f64 <tcp_timewait_input+0xd8>)
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ec8:	1ad3      	subs	r3, r2, r3
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	db2d      	blt.n	8016f2a <tcp_timewait_input+0x9e>
 8016ece:	4b25      	ldr	r3, [pc, #148]	; (8016f64 <tcp_timewait_input+0xd8>)
 8016ed0:	681a      	ldr	r2, [r3, #0]
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ed6:	6879      	ldr	r1, [r7, #4]
 8016ed8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016eda:	440b      	add	r3, r1
 8016edc:	1ad3      	subs	r3, r2, r3
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	dc23      	bgt.n	8016f2a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ee2:	4b21      	ldr	r3, [pc, #132]	; (8016f68 <tcp_timewait_input+0xdc>)
 8016ee4:	6819      	ldr	r1, [r3, #0]
 8016ee6:	4b21      	ldr	r3, [pc, #132]	; (8016f6c <tcp_timewait_input+0xe0>)
 8016ee8:	881b      	ldrh	r3, [r3, #0]
 8016eea:	461a      	mov	r2, r3
 8016eec:	4b1d      	ldr	r3, [pc, #116]	; (8016f64 <tcp_timewait_input+0xd8>)
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016ef2:	4b1f      	ldr	r3, [pc, #124]	; (8016f70 <tcp_timewait_input+0xe4>)
 8016ef4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016ef6:	885b      	ldrh	r3, [r3, #2]
 8016ef8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016efa:	4a1d      	ldr	r2, [pc, #116]	; (8016f70 <tcp_timewait_input+0xe4>)
 8016efc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016efe:	8812      	ldrh	r2, [r2, #0]
 8016f00:	b292      	uxth	r2, r2
 8016f02:	9202      	str	r2, [sp, #8]
 8016f04:	9301      	str	r3, [sp, #4]
 8016f06:	4b1b      	ldr	r3, [pc, #108]	; (8016f74 <tcp_timewait_input+0xe8>)
 8016f08:	9300      	str	r3, [sp, #0]
 8016f0a:	4b1b      	ldr	r3, [pc, #108]	; (8016f78 <tcp_timewait_input+0xec>)
 8016f0c:	4602      	mov	r2, r0
 8016f0e:	6878      	ldr	r0, [r7, #4]
 8016f10:	f003 faca 	bl	801a4a8 <tcp_rst>
      return;
 8016f14:	e01b      	b.n	8016f4e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8016f16:	4b0f      	ldr	r3, [pc, #60]	; (8016f54 <tcp_timewait_input+0xc8>)
 8016f18:	781b      	ldrb	r3, [r3, #0]
 8016f1a:	f003 0301 	and.w	r3, r3, #1
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	d003      	beq.n	8016f2a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8016f22:	4b16      	ldr	r3, [pc, #88]	; (8016f7c <tcp_timewait_input+0xf0>)
 8016f24:	681a      	ldr	r2, [r3, #0]
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016f2a:	4b10      	ldr	r3, [pc, #64]	; (8016f6c <tcp_timewait_input+0xe0>)
 8016f2c:	881b      	ldrh	r3, [r3, #0]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d00c      	beq.n	8016f4c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	8b5b      	ldrh	r3, [r3, #26]
 8016f36:	f043 0302 	orr.w	r3, r3, #2
 8016f3a:	b29a      	uxth	r2, r3
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016f40:	6878      	ldr	r0, [r7, #4]
 8016f42:	f002 fcfd 	bl	8019940 <tcp_output>
  }
  return;
 8016f46:	e001      	b.n	8016f4c <tcp_timewait_input+0xc0>
    return;
 8016f48:	bf00      	nop
 8016f4a:	e000      	b.n	8016f4e <tcp_timewait_input+0xc2>
  return;
 8016f4c:	bf00      	nop
}
 8016f4e:	3708      	adds	r7, #8
 8016f50:	46bd      	mov	sp, r7
 8016f52:	bd80      	pop	{r7, pc}
 8016f54:	20012314 	.word	0x20012314
 8016f58:	080252c4 	.word	0x080252c4
 8016f5c:	080254dc 	.word	0x080254dc
 8016f60:	08025310 	.word	0x08025310
 8016f64:	20012308 	.word	0x20012308
 8016f68:	2001230c 	.word	0x2001230c
 8016f6c:	20012312 	.word	0x20012312
 8016f70:	200122f8 	.word	0x200122f8
 8016f74:	2000eb34 	.word	0x2000eb34
 8016f78:	2000eb38 	.word	0x2000eb38
 8016f7c:	200122d0 	.word	0x200122d0

08016f80 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8016f80:	b590      	push	{r4, r7, lr}
 8016f82:	b08d      	sub	sp, #52	; 0x34
 8016f84:	af04      	add	r7, sp, #16
 8016f86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8016f88:	2300      	movs	r3, #0
 8016f8a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d106      	bne.n	8016fa4 <tcp_process+0x24>
 8016f96:	4b9d      	ldr	r3, [pc, #628]	; (801720c <tcp_process+0x28c>)
 8016f98:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8016f9c:	499c      	ldr	r1, [pc, #624]	; (8017210 <tcp_process+0x290>)
 8016f9e:	489d      	ldr	r0, [pc, #628]	; (8017214 <tcp_process+0x294>)
 8016fa0:	f00a fa0a 	bl	80213b8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8016fa4:	4b9c      	ldr	r3, [pc, #624]	; (8017218 <tcp_process+0x298>)
 8016fa6:	781b      	ldrb	r3, [r3, #0]
 8016fa8:	f003 0304 	and.w	r3, r3, #4
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d04e      	beq.n	801704e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	7d1b      	ldrb	r3, [r3, #20]
 8016fb4:	2b02      	cmp	r3, #2
 8016fb6:	d108      	bne.n	8016fca <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016fbc:	4b97      	ldr	r3, [pc, #604]	; (801721c <tcp_process+0x29c>)
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	429a      	cmp	r2, r3
 8016fc2:	d123      	bne.n	801700c <tcp_process+0x8c>
        acceptable = 1;
 8016fc4:	2301      	movs	r3, #1
 8016fc6:	76fb      	strb	r3, [r7, #27]
 8016fc8:	e020      	b.n	801700c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016fce:	4b94      	ldr	r3, [pc, #592]	; (8017220 <tcp_process+0x2a0>)
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	429a      	cmp	r2, r3
 8016fd4:	d102      	bne.n	8016fdc <tcp_process+0x5c>
        acceptable = 1;
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	76fb      	strb	r3, [r7, #27]
 8016fda:	e017      	b.n	801700c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016fdc:	4b90      	ldr	r3, [pc, #576]	; (8017220 <tcp_process+0x2a0>)
 8016fde:	681a      	ldr	r2, [r3, #0]
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016fe4:	1ad3      	subs	r3, r2, r3
 8016fe6:	2b00      	cmp	r3, #0
 8016fe8:	db10      	blt.n	801700c <tcp_process+0x8c>
 8016fea:	4b8d      	ldr	r3, [pc, #564]	; (8017220 <tcp_process+0x2a0>)
 8016fec:	681a      	ldr	r2, [r3, #0]
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ff2:	6879      	ldr	r1, [r7, #4]
 8016ff4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016ff6:	440b      	add	r3, r1
 8016ff8:	1ad3      	subs	r3, r2, r3
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	dc06      	bgt.n	801700c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	8b5b      	ldrh	r3, [r3, #26]
 8017002:	f043 0302 	orr.w	r3, r3, #2
 8017006:	b29a      	uxth	r2, r3
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801700c:	7efb      	ldrb	r3, [r7, #27]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d01b      	beq.n	801704a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	7d1b      	ldrb	r3, [r3, #20]
 8017016:	2b00      	cmp	r3, #0
 8017018:	d106      	bne.n	8017028 <tcp_process+0xa8>
 801701a:	4b7c      	ldr	r3, [pc, #496]	; (801720c <tcp_process+0x28c>)
 801701c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8017020:	4980      	ldr	r1, [pc, #512]	; (8017224 <tcp_process+0x2a4>)
 8017022:	487c      	ldr	r0, [pc, #496]	; (8017214 <tcp_process+0x294>)
 8017024:	f00a f9c8 	bl	80213b8 <iprintf>
      recv_flags |= TF_RESET;
 8017028:	4b7f      	ldr	r3, [pc, #508]	; (8017228 <tcp_process+0x2a8>)
 801702a:	781b      	ldrb	r3, [r3, #0]
 801702c:	f043 0308 	orr.w	r3, r3, #8
 8017030:	b2da      	uxtb	r2, r3
 8017032:	4b7d      	ldr	r3, [pc, #500]	; (8017228 <tcp_process+0x2a8>)
 8017034:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	8b5b      	ldrh	r3, [r3, #26]
 801703a:	f023 0301 	bic.w	r3, r3, #1
 801703e:	b29a      	uxth	r2, r3
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8017044:	f06f 030d 	mvn.w	r3, #13
 8017048:	e37a      	b.n	8017740 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801704a:	2300      	movs	r3, #0
 801704c:	e378      	b.n	8017740 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801704e:	4b72      	ldr	r3, [pc, #456]	; (8017218 <tcp_process+0x298>)
 8017050:	781b      	ldrb	r3, [r3, #0]
 8017052:	f003 0302 	and.w	r3, r3, #2
 8017056:	2b00      	cmp	r3, #0
 8017058:	d010      	beq.n	801707c <tcp_process+0xfc>
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	7d1b      	ldrb	r3, [r3, #20]
 801705e:	2b02      	cmp	r3, #2
 8017060:	d00c      	beq.n	801707c <tcp_process+0xfc>
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	7d1b      	ldrb	r3, [r3, #20]
 8017066:	2b03      	cmp	r3, #3
 8017068:	d008      	beq.n	801707c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	8b5b      	ldrh	r3, [r3, #26]
 801706e:	f043 0302 	orr.w	r3, r3, #2
 8017072:	b29a      	uxth	r2, r3
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8017078:	2300      	movs	r3, #0
 801707a:	e361      	b.n	8017740 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801707c:	687b      	ldr	r3, [r7, #4]
 801707e:	8b5b      	ldrh	r3, [r3, #26]
 8017080:	f003 0310 	and.w	r3, r3, #16
 8017084:	2b00      	cmp	r3, #0
 8017086:	d103      	bne.n	8017090 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8017088:	4b68      	ldr	r3, [pc, #416]	; (801722c <tcp_process+0x2ac>)
 801708a:	681a      	ldr	r2, [r3, #0]
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	2200      	movs	r2, #0
 8017094:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
  pcb->persist_probe = 0;
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	2200      	movs	r2, #0
 801709c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2

  tcp_parseopt(pcb);
 80170a0:	6878      	ldr	r0, [r7, #4]
 80170a2:	f001 fc2f 	bl	8018904 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	7d1b      	ldrb	r3, [r3, #20]
 80170aa:	3b02      	subs	r3, #2
 80170ac:	2b07      	cmp	r3, #7
 80170ae:	f200 8337 	bhi.w	8017720 <tcp_process+0x7a0>
 80170b2:	a201      	add	r2, pc, #4	; (adr r2, 80170b8 <tcp_process+0x138>)
 80170b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80170b8:	080170d9 	.word	0x080170d9
 80170bc:	08017309 	.word	0x08017309
 80170c0:	08017481 	.word	0x08017481
 80170c4:	080174ab 	.word	0x080174ab
 80170c8:	080175cf 	.word	0x080175cf
 80170cc:	08017481 	.word	0x08017481
 80170d0:	0801765b 	.word	0x0801765b
 80170d4:	080176eb 	.word	0x080176eb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80170d8:	4b4f      	ldr	r3, [pc, #316]	; (8017218 <tcp_process+0x298>)
 80170da:	781b      	ldrb	r3, [r3, #0]
 80170dc:	f003 0310 	and.w	r3, r3, #16
 80170e0:	2b00      	cmp	r3, #0
 80170e2:	f000 80e4 	beq.w	80172ae <tcp_process+0x32e>
 80170e6:	4b4c      	ldr	r3, [pc, #304]	; (8017218 <tcp_process+0x298>)
 80170e8:	781b      	ldrb	r3, [r3, #0]
 80170ea:	f003 0302 	and.w	r3, r3, #2
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	f000 80dd 	beq.w	80172ae <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170f8:	1c5a      	adds	r2, r3, #1
 80170fa:	4b48      	ldr	r3, [pc, #288]	; (801721c <tcp_process+0x29c>)
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	429a      	cmp	r2, r3
 8017100:	f040 80d5 	bne.w	80172ae <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017104:	4b46      	ldr	r3, [pc, #280]	; (8017220 <tcp_process+0x2a0>)
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	1c5a      	adds	r2, r3, #1
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8017116:	4b41      	ldr	r3, [pc, #260]	; (801721c <tcp_process+0x29c>)
 8017118:	681a      	ldr	r2, [r3, #0]
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801711e:	4b44      	ldr	r3, [pc, #272]	; (8017230 <tcp_process+0x2b0>)
 8017120:	681b      	ldr	r3, [r3, #0]
 8017122:	89db      	ldrh	r3, [r3, #14]
 8017124:	b29a      	uxth	r2, r3
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8017138:	4b39      	ldr	r3, [pc, #228]	; (8017220 <tcp_process+0x2a0>)
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	1e5a      	subs	r2, r3, #1
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	2204      	movs	r2, #4
 8017146:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	3304      	adds	r3, #4
 8017150:	4618      	mov	r0, r3
 8017152:	f007 f935 	bl	801e3c0 <ip4_route>
 8017156:	4601      	mov	r1, r0
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	3304      	adds	r3, #4
 801715c:	461a      	mov	r2, r3
 801715e:	4620      	mov	r0, r4
 8017160:	f7ff f87e 	bl	8016260 <tcp_eff_send_mss_netif>
 8017164:	4603      	mov	r3, r0
 8017166:	461a      	mov	r2, r3
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017170:	009a      	lsls	r2, r3, #2
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017176:	005b      	lsls	r3, r3, #1
 8017178:	f241 111c 	movw	r1, #4380	; 0x111c
 801717c:	428b      	cmp	r3, r1
 801717e:	bf38      	it	cc
 8017180:	460b      	movcc	r3, r1
 8017182:	429a      	cmp	r2, r3
 8017184:	d204      	bcs.n	8017190 <tcp_process+0x210>
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801718a:	009b      	lsls	r3, r3, #2
 801718c:	b29b      	uxth	r3, r3
 801718e:	e00d      	b.n	80171ac <tcp_process+0x22c>
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017194:	005b      	lsls	r3, r3, #1
 8017196:	f241 121c 	movw	r2, #4380	; 0x111c
 801719a:	4293      	cmp	r3, r2
 801719c:	d904      	bls.n	80171a8 <tcp_process+0x228>
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80171a2:	005b      	lsls	r3, r3, #1
 80171a4:	b29b      	uxth	r3, r3
 80171a6:	e001      	b.n	80171ac <tcp_process+0x22c>
 80171a8:	f241 131c 	movw	r3, #4380	; 0x111c
 80171ac:	687a      	ldr	r2, [r7, #4]
 80171ae:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d106      	bne.n	80171ca <tcp_process+0x24a>
 80171bc:	4b13      	ldr	r3, [pc, #76]	; (801720c <tcp_process+0x28c>)
 80171be:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80171c2:	491c      	ldr	r1, [pc, #112]	; (8017234 <tcp_process+0x2b4>)
 80171c4:	4813      	ldr	r0, [pc, #76]	; (8017214 <tcp_process+0x294>)
 80171c6:	f00a f8f7 	bl	80213b8 <iprintf>
        --pcb->snd_queuelen;
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80171d0:	3b01      	subs	r3, #1
 80171d2:	b29a      	uxth	r2, r3
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80171de:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80171e0:	69fb      	ldr	r3, [r7, #28]
 80171e2:	2b00      	cmp	r3, #0
 80171e4:	d12a      	bne.n	801723c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80171ea:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80171ec:	69fb      	ldr	r3, [r7, #28]
 80171ee:	2b00      	cmp	r3, #0
 80171f0:	d106      	bne.n	8017200 <tcp_process+0x280>
 80171f2:	4b06      	ldr	r3, [pc, #24]	; (801720c <tcp_process+0x28c>)
 80171f4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80171f8:	490f      	ldr	r1, [pc, #60]	; (8017238 <tcp_process+0x2b8>)
 80171fa:	4806      	ldr	r0, [pc, #24]	; (8017214 <tcp_process+0x294>)
 80171fc:	f00a f8dc 	bl	80213b8 <iprintf>
          pcb->unsent = rseg->next;
 8017200:	69fb      	ldr	r3, [r7, #28]
 8017202:	681a      	ldr	r2, [r3, #0]
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	66da      	str	r2, [r3, #108]	; 0x6c
 8017208:	e01c      	b.n	8017244 <tcp_process+0x2c4>
 801720a:	bf00      	nop
 801720c:	080252c4 	.word	0x080252c4
 8017210:	080254fc 	.word	0x080254fc
 8017214:	08025310 	.word	0x08025310
 8017218:	20012314 	.word	0x20012314
 801721c:	2001230c 	.word	0x2001230c
 8017220:	20012308 	.word	0x20012308
 8017224:	08025518 	.word	0x08025518
 8017228:	20012315 	.word	0x20012315
 801722c:	200122d0 	.word	0x200122d0
 8017230:	200122f8 	.word	0x200122f8
 8017234:	08025538 	.word	0x08025538
 8017238:	08025550 	.word	0x08025550
        } else {
          pcb->unacked = rseg->next;
 801723c:	69fb      	ldr	r3, [r7, #28]
 801723e:	681a      	ldr	r2, [r3, #0]
 8017240:	687b      	ldr	r3, [r7, #4]
 8017242:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8017244:	69f8      	ldr	r0, [r7, #28]
 8017246:	f7fe fc3c 	bl	8015ac2 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801724e:	2b00      	cmp	r3, #0
 8017250:	d104      	bne.n	801725c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017258:	861a      	strh	r2, [r3, #48]	; 0x30
 801725a:	e006      	b.n	801726a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	2200      	movs	r2, #0
 8017260:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	2200      	movs	r2, #0
 8017266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017270:	2b00      	cmp	r3, #0
 8017272:	d00a      	beq.n	801728a <tcp_process+0x30a>
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801727a:	687a      	ldr	r2, [r7, #4]
 801727c:	6910      	ldr	r0, [r2, #16]
 801727e:	2200      	movs	r2, #0
 8017280:	6879      	ldr	r1, [r7, #4]
 8017282:	4798      	blx	r3
 8017284:	4603      	mov	r3, r0
 8017286:	76bb      	strb	r3, [r7, #26]
 8017288:	e001      	b.n	801728e <tcp_process+0x30e>
 801728a:	2300      	movs	r3, #0
 801728c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801728e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017292:	f113 0f0d 	cmn.w	r3, #13
 8017296:	d102      	bne.n	801729e <tcp_process+0x31e>
          return ERR_ABRT;
 8017298:	f06f 030c 	mvn.w	r3, #12
 801729c:	e250      	b.n	8017740 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	8b5b      	ldrh	r3, [r3, #26]
 80172a2:	f043 0302 	orr.w	r3, r3, #2
 80172a6:	b29a      	uxth	r2, r3
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80172ac:	e23a      	b.n	8017724 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80172ae:	4b98      	ldr	r3, [pc, #608]	; (8017510 <tcp_process+0x590>)
 80172b0:	781b      	ldrb	r3, [r3, #0]
 80172b2:	f003 0310 	and.w	r3, r3, #16
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	f000 8234 	beq.w	8017724 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80172bc:	4b95      	ldr	r3, [pc, #596]	; (8017514 <tcp_process+0x594>)
 80172be:	6819      	ldr	r1, [r3, #0]
 80172c0:	4b95      	ldr	r3, [pc, #596]	; (8017518 <tcp_process+0x598>)
 80172c2:	881b      	ldrh	r3, [r3, #0]
 80172c4:	461a      	mov	r2, r3
 80172c6:	4b95      	ldr	r3, [pc, #596]	; (801751c <tcp_process+0x59c>)
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80172cc:	4b94      	ldr	r3, [pc, #592]	; (8017520 <tcp_process+0x5a0>)
 80172ce:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80172d0:	885b      	ldrh	r3, [r3, #2]
 80172d2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80172d4:	4a92      	ldr	r2, [pc, #584]	; (8017520 <tcp_process+0x5a0>)
 80172d6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80172d8:	8812      	ldrh	r2, [r2, #0]
 80172da:	b292      	uxth	r2, r2
 80172dc:	9202      	str	r2, [sp, #8]
 80172de:	9301      	str	r3, [sp, #4]
 80172e0:	4b90      	ldr	r3, [pc, #576]	; (8017524 <tcp_process+0x5a4>)
 80172e2:	9300      	str	r3, [sp, #0]
 80172e4:	4b90      	ldr	r3, [pc, #576]	; (8017528 <tcp_process+0x5a8>)
 80172e6:	4602      	mov	r2, r0
 80172e8:	6878      	ldr	r0, [r7, #4]
 80172ea:	f003 f8dd 	bl	801a4a8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172f4:	2b05      	cmp	r3, #5
 80172f6:	f200 8215 	bhi.w	8017724 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80172fa:	687b      	ldr	r3, [r7, #4]
 80172fc:	2200      	movs	r2, #0
 80172fe:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017300:	6878      	ldr	r0, [r7, #4]
 8017302:	f002 fea9 	bl	801a058 <tcp_rexmit_rto>
      break;
 8017306:	e20d      	b.n	8017724 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017308:	4b81      	ldr	r3, [pc, #516]	; (8017510 <tcp_process+0x590>)
 801730a:	781b      	ldrb	r3, [r3, #0]
 801730c:	f003 0310 	and.w	r3, r3, #16
 8017310:	2b00      	cmp	r3, #0
 8017312:	f000 80a1 	beq.w	8017458 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017316:	4b7f      	ldr	r3, [pc, #508]	; (8017514 <tcp_process+0x594>)
 8017318:	681a      	ldr	r2, [r3, #0]
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801731e:	1ad3      	subs	r3, r2, r3
 8017320:	3b01      	subs	r3, #1
 8017322:	2b00      	cmp	r3, #0
 8017324:	db7e      	blt.n	8017424 <tcp_process+0x4a4>
 8017326:	4b7b      	ldr	r3, [pc, #492]	; (8017514 <tcp_process+0x594>)
 8017328:	681a      	ldr	r2, [r3, #0]
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801732e:	1ad3      	subs	r3, r2, r3
 8017330:	2b00      	cmp	r3, #0
 8017332:	dc77      	bgt.n	8017424 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	2204      	movs	r2, #4
 8017338:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801733e:	2b00      	cmp	r3, #0
 8017340:	d102      	bne.n	8017348 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8017342:	23fa      	movs	r3, #250	; 0xfa
 8017344:	76bb      	strb	r3, [r7, #26]
 8017346:	e01d      	b.n	8017384 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801734c:	699b      	ldr	r3, [r3, #24]
 801734e:	2b00      	cmp	r3, #0
 8017350:	d106      	bne.n	8017360 <tcp_process+0x3e0>
 8017352:	4b76      	ldr	r3, [pc, #472]	; (801752c <tcp_process+0x5ac>)
 8017354:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8017358:	4975      	ldr	r1, [pc, #468]	; (8017530 <tcp_process+0x5b0>)
 801735a:	4876      	ldr	r0, [pc, #472]	; (8017534 <tcp_process+0x5b4>)
 801735c:	f00a f82c 	bl	80213b8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8017364:	699b      	ldr	r3, [r3, #24]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d00a      	beq.n	8017380 <tcp_process+0x400>
 801736a:	687b      	ldr	r3, [r7, #4]
 801736c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801736e:	699b      	ldr	r3, [r3, #24]
 8017370:	687a      	ldr	r2, [r7, #4]
 8017372:	6910      	ldr	r0, [r2, #16]
 8017374:	2200      	movs	r2, #0
 8017376:	6879      	ldr	r1, [r7, #4]
 8017378:	4798      	blx	r3
 801737a:	4603      	mov	r3, r0
 801737c:	76bb      	strb	r3, [r7, #26]
 801737e:	e001      	b.n	8017384 <tcp_process+0x404>
 8017380:	23f0      	movs	r3, #240	; 0xf0
 8017382:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8017384:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017388:	2b00      	cmp	r3, #0
 801738a:	d00a      	beq.n	80173a2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801738c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017390:	f113 0f0d 	cmn.w	r3, #13
 8017394:	d002      	beq.n	801739c <tcp_process+0x41c>
              tcp_abort(pcb);
 8017396:	6878      	ldr	r0, [r7, #4]
 8017398:	f7fd fcca 	bl	8014d30 <tcp_abort>
            }
            return ERR_ABRT;
 801739c:	f06f 030c 	mvn.w	r3, #12
 80173a0:	e1ce      	b.n	8017740 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80173a2:	6878      	ldr	r0, [r7, #4]
 80173a4:	f000 fae0 	bl	8017968 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80173a8:	4b63      	ldr	r3, [pc, #396]	; (8017538 <tcp_process+0x5b8>)
 80173aa:	881b      	ldrh	r3, [r3, #0]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d005      	beq.n	80173bc <tcp_process+0x43c>
            recv_acked--;
 80173b0:	4b61      	ldr	r3, [pc, #388]	; (8017538 <tcp_process+0x5b8>)
 80173b2:	881b      	ldrh	r3, [r3, #0]
 80173b4:	3b01      	subs	r3, #1
 80173b6:	b29a      	uxth	r2, r3
 80173b8:	4b5f      	ldr	r3, [pc, #380]	; (8017538 <tcp_process+0x5b8>)
 80173ba:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173c0:	009a      	lsls	r2, r3, #2
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173c6:	005b      	lsls	r3, r3, #1
 80173c8:	f241 111c 	movw	r1, #4380	; 0x111c
 80173cc:	428b      	cmp	r3, r1
 80173ce:	bf38      	it	cc
 80173d0:	460b      	movcc	r3, r1
 80173d2:	429a      	cmp	r2, r3
 80173d4:	d204      	bcs.n	80173e0 <tcp_process+0x460>
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173da:	009b      	lsls	r3, r3, #2
 80173dc:	b29b      	uxth	r3, r3
 80173de:	e00d      	b.n	80173fc <tcp_process+0x47c>
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173e4:	005b      	lsls	r3, r3, #1
 80173e6:	f241 121c 	movw	r2, #4380	; 0x111c
 80173ea:	4293      	cmp	r3, r2
 80173ec:	d904      	bls.n	80173f8 <tcp_process+0x478>
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173f2:	005b      	lsls	r3, r3, #1
 80173f4:	b29b      	uxth	r3, r3
 80173f6:	e001      	b.n	80173fc <tcp_process+0x47c>
 80173f8:	f241 131c 	movw	r3, #4380	; 0x111c
 80173fc:	687a      	ldr	r2, [r7, #4]
 80173fe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017402:	4b4e      	ldr	r3, [pc, #312]	; (801753c <tcp_process+0x5bc>)
 8017404:	781b      	ldrb	r3, [r3, #0]
 8017406:	f003 0320 	and.w	r3, r3, #32
 801740a:	2b00      	cmp	r3, #0
 801740c:	d037      	beq.n	801747e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	8b5b      	ldrh	r3, [r3, #26]
 8017412:	f043 0302 	orr.w	r3, r3, #2
 8017416:	b29a      	uxth	r2, r3
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	2207      	movs	r2, #7
 8017420:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017422:	e02c      	b.n	801747e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017424:	4b3b      	ldr	r3, [pc, #236]	; (8017514 <tcp_process+0x594>)
 8017426:	6819      	ldr	r1, [r3, #0]
 8017428:	4b3b      	ldr	r3, [pc, #236]	; (8017518 <tcp_process+0x598>)
 801742a:	881b      	ldrh	r3, [r3, #0]
 801742c:	461a      	mov	r2, r3
 801742e:	4b3b      	ldr	r3, [pc, #236]	; (801751c <tcp_process+0x59c>)
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017434:	4b3a      	ldr	r3, [pc, #232]	; (8017520 <tcp_process+0x5a0>)
 8017436:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017438:	885b      	ldrh	r3, [r3, #2]
 801743a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801743c:	4a38      	ldr	r2, [pc, #224]	; (8017520 <tcp_process+0x5a0>)
 801743e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017440:	8812      	ldrh	r2, [r2, #0]
 8017442:	b292      	uxth	r2, r2
 8017444:	9202      	str	r2, [sp, #8]
 8017446:	9301      	str	r3, [sp, #4]
 8017448:	4b36      	ldr	r3, [pc, #216]	; (8017524 <tcp_process+0x5a4>)
 801744a:	9300      	str	r3, [sp, #0]
 801744c:	4b36      	ldr	r3, [pc, #216]	; (8017528 <tcp_process+0x5a8>)
 801744e:	4602      	mov	r2, r0
 8017450:	6878      	ldr	r0, [r7, #4]
 8017452:	f003 f829 	bl	801a4a8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8017456:	e167      	b.n	8017728 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8017458:	4b2d      	ldr	r3, [pc, #180]	; (8017510 <tcp_process+0x590>)
 801745a:	781b      	ldrb	r3, [r3, #0]
 801745c:	f003 0302 	and.w	r3, r3, #2
 8017460:	2b00      	cmp	r3, #0
 8017462:	f000 8161 	beq.w	8017728 <tcp_process+0x7a8>
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801746a:	1e5a      	subs	r2, r3, #1
 801746c:	4b2b      	ldr	r3, [pc, #172]	; (801751c <tcp_process+0x59c>)
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	429a      	cmp	r2, r3
 8017472:	f040 8159 	bne.w	8017728 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8017476:	6878      	ldr	r0, [r7, #4]
 8017478:	f002 fe10 	bl	801a09c <tcp_rexmit>
      break;
 801747c:	e154      	b.n	8017728 <tcp_process+0x7a8>
 801747e:	e153      	b.n	8017728 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8017480:	6878      	ldr	r0, [r7, #4]
 8017482:	f000 fa71 	bl	8017968 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8017486:	4b2d      	ldr	r3, [pc, #180]	; (801753c <tcp_process+0x5bc>)
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	f003 0320 	and.w	r3, r3, #32
 801748e:	2b00      	cmp	r3, #0
 8017490:	f000 814c 	beq.w	801772c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	8b5b      	ldrh	r3, [r3, #26]
 8017498:	f043 0302 	orr.w	r3, r3, #2
 801749c:	b29a      	uxth	r2, r3
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80174a2:	687b      	ldr	r3, [r7, #4]
 80174a4:	2207      	movs	r2, #7
 80174a6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80174a8:	e140      	b.n	801772c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80174aa:	6878      	ldr	r0, [r7, #4]
 80174ac:	f000 fa5c 	bl	8017968 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80174b0:	4b22      	ldr	r3, [pc, #136]	; (801753c <tcp_process+0x5bc>)
 80174b2:	781b      	ldrb	r3, [r3, #0]
 80174b4:	f003 0320 	and.w	r3, r3, #32
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d071      	beq.n	80175a0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80174bc:	4b14      	ldr	r3, [pc, #80]	; (8017510 <tcp_process+0x590>)
 80174be:	781b      	ldrb	r3, [r3, #0]
 80174c0:	f003 0310 	and.w	r3, r3, #16
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	d060      	beq.n	801758a <tcp_process+0x60a>
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80174cc:	4b11      	ldr	r3, [pc, #68]	; (8017514 <tcp_process+0x594>)
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	429a      	cmp	r2, r3
 80174d2:	d15a      	bne.n	801758a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80174d4:	687b      	ldr	r3, [r7, #4]
 80174d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d156      	bne.n	801758a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	8b5b      	ldrh	r3, [r3, #26]
 80174e0:	f043 0302 	orr.w	r3, r3, #2
 80174e4:	b29a      	uxth	r2, r3
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80174ea:	6878      	ldr	r0, [r7, #4]
 80174ec:	f7fe fdae 	bl	801604c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80174f0:	4b13      	ldr	r3, [pc, #76]	; (8017540 <tcp_process+0x5c0>)
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	687a      	ldr	r2, [r7, #4]
 80174f6:	429a      	cmp	r2, r3
 80174f8:	d105      	bne.n	8017506 <tcp_process+0x586>
 80174fa:	4b11      	ldr	r3, [pc, #68]	; (8017540 <tcp_process+0x5c0>)
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	68db      	ldr	r3, [r3, #12]
 8017500:	4a0f      	ldr	r2, [pc, #60]	; (8017540 <tcp_process+0x5c0>)
 8017502:	6013      	str	r3, [r2, #0]
 8017504:	e02e      	b.n	8017564 <tcp_process+0x5e4>
 8017506:	4b0e      	ldr	r3, [pc, #56]	; (8017540 <tcp_process+0x5c0>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	617b      	str	r3, [r7, #20]
 801750c:	e027      	b.n	801755e <tcp_process+0x5de>
 801750e:	bf00      	nop
 8017510:	20012314 	.word	0x20012314
 8017514:	2001230c 	.word	0x2001230c
 8017518:	20012312 	.word	0x20012312
 801751c:	20012308 	.word	0x20012308
 8017520:	200122f8 	.word	0x200122f8
 8017524:	2000eb34 	.word	0x2000eb34
 8017528:	2000eb38 	.word	0x2000eb38
 801752c:	080252c4 	.word	0x080252c4
 8017530:	08025564 	.word	0x08025564
 8017534:	08025310 	.word	0x08025310
 8017538:	20012310 	.word	0x20012310
 801753c:	20012315 	.word	0x20012315
 8017540:	200122dc 	.word	0x200122dc
 8017544:	697b      	ldr	r3, [r7, #20]
 8017546:	68db      	ldr	r3, [r3, #12]
 8017548:	687a      	ldr	r2, [r7, #4]
 801754a:	429a      	cmp	r2, r3
 801754c:	d104      	bne.n	8017558 <tcp_process+0x5d8>
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	68da      	ldr	r2, [r3, #12]
 8017552:	697b      	ldr	r3, [r7, #20]
 8017554:	60da      	str	r2, [r3, #12]
 8017556:	e005      	b.n	8017564 <tcp_process+0x5e4>
 8017558:	697b      	ldr	r3, [r7, #20]
 801755a:	68db      	ldr	r3, [r3, #12]
 801755c:	617b      	str	r3, [r7, #20]
 801755e:	697b      	ldr	r3, [r7, #20]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d1ef      	bne.n	8017544 <tcp_process+0x5c4>
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	2200      	movs	r2, #0
 8017568:	60da      	str	r2, [r3, #12]
 801756a:	4b77      	ldr	r3, [pc, #476]	; (8017748 <tcp_process+0x7c8>)
 801756c:	2201      	movs	r2, #1
 801756e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	220a      	movs	r2, #10
 8017574:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8017576:	4b75      	ldr	r3, [pc, #468]	; (801774c <tcp_process+0x7cc>)
 8017578:	681a      	ldr	r2, [r3, #0]
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	60da      	str	r2, [r3, #12]
 801757e:	4a73      	ldr	r2, [pc, #460]	; (801774c <tcp_process+0x7cc>)
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	6013      	str	r3, [r2, #0]
 8017584:	f003 f952 	bl	801a82c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8017588:	e0d2      	b.n	8017730 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	8b5b      	ldrh	r3, [r3, #26]
 801758e:	f043 0302 	orr.w	r3, r3, #2
 8017592:	b29a      	uxth	r2, r3
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	2208      	movs	r2, #8
 801759c:	751a      	strb	r2, [r3, #20]
      break;
 801759e:	e0c7      	b.n	8017730 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80175a0:	4b6b      	ldr	r3, [pc, #428]	; (8017750 <tcp_process+0x7d0>)
 80175a2:	781b      	ldrb	r3, [r3, #0]
 80175a4:	f003 0310 	and.w	r3, r3, #16
 80175a8:	2b00      	cmp	r3, #0
 80175aa:	f000 80c1 	beq.w	8017730 <tcp_process+0x7b0>
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80175b2:	4b68      	ldr	r3, [pc, #416]	; (8017754 <tcp_process+0x7d4>)
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	429a      	cmp	r2, r3
 80175b8:	f040 80ba 	bne.w	8017730 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	f040 80b5 	bne.w	8017730 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	2206      	movs	r2, #6
 80175ca:	751a      	strb	r2, [r3, #20]
      break;
 80175cc:	e0b0      	b.n	8017730 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80175ce:	6878      	ldr	r0, [r7, #4]
 80175d0:	f000 f9ca 	bl	8017968 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80175d4:	4b60      	ldr	r3, [pc, #384]	; (8017758 <tcp_process+0x7d8>)
 80175d6:	781b      	ldrb	r3, [r3, #0]
 80175d8:	f003 0320 	and.w	r3, r3, #32
 80175dc:	2b00      	cmp	r3, #0
 80175de:	f000 80a9 	beq.w	8017734 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80175e2:	687b      	ldr	r3, [r7, #4]
 80175e4:	8b5b      	ldrh	r3, [r3, #26]
 80175e6:	f043 0302 	orr.w	r3, r3, #2
 80175ea:	b29a      	uxth	r2, r3
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80175f0:	6878      	ldr	r0, [r7, #4]
 80175f2:	f7fe fd2b 	bl	801604c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80175f6:	4b59      	ldr	r3, [pc, #356]	; (801775c <tcp_process+0x7dc>)
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	687a      	ldr	r2, [r7, #4]
 80175fc:	429a      	cmp	r2, r3
 80175fe:	d105      	bne.n	801760c <tcp_process+0x68c>
 8017600:	4b56      	ldr	r3, [pc, #344]	; (801775c <tcp_process+0x7dc>)
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	68db      	ldr	r3, [r3, #12]
 8017606:	4a55      	ldr	r2, [pc, #340]	; (801775c <tcp_process+0x7dc>)
 8017608:	6013      	str	r3, [r2, #0]
 801760a:	e013      	b.n	8017634 <tcp_process+0x6b4>
 801760c:	4b53      	ldr	r3, [pc, #332]	; (801775c <tcp_process+0x7dc>)
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	613b      	str	r3, [r7, #16]
 8017612:	e00c      	b.n	801762e <tcp_process+0x6ae>
 8017614:	693b      	ldr	r3, [r7, #16]
 8017616:	68db      	ldr	r3, [r3, #12]
 8017618:	687a      	ldr	r2, [r7, #4]
 801761a:	429a      	cmp	r2, r3
 801761c:	d104      	bne.n	8017628 <tcp_process+0x6a8>
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	68da      	ldr	r2, [r3, #12]
 8017622:	693b      	ldr	r3, [r7, #16]
 8017624:	60da      	str	r2, [r3, #12]
 8017626:	e005      	b.n	8017634 <tcp_process+0x6b4>
 8017628:	693b      	ldr	r3, [r7, #16]
 801762a:	68db      	ldr	r3, [r3, #12]
 801762c:	613b      	str	r3, [r7, #16]
 801762e:	693b      	ldr	r3, [r7, #16]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d1ef      	bne.n	8017614 <tcp_process+0x694>
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	2200      	movs	r2, #0
 8017638:	60da      	str	r2, [r3, #12]
 801763a:	4b43      	ldr	r3, [pc, #268]	; (8017748 <tcp_process+0x7c8>)
 801763c:	2201      	movs	r2, #1
 801763e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	220a      	movs	r2, #10
 8017644:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017646:	4b41      	ldr	r3, [pc, #260]	; (801774c <tcp_process+0x7cc>)
 8017648:	681a      	ldr	r2, [r3, #0]
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	60da      	str	r2, [r3, #12]
 801764e:	4a3f      	ldr	r2, [pc, #252]	; (801774c <tcp_process+0x7cc>)
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	6013      	str	r3, [r2, #0]
 8017654:	f003 f8ea 	bl	801a82c <tcp_timer_needed>
      }
      break;
 8017658:	e06c      	b.n	8017734 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801765a:	6878      	ldr	r0, [r7, #4]
 801765c:	f000 f984 	bl	8017968 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017660:	4b3b      	ldr	r3, [pc, #236]	; (8017750 <tcp_process+0x7d0>)
 8017662:	781b      	ldrb	r3, [r3, #0]
 8017664:	f003 0310 	and.w	r3, r3, #16
 8017668:	2b00      	cmp	r3, #0
 801766a:	d065      	beq.n	8017738 <tcp_process+0x7b8>
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017670:	4b38      	ldr	r3, [pc, #224]	; (8017754 <tcp_process+0x7d4>)
 8017672:	681b      	ldr	r3, [r3, #0]
 8017674:	429a      	cmp	r2, r3
 8017676:	d15f      	bne.n	8017738 <tcp_process+0x7b8>
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801767c:	2b00      	cmp	r3, #0
 801767e:	d15b      	bne.n	8017738 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8017680:	6878      	ldr	r0, [r7, #4]
 8017682:	f7fe fce3 	bl	801604c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017686:	4b35      	ldr	r3, [pc, #212]	; (801775c <tcp_process+0x7dc>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	687a      	ldr	r2, [r7, #4]
 801768c:	429a      	cmp	r2, r3
 801768e:	d105      	bne.n	801769c <tcp_process+0x71c>
 8017690:	4b32      	ldr	r3, [pc, #200]	; (801775c <tcp_process+0x7dc>)
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	68db      	ldr	r3, [r3, #12]
 8017696:	4a31      	ldr	r2, [pc, #196]	; (801775c <tcp_process+0x7dc>)
 8017698:	6013      	str	r3, [r2, #0]
 801769a:	e013      	b.n	80176c4 <tcp_process+0x744>
 801769c:	4b2f      	ldr	r3, [pc, #188]	; (801775c <tcp_process+0x7dc>)
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	60fb      	str	r3, [r7, #12]
 80176a2:	e00c      	b.n	80176be <tcp_process+0x73e>
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	68db      	ldr	r3, [r3, #12]
 80176a8:	687a      	ldr	r2, [r7, #4]
 80176aa:	429a      	cmp	r2, r3
 80176ac:	d104      	bne.n	80176b8 <tcp_process+0x738>
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	68da      	ldr	r2, [r3, #12]
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	60da      	str	r2, [r3, #12]
 80176b6:	e005      	b.n	80176c4 <tcp_process+0x744>
 80176b8:	68fb      	ldr	r3, [r7, #12]
 80176ba:	68db      	ldr	r3, [r3, #12]
 80176bc:	60fb      	str	r3, [r7, #12]
 80176be:	68fb      	ldr	r3, [r7, #12]
 80176c0:	2b00      	cmp	r3, #0
 80176c2:	d1ef      	bne.n	80176a4 <tcp_process+0x724>
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	2200      	movs	r2, #0
 80176c8:	60da      	str	r2, [r3, #12]
 80176ca:	4b1f      	ldr	r3, [pc, #124]	; (8017748 <tcp_process+0x7c8>)
 80176cc:	2201      	movs	r2, #1
 80176ce:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	220a      	movs	r2, #10
 80176d4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80176d6:	4b1d      	ldr	r3, [pc, #116]	; (801774c <tcp_process+0x7cc>)
 80176d8:	681a      	ldr	r2, [r3, #0]
 80176da:	687b      	ldr	r3, [r7, #4]
 80176dc:	60da      	str	r2, [r3, #12]
 80176de:	4a1b      	ldr	r2, [pc, #108]	; (801774c <tcp_process+0x7cc>)
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6013      	str	r3, [r2, #0]
 80176e4:	f003 f8a2 	bl	801a82c <tcp_timer_needed>
      }
      break;
 80176e8:	e026      	b.n	8017738 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80176ea:	6878      	ldr	r0, [r7, #4]
 80176ec:	f000 f93c 	bl	8017968 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80176f0:	4b17      	ldr	r3, [pc, #92]	; (8017750 <tcp_process+0x7d0>)
 80176f2:	781b      	ldrb	r3, [r3, #0]
 80176f4:	f003 0310 	and.w	r3, r3, #16
 80176f8:	2b00      	cmp	r3, #0
 80176fa:	d01f      	beq.n	801773c <tcp_process+0x7bc>
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017700:	4b14      	ldr	r3, [pc, #80]	; (8017754 <tcp_process+0x7d4>)
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	429a      	cmp	r2, r3
 8017706:	d119      	bne.n	801773c <tcp_process+0x7bc>
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801770c:	2b00      	cmp	r3, #0
 801770e:	d115      	bne.n	801773c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017710:	4b11      	ldr	r3, [pc, #68]	; (8017758 <tcp_process+0x7d8>)
 8017712:	781b      	ldrb	r3, [r3, #0]
 8017714:	f043 0310 	orr.w	r3, r3, #16
 8017718:	b2da      	uxtb	r2, r3
 801771a:	4b0f      	ldr	r3, [pc, #60]	; (8017758 <tcp_process+0x7d8>)
 801771c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801771e:	e00d      	b.n	801773c <tcp_process+0x7bc>
    default:
      break;
 8017720:	bf00      	nop
 8017722:	e00c      	b.n	801773e <tcp_process+0x7be>
      break;
 8017724:	bf00      	nop
 8017726:	e00a      	b.n	801773e <tcp_process+0x7be>
      break;
 8017728:	bf00      	nop
 801772a:	e008      	b.n	801773e <tcp_process+0x7be>
      break;
 801772c:	bf00      	nop
 801772e:	e006      	b.n	801773e <tcp_process+0x7be>
      break;
 8017730:	bf00      	nop
 8017732:	e004      	b.n	801773e <tcp_process+0x7be>
      break;
 8017734:	bf00      	nop
 8017736:	e002      	b.n	801773e <tcp_process+0x7be>
      break;
 8017738:	bf00      	nop
 801773a:	e000      	b.n	801773e <tcp_process+0x7be>
      break;
 801773c:	bf00      	nop
  }
  return ERR_OK;
 801773e:	2300      	movs	r3, #0
}
 8017740:	4618      	mov	r0, r3
 8017742:	3724      	adds	r7, #36	; 0x24
 8017744:	46bd      	mov	sp, r7
 8017746:	bd90      	pop	{r4, r7, pc}
 8017748:	200122e4 	.word	0x200122e4
 801774c:	200122e0 	.word	0x200122e0
 8017750:	20012314 	.word	0x20012314
 8017754:	2001230c 	.word	0x2001230c
 8017758:	20012315 	.word	0x20012315
 801775c:	200122dc 	.word	0x200122dc

08017760 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8017760:	b590      	push	{r4, r7, lr}
 8017762:	b085      	sub	sp, #20
 8017764:	af00      	add	r7, sp, #0
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d106      	bne.n	801777e <tcp_oos_insert_segment+0x1e>
 8017770:	4b3b      	ldr	r3, [pc, #236]	; (8017860 <tcp_oos_insert_segment+0x100>)
 8017772:	f240 421f 	movw	r2, #1055	; 0x41f
 8017776:	493b      	ldr	r1, [pc, #236]	; (8017864 <tcp_oos_insert_segment+0x104>)
 8017778:	483b      	ldr	r0, [pc, #236]	; (8017868 <tcp_oos_insert_segment+0x108>)
 801777a:	f009 fe1d 	bl	80213b8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	68db      	ldr	r3, [r3, #12]
 8017782:	899b      	ldrh	r3, [r3, #12]
 8017784:	b29b      	uxth	r3, r3
 8017786:	4618      	mov	r0, r3
 8017788:	f7fb f8d4 	bl	8012934 <lwip_htons>
 801778c:	4603      	mov	r3, r0
 801778e:	b2db      	uxtb	r3, r3
 8017790:	f003 0301 	and.w	r3, r3, #1
 8017794:	2b00      	cmp	r3, #0
 8017796:	d028      	beq.n	80177ea <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017798:	6838      	ldr	r0, [r7, #0]
 801779a:	f7fe f97d 	bl	8015a98 <tcp_segs_free>
    next = NULL;
 801779e:	2300      	movs	r3, #0
 80177a0:	603b      	str	r3, [r7, #0]
 80177a2:	e056      	b.n	8017852 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80177a4:	683b      	ldr	r3, [r7, #0]
 80177a6:	68db      	ldr	r3, [r3, #12]
 80177a8:	899b      	ldrh	r3, [r3, #12]
 80177aa:	b29b      	uxth	r3, r3
 80177ac:	4618      	mov	r0, r3
 80177ae:	f7fb f8c1 	bl	8012934 <lwip_htons>
 80177b2:	4603      	mov	r3, r0
 80177b4:	b2db      	uxtb	r3, r3
 80177b6:	f003 0301 	and.w	r3, r3, #1
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	d00d      	beq.n	80177da <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	68db      	ldr	r3, [r3, #12]
 80177c2:	899b      	ldrh	r3, [r3, #12]
 80177c4:	b29c      	uxth	r4, r3
 80177c6:	2001      	movs	r0, #1
 80177c8:	f7fb f8b4 	bl	8012934 <lwip_htons>
 80177cc:	4603      	mov	r3, r0
 80177ce:	461a      	mov	r2, r3
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	68db      	ldr	r3, [r3, #12]
 80177d4:	4322      	orrs	r2, r4
 80177d6:	b292      	uxth	r2, r2
 80177d8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80177da:	683b      	ldr	r3, [r7, #0]
 80177dc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	681b      	ldr	r3, [r3, #0]
 80177e2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80177e4:	68f8      	ldr	r0, [r7, #12]
 80177e6:	f7fe f96c 	bl	8015ac2 <tcp_seg_free>
    while (next &&
 80177ea:	683b      	ldr	r3, [r7, #0]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d00e      	beq.n	801780e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	891b      	ldrh	r3, [r3, #8]
 80177f4:	461a      	mov	r2, r3
 80177f6:	4b1d      	ldr	r3, [pc, #116]	; (801786c <tcp_oos_insert_segment+0x10c>)
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	441a      	add	r2, r3
 80177fc:	683b      	ldr	r3, [r7, #0]
 80177fe:	68db      	ldr	r3, [r3, #12]
 8017800:	685b      	ldr	r3, [r3, #4]
 8017802:	6839      	ldr	r1, [r7, #0]
 8017804:	8909      	ldrh	r1, [r1, #8]
 8017806:	440b      	add	r3, r1
 8017808:	1ad3      	subs	r3, r2, r3
    while (next &&
 801780a:	2b00      	cmp	r3, #0
 801780c:	daca      	bge.n	80177a4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	2b00      	cmp	r3, #0
 8017812:	d01e      	beq.n	8017852 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	891b      	ldrh	r3, [r3, #8]
 8017818:	461a      	mov	r2, r3
 801781a:	4b14      	ldr	r3, [pc, #80]	; (801786c <tcp_oos_insert_segment+0x10c>)
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	441a      	add	r2, r3
 8017820:	683b      	ldr	r3, [r7, #0]
 8017822:	68db      	ldr	r3, [r3, #12]
 8017824:	685b      	ldr	r3, [r3, #4]
 8017826:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017828:	2b00      	cmp	r3, #0
 801782a:	dd12      	ble.n	8017852 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801782c:	683b      	ldr	r3, [r7, #0]
 801782e:	68db      	ldr	r3, [r3, #12]
 8017830:	685b      	ldr	r3, [r3, #4]
 8017832:	b29a      	uxth	r2, r3
 8017834:	4b0d      	ldr	r3, [pc, #52]	; (801786c <tcp_oos_insert_segment+0x10c>)
 8017836:	681b      	ldr	r3, [r3, #0]
 8017838:	b29b      	uxth	r3, r3
 801783a:	1ad3      	subs	r3, r2, r3
 801783c:	b29a      	uxth	r2, r3
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017842:	687b      	ldr	r3, [r7, #4]
 8017844:	685a      	ldr	r2, [r3, #4]
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	891b      	ldrh	r3, [r3, #8]
 801784a:	4619      	mov	r1, r3
 801784c:	4610      	mov	r0, r2
 801784e:	f7fc fae9 	bl	8013e24 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	683a      	ldr	r2, [r7, #0]
 8017856:	601a      	str	r2, [r3, #0]
}
 8017858:	bf00      	nop
 801785a:	3714      	adds	r7, #20
 801785c:	46bd      	mov	sp, r7
 801785e:	bd90      	pop	{r4, r7, pc}
 8017860:	080252c4 	.word	0x080252c4
 8017864:	08025584 	.word	0x08025584
 8017868:	08025310 	.word	0x08025310
 801786c:	20012308 	.word	0x20012308

08017870 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017870:	b5b0      	push	{r4, r5, r7, lr}
 8017872:	b086      	sub	sp, #24
 8017874:	af00      	add	r7, sp, #0
 8017876:	60f8      	str	r0, [r7, #12]
 8017878:	60b9      	str	r1, [r7, #8]
 801787a:	607a      	str	r2, [r7, #4]
 801787c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801787e:	e03e      	b.n	80178fe <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017880:	68bb      	ldr	r3, [r7, #8]
 8017882:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017884:	68bb      	ldr	r3, [r7, #8]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801788a:	697b      	ldr	r3, [r7, #20]
 801788c:	685b      	ldr	r3, [r3, #4]
 801788e:	4618      	mov	r0, r3
 8017890:	f7fc fcdc 	bl	801424c <pbuf_clen>
 8017894:	4603      	mov	r3, r0
 8017896:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801789e:	8a7a      	ldrh	r2, [r7, #18]
 80178a0:	429a      	cmp	r2, r3
 80178a2:	d906      	bls.n	80178b2 <tcp_free_acked_segments+0x42>
 80178a4:	4b2a      	ldr	r3, [pc, #168]	; (8017950 <tcp_free_acked_segments+0xe0>)
 80178a6:	f240 4257 	movw	r2, #1111	; 0x457
 80178aa:	492a      	ldr	r1, [pc, #168]	; (8017954 <tcp_free_acked_segments+0xe4>)
 80178ac:	482a      	ldr	r0, [pc, #168]	; (8017958 <tcp_free_acked_segments+0xe8>)
 80178ae:	f009 fd83 	bl	80213b8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80178b2:	68fb      	ldr	r3, [r7, #12]
 80178b4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80178b8:	8a7b      	ldrh	r3, [r7, #18]
 80178ba:	1ad3      	subs	r3, r2, r3
 80178bc:	b29a      	uxth	r2, r3
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80178c4:	697b      	ldr	r3, [r7, #20]
 80178c6:	891a      	ldrh	r2, [r3, #8]
 80178c8:	4b24      	ldr	r3, [pc, #144]	; (801795c <tcp_free_acked_segments+0xec>)
 80178ca:	881b      	ldrh	r3, [r3, #0]
 80178cc:	4413      	add	r3, r2
 80178ce:	b29a      	uxth	r2, r3
 80178d0:	4b22      	ldr	r3, [pc, #136]	; (801795c <tcp_free_acked_segments+0xec>)
 80178d2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80178d4:	6978      	ldr	r0, [r7, #20]
 80178d6:	f7fe f8f4 	bl	8015ac2 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d00c      	beq.n	80178fe <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80178e4:	68bb      	ldr	r3, [r7, #8]
 80178e6:	2b00      	cmp	r3, #0
 80178e8:	d109      	bne.n	80178fe <tcp_free_acked_segments+0x8e>
 80178ea:	683b      	ldr	r3, [r7, #0]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d106      	bne.n	80178fe <tcp_free_acked_segments+0x8e>
 80178f0:	4b17      	ldr	r3, [pc, #92]	; (8017950 <tcp_free_acked_segments+0xe0>)
 80178f2:	f240 4261 	movw	r2, #1121	; 0x461
 80178f6:	491a      	ldr	r1, [pc, #104]	; (8017960 <tcp_free_acked_segments+0xf0>)
 80178f8:	4817      	ldr	r0, [pc, #92]	; (8017958 <tcp_free_acked_segments+0xe8>)
 80178fa:	f009 fd5d 	bl	80213b8 <iprintf>
  while (seg_list != NULL &&
 80178fe:	68bb      	ldr	r3, [r7, #8]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d020      	beq.n	8017946 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017904:	68bb      	ldr	r3, [r7, #8]
 8017906:	68db      	ldr	r3, [r3, #12]
 8017908:	685b      	ldr	r3, [r3, #4]
 801790a:	4618      	mov	r0, r3
 801790c:	f7fb f827 	bl	801295e <lwip_htonl>
 8017910:	4604      	mov	r4, r0
 8017912:	68bb      	ldr	r3, [r7, #8]
 8017914:	891b      	ldrh	r3, [r3, #8]
 8017916:	461d      	mov	r5, r3
 8017918:	68bb      	ldr	r3, [r7, #8]
 801791a:	68db      	ldr	r3, [r3, #12]
 801791c:	899b      	ldrh	r3, [r3, #12]
 801791e:	b29b      	uxth	r3, r3
 8017920:	4618      	mov	r0, r3
 8017922:	f7fb f807 	bl	8012934 <lwip_htons>
 8017926:	4603      	mov	r3, r0
 8017928:	b2db      	uxtb	r3, r3
 801792a:	f003 0303 	and.w	r3, r3, #3
 801792e:	2b00      	cmp	r3, #0
 8017930:	d001      	beq.n	8017936 <tcp_free_acked_segments+0xc6>
 8017932:	2301      	movs	r3, #1
 8017934:	e000      	b.n	8017938 <tcp_free_acked_segments+0xc8>
 8017936:	2300      	movs	r3, #0
 8017938:	442b      	add	r3, r5
 801793a:	18e2      	adds	r2, r4, r3
 801793c:	4b09      	ldr	r3, [pc, #36]	; (8017964 <tcp_free_acked_segments+0xf4>)
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017942:	2b00      	cmp	r3, #0
 8017944:	dd9c      	ble.n	8017880 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017946:	68bb      	ldr	r3, [r7, #8]
}
 8017948:	4618      	mov	r0, r3
 801794a:	3718      	adds	r7, #24
 801794c:	46bd      	mov	sp, r7
 801794e:	bdb0      	pop	{r4, r5, r7, pc}
 8017950:	080252c4 	.word	0x080252c4
 8017954:	080255ac 	.word	0x080255ac
 8017958:	08025310 	.word	0x08025310
 801795c:	20012310 	.word	0x20012310
 8017960:	080255d4 	.word	0x080255d4
 8017964:	2001230c 	.word	0x2001230c

08017968 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017968:	b5b0      	push	{r4, r5, r7, lr}
 801796a:	b094      	sub	sp, #80	; 0x50
 801796c:	af00      	add	r7, sp, #0
 801796e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017970:	2300      	movs	r3, #0
 8017972:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	2b00      	cmp	r3, #0
 8017978:	d106      	bne.n	8017988 <tcp_receive+0x20>
 801797a:	4b91      	ldr	r3, [pc, #580]	; (8017bc0 <tcp_receive+0x258>)
 801797c:	f240 427b 	movw	r2, #1147	; 0x47b
 8017980:	4990      	ldr	r1, [pc, #576]	; (8017bc4 <tcp_receive+0x25c>)
 8017982:	4891      	ldr	r0, [pc, #580]	; (8017bc8 <tcp_receive+0x260>)
 8017984:	f009 fd18 	bl	80213b8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	7d1b      	ldrb	r3, [r3, #20]
 801798c:	2b03      	cmp	r3, #3
 801798e:	d806      	bhi.n	801799e <tcp_receive+0x36>
 8017990:	4b8b      	ldr	r3, [pc, #556]	; (8017bc0 <tcp_receive+0x258>)
 8017992:	f240 427c 	movw	r2, #1148	; 0x47c
 8017996:	498d      	ldr	r1, [pc, #564]	; (8017bcc <tcp_receive+0x264>)
 8017998:	488b      	ldr	r0, [pc, #556]	; (8017bc8 <tcp_receive+0x260>)
 801799a:	f009 fd0d 	bl	80213b8 <iprintf>

  if (flags & TCP_ACK) {
 801799e:	4b8c      	ldr	r3, [pc, #560]	; (8017bd0 <tcp_receive+0x268>)
 80179a0:	781b      	ldrb	r3, [r3, #0]
 80179a2:	f003 0310 	and.w	r3, r3, #16
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	f000 8264 	beq.w	8017e74 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80179b2:	461a      	mov	r2, r3
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80179b8:	4413      	add	r3, r2
 80179ba:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80179c0:	4b84      	ldr	r3, [pc, #528]	; (8017bd4 <tcp_receive+0x26c>)
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	1ad3      	subs	r3, r2, r3
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	db1b      	blt.n	8017a02 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80179ce:	4b81      	ldr	r3, [pc, #516]	; (8017bd4 <tcp_receive+0x26c>)
 80179d0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80179d2:	429a      	cmp	r2, r3
 80179d4:	d106      	bne.n	80179e4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80179da:	4b7f      	ldr	r3, [pc, #508]	; (8017bd8 <tcp_receive+0x270>)
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	1ad3      	subs	r3, r2, r3
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	db0e      	blt.n	8017a02 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80179e8:	4b7b      	ldr	r3, [pc, #492]	; (8017bd8 <tcp_receive+0x270>)
 80179ea:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80179ec:	429a      	cmp	r2, r3
 80179ee:	d125      	bne.n	8017a3c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80179f0:	4b7a      	ldr	r3, [pc, #488]	; (8017bdc <tcp_receive+0x274>)
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	89db      	ldrh	r3, [r3, #14]
 80179f6:	b29a      	uxth	r2, r3
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d91c      	bls.n	8017a3c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017a02:	4b76      	ldr	r3, [pc, #472]	; (8017bdc <tcp_receive+0x274>)
 8017a04:	681b      	ldr	r3, [r3, #0]
 8017a06:	89db      	ldrh	r3, [r3, #14]
 8017a08:	b29a      	uxth	r2, r3
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017a1c:	429a      	cmp	r2, r3
 8017a1e:	d205      	bcs.n	8017a2c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8017a2c:	4b69      	ldr	r3, [pc, #420]	; (8017bd4 <tcp_receive+0x26c>)
 8017a2e:	681a      	ldr	r2, [r3, #0]
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8017a34:	4b68      	ldr	r3, [pc, #416]	; (8017bd8 <tcp_receive+0x270>)
 8017a36:	681a      	ldr	r2, [r3, #0]
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017a3c:	4b66      	ldr	r3, [pc, #408]	; (8017bd8 <tcp_receive+0x270>)
 8017a3e:	681a      	ldr	r2, [r3, #0]
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a44:	1ad3      	subs	r3, r2, r3
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	dc58      	bgt.n	8017afc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017a4a:	4b65      	ldr	r3, [pc, #404]	; (8017be0 <tcp_receive+0x278>)
 8017a4c:	881b      	ldrh	r3, [r3, #0]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d14b      	bne.n	8017aea <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017a56:	687a      	ldr	r2, [r7, #4]
 8017a58:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8017a5c:	4413      	add	r3, r2
 8017a5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a60:	429a      	cmp	r2, r3
 8017a62:	d142      	bne.n	8017aea <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	db3d      	blt.n	8017aea <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017a6e:	687b      	ldr	r3, [r7, #4]
 8017a70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017a72:	4b59      	ldr	r3, [pc, #356]	; (8017bd8 <tcp_receive+0x270>)
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	429a      	cmp	r2, r3
 8017a78:	d137      	bne.n	8017aea <tcp_receive+0x182>
              found_dupack = 1;
 8017a7a:	2301      	movs	r3, #1
 8017a7c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017a84:	2bff      	cmp	r3, #255	; 0xff
 8017a86:	d007      	beq.n	8017a98 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017a8e:	3301      	adds	r3, #1
 8017a90:	b2da      	uxtb	r2, r3
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017a9e:	2b03      	cmp	r3, #3
 8017aa0:	d91b      	bls.n	8017ada <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017aac:	4413      	add	r3, r2
 8017aae:	b29a      	uxth	r2, r3
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017ab6:	429a      	cmp	r2, r3
 8017ab8:	d30a      	bcc.n	8017ad0 <tcp_receive+0x168>
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017ac4:	4413      	add	r3, r2
 8017ac6:	b29a      	uxth	r2, r3
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017ace:	e004      	b.n	8017ada <tcp_receive+0x172>
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ad6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017ae0:	2b02      	cmp	r3, #2
 8017ae2:	d902      	bls.n	8017aea <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017ae4:	6878      	ldr	r0, [r7, #4]
 8017ae6:	f002 fb45 	bl	801a174 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017aea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	f040 8161 	bne.w	8017db4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	2200      	movs	r2, #0
 8017af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017afa:	e15b      	b.n	8017db4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017afc:	4b36      	ldr	r3, [pc, #216]	; (8017bd8 <tcp_receive+0x270>)
 8017afe:	681a      	ldr	r2, [r3, #0]
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b04:	1ad3      	subs	r3, r2, r3
 8017b06:	3b01      	subs	r3, #1
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	f2c0 814e 	blt.w	8017daa <tcp_receive+0x442>
 8017b0e:	4b32      	ldr	r3, [pc, #200]	; (8017bd8 <tcp_receive+0x270>)
 8017b10:	681a      	ldr	r2, [r3, #0]
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b16:	1ad3      	subs	r3, r2, r3
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	f300 8146 	bgt.w	8017daa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	8b5b      	ldrh	r3, [r3, #26]
 8017b22:	f003 0304 	and.w	r3, r3, #4
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d010      	beq.n	8017b4c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	8b5b      	ldrh	r3, [r3, #26]
 8017b2e:	f023 0304 	bic.w	r3, r3, #4
 8017b32:	b29a      	uxth	r2, r3
 8017b34:	687b      	ldr	r3, [r7, #4]
 8017b36:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	2200      	movs	r2, #0
 8017b48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	2200      	movs	r2, #0
 8017b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017b5a:	10db      	asrs	r3, r3, #3
 8017b5c:	b21b      	sxth	r3, r3
 8017b5e:	b29a      	uxth	r2, r3
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017b66:	b29b      	uxth	r3, r3
 8017b68:	4413      	add	r3, r2
 8017b6a:	b29b      	uxth	r3, r3
 8017b6c:	b21a      	sxth	r2, r3
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017b74:	4b18      	ldr	r3, [pc, #96]	; (8017bd8 <tcp_receive+0x270>)
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	b29a      	uxth	r2, r3
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017b7e:	b29b      	uxth	r3, r3
 8017b80:	1ad3      	subs	r3, r2, r3
 8017b82:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	2200      	movs	r2, #0
 8017b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8017b8c:	4b12      	ldr	r3, [pc, #72]	; (8017bd8 <tcp_receive+0x270>)
 8017b8e:	681a      	ldr	r2, [r3, #0]
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	7d1b      	ldrb	r3, [r3, #20]
 8017b98:	2b03      	cmp	r3, #3
 8017b9a:	f240 8097 	bls.w	8017ccc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017baa:	429a      	cmp	r2, r3
 8017bac:	d245      	bcs.n	8017c3a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	8b5b      	ldrh	r3, [r3, #26]
 8017bb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d014      	beq.n	8017be4 <tcp_receive+0x27c>
 8017bba:	2301      	movs	r3, #1
 8017bbc:	e013      	b.n	8017be6 <tcp_receive+0x27e>
 8017bbe:	bf00      	nop
 8017bc0:	080252c4 	.word	0x080252c4
 8017bc4:	080255f4 	.word	0x080255f4
 8017bc8:	08025310 	.word	0x08025310
 8017bcc:	08025610 	.word	0x08025610
 8017bd0:	20012314 	.word	0x20012314
 8017bd4:	20012308 	.word	0x20012308
 8017bd8:	2001230c 	.word	0x2001230c
 8017bdc:	200122f8 	.word	0x200122f8
 8017be0:	20012312 	.word	0x20012312
 8017be4:	2302      	movs	r3, #2
 8017be6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017bea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8017bee:	b29a      	uxth	r2, r3
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017bf4:	fb12 f303 	smulbb	r3, r2, r3
 8017bf8:	b29b      	uxth	r3, r3
 8017bfa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017bfc:	4293      	cmp	r3, r2
 8017bfe:	bf28      	it	cs
 8017c00:	4613      	movcs	r3, r2
 8017c02:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017c0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c0c:	4413      	add	r3, r2
 8017c0e:	b29a      	uxth	r2, r3
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017c16:	429a      	cmp	r2, r3
 8017c18:	d309      	bcc.n	8017c2e <tcp_receive+0x2c6>
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017c20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c22:	4413      	add	r3, r2
 8017c24:	b29a      	uxth	r2, r3
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017c2c:	e04e      	b.n	8017ccc <tcp_receive+0x364>
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c34:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017c38:	e048      	b.n	8017ccc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017c40:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017c42:	4413      	add	r3, r2
 8017c44:	b29a      	uxth	r2, r3
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017c4c:	429a      	cmp	r2, r3
 8017c4e:	d309      	bcc.n	8017c64 <tcp_receive+0x2fc>
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017c56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017c58:	4413      	add	r3, r2
 8017c5a:	b29a      	uxth	r2, r3
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8017c62:	e004      	b.n	8017c6e <tcp_receive+0x306>
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017c74:	687b      	ldr	r3, [r7, #4]
 8017c76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017c7a:	429a      	cmp	r2, r3
 8017c7c:	d326      	bcc.n	8017ccc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017c8a:	1ad3      	subs	r3, r2, r3
 8017c8c:	b29a      	uxth	r2, r3
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017c9e:	4413      	add	r3, r2
 8017ca0:	b29a      	uxth	r2, r3
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	d30a      	bcc.n	8017cc2 <tcp_receive+0x35a>
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017cb6:	4413      	add	r3, r2
 8017cb8:	b29a      	uxth	r2, r3
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017cc0:	e004      	b.n	8017ccc <tcp_receive+0x364>
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017cc8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cd4:	4a98      	ldr	r2, [pc, #608]	; (8017f38 <tcp_receive+0x5d0>)
 8017cd6:	6878      	ldr	r0, [r7, #4]
 8017cd8:	f7ff fdca 	bl	8017870 <tcp_free_acked_segments>
 8017cdc:	4602      	mov	r2, r0
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cea:	4a94      	ldr	r2, [pc, #592]	; (8017f3c <tcp_receive+0x5d4>)
 8017cec:	6878      	ldr	r0, [r7, #4]
 8017cee:	f7ff fdbf 	bl	8017870 <tcp_free_acked_segments>
 8017cf2:	4602      	mov	r2, r0
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d104      	bne.n	8017d0a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d06:	861a      	strh	r2, [r3, #48]	; 0x30
 8017d08:	e002      	b.n	8017d10 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017d0a:	687b      	ldr	r3, [r7, #4]
 8017d0c:	2200      	movs	r2, #0
 8017d0e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	2200      	movs	r2, #0
 8017d14:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d1a:	2b00      	cmp	r3, #0
 8017d1c:	d103      	bne.n	8017d26 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	2200      	movs	r2, #0
 8017d22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017d26:	687b      	ldr	r3, [r7, #4]
 8017d28:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017d2c:	4b84      	ldr	r3, [pc, #528]	; (8017f40 <tcp_receive+0x5d8>)
 8017d2e:	881b      	ldrh	r3, [r3, #0]
 8017d30:	4413      	add	r3, r2
 8017d32:	b29a      	uxth	r2, r3
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	8b5b      	ldrh	r3, [r3, #26]
 8017d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017d42:	2b00      	cmp	r3, #0
 8017d44:	d035      	beq.n	8017db2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d118      	bne.n	8017d80 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d00c      	beq.n	8017d70 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d5e:	68db      	ldr	r3, [r3, #12]
 8017d60:	685b      	ldr	r3, [r3, #4]
 8017d62:	4618      	mov	r0, r3
 8017d64:	f7fa fdfb 	bl	801295e <lwip_htonl>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	dc20      	bgt.n	8017db2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	8b5b      	ldrh	r3, [r3, #26]
 8017d74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017d78:	b29a      	uxth	r2, r3
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017d7e:	e018      	b.n	8017db2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d88:	68db      	ldr	r3, [r3, #12]
 8017d8a:	685b      	ldr	r3, [r3, #4]
 8017d8c:	4618      	mov	r0, r3
 8017d8e:	f7fa fde6 	bl	801295e <lwip_htonl>
 8017d92:	4603      	mov	r3, r0
 8017d94:	1ae3      	subs	r3, r4, r3
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	dc0b      	bgt.n	8017db2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	8b5b      	ldrh	r3, [r3, #26]
 8017d9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017da2:	b29a      	uxth	r2, r3
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017da8:	e003      	b.n	8017db2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017daa:	6878      	ldr	r0, [r7, #4]
 8017dac:	f002 fbce 	bl	801a54c <tcp_send_empty_ack>
 8017db0:	e000      	b.n	8017db4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017db2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d05b      	beq.n	8017e74 <tcp_receive+0x50c>
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017dc0:	4b60      	ldr	r3, [pc, #384]	; (8017f44 <tcp_receive+0x5dc>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	1ad3      	subs	r3, r2, r3
 8017dc6:	2b00      	cmp	r3, #0
 8017dc8:	da54      	bge.n	8017e74 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017dca:	4b5f      	ldr	r3, [pc, #380]	; (8017f48 <tcp_receive+0x5e0>)
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	b29a      	uxth	r2, r3
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017dd4:	b29b      	uxth	r3, r3
 8017dd6:	1ad3      	subs	r3, r2, r3
 8017dd8:	b29b      	uxth	r3, r3
 8017dda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017dde:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017de8:	10db      	asrs	r3, r3, #3
 8017dea:	b21b      	sxth	r3, r3
 8017dec:	b29b      	uxth	r3, r3
 8017dee:	1ad3      	subs	r3, r2, r3
 8017df0:	b29b      	uxth	r3, r3
 8017df2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8017df6:	687b      	ldr	r3, [r7, #4]
 8017df8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017dfc:	b29a      	uxth	r2, r3
 8017dfe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017e02:	4413      	add	r3, r2
 8017e04:	b29b      	uxth	r3, r3
 8017e06:	b21a      	sxth	r2, r3
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8017e0c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	da05      	bge.n	8017e20 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8017e14:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017e18:	425b      	negs	r3, r3
 8017e1a:	b29b      	uxth	r3, r3
 8017e1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017e20:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8017e24:	687b      	ldr	r3, [r7, #4]
 8017e26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017e2a:	109b      	asrs	r3, r3, #2
 8017e2c:	b21b      	sxth	r3, r3
 8017e2e:	b29b      	uxth	r3, r3
 8017e30:	1ad3      	subs	r3, r2, r3
 8017e32:	b29b      	uxth	r3, r3
 8017e34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017e3e:	b29a      	uxth	r2, r3
 8017e40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017e44:	4413      	add	r3, r2
 8017e46:	b29b      	uxth	r3, r3
 8017e48:	b21a      	sxth	r2, r3
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017e54:	10db      	asrs	r3, r3, #3
 8017e56:	b21b      	sxth	r3, r3
 8017e58:	b29a      	uxth	r2, r3
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017e60:	b29b      	uxth	r3, r3
 8017e62:	4413      	add	r3, r2
 8017e64:	b29b      	uxth	r3, r3
 8017e66:	b21a      	sxth	r2, r3
 8017e68:	687b      	ldr	r3, [r7, #4]
 8017e6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	2200      	movs	r2, #0
 8017e72:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8017e74:	4b35      	ldr	r3, [pc, #212]	; (8017f4c <tcp_receive+0x5e4>)
 8017e76:	881b      	ldrh	r3, [r3, #0]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	f000 84e2 	beq.w	8018842 <tcp_receive+0xeda>
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	7d1b      	ldrb	r3, [r3, #20]
 8017e82:	2b06      	cmp	r3, #6
 8017e84:	f200 84dd 	bhi.w	8018842 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e8c:	4b30      	ldr	r3, [pc, #192]	; (8017f50 <tcp_receive+0x5e8>)
 8017e8e:	681b      	ldr	r3, [r3, #0]
 8017e90:	1ad3      	subs	r3, r2, r3
 8017e92:	3b01      	subs	r3, #1
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	f2c0 808f 	blt.w	8017fb8 <tcp_receive+0x650>
 8017e9a:	687b      	ldr	r3, [r7, #4]
 8017e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e9e:	4b2b      	ldr	r3, [pc, #172]	; (8017f4c <tcp_receive+0x5e4>)
 8017ea0:	881b      	ldrh	r3, [r3, #0]
 8017ea2:	4619      	mov	r1, r3
 8017ea4:	4b2a      	ldr	r3, [pc, #168]	; (8017f50 <tcp_receive+0x5e8>)
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	440b      	add	r3, r1
 8017eaa:	1ad3      	subs	r3, r2, r3
 8017eac:	3301      	adds	r3, #1
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	f300 8082 	bgt.w	8017fb8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8017eb4:	4b27      	ldr	r3, [pc, #156]	; (8017f54 <tcp_receive+0x5ec>)
 8017eb6:	685b      	ldr	r3, [r3, #4]
 8017eb8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017eba:	687b      	ldr	r3, [r7, #4]
 8017ebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017ebe:	4b24      	ldr	r3, [pc, #144]	; (8017f50 <tcp_receive+0x5e8>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	1ad3      	subs	r3, r2, r3
 8017ec4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8017ec6:	4b23      	ldr	r3, [pc, #140]	; (8017f54 <tcp_receive+0x5ec>)
 8017ec8:	685b      	ldr	r3, [r3, #4]
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d106      	bne.n	8017edc <tcp_receive+0x574>
 8017ece:	4b22      	ldr	r3, [pc, #136]	; (8017f58 <tcp_receive+0x5f0>)
 8017ed0:	f240 5294 	movw	r2, #1428	; 0x594
 8017ed4:	4921      	ldr	r1, [pc, #132]	; (8017f5c <tcp_receive+0x5f4>)
 8017ed6:	4822      	ldr	r0, [pc, #136]	; (8017f60 <tcp_receive+0x5f8>)
 8017ed8:	f009 fa6e 	bl	80213b8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ede:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8017ee2:	4293      	cmp	r3, r2
 8017ee4:	d906      	bls.n	8017ef4 <tcp_receive+0x58c>
 8017ee6:	4b1c      	ldr	r3, [pc, #112]	; (8017f58 <tcp_receive+0x5f0>)
 8017ee8:	f240 5295 	movw	r2, #1429	; 0x595
 8017eec:	491d      	ldr	r1, [pc, #116]	; (8017f64 <tcp_receive+0x5fc>)
 8017eee:	481c      	ldr	r0, [pc, #112]	; (8017f60 <tcp_receive+0x5f8>)
 8017ef0:	f009 fa62 	bl	80213b8 <iprintf>
      off = (u16_t)off32;
 8017ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017efa:	4b16      	ldr	r3, [pc, #88]	; (8017f54 <tcp_receive+0x5ec>)
 8017efc:	685b      	ldr	r3, [r3, #4]
 8017efe:	891b      	ldrh	r3, [r3, #8]
 8017f00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017f04:	429a      	cmp	r2, r3
 8017f06:	d906      	bls.n	8017f16 <tcp_receive+0x5ae>
 8017f08:	4b13      	ldr	r3, [pc, #76]	; (8017f58 <tcp_receive+0x5f0>)
 8017f0a:	f240 5297 	movw	r2, #1431	; 0x597
 8017f0e:	4916      	ldr	r1, [pc, #88]	; (8017f68 <tcp_receive+0x600>)
 8017f10:	4813      	ldr	r0, [pc, #76]	; (8017f60 <tcp_receive+0x5f8>)
 8017f12:	f009 fa51 	bl	80213b8 <iprintf>
      inseg.len -= off;
 8017f16:	4b0f      	ldr	r3, [pc, #60]	; (8017f54 <tcp_receive+0x5ec>)
 8017f18:	891a      	ldrh	r2, [r3, #8]
 8017f1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f1e:	1ad3      	subs	r3, r2, r3
 8017f20:	b29a      	uxth	r2, r3
 8017f22:	4b0c      	ldr	r3, [pc, #48]	; (8017f54 <tcp_receive+0x5ec>)
 8017f24:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8017f26:	4b0b      	ldr	r3, [pc, #44]	; (8017f54 <tcp_receive+0x5ec>)
 8017f28:	685b      	ldr	r3, [r3, #4]
 8017f2a:	891a      	ldrh	r2, [r3, #8]
 8017f2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f30:	1ad3      	subs	r3, r2, r3
 8017f32:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8017f34:	e02a      	b.n	8017f8c <tcp_receive+0x624>
 8017f36:	bf00      	nop
 8017f38:	0802562c 	.word	0x0802562c
 8017f3c:	08025634 	.word	0x08025634
 8017f40:	20012310 	.word	0x20012310
 8017f44:	2001230c 	.word	0x2001230c
 8017f48:	200122d0 	.word	0x200122d0
 8017f4c:	20012312 	.word	0x20012312
 8017f50:	20012308 	.word	0x20012308
 8017f54:	200122e8 	.word	0x200122e8
 8017f58:	080252c4 	.word	0x080252c4
 8017f5c:	0802563c 	.word	0x0802563c
 8017f60:	08025310 	.word	0x08025310
 8017f64:	0802564c 	.word	0x0802564c
 8017f68:	0802565c 	.word	0x0802565c
        off -= p->len;
 8017f6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f6e:	895b      	ldrh	r3, [r3, #10]
 8017f70:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017f74:	1ad3      	subs	r3, r2, r3
 8017f76:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8017f7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f7c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017f7e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8017f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f82:	2200      	movs	r2, #0
 8017f84:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8017f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8017f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f8e:	895b      	ldrh	r3, [r3, #10]
 8017f90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017f94:	429a      	cmp	r2, r3
 8017f96:	d8e9      	bhi.n	8017f6c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017f98:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017fa0:	f7fc f840 	bl	8014024 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fa8:	4a91      	ldr	r2, [pc, #580]	; (80181f0 <tcp_receive+0x888>)
 8017faa:	6013      	str	r3, [r2, #0]
 8017fac:	4b91      	ldr	r3, [pc, #580]	; (80181f4 <tcp_receive+0x88c>)
 8017fae:	68db      	ldr	r3, [r3, #12]
 8017fb0:	4a8f      	ldr	r2, [pc, #572]	; (80181f0 <tcp_receive+0x888>)
 8017fb2:	6812      	ldr	r2, [r2, #0]
 8017fb4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8017fb6:	e00d      	b.n	8017fd4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017fb8:	4b8d      	ldr	r3, [pc, #564]	; (80181f0 <tcp_receive+0x888>)
 8017fba:	681a      	ldr	r2, [r3, #0]
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fc0:	1ad3      	subs	r3, r2, r3
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	da06      	bge.n	8017fd4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	8b5b      	ldrh	r3, [r3, #26]
 8017fca:	f043 0302 	orr.w	r3, r3, #2
 8017fce:	b29a      	uxth	r2, r3
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017fd4:	4b86      	ldr	r3, [pc, #536]	; (80181f0 <tcp_receive+0x888>)
 8017fd6:	681a      	ldr	r2, [r3, #0]
 8017fd8:	687b      	ldr	r3, [r7, #4]
 8017fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fdc:	1ad3      	subs	r3, r2, r3
 8017fde:	2b00      	cmp	r3, #0
 8017fe0:	f2c0 842a 	blt.w	8018838 <tcp_receive+0xed0>
 8017fe4:	4b82      	ldr	r3, [pc, #520]	; (80181f0 <tcp_receive+0x888>)
 8017fe6:	681a      	ldr	r2, [r3, #0]
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fec:	6879      	ldr	r1, [r7, #4]
 8017fee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017ff0:	440b      	add	r3, r1
 8017ff2:	1ad3      	subs	r3, r2, r3
 8017ff4:	3301      	adds	r3, #1
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	f300 841e 	bgt.w	8018838 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018000:	4b7b      	ldr	r3, [pc, #492]	; (80181f0 <tcp_receive+0x888>)
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	429a      	cmp	r2, r3
 8018006:	f040 829a 	bne.w	801853e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801800a:	4b7a      	ldr	r3, [pc, #488]	; (80181f4 <tcp_receive+0x88c>)
 801800c:	891c      	ldrh	r4, [r3, #8]
 801800e:	4b79      	ldr	r3, [pc, #484]	; (80181f4 <tcp_receive+0x88c>)
 8018010:	68db      	ldr	r3, [r3, #12]
 8018012:	899b      	ldrh	r3, [r3, #12]
 8018014:	b29b      	uxth	r3, r3
 8018016:	4618      	mov	r0, r3
 8018018:	f7fa fc8c 	bl	8012934 <lwip_htons>
 801801c:	4603      	mov	r3, r0
 801801e:	b2db      	uxtb	r3, r3
 8018020:	f003 0303 	and.w	r3, r3, #3
 8018024:	2b00      	cmp	r3, #0
 8018026:	d001      	beq.n	801802c <tcp_receive+0x6c4>
 8018028:	2301      	movs	r3, #1
 801802a:	e000      	b.n	801802e <tcp_receive+0x6c6>
 801802c:	2300      	movs	r3, #0
 801802e:	4423      	add	r3, r4
 8018030:	b29a      	uxth	r2, r3
 8018032:	4b71      	ldr	r3, [pc, #452]	; (80181f8 <tcp_receive+0x890>)
 8018034:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8018036:	687b      	ldr	r3, [r7, #4]
 8018038:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801803a:	4b6f      	ldr	r3, [pc, #444]	; (80181f8 <tcp_receive+0x890>)
 801803c:	881b      	ldrh	r3, [r3, #0]
 801803e:	429a      	cmp	r2, r3
 8018040:	d275      	bcs.n	801812e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018042:	4b6c      	ldr	r3, [pc, #432]	; (80181f4 <tcp_receive+0x88c>)
 8018044:	68db      	ldr	r3, [r3, #12]
 8018046:	899b      	ldrh	r3, [r3, #12]
 8018048:	b29b      	uxth	r3, r3
 801804a:	4618      	mov	r0, r3
 801804c:	f7fa fc72 	bl	8012934 <lwip_htons>
 8018050:	4603      	mov	r3, r0
 8018052:	b2db      	uxtb	r3, r3
 8018054:	f003 0301 	and.w	r3, r3, #1
 8018058:	2b00      	cmp	r3, #0
 801805a:	d01f      	beq.n	801809c <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801805c:	4b65      	ldr	r3, [pc, #404]	; (80181f4 <tcp_receive+0x88c>)
 801805e:	68db      	ldr	r3, [r3, #12]
 8018060:	899b      	ldrh	r3, [r3, #12]
 8018062:	b29b      	uxth	r3, r3
 8018064:	b21b      	sxth	r3, r3
 8018066:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801806a:	b21c      	sxth	r4, r3
 801806c:	4b61      	ldr	r3, [pc, #388]	; (80181f4 <tcp_receive+0x88c>)
 801806e:	68db      	ldr	r3, [r3, #12]
 8018070:	899b      	ldrh	r3, [r3, #12]
 8018072:	b29b      	uxth	r3, r3
 8018074:	4618      	mov	r0, r3
 8018076:	f7fa fc5d 	bl	8012934 <lwip_htons>
 801807a:	4603      	mov	r3, r0
 801807c:	b2db      	uxtb	r3, r3
 801807e:	b29b      	uxth	r3, r3
 8018080:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018084:	b29b      	uxth	r3, r3
 8018086:	4618      	mov	r0, r3
 8018088:	f7fa fc54 	bl	8012934 <lwip_htons>
 801808c:	4603      	mov	r3, r0
 801808e:	b21b      	sxth	r3, r3
 8018090:	4323      	orrs	r3, r4
 8018092:	b21a      	sxth	r2, r3
 8018094:	4b57      	ldr	r3, [pc, #348]	; (80181f4 <tcp_receive+0x88c>)
 8018096:	68db      	ldr	r3, [r3, #12]
 8018098:	b292      	uxth	r2, r2
 801809a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80180a0:	4b54      	ldr	r3, [pc, #336]	; (80181f4 <tcp_receive+0x88c>)
 80180a2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80180a4:	4b53      	ldr	r3, [pc, #332]	; (80181f4 <tcp_receive+0x88c>)
 80180a6:	68db      	ldr	r3, [r3, #12]
 80180a8:	899b      	ldrh	r3, [r3, #12]
 80180aa:	b29b      	uxth	r3, r3
 80180ac:	4618      	mov	r0, r3
 80180ae:	f7fa fc41 	bl	8012934 <lwip_htons>
 80180b2:	4603      	mov	r3, r0
 80180b4:	b2db      	uxtb	r3, r3
 80180b6:	f003 0302 	and.w	r3, r3, #2
 80180ba:	2b00      	cmp	r3, #0
 80180bc:	d005      	beq.n	80180ca <tcp_receive+0x762>
            inseg.len -= 1;
 80180be:	4b4d      	ldr	r3, [pc, #308]	; (80181f4 <tcp_receive+0x88c>)
 80180c0:	891b      	ldrh	r3, [r3, #8]
 80180c2:	3b01      	subs	r3, #1
 80180c4:	b29a      	uxth	r2, r3
 80180c6:	4b4b      	ldr	r3, [pc, #300]	; (80181f4 <tcp_receive+0x88c>)
 80180c8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80180ca:	4b4a      	ldr	r3, [pc, #296]	; (80181f4 <tcp_receive+0x88c>)
 80180cc:	685b      	ldr	r3, [r3, #4]
 80180ce:	4a49      	ldr	r2, [pc, #292]	; (80181f4 <tcp_receive+0x88c>)
 80180d0:	8912      	ldrh	r2, [r2, #8]
 80180d2:	4611      	mov	r1, r2
 80180d4:	4618      	mov	r0, r3
 80180d6:	f7fb fea5 	bl	8013e24 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80180da:	4b46      	ldr	r3, [pc, #280]	; (80181f4 <tcp_receive+0x88c>)
 80180dc:	891c      	ldrh	r4, [r3, #8]
 80180de:	4b45      	ldr	r3, [pc, #276]	; (80181f4 <tcp_receive+0x88c>)
 80180e0:	68db      	ldr	r3, [r3, #12]
 80180e2:	899b      	ldrh	r3, [r3, #12]
 80180e4:	b29b      	uxth	r3, r3
 80180e6:	4618      	mov	r0, r3
 80180e8:	f7fa fc24 	bl	8012934 <lwip_htons>
 80180ec:	4603      	mov	r3, r0
 80180ee:	b2db      	uxtb	r3, r3
 80180f0:	f003 0303 	and.w	r3, r3, #3
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d001      	beq.n	80180fc <tcp_receive+0x794>
 80180f8:	2301      	movs	r3, #1
 80180fa:	e000      	b.n	80180fe <tcp_receive+0x796>
 80180fc:	2300      	movs	r3, #0
 80180fe:	4423      	add	r3, r4
 8018100:	b29a      	uxth	r2, r3
 8018102:	4b3d      	ldr	r3, [pc, #244]	; (80181f8 <tcp_receive+0x890>)
 8018104:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018106:	4b3c      	ldr	r3, [pc, #240]	; (80181f8 <tcp_receive+0x890>)
 8018108:	881b      	ldrh	r3, [r3, #0]
 801810a:	461a      	mov	r2, r3
 801810c:	4b38      	ldr	r3, [pc, #224]	; (80181f0 <tcp_receive+0x888>)
 801810e:	681b      	ldr	r3, [r3, #0]
 8018110:	441a      	add	r2, r3
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018116:	6879      	ldr	r1, [r7, #4]
 8018118:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801811a:	440b      	add	r3, r1
 801811c:	429a      	cmp	r2, r3
 801811e:	d006      	beq.n	801812e <tcp_receive+0x7c6>
 8018120:	4b36      	ldr	r3, [pc, #216]	; (80181fc <tcp_receive+0x894>)
 8018122:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8018126:	4936      	ldr	r1, [pc, #216]	; (8018200 <tcp_receive+0x898>)
 8018128:	4836      	ldr	r0, [pc, #216]	; (8018204 <tcp_receive+0x89c>)
 801812a:	f009 f945 	bl	80213b8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801812e:	687b      	ldr	r3, [r7, #4]
 8018130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018132:	2b00      	cmp	r3, #0
 8018134:	f000 80e7 	beq.w	8018306 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8018138:	4b2e      	ldr	r3, [pc, #184]	; (80181f4 <tcp_receive+0x88c>)
 801813a:	68db      	ldr	r3, [r3, #12]
 801813c:	899b      	ldrh	r3, [r3, #12]
 801813e:	b29b      	uxth	r3, r3
 8018140:	4618      	mov	r0, r3
 8018142:	f7fa fbf7 	bl	8012934 <lwip_htons>
 8018146:	4603      	mov	r3, r0
 8018148:	b2db      	uxtb	r3, r3
 801814a:	f003 0301 	and.w	r3, r3, #1
 801814e:	2b00      	cmp	r3, #0
 8018150:	d010      	beq.n	8018174 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8018152:	e00a      	b.n	801816a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018158:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801815a:	687b      	ldr	r3, [r7, #4]
 801815c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801815e:	681a      	ldr	r2, [r3, #0]
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8018164:	68f8      	ldr	r0, [r7, #12]
 8018166:	f7fd fcac 	bl	8015ac2 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801816a:	687b      	ldr	r3, [r7, #4]
 801816c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801816e:	2b00      	cmp	r3, #0
 8018170:	d1f0      	bne.n	8018154 <tcp_receive+0x7ec>
 8018172:	e0c8      	b.n	8018306 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8018174:	687b      	ldr	r3, [r7, #4]
 8018176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018178:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801817a:	e052      	b.n	8018222 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801817c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801817e:	68db      	ldr	r3, [r3, #12]
 8018180:	899b      	ldrh	r3, [r3, #12]
 8018182:	b29b      	uxth	r3, r3
 8018184:	4618      	mov	r0, r3
 8018186:	f7fa fbd5 	bl	8012934 <lwip_htons>
 801818a:	4603      	mov	r3, r0
 801818c:	b2db      	uxtb	r3, r3
 801818e:	f003 0301 	and.w	r3, r3, #1
 8018192:	2b00      	cmp	r3, #0
 8018194:	d03d      	beq.n	8018212 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018196:	4b17      	ldr	r3, [pc, #92]	; (80181f4 <tcp_receive+0x88c>)
 8018198:	68db      	ldr	r3, [r3, #12]
 801819a:	899b      	ldrh	r3, [r3, #12]
 801819c:	b29b      	uxth	r3, r3
 801819e:	4618      	mov	r0, r3
 80181a0:	f7fa fbc8 	bl	8012934 <lwip_htons>
 80181a4:	4603      	mov	r3, r0
 80181a6:	b2db      	uxtb	r3, r3
 80181a8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d130      	bne.n	8018212 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80181b0:	4b10      	ldr	r3, [pc, #64]	; (80181f4 <tcp_receive+0x88c>)
 80181b2:	68db      	ldr	r3, [r3, #12]
 80181b4:	899b      	ldrh	r3, [r3, #12]
 80181b6:	b29c      	uxth	r4, r3
 80181b8:	2001      	movs	r0, #1
 80181ba:	f7fa fbbb 	bl	8012934 <lwip_htons>
 80181be:	4603      	mov	r3, r0
 80181c0:	461a      	mov	r2, r3
 80181c2:	4b0c      	ldr	r3, [pc, #48]	; (80181f4 <tcp_receive+0x88c>)
 80181c4:	68db      	ldr	r3, [r3, #12]
 80181c6:	4322      	orrs	r2, r4
 80181c8:	b292      	uxth	r2, r2
 80181ca:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80181cc:	4b09      	ldr	r3, [pc, #36]	; (80181f4 <tcp_receive+0x88c>)
 80181ce:	891c      	ldrh	r4, [r3, #8]
 80181d0:	4b08      	ldr	r3, [pc, #32]	; (80181f4 <tcp_receive+0x88c>)
 80181d2:	68db      	ldr	r3, [r3, #12]
 80181d4:	899b      	ldrh	r3, [r3, #12]
 80181d6:	b29b      	uxth	r3, r3
 80181d8:	4618      	mov	r0, r3
 80181da:	f7fa fbab 	bl	8012934 <lwip_htons>
 80181de:	4603      	mov	r3, r0
 80181e0:	b2db      	uxtb	r3, r3
 80181e2:	f003 0303 	and.w	r3, r3, #3
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d00e      	beq.n	8018208 <tcp_receive+0x8a0>
 80181ea:	2301      	movs	r3, #1
 80181ec:	e00d      	b.n	801820a <tcp_receive+0x8a2>
 80181ee:	bf00      	nop
 80181f0:	20012308 	.word	0x20012308
 80181f4:	200122e8 	.word	0x200122e8
 80181f8:	20012312 	.word	0x20012312
 80181fc:	080252c4 	.word	0x080252c4
 8018200:	0802566c 	.word	0x0802566c
 8018204:	08025310 	.word	0x08025310
 8018208:	2300      	movs	r3, #0
 801820a:	4423      	add	r3, r4
 801820c:	b29a      	uxth	r2, r3
 801820e:	4b98      	ldr	r3, [pc, #608]	; (8018470 <tcp_receive+0xb08>)
 8018210:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8018212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018214:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801821c:	6938      	ldr	r0, [r7, #16]
 801821e:	f7fd fc50 	bl	8015ac2 <tcp_seg_free>
            while (next &&
 8018222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018224:	2b00      	cmp	r3, #0
 8018226:	d00e      	beq.n	8018246 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018228:	4b91      	ldr	r3, [pc, #580]	; (8018470 <tcp_receive+0xb08>)
 801822a:	881b      	ldrh	r3, [r3, #0]
 801822c:	461a      	mov	r2, r3
 801822e:	4b91      	ldr	r3, [pc, #580]	; (8018474 <tcp_receive+0xb0c>)
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	441a      	add	r2, r3
 8018234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018236:	68db      	ldr	r3, [r3, #12]
 8018238:	685b      	ldr	r3, [r3, #4]
 801823a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801823c:	8909      	ldrh	r1, [r1, #8]
 801823e:	440b      	add	r3, r1
 8018240:	1ad3      	subs	r3, r2, r3
            while (next &&
 8018242:	2b00      	cmp	r3, #0
 8018244:	da9a      	bge.n	801817c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8018246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018248:	2b00      	cmp	r3, #0
 801824a:	d059      	beq.n	8018300 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801824c:	4b88      	ldr	r3, [pc, #544]	; (8018470 <tcp_receive+0xb08>)
 801824e:	881b      	ldrh	r3, [r3, #0]
 8018250:	461a      	mov	r2, r3
 8018252:	4b88      	ldr	r3, [pc, #544]	; (8018474 <tcp_receive+0xb0c>)
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	441a      	add	r2, r3
 8018258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801825a:	68db      	ldr	r3, [r3, #12]
 801825c:	685b      	ldr	r3, [r3, #4]
 801825e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8018260:	2b00      	cmp	r3, #0
 8018262:	dd4d      	ble.n	8018300 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8018264:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018266:	68db      	ldr	r3, [r3, #12]
 8018268:	685b      	ldr	r3, [r3, #4]
 801826a:	b29a      	uxth	r2, r3
 801826c:	4b81      	ldr	r3, [pc, #516]	; (8018474 <tcp_receive+0xb0c>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	b29b      	uxth	r3, r3
 8018272:	1ad3      	subs	r3, r2, r3
 8018274:	b29a      	uxth	r2, r3
 8018276:	4b80      	ldr	r3, [pc, #512]	; (8018478 <tcp_receive+0xb10>)
 8018278:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801827a:	4b7f      	ldr	r3, [pc, #508]	; (8018478 <tcp_receive+0xb10>)
 801827c:	68db      	ldr	r3, [r3, #12]
 801827e:	899b      	ldrh	r3, [r3, #12]
 8018280:	b29b      	uxth	r3, r3
 8018282:	4618      	mov	r0, r3
 8018284:	f7fa fb56 	bl	8012934 <lwip_htons>
 8018288:	4603      	mov	r3, r0
 801828a:	b2db      	uxtb	r3, r3
 801828c:	f003 0302 	and.w	r3, r3, #2
 8018290:	2b00      	cmp	r3, #0
 8018292:	d005      	beq.n	80182a0 <tcp_receive+0x938>
                inseg.len -= 1;
 8018294:	4b78      	ldr	r3, [pc, #480]	; (8018478 <tcp_receive+0xb10>)
 8018296:	891b      	ldrh	r3, [r3, #8]
 8018298:	3b01      	subs	r3, #1
 801829a:	b29a      	uxth	r2, r3
 801829c:	4b76      	ldr	r3, [pc, #472]	; (8018478 <tcp_receive+0xb10>)
 801829e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80182a0:	4b75      	ldr	r3, [pc, #468]	; (8018478 <tcp_receive+0xb10>)
 80182a2:	685b      	ldr	r3, [r3, #4]
 80182a4:	4a74      	ldr	r2, [pc, #464]	; (8018478 <tcp_receive+0xb10>)
 80182a6:	8912      	ldrh	r2, [r2, #8]
 80182a8:	4611      	mov	r1, r2
 80182aa:	4618      	mov	r0, r3
 80182ac:	f7fb fdba 	bl	8013e24 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80182b0:	4b71      	ldr	r3, [pc, #452]	; (8018478 <tcp_receive+0xb10>)
 80182b2:	891c      	ldrh	r4, [r3, #8]
 80182b4:	4b70      	ldr	r3, [pc, #448]	; (8018478 <tcp_receive+0xb10>)
 80182b6:	68db      	ldr	r3, [r3, #12]
 80182b8:	899b      	ldrh	r3, [r3, #12]
 80182ba:	b29b      	uxth	r3, r3
 80182bc:	4618      	mov	r0, r3
 80182be:	f7fa fb39 	bl	8012934 <lwip_htons>
 80182c2:	4603      	mov	r3, r0
 80182c4:	b2db      	uxtb	r3, r3
 80182c6:	f003 0303 	and.w	r3, r3, #3
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	d001      	beq.n	80182d2 <tcp_receive+0x96a>
 80182ce:	2301      	movs	r3, #1
 80182d0:	e000      	b.n	80182d4 <tcp_receive+0x96c>
 80182d2:	2300      	movs	r3, #0
 80182d4:	4423      	add	r3, r4
 80182d6:	b29a      	uxth	r2, r3
 80182d8:	4b65      	ldr	r3, [pc, #404]	; (8018470 <tcp_receive+0xb08>)
 80182da:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80182dc:	4b64      	ldr	r3, [pc, #400]	; (8018470 <tcp_receive+0xb08>)
 80182de:	881b      	ldrh	r3, [r3, #0]
 80182e0:	461a      	mov	r2, r3
 80182e2:	4b64      	ldr	r3, [pc, #400]	; (8018474 <tcp_receive+0xb0c>)
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	441a      	add	r2, r3
 80182e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80182ea:	68db      	ldr	r3, [r3, #12]
 80182ec:	685b      	ldr	r3, [r3, #4]
 80182ee:	429a      	cmp	r2, r3
 80182f0:	d006      	beq.n	8018300 <tcp_receive+0x998>
 80182f2:	4b62      	ldr	r3, [pc, #392]	; (801847c <tcp_receive+0xb14>)
 80182f4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80182f8:	4961      	ldr	r1, [pc, #388]	; (8018480 <tcp_receive+0xb18>)
 80182fa:	4862      	ldr	r0, [pc, #392]	; (8018484 <tcp_receive+0xb1c>)
 80182fc:	f009 f85c 	bl	80213b8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018304:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018306:	4b5a      	ldr	r3, [pc, #360]	; (8018470 <tcp_receive+0xb08>)
 8018308:	881b      	ldrh	r3, [r3, #0]
 801830a:	461a      	mov	r2, r3
 801830c:	4b59      	ldr	r3, [pc, #356]	; (8018474 <tcp_receive+0xb0c>)
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	441a      	add	r2, r3
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801831a:	4b55      	ldr	r3, [pc, #340]	; (8018470 <tcp_receive+0xb08>)
 801831c:	881b      	ldrh	r3, [r3, #0]
 801831e:	429a      	cmp	r2, r3
 8018320:	d206      	bcs.n	8018330 <tcp_receive+0x9c8>
 8018322:	4b56      	ldr	r3, [pc, #344]	; (801847c <tcp_receive+0xb14>)
 8018324:	f240 6207 	movw	r2, #1543	; 0x607
 8018328:	4957      	ldr	r1, [pc, #348]	; (8018488 <tcp_receive+0xb20>)
 801832a:	4856      	ldr	r0, [pc, #344]	; (8018484 <tcp_receive+0xb1c>)
 801832c:	f009 f844 	bl	80213b8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8018330:	687b      	ldr	r3, [r7, #4]
 8018332:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018334:	4b4e      	ldr	r3, [pc, #312]	; (8018470 <tcp_receive+0xb08>)
 8018336:	881b      	ldrh	r3, [r3, #0]
 8018338:	1ad3      	subs	r3, r2, r3
 801833a:	b29a      	uxth	r2, r3
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8018340:	6878      	ldr	r0, [r7, #4]
 8018342:	f7fc fe97 	bl	8015074 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8018346:	4b4c      	ldr	r3, [pc, #304]	; (8018478 <tcp_receive+0xb10>)
 8018348:	685b      	ldr	r3, [r3, #4]
 801834a:	891b      	ldrh	r3, [r3, #8]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d006      	beq.n	801835e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8018350:	4b49      	ldr	r3, [pc, #292]	; (8018478 <tcp_receive+0xb10>)
 8018352:	685b      	ldr	r3, [r3, #4]
 8018354:	4a4d      	ldr	r2, [pc, #308]	; (801848c <tcp_receive+0xb24>)
 8018356:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8018358:	4b47      	ldr	r3, [pc, #284]	; (8018478 <tcp_receive+0xb10>)
 801835a:	2200      	movs	r2, #0
 801835c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801835e:	4b46      	ldr	r3, [pc, #280]	; (8018478 <tcp_receive+0xb10>)
 8018360:	68db      	ldr	r3, [r3, #12]
 8018362:	899b      	ldrh	r3, [r3, #12]
 8018364:	b29b      	uxth	r3, r3
 8018366:	4618      	mov	r0, r3
 8018368:	f7fa fae4 	bl	8012934 <lwip_htons>
 801836c:	4603      	mov	r3, r0
 801836e:	b2db      	uxtb	r3, r3
 8018370:	f003 0301 	and.w	r3, r3, #1
 8018374:	2b00      	cmp	r3, #0
 8018376:	f000 80b8 	beq.w	80184ea <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801837a:	4b45      	ldr	r3, [pc, #276]	; (8018490 <tcp_receive+0xb28>)
 801837c:	781b      	ldrb	r3, [r3, #0]
 801837e:	f043 0320 	orr.w	r3, r3, #32
 8018382:	b2da      	uxtb	r2, r3
 8018384:	4b42      	ldr	r3, [pc, #264]	; (8018490 <tcp_receive+0xb28>)
 8018386:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8018388:	e0af      	b.n	80184ea <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801838e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018394:	68db      	ldr	r3, [r3, #12]
 8018396:	685b      	ldr	r3, [r3, #4]
 8018398:	4a36      	ldr	r2, [pc, #216]	; (8018474 <tcp_receive+0xb0c>)
 801839a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801839c:	68bb      	ldr	r3, [r7, #8]
 801839e:	891b      	ldrh	r3, [r3, #8]
 80183a0:	461c      	mov	r4, r3
 80183a2:	68bb      	ldr	r3, [r7, #8]
 80183a4:	68db      	ldr	r3, [r3, #12]
 80183a6:	899b      	ldrh	r3, [r3, #12]
 80183a8:	b29b      	uxth	r3, r3
 80183aa:	4618      	mov	r0, r3
 80183ac:	f7fa fac2 	bl	8012934 <lwip_htons>
 80183b0:	4603      	mov	r3, r0
 80183b2:	b2db      	uxtb	r3, r3
 80183b4:	f003 0303 	and.w	r3, r3, #3
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d001      	beq.n	80183c0 <tcp_receive+0xa58>
 80183bc:	2301      	movs	r3, #1
 80183be:	e000      	b.n	80183c2 <tcp_receive+0xa5a>
 80183c0:	2300      	movs	r3, #0
 80183c2:	191a      	adds	r2, r3, r4
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80183c8:	441a      	add	r2, r3
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80183ce:	687b      	ldr	r3, [r7, #4]
 80183d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80183d2:	461c      	mov	r4, r3
 80183d4:	68bb      	ldr	r3, [r7, #8]
 80183d6:	891b      	ldrh	r3, [r3, #8]
 80183d8:	461d      	mov	r5, r3
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	68db      	ldr	r3, [r3, #12]
 80183de:	899b      	ldrh	r3, [r3, #12]
 80183e0:	b29b      	uxth	r3, r3
 80183e2:	4618      	mov	r0, r3
 80183e4:	f7fa faa6 	bl	8012934 <lwip_htons>
 80183e8:	4603      	mov	r3, r0
 80183ea:	b2db      	uxtb	r3, r3
 80183ec:	f003 0303 	and.w	r3, r3, #3
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d001      	beq.n	80183f8 <tcp_receive+0xa90>
 80183f4:	2301      	movs	r3, #1
 80183f6:	e000      	b.n	80183fa <tcp_receive+0xa92>
 80183f8:	2300      	movs	r3, #0
 80183fa:	442b      	add	r3, r5
 80183fc:	429c      	cmp	r4, r3
 80183fe:	d206      	bcs.n	801840e <tcp_receive+0xaa6>
 8018400:	4b1e      	ldr	r3, [pc, #120]	; (801847c <tcp_receive+0xb14>)
 8018402:	f240 622b 	movw	r2, #1579	; 0x62b
 8018406:	4923      	ldr	r1, [pc, #140]	; (8018494 <tcp_receive+0xb2c>)
 8018408:	481e      	ldr	r0, [pc, #120]	; (8018484 <tcp_receive+0xb1c>)
 801840a:	f008 ffd5 	bl	80213b8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801840e:	68bb      	ldr	r3, [r7, #8]
 8018410:	891b      	ldrh	r3, [r3, #8]
 8018412:	461c      	mov	r4, r3
 8018414:	68bb      	ldr	r3, [r7, #8]
 8018416:	68db      	ldr	r3, [r3, #12]
 8018418:	899b      	ldrh	r3, [r3, #12]
 801841a:	b29b      	uxth	r3, r3
 801841c:	4618      	mov	r0, r3
 801841e:	f7fa fa89 	bl	8012934 <lwip_htons>
 8018422:	4603      	mov	r3, r0
 8018424:	b2db      	uxtb	r3, r3
 8018426:	f003 0303 	and.w	r3, r3, #3
 801842a:	2b00      	cmp	r3, #0
 801842c:	d001      	beq.n	8018432 <tcp_receive+0xaca>
 801842e:	2301      	movs	r3, #1
 8018430:	e000      	b.n	8018434 <tcp_receive+0xacc>
 8018432:	2300      	movs	r3, #0
 8018434:	1919      	adds	r1, r3, r4
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801843a:	b28b      	uxth	r3, r1
 801843c:	1ad3      	subs	r3, r2, r3
 801843e:	b29a      	uxth	r2, r3
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8018444:	6878      	ldr	r0, [r7, #4]
 8018446:	f7fc fe15 	bl	8015074 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801844a:	68bb      	ldr	r3, [r7, #8]
 801844c:	685b      	ldr	r3, [r3, #4]
 801844e:	891b      	ldrh	r3, [r3, #8]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d028      	beq.n	80184a6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8018454:	4b0d      	ldr	r3, [pc, #52]	; (801848c <tcp_receive+0xb24>)
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d01d      	beq.n	8018498 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801845c:	4b0b      	ldr	r3, [pc, #44]	; (801848c <tcp_receive+0xb24>)
 801845e:	681a      	ldr	r2, [r3, #0]
 8018460:	68bb      	ldr	r3, [r7, #8]
 8018462:	685b      	ldr	r3, [r3, #4]
 8018464:	4619      	mov	r1, r3
 8018466:	4610      	mov	r0, r2
 8018468:	f7fb ff30 	bl	80142cc <pbuf_cat>
 801846c:	e018      	b.n	80184a0 <tcp_receive+0xb38>
 801846e:	bf00      	nop
 8018470:	20012312 	.word	0x20012312
 8018474:	20012308 	.word	0x20012308
 8018478:	200122e8 	.word	0x200122e8
 801847c:	080252c4 	.word	0x080252c4
 8018480:	080256a4 	.word	0x080256a4
 8018484:	08025310 	.word	0x08025310
 8018488:	080256e0 	.word	0x080256e0
 801848c:	20012318 	.word	0x20012318
 8018490:	20012315 	.word	0x20012315
 8018494:	08025700 	.word	0x08025700
            } else {
              recv_data = cseg->p;
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	685b      	ldr	r3, [r3, #4]
 801849c:	4a70      	ldr	r2, [pc, #448]	; (8018660 <tcp_receive+0xcf8>)
 801849e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80184a0:	68bb      	ldr	r3, [r7, #8]
 80184a2:	2200      	movs	r2, #0
 80184a4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80184a6:	68bb      	ldr	r3, [r7, #8]
 80184a8:	68db      	ldr	r3, [r3, #12]
 80184aa:	899b      	ldrh	r3, [r3, #12]
 80184ac:	b29b      	uxth	r3, r3
 80184ae:	4618      	mov	r0, r3
 80184b0:	f7fa fa40 	bl	8012934 <lwip_htons>
 80184b4:	4603      	mov	r3, r0
 80184b6:	b2db      	uxtb	r3, r3
 80184b8:	f003 0301 	and.w	r3, r3, #1
 80184bc:	2b00      	cmp	r3, #0
 80184be:	d00d      	beq.n	80184dc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80184c0:	4b68      	ldr	r3, [pc, #416]	; (8018664 <tcp_receive+0xcfc>)
 80184c2:	781b      	ldrb	r3, [r3, #0]
 80184c4:	f043 0320 	orr.w	r3, r3, #32
 80184c8:	b2da      	uxtb	r2, r3
 80184ca:	4b66      	ldr	r3, [pc, #408]	; (8018664 <tcp_receive+0xcfc>)
 80184cc:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80184ce:	687b      	ldr	r3, [r7, #4]
 80184d0:	7d1b      	ldrb	r3, [r3, #20]
 80184d2:	2b04      	cmp	r3, #4
 80184d4:	d102      	bne.n	80184dc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	2207      	movs	r2, #7
 80184da:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80184dc:	68bb      	ldr	r3, [r7, #8]
 80184de:	681a      	ldr	r2, [r3, #0]
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80184e4:	68b8      	ldr	r0, [r7, #8]
 80184e6:	f7fd faec 	bl	8015ac2 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d008      	beq.n	8018504 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80184f2:	687b      	ldr	r3, [r7, #4]
 80184f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80184f6:	68db      	ldr	r3, [r3, #12]
 80184f8:	685a      	ldr	r2, [r3, #4]
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80184fe:	429a      	cmp	r2, r3
 8018500:	f43f af43 	beq.w	801838a <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	8b5b      	ldrh	r3, [r3, #26]
 8018508:	f003 0301 	and.w	r3, r3, #1
 801850c:	2b00      	cmp	r3, #0
 801850e:	d00e      	beq.n	801852e <tcp_receive+0xbc6>
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	8b5b      	ldrh	r3, [r3, #26]
 8018514:	f023 0301 	bic.w	r3, r3, #1
 8018518:	b29a      	uxth	r2, r3
 801851a:	687b      	ldr	r3, [r7, #4]
 801851c:	835a      	strh	r2, [r3, #26]
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	8b5b      	ldrh	r3, [r3, #26]
 8018522:	f043 0302 	orr.w	r3, r3, #2
 8018526:	b29a      	uxth	r2, r3
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801852c:	e188      	b.n	8018840 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	8b5b      	ldrh	r3, [r3, #26]
 8018532:	f043 0301 	orr.w	r3, r3, #1
 8018536:	b29a      	uxth	r2, r3
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801853c:	e180      	b.n	8018840 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018542:	2b00      	cmp	r3, #0
 8018544:	d106      	bne.n	8018554 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8018546:	4848      	ldr	r0, [pc, #288]	; (8018668 <tcp_receive+0xd00>)
 8018548:	f7fd fad4 	bl	8015af4 <tcp_seg_copy>
 801854c:	4602      	mov	r2, r0
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	675a      	str	r2, [r3, #116]	; 0x74
 8018552:	e16d      	b.n	8018830 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8018554:	2300      	movs	r3, #0
 8018556:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801855c:	63bb      	str	r3, [r7, #56]	; 0x38
 801855e:	e157      	b.n	8018810 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8018560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018562:	68db      	ldr	r3, [r3, #12]
 8018564:	685a      	ldr	r2, [r3, #4]
 8018566:	4b41      	ldr	r3, [pc, #260]	; (801866c <tcp_receive+0xd04>)
 8018568:	681b      	ldr	r3, [r3, #0]
 801856a:	429a      	cmp	r2, r3
 801856c:	d11d      	bne.n	80185aa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801856e:	4b3e      	ldr	r3, [pc, #248]	; (8018668 <tcp_receive+0xd00>)
 8018570:	891a      	ldrh	r2, [r3, #8]
 8018572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018574:	891b      	ldrh	r3, [r3, #8]
 8018576:	429a      	cmp	r2, r3
 8018578:	f240 814f 	bls.w	801881a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801857c:	483a      	ldr	r0, [pc, #232]	; (8018668 <tcp_receive+0xd00>)
 801857e:	f7fd fab9 	bl	8015af4 <tcp_seg_copy>
 8018582:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8018584:	697b      	ldr	r3, [r7, #20]
 8018586:	2b00      	cmp	r3, #0
 8018588:	f000 8149 	beq.w	801881e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801858c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801858e:	2b00      	cmp	r3, #0
 8018590:	d003      	beq.n	801859a <tcp_receive+0xc32>
                    prev->next = cseg;
 8018592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018594:	697a      	ldr	r2, [r7, #20]
 8018596:	601a      	str	r2, [r3, #0]
 8018598:	e002      	b.n	80185a0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	697a      	ldr	r2, [r7, #20]
 801859e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80185a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80185a2:	6978      	ldr	r0, [r7, #20]
 80185a4:	f7ff f8dc 	bl	8017760 <tcp_oos_insert_segment>
                }
                break;
 80185a8:	e139      	b.n	801881e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80185aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185ac:	2b00      	cmp	r3, #0
 80185ae:	d117      	bne.n	80185e0 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80185b0:	4b2e      	ldr	r3, [pc, #184]	; (801866c <tcp_receive+0xd04>)
 80185b2:	681a      	ldr	r2, [r3, #0]
 80185b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185b6:	68db      	ldr	r3, [r3, #12]
 80185b8:	685b      	ldr	r3, [r3, #4]
 80185ba:	1ad3      	subs	r3, r2, r3
 80185bc:	2b00      	cmp	r3, #0
 80185be:	da57      	bge.n	8018670 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80185c0:	4829      	ldr	r0, [pc, #164]	; (8018668 <tcp_receive+0xd00>)
 80185c2:	f7fd fa97 	bl	8015af4 <tcp_seg_copy>
 80185c6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80185c8:	69bb      	ldr	r3, [r7, #24]
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	f000 8129 	beq.w	8018822 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	69ba      	ldr	r2, [r7, #24]
 80185d4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80185d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80185d8:	69b8      	ldr	r0, [r7, #24]
 80185da:	f7ff f8c1 	bl	8017760 <tcp_oos_insert_segment>
                  }
                  break;
 80185de:	e120      	b.n	8018822 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80185e0:	4b22      	ldr	r3, [pc, #136]	; (801866c <tcp_receive+0xd04>)
 80185e2:	681a      	ldr	r2, [r3, #0]
 80185e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80185e6:	68db      	ldr	r3, [r3, #12]
 80185e8:	685b      	ldr	r3, [r3, #4]
 80185ea:	1ad3      	subs	r3, r2, r3
 80185ec:	3b01      	subs	r3, #1
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	db3e      	blt.n	8018670 <tcp_receive+0xd08>
 80185f2:	4b1e      	ldr	r3, [pc, #120]	; (801866c <tcp_receive+0xd04>)
 80185f4:	681a      	ldr	r2, [r3, #0]
 80185f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185f8:	68db      	ldr	r3, [r3, #12]
 80185fa:	685b      	ldr	r3, [r3, #4]
 80185fc:	1ad3      	subs	r3, r2, r3
 80185fe:	3301      	adds	r3, #1
 8018600:	2b00      	cmp	r3, #0
 8018602:	dc35      	bgt.n	8018670 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018604:	4818      	ldr	r0, [pc, #96]	; (8018668 <tcp_receive+0xd00>)
 8018606:	f7fd fa75 	bl	8015af4 <tcp_seg_copy>
 801860a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801860c:	69fb      	ldr	r3, [r7, #28]
 801860e:	2b00      	cmp	r3, #0
 8018610:	f000 8109 	beq.w	8018826 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018616:	68db      	ldr	r3, [r3, #12]
 8018618:	685b      	ldr	r3, [r3, #4]
 801861a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801861c:	8912      	ldrh	r2, [r2, #8]
 801861e:	441a      	add	r2, r3
 8018620:	4b12      	ldr	r3, [pc, #72]	; (801866c <tcp_receive+0xd04>)
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	1ad3      	subs	r3, r2, r3
 8018626:	2b00      	cmp	r3, #0
 8018628:	dd12      	ble.n	8018650 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801862a:	4b10      	ldr	r3, [pc, #64]	; (801866c <tcp_receive+0xd04>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	b29a      	uxth	r2, r3
 8018630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018632:	68db      	ldr	r3, [r3, #12]
 8018634:	685b      	ldr	r3, [r3, #4]
 8018636:	b29b      	uxth	r3, r3
 8018638:	1ad3      	subs	r3, r2, r3
 801863a:	b29a      	uxth	r2, r3
 801863c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801863e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8018640:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018642:	685a      	ldr	r2, [r3, #4]
 8018644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018646:	891b      	ldrh	r3, [r3, #8]
 8018648:	4619      	mov	r1, r3
 801864a:	4610      	mov	r0, r2
 801864c:	f7fb fbea 	bl	8013e24 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8018650:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018652:	69fa      	ldr	r2, [r7, #28]
 8018654:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8018656:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018658:	69f8      	ldr	r0, [r7, #28]
 801865a:	f7ff f881 	bl	8017760 <tcp_oos_insert_segment>
                  }
                  break;
 801865e:	e0e2      	b.n	8018826 <tcp_receive+0xebe>
 8018660:	20012318 	.word	0x20012318
 8018664:	20012315 	.word	0x20012315
 8018668:	200122e8 	.word	0x200122e8
 801866c:	20012308 	.word	0x20012308
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8018670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018672:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8018674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	2b00      	cmp	r3, #0
 801867a:	f040 80c6 	bne.w	801880a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801867e:	4b80      	ldr	r3, [pc, #512]	; (8018880 <tcp_receive+0xf18>)
 8018680:	681a      	ldr	r2, [r3, #0]
 8018682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018684:	68db      	ldr	r3, [r3, #12]
 8018686:	685b      	ldr	r3, [r3, #4]
 8018688:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801868a:	2b00      	cmp	r3, #0
 801868c:	f340 80bd 	ble.w	801880a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8018690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018692:	68db      	ldr	r3, [r3, #12]
 8018694:	899b      	ldrh	r3, [r3, #12]
 8018696:	b29b      	uxth	r3, r3
 8018698:	4618      	mov	r0, r3
 801869a:	f7fa f94b 	bl	8012934 <lwip_htons>
 801869e:	4603      	mov	r3, r0
 80186a0:	b2db      	uxtb	r3, r3
 80186a2:	f003 0301 	and.w	r3, r3, #1
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	f040 80bf 	bne.w	801882a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80186ac:	4875      	ldr	r0, [pc, #468]	; (8018884 <tcp_receive+0xf1c>)
 80186ae:	f7fd fa21 	bl	8015af4 <tcp_seg_copy>
 80186b2:	4602      	mov	r2, r0
 80186b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186b6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80186b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	f000 80b6 	beq.w	801882e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80186c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186c4:	68db      	ldr	r3, [r3, #12]
 80186c6:	685b      	ldr	r3, [r3, #4]
 80186c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80186ca:	8912      	ldrh	r2, [r2, #8]
 80186cc:	441a      	add	r2, r3
 80186ce:	4b6c      	ldr	r3, [pc, #432]	; (8018880 <tcp_receive+0xf18>)
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	1ad3      	subs	r3, r2, r3
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	dd12      	ble.n	80186fe <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80186d8:	4b69      	ldr	r3, [pc, #420]	; (8018880 <tcp_receive+0xf18>)
 80186da:	681b      	ldr	r3, [r3, #0]
 80186dc:	b29a      	uxth	r2, r3
 80186de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186e0:	68db      	ldr	r3, [r3, #12]
 80186e2:	685b      	ldr	r3, [r3, #4]
 80186e4:	b29b      	uxth	r3, r3
 80186e6:	1ad3      	subs	r3, r2, r3
 80186e8:	b29a      	uxth	r2, r3
 80186ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186ec:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80186ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186f0:	685a      	ldr	r2, [r3, #4]
 80186f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80186f4:	891b      	ldrh	r3, [r3, #8]
 80186f6:	4619      	mov	r1, r3
 80186f8:	4610      	mov	r0, r2
 80186fa:	f7fb fb93 	bl	8013e24 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80186fe:	4b62      	ldr	r3, [pc, #392]	; (8018888 <tcp_receive+0xf20>)
 8018700:	881b      	ldrh	r3, [r3, #0]
 8018702:	461a      	mov	r2, r3
 8018704:	4b5e      	ldr	r3, [pc, #376]	; (8018880 <tcp_receive+0xf18>)
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	441a      	add	r2, r3
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801870e:	6879      	ldr	r1, [r7, #4]
 8018710:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018712:	440b      	add	r3, r1
 8018714:	1ad3      	subs	r3, r2, r3
 8018716:	2b00      	cmp	r3, #0
 8018718:	f340 8089 	ble.w	801882e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801871c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	68db      	ldr	r3, [r3, #12]
 8018722:	899b      	ldrh	r3, [r3, #12]
 8018724:	b29b      	uxth	r3, r3
 8018726:	4618      	mov	r0, r3
 8018728:	f7fa f904 	bl	8012934 <lwip_htons>
 801872c:	4603      	mov	r3, r0
 801872e:	b2db      	uxtb	r3, r3
 8018730:	f003 0301 	and.w	r3, r3, #1
 8018734:	2b00      	cmp	r3, #0
 8018736:	d022      	beq.n	801877e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8018738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	68db      	ldr	r3, [r3, #12]
 801873e:	899b      	ldrh	r3, [r3, #12]
 8018740:	b29b      	uxth	r3, r3
 8018742:	b21b      	sxth	r3, r3
 8018744:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018748:	b21c      	sxth	r4, r3
 801874a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	68db      	ldr	r3, [r3, #12]
 8018750:	899b      	ldrh	r3, [r3, #12]
 8018752:	b29b      	uxth	r3, r3
 8018754:	4618      	mov	r0, r3
 8018756:	f7fa f8ed 	bl	8012934 <lwip_htons>
 801875a:	4603      	mov	r3, r0
 801875c:	b2db      	uxtb	r3, r3
 801875e:	b29b      	uxth	r3, r3
 8018760:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8018764:	b29b      	uxth	r3, r3
 8018766:	4618      	mov	r0, r3
 8018768:	f7fa f8e4 	bl	8012934 <lwip_htons>
 801876c:	4603      	mov	r3, r0
 801876e:	b21b      	sxth	r3, r3
 8018770:	4323      	orrs	r3, r4
 8018772:	b21a      	sxth	r2, r3
 8018774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	68db      	ldr	r3, [r3, #12]
 801877a:	b292      	uxth	r2, r2
 801877c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801877e:	687b      	ldr	r3, [r7, #4]
 8018780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018782:	b29a      	uxth	r2, r3
 8018784:	687b      	ldr	r3, [r7, #4]
 8018786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018788:	4413      	add	r3, r2
 801878a:	b299      	uxth	r1, r3
 801878c:	4b3c      	ldr	r3, [pc, #240]	; (8018880 <tcp_receive+0xf18>)
 801878e:	681b      	ldr	r3, [r3, #0]
 8018790:	b29a      	uxth	r2, r3
 8018792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	1a8a      	subs	r2, r1, r2
 8018798:	b292      	uxth	r2, r2
 801879a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801879c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	685a      	ldr	r2, [r3, #4]
 80187a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187a4:	681b      	ldr	r3, [r3, #0]
 80187a6:	891b      	ldrh	r3, [r3, #8]
 80187a8:	4619      	mov	r1, r3
 80187aa:	4610      	mov	r0, r2
 80187ac:	f7fb fb3a 	bl	8013e24 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80187b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187b2:	681b      	ldr	r3, [r3, #0]
 80187b4:	891c      	ldrh	r4, [r3, #8]
 80187b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	68db      	ldr	r3, [r3, #12]
 80187bc:	899b      	ldrh	r3, [r3, #12]
 80187be:	b29b      	uxth	r3, r3
 80187c0:	4618      	mov	r0, r3
 80187c2:	f7fa f8b7 	bl	8012934 <lwip_htons>
 80187c6:	4603      	mov	r3, r0
 80187c8:	b2db      	uxtb	r3, r3
 80187ca:	f003 0303 	and.w	r3, r3, #3
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d001      	beq.n	80187d6 <tcp_receive+0xe6e>
 80187d2:	2301      	movs	r3, #1
 80187d4:	e000      	b.n	80187d8 <tcp_receive+0xe70>
 80187d6:	2300      	movs	r3, #0
 80187d8:	4423      	add	r3, r4
 80187da:	b29a      	uxth	r2, r3
 80187dc:	4b2a      	ldr	r3, [pc, #168]	; (8018888 <tcp_receive+0xf20>)
 80187de:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80187e0:	4b29      	ldr	r3, [pc, #164]	; (8018888 <tcp_receive+0xf20>)
 80187e2:	881b      	ldrh	r3, [r3, #0]
 80187e4:	461a      	mov	r2, r3
 80187e6:	4b26      	ldr	r3, [pc, #152]	; (8018880 <tcp_receive+0xf18>)
 80187e8:	681b      	ldr	r3, [r3, #0]
 80187ea:	441a      	add	r2, r3
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187f0:	6879      	ldr	r1, [r7, #4]
 80187f2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80187f4:	440b      	add	r3, r1
 80187f6:	429a      	cmp	r2, r3
 80187f8:	d019      	beq.n	801882e <tcp_receive+0xec6>
 80187fa:	4b24      	ldr	r3, [pc, #144]	; (801888c <tcp_receive+0xf24>)
 80187fc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8018800:	4923      	ldr	r1, [pc, #140]	; (8018890 <tcp_receive+0xf28>)
 8018802:	4824      	ldr	r0, [pc, #144]	; (8018894 <tcp_receive+0xf2c>)
 8018804:	f008 fdd8 	bl	80213b8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018808:	e011      	b.n	801882e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	63bb      	str	r3, [r7, #56]	; 0x38
 8018810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018812:	2b00      	cmp	r3, #0
 8018814:	f47f aea4 	bne.w	8018560 <tcp_receive+0xbf8>
 8018818:	e00a      	b.n	8018830 <tcp_receive+0xec8>
                break;
 801881a:	bf00      	nop
 801881c:	e008      	b.n	8018830 <tcp_receive+0xec8>
                break;
 801881e:	bf00      	nop
 8018820:	e006      	b.n	8018830 <tcp_receive+0xec8>
                  break;
 8018822:	bf00      	nop
 8018824:	e004      	b.n	8018830 <tcp_receive+0xec8>
                  break;
 8018826:	bf00      	nop
 8018828:	e002      	b.n	8018830 <tcp_receive+0xec8>
                  break;
 801882a:	bf00      	nop
 801882c:	e000      	b.n	8018830 <tcp_receive+0xec8>
                break;
 801882e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018830:	6878      	ldr	r0, [r7, #4]
 8018832:	f001 fe8b 	bl	801a54c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018836:	e003      	b.n	8018840 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018838:	6878      	ldr	r0, [r7, #4]
 801883a:	f001 fe87 	bl	801a54c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801883e:	e01a      	b.n	8018876 <tcp_receive+0xf0e>
 8018840:	e019      	b.n	8018876 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018842:	4b0f      	ldr	r3, [pc, #60]	; (8018880 <tcp_receive+0xf18>)
 8018844:	681a      	ldr	r2, [r3, #0]
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801884a:	1ad3      	subs	r3, r2, r3
 801884c:	2b00      	cmp	r3, #0
 801884e:	db0a      	blt.n	8018866 <tcp_receive+0xefe>
 8018850:	4b0b      	ldr	r3, [pc, #44]	; (8018880 <tcp_receive+0xf18>)
 8018852:	681a      	ldr	r2, [r3, #0]
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018858:	6879      	ldr	r1, [r7, #4]
 801885a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801885c:	440b      	add	r3, r1
 801885e:	1ad3      	subs	r3, r2, r3
 8018860:	3301      	adds	r3, #1
 8018862:	2b00      	cmp	r3, #0
 8018864:	dd07      	ble.n	8018876 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	8b5b      	ldrh	r3, [r3, #26]
 801886a:	f043 0302 	orr.w	r3, r3, #2
 801886e:	b29a      	uxth	r2, r3
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018874:	e7ff      	b.n	8018876 <tcp_receive+0xf0e>
 8018876:	bf00      	nop
 8018878:	3750      	adds	r7, #80	; 0x50
 801887a:	46bd      	mov	sp, r7
 801887c:	bdb0      	pop	{r4, r5, r7, pc}
 801887e:	bf00      	nop
 8018880:	20012308 	.word	0x20012308
 8018884:	200122e8 	.word	0x200122e8
 8018888:	20012312 	.word	0x20012312
 801888c:	080252c4 	.word	0x080252c4
 8018890:	0802566c 	.word	0x0802566c
 8018894:	08025310 	.word	0x08025310

08018898 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018898:	b480      	push	{r7}
 801889a:	b083      	sub	sp, #12
 801889c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801889e:	4b15      	ldr	r3, [pc, #84]	; (80188f4 <tcp_get_next_optbyte+0x5c>)
 80188a0:	881b      	ldrh	r3, [r3, #0]
 80188a2:	1c5a      	adds	r2, r3, #1
 80188a4:	b291      	uxth	r1, r2
 80188a6:	4a13      	ldr	r2, [pc, #76]	; (80188f4 <tcp_get_next_optbyte+0x5c>)
 80188a8:	8011      	strh	r1, [r2, #0]
 80188aa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80188ac:	4b12      	ldr	r3, [pc, #72]	; (80188f8 <tcp_get_next_optbyte+0x60>)
 80188ae:	681b      	ldr	r3, [r3, #0]
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d004      	beq.n	80188be <tcp_get_next_optbyte+0x26>
 80188b4:	4b11      	ldr	r3, [pc, #68]	; (80188fc <tcp_get_next_optbyte+0x64>)
 80188b6:	881b      	ldrh	r3, [r3, #0]
 80188b8:	88fa      	ldrh	r2, [r7, #6]
 80188ba:	429a      	cmp	r2, r3
 80188bc:	d208      	bcs.n	80188d0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80188be:	4b10      	ldr	r3, [pc, #64]	; (8018900 <tcp_get_next_optbyte+0x68>)
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	3314      	adds	r3, #20
 80188c4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80188c6:	88fb      	ldrh	r3, [r7, #6]
 80188c8:	683a      	ldr	r2, [r7, #0]
 80188ca:	4413      	add	r3, r2
 80188cc:	781b      	ldrb	r3, [r3, #0]
 80188ce:	e00b      	b.n	80188e8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80188d0:	88fb      	ldrh	r3, [r7, #6]
 80188d2:	b2da      	uxtb	r2, r3
 80188d4:	4b09      	ldr	r3, [pc, #36]	; (80188fc <tcp_get_next_optbyte+0x64>)
 80188d6:	881b      	ldrh	r3, [r3, #0]
 80188d8:	b2db      	uxtb	r3, r3
 80188da:	1ad3      	subs	r3, r2, r3
 80188dc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80188de:	4b06      	ldr	r3, [pc, #24]	; (80188f8 <tcp_get_next_optbyte+0x60>)
 80188e0:	681a      	ldr	r2, [r3, #0]
 80188e2:	797b      	ldrb	r3, [r7, #5]
 80188e4:	4413      	add	r3, r2
 80188e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80188e8:	4618      	mov	r0, r3
 80188ea:	370c      	adds	r7, #12
 80188ec:	46bd      	mov	sp, r7
 80188ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188f2:	4770      	bx	lr
 80188f4:	20012304 	.word	0x20012304
 80188f8:	20012300 	.word	0x20012300
 80188fc:	200122fe 	.word	0x200122fe
 8018900:	200122f8 	.word	0x200122f8

08018904 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018904:	b580      	push	{r7, lr}
 8018906:	b084      	sub	sp, #16
 8018908:	af00      	add	r7, sp, #0
 801890a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d106      	bne.n	8018920 <tcp_parseopt+0x1c>
 8018912:	4b32      	ldr	r3, [pc, #200]	; (80189dc <tcp_parseopt+0xd8>)
 8018914:	f240 727d 	movw	r2, #1917	; 0x77d
 8018918:	4931      	ldr	r1, [pc, #196]	; (80189e0 <tcp_parseopt+0xdc>)
 801891a:	4832      	ldr	r0, [pc, #200]	; (80189e4 <tcp_parseopt+0xe0>)
 801891c:	f008 fd4c 	bl	80213b8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018920:	4b31      	ldr	r3, [pc, #196]	; (80189e8 <tcp_parseopt+0xe4>)
 8018922:	881b      	ldrh	r3, [r3, #0]
 8018924:	2b00      	cmp	r3, #0
 8018926:	d055      	beq.n	80189d4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018928:	4b30      	ldr	r3, [pc, #192]	; (80189ec <tcp_parseopt+0xe8>)
 801892a:	2200      	movs	r2, #0
 801892c:	801a      	strh	r2, [r3, #0]
 801892e:	e045      	b.n	80189bc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8018930:	f7ff ffb2 	bl	8018898 <tcp_get_next_optbyte>
 8018934:	4603      	mov	r3, r0
 8018936:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018938:	7bfb      	ldrb	r3, [r7, #15]
 801893a:	2b02      	cmp	r3, #2
 801893c:	d006      	beq.n	801894c <tcp_parseopt+0x48>
 801893e:	2b02      	cmp	r3, #2
 8018940:	dc2b      	bgt.n	801899a <tcp_parseopt+0x96>
 8018942:	2b00      	cmp	r3, #0
 8018944:	d041      	beq.n	80189ca <tcp_parseopt+0xc6>
 8018946:	2b01      	cmp	r3, #1
 8018948:	d127      	bne.n	801899a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801894a:	e037      	b.n	80189bc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801894c:	f7ff ffa4 	bl	8018898 <tcp_get_next_optbyte>
 8018950:	4603      	mov	r3, r0
 8018952:	2b04      	cmp	r3, #4
 8018954:	d13b      	bne.n	80189ce <tcp_parseopt+0xca>
 8018956:	4b25      	ldr	r3, [pc, #148]	; (80189ec <tcp_parseopt+0xe8>)
 8018958:	881b      	ldrh	r3, [r3, #0]
 801895a:	3301      	adds	r3, #1
 801895c:	4a22      	ldr	r2, [pc, #136]	; (80189e8 <tcp_parseopt+0xe4>)
 801895e:	8812      	ldrh	r2, [r2, #0]
 8018960:	4293      	cmp	r3, r2
 8018962:	da34      	bge.n	80189ce <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018964:	f7ff ff98 	bl	8018898 <tcp_get_next_optbyte>
 8018968:	4603      	mov	r3, r0
 801896a:	b29b      	uxth	r3, r3
 801896c:	021b      	lsls	r3, r3, #8
 801896e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018970:	f7ff ff92 	bl	8018898 <tcp_get_next_optbyte>
 8018974:	4603      	mov	r3, r0
 8018976:	b29a      	uxth	r2, r3
 8018978:	89bb      	ldrh	r3, [r7, #12]
 801897a:	4313      	orrs	r3, r2
 801897c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801897e:	89bb      	ldrh	r3, [r7, #12]
 8018980:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018984:	d804      	bhi.n	8018990 <tcp_parseopt+0x8c>
 8018986:	89bb      	ldrh	r3, [r7, #12]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d001      	beq.n	8018990 <tcp_parseopt+0x8c>
 801898c:	89ba      	ldrh	r2, [r7, #12]
 801898e:	e001      	b.n	8018994 <tcp_parseopt+0x90>
 8018990:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8018998:	e010      	b.n	80189bc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801899a:	f7ff ff7d 	bl	8018898 <tcp_get_next_optbyte>
 801899e:	4603      	mov	r3, r0
 80189a0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80189a2:	7afb      	ldrb	r3, [r7, #11]
 80189a4:	2b01      	cmp	r3, #1
 80189a6:	d914      	bls.n	80189d2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80189a8:	7afb      	ldrb	r3, [r7, #11]
 80189aa:	b29a      	uxth	r2, r3
 80189ac:	4b0f      	ldr	r3, [pc, #60]	; (80189ec <tcp_parseopt+0xe8>)
 80189ae:	881b      	ldrh	r3, [r3, #0]
 80189b0:	4413      	add	r3, r2
 80189b2:	b29b      	uxth	r3, r3
 80189b4:	3b02      	subs	r3, #2
 80189b6:	b29a      	uxth	r2, r3
 80189b8:	4b0c      	ldr	r3, [pc, #48]	; (80189ec <tcp_parseopt+0xe8>)
 80189ba:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80189bc:	4b0b      	ldr	r3, [pc, #44]	; (80189ec <tcp_parseopt+0xe8>)
 80189be:	881a      	ldrh	r2, [r3, #0]
 80189c0:	4b09      	ldr	r3, [pc, #36]	; (80189e8 <tcp_parseopt+0xe4>)
 80189c2:	881b      	ldrh	r3, [r3, #0]
 80189c4:	429a      	cmp	r2, r3
 80189c6:	d3b3      	bcc.n	8018930 <tcp_parseopt+0x2c>
 80189c8:	e004      	b.n	80189d4 <tcp_parseopt+0xd0>
          return;
 80189ca:	bf00      	nop
 80189cc:	e002      	b.n	80189d4 <tcp_parseopt+0xd0>
            return;
 80189ce:	bf00      	nop
 80189d0:	e000      	b.n	80189d4 <tcp_parseopt+0xd0>
            return;
 80189d2:	bf00      	nop
      }
    }
  }
}
 80189d4:	3710      	adds	r7, #16
 80189d6:	46bd      	mov	sp, r7
 80189d8:	bd80      	pop	{r7, pc}
 80189da:	bf00      	nop
 80189dc:	080252c4 	.word	0x080252c4
 80189e0:	08025728 	.word	0x08025728
 80189e4:	08025310 	.word	0x08025310
 80189e8:	200122fc 	.word	0x200122fc
 80189ec:	20012304 	.word	0x20012304

080189f0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80189f0:	b480      	push	{r7}
 80189f2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80189f4:	4b05      	ldr	r3, [pc, #20]	; (8018a0c <tcp_trigger_input_pcb_close+0x1c>)
 80189f6:	781b      	ldrb	r3, [r3, #0]
 80189f8:	f043 0310 	orr.w	r3, r3, #16
 80189fc:	b2da      	uxtb	r2, r3
 80189fe:	4b03      	ldr	r3, [pc, #12]	; (8018a0c <tcp_trigger_input_pcb_close+0x1c>)
 8018a00:	701a      	strb	r2, [r3, #0]
}
 8018a02:	bf00      	nop
 8018a04:	46bd      	mov	sp, r7
 8018a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a0a:	4770      	bx	lr
 8018a0c:	20012315 	.word	0x20012315

08018a10 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b084      	sub	sp, #16
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	60f8      	str	r0, [r7, #12]
 8018a18:	60b9      	str	r1, [r7, #8]
 8018a1a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	2b00      	cmp	r3, #0
 8018a20:	d00a      	beq.n	8018a38 <tcp_route+0x28>
 8018a22:	68fb      	ldr	r3, [r7, #12]
 8018a24:	7a1b      	ldrb	r3, [r3, #8]
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d006      	beq.n	8018a38 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018a2a:	68fb      	ldr	r3, [r7, #12]
 8018a2c:	7a1b      	ldrb	r3, [r3, #8]
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f7fa fff0 	bl	8013a14 <netif_get_by_index>
 8018a34:	4603      	mov	r3, r0
 8018a36:	e003      	b.n	8018a40 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018a38:	6878      	ldr	r0, [r7, #4]
 8018a3a:	f005 fcc1 	bl	801e3c0 <ip4_route>
 8018a3e:	4603      	mov	r3, r0
  }
}
 8018a40:	4618      	mov	r0, r3
 8018a42:	3710      	adds	r7, #16
 8018a44:	46bd      	mov	sp, r7
 8018a46:	bd80      	pop	{r7, pc}

08018a48 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018a48:	b590      	push	{r4, r7, lr}
 8018a4a:	b087      	sub	sp, #28
 8018a4c:	af00      	add	r7, sp, #0
 8018a4e:	60f8      	str	r0, [r7, #12]
 8018a50:	60b9      	str	r1, [r7, #8]
 8018a52:	603b      	str	r3, [r7, #0]
 8018a54:	4613      	mov	r3, r2
 8018a56:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018a58:	68fb      	ldr	r3, [r7, #12]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d105      	bne.n	8018a6a <tcp_create_segment+0x22>
 8018a5e:	4b44      	ldr	r3, [pc, #272]	; (8018b70 <tcp_create_segment+0x128>)
 8018a60:	22a3      	movs	r2, #163	; 0xa3
 8018a62:	4944      	ldr	r1, [pc, #272]	; (8018b74 <tcp_create_segment+0x12c>)
 8018a64:	4844      	ldr	r0, [pc, #272]	; (8018b78 <tcp_create_segment+0x130>)
 8018a66:	f008 fca7 	bl	80213b8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018a6a:	68bb      	ldr	r3, [r7, #8]
 8018a6c:	2b00      	cmp	r3, #0
 8018a6e:	d105      	bne.n	8018a7c <tcp_create_segment+0x34>
 8018a70:	4b3f      	ldr	r3, [pc, #252]	; (8018b70 <tcp_create_segment+0x128>)
 8018a72:	22a4      	movs	r2, #164	; 0xa4
 8018a74:	4941      	ldr	r1, [pc, #260]	; (8018b7c <tcp_create_segment+0x134>)
 8018a76:	4840      	ldr	r0, [pc, #256]	; (8018b78 <tcp_create_segment+0x130>)
 8018a78:	f008 fc9e 	bl	80213b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018a7c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018a80:	009b      	lsls	r3, r3, #2
 8018a82:	b2db      	uxtb	r3, r3
 8018a84:	f003 0304 	and.w	r3, r3, #4
 8018a88:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018a8a:	2003      	movs	r0, #3
 8018a8c:	f7fa fc2a 	bl	80132e4 <memp_malloc>
 8018a90:	6138      	str	r0, [r7, #16]
 8018a92:	693b      	ldr	r3, [r7, #16]
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	d104      	bne.n	8018aa2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018a98:	68b8      	ldr	r0, [r7, #8]
 8018a9a:	f7fb fb49 	bl	8014130 <pbuf_free>
    return NULL;
 8018a9e:	2300      	movs	r3, #0
 8018aa0:	e061      	b.n	8018b66 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8018aa2:	693b      	ldr	r3, [r7, #16]
 8018aa4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018aa8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018aaa:	693b      	ldr	r3, [r7, #16]
 8018aac:	2200      	movs	r2, #0
 8018aae:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018ab0:	693b      	ldr	r3, [r7, #16]
 8018ab2:	68ba      	ldr	r2, [r7, #8]
 8018ab4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018ab6:	68bb      	ldr	r3, [r7, #8]
 8018ab8:	891a      	ldrh	r2, [r3, #8]
 8018aba:	7dfb      	ldrb	r3, [r7, #23]
 8018abc:	b29b      	uxth	r3, r3
 8018abe:	429a      	cmp	r2, r3
 8018ac0:	d205      	bcs.n	8018ace <tcp_create_segment+0x86>
 8018ac2:	4b2b      	ldr	r3, [pc, #172]	; (8018b70 <tcp_create_segment+0x128>)
 8018ac4:	22b0      	movs	r2, #176	; 0xb0
 8018ac6:	492e      	ldr	r1, [pc, #184]	; (8018b80 <tcp_create_segment+0x138>)
 8018ac8:	482b      	ldr	r0, [pc, #172]	; (8018b78 <tcp_create_segment+0x130>)
 8018aca:	f008 fc75 	bl	80213b8 <iprintf>
  seg->len = p->tot_len - optlen;
 8018ace:	68bb      	ldr	r3, [r7, #8]
 8018ad0:	891a      	ldrh	r2, [r3, #8]
 8018ad2:	7dfb      	ldrb	r3, [r7, #23]
 8018ad4:	b29b      	uxth	r3, r3
 8018ad6:	1ad3      	subs	r3, r2, r3
 8018ad8:	b29a      	uxth	r2, r3
 8018ada:	693b      	ldr	r3, [r7, #16]
 8018adc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018ade:	2114      	movs	r1, #20
 8018ae0:	68b8      	ldr	r0, [r7, #8]
 8018ae2:	f7fb fa8f 	bl	8014004 <pbuf_add_header>
 8018ae6:	4603      	mov	r3, r0
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d004      	beq.n	8018af6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018aec:	6938      	ldr	r0, [r7, #16]
 8018aee:	f7fc ffe8 	bl	8015ac2 <tcp_seg_free>
    return NULL;
 8018af2:	2300      	movs	r3, #0
 8018af4:	e037      	b.n	8018b66 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018af6:	693b      	ldr	r3, [r7, #16]
 8018af8:	685b      	ldr	r3, [r3, #4]
 8018afa:	685a      	ldr	r2, [r3, #4]
 8018afc:	693b      	ldr	r3, [r7, #16]
 8018afe:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	8ada      	ldrh	r2, [r3, #22]
 8018b04:	693b      	ldr	r3, [r7, #16]
 8018b06:	68dc      	ldr	r4, [r3, #12]
 8018b08:	4610      	mov	r0, r2
 8018b0a:	f7f9 ff13 	bl	8012934 <lwip_htons>
 8018b0e:	4603      	mov	r3, r0
 8018b10:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	8b1a      	ldrh	r2, [r3, #24]
 8018b16:	693b      	ldr	r3, [r7, #16]
 8018b18:	68dc      	ldr	r4, [r3, #12]
 8018b1a:	4610      	mov	r0, r2
 8018b1c:	f7f9 ff0a 	bl	8012934 <lwip_htons>
 8018b20:	4603      	mov	r3, r0
 8018b22:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018b24:	693b      	ldr	r3, [r7, #16]
 8018b26:	68dc      	ldr	r4, [r3, #12]
 8018b28:	6838      	ldr	r0, [r7, #0]
 8018b2a:	f7f9 ff18 	bl	801295e <lwip_htonl>
 8018b2e:	4603      	mov	r3, r0
 8018b30:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018b32:	7dfb      	ldrb	r3, [r7, #23]
 8018b34:	089b      	lsrs	r3, r3, #2
 8018b36:	b2db      	uxtb	r3, r3
 8018b38:	b29b      	uxth	r3, r3
 8018b3a:	3305      	adds	r3, #5
 8018b3c:	b29b      	uxth	r3, r3
 8018b3e:	031b      	lsls	r3, r3, #12
 8018b40:	b29a      	uxth	r2, r3
 8018b42:	79fb      	ldrb	r3, [r7, #7]
 8018b44:	b29b      	uxth	r3, r3
 8018b46:	4313      	orrs	r3, r2
 8018b48:	b29a      	uxth	r2, r3
 8018b4a:	693b      	ldr	r3, [r7, #16]
 8018b4c:	68dc      	ldr	r4, [r3, #12]
 8018b4e:	4610      	mov	r0, r2
 8018b50:	f7f9 fef0 	bl	8012934 <lwip_htons>
 8018b54:	4603      	mov	r3, r0
 8018b56:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018b58:	693b      	ldr	r3, [r7, #16]
 8018b5a:	68db      	ldr	r3, [r3, #12]
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	749a      	strb	r2, [r3, #18]
 8018b60:	2200      	movs	r2, #0
 8018b62:	74da      	strb	r2, [r3, #19]
  return seg;
 8018b64:	693b      	ldr	r3, [r7, #16]
}
 8018b66:	4618      	mov	r0, r3
 8018b68:	371c      	adds	r7, #28
 8018b6a:	46bd      	mov	sp, r7
 8018b6c:	bd90      	pop	{r4, r7, pc}
 8018b6e:	bf00      	nop
 8018b70:	08025744 	.word	0x08025744
 8018b74:	08025778 	.word	0x08025778
 8018b78:	08025798 	.word	0x08025798
 8018b7c:	080257c0 	.word	0x080257c0
 8018b80:	080257e4 	.word	0x080257e4

08018b84 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b086      	sub	sp, #24
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	607b      	str	r3, [r7, #4]
 8018b8c:	4603      	mov	r3, r0
 8018b8e:	73fb      	strb	r3, [r7, #15]
 8018b90:	460b      	mov	r3, r1
 8018b92:	81bb      	strh	r3, [r7, #12]
 8018b94:	4613      	mov	r3, r2
 8018b96:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018b98:	89bb      	ldrh	r3, [r7, #12]
 8018b9a:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d105      	bne.n	8018bae <tcp_pbuf_prealloc+0x2a>
 8018ba2:	4b30      	ldr	r3, [pc, #192]	; (8018c64 <tcp_pbuf_prealloc+0xe0>)
 8018ba4:	22e8      	movs	r2, #232	; 0xe8
 8018ba6:	4930      	ldr	r1, [pc, #192]	; (8018c68 <tcp_pbuf_prealloc+0xe4>)
 8018ba8:	4830      	ldr	r0, [pc, #192]	; (8018c6c <tcp_pbuf_prealloc+0xe8>)
 8018baa:	f008 fc05 	bl	80213b8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018bae:	6a3b      	ldr	r3, [r7, #32]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	d105      	bne.n	8018bc0 <tcp_pbuf_prealloc+0x3c>
 8018bb4:	4b2b      	ldr	r3, [pc, #172]	; (8018c64 <tcp_pbuf_prealloc+0xe0>)
 8018bb6:	22e9      	movs	r2, #233	; 0xe9
 8018bb8:	492d      	ldr	r1, [pc, #180]	; (8018c70 <tcp_pbuf_prealloc+0xec>)
 8018bba:	482c      	ldr	r0, [pc, #176]	; (8018c6c <tcp_pbuf_prealloc+0xe8>)
 8018bbc:	f008 fbfc 	bl	80213b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018bc0:	89ba      	ldrh	r2, [r7, #12]
 8018bc2:	897b      	ldrh	r3, [r7, #10]
 8018bc4:	429a      	cmp	r2, r3
 8018bc6:	d221      	bcs.n	8018c0c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018bc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018bcc:	f003 0302 	and.w	r3, r3, #2
 8018bd0:	2b00      	cmp	r3, #0
 8018bd2:	d111      	bne.n	8018bf8 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018bd4:	6a3b      	ldr	r3, [r7, #32]
 8018bd6:	8b5b      	ldrh	r3, [r3, #26]
 8018bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d115      	bne.n	8018c0c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018be0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d007      	beq.n	8018bf8 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018be8:	6a3b      	ldr	r3, [r7, #32]
 8018bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8018bec:	2b00      	cmp	r3, #0
 8018bee:	d103      	bne.n	8018bf8 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018bf0:	6a3b      	ldr	r3, [r7, #32]
 8018bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d009      	beq.n	8018c0c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018bf8:	89bb      	ldrh	r3, [r7, #12]
 8018bfa:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8018bfe:	f023 0203 	bic.w	r2, r3, #3
 8018c02:	897b      	ldrh	r3, [r7, #10]
 8018c04:	4293      	cmp	r3, r2
 8018c06:	bf28      	it	cs
 8018c08:	4613      	movcs	r3, r2
 8018c0a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018c0c:	8af9      	ldrh	r1, [r7, #22]
 8018c0e:	7bfb      	ldrb	r3, [r7, #15]
 8018c10:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018c14:	4618      	mov	r0, r3
 8018c16:	f7fa ffa7 	bl	8013b68 <pbuf_alloc>
 8018c1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018c1c:	693b      	ldr	r3, [r7, #16]
 8018c1e:	2b00      	cmp	r3, #0
 8018c20:	d101      	bne.n	8018c26 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018c22:	2300      	movs	r3, #0
 8018c24:	e019      	b.n	8018c5a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018c26:	693b      	ldr	r3, [r7, #16]
 8018c28:	681b      	ldr	r3, [r3, #0]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d006      	beq.n	8018c3c <tcp_pbuf_prealloc+0xb8>
 8018c2e:	4b0d      	ldr	r3, [pc, #52]	; (8018c64 <tcp_pbuf_prealloc+0xe0>)
 8018c30:	f240 120b 	movw	r2, #267	; 0x10b
 8018c34:	490f      	ldr	r1, [pc, #60]	; (8018c74 <tcp_pbuf_prealloc+0xf0>)
 8018c36:	480d      	ldr	r0, [pc, #52]	; (8018c6c <tcp_pbuf_prealloc+0xe8>)
 8018c38:	f008 fbbe 	bl	80213b8 <iprintf>
  *oversize = p->len - length;
 8018c3c:	693b      	ldr	r3, [r7, #16]
 8018c3e:	895a      	ldrh	r2, [r3, #10]
 8018c40:	89bb      	ldrh	r3, [r7, #12]
 8018c42:	1ad3      	subs	r3, r2, r3
 8018c44:	b29a      	uxth	r2, r3
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018c4a:	693b      	ldr	r3, [r7, #16]
 8018c4c:	89ba      	ldrh	r2, [r7, #12]
 8018c4e:	811a      	strh	r2, [r3, #8]
 8018c50:	693b      	ldr	r3, [r7, #16]
 8018c52:	891a      	ldrh	r2, [r3, #8]
 8018c54:	693b      	ldr	r3, [r7, #16]
 8018c56:	815a      	strh	r2, [r3, #10]
  return p;
 8018c58:	693b      	ldr	r3, [r7, #16]
}
 8018c5a:	4618      	mov	r0, r3
 8018c5c:	3718      	adds	r7, #24
 8018c5e:	46bd      	mov	sp, r7
 8018c60:	bd80      	pop	{r7, pc}
 8018c62:	bf00      	nop
 8018c64:	08025744 	.word	0x08025744
 8018c68:	080257fc 	.word	0x080257fc
 8018c6c:	08025798 	.word	0x08025798
 8018c70:	08025820 	.word	0x08025820
 8018c74:	08025840 	.word	0x08025840

08018c78 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018c78:	b580      	push	{r7, lr}
 8018c7a:	b082      	sub	sp, #8
 8018c7c:	af00      	add	r7, sp, #0
 8018c7e:	6078      	str	r0, [r7, #4]
 8018c80:	460b      	mov	r3, r1
 8018c82:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8018c84:	687b      	ldr	r3, [r7, #4]
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d106      	bne.n	8018c98 <tcp_write_checks+0x20>
 8018c8a:	4b33      	ldr	r3, [pc, #204]	; (8018d58 <tcp_write_checks+0xe0>)
 8018c8c:	f240 1233 	movw	r2, #307	; 0x133
 8018c90:	4932      	ldr	r1, [pc, #200]	; (8018d5c <tcp_write_checks+0xe4>)
 8018c92:	4833      	ldr	r0, [pc, #204]	; (8018d60 <tcp_write_checks+0xe8>)
 8018c94:	f008 fb90 	bl	80213b8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	7d1b      	ldrb	r3, [r3, #20]
 8018c9c:	2b04      	cmp	r3, #4
 8018c9e:	d00e      	beq.n	8018cbe <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8018ca4:	2b07      	cmp	r3, #7
 8018ca6:	d00a      	beq.n	8018cbe <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8018ca8:	687b      	ldr	r3, [r7, #4]
 8018caa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018cac:	2b02      	cmp	r3, #2
 8018cae:	d006      	beq.n	8018cbe <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8018cb4:	2b03      	cmp	r3, #3
 8018cb6:	d002      	beq.n	8018cbe <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018cb8:	f06f 030a 	mvn.w	r3, #10
 8018cbc:	e048      	b.n	8018d50 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8018cbe:	887b      	ldrh	r3, [r7, #2]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d101      	bne.n	8018cc8 <tcp_write_checks+0x50>
    return ERR_OK;
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	e043      	b.n	8018d50 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018cce:	887a      	ldrh	r2, [r7, #2]
 8018cd0:	429a      	cmp	r2, r3
 8018cd2:	d909      	bls.n	8018ce8 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	8b5b      	ldrh	r3, [r3, #26]
 8018cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018cdc:	b29a      	uxth	r2, r3
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018ce2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018ce6:	e033      	b.n	8018d50 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018cee:	2b08      	cmp	r3, #8
 8018cf0:	d909      	bls.n	8018d06 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	8b5b      	ldrh	r3, [r3, #26]
 8018cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018cfa:	b29a      	uxth	r2, r3
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018d04:	e024      	b.n	8018d50 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d00f      	beq.n	8018d30 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d11a      	bne.n	8018d4e <tcp_write_checks+0xd6>
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018d1c:	2b00      	cmp	r3, #0
 8018d1e:	d116      	bne.n	8018d4e <tcp_write_checks+0xd6>
 8018d20:	4b0d      	ldr	r3, [pc, #52]	; (8018d58 <tcp_write_checks+0xe0>)
 8018d22:	f240 1255 	movw	r2, #341	; 0x155
 8018d26:	490f      	ldr	r1, [pc, #60]	; (8018d64 <tcp_write_checks+0xec>)
 8018d28:	480d      	ldr	r0, [pc, #52]	; (8018d60 <tcp_write_checks+0xe8>)
 8018d2a:	f008 fb45 	bl	80213b8 <iprintf>
 8018d2e:	e00e      	b.n	8018d4e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d103      	bne.n	8018d40 <tcp_write_checks+0xc8>
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d006      	beq.n	8018d4e <tcp_write_checks+0xd6>
 8018d40:	4b05      	ldr	r3, [pc, #20]	; (8018d58 <tcp_write_checks+0xe0>)
 8018d42:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8018d46:	4908      	ldr	r1, [pc, #32]	; (8018d68 <tcp_write_checks+0xf0>)
 8018d48:	4805      	ldr	r0, [pc, #20]	; (8018d60 <tcp_write_checks+0xe8>)
 8018d4a:	f008 fb35 	bl	80213b8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8018d4e:	2300      	movs	r3, #0
}
 8018d50:	4618      	mov	r0, r3
 8018d52:	3708      	adds	r7, #8
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bd80      	pop	{r7, pc}
 8018d58:	08025744 	.word	0x08025744
 8018d5c:	08025854 	.word	0x08025854
 8018d60:	08025798 	.word	0x08025798
 8018d64:	08025874 	.word	0x08025874
 8018d68:	080258b0 	.word	0x080258b0

08018d6c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018d6c:	b590      	push	{r4, r7, lr}
 8018d6e:	b09b      	sub	sp, #108	; 0x6c
 8018d70:	af04      	add	r7, sp, #16
 8018d72:	60f8      	str	r0, [r7, #12]
 8018d74:	60b9      	str	r1, [r7, #8]
 8018d76:	4611      	mov	r1, r2
 8018d78:	461a      	mov	r2, r3
 8018d7a:	460b      	mov	r3, r1
 8018d7c:	80fb      	strh	r3, [r7, #6]
 8018d7e:	4613      	mov	r3, r2
 8018d80:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8018d82:	2300      	movs	r3, #0
 8018d84:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018d86:	2300      	movs	r3, #0
 8018d88:	653b      	str	r3, [r7, #80]	; 0x50
 8018d8a:	2300      	movs	r3, #0
 8018d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018d8e:	2300      	movs	r3, #0
 8018d90:	64bb      	str	r3, [r7, #72]	; 0x48
 8018d92:	2300      	movs	r3, #0
 8018d94:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8018d96:	2300      	movs	r3, #0
 8018d98:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8018da2:	2300      	movs	r3, #0
 8018da4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8018da6:	2300      	movs	r3, #0
 8018da8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8018daa:	2300      	movs	r3, #0
 8018dac:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8018dae:	68fb      	ldr	r3, [r7, #12]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d109      	bne.n	8018dc8 <tcp_write+0x5c>
 8018db4:	4ba4      	ldr	r3, [pc, #656]	; (8019048 <tcp_write+0x2dc>)
 8018db6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8018dba:	49a4      	ldr	r1, [pc, #656]	; (801904c <tcp_write+0x2e0>)
 8018dbc:	48a4      	ldr	r0, [pc, #656]	; (8019050 <tcp_write+0x2e4>)
 8018dbe:	f008 fafb 	bl	80213b8 <iprintf>
 8018dc2:	f06f 030f 	mvn.w	r3, #15
 8018dc6:	e32a      	b.n	801941e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8018dce:	085b      	lsrs	r3, r3, #1
 8018dd0:	b29a      	uxth	r2, r3
 8018dd2:	68fb      	ldr	r3, [r7, #12]
 8018dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018dd6:	4293      	cmp	r3, r2
 8018dd8:	bf28      	it	cs
 8018dda:	4613      	movcs	r3, r2
 8018ddc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8018dde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018de0:	2b00      	cmp	r3, #0
 8018de2:	d102      	bne.n	8018dea <tcp_write+0x7e>
 8018de4:	68fb      	ldr	r3, [r7, #12]
 8018de6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018de8:	e000      	b.n	8018dec <tcp_write+0x80>
 8018dea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dec:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8018dee:	68bb      	ldr	r3, [r7, #8]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d109      	bne.n	8018e08 <tcp_write+0x9c>
 8018df4:	4b94      	ldr	r3, [pc, #592]	; (8019048 <tcp_write+0x2dc>)
 8018df6:	f240 12ad 	movw	r2, #429	; 0x1ad
 8018dfa:	4996      	ldr	r1, [pc, #600]	; (8019054 <tcp_write+0x2e8>)
 8018dfc:	4894      	ldr	r0, [pc, #592]	; (8019050 <tcp_write+0x2e4>)
 8018dfe:	f008 fadb 	bl	80213b8 <iprintf>
 8018e02:	f06f 030f 	mvn.w	r3, #15
 8018e06:	e30a      	b.n	801941e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8018e08:	88fb      	ldrh	r3, [r7, #6]
 8018e0a:	4619      	mov	r1, r3
 8018e0c:	68f8      	ldr	r0, [r7, #12]
 8018e0e:	f7ff ff33 	bl	8018c78 <tcp_write_checks>
 8018e12:	4603      	mov	r3, r0
 8018e14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8018e18:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d002      	beq.n	8018e26 <tcp_write+0xba>
    return err;
 8018e20:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8018e24:	e2fb      	b.n	801941e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018e2c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018e30:	2300      	movs	r3, #0
 8018e32:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	f000 80f6 	beq.w	801902c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018e44:	653b      	str	r3, [r7, #80]	; 0x50
 8018e46:	e002      	b.n	8018e4e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8018e48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8018e4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	2b00      	cmp	r3, #0
 8018e54:	d1f8      	bne.n	8018e48 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8018e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e58:	7a9b      	ldrb	r3, [r3, #10]
 8018e5a:	009b      	lsls	r3, r3, #2
 8018e5c:	b29b      	uxth	r3, r3
 8018e5e:	f003 0304 	and.w	r3, r3, #4
 8018e62:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8018e64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018e66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e68:	891b      	ldrh	r3, [r3, #8]
 8018e6a:	4619      	mov	r1, r3
 8018e6c:	8c3b      	ldrh	r3, [r7, #32]
 8018e6e:	440b      	add	r3, r1
 8018e70:	429a      	cmp	r2, r3
 8018e72:	da06      	bge.n	8018e82 <tcp_write+0x116>
 8018e74:	4b74      	ldr	r3, [pc, #464]	; (8019048 <tcp_write+0x2dc>)
 8018e76:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8018e7a:	4977      	ldr	r1, [pc, #476]	; (8019058 <tcp_write+0x2ec>)
 8018e7c:	4874      	ldr	r0, [pc, #464]	; (8019050 <tcp_write+0x2e4>)
 8018e7e:	f008 fa9b 	bl	80213b8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8018e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018e84:	891a      	ldrh	r2, [r3, #8]
 8018e86:	8c3b      	ldrh	r3, [r7, #32]
 8018e88:	4413      	add	r3, r2
 8018e8a:	b29b      	uxth	r3, r3
 8018e8c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018e8e:	1ad3      	subs	r3, r2, r3
 8018e90:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8018e98:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8018e9a:	8a7b      	ldrh	r3, [r7, #18]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d026      	beq.n	8018eee <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8018ea0:	8a7b      	ldrh	r3, [r7, #18]
 8018ea2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d206      	bcs.n	8018eb6 <tcp_write+0x14a>
 8018ea8:	4b67      	ldr	r3, [pc, #412]	; (8019048 <tcp_write+0x2dc>)
 8018eaa:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8018eae:	496b      	ldr	r1, [pc, #428]	; (801905c <tcp_write+0x2f0>)
 8018eb0:	4867      	ldr	r0, [pc, #412]	; (8019050 <tcp_write+0x2e4>)
 8018eb2:	f008 fa81 	bl	80213b8 <iprintf>
      seg = last_unsent;
 8018eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8018eba:	8a7b      	ldrh	r3, [r7, #18]
 8018ebc:	88fa      	ldrh	r2, [r7, #6]
 8018ebe:	4293      	cmp	r3, r2
 8018ec0:	bf28      	it	cs
 8018ec2:	4613      	movcs	r3, r2
 8018ec4:	b29b      	uxth	r3, r3
 8018ec6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018ec8:	4293      	cmp	r3, r2
 8018eca:	bf28      	it	cs
 8018ecc:	4613      	movcs	r3, r2
 8018ece:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8018ed0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018ed4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018ed6:	4413      	add	r3, r2
 8018ed8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8018edc:	8a7a      	ldrh	r2, [r7, #18]
 8018ede:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018ee0:	1ad3      	subs	r3, r2, r3
 8018ee2:	b29b      	uxth	r3, r3
 8018ee4:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8018ee6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018ee8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018eea:	1ad3      	subs	r3, r2, r3
 8018eec:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8018eee:	8a7b      	ldrh	r3, [r7, #18]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d00b      	beq.n	8018f0c <tcp_write+0x1a0>
 8018ef4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018ef8:	88fb      	ldrh	r3, [r7, #6]
 8018efa:	429a      	cmp	r2, r3
 8018efc:	d006      	beq.n	8018f0c <tcp_write+0x1a0>
 8018efe:	4b52      	ldr	r3, [pc, #328]	; (8019048 <tcp_write+0x2dc>)
 8018f00:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018f04:	4956      	ldr	r1, [pc, #344]	; (8019060 <tcp_write+0x2f4>)
 8018f06:	4852      	ldr	r0, [pc, #328]	; (8019050 <tcp_write+0x2e4>)
 8018f08:	f008 fa56 	bl	80213b8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8018f0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018f10:	88fb      	ldrh	r3, [r7, #6]
 8018f12:	429a      	cmp	r2, r3
 8018f14:	f080 8167 	bcs.w	80191e6 <tcp_write+0x47a>
 8018f18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	f000 8163 	beq.w	80191e6 <tcp_write+0x47a>
 8018f20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f22:	891b      	ldrh	r3, [r3, #8]
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	f000 815e 	beq.w	80191e6 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8018f2a:	88fa      	ldrh	r2, [r7, #6]
 8018f2c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018f30:	1ad2      	subs	r2, r2, r3
 8018f32:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8018f34:	4293      	cmp	r3, r2
 8018f36:	bfa8      	it	ge
 8018f38:	4613      	movge	r3, r2
 8018f3a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8018f3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f3e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8018f40:	797b      	ldrb	r3, [r7, #5]
 8018f42:	f003 0301 	and.w	r3, r3, #1
 8018f46:	2b00      	cmp	r3, #0
 8018f48:	d027      	beq.n	8018f9a <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8018f4a:	f107 0012 	add.w	r0, r7, #18
 8018f4e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8018f50:	8bf9      	ldrh	r1, [r7, #30]
 8018f52:	2301      	movs	r3, #1
 8018f54:	9302      	str	r3, [sp, #8]
 8018f56:	797b      	ldrb	r3, [r7, #5]
 8018f58:	9301      	str	r3, [sp, #4]
 8018f5a:	68fb      	ldr	r3, [r7, #12]
 8018f5c:	9300      	str	r3, [sp, #0]
 8018f5e:	4603      	mov	r3, r0
 8018f60:	2000      	movs	r0, #0
 8018f62:	f7ff fe0f 	bl	8018b84 <tcp_pbuf_prealloc>
 8018f66:	6578      	str	r0, [r7, #84]	; 0x54
 8018f68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	f000 8225 	beq.w	80193ba <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8018f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018f72:	6858      	ldr	r0, [r3, #4]
 8018f74:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018f78:	68ba      	ldr	r2, [r7, #8]
 8018f7a:	4413      	add	r3, r2
 8018f7c:	8bfa      	ldrh	r2, [r7, #30]
 8018f7e:	4619      	mov	r1, r3
 8018f80:	f008 fd39 	bl	80219f6 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8018f84:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8018f86:	f7fb f961 	bl	801424c <pbuf_clen>
 8018f8a:	4603      	mov	r3, r0
 8018f8c:	461a      	mov	r2, r3
 8018f8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8018f92:	4413      	add	r3, r2
 8018f94:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8018f98:	e041      	b.n	801901e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8018f9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018f9c:	685b      	ldr	r3, [r3, #4]
 8018f9e:	637b      	str	r3, [r7, #52]	; 0x34
 8018fa0:	e002      	b.n	8018fa8 <tcp_write+0x23c>
 8018fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	637b      	str	r3, [r7, #52]	; 0x34
 8018fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	2b00      	cmp	r3, #0
 8018fae:	d1f8      	bne.n	8018fa2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fb2:	7b1b      	ldrb	r3, [r3, #12]
 8018fb4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d115      	bne.n	8018fe8 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8018fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018fbe:	685b      	ldr	r3, [r3, #4]
 8018fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018fc2:	8952      	ldrh	r2, [r2, #10]
 8018fc4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8018fc6:	68ba      	ldr	r2, [r7, #8]
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d10d      	bne.n	8018fe8 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8018fcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d006      	beq.n	8018fe2 <tcp_write+0x276>
 8018fd4:	4b1c      	ldr	r3, [pc, #112]	; (8019048 <tcp_write+0x2dc>)
 8018fd6:	f240 2231 	movw	r2, #561	; 0x231
 8018fda:	4922      	ldr	r1, [pc, #136]	; (8019064 <tcp_write+0x2f8>)
 8018fdc:	481c      	ldr	r0, [pc, #112]	; (8019050 <tcp_write+0x2e4>)
 8018fde:	f008 f9eb 	bl	80213b8 <iprintf>
          extendlen = seglen;
 8018fe2:	8bfb      	ldrh	r3, [r7, #30]
 8018fe4:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8018fe6:	e01a      	b.n	801901e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8018fe8:	8bfb      	ldrh	r3, [r7, #30]
 8018fea:	2201      	movs	r2, #1
 8018fec:	4619      	mov	r1, r3
 8018fee:	2000      	movs	r0, #0
 8018ff0:	f7fa fdba 	bl	8013b68 <pbuf_alloc>
 8018ff4:	6578      	str	r0, [r7, #84]	; 0x54
 8018ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	f000 81e0 	beq.w	80193be <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8018ffe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019002:	68ba      	ldr	r2, [r7, #8]
 8019004:	441a      	add	r2, r3
 8019006:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019008:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801900a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801900c:	f7fb f91e 	bl	801424c <pbuf_clen>
 8019010:	4603      	mov	r3, r0
 8019012:	461a      	mov	r2, r3
 8019014:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019018:	4413      	add	r3, r2
 801901a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801901e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019022:	8bfb      	ldrh	r3, [r7, #30]
 8019024:	4413      	add	r3, r2
 8019026:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801902a:	e0dc      	b.n	80191e6 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801902c:	68fb      	ldr	r3, [r7, #12]
 801902e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019032:	2b00      	cmp	r3, #0
 8019034:	f000 80d7 	beq.w	80191e6 <tcp_write+0x47a>
 8019038:	4b03      	ldr	r3, [pc, #12]	; (8019048 <tcp_write+0x2dc>)
 801903a:	f240 224a 	movw	r2, #586	; 0x24a
 801903e:	490a      	ldr	r1, [pc, #40]	; (8019068 <tcp_write+0x2fc>)
 8019040:	4803      	ldr	r0, [pc, #12]	; (8019050 <tcp_write+0x2e4>)
 8019042:	f008 f9b9 	bl	80213b8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8019046:	e0ce      	b.n	80191e6 <tcp_write+0x47a>
 8019048:	08025744 	.word	0x08025744
 801904c:	080258e4 	.word	0x080258e4
 8019050:	08025798 	.word	0x08025798
 8019054:	080258fc 	.word	0x080258fc
 8019058:	08025930 	.word	0x08025930
 801905c:	08025948 	.word	0x08025948
 8019060:	08025968 	.word	0x08025968
 8019064:	08025988 	.word	0x08025988
 8019068:	080259b4 	.word	0x080259b4
    struct pbuf *p;
    u16_t left = len - pos;
 801906c:	88fa      	ldrh	r2, [r7, #6]
 801906e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019072:	1ad3      	subs	r3, r2, r3
 8019074:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8019076:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801907a:	b29b      	uxth	r3, r3
 801907c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801907e:	1ad3      	subs	r3, r2, r3
 8019080:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8019082:	8b7a      	ldrh	r2, [r7, #26]
 8019084:	8bbb      	ldrh	r3, [r7, #28]
 8019086:	4293      	cmp	r3, r2
 8019088:	bf28      	it	cs
 801908a:	4613      	movcs	r3, r2
 801908c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801908e:	797b      	ldrb	r3, [r7, #5]
 8019090:	f003 0301 	and.w	r3, r3, #1
 8019094:	2b00      	cmp	r3, #0
 8019096:	d036      	beq.n	8019106 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019098:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801909c:	b29a      	uxth	r2, r3
 801909e:	8b3b      	ldrh	r3, [r7, #24]
 80190a0:	4413      	add	r3, r2
 80190a2:	b299      	uxth	r1, r3
 80190a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	bf0c      	ite	eq
 80190aa:	2301      	moveq	r3, #1
 80190ac:	2300      	movne	r3, #0
 80190ae:	b2db      	uxtb	r3, r3
 80190b0:	f107 0012 	add.w	r0, r7, #18
 80190b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80190b6:	9302      	str	r3, [sp, #8]
 80190b8:	797b      	ldrb	r3, [r7, #5]
 80190ba:	9301      	str	r3, [sp, #4]
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	9300      	str	r3, [sp, #0]
 80190c0:	4603      	mov	r3, r0
 80190c2:	2036      	movs	r0, #54	; 0x36
 80190c4:	f7ff fd5e 	bl	8018b84 <tcp_pbuf_prealloc>
 80190c8:	6338      	str	r0, [r7, #48]	; 0x30
 80190ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190cc:	2b00      	cmp	r3, #0
 80190ce:	f000 8178 	beq.w	80193c2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80190d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190d4:	895b      	ldrh	r3, [r3, #10]
 80190d6:	8b3a      	ldrh	r2, [r7, #24]
 80190d8:	429a      	cmp	r2, r3
 80190da:	d906      	bls.n	80190ea <tcp_write+0x37e>
 80190dc:	4b8c      	ldr	r3, [pc, #560]	; (8019310 <tcp_write+0x5a4>)
 80190de:	f240 2266 	movw	r2, #614	; 0x266
 80190e2:	498c      	ldr	r1, [pc, #560]	; (8019314 <tcp_write+0x5a8>)
 80190e4:	488c      	ldr	r0, [pc, #560]	; (8019318 <tcp_write+0x5ac>)
 80190e6:	f008 f967 	bl	80213b8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80190ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190ec:	685a      	ldr	r2, [r3, #4]
 80190ee:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80190f2:	18d0      	adds	r0, r2, r3
 80190f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80190f8:	68ba      	ldr	r2, [r7, #8]
 80190fa:	4413      	add	r3, r2
 80190fc:	8b3a      	ldrh	r2, [r7, #24]
 80190fe:	4619      	mov	r1, r3
 8019100:	f008 fc79 	bl	80219f6 <memcpy>
 8019104:	e02f      	b.n	8019166 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019106:	8a7b      	ldrh	r3, [r7, #18]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d006      	beq.n	801911a <tcp_write+0x3ae>
 801910c:	4b80      	ldr	r3, [pc, #512]	; (8019310 <tcp_write+0x5a4>)
 801910e:	f240 2271 	movw	r2, #625	; 0x271
 8019112:	4982      	ldr	r1, [pc, #520]	; (801931c <tcp_write+0x5b0>)
 8019114:	4880      	ldr	r0, [pc, #512]	; (8019318 <tcp_write+0x5ac>)
 8019116:	f008 f94f 	bl	80213b8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801911a:	8b3b      	ldrh	r3, [r7, #24]
 801911c:	2201      	movs	r2, #1
 801911e:	4619      	mov	r1, r3
 8019120:	2036      	movs	r0, #54	; 0x36
 8019122:	f7fa fd21 	bl	8013b68 <pbuf_alloc>
 8019126:	6178      	str	r0, [r7, #20]
 8019128:	697b      	ldr	r3, [r7, #20]
 801912a:	2b00      	cmp	r3, #0
 801912c:	f000 814b 	beq.w	80193c6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8019130:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019134:	68ba      	ldr	r2, [r7, #8]
 8019136:	441a      	add	r2, r3
 8019138:	697b      	ldr	r3, [r7, #20]
 801913a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801913c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019140:	b29b      	uxth	r3, r3
 8019142:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019146:	4619      	mov	r1, r3
 8019148:	2036      	movs	r0, #54	; 0x36
 801914a:	f7fa fd0d 	bl	8013b68 <pbuf_alloc>
 801914e:	6338      	str	r0, [r7, #48]	; 0x30
 8019150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019152:	2b00      	cmp	r3, #0
 8019154:	d103      	bne.n	801915e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8019156:	6978      	ldr	r0, [r7, #20]
 8019158:	f7fa ffea 	bl	8014130 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801915c:	e136      	b.n	80193cc <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801915e:	6979      	ldr	r1, [r7, #20]
 8019160:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019162:	f7fb f8b3 	bl	80142cc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8019166:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019168:	f7fb f870 	bl	801424c <pbuf_clen>
 801916c:	4603      	mov	r3, r0
 801916e:	461a      	mov	r2, r3
 8019170:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019174:	4413      	add	r3, r2
 8019176:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801917a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801917e:	2b09      	cmp	r3, #9
 8019180:	d903      	bls.n	801918a <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8019182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019184:	f7fa ffd4 	bl	8014130 <pbuf_free>
      goto memerr;
 8019188:	e120      	b.n	80193cc <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801918e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019192:	441a      	add	r2, r3
 8019194:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019198:	9300      	str	r3, [sp, #0]
 801919a:	4613      	mov	r3, r2
 801919c:	2200      	movs	r2, #0
 801919e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80191a0:	68f8      	ldr	r0, [r7, #12]
 80191a2:	f7ff fc51 	bl	8018a48 <tcp_create_segment>
 80191a6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80191a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	f000 810d 	beq.w	80193ca <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80191b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d102      	bne.n	80191bc <tcp_write+0x450>
      queue = seg;
 80191b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80191b8:	647b      	str	r3, [r7, #68]	; 0x44
 80191ba:	e00c      	b.n	80191d6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80191bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d106      	bne.n	80191d0 <tcp_write+0x464>
 80191c2:	4b53      	ldr	r3, [pc, #332]	; (8019310 <tcp_write+0x5a4>)
 80191c4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80191c8:	4955      	ldr	r1, [pc, #340]	; (8019320 <tcp_write+0x5b4>)
 80191ca:	4853      	ldr	r0, [pc, #332]	; (8019318 <tcp_write+0x5ac>)
 80191cc:	f008 f8f4 	bl	80213b8 <iprintf>
      prev_seg->next = seg;
 80191d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80191d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80191d4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80191d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80191d8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80191da:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80191de:	8b3b      	ldrh	r3, [r7, #24]
 80191e0:	4413      	add	r3, r2
 80191e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80191e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80191ea:	88fb      	ldrh	r3, [r7, #6]
 80191ec:	429a      	cmp	r2, r3
 80191ee:	f4ff af3d 	bcc.w	801906c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80191f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d02c      	beq.n	8019252 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80191f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191fa:	685b      	ldr	r3, [r3, #4]
 80191fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80191fe:	e01e      	b.n	801923e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8019200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019202:	891a      	ldrh	r2, [r3, #8]
 8019204:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019206:	4413      	add	r3, r2
 8019208:	b29a      	uxth	r2, r3
 801920a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801920c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801920e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	2b00      	cmp	r3, #0
 8019214:	d110      	bne.n	8019238 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019218:	685b      	ldr	r3, [r3, #4]
 801921a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801921c:	8952      	ldrh	r2, [r2, #10]
 801921e:	4413      	add	r3, r2
 8019220:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019222:	68b9      	ldr	r1, [r7, #8]
 8019224:	4618      	mov	r0, r3
 8019226:	f008 fbe6 	bl	80219f6 <memcpy>
        p->len += oversize_used;
 801922a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801922c:	895a      	ldrh	r2, [r3, #10]
 801922e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019230:	4413      	add	r3, r2
 8019232:	b29a      	uxth	r2, r3
 8019234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019236:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8019238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801923a:	681b      	ldr	r3, [r3, #0]
 801923c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019240:	2b00      	cmp	r3, #0
 8019242:	d1dd      	bne.n	8019200 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8019244:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019246:	891a      	ldrh	r2, [r3, #8]
 8019248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801924a:	4413      	add	r3, r2
 801924c:	b29a      	uxth	r2, r3
 801924e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019250:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8019252:	8a7a      	ldrh	r2, [r7, #18]
 8019254:	68fb      	ldr	r3, [r7, #12]
 8019256:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801925a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801925c:	2b00      	cmp	r3, #0
 801925e:	d018      	beq.n	8019292 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8019260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019262:	2b00      	cmp	r3, #0
 8019264:	d106      	bne.n	8019274 <tcp_write+0x508>
 8019266:	4b2a      	ldr	r3, [pc, #168]	; (8019310 <tcp_write+0x5a4>)
 8019268:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801926c:	492d      	ldr	r1, [pc, #180]	; (8019324 <tcp_write+0x5b8>)
 801926e:	482a      	ldr	r0, [pc, #168]	; (8019318 <tcp_write+0x5ac>)
 8019270:	f008 f8a2 	bl	80213b8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8019274:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019276:	685b      	ldr	r3, [r3, #4]
 8019278:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801927a:	4618      	mov	r0, r3
 801927c:	f7fb f826 	bl	80142cc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8019280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019282:	891a      	ldrh	r2, [r3, #8]
 8019284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019286:	891b      	ldrh	r3, [r3, #8]
 8019288:	4413      	add	r3, r2
 801928a:	b29a      	uxth	r2, r3
 801928c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801928e:	811a      	strh	r2, [r3, #8]
 8019290:	e037      	b.n	8019302 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8019292:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019294:	2b00      	cmp	r3, #0
 8019296:	d034      	beq.n	8019302 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801929a:	2b00      	cmp	r3, #0
 801929c:	d003      	beq.n	80192a6 <tcp_write+0x53a>
 801929e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192a0:	685b      	ldr	r3, [r3, #4]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d106      	bne.n	80192b4 <tcp_write+0x548>
 80192a6:	4b1a      	ldr	r3, [pc, #104]	; (8019310 <tcp_write+0x5a4>)
 80192a8:	f240 22e6 	movw	r2, #742	; 0x2e6
 80192ac:	491e      	ldr	r1, [pc, #120]	; (8019328 <tcp_write+0x5bc>)
 80192ae:	481a      	ldr	r0, [pc, #104]	; (8019318 <tcp_write+0x5ac>)
 80192b0:	f008 f882 	bl	80213b8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80192b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192b6:	685b      	ldr	r3, [r3, #4]
 80192b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80192ba:	e009      	b.n	80192d0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80192bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192be:	891a      	ldrh	r2, [r3, #8]
 80192c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80192c2:	4413      	add	r3, r2
 80192c4:	b29a      	uxth	r2, r3
 80192c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192c8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80192ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80192d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	2b00      	cmp	r3, #0
 80192d6:	d1f1      	bne.n	80192bc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80192d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192da:	891a      	ldrh	r2, [r3, #8]
 80192dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80192de:	4413      	add	r3, r2
 80192e0:	b29a      	uxth	r2, r3
 80192e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192e4:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80192e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192e8:	895a      	ldrh	r2, [r3, #10]
 80192ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80192ec:	4413      	add	r3, r2
 80192ee:	b29a      	uxth	r2, r3
 80192f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192f2:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80192f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80192f6:	891a      	ldrh	r2, [r3, #8]
 80192f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80192fa:	4413      	add	r3, r2
 80192fc:	b29a      	uxth	r2, r3
 80192fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019300:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8019302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019304:	2b00      	cmp	r3, #0
 8019306:	d111      	bne.n	801932c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019308:	68fb      	ldr	r3, [r7, #12]
 801930a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801930c:	66da      	str	r2, [r3, #108]	; 0x6c
 801930e:	e010      	b.n	8019332 <tcp_write+0x5c6>
 8019310:	08025744 	.word	0x08025744
 8019314:	080259e4 	.word	0x080259e4
 8019318:	08025798 	.word	0x08025798
 801931c:	08025a24 	.word	0x08025a24
 8019320:	08025a34 	.word	0x08025a34
 8019324:	08025a48 	.word	0x08025a48
 8019328:	08025a80 	.word	0x08025a80
  } else {
    last_unsent->next = queue;
 801932c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801932e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019330:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019336:	88fb      	ldrh	r3, [r7, #6]
 8019338:	441a      	add	r2, r3
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8019344:	88fb      	ldrh	r3, [r7, #6]
 8019346:	1ad3      	subs	r3, r2, r3
 8019348:	b29a      	uxth	r2, r3
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8019350:	68fb      	ldr	r3, [r7, #12]
 8019352:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019356:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019360:	2b00      	cmp	r3, #0
 8019362:	d00e      	beq.n	8019382 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019368:	2b00      	cmp	r3, #0
 801936a:	d10a      	bne.n	8019382 <tcp_write+0x616>
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019370:	2b00      	cmp	r3, #0
 8019372:	d106      	bne.n	8019382 <tcp_write+0x616>
 8019374:	4b2c      	ldr	r3, [pc, #176]	; (8019428 <tcp_write+0x6bc>)
 8019376:	f240 3212 	movw	r2, #786	; 0x312
 801937a:	492c      	ldr	r1, [pc, #176]	; (801942c <tcp_write+0x6c0>)
 801937c:	482c      	ldr	r0, [pc, #176]	; (8019430 <tcp_write+0x6c4>)
 801937e:	f008 f81b 	bl	80213b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8019382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019384:	2b00      	cmp	r3, #0
 8019386:	d016      	beq.n	80193b6 <tcp_write+0x64a>
 8019388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801938a:	68db      	ldr	r3, [r3, #12]
 801938c:	2b00      	cmp	r3, #0
 801938e:	d012      	beq.n	80193b6 <tcp_write+0x64a>
 8019390:	797b      	ldrb	r3, [r7, #5]
 8019392:	f003 0302 	and.w	r3, r3, #2
 8019396:	2b00      	cmp	r3, #0
 8019398:	d10d      	bne.n	80193b6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801939a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801939c:	68db      	ldr	r3, [r3, #12]
 801939e:	899b      	ldrh	r3, [r3, #12]
 80193a0:	b29c      	uxth	r4, r3
 80193a2:	2008      	movs	r0, #8
 80193a4:	f7f9 fac6 	bl	8012934 <lwip_htons>
 80193a8:	4603      	mov	r3, r0
 80193aa:	461a      	mov	r2, r3
 80193ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80193ae:	68db      	ldr	r3, [r3, #12]
 80193b0:	4322      	orrs	r2, r4
 80193b2:	b292      	uxth	r2, r2
 80193b4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80193b6:	2300      	movs	r3, #0
 80193b8:	e031      	b.n	801941e <tcp_write+0x6b2>
          goto memerr;
 80193ba:	bf00      	nop
 80193bc:	e006      	b.n	80193cc <tcp_write+0x660>
            goto memerr;
 80193be:	bf00      	nop
 80193c0:	e004      	b.n	80193cc <tcp_write+0x660>
        goto memerr;
 80193c2:	bf00      	nop
 80193c4:	e002      	b.n	80193cc <tcp_write+0x660>
        goto memerr;
 80193c6:	bf00      	nop
 80193c8:	e000      	b.n	80193cc <tcp_write+0x660>
      goto memerr;
 80193ca:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80193cc:	68fb      	ldr	r3, [r7, #12]
 80193ce:	8b5b      	ldrh	r3, [r3, #26]
 80193d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80193d4:	b29a      	uxth	r2, r3
 80193d6:	68fb      	ldr	r3, [r7, #12]
 80193d8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80193da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80193dc:	2b00      	cmp	r3, #0
 80193de:	d002      	beq.n	80193e6 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80193e0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80193e2:	f7fa fea5 	bl	8014130 <pbuf_free>
  }
  if (queue != NULL) {
 80193e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80193e8:	2b00      	cmp	r3, #0
 80193ea:	d002      	beq.n	80193f2 <tcp_write+0x686>
    tcp_segs_free(queue);
 80193ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80193ee:	f7fc fb53 	bl	8015a98 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d00e      	beq.n	801941a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80193fc:	68fb      	ldr	r3, [r7, #12]
 80193fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019400:	2b00      	cmp	r3, #0
 8019402:	d10a      	bne.n	801941a <tcp_write+0x6ae>
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019408:	2b00      	cmp	r3, #0
 801940a:	d106      	bne.n	801941a <tcp_write+0x6ae>
 801940c:	4b06      	ldr	r3, [pc, #24]	; (8019428 <tcp_write+0x6bc>)
 801940e:	f240 3227 	movw	r2, #807	; 0x327
 8019412:	4906      	ldr	r1, [pc, #24]	; (801942c <tcp_write+0x6c0>)
 8019414:	4806      	ldr	r0, [pc, #24]	; (8019430 <tcp_write+0x6c4>)
 8019416:	f007 ffcf 	bl	80213b8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801941a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801941e:	4618      	mov	r0, r3
 8019420:	375c      	adds	r7, #92	; 0x5c
 8019422:	46bd      	mov	sp, r7
 8019424:	bd90      	pop	{r4, r7, pc}
 8019426:	bf00      	nop
 8019428:	08025744 	.word	0x08025744
 801942c:	08025ab8 	.word	0x08025ab8
 8019430:	08025798 	.word	0x08025798

08019434 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8019434:	b590      	push	{r4, r7, lr}
 8019436:	b08b      	sub	sp, #44	; 0x2c
 8019438:	af02      	add	r7, sp, #8
 801943a:	6078      	str	r0, [r7, #4]
 801943c:	460b      	mov	r3, r1
 801943e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8019440:	2300      	movs	r3, #0
 8019442:	61fb      	str	r3, [r7, #28]
 8019444:	2300      	movs	r3, #0
 8019446:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8019448:	2300      	movs	r3, #0
 801944a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	2b00      	cmp	r3, #0
 8019450:	d106      	bne.n	8019460 <tcp_split_unsent_seg+0x2c>
 8019452:	4b95      	ldr	r3, [pc, #596]	; (80196a8 <tcp_split_unsent_seg+0x274>)
 8019454:	f240 324b 	movw	r2, #843	; 0x34b
 8019458:	4994      	ldr	r1, [pc, #592]	; (80196ac <tcp_split_unsent_seg+0x278>)
 801945a:	4895      	ldr	r0, [pc, #596]	; (80196b0 <tcp_split_unsent_seg+0x27c>)
 801945c:	f007 ffac 	bl	80213b8 <iprintf>

  useg = pcb->unsent;
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019464:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8019466:	697b      	ldr	r3, [r7, #20]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d102      	bne.n	8019472 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801946c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019470:	e116      	b.n	80196a0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8019472:	887b      	ldrh	r3, [r7, #2]
 8019474:	2b00      	cmp	r3, #0
 8019476:	d109      	bne.n	801948c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8019478:	4b8b      	ldr	r3, [pc, #556]	; (80196a8 <tcp_split_unsent_seg+0x274>)
 801947a:	f240 3253 	movw	r2, #851	; 0x353
 801947e:	498d      	ldr	r1, [pc, #564]	; (80196b4 <tcp_split_unsent_seg+0x280>)
 8019480:	488b      	ldr	r0, [pc, #556]	; (80196b0 <tcp_split_unsent_seg+0x27c>)
 8019482:	f007 ff99 	bl	80213b8 <iprintf>
    return ERR_VAL;
 8019486:	f06f 0305 	mvn.w	r3, #5
 801948a:	e109      	b.n	80196a0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801948c:	697b      	ldr	r3, [r7, #20]
 801948e:	891b      	ldrh	r3, [r3, #8]
 8019490:	887a      	ldrh	r2, [r7, #2]
 8019492:	429a      	cmp	r2, r3
 8019494:	d301      	bcc.n	801949a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019496:	2300      	movs	r3, #0
 8019498:	e102      	b.n	80196a0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801949e:	887a      	ldrh	r2, [r7, #2]
 80194a0:	429a      	cmp	r2, r3
 80194a2:	d906      	bls.n	80194b2 <tcp_split_unsent_seg+0x7e>
 80194a4:	4b80      	ldr	r3, [pc, #512]	; (80196a8 <tcp_split_unsent_seg+0x274>)
 80194a6:	f240 325b 	movw	r2, #859	; 0x35b
 80194aa:	4983      	ldr	r1, [pc, #524]	; (80196b8 <tcp_split_unsent_seg+0x284>)
 80194ac:	4880      	ldr	r0, [pc, #512]	; (80196b0 <tcp_split_unsent_seg+0x27c>)
 80194ae:	f007 ff83 	bl	80213b8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80194b2:	697b      	ldr	r3, [r7, #20]
 80194b4:	891b      	ldrh	r3, [r3, #8]
 80194b6:	2b00      	cmp	r3, #0
 80194b8:	d106      	bne.n	80194c8 <tcp_split_unsent_seg+0x94>
 80194ba:	4b7b      	ldr	r3, [pc, #492]	; (80196a8 <tcp_split_unsent_seg+0x274>)
 80194bc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80194c0:	497e      	ldr	r1, [pc, #504]	; (80196bc <tcp_split_unsent_seg+0x288>)
 80194c2:	487b      	ldr	r0, [pc, #492]	; (80196b0 <tcp_split_unsent_seg+0x27c>)
 80194c4:	f007 ff78 	bl	80213b8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80194c8:	697b      	ldr	r3, [r7, #20]
 80194ca:	7a9b      	ldrb	r3, [r3, #10]
 80194cc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80194ce:	7bfb      	ldrb	r3, [r7, #15]
 80194d0:	009b      	lsls	r3, r3, #2
 80194d2:	b2db      	uxtb	r3, r3
 80194d4:	f003 0304 	and.w	r3, r3, #4
 80194d8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80194da:	697b      	ldr	r3, [r7, #20]
 80194dc:	891a      	ldrh	r2, [r3, #8]
 80194de:	887b      	ldrh	r3, [r7, #2]
 80194e0:	1ad3      	subs	r3, r2, r3
 80194e2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80194e4:	7bbb      	ldrb	r3, [r7, #14]
 80194e6:	b29a      	uxth	r2, r3
 80194e8:	89bb      	ldrh	r3, [r7, #12]
 80194ea:	4413      	add	r3, r2
 80194ec:	b29b      	uxth	r3, r3
 80194ee:	f44f 7220 	mov.w	r2, #640	; 0x280
 80194f2:	4619      	mov	r1, r3
 80194f4:	2036      	movs	r0, #54	; 0x36
 80194f6:	f7fa fb37 	bl	8013b68 <pbuf_alloc>
 80194fa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80194fc:	693b      	ldr	r3, [r7, #16]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	f000 80b7 	beq.w	8019672 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019504:	697b      	ldr	r3, [r7, #20]
 8019506:	685b      	ldr	r3, [r3, #4]
 8019508:	891a      	ldrh	r2, [r3, #8]
 801950a:	697b      	ldr	r3, [r7, #20]
 801950c:	891b      	ldrh	r3, [r3, #8]
 801950e:	1ad3      	subs	r3, r2, r3
 8019510:	b29a      	uxth	r2, r3
 8019512:	887b      	ldrh	r3, [r7, #2]
 8019514:	4413      	add	r3, r2
 8019516:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019518:	697b      	ldr	r3, [r7, #20]
 801951a:	6858      	ldr	r0, [r3, #4]
 801951c:	693b      	ldr	r3, [r7, #16]
 801951e:	685a      	ldr	r2, [r3, #4]
 8019520:	7bbb      	ldrb	r3, [r7, #14]
 8019522:	18d1      	adds	r1, r2, r3
 8019524:	897b      	ldrh	r3, [r7, #10]
 8019526:	89ba      	ldrh	r2, [r7, #12]
 8019528:	f7fb f808 	bl	801453c <pbuf_copy_partial>
 801952c:	4603      	mov	r3, r0
 801952e:	461a      	mov	r2, r3
 8019530:	89bb      	ldrh	r3, [r7, #12]
 8019532:	4293      	cmp	r3, r2
 8019534:	f040 809f 	bne.w	8019676 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8019538:	697b      	ldr	r3, [r7, #20]
 801953a:	68db      	ldr	r3, [r3, #12]
 801953c:	899b      	ldrh	r3, [r3, #12]
 801953e:	b29b      	uxth	r3, r3
 8019540:	4618      	mov	r0, r3
 8019542:	f7f9 f9f7 	bl	8012934 <lwip_htons>
 8019546:	4603      	mov	r3, r0
 8019548:	b2db      	uxtb	r3, r3
 801954a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801954e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8019550:	2300      	movs	r3, #0
 8019552:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8019554:	7efb      	ldrb	r3, [r7, #27]
 8019556:	f003 0308 	and.w	r3, r3, #8
 801955a:	2b00      	cmp	r3, #0
 801955c:	d007      	beq.n	801956e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801955e:	7efb      	ldrb	r3, [r7, #27]
 8019560:	f023 0308 	bic.w	r3, r3, #8
 8019564:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8019566:	7ebb      	ldrb	r3, [r7, #26]
 8019568:	f043 0308 	orr.w	r3, r3, #8
 801956c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801956e:	7efb      	ldrb	r3, [r7, #27]
 8019570:	f003 0301 	and.w	r3, r3, #1
 8019574:	2b00      	cmp	r3, #0
 8019576:	d007      	beq.n	8019588 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8019578:	7efb      	ldrb	r3, [r7, #27]
 801957a:	f023 0301 	bic.w	r3, r3, #1
 801957e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8019580:	7ebb      	ldrb	r3, [r7, #26]
 8019582:	f043 0301 	orr.w	r3, r3, #1
 8019586:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8019588:	697b      	ldr	r3, [r7, #20]
 801958a:	68db      	ldr	r3, [r3, #12]
 801958c:	685b      	ldr	r3, [r3, #4]
 801958e:	4618      	mov	r0, r3
 8019590:	f7f9 f9e5 	bl	801295e <lwip_htonl>
 8019594:	4602      	mov	r2, r0
 8019596:	887b      	ldrh	r3, [r7, #2]
 8019598:	18d1      	adds	r1, r2, r3
 801959a:	7eba      	ldrb	r2, [r7, #26]
 801959c:	7bfb      	ldrb	r3, [r7, #15]
 801959e:	9300      	str	r3, [sp, #0]
 80195a0:	460b      	mov	r3, r1
 80195a2:	6939      	ldr	r1, [r7, #16]
 80195a4:	6878      	ldr	r0, [r7, #4]
 80195a6:	f7ff fa4f 	bl	8018a48 <tcp_create_segment>
 80195aa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80195ac:	69fb      	ldr	r3, [r7, #28]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d063      	beq.n	801967a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80195b2:	697b      	ldr	r3, [r7, #20]
 80195b4:	685b      	ldr	r3, [r3, #4]
 80195b6:	4618      	mov	r0, r3
 80195b8:	f7fa fe48 	bl	801424c <pbuf_clen>
 80195bc:	4603      	mov	r3, r0
 80195be:	461a      	mov	r2, r3
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80195c6:	1a9b      	subs	r3, r3, r2
 80195c8:	b29a      	uxth	r2, r3
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80195d0:	697b      	ldr	r3, [r7, #20]
 80195d2:	6858      	ldr	r0, [r3, #4]
 80195d4:	697b      	ldr	r3, [r7, #20]
 80195d6:	685b      	ldr	r3, [r3, #4]
 80195d8:	891a      	ldrh	r2, [r3, #8]
 80195da:	89bb      	ldrh	r3, [r7, #12]
 80195dc:	1ad3      	subs	r3, r2, r3
 80195de:	b29b      	uxth	r3, r3
 80195e0:	4619      	mov	r1, r3
 80195e2:	f7fa fc1f 	bl	8013e24 <pbuf_realloc>
  useg->len -= remainder;
 80195e6:	697b      	ldr	r3, [r7, #20]
 80195e8:	891a      	ldrh	r2, [r3, #8]
 80195ea:	89bb      	ldrh	r3, [r7, #12]
 80195ec:	1ad3      	subs	r3, r2, r3
 80195ee:	b29a      	uxth	r2, r3
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80195f4:	697b      	ldr	r3, [r7, #20]
 80195f6:	68db      	ldr	r3, [r3, #12]
 80195f8:	899b      	ldrh	r3, [r3, #12]
 80195fa:	b29c      	uxth	r4, r3
 80195fc:	7efb      	ldrb	r3, [r7, #27]
 80195fe:	b29b      	uxth	r3, r3
 8019600:	4618      	mov	r0, r3
 8019602:	f7f9 f997 	bl	8012934 <lwip_htons>
 8019606:	4603      	mov	r3, r0
 8019608:	461a      	mov	r2, r3
 801960a:	697b      	ldr	r3, [r7, #20]
 801960c:	68db      	ldr	r3, [r3, #12]
 801960e:	4322      	orrs	r2, r4
 8019610:	b292      	uxth	r2, r2
 8019612:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019614:	697b      	ldr	r3, [r7, #20]
 8019616:	685b      	ldr	r3, [r3, #4]
 8019618:	4618      	mov	r0, r3
 801961a:	f7fa fe17 	bl	801424c <pbuf_clen>
 801961e:	4603      	mov	r3, r0
 8019620:	461a      	mov	r2, r3
 8019622:	687b      	ldr	r3, [r7, #4]
 8019624:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019628:	4413      	add	r3, r2
 801962a:	b29a      	uxth	r2, r3
 801962c:	687b      	ldr	r3, [r7, #4]
 801962e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019632:	69fb      	ldr	r3, [r7, #28]
 8019634:	685b      	ldr	r3, [r3, #4]
 8019636:	4618      	mov	r0, r3
 8019638:	f7fa fe08 	bl	801424c <pbuf_clen>
 801963c:	4603      	mov	r3, r0
 801963e:	461a      	mov	r2, r3
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019646:	4413      	add	r3, r2
 8019648:	b29a      	uxth	r2, r3
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8019650:	697b      	ldr	r3, [r7, #20]
 8019652:	681a      	ldr	r2, [r3, #0]
 8019654:	69fb      	ldr	r3, [r7, #28]
 8019656:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8019658:	697b      	ldr	r3, [r7, #20]
 801965a:	69fa      	ldr	r2, [r7, #28]
 801965c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801965e:	69fb      	ldr	r3, [r7, #28]
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d103      	bne.n	801966e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	2200      	movs	r2, #0
 801966a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801966e:	2300      	movs	r3, #0
 8019670:	e016      	b.n	80196a0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8019672:	bf00      	nop
 8019674:	e002      	b.n	801967c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8019676:	bf00      	nop
 8019678:	e000      	b.n	801967c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801967a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801967c:	69fb      	ldr	r3, [r7, #28]
 801967e:	2b00      	cmp	r3, #0
 8019680:	d006      	beq.n	8019690 <tcp_split_unsent_seg+0x25c>
 8019682:	4b09      	ldr	r3, [pc, #36]	; (80196a8 <tcp_split_unsent_seg+0x274>)
 8019684:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8019688:	490d      	ldr	r1, [pc, #52]	; (80196c0 <tcp_split_unsent_seg+0x28c>)
 801968a:	4809      	ldr	r0, [pc, #36]	; (80196b0 <tcp_split_unsent_seg+0x27c>)
 801968c:	f007 fe94 	bl	80213b8 <iprintf>
  if (p != NULL) {
 8019690:	693b      	ldr	r3, [r7, #16]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d002      	beq.n	801969c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8019696:	6938      	ldr	r0, [r7, #16]
 8019698:	f7fa fd4a 	bl	8014130 <pbuf_free>
  }

  return ERR_MEM;
 801969c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80196a0:	4618      	mov	r0, r3
 80196a2:	3724      	adds	r7, #36	; 0x24
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd90      	pop	{r4, r7, pc}
 80196a8:	08025744 	.word	0x08025744
 80196ac:	08025ad8 	.word	0x08025ad8
 80196b0:	08025798 	.word	0x08025798
 80196b4:	08025afc 	.word	0x08025afc
 80196b8:	08025b20 	.word	0x08025b20
 80196bc:	08025b30 	.word	0x08025b30
 80196c0:	08025b40 	.word	0x08025b40

080196c4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80196c4:	b590      	push	{r4, r7, lr}
 80196c6:	b085      	sub	sp, #20
 80196c8:	af00      	add	r7, sp, #0
 80196ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	2b00      	cmp	r3, #0
 80196d0:	d106      	bne.n	80196e0 <tcp_send_fin+0x1c>
 80196d2:	4b21      	ldr	r3, [pc, #132]	; (8019758 <tcp_send_fin+0x94>)
 80196d4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80196d8:	4920      	ldr	r1, [pc, #128]	; (801975c <tcp_send_fin+0x98>)
 80196da:	4821      	ldr	r0, [pc, #132]	; (8019760 <tcp_send_fin+0x9c>)
 80196dc:	f007 fe6c 	bl	80213b8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196e4:	2b00      	cmp	r3, #0
 80196e6:	d02e      	beq.n	8019746 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196ec:	60fb      	str	r3, [r7, #12]
 80196ee:	e002      	b.n	80196f6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80196f0:	68fb      	ldr	r3, [r7, #12]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80196f6:	68fb      	ldr	r3, [r7, #12]
 80196f8:	681b      	ldr	r3, [r3, #0]
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d1f8      	bne.n	80196f0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80196fe:	68fb      	ldr	r3, [r7, #12]
 8019700:	68db      	ldr	r3, [r3, #12]
 8019702:	899b      	ldrh	r3, [r3, #12]
 8019704:	b29b      	uxth	r3, r3
 8019706:	4618      	mov	r0, r3
 8019708:	f7f9 f914 	bl	8012934 <lwip_htons>
 801970c:	4603      	mov	r3, r0
 801970e:	b2db      	uxtb	r3, r3
 8019710:	f003 0307 	and.w	r3, r3, #7
 8019714:	2b00      	cmp	r3, #0
 8019716:	d116      	bne.n	8019746 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	68db      	ldr	r3, [r3, #12]
 801971c:	899b      	ldrh	r3, [r3, #12]
 801971e:	b29c      	uxth	r4, r3
 8019720:	2001      	movs	r0, #1
 8019722:	f7f9 f907 	bl	8012934 <lwip_htons>
 8019726:	4603      	mov	r3, r0
 8019728:	461a      	mov	r2, r3
 801972a:	68fb      	ldr	r3, [r7, #12]
 801972c:	68db      	ldr	r3, [r3, #12]
 801972e:	4322      	orrs	r2, r4
 8019730:	b292      	uxth	r2, r2
 8019732:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	8b5b      	ldrh	r3, [r3, #26]
 8019738:	f043 0320 	orr.w	r3, r3, #32
 801973c:	b29a      	uxth	r2, r3
 801973e:	687b      	ldr	r3, [r7, #4]
 8019740:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8019742:	2300      	movs	r3, #0
 8019744:	e004      	b.n	8019750 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8019746:	2101      	movs	r1, #1
 8019748:	6878      	ldr	r0, [r7, #4]
 801974a:	f000 f80b 	bl	8019764 <tcp_enqueue_flags>
 801974e:	4603      	mov	r3, r0
}
 8019750:	4618      	mov	r0, r3
 8019752:	3714      	adds	r7, #20
 8019754:	46bd      	mov	sp, r7
 8019756:	bd90      	pop	{r4, r7, pc}
 8019758:	08025744 	.word	0x08025744
 801975c:	08025b4c 	.word	0x08025b4c
 8019760:	08025798 	.word	0x08025798

08019764 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8019764:	b580      	push	{r7, lr}
 8019766:	b08a      	sub	sp, #40	; 0x28
 8019768:	af02      	add	r7, sp, #8
 801976a:	6078      	str	r0, [r7, #4]
 801976c:	460b      	mov	r3, r1
 801976e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8019770:	2300      	movs	r3, #0
 8019772:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8019774:	2300      	movs	r3, #0
 8019776:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8019778:	78fb      	ldrb	r3, [r7, #3]
 801977a:	f003 0303 	and.w	r3, r3, #3
 801977e:	2b00      	cmp	r3, #0
 8019780:	d106      	bne.n	8019790 <tcp_enqueue_flags+0x2c>
 8019782:	4b67      	ldr	r3, [pc, #412]	; (8019920 <tcp_enqueue_flags+0x1bc>)
 8019784:	f240 4211 	movw	r2, #1041	; 0x411
 8019788:	4966      	ldr	r1, [pc, #408]	; (8019924 <tcp_enqueue_flags+0x1c0>)
 801978a:	4867      	ldr	r0, [pc, #412]	; (8019928 <tcp_enqueue_flags+0x1c4>)
 801978c:	f007 fe14 	bl	80213b8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8019790:	687b      	ldr	r3, [r7, #4]
 8019792:	2b00      	cmp	r3, #0
 8019794:	d106      	bne.n	80197a4 <tcp_enqueue_flags+0x40>
 8019796:	4b62      	ldr	r3, [pc, #392]	; (8019920 <tcp_enqueue_flags+0x1bc>)
 8019798:	f240 4213 	movw	r2, #1043	; 0x413
 801979c:	4963      	ldr	r1, [pc, #396]	; (801992c <tcp_enqueue_flags+0x1c8>)
 801979e:	4862      	ldr	r0, [pc, #392]	; (8019928 <tcp_enqueue_flags+0x1c4>)
 80197a0:	f007 fe0a 	bl	80213b8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80197a4:	78fb      	ldrb	r3, [r7, #3]
 80197a6:	f003 0302 	and.w	r3, r3, #2
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d001      	beq.n	80197b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80197ae:	2301      	movs	r3, #1
 80197b0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80197b2:	7ffb      	ldrb	r3, [r7, #31]
 80197b4:	009b      	lsls	r3, r3, #2
 80197b6:	b2db      	uxtb	r3, r3
 80197b8:	f003 0304 	and.w	r3, r3, #4
 80197bc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80197be:	7dfb      	ldrb	r3, [r7, #23]
 80197c0:	b29b      	uxth	r3, r3
 80197c2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80197c6:	4619      	mov	r1, r3
 80197c8:	2036      	movs	r0, #54	; 0x36
 80197ca:	f7fa f9cd 	bl	8013b68 <pbuf_alloc>
 80197ce:	6138      	str	r0, [r7, #16]
 80197d0:	693b      	ldr	r3, [r7, #16]
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d109      	bne.n	80197ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	8b5b      	ldrh	r3, [r3, #26]
 80197da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80197de:	b29a      	uxth	r2, r3
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80197e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80197e8:	e095      	b.n	8019916 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80197ea:	693b      	ldr	r3, [r7, #16]
 80197ec:	895a      	ldrh	r2, [r3, #10]
 80197ee:	7dfb      	ldrb	r3, [r7, #23]
 80197f0:	b29b      	uxth	r3, r3
 80197f2:	429a      	cmp	r2, r3
 80197f4:	d206      	bcs.n	8019804 <tcp_enqueue_flags+0xa0>
 80197f6:	4b4a      	ldr	r3, [pc, #296]	; (8019920 <tcp_enqueue_flags+0x1bc>)
 80197f8:	f240 4239 	movw	r2, #1081	; 0x439
 80197fc:	494c      	ldr	r1, [pc, #304]	; (8019930 <tcp_enqueue_flags+0x1cc>)
 80197fe:	484a      	ldr	r0, [pc, #296]	; (8019928 <tcp_enqueue_flags+0x1c4>)
 8019800:	f007 fdda 	bl	80213b8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019808:	78fa      	ldrb	r2, [r7, #3]
 801980a:	7ffb      	ldrb	r3, [r7, #31]
 801980c:	9300      	str	r3, [sp, #0]
 801980e:	460b      	mov	r3, r1
 8019810:	6939      	ldr	r1, [r7, #16]
 8019812:	6878      	ldr	r0, [r7, #4]
 8019814:	f7ff f918 	bl	8018a48 <tcp_create_segment>
 8019818:	60f8      	str	r0, [r7, #12]
 801981a:	68fb      	ldr	r3, [r7, #12]
 801981c:	2b00      	cmp	r3, #0
 801981e:	d109      	bne.n	8019834 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	8b5b      	ldrh	r3, [r3, #26]
 8019824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019828:	b29a      	uxth	r2, r3
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801982e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019832:	e070      	b.n	8019916 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019834:	68fb      	ldr	r3, [r7, #12]
 8019836:	68db      	ldr	r3, [r3, #12]
 8019838:	f003 0303 	and.w	r3, r3, #3
 801983c:	2b00      	cmp	r3, #0
 801983e:	d006      	beq.n	801984e <tcp_enqueue_flags+0xea>
 8019840:	4b37      	ldr	r3, [pc, #220]	; (8019920 <tcp_enqueue_flags+0x1bc>)
 8019842:	f240 4242 	movw	r2, #1090	; 0x442
 8019846:	493b      	ldr	r1, [pc, #236]	; (8019934 <tcp_enqueue_flags+0x1d0>)
 8019848:	4837      	ldr	r0, [pc, #220]	; (8019928 <tcp_enqueue_flags+0x1c4>)
 801984a:	f007 fdb5 	bl	80213b8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	891b      	ldrh	r3, [r3, #8]
 8019852:	2b00      	cmp	r3, #0
 8019854:	d006      	beq.n	8019864 <tcp_enqueue_flags+0x100>
 8019856:	4b32      	ldr	r3, [pc, #200]	; (8019920 <tcp_enqueue_flags+0x1bc>)
 8019858:	f240 4243 	movw	r2, #1091	; 0x443
 801985c:	4936      	ldr	r1, [pc, #216]	; (8019938 <tcp_enqueue_flags+0x1d4>)
 801985e:	4832      	ldr	r0, [pc, #200]	; (8019928 <tcp_enqueue_flags+0x1c4>)
 8019860:	f007 fdaa 	bl	80213b8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019868:	2b00      	cmp	r3, #0
 801986a:	d103      	bne.n	8019874 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	68fa      	ldr	r2, [r7, #12]
 8019870:	66da      	str	r2, [r3, #108]	; 0x6c
 8019872:	e00d      	b.n	8019890 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019878:	61bb      	str	r3, [r7, #24]
 801987a:	e002      	b.n	8019882 <tcp_enqueue_flags+0x11e>
 801987c:	69bb      	ldr	r3, [r7, #24]
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	61bb      	str	r3, [r7, #24]
 8019882:	69bb      	ldr	r3, [r7, #24]
 8019884:	681b      	ldr	r3, [r3, #0]
 8019886:	2b00      	cmp	r3, #0
 8019888:	d1f8      	bne.n	801987c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801988a:	69bb      	ldr	r3, [r7, #24]
 801988c:	68fa      	ldr	r2, [r7, #12]
 801988e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	2200      	movs	r2, #0
 8019894:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019898:	78fb      	ldrb	r3, [r7, #3]
 801989a:	f003 0302 	and.w	r3, r3, #2
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d104      	bne.n	80198ac <tcp_enqueue_flags+0x148>
 80198a2:	78fb      	ldrb	r3, [r7, #3]
 80198a4:	f003 0301 	and.w	r3, r3, #1
 80198a8:	2b00      	cmp	r3, #0
 80198aa:	d004      	beq.n	80198b6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80198b0:	1c5a      	adds	r2, r3, #1
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80198b6:	78fb      	ldrb	r3, [r7, #3]
 80198b8:	f003 0301 	and.w	r3, r3, #1
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d006      	beq.n	80198ce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	8b5b      	ldrh	r3, [r3, #26]
 80198c4:	f043 0320 	orr.w	r3, r3, #32
 80198c8:	b29a      	uxth	r2, r3
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80198ce:	68fb      	ldr	r3, [r7, #12]
 80198d0:	685b      	ldr	r3, [r3, #4]
 80198d2:	4618      	mov	r0, r3
 80198d4:	f7fa fcba 	bl	801424c <pbuf_clen>
 80198d8:	4603      	mov	r3, r0
 80198da:	461a      	mov	r2, r3
 80198dc:	687b      	ldr	r3, [r7, #4]
 80198de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80198e2:	4413      	add	r3, r2
 80198e4:	b29a      	uxth	r2, r3
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80198ec:	687b      	ldr	r3, [r7, #4]
 80198ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80198f2:	2b00      	cmp	r3, #0
 80198f4:	d00e      	beq.n	8019914 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80198f6:	687b      	ldr	r3, [r7, #4]
 80198f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	d10a      	bne.n	8019914 <tcp_enqueue_flags+0x1b0>
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019902:	2b00      	cmp	r3, #0
 8019904:	d106      	bne.n	8019914 <tcp_enqueue_flags+0x1b0>
 8019906:	4b06      	ldr	r3, [pc, #24]	; (8019920 <tcp_enqueue_flags+0x1bc>)
 8019908:	f240 4265 	movw	r2, #1125	; 0x465
 801990c:	490b      	ldr	r1, [pc, #44]	; (801993c <tcp_enqueue_flags+0x1d8>)
 801990e:	4806      	ldr	r0, [pc, #24]	; (8019928 <tcp_enqueue_flags+0x1c4>)
 8019910:	f007 fd52 	bl	80213b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019914:	2300      	movs	r3, #0
}
 8019916:	4618      	mov	r0, r3
 8019918:	3720      	adds	r7, #32
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}
 801991e:	bf00      	nop
 8019920:	08025744 	.word	0x08025744
 8019924:	08025b68 	.word	0x08025b68
 8019928:	08025798 	.word	0x08025798
 801992c:	08025bc0 	.word	0x08025bc0
 8019930:	08025be0 	.word	0x08025be0
 8019934:	08025c1c 	.word	0x08025c1c
 8019938:	08025c34 	.word	0x08025c34
 801993c:	08025c60 	.word	0x08025c60

08019940 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019940:	b5b0      	push	{r4, r5, r7, lr}
 8019942:	b08a      	sub	sp, #40	; 0x28
 8019944:	af00      	add	r7, sp, #0
 8019946:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	2b00      	cmp	r3, #0
 801994c:	d106      	bne.n	801995c <tcp_output+0x1c>
 801994e:	4b8a      	ldr	r3, [pc, #552]	; (8019b78 <tcp_output+0x238>)
 8019950:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019954:	4989      	ldr	r1, [pc, #548]	; (8019b7c <tcp_output+0x23c>)
 8019956:	488a      	ldr	r0, [pc, #552]	; (8019b80 <tcp_output+0x240>)
 8019958:	f007 fd2e 	bl	80213b8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	7d1b      	ldrb	r3, [r3, #20]
 8019960:	2b01      	cmp	r3, #1
 8019962:	d106      	bne.n	8019972 <tcp_output+0x32>
 8019964:	4b84      	ldr	r3, [pc, #528]	; (8019b78 <tcp_output+0x238>)
 8019966:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801996a:	4986      	ldr	r1, [pc, #536]	; (8019b84 <tcp_output+0x244>)
 801996c:	4884      	ldr	r0, [pc, #528]	; (8019b80 <tcp_output+0x240>)
 801996e:	f007 fd23 	bl	80213b8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019972:	4b85      	ldr	r3, [pc, #532]	; (8019b88 <tcp_output+0x248>)
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	687a      	ldr	r2, [r7, #4]
 8019978:	429a      	cmp	r2, r3
 801997a:	d101      	bne.n	8019980 <tcp_output+0x40>
    return ERR_OK;
 801997c:	2300      	movs	r3, #0
 801997e:	e1ce      	b.n	8019d1e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801998c:	4293      	cmp	r3, r2
 801998e:	bf28      	it	cs
 8019990:	4613      	movcs	r3, r2
 8019992:	b29b      	uxth	r3, r3
 8019994:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801999a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801999c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d10b      	bne.n	80199ba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	8b5b      	ldrh	r3, [r3, #26]
 80199a6:	f003 0302 	and.w	r3, r3, #2
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	f000 81aa 	beq.w	8019d04 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80199b0:	6878      	ldr	r0, [r7, #4]
 80199b2:	f000 fdcb 	bl	801a54c <tcp_send_empty_ack>
 80199b6:	4603      	mov	r3, r0
 80199b8:	e1b1      	b.n	8019d1e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80199ba:	6879      	ldr	r1, [r7, #4]
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	3304      	adds	r3, #4
 80199c0:	461a      	mov	r2, r3
 80199c2:	6878      	ldr	r0, [r7, #4]
 80199c4:	f7ff f824 	bl	8018a10 <tcp_route>
 80199c8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80199ca:	697b      	ldr	r3, [r7, #20]
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	d102      	bne.n	80199d6 <tcp_output+0x96>
    return ERR_RTE;
 80199d0:	f06f 0303 	mvn.w	r3, #3
 80199d4:	e1a3      	b.n	8019d1e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d003      	beq.n	80199e4 <tcp_output+0xa4>
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	2b00      	cmp	r3, #0
 80199e2:	d111      	bne.n	8019a08 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80199e4:	697b      	ldr	r3, [r7, #20]
 80199e6:	2b00      	cmp	r3, #0
 80199e8:	d002      	beq.n	80199f0 <tcp_output+0xb0>
 80199ea:	697b      	ldr	r3, [r7, #20]
 80199ec:	3304      	adds	r3, #4
 80199ee:	e000      	b.n	80199f2 <tcp_output+0xb2>
 80199f0:	2300      	movs	r3, #0
 80199f2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80199f4:	693b      	ldr	r3, [r7, #16]
 80199f6:	2b00      	cmp	r3, #0
 80199f8:	d102      	bne.n	8019a00 <tcp_output+0xc0>
      return ERR_RTE;
 80199fa:	f06f 0303 	mvn.w	r3, #3
 80199fe:	e18e      	b.n	8019d1e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019a00:	693b      	ldr	r3, [r7, #16]
 8019a02:	681a      	ldr	r2, [r3, #0]
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a0a:	68db      	ldr	r3, [r3, #12]
 8019a0c:	685b      	ldr	r3, [r3, #4]
 8019a0e:	4618      	mov	r0, r3
 8019a10:	f7f8 ffa5 	bl	801295e <lwip_htonl>
 8019a14:	4602      	mov	r2, r0
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019a1a:	1ad3      	subs	r3, r2, r3
 8019a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019a1e:	8912      	ldrh	r2, [r2, #8]
 8019a20:	4413      	add	r3, r2
 8019a22:	69ba      	ldr	r2, [r7, #24]
 8019a24:	429a      	cmp	r2, r3
 8019a26:	d227      	bcs.n	8019a78 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019a2e:	461a      	mov	r2, r3
 8019a30:	69bb      	ldr	r3, [r7, #24]
 8019a32:	4293      	cmp	r3, r2
 8019a34:	d114      	bne.n	8019a60 <tcp_output+0x120>
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d110      	bne.n	8019a60 <tcp_output+0x120>
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8019a44:	2b00      	cmp	r3, #0
 8019a46:	d10b      	bne.n	8019a60 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	2200      	movs	r2, #0
 8019a4c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
      pcb->persist_backoff = 1;
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	2201      	movs	r2, #1
 8019a54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
      pcb->persist_probe = 0;
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	2200      	movs	r2, #0
 8019a5c:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	8b5b      	ldrh	r3, [r3, #26]
 8019a64:	f003 0302 	and.w	r3, r3, #2
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	f000 814d 	beq.w	8019d08 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019a6e:	6878      	ldr	r0, [r7, #4]
 8019a70:	f000 fd6c 	bl	801a54c <tcp_send_empty_ack>
 8019a74:	4603      	mov	r3, r0
 8019a76:	e152      	b.n	8019d1e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	2200      	movs	r2, #0
 8019a7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019a84:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019a86:	6a3b      	ldr	r3, [r7, #32]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	f000 811c 	beq.w	8019cc6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019a8e:	e002      	b.n	8019a96 <tcp_output+0x156>
 8019a90:	6a3b      	ldr	r3, [r7, #32]
 8019a92:	681b      	ldr	r3, [r3, #0]
 8019a94:	623b      	str	r3, [r7, #32]
 8019a96:	6a3b      	ldr	r3, [r7, #32]
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d1f8      	bne.n	8019a90 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019a9e:	e112      	b.n	8019cc6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019aa2:	68db      	ldr	r3, [r3, #12]
 8019aa4:	899b      	ldrh	r3, [r3, #12]
 8019aa6:	b29b      	uxth	r3, r3
 8019aa8:	4618      	mov	r0, r3
 8019aaa:	f7f8 ff43 	bl	8012934 <lwip_htons>
 8019aae:	4603      	mov	r3, r0
 8019ab0:	b2db      	uxtb	r3, r3
 8019ab2:	f003 0304 	and.w	r3, r3, #4
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d006      	beq.n	8019ac8 <tcp_output+0x188>
 8019aba:	4b2f      	ldr	r3, [pc, #188]	; (8019b78 <tcp_output+0x238>)
 8019abc:	f240 5236 	movw	r2, #1334	; 0x536
 8019ac0:	4932      	ldr	r1, [pc, #200]	; (8019b8c <tcp_output+0x24c>)
 8019ac2:	482f      	ldr	r0, [pc, #188]	; (8019b80 <tcp_output+0x240>)
 8019ac4:	f007 fc78 	bl	80213b8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d01f      	beq.n	8019b10 <tcp_output+0x1d0>
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	8b5b      	ldrh	r3, [r3, #26]
 8019ad4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d119      	bne.n	8019b10 <tcp_output+0x1d0>
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d00b      	beq.n	8019afc <tcp_output+0x1bc>
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d110      	bne.n	8019b10 <tcp_output+0x1d0>
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019af2:	891a      	ldrh	r2, [r3, #8]
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d209      	bcs.n	8019b10 <tcp_output+0x1d0>
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d004      	beq.n	8019b10 <tcp_output+0x1d0>
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019b0c:	2b08      	cmp	r3, #8
 8019b0e:	d901      	bls.n	8019b14 <tcp_output+0x1d4>
 8019b10:	2301      	movs	r3, #1
 8019b12:	e000      	b.n	8019b16 <tcp_output+0x1d6>
 8019b14:	2300      	movs	r3, #0
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d106      	bne.n	8019b28 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	8b5b      	ldrh	r3, [r3, #26]
 8019b1e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	f000 80e4 	beq.w	8019cf0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	7d1b      	ldrb	r3, [r3, #20]
 8019b2c:	2b02      	cmp	r3, #2
 8019b2e:	d00d      	beq.n	8019b4c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b32:	68db      	ldr	r3, [r3, #12]
 8019b34:	899b      	ldrh	r3, [r3, #12]
 8019b36:	b29c      	uxth	r4, r3
 8019b38:	2010      	movs	r0, #16
 8019b3a:	f7f8 fefb 	bl	8012934 <lwip_htons>
 8019b3e:	4603      	mov	r3, r0
 8019b40:	461a      	mov	r2, r3
 8019b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b44:	68db      	ldr	r3, [r3, #12]
 8019b46:	4322      	orrs	r2, r4
 8019b48:	b292      	uxth	r2, r2
 8019b4a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019b4c:	697a      	ldr	r2, [r7, #20]
 8019b4e:	6879      	ldr	r1, [r7, #4]
 8019b50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b52:	f000 f909 	bl	8019d68 <tcp_output_segment>
 8019b56:	4603      	mov	r3, r0
 8019b58:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019b5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d016      	beq.n	8019b90 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	8b5b      	ldrh	r3, [r3, #26]
 8019b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019b6a:	b29a      	uxth	r2, r3
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	835a      	strh	r2, [r3, #26]
      return err;
 8019b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b74:	e0d3      	b.n	8019d1e <tcp_output+0x3de>
 8019b76:	bf00      	nop
 8019b78:	08025744 	.word	0x08025744
 8019b7c:	08025c88 	.word	0x08025c88
 8019b80:	08025798 	.word	0x08025798
 8019b84:	08025ca0 	.word	0x08025ca0
 8019b88:	2001231c 	.word	0x2001231c
 8019b8c:	08025cc8 	.word	0x08025cc8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b92:	681a      	ldr	r2, [r3, #0]
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	7d1b      	ldrb	r3, [r3, #20]
 8019b9c:	2b02      	cmp	r3, #2
 8019b9e:	d006      	beq.n	8019bae <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	8b5b      	ldrh	r3, [r3, #26]
 8019ba4:	f023 0303 	bic.w	r3, r3, #3
 8019ba8:	b29a      	uxth	r2, r3
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bb0:	68db      	ldr	r3, [r3, #12]
 8019bb2:	685b      	ldr	r3, [r3, #4]
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	f7f8 fed2 	bl	801295e <lwip_htonl>
 8019bba:	4604      	mov	r4, r0
 8019bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bbe:	891b      	ldrh	r3, [r3, #8]
 8019bc0:	461d      	mov	r5, r3
 8019bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bc4:	68db      	ldr	r3, [r3, #12]
 8019bc6:	899b      	ldrh	r3, [r3, #12]
 8019bc8:	b29b      	uxth	r3, r3
 8019bca:	4618      	mov	r0, r3
 8019bcc:	f7f8 feb2 	bl	8012934 <lwip_htons>
 8019bd0:	4603      	mov	r3, r0
 8019bd2:	b2db      	uxtb	r3, r3
 8019bd4:	f003 0303 	and.w	r3, r3, #3
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d001      	beq.n	8019be0 <tcp_output+0x2a0>
 8019bdc:	2301      	movs	r3, #1
 8019bde:	e000      	b.n	8019be2 <tcp_output+0x2a2>
 8019be0:	2300      	movs	r3, #0
 8019be2:	442b      	add	r3, r5
 8019be4:	4423      	add	r3, r4
 8019be6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019bec:	68bb      	ldr	r3, [r7, #8]
 8019bee:	1ad3      	subs	r3, r2, r3
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	da02      	bge.n	8019bfa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019bf4:	687b      	ldr	r3, [r7, #4]
 8019bf6:	68ba      	ldr	r2, [r7, #8]
 8019bf8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bfc:	891b      	ldrh	r3, [r3, #8]
 8019bfe:	461c      	mov	r4, r3
 8019c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c02:	68db      	ldr	r3, [r3, #12]
 8019c04:	899b      	ldrh	r3, [r3, #12]
 8019c06:	b29b      	uxth	r3, r3
 8019c08:	4618      	mov	r0, r3
 8019c0a:	f7f8 fe93 	bl	8012934 <lwip_htons>
 8019c0e:	4603      	mov	r3, r0
 8019c10:	b2db      	uxtb	r3, r3
 8019c12:	f003 0303 	and.w	r3, r3, #3
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	d001      	beq.n	8019c1e <tcp_output+0x2de>
 8019c1a:	2301      	movs	r3, #1
 8019c1c:	e000      	b.n	8019c20 <tcp_output+0x2e0>
 8019c1e:	2300      	movs	r3, #0
 8019c20:	4423      	add	r3, r4
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d049      	beq.n	8019cba <tcp_output+0x37a>
      seg->next = NULL;
 8019c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c28:	2200      	movs	r2, #0
 8019c2a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d105      	bne.n	8019c40 <tcp_output+0x300>
        pcb->unacked = seg;
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c38:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3c:	623b      	str	r3, [r7, #32]
 8019c3e:	e03f      	b.n	8019cc0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c42:	68db      	ldr	r3, [r3, #12]
 8019c44:	685b      	ldr	r3, [r3, #4]
 8019c46:	4618      	mov	r0, r3
 8019c48:	f7f8 fe89 	bl	801295e <lwip_htonl>
 8019c4c:	4604      	mov	r4, r0
 8019c4e:	6a3b      	ldr	r3, [r7, #32]
 8019c50:	68db      	ldr	r3, [r3, #12]
 8019c52:	685b      	ldr	r3, [r3, #4]
 8019c54:	4618      	mov	r0, r3
 8019c56:	f7f8 fe82 	bl	801295e <lwip_htonl>
 8019c5a:	4603      	mov	r3, r0
 8019c5c:	1ae3      	subs	r3, r4, r3
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	da24      	bge.n	8019cac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	3370      	adds	r3, #112	; 0x70
 8019c66:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019c68:	e002      	b.n	8019c70 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019c6a:	69fb      	ldr	r3, [r7, #28]
 8019c6c:	681b      	ldr	r3, [r3, #0]
 8019c6e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019c70:	69fb      	ldr	r3, [r7, #28]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d011      	beq.n	8019c9c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019c78:	69fb      	ldr	r3, [r7, #28]
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	68db      	ldr	r3, [r3, #12]
 8019c7e:	685b      	ldr	r3, [r3, #4]
 8019c80:	4618      	mov	r0, r3
 8019c82:	f7f8 fe6c 	bl	801295e <lwip_htonl>
 8019c86:	4604      	mov	r4, r0
 8019c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8a:	68db      	ldr	r3, [r3, #12]
 8019c8c:	685b      	ldr	r3, [r3, #4]
 8019c8e:	4618      	mov	r0, r3
 8019c90:	f7f8 fe65 	bl	801295e <lwip_htonl>
 8019c94:	4603      	mov	r3, r0
 8019c96:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019c98:	2b00      	cmp	r3, #0
 8019c9a:	dbe6      	blt.n	8019c6a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019c9c:	69fb      	ldr	r3, [r7, #28]
 8019c9e:	681a      	ldr	r2, [r3, #0]
 8019ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ca2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019ca4:	69fb      	ldr	r3, [r7, #28]
 8019ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ca8:	601a      	str	r2, [r3, #0]
 8019caa:	e009      	b.n	8019cc0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019cac:	6a3b      	ldr	r3, [r7, #32]
 8019cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019cb0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019cb2:	6a3b      	ldr	r3, [r7, #32]
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	623b      	str	r3, [r7, #32]
 8019cb8:	e002      	b.n	8019cc0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019cbc:	f7fb ff01 	bl	8015ac2 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cc4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8019cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d012      	beq.n	8019cf2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cce:	68db      	ldr	r3, [r3, #12]
 8019cd0:	685b      	ldr	r3, [r3, #4]
 8019cd2:	4618      	mov	r0, r3
 8019cd4:	f7f8 fe43 	bl	801295e <lwip_htonl>
 8019cd8:	4602      	mov	r2, r0
 8019cda:	687b      	ldr	r3, [r7, #4]
 8019cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cde:	1ad3      	subs	r3, r2, r3
 8019ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ce2:	8912      	ldrh	r2, [r2, #8]
 8019ce4:	4413      	add	r3, r2
  while (seg != NULL &&
 8019ce6:	69ba      	ldr	r2, [r7, #24]
 8019ce8:	429a      	cmp	r2, r3
 8019cea:	f4bf aed9 	bcs.w	8019aa0 <tcp_output+0x160>
 8019cee:	e000      	b.n	8019cf2 <tcp_output+0x3b2>
      break;
 8019cf0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019cf2:	687b      	ldr	r3, [r7, #4]
 8019cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d108      	bne.n	8019d0c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	2200      	movs	r2, #0
 8019cfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8019d02:	e004      	b.n	8019d0e <tcp_output+0x3ce>
    goto output_done;
 8019d04:	bf00      	nop
 8019d06:	e002      	b.n	8019d0e <tcp_output+0x3ce>
    goto output_done;
 8019d08:	bf00      	nop
 8019d0a:	e000      	b.n	8019d0e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019d0c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	8b5b      	ldrh	r3, [r3, #26]
 8019d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019d16:	b29a      	uxth	r2, r3
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019d1c:	2300      	movs	r3, #0
}
 8019d1e:	4618      	mov	r0, r3
 8019d20:	3728      	adds	r7, #40	; 0x28
 8019d22:	46bd      	mov	sp, r7
 8019d24:	bdb0      	pop	{r4, r5, r7, pc}
 8019d26:	bf00      	nop

08019d28 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019d28:	b580      	push	{r7, lr}
 8019d2a:	b082      	sub	sp, #8
 8019d2c:	af00      	add	r7, sp, #0
 8019d2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d106      	bne.n	8019d44 <tcp_output_segment_busy+0x1c>
 8019d36:	4b09      	ldr	r3, [pc, #36]	; (8019d5c <tcp_output_segment_busy+0x34>)
 8019d38:	f240 529a 	movw	r2, #1434	; 0x59a
 8019d3c:	4908      	ldr	r1, [pc, #32]	; (8019d60 <tcp_output_segment_busy+0x38>)
 8019d3e:	4809      	ldr	r0, [pc, #36]	; (8019d64 <tcp_output_segment_busy+0x3c>)
 8019d40:	f007 fb3a 	bl	80213b8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	685b      	ldr	r3, [r3, #4]
 8019d48:	7b9b      	ldrb	r3, [r3, #14]
 8019d4a:	2b01      	cmp	r3, #1
 8019d4c:	d001      	beq.n	8019d52 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019d4e:	2301      	movs	r3, #1
 8019d50:	e000      	b.n	8019d54 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019d52:	2300      	movs	r3, #0
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	3708      	adds	r7, #8
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	bd80      	pop	{r7, pc}
 8019d5c:	08025744 	.word	0x08025744
 8019d60:	08025ce0 	.word	0x08025ce0
 8019d64:	08025798 	.word	0x08025798

08019d68 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019d68:	b5b0      	push	{r4, r5, r7, lr}
 8019d6a:	b08c      	sub	sp, #48	; 0x30
 8019d6c:	af04      	add	r7, sp, #16
 8019d6e:	60f8      	str	r0, [r7, #12]
 8019d70:	60b9      	str	r1, [r7, #8]
 8019d72:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019d74:	68fb      	ldr	r3, [r7, #12]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d106      	bne.n	8019d88 <tcp_output_segment+0x20>
 8019d7a:	4b64      	ldr	r3, [pc, #400]	; (8019f0c <tcp_output_segment+0x1a4>)
 8019d7c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8019d80:	4963      	ldr	r1, [pc, #396]	; (8019f10 <tcp_output_segment+0x1a8>)
 8019d82:	4864      	ldr	r0, [pc, #400]	; (8019f14 <tcp_output_segment+0x1ac>)
 8019d84:	f007 fb18 	bl	80213b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8019d88:	68bb      	ldr	r3, [r7, #8]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d106      	bne.n	8019d9c <tcp_output_segment+0x34>
 8019d8e:	4b5f      	ldr	r3, [pc, #380]	; (8019f0c <tcp_output_segment+0x1a4>)
 8019d90:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8019d94:	4960      	ldr	r1, [pc, #384]	; (8019f18 <tcp_output_segment+0x1b0>)
 8019d96:	485f      	ldr	r0, [pc, #380]	; (8019f14 <tcp_output_segment+0x1ac>)
 8019d98:	f007 fb0e 	bl	80213b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	2b00      	cmp	r3, #0
 8019da0:	d106      	bne.n	8019db0 <tcp_output_segment+0x48>
 8019da2:	4b5a      	ldr	r3, [pc, #360]	; (8019f0c <tcp_output_segment+0x1a4>)
 8019da4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8019da8:	495c      	ldr	r1, [pc, #368]	; (8019f1c <tcp_output_segment+0x1b4>)
 8019daa:	485a      	ldr	r0, [pc, #360]	; (8019f14 <tcp_output_segment+0x1ac>)
 8019dac:	f007 fb04 	bl	80213b8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8019db0:	68f8      	ldr	r0, [r7, #12]
 8019db2:	f7ff ffb9 	bl	8019d28 <tcp_output_segment_busy>
 8019db6:	4603      	mov	r3, r0
 8019db8:	2b00      	cmp	r3, #0
 8019dba:	d001      	beq.n	8019dc0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8019dbc:	2300      	movs	r3, #0
 8019dbe:	e0a1      	b.n	8019f04 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8019dc0:	68bb      	ldr	r3, [r7, #8]
 8019dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019dc4:	68fb      	ldr	r3, [r7, #12]
 8019dc6:	68dc      	ldr	r4, [r3, #12]
 8019dc8:	4610      	mov	r0, r2
 8019dca:	f7f8 fdc8 	bl	801295e <lwip_htonl>
 8019dce:	4603      	mov	r3, r0
 8019dd0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8019dd2:	68bb      	ldr	r3, [r7, #8]
 8019dd4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	68dc      	ldr	r4, [r3, #12]
 8019dda:	4610      	mov	r0, r2
 8019ddc:	f7f8 fdaa 	bl	8012934 <lwip_htons>
 8019de0:	4603      	mov	r3, r0
 8019de2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8019de4:	68bb      	ldr	r3, [r7, #8]
 8019de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019de8:	68ba      	ldr	r2, [r7, #8]
 8019dea:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019dec:	441a      	add	r2, r3
 8019dee:	68bb      	ldr	r3, [r7, #8]
 8019df0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	68db      	ldr	r3, [r3, #12]
 8019df6:	3314      	adds	r3, #20
 8019df8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	7a9b      	ldrb	r3, [r3, #10]
 8019dfe:	f003 0301 	and.w	r3, r3, #1
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d015      	beq.n	8019e32 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8019e06:	68bb      	ldr	r3, [r7, #8]
 8019e08:	3304      	adds	r3, #4
 8019e0a:	461a      	mov	r2, r3
 8019e0c:	6879      	ldr	r1, [r7, #4]
 8019e0e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8019e12:	f7fc fa25 	bl	8016260 <tcp_eff_send_mss_netif>
 8019e16:	4603      	mov	r3, r0
 8019e18:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8019e1a:	8b7b      	ldrh	r3, [r7, #26]
 8019e1c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8019e20:	4618      	mov	r0, r3
 8019e22:	f7f8 fd9c 	bl	801295e <lwip_htonl>
 8019e26:	4602      	mov	r2, r0
 8019e28:	69fb      	ldr	r3, [r7, #28]
 8019e2a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8019e2c:	69fb      	ldr	r3, [r7, #28]
 8019e2e:	3304      	adds	r3, #4
 8019e30:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8019e32:	68bb      	ldr	r3, [r7, #8]
 8019e34:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8019e38:	2b00      	cmp	r3, #0
 8019e3a:	da02      	bge.n	8019e42 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8019e3c:	68bb      	ldr	r3, [r7, #8]
 8019e3e:	2200      	movs	r2, #0
 8019e40:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8019e42:	68bb      	ldr	r3, [r7, #8]
 8019e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e46:	2b00      	cmp	r3, #0
 8019e48:	d10c      	bne.n	8019e64 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8019e4a:	4b35      	ldr	r3, [pc, #212]	; (8019f20 <tcp_output_segment+0x1b8>)
 8019e4c:	681a      	ldr	r2, [r3, #0]
 8019e4e:	68bb      	ldr	r3, [r7, #8]
 8019e50:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8019e52:	68fb      	ldr	r3, [r7, #12]
 8019e54:	68db      	ldr	r3, [r3, #12]
 8019e56:	685b      	ldr	r3, [r3, #4]
 8019e58:	4618      	mov	r0, r3
 8019e5a:	f7f8 fd80 	bl	801295e <lwip_htonl>
 8019e5e:	4602      	mov	r2, r0
 8019e60:	68bb      	ldr	r3, [r7, #8]
 8019e62:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8019e64:	68fb      	ldr	r3, [r7, #12]
 8019e66:	68da      	ldr	r2, [r3, #12]
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	685b      	ldr	r3, [r3, #4]
 8019e6c:	685b      	ldr	r3, [r3, #4]
 8019e6e:	1ad3      	subs	r3, r2, r3
 8019e70:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	685b      	ldr	r3, [r3, #4]
 8019e76:	8959      	ldrh	r1, [r3, #10]
 8019e78:	68fb      	ldr	r3, [r7, #12]
 8019e7a:	685b      	ldr	r3, [r3, #4]
 8019e7c:	8b3a      	ldrh	r2, [r7, #24]
 8019e7e:	1a8a      	subs	r2, r1, r2
 8019e80:	b292      	uxth	r2, r2
 8019e82:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8019e84:	68fb      	ldr	r3, [r7, #12]
 8019e86:	685b      	ldr	r3, [r3, #4]
 8019e88:	8919      	ldrh	r1, [r3, #8]
 8019e8a:	68fb      	ldr	r3, [r7, #12]
 8019e8c:	685b      	ldr	r3, [r3, #4]
 8019e8e:	8b3a      	ldrh	r2, [r7, #24]
 8019e90:	1a8a      	subs	r2, r1, r2
 8019e92:	b292      	uxth	r2, r2
 8019e94:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	685b      	ldr	r3, [r3, #4]
 8019e9a:	68fa      	ldr	r2, [r7, #12]
 8019e9c:	68d2      	ldr	r2, [r2, #12]
 8019e9e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	68db      	ldr	r3, [r3, #12]
 8019ea4:	2200      	movs	r2, #0
 8019ea6:	741a      	strb	r2, [r3, #16]
 8019ea8:	2200      	movs	r2, #0
 8019eaa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8019eac:	68fb      	ldr	r3, [r7, #12]
 8019eae:	68da      	ldr	r2, [r3, #12]
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	7a9b      	ldrb	r3, [r3, #10]
 8019eb4:	f003 0301 	and.w	r3, r3, #1
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d001      	beq.n	8019ec0 <tcp_output_segment+0x158>
 8019ebc:	2318      	movs	r3, #24
 8019ebe:	e000      	b.n	8019ec2 <tcp_output_segment+0x15a>
 8019ec0:	2314      	movs	r3, #20
 8019ec2:	4413      	add	r3, r2
 8019ec4:	69fa      	ldr	r2, [r7, #28]
 8019ec6:	429a      	cmp	r2, r3
 8019ec8:	d006      	beq.n	8019ed8 <tcp_output_segment+0x170>
 8019eca:	4b10      	ldr	r3, [pc, #64]	; (8019f0c <tcp_output_segment+0x1a4>)
 8019ecc:	f240 621c 	movw	r2, #1564	; 0x61c
 8019ed0:	4914      	ldr	r1, [pc, #80]	; (8019f24 <tcp_output_segment+0x1bc>)
 8019ed2:	4810      	ldr	r0, [pc, #64]	; (8019f14 <tcp_output_segment+0x1ac>)
 8019ed4:	f007 fa70 	bl	80213b8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	6858      	ldr	r0, [r3, #4]
 8019edc:	68b9      	ldr	r1, [r7, #8]
 8019ede:	68bb      	ldr	r3, [r7, #8]
 8019ee0:	1d1c      	adds	r4, r3, #4
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	7add      	ldrb	r5, [r3, #11]
 8019ee6:	68bb      	ldr	r3, [r7, #8]
 8019ee8:	7a9b      	ldrb	r3, [r3, #10]
 8019eea:	687a      	ldr	r2, [r7, #4]
 8019eec:	9202      	str	r2, [sp, #8]
 8019eee:	2206      	movs	r2, #6
 8019ef0:	9201      	str	r2, [sp, #4]
 8019ef2:	9300      	str	r3, [sp, #0]
 8019ef4:	462b      	mov	r3, r5
 8019ef6:	4622      	mov	r2, r4
 8019ef8:	f004 fc3e 	bl	801e778 <ip4_output_if>
 8019efc:	4603      	mov	r3, r0
 8019efe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8019f00:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019f04:	4618      	mov	r0, r3
 8019f06:	3720      	adds	r7, #32
 8019f08:	46bd      	mov	sp, r7
 8019f0a:	bdb0      	pop	{r4, r5, r7, pc}
 8019f0c:	08025744 	.word	0x08025744
 8019f10:	08025d08 	.word	0x08025d08
 8019f14:	08025798 	.word	0x08025798
 8019f18:	08025d28 	.word	0x08025d28
 8019f1c:	08025d48 	.word	0x08025d48
 8019f20:	200122d0 	.word	0x200122d0
 8019f24:	08025d6c 	.word	0x08025d6c

08019f28 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8019f28:	b5b0      	push	{r4, r5, r7, lr}
 8019f2a:	b084      	sub	sp, #16
 8019f2c:	af00      	add	r7, sp, #0
 8019f2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8019f30:	687b      	ldr	r3, [r7, #4]
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d106      	bne.n	8019f44 <tcp_rexmit_rto_prepare+0x1c>
 8019f36:	4b31      	ldr	r3, [pc, #196]	; (8019ffc <tcp_rexmit_rto_prepare+0xd4>)
 8019f38:	f240 6263 	movw	r2, #1635	; 0x663
 8019f3c:	4930      	ldr	r1, [pc, #192]	; (801a000 <tcp_rexmit_rto_prepare+0xd8>)
 8019f3e:	4831      	ldr	r0, [pc, #196]	; (801a004 <tcp_rexmit_rto_prepare+0xdc>)
 8019f40:	f007 fa3a 	bl	80213b8 <iprintf>

  if (pcb->unacked == NULL) {
 8019f44:	687b      	ldr	r3, [r7, #4]
 8019f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f48:	2b00      	cmp	r3, #0
 8019f4a:	d102      	bne.n	8019f52 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8019f4c:	f06f 0305 	mvn.w	r3, #5
 8019f50:	e050      	b.n	8019ff4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019f56:	60fb      	str	r3, [r7, #12]
 8019f58:	e00b      	b.n	8019f72 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8019f5a:	68f8      	ldr	r0, [r7, #12]
 8019f5c:	f7ff fee4 	bl	8019d28 <tcp_output_segment_busy>
 8019f60:	4603      	mov	r3, r0
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d002      	beq.n	8019f6c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8019f66:	f06f 0305 	mvn.w	r3, #5
 8019f6a:	e043      	b.n	8019ff4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8019f6c:	68fb      	ldr	r3, [r7, #12]
 8019f6e:	681b      	ldr	r3, [r3, #0]
 8019f70:	60fb      	str	r3, [r7, #12]
 8019f72:	68fb      	ldr	r3, [r7, #12]
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	2b00      	cmp	r3, #0
 8019f78:	d1ef      	bne.n	8019f5a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8019f7a:	68f8      	ldr	r0, [r7, #12]
 8019f7c:	f7ff fed4 	bl	8019d28 <tcp_output_segment_busy>
 8019f80:	4603      	mov	r3, r0
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d002      	beq.n	8019f8c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8019f86:	f06f 0305 	mvn.w	r3, #5
 8019f8a:	e033      	b.n	8019ff4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	2200      	movs	r2, #0
 8019fa0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8019fa2:	687b      	ldr	r3, [r7, #4]
 8019fa4:	8b5b      	ldrh	r3, [r3, #26]
 8019fa6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019faa:	b29a      	uxth	r2, r3
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	68db      	ldr	r3, [r3, #12]
 8019fb4:	685b      	ldr	r3, [r3, #4]
 8019fb6:	4618      	mov	r0, r3
 8019fb8:	f7f8 fcd1 	bl	801295e <lwip_htonl>
 8019fbc:	4604      	mov	r4, r0
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	891b      	ldrh	r3, [r3, #8]
 8019fc2:	461d      	mov	r5, r3
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	68db      	ldr	r3, [r3, #12]
 8019fc8:	899b      	ldrh	r3, [r3, #12]
 8019fca:	b29b      	uxth	r3, r3
 8019fcc:	4618      	mov	r0, r3
 8019fce:	f7f8 fcb1 	bl	8012934 <lwip_htons>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	b2db      	uxtb	r3, r3
 8019fd6:	f003 0303 	and.w	r3, r3, #3
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d001      	beq.n	8019fe2 <tcp_rexmit_rto_prepare+0xba>
 8019fde:	2301      	movs	r3, #1
 8019fe0:	e000      	b.n	8019fe4 <tcp_rexmit_rto_prepare+0xbc>
 8019fe2:	2300      	movs	r3, #0
 8019fe4:	442b      	add	r3, r5
 8019fe6:	18e2      	adds	r2, r4, r3
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	2200      	movs	r2, #0
 8019ff0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8019ff2:	2300      	movs	r3, #0
}
 8019ff4:	4618      	mov	r0, r3
 8019ff6:	3710      	adds	r7, #16
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8019ffc:	08025744 	.word	0x08025744
 801a000:	08025d80 	.word	0x08025d80
 801a004:	08025798 	.word	0x08025798

0801a008 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b082      	sub	sp, #8
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	2b00      	cmp	r3, #0
 801a014:	d106      	bne.n	801a024 <tcp_rexmit_rto_commit+0x1c>
 801a016:	4b0d      	ldr	r3, [pc, #52]	; (801a04c <tcp_rexmit_rto_commit+0x44>)
 801a018:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a01c:	490c      	ldr	r1, [pc, #48]	; (801a050 <tcp_rexmit_rto_commit+0x48>)
 801a01e:	480d      	ldr	r0, [pc, #52]	; (801a054 <tcp_rexmit_rto_commit+0x4c>)
 801a020:	f007 f9ca 	bl	80213b8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a02a:	2bff      	cmp	r3, #255	; 0xff
 801a02c:	d007      	beq.n	801a03e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a034:	3301      	adds	r3, #1
 801a036:	b2da      	uxtb	r2, r3
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a03e:	6878      	ldr	r0, [r7, #4]
 801a040:	f7ff fc7e 	bl	8019940 <tcp_output>
}
 801a044:	bf00      	nop
 801a046:	3708      	adds	r7, #8
 801a048:	46bd      	mov	sp, r7
 801a04a:	bd80      	pop	{r7, pc}
 801a04c:	08025744 	.word	0x08025744
 801a050:	08025da4 	.word	0x08025da4
 801a054:	08025798 	.word	0x08025798

0801a058 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a058:	b580      	push	{r7, lr}
 801a05a:	b082      	sub	sp, #8
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	2b00      	cmp	r3, #0
 801a064:	d106      	bne.n	801a074 <tcp_rexmit_rto+0x1c>
 801a066:	4b0a      	ldr	r3, [pc, #40]	; (801a090 <tcp_rexmit_rto+0x38>)
 801a068:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801a06c:	4909      	ldr	r1, [pc, #36]	; (801a094 <tcp_rexmit_rto+0x3c>)
 801a06e:	480a      	ldr	r0, [pc, #40]	; (801a098 <tcp_rexmit_rto+0x40>)
 801a070:	f007 f9a2 	bl	80213b8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a074:	6878      	ldr	r0, [r7, #4]
 801a076:	f7ff ff57 	bl	8019f28 <tcp_rexmit_rto_prepare>
 801a07a:	4603      	mov	r3, r0
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d102      	bne.n	801a086 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a080:	6878      	ldr	r0, [r7, #4]
 801a082:	f7ff ffc1 	bl	801a008 <tcp_rexmit_rto_commit>
  }
}
 801a086:	bf00      	nop
 801a088:	3708      	adds	r7, #8
 801a08a:	46bd      	mov	sp, r7
 801a08c:	bd80      	pop	{r7, pc}
 801a08e:	bf00      	nop
 801a090:	08025744 	.word	0x08025744
 801a094:	08025dc8 	.word	0x08025dc8
 801a098:	08025798 	.word	0x08025798

0801a09c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a09c:	b590      	push	{r4, r7, lr}
 801a09e:	b085      	sub	sp, #20
 801a0a0:	af00      	add	r7, sp, #0
 801a0a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d106      	bne.n	801a0b8 <tcp_rexmit+0x1c>
 801a0aa:	4b2f      	ldr	r3, [pc, #188]	; (801a168 <tcp_rexmit+0xcc>)
 801a0ac:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a0b0:	492e      	ldr	r1, [pc, #184]	; (801a16c <tcp_rexmit+0xd0>)
 801a0b2:	482f      	ldr	r0, [pc, #188]	; (801a170 <tcp_rexmit+0xd4>)
 801a0b4:	f007 f980 	bl	80213b8 <iprintf>

  if (pcb->unacked == NULL) {
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0bc:	2b00      	cmp	r3, #0
 801a0be:	d102      	bne.n	801a0c6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a0c0:	f06f 0305 	mvn.w	r3, #5
 801a0c4:	e04c      	b.n	801a160 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a0ca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a0cc:	68b8      	ldr	r0, [r7, #8]
 801a0ce:	f7ff fe2b 	bl	8019d28 <tcp_output_segment_busy>
 801a0d2:	4603      	mov	r3, r0
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d002      	beq.n	801a0de <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a0d8:	f06f 0305 	mvn.w	r3, #5
 801a0dc:	e040      	b.n	801a160 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a0de:	68bb      	ldr	r3, [r7, #8]
 801a0e0:	681a      	ldr	r2, [r3, #0]
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801a0e6:	687b      	ldr	r3, [r7, #4]
 801a0e8:	336c      	adds	r3, #108	; 0x6c
 801a0ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a0ec:	e002      	b.n	801a0f4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a0f4:	68fb      	ldr	r3, [r7, #12]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	2b00      	cmp	r3, #0
 801a0fa:	d011      	beq.n	801a120 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	68db      	ldr	r3, [r3, #12]
 801a102:	685b      	ldr	r3, [r3, #4]
 801a104:	4618      	mov	r0, r3
 801a106:	f7f8 fc2a 	bl	801295e <lwip_htonl>
 801a10a:	4604      	mov	r4, r0
 801a10c:	68bb      	ldr	r3, [r7, #8]
 801a10e:	68db      	ldr	r3, [r3, #12]
 801a110:	685b      	ldr	r3, [r3, #4]
 801a112:	4618      	mov	r0, r3
 801a114:	f7f8 fc23 	bl	801295e <lwip_htonl>
 801a118:	4603      	mov	r3, r0
 801a11a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	dbe6      	blt.n	801a0ee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	681a      	ldr	r2, [r3, #0]
 801a124:	68bb      	ldr	r3, [r7, #8]
 801a126:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	68ba      	ldr	r2, [r7, #8]
 801a12c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a12e:	68bb      	ldr	r3, [r7, #8]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	2b00      	cmp	r3, #0
 801a134:	d103      	bne.n	801a13e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	2200      	movs	r2, #0
 801a13a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a13e:	687b      	ldr	r3, [r7, #4]
 801a140:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a144:	2bff      	cmp	r3, #255	; 0xff
 801a146:	d007      	beq.n	801a158 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a148:	687b      	ldr	r3, [r7, #4]
 801a14a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a14e:	3301      	adds	r3, #1
 801a150:	b2da      	uxtb	r2, r3
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	2200      	movs	r2, #0
 801a15c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a15e:	2300      	movs	r3, #0
}
 801a160:	4618      	mov	r0, r3
 801a162:	3714      	adds	r7, #20
 801a164:	46bd      	mov	sp, r7
 801a166:	bd90      	pop	{r4, r7, pc}
 801a168:	08025744 	.word	0x08025744
 801a16c:	08025de4 	.word	0x08025de4
 801a170:	08025798 	.word	0x08025798

0801a174 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b082      	sub	sp, #8
 801a178:	af00      	add	r7, sp, #0
 801a17a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d106      	bne.n	801a190 <tcp_rexmit_fast+0x1c>
 801a182:	4b2a      	ldr	r3, [pc, #168]	; (801a22c <tcp_rexmit_fast+0xb8>)
 801a184:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a188:	4929      	ldr	r1, [pc, #164]	; (801a230 <tcp_rexmit_fast+0xbc>)
 801a18a:	482a      	ldr	r0, [pc, #168]	; (801a234 <tcp_rexmit_fast+0xc0>)
 801a18c:	f007 f914 	bl	80213b8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a194:	2b00      	cmp	r3, #0
 801a196:	d044      	beq.n	801a222 <tcp_rexmit_fast+0xae>
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	8b5b      	ldrh	r3, [r3, #26]
 801a19c:	f003 0304 	and.w	r3, r3, #4
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d13e      	bne.n	801a222 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a1a4:	6878      	ldr	r0, [r7, #4]
 801a1a6:	f7ff ff79 	bl	801a09c <tcp_rexmit>
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	2b00      	cmp	r3, #0
 801a1ae:	d138      	bne.n	801a222 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a1b6:	687b      	ldr	r3, [r7, #4]
 801a1b8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a1bc:	4293      	cmp	r3, r2
 801a1be:	bf28      	it	cs
 801a1c0:	4613      	movcs	r3, r2
 801a1c2:	b29b      	uxth	r3, r3
 801a1c4:	0fda      	lsrs	r2, r3, #31
 801a1c6:	4413      	add	r3, r2
 801a1c8:	105b      	asrs	r3, r3, #1
 801a1ca:	b29a      	uxth	r2, r3
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a1d8:	461a      	mov	r2, r3
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a1de:	005b      	lsls	r3, r3, #1
 801a1e0:	429a      	cmp	r2, r3
 801a1e2:	d206      	bcs.n	801a1f2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a1e8:	005b      	lsls	r3, r3, #1
 801a1ea:	b29a      	uxth	r2, r3
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a1f8:	687b      	ldr	r3, [r7, #4]
 801a1fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a1fc:	4619      	mov	r1, r3
 801a1fe:	0049      	lsls	r1, r1, #1
 801a200:	440b      	add	r3, r1
 801a202:	b29b      	uxth	r3, r3
 801a204:	4413      	add	r3, r2
 801a206:	b29a      	uxth	r2, r3
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a20e:	687b      	ldr	r3, [r7, #4]
 801a210:	8b5b      	ldrh	r3, [r3, #26]
 801a212:	f043 0304 	orr.w	r3, r3, #4
 801a216:	b29a      	uxth	r2, r3
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	2200      	movs	r2, #0
 801a220:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a222:	bf00      	nop
 801a224:	3708      	adds	r7, #8
 801a226:	46bd      	mov	sp, r7
 801a228:	bd80      	pop	{r7, pc}
 801a22a:	bf00      	nop
 801a22c:	08025744 	.word	0x08025744
 801a230:	08025dfc 	.word	0x08025dfc
 801a234:	08025798 	.word	0x08025798

0801a238 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	b086      	sub	sp, #24
 801a23c:	af00      	add	r7, sp, #0
 801a23e:	60f8      	str	r0, [r7, #12]
 801a240:	607b      	str	r3, [r7, #4]
 801a242:	460b      	mov	r3, r1
 801a244:	817b      	strh	r3, [r7, #10]
 801a246:	4613      	mov	r3, r2
 801a248:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a24a:	897a      	ldrh	r2, [r7, #10]
 801a24c:	893b      	ldrh	r3, [r7, #8]
 801a24e:	4413      	add	r3, r2
 801a250:	b29b      	uxth	r3, r3
 801a252:	3314      	adds	r3, #20
 801a254:	b29b      	uxth	r3, r3
 801a256:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a25a:	4619      	mov	r1, r3
 801a25c:	2022      	movs	r0, #34	; 0x22
 801a25e:	f7f9 fc83 	bl	8013b68 <pbuf_alloc>
 801a262:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a264:	697b      	ldr	r3, [r7, #20]
 801a266:	2b00      	cmp	r3, #0
 801a268:	d04d      	beq.n	801a306 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a26a:	897b      	ldrh	r3, [r7, #10]
 801a26c:	3313      	adds	r3, #19
 801a26e:	697a      	ldr	r2, [r7, #20]
 801a270:	8952      	ldrh	r2, [r2, #10]
 801a272:	4293      	cmp	r3, r2
 801a274:	db06      	blt.n	801a284 <tcp_output_alloc_header_common+0x4c>
 801a276:	4b26      	ldr	r3, [pc, #152]	; (801a310 <tcp_output_alloc_header_common+0xd8>)
 801a278:	f240 7223 	movw	r2, #1827	; 0x723
 801a27c:	4925      	ldr	r1, [pc, #148]	; (801a314 <tcp_output_alloc_header_common+0xdc>)
 801a27e:	4826      	ldr	r0, [pc, #152]	; (801a318 <tcp_output_alloc_header_common+0xe0>)
 801a280:	f007 f89a 	bl	80213b8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a284:	697b      	ldr	r3, [r7, #20]
 801a286:	685b      	ldr	r3, [r3, #4]
 801a288:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a28a:	8c3b      	ldrh	r3, [r7, #32]
 801a28c:	4618      	mov	r0, r3
 801a28e:	f7f8 fb51 	bl	8012934 <lwip_htons>
 801a292:	4603      	mov	r3, r0
 801a294:	461a      	mov	r2, r3
 801a296:	693b      	ldr	r3, [r7, #16]
 801a298:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a29a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a29c:	4618      	mov	r0, r3
 801a29e:	f7f8 fb49 	bl	8012934 <lwip_htons>
 801a2a2:	4603      	mov	r3, r0
 801a2a4:	461a      	mov	r2, r3
 801a2a6:	693b      	ldr	r3, [r7, #16]
 801a2a8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a2aa:	693b      	ldr	r3, [r7, #16]
 801a2ac:	687a      	ldr	r2, [r7, #4]
 801a2ae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a2b0:	68f8      	ldr	r0, [r7, #12]
 801a2b2:	f7f8 fb54 	bl	801295e <lwip_htonl>
 801a2b6:	4602      	mov	r2, r0
 801a2b8:	693b      	ldr	r3, [r7, #16]
 801a2ba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a2bc:	897b      	ldrh	r3, [r7, #10]
 801a2be:	089b      	lsrs	r3, r3, #2
 801a2c0:	b29b      	uxth	r3, r3
 801a2c2:	3305      	adds	r3, #5
 801a2c4:	b29b      	uxth	r3, r3
 801a2c6:	031b      	lsls	r3, r3, #12
 801a2c8:	b29a      	uxth	r2, r3
 801a2ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a2ce:	b29b      	uxth	r3, r3
 801a2d0:	4313      	orrs	r3, r2
 801a2d2:	b29b      	uxth	r3, r3
 801a2d4:	4618      	mov	r0, r3
 801a2d6:	f7f8 fb2d 	bl	8012934 <lwip_htons>
 801a2da:	4603      	mov	r3, r0
 801a2dc:	461a      	mov	r2, r3
 801a2de:	693b      	ldr	r3, [r7, #16]
 801a2e0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a2e2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	f7f8 fb25 	bl	8012934 <lwip_htons>
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	461a      	mov	r2, r3
 801a2ee:	693b      	ldr	r3, [r7, #16]
 801a2f0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a2f2:	693b      	ldr	r3, [r7, #16]
 801a2f4:	2200      	movs	r2, #0
 801a2f6:	741a      	strb	r2, [r3, #16]
 801a2f8:	2200      	movs	r2, #0
 801a2fa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a2fc:	693b      	ldr	r3, [r7, #16]
 801a2fe:	2200      	movs	r2, #0
 801a300:	749a      	strb	r2, [r3, #18]
 801a302:	2200      	movs	r2, #0
 801a304:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a306:	697b      	ldr	r3, [r7, #20]
}
 801a308:	4618      	mov	r0, r3
 801a30a:	3718      	adds	r7, #24
 801a30c:	46bd      	mov	sp, r7
 801a30e:	bd80      	pop	{r7, pc}
 801a310:	08025744 	.word	0x08025744
 801a314:	08025e1c 	.word	0x08025e1c
 801a318:	08025798 	.word	0x08025798

0801a31c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a31c:	b5b0      	push	{r4, r5, r7, lr}
 801a31e:	b08a      	sub	sp, #40	; 0x28
 801a320:	af04      	add	r7, sp, #16
 801a322:	60f8      	str	r0, [r7, #12]
 801a324:	607b      	str	r3, [r7, #4]
 801a326:	460b      	mov	r3, r1
 801a328:	817b      	strh	r3, [r7, #10]
 801a32a:	4613      	mov	r3, r2
 801a32c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a32e:	68fb      	ldr	r3, [r7, #12]
 801a330:	2b00      	cmp	r3, #0
 801a332:	d106      	bne.n	801a342 <tcp_output_alloc_header+0x26>
 801a334:	4b15      	ldr	r3, [pc, #84]	; (801a38c <tcp_output_alloc_header+0x70>)
 801a336:	f240 7242 	movw	r2, #1858	; 0x742
 801a33a:	4915      	ldr	r1, [pc, #84]	; (801a390 <tcp_output_alloc_header+0x74>)
 801a33c:	4815      	ldr	r0, [pc, #84]	; (801a394 <tcp_output_alloc_header+0x78>)
 801a33e:	f007 f83b 	bl	80213b8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a342:	68fb      	ldr	r3, [r7, #12]
 801a344:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a346:	68fb      	ldr	r3, [r7, #12]
 801a348:	8adb      	ldrh	r3, [r3, #22]
 801a34a:	68fa      	ldr	r2, [r7, #12]
 801a34c:	8b12      	ldrh	r2, [r2, #24]
 801a34e:	68f9      	ldr	r1, [r7, #12]
 801a350:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a352:	893d      	ldrh	r5, [r7, #8]
 801a354:	897c      	ldrh	r4, [r7, #10]
 801a356:	9103      	str	r1, [sp, #12]
 801a358:	2110      	movs	r1, #16
 801a35a:	9102      	str	r1, [sp, #8]
 801a35c:	9201      	str	r2, [sp, #4]
 801a35e:	9300      	str	r3, [sp, #0]
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	462a      	mov	r2, r5
 801a364:	4621      	mov	r1, r4
 801a366:	f7ff ff67 	bl	801a238 <tcp_output_alloc_header_common>
 801a36a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a36c:	697b      	ldr	r3, [r7, #20]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d006      	beq.n	801a380 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a372:	68fb      	ldr	r3, [r7, #12]
 801a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a376:	68fa      	ldr	r2, [r7, #12]
 801a378:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a37a:	441a      	add	r2, r3
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a380:	697b      	ldr	r3, [r7, #20]
}
 801a382:	4618      	mov	r0, r3
 801a384:	3718      	adds	r7, #24
 801a386:	46bd      	mov	sp, r7
 801a388:	bdb0      	pop	{r4, r5, r7, pc}
 801a38a:	bf00      	nop
 801a38c:	08025744 	.word	0x08025744
 801a390:	08025e4c 	.word	0x08025e4c
 801a394:	08025798 	.word	0x08025798

0801a398 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a398:	b580      	push	{r7, lr}
 801a39a:	b088      	sub	sp, #32
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	60f8      	str	r0, [r7, #12]
 801a3a0:	60b9      	str	r1, [r7, #8]
 801a3a2:	4611      	mov	r1, r2
 801a3a4:	461a      	mov	r2, r3
 801a3a6:	460b      	mov	r3, r1
 801a3a8:	71fb      	strb	r3, [r7, #7]
 801a3aa:	4613      	mov	r3, r2
 801a3ac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a3ae:	2300      	movs	r3, #0
 801a3b0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a3b2:	68bb      	ldr	r3, [r7, #8]
 801a3b4:	2b00      	cmp	r3, #0
 801a3b6:	d106      	bne.n	801a3c6 <tcp_output_fill_options+0x2e>
 801a3b8:	4b12      	ldr	r3, [pc, #72]	; (801a404 <tcp_output_fill_options+0x6c>)
 801a3ba:	f240 7256 	movw	r2, #1878	; 0x756
 801a3be:	4912      	ldr	r1, [pc, #72]	; (801a408 <tcp_output_fill_options+0x70>)
 801a3c0:	4812      	ldr	r0, [pc, #72]	; (801a40c <tcp_output_fill_options+0x74>)
 801a3c2:	f006 fff9 	bl	80213b8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a3c6:	68bb      	ldr	r3, [r7, #8]
 801a3c8:	685b      	ldr	r3, [r3, #4]
 801a3ca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a3cc:	69bb      	ldr	r3, [r7, #24]
 801a3ce:	3314      	adds	r3, #20
 801a3d0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a3d2:	8bfb      	ldrh	r3, [r7, #30]
 801a3d4:	009b      	lsls	r3, r3, #2
 801a3d6:	461a      	mov	r2, r3
 801a3d8:	79fb      	ldrb	r3, [r7, #7]
 801a3da:	009b      	lsls	r3, r3, #2
 801a3dc:	f003 0304 	and.w	r3, r3, #4
 801a3e0:	4413      	add	r3, r2
 801a3e2:	3314      	adds	r3, #20
 801a3e4:	69ba      	ldr	r2, [r7, #24]
 801a3e6:	4413      	add	r3, r2
 801a3e8:	697a      	ldr	r2, [r7, #20]
 801a3ea:	429a      	cmp	r2, r3
 801a3ec:	d006      	beq.n	801a3fc <tcp_output_fill_options+0x64>
 801a3ee:	4b05      	ldr	r3, [pc, #20]	; (801a404 <tcp_output_fill_options+0x6c>)
 801a3f0:	f240 7275 	movw	r2, #1909	; 0x775
 801a3f4:	4906      	ldr	r1, [pc, #24]	; (801a410 <tcp_output_fill_options+0x78>)
 801a3f6:	4805      	ldr	r0, [pc, #20]	; (801a40c <tcp_output_fill_options+0x74>)
 801a3f8:	f006 ffde 	bl	80213b8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a3fc:	bf00      	nop
 801a3fe:	3720      	adds	r7, #32
 801a400:	46bd      	mov	sp, r7
 801a402:	bd80      	pop	{r7, pc}
 801a404:	08025744 	.word	0x08025744
 801a408:	08025e74 	.word	0x08025e74
 801a40c:	08025798 	.word	0x08025798
 801a410:	08025d6c 	.word	0x08025d6c

0801a414 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a414:	b580      	push	{r7, lr}
 801a416:	b08a      	sub	sp, #40	; 0x28
 801a418:	af04      	add	r7, sp, #16
 801a41a:	60f8      	str	r0, [r7, #12]
 801a41c:	60b9      	str	r1, [r7, #8]
 801a41e:	607a      	str	r2, [r7, #4]
 801a420:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a422:	68bb      	ldr	r3, [r7, #8]
 801a424:	2b00      	cmp	r3, #0
 801a426:	d106      	bne.n	801a436 <tcp_output_control_segment+0x22>
 801a428:	4b1c      	ldr	r3, [pc, #112]	; (801a49c <tcp_output_control_segment+0x88>)
 801a42a:	f240 7287 	movw	r2, #1927	; 0x787
 801a42e:	491c      	ldr	r1, [pc, #112]	; (801a4a0 <tcp_output_control_segment+0x8c>)
 801a430:	481c      	ldr	r0, [pc, #112]	; (801a4a4 <tcp_output_control_segment+0x90>)
 801a432:	f006 ffc1 	bl	80213b8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a436:	683a      	ldr	r2, [r7, #0]
 801a438:	6879      	ldr	r1, [r7, #4]
 801a43a:	68f8      	ldr	r0, [r7, #12]
 801a43c:	f7fe fae8 	bl	8018a10 <tcp_route>
 801a440:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a442:	693b      	ldr	r3, [r7, #16]
 801a444:	2b00      	cmp	r3, #0
 801a446:	d102      	bne.n	801a44e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a448:	23fc      	movs	r3, #252	; 0xfc
 801a44a:	75fb      	strb	r3, [r7, #23]
 801a44c:	e01c      	b.n	801a488 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	2b00      	cmp	r3, #0
 801a452:	d006      	beq.n	801a462 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	7adb      	ldrb	r3, [r3, #11]
 801a458:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a45a:	68fb      	ldr	r3, [r7, #12]
 801a45c:	7a9b      	ldrb	r3, [r3, #10]
 801a45e:	757b      	strb	r3, [r7, #21]
 801a460:	e003      	b.n	801a46a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a462:	23ff      	movs	r3, #255	; 0xff
 801a464:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a466:	2300      	movs	r3, #0
 801a468:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a46a:	7dba      	ldrb	r2, [r7, #22]
 801a46c:	693b      	ldr	r3, [r7, #16]
 801a46e:	9302      	str	r3, [sp, #8]
 801a470:	2306      	movs	r3, #6
 801a472:	9301      	str	r3, [sp, #4]
 801a474:	7d7b      	ldrb	r3, [r7, #21]
 801a476:	9300      	str	r3, [sp, #0]
 801a478:	4613      	mov	r3, r2
 801a47a:	683a      	ldr	r2, [r7, #0]
 801a47c:	6879      	ldr	r1, [r7, #4]
 801a47e:	68b8      	ldr	r0, [r7, #8]
 801a480:	f004 f97a 	bl	801e778 <ip4_output_if>
 801a484:	4603      	mov	r3, r0
 801a486:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a488:	68b8      	ldr	r0, [r7, #8]
 801a48a:	f7f9 fe51 	bl	8014130 <pbuf_free>
  return err;
 801a48e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a492:	4618      	mov	r0, r3
 801a494:	3718      	adds	r7, #24
 801a496:	46bd      	mov	sp, r7
 801a498:	bd80      	pop	{r7, pc}
 801a49a:	bf00      	nop
 801a49c:	08025744 	.word	0x08025744
 801a4a0:	08025e9c 	.word	0x08025e9c
 801a4a4:	08025798 	.word	0x08025798

0801a4a8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a4a8:	b590      	push	{r4, r7, lr}
 801a4aa:	b08b      	sub	sp, #44	; 0x2c
 801a4ac:	af04      	add	r7, sp, #16
 801a4ae:	60f8      	str	r0, [r7, #12]
 801a4b0:	60b9      	str	r1, [r7, #8]
 801a4b2:	607a      	str	r2, [r7, #4]
 801a4b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a4b6:	683b      	ldr	r3, [r7, #0]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d106      	bne.n	801a4ca <tcp_rst+0x22>
 801a4bc:	4b1f      	ldr	r3, [pc, #124]	; (801a53c <tcp_rst+0x94>)
 801a4be:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a4c2:	491f      	ldr	r1, [pc, #124]	; (801a540 <tcp_rst+0x98>)
 801a4c4:	481f      	ldr	r0, [pc, #124]	; (801a544 <tcp_rst+0x9c>)
 801a4c6:	f006 ff77 	bl	80213b8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4cc:	2b00      	cmp	r3, #0
 801a4ce:	d106      	bne.n	801a4de <tcp_rst+0x36>
 801a4d0:	4b1a      	ldr	r3, [pc, #104]	; (801a53c <tcp_rst+0x94>)
 801a4d2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a4d6:	491c      	ldr	r1, [pc, #112]	; (801a548 <tcp_rst+0xa0>)
 801a4d8:	481a      	ldr	r0, [pc, #104]	; (801a544 <tcp_rst+0x9c>)
 801a4da:	f006 ff6d 	bl	80213b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a4de:	2300      	movs	r3, #0
 801a4e0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a4e2:	f246 0308 	movw	r3, #24584	; 0x6008
 801a4e6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a4e8:	7dfb      	ldrb	r3, [r7, #23]
 801a4ea:	b29c      	uxth	r4, r3
 801a4ec:	68b8      	ldr	r0, [r7, #8]
 801a4ee:	f7f8 fa36 	bl	801295e <lwip_htonl>
 801a4f2:	4602      	mov	r2, r0
 801a4f4:	8abb      	ldrh	r3, [r7, #20]
 801a4f6:	9303      	str	r3, [sp, #12]
 801a4f8:	2314      	movs	r3, #20
 801a4fa:	9302      	str	r3, [sp, #8]
 801a4fc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a4fe:	9301      	str	r3, [sp, #4]
 801a500:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a502:	9300      	str	r3, [sp, #0]
 801a504:	4613      	mov	r3, r2
 801a506:	2200      	movs	r2, #0
 801a508:	4621      	mov	r1, r4
 801a50a:	6878      	ldr	r0, [r7, #4]
 801a50c:	f7ff fe94 	bl	801a238 <tcp_output_alloc_header_common>
 801a510:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a512:	693b      	ldr	r3, [r7, #16]
 801a514:	2b00      	cmp	r3, #0
 801a516:	d00c      	beq.n	801a532 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a518:	7dfb      	ldrb	r3, [r7, #23]
 801a51a:	2200      	movs	r2, #0
 801a51c:	6939      	ldr	r1, [r7, #16]
 801a51e:	68f8      	ldr	r0, [r7, #12]
 801a520:	f7ff ff3a 	bl	801a398 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a526:	683a      	ldr	r2, [r7, #0]
 801a528:	6939      	ldr	r1, [r7, #16]
 801a52a:	68f8      	ldr	r0, [r7, #12]
 801a52c:	f7ff ff72 	bl	801a414 <tcp_output_control_segment>
 801a530:	e000      	b.n	801a534 <tcp_rst+0x8c>
    return;
 801a532:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a534:	371c      	adds	r7, #28
 801a536:	46bd      	mov	sp, r7
 801a538:	bd90      	pop	{r4, r7, pc}
 801a53a:	bf00      	nop
 801a53c:	08025744 	.word	0x08025744
 801a540:	08025ec8 	.word	0x08025ec8
 801a544:	08025798 	.word	0x08025798
 801a548:	08025ee4 	.word	0x08025ee4

0801a54c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a54c:	b590      	push	{r4, r7, lr}
 801a54e:	b087      	sub	sp, #28
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a554:	2300      	movs	r3, #0
 801a556:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a558:	2300      	movs	r3, #0
 801a55a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a55c:	687b      	ldr	r3, [r7, #4]
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d106      	bne.n	801a570 <tcp_send_empty_ack+0x24>
 801a562:	4b28      	ldr	r3, [pc, #160]	; (801a604 <tcp_send_empty_ack+0xb8>)
 801a564:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a568:	4927      	ldr	r1, [pc, #156]	; (801a608 <tcp_send_empty_ack+0xbc>)
 801a56a:	4828      	ldr	r0, [pc, #160]	; (801a60c <tcp_send_empty_ack+0xc0>)
 801a56c:	f006 ff24 	bl	80213b8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a570:	7dfb      	ldrb	r3, [r7, #23]
 801a572:	009b      	lsls	r3, r3, #2
 801a574:	b2db      	uxtb	r3, r3
 801a576:	f003 0304 	and.w	r3, r3, #4
 801a57a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a57c:	7d7b      	ldrb	r3, [r7, #21]
 801a57e:	b29c      	uxth	r4, r3
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a584:	4618      	mov	r0, r3
 801a586:	f7f8 f9ea 	bl	801295e <lwip_htonl>
 801a58a:	4603      	mov	r3, r0
 801a58c:	2200      	movs	r2, #0
 801a58e:	4621      	mov	r1, r4
 801a590:	6878      	ldr	r0, [r7, #4]
 801a592:	f7ff fec3 	bl	801a31c <tcp_output_alloc_header>
 801a596:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a598:	693b      	ldr	r3, [r7, #16]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d109      	bne.n	801a5b2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	8b5b      	ldrh	r3, [r3, #26]
 801a5a2:	f043 0303 	orr.w	r3, r3, #3
 801a5a6:	b29a      	uxth	r2, r3
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a5ac:	f06f 0301 	mvn.w	r3, #1
 801a5b0:	e023      	b.n	801a5fa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a5b2:	7dbb      	ldrb	r3, [r7, #22]
 801a5b4:	7dfa      	ldrb	r2, [r7, #23]
 801a5b6:	6939      	ldr	r1, [r7, #16]
 801a5b8:	6878      	ldr	r0, [r7, #4]
 801a5ba:	f7ff feed 	bl	801a398 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a5be:	687a      	ldr	r2, [r7, #4]
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	3304      	adds	r3, #4
 801a5c4:	6939      	ldr	r1, [r7, #16]
 801a5c6:	6878      	ldr	r0, [r7, #4]
 801a5c8:	f7ff ff24 	bl	801a414 <tcp_output_control_segment>
 801a5cc:	4603      	mov	r3, r0
 801a5ce:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a5d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d007      	beq.n	801a5e8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a5d8:	687b      	ldr	r3, [r7, #4]
 801a5da:	8b5b      	ldrh	r3, [r3, #26]
 801a5dc:	f043 0303 	orr.w	r3, r3, #3
 801a5e0:	b29a      	uxth	r2, r3
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	835a      	strh	r2, [r3, #26]
 801a5e6:	e006      	b.n	801a5f6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a5e8:	687b      	ldr	r3, [r7, #4]
 801a5ea:	8b5b      	ldrh	r3, [r3, #26]
 801a5ec:	f023 0303 	bic.w	r3, r3, #3
 801a5f0:	b29a      	uxth	r2, r3
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a5f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	371c      	adds	r7, #28
 801a5fe:	46bd      	mov	sp, r7
 801a600:	bd90      	pop	{r4, r7, pc}
 801a602:	bf00      	nop
 801a604:	08025744 	.word	0x08025744
 801a608:	08025f00 	.word	0x08025f00
 801a60c:	08025798 	.word	0x08025798

0801a610 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a610:	b590      	push	{r4, r7, lr}
 801a612:	b087      	sub	sp, #28
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a618:	2300      	movs	r3, #0
 801a61a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	2b00      	cmp	r3, #0
 801a620:	d106      	bne.n	801a630 <tcp_keepalive+0x20>
 801a622:	4b18      	ldr	r3, [pc, #96]	; (801a684 <tcp_keepalive+0x74>)
 801a624:	f640 0224 	movw	r2, #2084	; 0x824
 801a628:	4917      	ldr	r1, [pc, #92]	; (801a688 <tcp_keepalive+0x78>)
 801a62a:	4818      	ldr	r0, [pc, #96]	; (801a68c <tcp_keepalive+0x7c>)
 801a62c:	f006 fec4 	bl	80213b8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a630:	7dfb      	ldrb	r3, [r7, #23]
 801a632:	b29c      	uxth	r4, r3
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a638:	3b01      	subs	r3, #1
 801a63a:	4618      	mov	r0, r3
 801a63c:	f7f8 f98f 	bl	801295e <lwip_htonl>
 801a640:	4603      	mov	r3, r0
 801a642:	2200      	movs	r2, #0
 801a644:	4621      	mov	r1, r4
 801a646:	6878      	ldr	r0, [r7, #4]
 801a648:	f7ff fe68 	bl	801a31c <tcp_output_alloc_header>
 801a64c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a64e:	693b      	ldr	r3, [r7, #16]
 801a650:	2b00      	cmp	r3, #0
 801a652:	d102      	bne.n	801a65a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a658:	e010      	b.n	801a67c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a65a:	7dfb      	ldrb	r3, [r7, #23]
 801a65c:	2200      	movs	r2, #0
 801a65e:	6939      	ldr	r1, [r7, #16]
 801a660:	6878      	ldr	r0, [r7, #4]
 801a662:	f7ff fe99 	bl	801a398 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a666:	687a      	ldr	r2, [r7, #4]
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	3304      	adds	r3, #4
 801a66c:	6939      	ldr	r1, [r7, #16]
 801a66e:	6878      	ldr	r0, [r7, #4]
 801a670:	f7ff fed0 	bl	801a414 <tcp_output_control_segment>
 801a674:	4603      	mov	r3, r0
 801a676:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a678:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a67c:	4618      	mov	r0, r3
 801a67e:	371c      	adds	r7, #28
 801a680:	46bd      	mov	sp, r7
 801a682:	bd90      	pop	{r4, r7, pc}
 801a684:	08025744 	.word	0x08025744
 801a688:	08025f20 	.word	0x08025f20
 801a68c:	08025798 	.word	0x08025798

0801a690 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a690:	b590      	push	{r4, r7, lr}
 801a692:	b08b      	sub	sp, #44	; 0x2c
 801a694:	af00      	add	r7, sp, #0
 801a696:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a698:	2300      	movs	r3, #0
 801a69a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d106      	bne.n	801a6b2 <tcp_zero_window_probe+0x22>
 801a6a4:	4b4c      	ldr	r3, [pc, #304]	; (801a7d8 <tcp_zero_window_probe+0x148>)
 801a6a6:	f640 024f 	movw	r2, #2127	; 0x84f
 801a6aa:	494c      	ldr	r1, [pc, #304]	; (801a7dc <tcp_zero_window_probe+0x14c>)
 801a6ac:	484c      	ldr	r0, [pc, #304]	; (801a7e0 <tcp_zero_window_probe+0x150>)
 801a6ae:	f006 fe83 	bl	80213b8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6b6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a6b8:	6a3b      	ldr	r3, [r7, #32]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d101      	bne.n	801a6c2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a6be:	2300      	movs	r3, #0
 801a6c0:	e086      	b.n	801a7d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801a6c8:	2bff      	cmp	r3, #255	; 0xff
 801a6ca:	d007      	beq.n	801a6dc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 801a6d2:	3301      	adds	r3, #1
 801a6d4:	b2da      	uxtb	r2, r3
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a6dc:	6a3b      	ldr	r3, [r7, #32]
 801a6de:	68db      	ldr	r3, [r3, #12]
 801a6e0:	899b      	ldrh	r3, [r3, #12]
 801a6e2:	b29b      	uxth	r3, r3
 801a6e4:	4618      	mov	r0, r3
 801a6e6:	f7f8 f925 	bl	8012934 <lwip_htons>
 801a6ea:	4603      	mov	r3, r0
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	f003 0301 	and.w	r3, r3, #1
 801a6f2:	2b00      	cmp	r3, #0
 801a6f4:	d005      	beq.n	801a702 <tcp_zero_window_probe+0x72>
 801a6f6:	6a3b      	ldr	r3, [r7, #32]
 801a6f8:	891b      	ldrh	r3, [r3, #8]
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d101      	bne.n	801a702 <tcp_zero_window_probe+0x72>
 801a6fe:	2301      	movs	r3, #1
 801a700:	e000      	b.n	801a704 <tcp_zero_window_probe+0x74>
 801a702:	2300      	movs	r3, #0
 801a704:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a706:	7ffb      	ldrb	r3, [r7, #31]
 801a708:	2b00      	cmp	r3, #0
 801a70a:	bf0c      	ite	eq
 801a70c:	2301      	moveq	r3, #1
 801a70e:	2300      	movne	r3, #0
 801a710:	b2db      	uxtb	r3, r3
 801a712:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a714:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a718:	b299      	uxth	r1, r3
 801a71a:	6a3b      	ldr	r3, [r7, #32]
 801a71c:	68db      	ldr	r3, [r3, #12]
 801a71e:	685b      	ldr	r3, [r3, #4]
 801a720:	8bba      	ldrh	r2, [r7, #28]
 801a722:	6878      	ldr	r0, [r7, #4]
 801a724:	f7ff fdfa 	bl	801a31c <tcp_output_alloc_header>
 801a728:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a72a:	69bb      	ldr	r3, [r7, #24]
 801a72c:	2b00      	cmp	r3, #0
 801a72e:	d102      	bne.n	801a736 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a734:	e04c      	b.n	801a7d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a736:	69bb      	ldr	r3, [r7, #24]
 801a738:	685b      	ldr	r3, [r3, #4]
 801a73a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a73c:	7ffb      	ldrb	r3, [r7, #31]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d011      	beq.n	801a766 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a742:	697b      	ldr	r3, [r7, #20]
 801a744:	899b      	ldrh	r3, [r3, #12]
 801a746:	b29b      	uxth	r3, r3
 801a748:	b21b      	sxth	r3, r3
 801a74a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a74e:	b21c      	sxth	r4, r3
 801a750:	2011      	movs	r0, #17
 801a752:	f7f8 f8ef 	bl	8012934 <lwip_htons>
 801a756:	4603      	mov	r3, r0
 801a758:	b21b      	sxth	r3, r3
 801a75a:	4323      	orrs	r3, r4
 801a75c:	b21b      	sxth	r3, r3
 801a75e:	b29a      	uxth	r2, r3
 801a760:	697b      	ldr	r3, [r7, #20]
 801a762:	819a      	strh	r2, [r3, #12]
 801a764:	e010      	b.n	801a788 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a766:	69bb      	ldr	r3, [r7, #24]
 801a768:	685b      	ldr	r3, [r3, #4]
 801a76a:	3314      	adds	r3, #20
 801a76c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a76e:	6a3b      	ldr	r3, [r7, #32]
 801a770:	6858      	ldr	r0, [r3, #4]
 801a772:	6a3b      	ldr	r3, [r7, #32]
 801a774:	685b      	ldr	r3, [r3, #4]
 801a776:	891a      	ldrh	r2, [r3, #8]
 801a778:	6a3b      	ldr	r3, [r7, #32]
 801a77a:	891b      	ldrh	r3, [r3, #8]
 801a77c:	1ad3      	subs	r3, r2, r3
 801a77e:	b29b      	uxth	r3, r3
 801a780:	2201      	movs	r2, #1
 801a782:	6939      	ldr	r1, [r7, #16]
 801a784:	f7f9 feda 	bl	801453c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a788:	6a3b      	ldr	r3, [r7, #32]
 801a78a:	68db      	ldr	r3, [r3, #12]
 801a78c:	685b      	ldr	r3, [r3, #4]
 801a78e:	4618      	mov	r0, r3
 801a790:	f7f8 f8e5 	bl	801295e <lwip_htonl>
 801a794:	4603      	mov	r3, r0
 801a796:	3301      	adds	r3, #1
 801a798:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	1ad3      	subs	r3, r2, r3
 801a7a2:	2b00      	cmp	r3, #0
 801a7a4:	da02      	bge.n	801a7ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	68fa      	ldr	r2, [r7, #12]
 801a7aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a7ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a7b0:	2200      	movs	r2, #0
 801a7b2:	69b9      	ldr	r1, [r7, #24]
 801a7b4:	6878      	ldr	r0, [r7, #4]
 801a7b6:	f7ff fdef 	bl	801a398 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a7ba:	687a      	ldr	r2, [r7, #4]
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	3304      	adds	r3, #4
 801a7c0:	69b9      	ldr	r1, [r7, #24]
 801a7c2:	6878      	ldr	r0, [r7, #4]
 801a7c4:	f7ff fe26 	bl	801a414 <tcp_output_control_segment>
 801a7c8:	4603      	mov	r3, r0
 801a7ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a7cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801a7d0:	4618      	mov	r0, r3
 801a7d2:	372c      	adds	r7, #44	; 0x2c
 801a7d4:	46bd      	mov	sp, r7
 801a7d6:	bd90      	pop	{r4, r7, pc}
 801a7d8:	08025744 	.word	0x08025744
 801a7dc:	08025f3c 	.word	0x08025f3c
 801a7e0:	08025798 	.word	0x08025798

0801a7e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b082      	sub	sp, #8
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801a7ec:	f7f9 ff94 	bl	8014718 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801a7f0:	4b0a      	ldr	r3, [pc, #40]	; (801a81c <tcpip_tcp_timer+0x38>)
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d103      	bne.n	801a800 <tcpip_tcp_timer+0x1c>
 801a7f8:	4b09      	ldr	r3, [pc, #36]	; (801a820 <tcpip_tcp_timer+0x3c>)
 801a7fa:	681b      	ldr	r3, [r3, #0]
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d005      	beq.n	801a80c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a800:	2200      	movs	r2, #0
 801a802:	4908      	ldr	r1, [pc, #32]	; (801a824 <tcpip_tcp_timer+0x40>)
 801a804:	20fa      	movs	r0, #250	; 0xfa
 801a806:	f000 f8f3 	bl	801a9f0 <sys_timeout>
 801a80a:	e003      	b.n	801a814 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801a80c:	4b06      	ldr	r3, [pc, #24]	; (801a828 <tcpip_tcp_timer+0x44>)
 801a80e:	2200      	movs	r2, #0
 801a810:	601a      	str	r2, [r3, #0]
  }
}
 801a812:	bf00      	nop
 801a814:	bf00      	nop
 801a816:	3708      	adds	r7, #8
 801a818:	46bd      	mov	sp, r7
 801a81a:	bd80      	pop	{r7, pc}
 801a81c:	200122dc 	.word	0x200122dc
 801a820:	200122e0 	.word	0x200122e0
 801a824:	0801a7e5 	.word	0x0801a7e5
 801a828:	20012328 	.word	0x20012328

0801a82c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801a82c:	b580      	push	{r7, lr}
 801a82e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801a830:	4b0a      	ldr	r3, [pc, #40]	; (801a85c <tcp_timer_needed+0x30>)
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	2b00      	cmp	r3, #0
 801a836:	d10f      	bne.n	801a858 <tcp_timer_needed+0x2c>
 801a838:	4b09      	ldr	r3, [pc, #36]	; (801a860 <tcp_timer_needed+0x34>)
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	2b00      	cmp	r3, #0
 801a83e:	d103      	bne.n	801a848 <tcp_timer_needed+0x1c>
 801a840:	4b08      	ldr	r3, [pc, #32]	; (801a864 <tcp_timer_needed+0x38>)
 801a842:	681b      	ldr	r3, [r3, #0]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d007      	beq.n	801a858 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801a848:	4b04      	ldr	r3, [pc, #16]	; (801a85c <tcp_timer_needed+0x30>)
 801a84a:	2201      	movs	r2, #1
 801a84c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801a84e:	2200      	movs	r2, #0
 801a850:	4905      	ldr	r1, [pc, #20]	; (801a868 <tcp_timer_needed+0x3c>)
 801a852:	20fa      	movs	r0, #250	; 0xfa
 801a854:	f000 f8cc 	bl	801a9f0 <sys_timeout>
  }
}
 801a858:	bf00      	nop
 801a85a:	bd80      	pop	{r7, pc}
 801a85c:	20012328 	.word	0x20012328
 801a860:	200122dc 	.word	0x200122dc
 801a864:	200122e0 	.word	0x200122e0
 801a868:	0801a7e5 	.word	0x0801a7e5

0801a86c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801a86c:	b580      	push	{r7, lr}
 801a86e:	b086      	sub	sp, #24
 801a870:	af00      	add	r7, sp, #0
 801a872:	60f8      	str	r0, [r7, #12]
 801a874:	60b9      	str	r1, [r7, #8]
 801a876:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801a878:	200a      	movs	r0, #10
 801a87a:	f7f8 fd33 	bl	80132e4 <memp_malloc>
 801a87e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801a880:	693b      	ldr	r3, [r7, #16]
 801a882:	2b00      	cmp	r3, #0
 801a884:	d109      	bne.n	801a89a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801a886:	693b      	ldr	r3, [r7, #16]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d151      	bne.n	801a930 <sys_timeout_abs+0xc4>
 801a88c:	4b2a      	ldr	r3, [pc, #168]	; (801a938 <sys_timeout_abs+0xcc>)
 801a88e:	22be      	movs	r2, #190	; 0xbe
 801a890:	492a      	ldr	r1, [pc, #168]	; (801a93c <sys_timeout_abs+0xd0>)
 801a892:	482b      	ldr	r0, [pc, #172]	; (801a940 <sys_timeout_abs+0xd4>)
 801a894:	f006 fd90 	bl	80213b8 <iprintf>
    return;
 801a898:	e04a      	b.n	801a930 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801a89a:	693b      	ldr	r3, [r7, #16]
 801a89c:	2200      	movs	r2, #0
 801a89e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801a8a0:	693b      	ldr	r3, [r7, #16]
 801a8a2:	68ba      	ldr	r2, [r7, #8]
 801a8a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801a8a6:	693b      	ldr	r3, [r7, #16]
 801a8a8:	687a      	ldr	r2, [r7, #4]
 801a8aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801a8ac:	693b      	ldr	r3, [r7, #16]
 801a8ae:	68fa      	ldr	r2, [r7, #12]
 801a8b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801a8b2:	4b24      	ldr	r3, [pc, #144]	; (801a944 <sys_timeout_abs+0xd8>)
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d103      	bne.n	801a8c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801a8ba:	4a22      	ldr	r2, [pc, #136]	; (801a944 <sys_timeout_abs+0xd8>)
 801a8bc:	693b      	ldr	r3, [r7, #16]
 801a8be:	6013      	str	r3, [r2, #0]
    return;
 801a8c0:	e037      	b.n	801a932 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801a8c2:	693b      	ldr	r3, [r7, #16]
 801a8c4:	685a      	ldr	r2, [r3, #4]
 801a8c6:	4b1f      	ldr	r3, [pc, #124]	; (801a944 <sys_timeout_abs+0xd8>)
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	685b      	ldr	r3, [r3, #4]
 801a8cc:	1ad3      	subs	r3, r2, r3
 801a8ce:	0fdb      	lsrs	r3, r3, #31
 801a8d0:	f003 0301 	and.w	r3, r3, #1
 801a8d4:	b2db      	uxtb	r3, r3
 801a8d6:	2b00      	cmp	r3, #0
 801a8d8:	d007      	beq.n	801a8ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801a8da:	4b1a      	ldr	r3, [pc, #104]	; (801a944 <sys_timeout_abs+0xd8>)
 801a8dc:	681a      	ldr	r2, [r3, #0]
 801a8de:	693b      	ldr	r3, [r7, #16]
 801a8e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801a8e2:	4a18      	ldr	r2, [pc, #96]	; (801a944 <sys_timeout_abs+0xd8>)
 801a8e4:	693b      	ldr	r3, [r7, #16]
 801a8e6:	6013      	str	r3, [r2, #0]
 801a8e8:	e023      	b.n	801a932 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801a8ea:	4b16      	ldr	r3, [pc, #88]	; (801a944 <sys_timeout_abs+0xd8>)
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	617b      	str	r3, [r7, #20]
 801a8f0:	e01a      	b.n	801a928 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801a8f2:	697b      	ldr	r3, [r7, #20]
 801a8f4:	681b      	ldr	r3, [r3, #0]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d00b      	beq.n	801a912 <sys_timeout_abs+0xa6>
 801a8fa:	693b      	ldr	r3, [r7, #16]
 801a8fc:	685a      	ldr	r2, [r3, #4]
 801a8fe:	697b      	ldr	r3, [r7, #20]
 801a900:	681b      	ldr	r3, [r3, #0]
 801a902:	685b      	ldr	r3, [r3, #4]
 801a904:	1ad3      	subs	r3, r2, r3
 801a906:	0fdb      	lsrs	r3, r3, #31
 801a908:	f003 0301 	and.w	r3, r3, #1
 801a90c:	b2db      	uxtb	r3, r3
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d007      	beq.n	801a922 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801a912:	697b      	ldr	r3, [r7, #20]
 801a914:	681a      	ldr	r2, [r3, #0]
 801a916:	693b      	ldr	r3, [r7, #16]
 801a918:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801a91a:	697b      	ldr	r3, [r7, #20]
 801a91c:	693a      	ldr	r2, [r7, #16]
 801a91e:	601a      	str	r2, [r3, #0]
        break;
 801a920:	e007      	b.n	801a932 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801a922:	697b      	ldr	r3, [r7, #20]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	617b      	str	r3, [r7, #20]
 801a928:	697b      	ldr	r3, [r7, #20]
 801a92a:	2b00      	cmp	r3, #0
 801a92c:	d1e1      	bne.n	801a8f2 <sys_timeout_abs+0x86>
 801a92e:	e000      	b.n	801a932 <sys_timeout_abs+0xc6>
    return;
 801a930:	bf00      	nop
      }
    }
  }
}
 801a932:	3718      	adds	r7, #24
 801a934:	46bd      	mov	sp, r7
 801a936:	bd80      	pop	{r7, pc}
 801a938:	08025f60 	.word	0x08025f60
 801a93c:	08025f94 	.word	0x08025f94
 801a940:	08025fd4 	.word	0x08025fd4
 801a944:	20012320 	.word	0x20012320

0801a948 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801a948:	b580      	push	{r7, lr}
 801a94a:	b086      	sub	sp, #24
 801a94c:	af00      	add	r7, sp, #0
 801a94e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801a954:	697b      	ldr	r3, [r7, #20]
 801a956:	685b      	ldr	r3, [r3, #4]
 801a958:	4798      	blx	r3

  now = sys_now();
 801a95a:	f7eb ffb7 	bl	80068cc <sys_now>
 801a95e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801a960:	697b      	ldr	r3, [r7, #20]
 801a962:	681a      	ldr	r2, [r3, #0]
 801a964:	4b0f      	ldr	r3, [pc, #60]	; (801a9a4 <lwip_cyclic_timer+0x5c>)
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	4413      	add	r3, r2
 801a96a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801a96c:	68fa      	ldr	r2, [r7, #12]
 801a96e:	693b      	ldr	r3, [r7, #16]
 801a970:	1ad3      	subs	r3, r2, r3
 801a972:	0fdb      	lsrs	r3, r3, #31
 801a974:	f003 0301 	and.w	r3, r3, #1
 801a978:	b2db      	uxtb	r3, r3
 801a97a:	2b00      	cmp	r3, #0
 801a97c:	d009      	beq.n	801a992 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801a97e:	697b      	ldr	r3, [r7, #20]
 801a980:	681a      	ldr	r2, [r3, #0]
 801a982:	693b      	ldr	r3, [r7, #16]
 801a984:	4413      	add	r3, r2
 801a986:	687a      	ldr	r2, [r7, #4]
 801a988:	4907      	ldr	r1, [pc, #28]	; (801a9a8 <lwip_cyclic_timer+0x60>)
 801a98a:	4618      	mov	r0, r3
 801a98c:	f7ff ff6e 	bl	801a86c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801a990:	e004      	b.n	801a99c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801a992:	687a      	ldr	r2, [r7, #4]
 801a994:	4904      	ldr	r1, [pc, #16]	; (801a9a8 <lwip_cyclic_timer+0x60>)
 801a996:	68f8      	ldr	r0, [r7, #12]
 801a998:	f7ff ff68 	bl	801a86c <sys_timeout_abs>
}
 801a99c:	bf00      	nop
 801a99e:	3718      	adds	r7, #24
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}
 801a9a4:	20012324 	.word	0x20012324
 801a9a8:	0801a949 	.word	0x0801a949

0801a9ac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b082      	sub	sp, #8
 801a9b0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a9b2:	2301      	movs	r3, #1
 801a9b4:	607b      	str	r3, [r7, #4]
 801a9b6:	e00e      	b.n	801a9d6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801a9b8:	4a0b      	ldr	r2, [pc, #44]	; (801a9e8 <sys_timeouts_init+0x3c>)
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	00db      	lsls	r3, r3, #3
 801a9c4:	4a08      	ldr	r2, [pc, #32]	; (801a9e8 <sys_timeouts_init+0x3c>)
 801a9c6:	4413      	add	r3, r2
 801a9c8:	461a      	mov	r2, r3
 801a9ca:	4908      	ldr	r1, [pc, #32]	; (801a9ec <sys_timeouts_init+0x40>)
 801a9cc:	f000 f810 	bl	801a9f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	3301      	adds	r3, #1
 801a9d4:	607b      	str	r3, [r7, #4]
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	2b04      	cmp	r3, #4
 801a9da:	d9ed      	bls.n	801a9b8 <sys_timeouts_init+0xc>
  }
}
 801a9dc:	bf00      	nop
 801a9de:	bf00      	nop
 801a9e0:	3708      	adds	r7, #8
 801a9e2:	46bd      	mov	sp, r7
 801a9e4:	bd80      	pop	{r7, pc}
 801a9e6:	bf00      	nop
 801a9e8:	08027048 	.word	0x08027048
 801a9ec:	0801a949 	.word	0x0801a949

0801a9f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801a9f0:	b580      	push	{r7, lr}
 801a9f2:	b086      	sub	sp, #24
 801a9f4:	af00      	add	r7, sp, #0
 801a9f6:	60f8      	str	r0, [r7, #12]
 801a9f8:	60b9      	str	r1, [r7, #8]
 801a9fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801aa02:	d306      	bcc.n	801aa12 <sys_timeout+0x22>
 801aa04:	4b0a      	ldr	r3, [pc, #40]	; (801aa30 <sys_timeout+0x40>)
 801aa06:	f240 1229 	movw	r2, #297	; 0x129
 801aa0a:	490a      	ldr	r1, [pc, #40]	; (801aa34 <sys_timeout+0x44>)
 801aa0c:	480a      	ldr	r0, [pc, #40]	; (801aa38 <sys_timeout+0x48>)
 801aa0e:	f006 fcd3 	bl	80213b8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801aa12:	f7eb ff5b 	bl	80068cc <sys_now>
 801aa16:	4602      	mov	r2, r0
 801aa18:	68fb      	ldr	r3, [r7, #12]
 801aa1a:	4413      	add	r3, r2
 801aa1c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801aa1e:	687a      	ldr	r2, [r7, #4]
 801aa20:	68b9      	ldr	r1, [r7, #8]
 801aa22:	6978      	ldr	r0, [r7, #20]
 801aa24:	f7ff ff22 	bl	801a86c <sys_timeout_abs>
#endif
}
 801aa28:	bf00      	nop
 801aa2a:	3718      	adds	r7, #24
 801aa2c:	46bd      	mov	sp, r7
 801aa2e:	bd80      	pop	{r7, pc}
 801aa30:	08025f60 	.word	0x08025f60
 801aa34:	08025ffc 	.word	0x08025ffc
 801aa38:	08025fd4 	.word	0x08025fd4

0801aa3c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801aa3c:	b580      	push	{r7, lr}
 801aa3e:	b084      	sub	sp, #16
 801aa40:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801aa42:	f7eb ff43 	bl	80068cc <sys_now>
 801aa46:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801aa48:	4b17      	ldr	r3, [pc, #92]	; (801aaa8 <sys_check_timeouts+0x6c>)
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801aa4e:	68bb      	ldr	r3, [r7, #8]
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d022      	beq.n	801aa9a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801aa54:	68bb      	ldr	r3, [r7, #8]
 801aa56:	685b      	ldr	r3, [r3, #4]
 801aa58:	68fa      	ldr	r2, [r7, #12]
 801aa5a:	1ad3      	subs	r3, r2, r3
 801aa5c:	0fdb      	lsrs	r3, r3, #31
 801aa5e:	f003 0301 	and.w	r3, r3, #1
 801aa62:	b2db      	uxtb	r3, r3
 801aa64:	2b00      	cmp	r3, #0
 801aa66:	d11a      	bne.n	801aa9e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801aa68:	68bb      	ldr	r3, [r7, #8]
 801aa6a:	681b      	ldr	r3, [r3, #0]
 801aa6c:	4a0e      	ldr	r2, [pc, #56]	; (801aaa8 <sys_check_timeouts+0x6c>)
 801aa6e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801aa70:	68bb      	ldr	r3, [r7, #8]
 801aa72:	689b      	ldr	r3, [r3, #8]
 801aa74:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801aa76:	68bb      	ldr	r3, [r7, #8]
 801aa78:	68db      	ldr	r3, [r3, #12]
 801aa7a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801aa7c:	68bb      	ldr	r3, [r7, #8]
 801aa7e:	685b      	ldr	r3, [r3, #4]
 801aa80:	4a0a      	ldr	r2, [pc, #40]	; (801aaac <sys_check_timeouts+0x70>)
 801aa82:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801aa84:	68b9      	ldr	r1, [r7, #8]
 801aa86:	200a      	movs	r0, #10
 801aa88:	f7f8 fca2 	bl	80133d0 <memp_free>
    if (handler != NULL) {
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	2b00      	cmp	r3, #0
 801aa90:	d0da      	beq.n	801aa48 <sys_check_timeouts+0xc>
      handler(arg);
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	6838      	ldr	r0, [r7, #0]
 801aa96:	4798      	blx	r3
  do {
 801aa98:	e7d6      	b.n	801aa48 <sys_check_timeouts+0xc>
      return;
 801aa9a:	bf00      	nop
 801aa9c:	e000      	b.n	801aaa0 <sys_check_timeouts+0x64>
      return;
 801aa9e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801aaa0:	3710      	adds	r7, #16
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	bd80      	pop	{r7, pc}
 801aaa6:	bf00      	nop
 801aaa8:	20012320 	.word	0x20012320
 801aaac:	20012324 	.word	0x20012324

0801aab0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801aab0:	b580      	push	{r7, lr}
 801aab2:	b082      	sub	sp, #8
 801aab4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801aab6:	4b16      	ldr	r3, [pc, #88]	; (801ab10 <sys_timeouts_sleeptime+0x60>)
 801aab8:	681b      	ldr	r3, [r3, #0]
 801aaba:	2b00      	cmp	r3, #0
 801aabc:	d102      	bne.n	801aac4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801aabe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801aac2:	e020      	b.n	801ab06 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801aac4:	f7eb ff02 	bl	80068cc <sys_now>
 801aac8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801aaca:	4b11      	ldr	r3, [pc, #68]	; (801ab10 <sys_timeouts_sleeptime+0x60>)
 801aacc:	681b      	ldr	r3, [r3, #0]
 801aace:	685a      	ldr	r2, [r3, #4]
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	1ad3      	subs	r3, r2, r3
 801aad4:	0fdb      	lsrs	r3, r3, #31
 801aad6:	f003 0301 	and.w	r3, r3, #1
 801aada:	b2db      	uxtb	r3, r3
 801aadc:	2b00      	cmp	r3, #0
 801aade:	d001      	beq.n	801aae4 <sys_timeouts_sleeptime+0x34>
    return 0;
 801aae0:	2300      	movs	r3, #0
 801aae2:	e010      	b.n	801ab06 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801aae4:	4b0a      	ldr	r3, [pc, #40]	; (801ab10 <sys_timeouts_sleeptime+0x60>)
 801aae6:	681b      	ldr	r3, [r3, #0]
 801aae8:	685a      	ldr	r2, [r3, #4]
 801aaea:	687b      	ldr	r3, [r7, #4]
 801aaec:	1ad3      	subs	r3, r2, r3
 801aaee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801aaf0:	683b      	ldr	r3, [r7, #0]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	da06      	bge.n	801ab04 <sys_timeouts_sleeptime+0x54>
 801aaf6:	4b07      	ldr	r3, [pc, #28]	; (801ab14 <sys_timeouts_sleeptime+0x64>)
 801aaf8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801aafc:	4906      	ldr	r1, [pc, #24]	; (801ab18 <sys_timeouts_sleeptime+0x68>)
 801aafe:	4807      	ldr	r0, [pc, #28]	; (801ab1c <sys_timeouts_sleeptime+0x6c>)
 801ab00:	f006 fc5a 	bl	80213b8 <iprintf>
    return ret;
 801ab04:	683b      	ldr	r3, [r7, #0]
  }
}
 801ab06:	4618      	mov	r0, r3
 801ab08:	3708      	adds	r7, #8
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	bd80      	pop	{r7, pc}
 801ab0e:	bf00      	nop
 801ab10:	20012320 	.word	0x20012320
 801ab14:	08025f60 	.word	0x08025f60
 801ab18:	08026034 	.word	0x08026034
 801ab1c:	08025fd4 	.word	0x08025fd4

0801ab20 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ab20:	b580      	push	{r7, lr}
 801ab22:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ab24:	f006 facc 	bl	80210c0 <rand>
 801ab28:	4603      	mov	r3, r0
 801ab2a:	b29b      	uxth	r3, r3
 801ab2c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ab30:	b29b      	uxth	r3, r3
 801ab32:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ab36:	b29a      	uxth	r2, r3
 801ab38:	4b01      	ldr	r3, [pc, #4]	; (801ab40 <udp_init+0x20>)
 801ab3a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ab3c:	bf00      	nop
 801ab3e:	bd80      	pop	{r7, pc}
 801ab40:	2000002c 	.word	0x2000002c

0801ab44 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801ab44:	b480      	push	{r7}
 801ab46:	b083      	sub	sp, #12
 801ab48:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801ab4e:	4b17      	ldr	r3, [pc, #92]	; (801abac <udp_new_port+0x68>)
 801ab50:	881b      	ldrh	r3, [r3, #0]
 801ab52:	1c5a      	adds	r2, r3, #1
 801ab54:	b291      	uxth	r1, r2
 801ab56:	4a15      	ldr	r2, [pc, #84]	; (801abac <udp_new_port+0x68>)
 801ab58:	8011      	strh	r1, [r2, #0]
 801ab5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ab5e:	4293      	cmp	r3, r2
 801ab60:	d103      	bne.n	801ab6a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801ab62:	4b12      	ldr	r3, [pc, #72]	; (801abac <udp_new_port+0x68>)
 801ab64:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801ab68:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ab6a:	4b11      	ldr	r3, [pc, #68]	; (801abb0 <udp_new_port+0x6c>)
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	603b      	str	r3, [r7, #0]
 801ab70:	e011      	b.n	801ab96 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801ab72:	683b      	ldr	r3, [r7, #0]
 801ab74:	8a5a      	ldrh	r2, [r3, #18]
 801ab76:	4b0d      	ldr	r3, [pc, #52]	; (801abac <udp_new_port+0x68>)
 801ab78:	881b      	ldrh	r3, [r3, #0]
 801ab7a:	429a      	cmp	r2, r3
 801ab7c:	d108      	bne.n	801ab90 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801ab7e:	88fb      	ldrh	r3, [r7, #6]
 801ab80:	3301      	adds	r3, #1
 801ab82:	80fb      	strh	r3, [r7, #6]
 801ab84:	88fb      	ldrh	r3, [r7, #6]
 801ab86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ab8a:	d3e0      	bcc.n	801ab4e <udp_new_port+0xa>
        return 0;
 801ab8c:	2300      	movs	r3, #0
 801ab8e:	e007      	b.n	801aba0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ab90:	683b      	ldr	r3, [r7, #0]
 801ab92:	68db      	ldr	r3, [r3, #12]
 801ab94:	603b      	str	r3, [r7, #0]
 801ab96:	683b      	ldr	r3, [r7, #0]
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d1ea      	bne.n	801ab72 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801ab9c:	4b03      	ldr	r3, [pc, #12]	; (801abac <udp_new_port+0x68>)
 801ab9e:	881b      	ldrh	r3, [r3, #0]
}
 801aba0:	4618      	mov	r0, r3
 801aba2:	370c      	adds	r7, #12
 801aba4:	46bd      	mov	sp, r7
 801aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abaa:	4770      	bx	lr
 801abac:	2000002c 	.word	0x2000002c
 801abb0:	2001232c 	.word	0x2001232c

0801abb4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b084      	sub	sp, #16
 801abb8:	af00      	add	r7, sp, #0
 801abba:	60f8      	str	r0, [r7, #12]
 801abbc:	60b9      	str	r1, [r7, #8]
 801abbe:	4613      	mov	r3, r2
 801abc0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d105      	bne.n	801abd4 <udp_input_local_match+0x20>
 801abc8:	4b27      	ldr	r3, [pc, #156]	; (801ac68 <udp_input_local_match+0xb4>)
 801abca:	2287      	movs	r2, #135	; 0x87
 801abcc:	4927      	ldr	r1, [pc, #156]	; (801ac6c <udp_input_local_match+0xb8>)
 801abce:	4828      	ldr	r0, [pc, #160]	; (801ac70 <udp_input_local_match+0xbc>)
 801abd0:	f006 fbf2 	bl	80213b8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801abd4:	68bb      	ldr	r3, [r7, #8]
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d105      	bne.n	801abe6 <udp_input_local_match+0x32>
 801abda:	4b23      	ldr	r3, [pc, #140]	; (801ac68 <udp_input_local_match+0xb4>)
 801abdc:	2288      	movs	r2, #136	; 0x88
 801abde:	4925      	ldr	r1, [pc, #148]	; (801ac74 <udp_input_local_match+0xc0>)
 801abe0:	4823      	ldr	r0, [pc, #140]	; (801ac70 <udp_input_local_match+0xbc>)
 801abe2:	f006 fbe9 	bl	80213b8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801abe6:	68fb      	ldr	r3, [r7, #12]
 801abe8:	7a1b      	ldrb	r3, [r3, #8]
 801abea:	2b00      	cmp	r3, #0
 801abec:	d00b      	beq.n	801ac06 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	7a1a      	ldrb	r2, [r3, #8]
 801abf2:	4b21      	ldr	r3, [pc, #132]	; (801ac78 <udp_input_local_match+0xc4>)
 801abf4:	685b      	ldr	r3, [r3, #4]
 801abf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801abfa:	3301      	adds	r3, #1
 801abfc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801abfe:	429a      	cmp	r2, r3
 801ac00:	d001      	beq.n	801ac06 <udp_input_local_match+0x52>
    return 0;
 801ac02:	2300      	movs	r3, #0
 801ac04:	e02b      	b.n	801ac5e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801ac06:	79fb      	ldrb	r3, [r7, #7]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d018      	beq.n	801ac3e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ac0c:	68fb      	ldr	r3, [r7, #12]
 801ac0e:	2b00      	cmp	r3, #0
 801ac10:	d013      	beq.n	801ac3a <udp_input_local_match+0x86>
 801ac12:	68fb      	ldr	r3, [r7, #12]
 801ac14:	681b      	ldr	r3, [r3, #0]
 801ac16:	2b00      	cmp	r3, #0
 801ac18:	d00f      	beq.n	801ac3a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ac1a:	4b17      	ldr	r3, [pc, #92]	; (801ac78 <udp_input_local_match+0xc4>)
 801ac1c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ac1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ac22:	d00a      	beq.n	801ac3a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	681a      	ldr	r2, [r3, #0]
 801ac28:	4b13      	ldr	r3, [pc, #76]	; (801ac78 <udp_input_local_match+0xc4>)
 801ac2a:	695b      	ldr	r3, [r3, #20]
 801ac2c:	405a      	eors	r2, r3
 801ac2e:	68bb      	ldr	r3, [r7, #8]
 801ac30:	3308      	adds	r3, #8
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d110      	bne.n	801ac5c <udp_input_local_match+0xa8>
          return 1;
 801ac3a:	2301      	movs	r3, #1
 801ac3c:	e00f      	b.n	801ac5e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801ac3e:	68fb      	ldr	r3, [r7, #12]
 801ac40:	2b00      	cmp	r3, #0
 801ac42:	d009      	beq.n	801ac58 <udp_input_local_match+0xa4>
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	681b      	ldr	r3, [r3, #0]
 801ac48:	2b00      	cmp	r3, #0
 801ac4a:	d005      	beq.n	801ac58 <udp_input_local_match+0xa4>
 801ac4c:	68fb      	ldr	r3, [r7, #12]
 801ac4e:	681a      	ldr	r2, [r3, #0]
 801ac50:	4b09      	ldr	r3, [pc, #36]	; (801ac78 <udp_input_local_match+0xc4>)
 801ac52:	695b      	ldr	r3, [r3, #20]
 801ac54:	429a      	cmp	r2, r3
 801ac56:	d101      	bne.n	801ac5c <udp_input_local_match+0xa8>
        return 1;
 801ac58:	2301      	movs	r3, #1
 801ac5a:	e000      	b.n	801ac5e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801ac5c:	2300      	movs	r3, #0
}
 801ac5e:	4618      	mov	r0, r3
 801ac60:	3710      	adds	r7, #16
 801ac62:	46bd      	mov	sp, r7
 801ac64:	bd80      	pop	{r7, pc}
 801ac66:	bf00      	nop
 801ac68:	08026048 	.word	0x08026048
 801ac6c:	08026078 	.word	0x08026078
 801ac70:	0802609c 	.word	0x0802609c
 801ac74:	080260c4 	.word	0x080260c4
 801ac78:	2000eb24 	.word	0x2000eb24

0801ac7c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801ac7c:	b590      	push	{r4, r7, lr}
 801ac7e:	b08d      	sub	sp, #52	; 0x34
 801ac80:	af02      	add	r7, sp, #8
 801ac82:	6078      	str	r0, [r7, #4]
 801ac84:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801ac86:	2300      	movs	r3, #0
 801ac88:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801ac8a:	687b      	ldr	r3, [r7, #4]
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	d105      	bne.n	801ac9c <udp_input+0x20>
 801ac90:	4b82      	ldr	r3, [pc, #520]	; (801ae9c <udp_input+0x220>)
 801ac92:	22cf      	movs	r2, #207	; 0xcf
 801ac94:	4982      	ldr	r1, [pc, #520]	; (801aea0 <udp_input+0x224>)
 801ac96:	4883      	ldr	r0, [pc, #524]	; (801aea4 <udp_input+0x228>)
 801ac98:	f006 fb8e 	bl	80213b8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ac9c:	683b      	ldr	r3, [r7, #0]
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d105      	bne.n	801acae <udp_input+0x32>
 801aca2:	4b7e      	ldr	r3, [pc, #504]	; (801ae9c <udp_input+0x220>)
 801aca4:	22d0      	movs	r2, #208	; 0xd0
 801aca6:	4980      	ldr	r1, [pc, #512]	; (801aea8 <udp_input+0x22c>)
 801aca8:	487e      	ldr	r0, [pc, #504]	; (801aea4 <udp_input+0x228>)
 801acaa:	f006 fb85 	bl	80213b8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	895b      	ldrh	r3, [r3, #10]
 801acb2:	2b07      	cmp	r3, #7
 801acb4:	d803      	bhi.n	801acbe <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801acb6:	6878      	ldr	r0, [r7, #4]
 801acb8:	f7f9 fa3a 	bl	8014130 <pbuf_free>
    goto end;
 801acbc:	e0ea      	b.n	801ae94 <udp_input+0x218>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801acbe:	687b      	ldr	r3, [r7, #4]
 801acc0:	685b      	ldr	r3, [r3, #4]
 801acc2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801acc4:	4b79      	ldr	r3, [pc, #484]	; (801aeac <udp_input+0x230>)
 801acc6:	695b      	ldr	r3, [r3, #20]
 801acc8:	4a78      	ldr	r2, [pc, #480]	; (801aeac <udp_input+0x230>)
 801acca:	6812      	ldr	r2, [r2, #0]
 801accc:	4611      	mov	r1, r2
 801acce:	4618      	mov	r0, r3
 801acd0:	f003 fe2a 	bl	801e928 <ip4_addr_isbroadcast_u32>
 801acd4:	4603      	mov	r3, r0
 801acd6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801acd8:	697b      	ldr	r3, [r7, #20]
 801acda:	881b      	ldrh	r3, [r3, #0]
 801acdc:	b29b      	uxth	r3, r3
 801acde:	4618      	mov	r0, r3
 801ace0:	f7f7 fe28 	bl	8012934 <lwip_htons>
 801ace4:	4603      	mov	r3, r0
 801ace6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801ace8:	697b      	ldr	r3, [r7, #20]
 801acea:	885b      	ldrh	r3, [r3, #2]
 801acec:	b29b      	uxth	r3, r3
 801acee:	4618      	mov	r0, r3
 801acf0:	f7f7 fe20 	bl	8012934 <lwip_htons>
 801acf4:	4603      	mov	r3, r0
 801acf6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801acf8:	2300      	movs	r3, #0
 801acfa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801acfc:	2300      	movs	r3, #0
 801acfe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801ad00:	2300      	movs	r3, #0
 801ad02:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ad04:	4b6a      	ldr	r3, [pc, #424]	; (801aeb0 <udp_input+0x234>)
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	627b      	str	r3, [r7, #36]	; 0x24
 801ad0a:	e060      	b.n	801adce <udp_input+0x152>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad0e:	8a5b      	ldrh	r3, [r3, #18]
 801ad10:	89fa      	ldrh	r2, [r7, #14]
 801ad12:	429a      	cmp	r2, r3
 801ad14:	d156      	bne.n	801adc4 <udp_input+0x148>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801ad16:	7cfb      	ldrb	r3, [r7, #19]
 801ad18:	461a      	mov	r2, r3
 801ad1a:	6839      	ldr	r1, [r7, #0]
 801ad1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad1e:	f7ff ff49 	bl	801abb4 <udp_input_local_match>
 801ad22:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d04d      	beq.n	801adc4 <udp_input+0x148>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801ad28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad2a:	7c1b      	ldrb	r3, [r3, #16]
 801ad2c:	f003 0304 	and.w	r3, r3, #4
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	d129      	bne.n	801ad88 <udp_input+0x10c>
        if (uncon_pcb == NULL) {
 801ad34:	69fb      	ldr	r3, [r7, #28]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d102      	bne.n	801ad40 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801ad3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad3c:	61fb      	str	r3, [r7, #28]
 801ad3e:	e023      	b.n	801ad88 <udp_input+0x10c>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801ad40:	7cfb      	ldrb	r3, [r7, #19]
 801ad42:	2b00      	cmp	r3, #0
 801ad44:	d015      	beq.n	801ad72 <udp_input+0xf6>
 801ad46:	4b59      	ldr	r3, [pc, #356]	; (801aeac <udp_input+0x230>)
 801ad48:	695b      	ldr	r3, [r3, #20]
 801ad4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801ad4e:	d110      	bne.n	801ad72 <udp_input+0xf6>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ad50:	69fb      	ldr	r3, [r7, #28]
 801ad52:	681a      	ldr	r2, [r3, #0]
 801ad54:	683b      	ldr	r3, [r7, #0]
 801ad56:	3304      	adds	r3, #4
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	429a      	cmp	r2, r3
 801ad5c:	d013      	beq.n	801ad86 <udp_input+0x10a>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad60:	681a      	ldr	r2, [r3, #0]
 801ad62:	683b      	ldr	r3, [r7, #0]
 801ad64:	3304      	adds	r3, #4
 801ad66:	681b      	ldr	r3, [r3, #0]
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	d10c      	bne.n	801ad86 <udp_input+0x10a>
              /* better match */
              uncon_pcb = pcb;
 801ad6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad6e:	61fb      	str	r3, [r7, #28]
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ad70:	e009      	b.n	801ad86 <udp_input+0x10a>
            }
          }
#endif /* LWIP_IPV4 */
        }
#if SO_REUSE
        else if (!ip_addr_isany(&pcb->local_ip)) {
 801ad72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d007      	beq.n	801ad88 <udp_input+0x10c>
 801ad78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	2b00      	cmp	r3, #0
 801ad7e:	d003      	beq.n	801ad88 <udp_input+0x10c>
          /* prefer specific IPs over catch-all */
          uncon_pcb = pcb;
 801ad80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad82:	61fb      	str	r3, [r7, #28]
 801ad84:	e000      	b.n	801ad88 <udp_input+0x10c>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801ad86:	bf00      	nop
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801ad88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8a:	8a9b      	ldrh	r3, [r3, #20]
 801ad8c:	8a3a      	ldrh	r2, [r7, #16]
 801ad8e:	429a      	cmp	r2, r3
 801ad90:	d118      	bne.n	801adc4 <udp_input+0x148>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ad92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad94:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d005      	beq.n	801ada6 <udp_input+0x12a>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801ad9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad9c:	685a      	ldr	r2, [r3, #4]
 801ad9e:	4b43      	ldr	r3, [pc, #268]	; (801aeac <udp_input+0x230>)
 801ada0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801ada2:	429a      	cmp	r2, r3
 801ada4:	d10e      	bne.n	801adc4 <udp_input+0x148>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801ada6:	6a3b      	ldr	r3, [r7, #32]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d014      	beq.n	801add6 <udp_input+0x15a>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801adac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adae:	68da      	ldr	r2, [r3, #12]
 801adb0:	6a3b      	ldr	r3, [r7, #32]
 801adb2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801adb4:	4b3e      	ldr	r3, [pc, #248]	; (801aeb0 <udp_input+0x234>)
 801adb6:	681a      	ldr	r2, [r3, #0]
 801adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adba:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801adbc:	4a3c      	ldr	r2, [pc, #240]	; (801aeb0 <udp_input+0x234>)
 801adbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adc0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801adc2:	e008      	b.n	801add6 <udp_input+0x15a>
      }
    }

    prev = pcb;
 801adc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adc6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801adc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adca:	68db      	ldr	r3, [r3, #12]
 801adcc:	627b      	str	r3, [r7, #36]	; 0x24
 801adce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801add0:	2b00      	cmp	r3, #0
 801add2:	d19b      	bne.n	801ad0c <udp_input+0x90>
 801add4:	e000      	b.n	801add8 <udp_input+0x15c>
        break;
 801add6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801add8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adda:	2b00      	cmp	r3, #0
 801addc:	d101      	bne.n	801ade2 <udp_input+0x166>
    pcb = uncon_pcb;
 801adde:	69fb      	ldr	r3, [r7, #28]
 801ade0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801ade2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d002      	beq.n	801adee <udp_input+0x172>
    for_us = 1;
 801ade8:	2301      	movs	r3, #1
 801adea:	76fb      	strb	r3, [r7, #27]
 801adec:	e00a      	b.n	801ae04 <udp_input+0x188>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801adee:	683b      	ldr	r3, [r7, #0]
 801adf0:	3304      	adds	r3, #4
 801adf2:	681a      	ldr	r2, [r3, #0]
 801adf4:	4b2d      	ldr	r3, [pc, #180]	; (801aeac <udp_input+0x230>)
 801adf6:	695b      	ldr	r3, [r3, #20]
 801adf8:	429a      	cmp	r2, r3
 801adfa:	bf0c      	ite	eq
 801adfc:	2301      	moveq	r3, #1
 801adfe:	2300      	movne	r3, #0
 801ae00:	b2db      	uxtb	r3, r3
 801ae02:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801ae04:	7efb      	ldrb	r3, [r7, #27]
 801ae06:	2b00      	cmp	r3, #0
 801ae08:	d041      	beq.n	801ae8e <udp_input+0x212>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801ae0a:	2108      	movs	r1, #8
 801ae0c:	6878      	ldr	r0, [r7, #4]
 801ae0e:	f7f9 f909 	bl	8014024 <pbuf_remove_header>
 801ae12:	4603      	mov	r3, r0
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d00a      	beq.n	801ae2e <udp_input+0x1b2>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801ae18:	4b20      	ldr	r3, [pc, #128]	; (801ae9c <udp_input+0x220>)
 801ae1a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801ae1e:	4925      	ldr	r1, [pc, #148]	; (801aeb4 <udp_input+0x238>)
 801ae20:	4820      	ldr	r0, [pc, #128]	; (801aea4 <udp_input+0x228>)
 801ae22:	f006 fac9 	bl	80213b8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801ae26:	6878      	ldr	r0, [r7, #4]
 801ae28:	f7f9 f982 	bl	8014130 <pbuf_free>
      goto end;
 801ae2c:	e032      	b.n	801ae94 <udp_input+0x218>
    }

    if (pcb != NULL) {
 801ae2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d012      	beq.n	801ae5a <udp_input+0x1de>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801ae34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae36:	699b      	ldr	r3, [r3, #24]
 801ae38:	2b00      	cmp	r3, #0
 801ae3a:	d00a      	beq.n	801ae52 <udp_input+0x1d6>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae3e:	699c      	ldr	r4, [r3, #24]
 801ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae42:	69d8      	ldr	r0, [r3, #28]
 801ae44:	8a3b      	ldrh	r3, [r7, #16]
 801ae46:	9300      	str	r3, [sp, #0]
 801ae48:	4b1b      	ldr	r3, [pc, #108]	; (801aeb8 <udp_input+0x23c>)
 801ae4a:	687a      	ldr	r2, [r7, #4]
 801ae4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ae4e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801ae50:	e021      	b.n	801ae96 <udp_input+0x21a>
        pbuf_free(p);
 801ae52:	6878      	ldr	r0, [r7, #4]
 801ae54:	f7f9 f96c 	bl	8014130 <pbuf_free>
        goto end;
 801ae58:	e01c      	b.n	801ae94 <udp_input+0x218>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801ae5a:	7cfb      	ldrb	r3, [r7, #19]
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d112      	bne.n	801ae86 <udp_input+0x20a>
 801ae60:	4b12      	ldr	r3, [pc, #72]	; (801aeac <udp_input+0x230>)
 801ae62:	695b      	ldr	r3, [r3, #20]
 801ae64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ae68:	2be0      	cmp	r3, #224	; 0xe0
 801ae6a:	d00c      	beq.n	801ae86 <udp_input+0x20a>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801ae6c:	4b0f      	ldr	r3, [pc, #60]	; (801aeac <udp_input+0x230>)
 801ae6e:	899b      	ldrh	r3, [r3, #12]
 801ae70:	3308      	adds	r3, #8
 801ae72:	b29b      	uxth	r3, r3
 801ae74:	b21b      	sxth	r3, r3
 801ae76:	4619      	mov	r1, r3
 801ae78:	6878      	ldr	r0, [r7, #4]
 801ae7a:	f7f9 f946 	bl	801410a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801ae7e:	2103      	movs	r1, #3
 801ae80:	6878      	ldr	r0, [r7, #4]
 801ae82:	f003 fa13 	bl	801e2ac <icmp_dest_unreach>
      pbuf_free(p);
 801ae86:	6878      	ldr	r0, [r7, #4]
 801ae88:	f7f9 f952 	bl	8014130 <pbuf_free>
  return;
 801ae8c:	e003      	b.n	801ae96 <udp_input+0x21a>
    pbuf_free(p);
 801ae8e:	6878      	ldr	r0, [r7, #4]
 801ae90:	f7f9 f94e 	bl	8014130 <pbuf_free>
  return;
 801ae94:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801ae96:	372c      	adds	r7, #44	; 0x2c
 801ae98:	46bd      	mov	sp, r7
 801ae9a:	bd90      	pop	{r4, r7, pc}
 801ae9c:	08026048 	.word	0x08026048
 801aea0:	080260ec 	.word	0x080260ec
 801aea4:	0802609c 	.word	0x0802609c
 801aea8:	08026104 	.word	0x08026104
 801aeac:	2000eb24 	.word	0x2000eb24
 801aeb0:	2001232c 	.word	0x2001232c
 801aeb4:	08026120 	.word	0x08026120
 801aeb8:	2000eb34 	.word	0x2000eb34

0801aebc <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801aebc:	b580      	push	{r7, lr}
 801aebe:	b088      	sub	sp, #32
 801aec0:	af02      	add	r7, sp, #8
 801aec2:	60f8      	str	r0, [r7, #12]
 801aec4:	60b9      	str	r1, [r7, #8]
 801aec6:	607a      	str	r2, [r7, #4]
 801aec8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801aeca:	68fb      	ldr	r3, [r7, #12]
 801aecc:	2b00      	cmp	r3, #0
 801aece:	d109      	bne.n	801aee4 <udp_sendto_if+0x28>
 801aed0:	4b2e      	ldr	r3, [pc, #184]	; (801af8c <udp_sendto_if+0xd0>)
 801aed2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aed6:	492e      	ldr	r1, [pc, #184]	; (801af90 <udp_sendto_if+0xd4>)
 801aed8:	482e      	ldr	r0, [pc, #184]	; (801af94 <udp_sendto_if+0xd8>)
 801aeda:	f006 fa6d 	bl	80213b8 <iprintf>
 801aede:	f06f 030f 	mvn.w	r3, #15
 801aee2:	e04f      	b.n	801af84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801aee4:	68bb      	ldr	r3, [r7, #8]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d109      	bne.n	801aefe <udp_sendto_if+0x42>
 801aeea:	4b28      	ldr	r3, [pc, #160]	; (801af8c <udp_sendto_if+0xd0>)
 801aeec:	f240 2281 	movw	r2, #641	; 0x281
 801aef0:	4929      	ldr	r1, [pc, #164]	; (801af98 <udp_sendto_if+0xdc>)
 801aef2:	4828      	ldr	r0, [pc, #160]	; (801af94 <udp_sendto_if+0xd8>)
 801aef4:	f006 fa60 	bl	80213b8 <iprintf>
 801aef8:	f06f 030f 	mvn.w	r3, #15
 801aefc:	e042      	b.n	801af84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	2b00      	cmp	r3, #0
 801af02:	d109      	bne.n	801af18 <udp_sendto_if+0x5c>
 801af04:	4b21      	ldr	r3, [pc, #132]	; (801af8c <udp_sendto_if+0xd0>)
 801af06:	f240 2282 	movw	r2, #642	; 0x282
 801af0a:	4924      	ldr	r1, [pc, #144]	; (801af9c <udp_sendto_if+0xe0>)
 801af0c:	4821      	ldr	r0, [pc, #132]	; (801af94 <udp_sendto_if+0xd8>)
 801af0e:	f006 fa53 	bl	80213b8 <iprintf>
 801af12:	f06f 030f 	mvn.w	r3, #15
 801af16:	e035      	b.n	801af84 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801af18:	6a3b      	ldr	r3, [r7, #32]
 801af1a:	2b00      	cmp	r3, #0
 801af1c:	d109      	bne.n	801af32 <udp_sendto_if+0x76>
 801af1e:	4b1b      	ldr	r3, [pc, #108]	; (801af8c <udp_sendto_if+0xd0>)
 801af20:	f240 2283 	movw	r2, #643	; 0x283
 801af24:	491e      	ldr	r1, [pc, #120]	; (801afa0 <udp_sendto_if+0xe4>)
 801af26:	481b      	ldr	r0, [pc, #108]	; (801af94 <udp_sendto_if+0xd8>)
 801af28:	f006 fa46 	bl	80213b8 <iprintf>
 801af2c:	f06f 030f 	mvn.w	r3, #15
 801af30:	e028      	b.n	801af84 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801af32:	68fb      	ldr	r3, [r7, #12]
 801af34:	2b00      	cmp	r3, #0
 801af36:	d009      	beq.n	801af4c <udp_sendto_if+0x90>
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	2b00      	cmp	r3, #0
 801af3e:	d005      	beq.n	801af4c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	681b      	ldr	r3, [r3, #0]
 801af44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801af48:	2be0      	cmp	r3, #224	; 0xe0
 801af4a:	d103      	bne.n	801af54 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801af4c:	6a3b      	ldr	r3, [r7, #32]
 801af4e:	3304      	adds	r3, #4
 801af50:	617b      	str	r3, [r7, #20]
 801af52:	e00b      	b.n	801af6c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801af54:	68fb      	ldr	r3, [r7, #12]
 801af56:	681a      	ldr	r2, [r3, #0]
 801af58:	6a3b      	ldr	r3, [r7, #32]
 801af5a:	3304      	adds	r3, #4
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	429a      	cmp	r2, r3
 801af60:	d002      	beq.n	801af68 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801af62:	f06f 0303 	mvn.w	r3, #3
 801af66:	e00d      	b.n	801af84 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801af6c:	887a      	ldrh	r2, [r7, #2]
 801af6e:	697b      	ldr	r3, [r7, #20]
 801af70:	9301      	str	r3, [sp, #4]
 801af72:	6a3b      	ldr	r3, [r7, #32]
 801af74:	9300      	str	r3, [sp, #0]
 801af76:	4613      	mov	r3, r2
 801af78:	687a      	ldr	r2, [r7, #4]
 801af7a:	68b9      	ldr	r1, [r7, #8]
 801af7c:	68f8      	ldr	r0, [r7, #12]
 801af7e:	f000 f811 	bl	801afa4 <udp_sendto_if_src>
 801af82:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801af84:	4618      	mov	r0, r3
 801af86:	3718      	adds	r7, #24
 801af88:	46bd      	mov	sp, r7
 801af8a:	bd80      	pop	{r7, pc}
 801af8c:	08026048 	.word	0x08026048
 801af90:	080261bc 	.word	0x080261bc
 801af94:	0802609c 	.word	0x0802609c
 801af98:	080261d8 	.word	0x080261d8
 801af9c:	080261f4 	.word	0x080261f4
 801afa0:	08026214 	.word	0x08026214

0801afa4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b08c      	sub	sp, #48	; 0x30
 801afa8:	af04      	add	r7, sp, #16
 801afaa:	60f8      	str	r0, [r7, #12]
 801afac:	60b9      	str	r1, [r7, #8]
 801afae:	607a      	str	r2, [r7, #4]
 801afb0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d109      	bne.n	801afcc <udp_sendto_if_src+0x28>
 801afb8:	4b65      	ldr	r3, [pc, #404]	; (801b150 <udp_sendto_if_src+0x1ac>)
 801afba:	f240 22d1 	movw	r2, #721	; 0x2d1
 801afbe:	4965      	ldr	r1, [pc, #404]	; (801b154 <udp_sendto_if_src+0x1b0>)
 801afc0:	4865      	ldr	r0, [pc, #404]	; (801b158 <udp_sendto_if_src+0x1b4>)
 801afc2:	f006 f9f9 	bl	80213b8 <iprintf>
 801afc6:	f06f 030f 	mvn.w	r3, #15
 801afca:	e0bc      	b.n	801b146 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801afcc:	68bb      	ldr	r3, [r7, #8]
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d109      	bne.n	801afe6 <udp_sendto_if_src+0x42>
 801afd2:	4b5f      	ldr	r3, [pc, #380]	; (801b150 <udp_sendto_if_src+0x1ac>)
 801afd4:	f240 22d2 	movw	r2, #722	; 0x2d2
 801afd8:	4960      	ldr	r1, [pc, #384]	; (801b15c <udp_sendto_if_src+0x1b8>)
 801afda:	485f      	ldr	r0, [pc, #380]	; (801b158 <udp_sendto_if_src+0x1b4>)
 801afdc:	f006 f9ec 	bl	80213b8 <iprintf>
 801afe0:	f06f 030f 	mvn.w	r3, #15
 801afe4:	e0af      	b.n	801b146 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	d109      	bne.n	801b000 <udp_sendto_if_src+0x5c>
 801afec:	4b58      	ldr	r3, [pc, #352]	; (801b150 <udp_sendto_if_src+0x1ac>)
 801afee:	f240 22d3 	movw	r2, #723	; 0x2d3
 801aff2:	495b      	ldr	r1, [pc, #364]	; (801b160 <udp_sendto_if_src+0x1bc>)
 801aff4:	4858      	ldr	r0, [pc, #352]	; (801b158 <udp_sendto_if_src+0x1b4>)
 801aff6:	f006 f9df 	bl	80213b8 <iprintf>
 801affa:	f06f 030f 	mvn.w	r3, #15
 801affe:	e0a2      	b.n	801b146 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b002:	2b00      	cmp	r3, #0
 801b004:	d109      	bne.n	801b01a <udp_sendto_if_src+0x76>
 801b006:	4b52      	ldr	r3, [pc, #328]	; (801b150 <udp_sendto_if_src+0x1ac>)
 801b008:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801b00c:	4955      	ldr	r1, [pc, #340]	; (801b164 <udp_sendto_if_src+0x1c0>)
 801b00e:	4852      	ldr	r0, [pc, #328]	; (801b158 <udp_sendto_if_src+0x1b4>)
 801b010:	f006 f9d2 	bl	80213b8 <iprintf>
 801b014:	f06f 030f 	mvn.w	r3, #15
 801b018:	e095      	b.n	801b146 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d109      	bne.n	801b034 <udp_sendto_if_src+0x90>
 801b020:	4b4b      	ldr	r3, [pc, #300]	; (801b150 <udp_sendto_if_src+0x1ac>)
 801b022:	f240 22d5 	movw	r2, #725	; 0x2d5
 801b026:	4950      	ldr	r1, [pc, #320]	; (801b168 <udp_sendto_if_src+0x1c4>)
 801b028:	484b      	ldr	r0, [pc, #300]	; (801b158 <udp_sendto_if_src+0x1b4>)
 801b02a:	f006 f9c5 	bl	80213b8 <iprintf>
 801b02e:	f06f 030f 	mvn.w	r3, #15
 801b032:	e088      	b.n	801b146 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	8a5b      	ldrh	r3, [r3, #18]
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d10f      	bne.n	801b05c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b03c:	68f9      	ldr	r1, [r7, #12]
 801b03e:	68fb      	ldr	r3, [r7, #12]
 801b040:	8a5b      	ldrh	r3, [r3, #18]
 801b042:	461a      	mov	r2, r3
 801b044:	68f8      	ldr	r0, [r7, #12]
 801b046:	f000 f893 	bl	801b170 <udp_bind>
 801b04a:	4603      	mov	r3, r0
 801b04c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b04e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b052:	2b00      	cmp	r3, #0
 801b054:	d002      	beq.n	801b05c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b056:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b05a:	e074      	b.n	801b146 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b05c:	68bb      	ldr	r3, [r7, #8]
 801b05e:	891b      	ldrh	r3, [r3, #8]
 801b060:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801b064:	4293      	cmp	r3, r2
 801b066:	d902      	bls.n	801b06e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b06c:	e06b      	b.n	801b146 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b06e:	2108      	movs	r1, #8
 801b070:	68b8      	ldr	r0, [r7, #8]
 801b072:	f7f8 ffc7 	bl	8014004 <pbuf_add_header>
 801b076:	4603      	mov	r3, r0
 801b078:	2b00      	cmp	r3, #0
 801b07a:	d015      	beq.n	801b0a8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b07c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b080:	2108      	movs	r1, #8
 801b082:	2022      	movs	r0, #34	; 0x22
 801b084:	f7f8 fd70 	bl	8013b68 <pbuf_alloc>
 801b088:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b08a:	69fb      	ldr	r3, [r7, #28]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d102      	bne.n	801b096 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b094:	e057      	b.n	801b146 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801b096:	68bb      	ldr	r3, [r7, #8]
 801b098:	891b      	ldrh	r3, [r3, #8]
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	d006      	beq.n	801b0ac <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b09e:	68b9      	ldr	r1, [r7, #8]
 801b0a0:	69f8      	ldr	r0, [r7, #28]
 801b0a2:	f7f9 f969 	bl	8014378 <pbuf_chain>
 801b0a6:	e001      	b.n	801b0ac <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b0a8:	68bb      	ldr	r3, [r7, #8]
 801b0aa:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b0ac:	69fb      	ldr	r3, [r7, #28]
 801b0ae:	895b      	ldrh	r3, [r3, #10]
 801b0b0:	2b07      	cmp	r3, #7
 801b0b2:	d806      	bhi.n	801b0c2 <udp_sendto_if_src+0x11e>
 801b0b4:	4b26      	ldr	r3, [pc, #152]	; (801b150 <udp_sendto_if_src+0x1ac>)
 801b0b6:	f240 320d 	movw	r2, #781	; 0x30d
 801b0ba:	492c      	ldr	r1, [pc, #176]	; (801b16c <udp_sendto_if_src+0x1c8>)
 801b0bc:	4826      	ldr	r0, [pc, #152]	; (801b158 <udp_sendto_if_src+0x1b4>)
 801b0be:	f006 f97b 	bl	80213b8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b0c2:	69fb      	ldr	r3, [r7, #28]
 801b0c4:	685b      	ldr	r3, [r3, #4]
 801b0c6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b0c8:	68fb      	ldr	r3, [r7, #12]
 801b0ca:	8a5b      	ldrh	r3, [r3, #18]
 801b0cc:	4618      	mov	r0, r3
 801b0ce:	f7f7 fc31 	bl	8012934 <lwip_htons>
 801b0d2:	4603      	mov	r3, r0
 801b0d4:	461a      	mov	r2, r3
 801b0d6:	697b      	ldr	r3, [r7, #20]
 801b0d8:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b0da:	887b      	ldrh	r3, [r7, #2]
 801b0dc:	4618      	mov	r0, r3
 801b0de:	f7f7 fc29 	bl	8012934 <lwip_htons>
 801b0e2:	4603      	mov	r3, r0
 801b0e4:	461a      	mov	r2, r3
 801b0e6:	697b      	ldr	r3, [r7, #20]
 801b0e8:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b0ea:	697b      	ldr	r3, [r7, #20]
 801b0ec:	2200      	movs	r2, #0
 801b0ee:	719a      	strb	r2, [r3, #6]
 801b0f0:	2200      	movs	r2, #0
 801b0f2:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b0f4:	69fb      	ldr	r3, [r7, #28]
 801b0f6:	891b      	ldrh	r3, [r3, #8]
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	f7f7 fc1b 	bl	8012934 <lwip_htons>
 801b0fe:	4603      	mov	r3, r0
 801b100:	461a      	mov	r2, r3
 801b102:	697b      	ldr	r3, [r7, #20]
 801b104:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b106:	2311      	movs	r3, #17
 801b108:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b10a:	68fb      	ldr	r3, [r7, #12]
 801b10c:	7adb      	ldrb	r3, [r3, #11]
 801b10e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b110:	68fb      	ldr	r3, [r7, #12]
 801b112:	7a9b      	ldrb	r3, [r3, #10]
 801b114:	7cb9      	ldrb	r1, [r7, #18]
 801b116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b118:	9202      	str	r2, [sp, #8]
 801b11a:	7cfa      	ldrb	r2, [r7, #19]
 801b11c:	9201      	str	r2, [sp, #4]
 801b11e:	9300      	str	r3, [sp, #0]
 801b120:	460b      	mov	r3, r1
 801b122:	687a      	ldr	r2, [r7, #4]
 801b124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b126:	69f8      	ldr	r0, [r7, #28]
 801b128:	f003 fb50 	bl	801e7cc <ip4_output_if_src>
 801b12c:	4603      	mov	r3, r0
 801b12e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b130:	69fa      	ldr	r2, [r7, #28]
 801b132:	68bb      	ldr	r3, [r7, #8]
 801b134:	429a      	cmp	r2, r3
 801b136:	d004      	beq.n	801b142 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b138:	69f8      	ldr	r0, [r7, #28]
 801b13a:	f7f8 fff9 	bl	8014130 <pbuf_free>
    q = NULL;
 801b13e:	2300      	movs	r3, #0
 801b140:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b142:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b146:	4618      	mov	r0, r3
 801b148:	3720      	adds	r7, #32
 801b14a:	46bd      	mov	sp, r7
 801b14c:	bd80      	pop	{r7, pc}
 801b14e:	bf00      	nop
 801b150:	08026048 	.word	0x08026048
 801b154:	08026234 	.word	0x08026234
 801b158:	0802609c 	.word	0x0802609c
 801b15c:	08026254 	.word	0x08026254
 801b160:	08026274 	.word	0x08026274
 801b164:	08026298 	.word	0x08026298
 801b168:	080262bc 	.word	0x080262bc
 801b16c:	080262e0 	.word	0x080262e0

0801b170 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b170:	b580      	push	{r7, lr}
 801b172:	b086      	sub	sp, #24
 801b174:	af00      	add	r7, sp, #0
 801b176:	60f8      	str	r0, [r7, #12]
 801b178:	60b9      	str	r1, [r7, #8]
 801b17a:	4613      	mov	r3, r2
 801b17c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b17e:	68bb      	ldr	r3, [r7, #8]
 801b180:	2b00      	cmp	r3, #0
 801b182:	d101      	bne.n	801b188 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b184:	4b3f      	ldr	r3, [pc, #252]	; (801b284 <udp_bind+0x114>)
 801b186:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d109      	bne.n	801b1a2 <udp_bind+0x32>
 801b18e:	4b3e      	ldr	r3, [pc, #248]	; (801b288 <udp_bind+0x118>)
 801b190:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b194:	493d      	ldr	r1, [pc, #244]	; (801b28c <udp_bind+0x11c>)
 801b196:	483e      	ldr	r0, [pc, #248]	; (801b290 <udp_bind+0x120>)
 801b198:	f006 f90e 	bl	80213b8 <iprintf>
 801b19c:	f06f 030f 	mvn.w	r3, #15
 801b1a0:	e06c      	b.n	801b27c <udp_bind+0x10c>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b1a2:	2300      	movs	r3, #0
 801b1a4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b1a6:	4b3b      	ldr	r3, [pc, #236]	; (801b294 <udp_bind+0x124>)
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	617b      	str	r3, [r7, #20]
 801b1ac:	e009      	b.n	801b1c2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b1ae:	68fa      	ldr	r2, [r7, #12]
 801b1b0:	697b      	ldr	r3, [r7, #20]
 801b1b2:	429a      	cmp	r2, r3
 801b1b4:	d102      	bne.n	801b1bc <udp_bind+0x4c>
      rebind = 1;
 801b1b6:	2301      	movs	r3, #1
 801b1b8:	74fb      	strb	r3, [r7, #19]
      break;
 801b1ba:	e005      	b.n	801b1c8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b1bc:	697b      	ldr	r3, [r7, #20]
 801b1be:	68db      	ldr	r3, [r3, #12]
 801b1c0:	617b      	str	r3, [r7, #20]
 801b1c2:	697b      	ldr	r3, [r7, #20]
 801b1c4:	2b00      	cmp	r3, #0
 801b1c6:	d1f2      	bne.n	801b1ae <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b1c8:	88fb      	ldrh	r3, [r7, #6]
 801b1ca:	2b00      	cmp	r3, #0
 801b1cc:	d109      	bne.n	801b1e2 <udp_bind+0x72>
    port = udp_new_port();
 801b1ce:	f7ff fcb9 	bl	801ab44 <udp_new_port>
 801b1d2:	4603      	mov	r3, r0
 801b1d4:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b1d6:	88fb      	ldrh	r3, [r7, #6]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d138      	bne.n	801b24e <udp_bind+0xde>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b1dc:	f06f 0307 	mvn.w	r3, #7
 801b1e0:	e04c      	b.n	801b27c <udp_bind+0x10c>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b1e2:	4b2c      	ldr	r3, [pc, #176]	; (801b294 <udp_bind+0x124>)
 801b1e4:	681b      	ldr	r3, [r3, #0]
 801b1e6:	617b      	str	r3, [r7, #20]
 801b1e8:	e02e      	b.n	801b248 <udp_bind+0xd8>
      if (pcb != ipcb) {
 801b1ea:	68fa      	ldr	r2, [r7, #12]
 801b1ec:	697b      	ldr	r3, [r7, #20]
 801b1ee:	429a      	cmp	r2, r3
 801b1f0:	d027      	beq.n	801b242 <udp_bind+0xd2>
        /* By default, we don't allow to bind to a port that any other udp
           PCB is already bound to, unless *all* PCBs with that port have tha
           REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801b1f2:	68fb      	ldr	r3, [r7, #12]
 801b1f4:	7a5b      	ldrb	r3, [r3, #9]
 801b1f6:	f003 0304 	and.w	r3, r3, #4
 801b1fa:	2b00      	cmp	r3, #0
 801b1fc:	d005      	beq.n	801b20a <udp_bind+0x9a>
            !ip_get_option(ipcb, SOF_REUSEADDR))
 801b1fe:	697b      	ldr	r3, [r7, #20]
 801b200:	7a5b      	ldrb	r3, [r3, #9]
 801b202:	f003 0304 	and.w	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 801b206:	2b00      	cmp	r3, #0
 801b208:	d11b      	bne.n	801b242 <udp_bind+0xd2>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b20a:	697b      	ldr	r3, [r7, #20]
 801b20c:	8a5b      	ldrh	r3, [r3, #18]
 801b20e:	88fa      	ldrh	r2, [r7, #6]
 801b210:	429a      	cmp	r2, r3
 801b212:	d116      	bne.n	801b242 <udp_bind+0xd2>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b214:	697b      	ldr	r3, [r7, #20]
 801b216:	681a      	ldr	r2, [r3, #0]
 801b218:	68bb      	ldr	r3, [r7, #8]
 801b21a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b21c:	429a      	cmp	r2, r3
 801b21e:	d00d      	beq.n	801b23c <udp_bind+0xcc>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b220:	68bb      	ldr	r3, [r7, #8]
 801b222:	2b00      	cmp	r3, #0
 801b224:	d00a      	beq.n	801b23c <udp_bind+0xcc>
 801b226:	68bb      	ldr	r3, [r7, #8]
 801b228:	681b      	ldr	r3, [r3, #0]
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	d006      	beq.n	801b23c <udp_bind+0xcc>
              ip_addr_isany(&ipcb->local_ip))) {
 801b22e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b230:	2b00      	cmp	r3, #0
 801b232:	d003      	beq.n	801b23c <udp_bind+0xcc>
              ip_addr_isany(&ipcb->local_ip))) {
 801b234:	697b      	ldr	r3, [r7, #20]
 801b236:	681b      	ldr	r3, [r3, #0]
 801b238:	2b00      	cmp	r3, #0
 801b23a:	d102      	bne.n	801b242 <udp_bind+0xd2>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b23c:	f06f 0307 	mvn.w	r3, #7
 801b240:	e01c      	b.n	801b27c <udp_bind+0x10c>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b242:	697b      	ldr	r3, [r7, #20]
 801b244:	68db      	ldr	r3, [r3, #12]
 801b246:	617b      	str	r3, [r7, #20]
 801b248:	697b      	ldr	r3, [r7, #20]
 801b24a:	2b00      	cmp	r3, #0
 801b24c:	d1cd      	bne.n	801b1ea <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b24e:	68bb      	ldr	r3, [r7, #8]
 801b250:	2b00      	cmp	r3, #0
 801b252:	d002      	beq.n	801b25a <udp_bind+0xea>
 801b254:	68bb      	ldr	r3, [r7, #8]
 801b256:	681b      	ldr	r3, [r3, #0]
 801b258:	e000      	b.n	801b25c <udp_bind+0xec>
 801b25a:	2300      	movs	r3, #0
 801b25c:	68fa      	ldr	r2, [r7, #12]
 801b25e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b260:	68fb      	ldr	r3, [r7, #12]
 801b262:	88fa      	ldrh	r2, [r7, #6]
 801b264:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b266:	7cfb      	ldrb	r3, [r7, #19]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d106      	bne.n	801b27a <udp_bind+0x10a>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b26c:	4b09      	ldr	r3, [pc, #36]	; (801b294 <udp_bind+0x124>)
 801b26e:	681a      	ldr	r2, [r3, #0]
 801b270:	68fb      	ldr	r3, [r7, #12]
 801b272:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b274:	4a07      	ldr	r2, [pc, #28]	; (801b294 <udp_bind+0x124>)
 801b276:	68fb      	ldr	r3, [r7, #12]
 801b278:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b27a:	2300      	movs	r3, #0
}
 801b27c:	4618      	mov	r0, r3
 801b27e:	3718      	adds	r7, #24
 801b280:	46bd      	mov	sp, r7
 801b282:	bd80      	pop	{r7, pc}
 801b284:	08027070 	.word	0x08027070
 801b288:	08026048 	.word	0x08026048
 801b28c:	08026310 	.word	0x08026310
 801b290:	0802609c 	.word	0x0802609c
 801b294:	2001232c 	.word	0x2001232c

0801b298 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b298:	b580      	push	{r7, lr}
 801b29a:	b086      	sub	sp, #24
 801b29c:	af00      	add	r7, sp, #0
 801b29e:	60f8      	str	r0, [r7, #12]
 801b2a0:	60b9      	str	r1, [r7, #8]
 801b2a2:	4613      	mov	r3, r2
 801b2a4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d109      	bne.n	801b2c0 <udp_connect+0x28>
 801b2ac:	4b2c      	ldr	r3, [pc, #176]	; (801b360 <udp_connect+0xc8>)
 801b2ae:	f240 4235 	movw	r2, #1077	; 0x435
 801b2b2:	492c      	ldr	r1, [pc, #176]	; (801b364 <udp_connect+0xcc>)
 801b2b4:	482c      	ldr	r0, [pc, #176]	; (801b368 <udp_connect+0xd0>)
 801b2b6:	f006 f87f 	bl	80213b8 <iprintf>
 801b2ba:	f06f 030f 	mvn.w	r3, #15
 801b2be:	e04b      	b.n	801b358 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b2c0:	68bb      	ldr	r3, [r7, #8]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d109      	bne.n	801b2da <udp_connect+0x42>
 801b2c6:	4b26      	ldr	r3, [pc, #152]	; (801b360 <udp_connect+0xc8>)
 801b2c8:	f240 4236 	movw	r2, #1078	; 0x436
 801b2cc:	4927      	ldr	r1, [pc, #156]	; (801b36c <udp_connect+0xd4>)
 801b2ce:	4826      	ldr	r0, [pc, #152]	; (801b368 <udp_connect+0xd0>)
 801b2d0:	f006 f872 	bl	80213b8 <iprintf>
 801b2d4:	f06f 030f 	mvn.w	r3, #15
 801b2d8:	e03e      	b.n	801b358 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801b2da:	68fb      	ldr	r3, [r7, #12]
 801b2dc:	8a5b      	ldrh	r3, [r3, #18]
 801b2de:	2b00      	cmp	r3, #0
 801b2e0:	d10f      	bne.n	801b302 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b2e2:	68f9      	ldr	r1, [r7, #12]
 801b2e4:	68fb      	ldr	r3, [r7, #12]
 801b2e6:	8a5b      	ldrh	r3, [r3, #18]
 801b2e8:	461a      	mov	r2, r3
 801b2ea:	68f8      	ldr	r0, [r7, #12]
 801b2ec:	f7ff ff40 	bl	801b170 <udp_bind>
 801b2f0:	4603      	mov	r3, r0
 801b2f2:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801b2f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d002      	beq.n	801b302 <udp_connect+0x6a>
      return err;
 801b2fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b300:	e02a      	b.n	801b358 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801b302:	68bb      	ldr	r3, [r7, #8]
 801b304:	2b00      	cmp	r3, #0
 801b306:	d002      	beq.n	801b30e <udp_connect+0x76>
 801b308:	68bb      	ldr	r3, [r7, #8]
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	e000      	b.n	801b310 <udp_connect+0x78>
 801b30e:	2300      	movs	r3, #0
 801b310:	68fa      	ldr	r2, [r7, #12]
 801b312:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	88fa      	ldrh	r2, [r7, #6]
 801b318:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801b31a:	68fb      	ldr	r3, [r7, #12]
 801b31c:	7c1b      	ldrb	r3, [r3, #16]
 801b31e:	f043 0304 	orr.w	r3, r3, #4
 801b322:	b2da      	uxtb	r2, r3
 801b324:	68fb      	ldr	r3, [r7, #12]
 801b326:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b328:	4b11      	ldr	r3, [pc, #68]	; (801b370 <udp_connect+0xd8>)
 801b32a:	681b      	ldr	r3, [r3, #0]
 801b32c:	617b      	str	r3, [r7, #20]
 801b32e:	e008      	b.n	801b342 <udp_connect+0xaa>
    if (pcb == ipcb) {
 801b330:	68fa      	ldr	r2, [r7, #12]
 801b332:	697b      	ldr	r3, [r7, #20]
 801b334:	429a      	cmp	r2, r3
 801b336:	d101      	bne.n	801b33c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801b338:	2300      	movs	r3, #0
 801b33a:	e00d      	b.n	801b358 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b33c:	697b      	ldr	r3, [r7, #20]
 801b33e:	68db      	ldr	r3, [r3, #12]
 801b340:	617b      	str	r3, [r7, #20]
 801b342:	697b      	ldr	r3, [r7, #20]
 801b344:	2b00      	cmp	r3, #0
 801b346:	d1f3      	bne.n	801b330 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801b348:	4b09      	ldr	r3, [pc, #36]	; (801b370 <udp_connect+0xd8>)
 801b34a:	681a      	ldr	r2, [r3, #0]
 801b34c:	68fb      	ldr	r3, [r7, #12]
 801b34e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801b350:	4a07      	ldr	r2, [pc, #28]	; (801b370 <udp_connect+0xd8>)
 801b352:	68fb      	ldr	r3, [r7, #12]
 801b354:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801b356:	2300      	movs	r3, #0
}
 801b358:	4618      	mov	r0, r3
 801b35a:	3718      	adds	r7, #24
 801b35c:	46bd      	mov	sp, r7
 801b35e:	bd80      	pop	{r7, pc}
 801b360:	08026048 	.word	0x08026048
 801b364:	08026328 	.word	0x08026328
 801b368:	0802609c 	.word	0x0802609c
 801b36c:	08026344 	.word	0x08026344
 801b370:	2001232c 	.word	0x2001232c

0801b374 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b374:	b580      	push	{r7, lr}
 801b376:	b084      	sub	sp, #16
 801b378:	af00      	add	r7, sp, #0
 801b37a:	60f8      	str	r0, [r7, #12]
 801b37c:	60b9      	str	r1, [r7, #8]
 801b37e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b380:	68fb      	ldr	r3, [r7, #12]
 801b382:	2b00      	cmp	r3, #0
 801b384:	d107      	bne.n	801b396 <udp_recv+0x22>
 801b386:	4b08      	ldr	r3, [pc, #32]	; (801b3a8 <udp_recv+0x34>)
 801b388:	f240 428a 	movw	r2, #1162	; 0x48a
 801b38c:	4907      	ldr	r1, [pc, #28]	; (801b3ac <udp_recv+0x38>)
 801b38e:	4808      	ldr	r0, [pc, #32]	; (801b3b0 <udp_recv+0x3c>)
 801b390:	f006 f812 	bl	80213b8 <iprintf>
 801b394:	e005      	b.n	801b3a2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b396:	68fb      	ldr	r3, [r7, #12]
 801b398:	68ba      	ldr	r2, [r7, #8]
 801b39a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b39c:	68fb      	ldr	r3, [r7, #12]
 801b39e:	687a      	ldr	r2, [r7, #4]
 801b3a0:	61da      	str	r2, [r3, #28]
}
 801b3a2:	3710      	adds	r7, #16
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	bd80      	pop	{r7, pc}
 801b3a8:	08026048 	.word	0x08026048
 801b3ac:	0802637c 	.word	0x0802637c
 801b3b0:	0802609c 	.word	0x0802609c

0801b3b4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	b084      	sub	sp, #16
 801b3b8:	af00      	add	r7, sp, #0
 801b3ba:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	2b00      	cmp	r3, #0
 801b3c0:	d107      	bne.n	801b3d2 <udp_remove+0x1e>
 801b3c2:	4b19      	ldr	r3, [pc, #100]	; (801b428 <udp_remove+0x74>)
 801b3c4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b3c8:	4918      	ldr	r1, [pc, #96]	; (801b42c <udp_remove+0x78>)
 801b3ca:	4819      	ldr	r0, [pc, #100]	; (801b430 <udp_remove+0x7c>)
 801b3cc:	f005 fff4 	bl	80213b8 <iprintf>
 801b3d0:	e026      	b.n	801b420 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b3d2:	4b18      	ldr	r3, [pc, #96]	; (801b434 <udp_remove+0x80>)
 801b3d4:	681b      	ldr	r3, [r3, #0]
 801b3d6:	687a      	ldr	r2, [r7, #4]
 801b3d8:	429a      	cmp	r2, r3
 801b3da:	d105      	bne.n	801b3e8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b3dc:	4b15      	ldr	r3, [pc, #84]	; (801b434 <udp_remove+0x80>)
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	68db      	ldr	r3, [r3, #12]
 801b3e2:	4a14      	ldr	r2, [pc, #80]	; (801b434 <udp_remove+0x80>)
 801b3e4:	6013      	str	r3, [r2, #0]
 801b3e6:	e017      	b.n	801b418 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b3e8:	4b12      	ldr	r3, [pc, #72]	; (801b434 <udp_remove+0x80>)
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	60fb      	str	r3, [r7, #12]
 801b3ee:	e010      	b.n	801b412 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	68db      	ldr	r3, [r3, #12]
 801b3f4:	2b00      	cmp	r3, #0
 801b3f6:	d009      	beq.n	801b40c <udp_remove+0x58>
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	68db      	ldr	r3, [r3, #12]
 801b3fc:	687a      	ldr	r2, [r7, #4]
 801b3fe:	429a      	cmp	r2, r3
 801b400:	d104      	bne.n	801b40c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b402:	687b      	ldr	r3, [r7, #4]
 801b404:	68da      	ldr	r2, [r3, #12]
 801b406:	68fb      	ldr	r3, [r7, #12]
 801b408:	60da      	str	r2, [r3, #12]
        break;
 801b40a:	e005      	b.n	801b418 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b40c:	68fb      	ldr	r3, [r7, #12]
 801b40e:	68db      	ldr	r3, [r3, #12]
 801b410:	60fb      	str	r3, [r7, #12]
 801b412:	68fb      	ldr	r3, [r7, #12]
 801b414:	2b00      	cmp	r3, #0
 801b416:	d1eb      	bne.n	801b3f0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b418:	6879      	ldr	r1, [r7, #4]
 801b41a:	2000      	movs	r0, #0
 801b41c:	f7f7 ffd8 	bl	80133d0 <memp_free>
}
 801b420:	3710      	adds	r7, #16
 801b422:	46bd      	mov	sp, r7
 801b424:	bd80      	pop	{r7, pc}
 801b426:	bf00      	nop
 801b428:	08026048 	.word	0x08026048
 801b42c:	08026394 	.word	0x08026394
 801b430:	0802609c 	.word	0x0802609c
 801b434:	2001232c 	.word	0x2001232c

0801b438 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b438:	b580      	push	{r7, lr}
 801b43a:	b082      	sub	sp, #8
 801b43c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b43e:	2000      	movs	r0, #0
 801b440:	f7f7 ff50 	bl	80132e4 <memp_malloc>
 801b444:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	2b00      	cmp	r3, #0
 801b44a:	d007      	beq.n	801b45c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b44c:	2220      	movs	r2, #32
 801b44e:	2100      	movs	r1, #0
 801b450:	6878      	ldr	r0, [r7, #4]
 801b452:	f006 f9c7 	bl	80217e4 <memset>
    pcb->ttl = UDP_TTL;
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	22ff      	movs	r2, #255	; 0xff
 801b45a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b45c:	687b      	ldr	r3, [r7, #4]
}
 801b45e:	4618      	mov	r0, r3
 801b460:	3708      	adds	r7, #8
 801b462:	46bd      	mov	sp, r7
 801b464:	bd80      	pop	{r7, pc}

0801b466 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801b466:	b580      	push	{r7, lr}
 801b468:	b084      	sub	sp, #16
 801b46a:	af00      	add	r7, sp, #0
 801b46c:	4603      	mov	r3, r0
 801b46e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b470:	f7ff ffe2 	bl	801b438 <udp_new>
 801b474:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b476:	68fb      	ldr	r3, [r7, #12]
}
 801b478:	4618      	mov	r0, r3
 801b47a:	3710      	adds	r7, #16
 801b47c:	46bd      	mov	sp, r7
 801b47e:	bd80      	pop	{r7, pc}

0801b480 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b480:	b480      	push	{r7}
 801b482:	b085      	sub	sp, #20
 801b484:	af00      	add	r7, sp, #0
 801b486:	6078      	str	r0, [r7, #4]
 801b488:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	2b00      	cmp	r3, #0
 801b48e:	d01e      	beq.n	801b4ce <udp_netif_ip_addr_changed+0x4e>
 801b490:	687b      	ldr	r3, [r7, #4]
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	2b00      	cmp	r3, #0
 801b496:	d01a      	beq.n	801b4ce <udp_netif_ip_addr_changed+0x4e>
 801b498:	683b      	ldr	r3, [r7, #0]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d017      	beq.n	801b4ce <udp_netif_ip_addr_changed+0x4e>
 801b49e:	683b      	ldr	r3, [r7, #0]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d013      	beq.n	801b4ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b4a6:	4b0d      	ldr	r3, [pc, #52]	; (801b4dc <udp_netif_ip_addr_changed+0x5c>)
 801b4a8:	681b      	ldr	r3, [r3, #0]
 801b4aa:	60fb      	str	r3, [r7, #12]
 801b4ac:	e00c      	b.n	801b4c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	681a      	ldr	r2, [r3, #0]
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	681b      	ldr	r3, [r3, #0]
 801b4b6:	429a      	cmp	r2, r3
 801b4b8:	d103      	bne.n	801b4c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b4ba:	683b      	ldr	r3, [r7, #0]
 801b4bc:	681a      	ldr	r2, [r3, #0]
 801b4be:	68fb      	ldr	r3, [r7, #12]
 801b4c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b4c2:	68fb      	ldr	r3, [r7, #12]
 801b4c4:	68db      	ldr	r3, [r3, #12]
 801b4c6:	60fb      	str	r3, [r7, #12]
 801b4c8:	68fb      	ldr	r3, [r7, #12]
 801b4ca:	2b00      	cmp	r3, #0
 801b4cc:	d1ef      	bne.n	801b4ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b4ce:	bf00      	nop
 801b4d0:	3714      	adds	r7, #20
 801b4d2:	46bd      	mov	sp, r7
 801b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4d8:	4770      	bx	lr
 801b4da:	bf00      	nop
 801b4dc:	2001232c 	.word	0x2001232c

0801b4e0 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 801b4e0:	b580      	push	{r7, lr}
 801b4e2:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801b4e4:	4b20      	ldr	r3, [pc, #128]	; (801b568 <dhcp_inc_pcb_refcount+0x88>)
 801b4e6:	781b      	ldrb	r3, [r3, #0]
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d133      	bne.n	801b554 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801b4ec:	4b1f      	ldr	r3, [pc, #124]	; (801b56c <dhcp_inc_pcb_refcount+0x8c>)
 801b4ee:	681b      	ldr	r3, [r3, #0]
 801b4f0:	2b00      	cmp	r3, #0
 801b4f2:	d005      	beq.n	801b500 <dhcp_inc_pcb_refcount+0x20>
 801b4f4:	4b1e      	ldr	r3, [pc, #120]	; (801b570 <dhcp_inc_pcb_refcount+0x90>)
 801b4f6:	22e5      	movs	r2, #229	; 0xe5
 801b4f8:	491e      	ldr	r1, [pc, #120]	; (801b574 <dhcp_inc_pcb_refcount+0x94>)
 801b4fa:	481f      	ldr	r0, [pc, #124]	; (801b578 <dhcp_inc_pcb_refcount+0x98>)
 801b4fc:	f005 ff5c 	bl	80213b8 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 801b500:	f7ff ff9a 	bl	801b438 <udp_new>
 801b504:	4603      	mov	r3, r0
 801b506:	4a19      	ldr	r2, [pc, #100]	; (801b56c <dhcp_inc_pcb_refcount+0x8c>)
 801b508:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801b50a:	4b18      	ldr	r3, [pc, #96]	; (801b56c <dhcp_inc_pcb_refcount+0x8c>)
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	2b00      	cmp	r3, #0
 801b510:	d102      	bne.n	801b518 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801b512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801b516:	e024      	b.n	801b562 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801b518:	4b14      	ldr	r3, [pc, #80]	; (801b56c <dhcp_inc_pcb_refcount+0x8c>)
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	7a5a      	ldrb	r2, [r3, #9]
 801b51e:	4b13      	ldr	r3, [pc, #76]	; (801b56c <dhcp_inc_pcb_refcount+0x8c>)
 801b520:	681b      	ldr	r3, [r3, #0]
 801b522:	f042 0220 	orr.w	r2, r2, #32
 801b526:	b2d2      	uxtb	r2, r2
 801b528:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801b52a:	4b10      	ldr	r3, [pc, #64]	; (801b56c <dhcp_inc_pcb_refcount+0x8c>)
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	2244      	movs	r2, #68	; 0x44
 801b530:	4912      	ldr	r1, [pc, #72]	; (801b57c <dhcp_inc_pcb_refcount+0x9c>)
 801b532:	4618      	mov	r0, r3
 801b534:	f7ff fe1c 	bl	801b170 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801b538:	4b0c      	ldr	r3, [pc, #48]	; (801b56c <dhcp_inc_pcb_refcount+0x8c>)
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	2243      	movs	r2, #67	; 0x43
 801b53e:	490f      	ldr	r1, [pc, #60]	; (801b57c <dhcp_inc_pcb_refcount+0x9c>)
 801b540:	4618      	mov	r0, r3
 801b542:	f7ff fea9 	bl	801b298 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801b546:	4b09      	ldr	r3, [pc, #36]	; (801b56c <dhcp_inc_pcb_refcount+0x8c>)
 801b548:	681b      	ldr	r3, [r3, #0]
 801b54a:	2200      	movs	r2, #0
 801b54c:	490c      	ldr	r1, [pc, #48]	; (801b580 <dhcp_inc_pcb_refcount+0xa0>)
 801b54e:	4618      	mov	r0, r3
 801b550:	f7ff ff10 	bl	801b374 <udp_recv>
  }

  dhcp_pcb_refcount++;
 801b554:	4b04      	ldr	r3, [pc, #16]	; (801b568 <dhcp_inc_pcb_refcount+0x88>)
 801b556:	781b      	ldrb	r3, [r3, #0]
 801b558:	3301      	adds	r3, #1
 801b55a:	b2da      	uxtb	r2, r3
 801b55c:	4b02      	ldr	r3, [pc, #8]	; (801b568 <dhcp_inc_pcb_refcount+0x88>)
 801b55e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 801b560:	2300      	movs	r3, #0
}
 801b562:	4618      	mov	r0, r3
 801b564:	bd80      	pop	{r7, pc}
 801b566:	bf00      	nop
 801b568:	2001235c 	.word	0x2001235c
 801b56c:	20012358 	.word	0x20012358
 801b570:	080263ac 	.word	0x080263ac
 801b574:	080263e4 	.word	0x080263e4
 801b578:	0802640c 	.word	0x0802640c
 801b57c:	08027070 	.word	0x08027070
 801b580:	0801ce15 	.word	0x0801ce15

0801b584 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 801b584:	b580      	push	{r7, lr}
 801b586:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801b588:	4b0e      	ldr	r3, [pc, #56]	; (801b5c4 <dhcp_dec_pcb_refcount+0x40>)
 801b58a:	781b      	ldrb	r3, [r3, #0]
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d105      	bne.n	801b59c <dhcp_dec_pcb_refcount+0x18>
 801b590:	4b0d      	ldr	r3, [pc, #52]	; (801b5c8 <dhcp_dec_pcb_refcount+0x44>)
 801b592:	22ff      	movs	r2, #255	; 0xff
 801b594:	490d      	ldr	r1, [pc, #52]	; (801b5cc <dhcp_dec_pcb_refcount+0x48>)
 801b596:	480e      	ldr	r0, [pc, #56]	; (801b5d0 <dhcp_dec_pcb_refcount+0x4c>)
 801b598:	f005 ff0e 	bl	80213b8 <iprintf>
  dhcp_pcb_refcount--;
 801b59c:	4b09      	ldr	r3, [pc, #36]	; (801b5c4 <dhcp_dec_pcb_refcount+0x40>)
 801b59e:	781b      	ldrb	r3, [r3, #0]
 801b5a0:	3b01      	subs	r3, #1
 801b5a2:	b2da      	uxtb	r2, r3
 801b5a4:	4b07      	ldr	r3, [pc, #28]	; (801b5c4 <dhcp_dec_pcb_refcount+0x40>)
 801b5a6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801b5a8:	4b06      	ldr	r3, [pc, #24]	; (801b5c4 <dhcp_dec_pcb_refcount+0x40>)
 801b5aa:	781b      	ldrb	r3, [r3, #0]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d107      	bne.n	801b5c0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 801b5b0:	4b08      	ldr	r3, [pc, #32]	; (801b5d4 <dhcp_dec_pcb_refcount+0x50>)
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	f7ff fefd 	bl	801b3b4 <udp_remove>
    dhcp_pcb = NULL;
 801b5ba:	4b06      	ldr	r3, [pc, #24]	; (801b5d4 <dhcp_dec_pcb_refcount+0x50>)
 801b5bc:	2200      	movs	r2, #0
 801b5be:	601a      	str	r2, [r3, #0]
  }
}
 801b5c0:	bf00      	nop
 801b5c2:	bd80      	pop	{r7, pc}
 801b5c4:	2001235c 	.word	0x2001235c
 801b5c8:	080263ac 	.word	0x080263ac
 801b5cc:	08026434 	.word	0x08026434
 801b5d0:	0802640c 	.word	0x0802640c
 801b5d4:	20012358 	.word	0x20012358

0801b5d8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801b5d8:	b580      	push	{r7, lr}
 801b5da:	b084      	sub	sp, #16
 801b5dc:	af00      	add	r7, sp, #0
 801b5de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b5e0:	687b      	ldr	r3, [r7, #4]
 801b5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5e4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801b5e6:	210c      	movs	r1, #12
 801b5e8:	68f8      	ldr	r0, [r7, #12]
 801b5ea:	f001 f855 	bl	801c698 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801b5ee:	4b06      	ldr	r3, [pc, #24]	; (801b608 <dhcp_handle_nak+0x30>)
 801b5f0:	4a05      	ldr	r2, [pc, #20]	; (801b608 <dhcp_handle_nak+0x30>)
 801b5f2:	4905      	ldr	r1, [pc, #20]	; (801b608 <dhcp_handle_nak+0x30>)
 801b5f4:	6878      	ldr	r0, [r7, #4]
 801b5f6:	f7f8 f88d 	bl	8013714 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801b5fa:	6878      	ldr	r0, [r7, #4]
 801b5fc:	f000 fc48 	bl	801be90 <dhcp_discover>
}
 801b600:	bf00      	nop
 801b602:	3710      	adds	r7, #16
 801b604:	46bd      	mov	sp, r7
 801b606:	bd80      	pop	{r7, pc}
 801b608:	08027070 	.word	0x08027070

0801b60c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801b60c:	b580      	push	{r7, lr}
 801b60e:	b084      	sub	sp, #16
 801b610:	af00      	add	r7, sp, #0
 801b612:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b618:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801b61a:	2108      	movs	r1, #8
 801b61c:	68f8      	ldr	r0, [r7, #12]
 801b61e:	f001 f83b 	bl	801c698 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	331c      	adds	r3, #28
 801b626:	2200      	movs	r2, #0
 801b628:	4619      	mov	r1, r3
 801b62a:	6878      	ldr	r0, [r7, #4]
 801b62c:	f002 fb3c 	bl	801dca8 <etharp_query>
 801b630:	4603      	mov	r3, r0
 801b632:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801b634:	68fb      	ldr	r3, [r7, #12]
 801b636:	799b      	ldrb	r3, [r3, #6]
 801b638:	2bff      	cmp	r3, #255	; 0xff
 801b63a:	d005      	beq.n	801b648 <dhcp_check+0x3c>
    dhcp->tries++;
 801b63c:	68fb      	ldr	r3, [r7, #12]
 801b63e:	799b      	ldrb	r3, [r3, #6]
 801b640:	3301      	adds	r3, #1
 801b642:	b2da      	uxtb	r2, r3
 801b644:	68fb      	ldr	r3, [r7, #12]
 801b646:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801b648:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801b64c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b64e:	893b      	ldrh	r3, [r7, #8]
 801b650:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b654:	4a06      	ldr	r2, [pc, #24]	; (801b670 <dhcp_check+0x64>)
 801b656:	fb82 1203 	smull	r1, r2, r2, r3
 801b65a:	1152      	asrs	r2, r2, #5
 801b65c:	17db      	asrs	r3, r3, #31
 801b65e:	1ad3      	subs	r3, r2, r3
 801b660:	b29a      	uxth	r2, r3
 801b662:	68fb      	ldr	r3, [r7, #12]
 801b664:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801b666:	bf00      	nop
 801b668:	3710      	adds	r7, #16
 801b66a:	46bd      	mov	sp, r7
 801b66c:	bd80      	pop	{r7, pc}
 801b66e:	bf00      	nop
 801b670:	10624dd3 	.word	0x10624dd3

0801b674 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 801b674:	b580      	push	{r7, lr}
 801b676:	b084      	sub	sp, #16
 801b678:	af00      	add	r7, sp, #0
 801b67a:	6078      	str	r0, [r7, #4]
 801b67c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b67e:	687b      	ldr	r3, [r7, #4]
 801b680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b682:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801b684:	4b0c      	ldr	r3, [pc, #48]	; (801b6b8 <dhcp_handle_offer+0x44>)
 801b686:	789b      	ldrb	r3, [r3, #2]
 801b688:	2b00      	cmp	r3, #0
 801b68a:	d011      	beq.n	801b6b0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	2200      	movs	r2, #0
 801b690:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801b692:	4b0a      	ldr	r3, [pc, #40]	; (801b6bc <dhcp_handle_offer+0x48>)
 801b694:	689b      	ldr	r3, [r3, #8]
 801b696:	4618      	mov	r0, r3
 801b698:	f7f7 f961 	bl	801295e <lwip_htonl>
 801b69c:	4602      	mov	r2, r0
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801b6a2:	683b      	ldr	r3, [r7, #0]
 801b6a4:	691a      	ldr	r2, [r3, #16]
 801b6a6:	68fb      	ldr	r3, [r7, #12]
 801b6a8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801b6aa:	6878      	ldr	r0, [r7, #4]
 801b6ac:	f000 f808 	bl	801b6c0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 801b6b0:	bf00      	nop
 801b6b2:	3710      	adds	r7, #16
 801b6b4:	46bd      	mov	sp, r7
 801b6b6:	bd80      	pop	{r7, pc}
 801b6b8:	20012350 	.word	0x20012350
 801b6bc:	20012330 	.word	0x20012330

0801b6c0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801b6c0:	b5b0      	push	{r4, r5, r7, lr}
 801b6c2:	b08a      	sub	sp, #40	; 0x28
 801b6c4:	af02      	add	r7, sp, #8
 801b6c6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	2b00      	cmp	r3, #0
 801b6cc:	d109      	bne.n	801b6e2 <dhcp_select+0x22>
 801b6ce:	4b71      	ldr	r3, [pc, #452]	; (801b894 <dhcp_select+0x1d4>)
 801b6d0:	f240 1277 	movw	r2, #375	; 0x177
 801b6d4:	4970      	ldr	r1, [pc, #448]	; (801b898 <dhcp_select+0x1d8>)
 801b6d6:	4871      	ldr	r0, [pc, #452]	; (801b89c <dhcp_select+0x1dc>)
 801b6d8:	f005 fe6e 	bl	80213b8 <iprintf>
 801b6dc:	f06f 030f 	mvn.w	r3, #15
 801b6e0:	e0d3      	b.n	801b88a <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 801b6e2:	687b      	ldr	r3, [r7, #4]
 801b6e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6e6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801b6e8:	69bb      	ldr	r3, [r7, #24]
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d109      	bne.n	801b702 <dhcp_select+0x42>
 801b6ee:	4b69      	ldr	r3, [pc, #420]	; (801b894 <dhcp_select+0x1d4>)
 801b6f0:	f240 1279 	movw	r2, #377	; 0x179
 801b6f4:	496a      	ldr	r1, [pc, #424]	; (801b8a0 <dhcp_select+0x1e0>)
 801b6f6:	4869      	ldr	r0, [pc, #420]	; (801b89c <dhcp_select+0x1dc>)
 801b6f8:	f005 fe5e 	bl	80213b8 <iprintf>
 801b6fc:	f06f 0305 	mvn.w	r3, #5
 801b700:	e0c3      	b.n	801b88a <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801b702:	2101      	movs	r1, #1
 801b704:	69b8      	ldr	r0, [r7, #24]
 801b706:	f000 ffc7 	bl	801c698 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801b70a:	f107 030c 	add.w	r3, r7, #12
 801b70e:	2203      	movs	r2, #3
 801b710:	69b9      	ldr	r1, [r7, #24]
 801b712:	6878      	ldr	r0, [r7, #4]
 801b714:	f001 fc4c 	bl	801cfb0 <dhcp_create_msg>
 801b718:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801b71a:	697b      	ldr	r3, [r7, #20]
 801b71c:	2b00      	cmp	r3, #0
 801b71e:	f000 8085 	beq.w	801b82c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801b722:	697b      	ldr	r3, [r7, #20]
 801b724:	685b      	ldr	r3, [r3, #4]
 801b726:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801b728:	89b8      	ldrh	r0, [r7, #12]
 801b72a:	693b      	ldr	r3, [r7, #16]
 801b72c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b730:	2302      	movs	r3, #2
 801b732:	2239      	movs	r2, #57	; 0x39
 801b734:	f000 ffca 	bl	801c6cc <dhcp_option>
 801b738:	4603      	mov	r3, r0
 801b73a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801b73c:	89b8      	ldrh	r0, [r7, #12]
 801b73e:	693b      	ldr	r3, [r7, #16]
 801b740:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b744:	687b      	ldr	r3, [r7, #4]
 801b746:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b748:	461a      	mov	r2, r3
 801b74a:	f001 f819 	bl	801c780 <dhcp_option_short>
 801b74e:	4603      	mov	r3, r0
 801b750:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801b752:	89b8      	ldrh	r0, [r7, #12]
 801b754:	693b      	ldr	r3, [r7, #16]
 801b756:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b75a:	2304      	movs	r3, #4
 801b75c:	2232      	movs	r2, #50	; 0x32
 801b75e:	f000 ffb5 	bl	801c6cc <dhcp_option>
 801b762:	4603      	mov	r3, r0
 801b764:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801b766:	89bc      	ldrh	r4, [r7, #12]
 801b768:	693b      	ldr	r3, [r7, #16]
 801b76a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b76e:	69bb      	ldr	r3, [r7, #24]
 801b770:	69db      	ldr	r3, [r3, #28]
 801b772:	4618      	mov	r0, r3
 801b774:	f7f7 f8f3 	bl	801295e <lwip_htonl>
 801b778:	4603      	mov	r3, r0
 801b77a:	461a      	mov	r2, r3
 801b77c:	4629      	mov	r1, r5
 801b77e:	4620      	mov	r0, r4
 801b780:	f001 f830 	bl	801c7e4 <dhcp_option_long>
 801b784:	4603      	mov	r3, r0
 801b786:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801b788:	89b8      	ldrh	r0, [r7, #12]
 801b78a:	693b      	ldr	r3, [r7, #16]
 801b78c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b790:	2304      	movs	r3, #4
 801b792:	2236      	movs	r2, #54	; 0x36
 801b794:	f000 ff9a 	bl	801c6cc <dhcp_option>
 801b798:	4603      	mov	r3, r0
 801b79a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801b79c:	89bc      	ldrh	r4, [r7, #12]
 801b79e:	693b      	ldr	r3, [r7, #16]
 801b7a0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801b7a4:	69bb      	ldr	r3, [r7, #24]
 801b7a6:	699b      	ldr	r3, [r3, #24]
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	f7f7 f8d8 	bl	801295e <lwip_htonl>
 801b7ae:	4603      	mov	r3, r0
 801b7b0:	461a      	mov	r2, r3
 801b7b2:	4629      	mov	r1, r5
 801b7b4:	4620      	mov	r0, r4
 801b7b6:	f001 f815 	bl	801c7e4 <dhcp_option_long>
 801b7ba:	4603      	mov	r3, r0
 801b7bc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801b7be:	89b8      	ldrh	r0, [r7, #12]
 801b7c0:	693b      	ldr	r3, [r7, #16]
 801b7c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b7c6:	2303      	movs	r3, #3
 801b7c8:	2237      	movs	r2, #55	; 0x37
 801b7ca:	f000 ff7f 	bl	801c6cc <dhcp_option>
 801b7ce:	4603      	mov	r3, r0
 801b7d0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b7d2:	2300      	movs	r3, #0
 801b7d4:	77bb      	strb	r3, [r7, #30]
 801b7d6:	e00e      	b.n	801b7f6 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801b7d8:	89b8      	ldrh	r0, [r7, #12]
 801b7da:	693b      	ldr	r3, [r7, #16]
 801b7dc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801b7e0:	7fbb      	ldrb	r3, [r7, #30]
 801b7e2:	4a30      	ldr	r2, [pc, #192]	; (801b8a4 <dhcp_select+0x1e4>)
 801b7e4:	5cd3      	ldrb	r3, [r2, r3]
 801b7e6:	461a      	mov	r2, r3
 801b7e8:	f000 ffa4 	bl	801c734 <dhcp_option_byte>
 801b7ec:	4603      	mov	r3, r0
 801b7ee:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801b7f0:	7fbb      	ldrb	r3, [r7, #30]
 801b7f2:	3301      	adds	r3, #1
 801b7f4:	77bb      	strb	r3, [r7, #30]
 801b7f6:	7fbb      	ldrb	r3, [r7, #30]
 801b7f8:	2b02      	cmp	r3, #2
 801b7fa:	d9ed      	bls.n	801b7d8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801b7fc:	89b8      	ldrh	r0, [r7, #12]
 801b7fe:	693b      	ldr	r3, [r7, #16]
 801b800:	33f0      	adds	r3, #240	; 0xf0
 801b802:	697a      	ldr	r2, [r7, #20]
 801b804:	4619      	mov	r1, r3
 801b806:	f001 fca9 	bl	801d15c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801b80a:	4b27      	ldr	r3, [pc, #156]	; (801b8a8 <dhcp_select+0x1e8>)
 801b80c:	6818      	ldr	r0, [r3, #0]
 801b80e:	4b27      	ldr	r3, [pc, #156]	; (801b8ac <dhcp_select+0x1ec>)
 801b810:	9301      	str	r3, [sp, #4]
 801b812:	687b      	ldr	r3, [r7, #4]
 801b814:	9300      	str	r3, [sp, #0]
 801b816:	2343      	movs	r3, #67	; 0x43
 801b818:	4a25      	ldr	r2, [pc, #148]	; (801b8b0 <dhcp_select+0x1f0>)
 801b81a:	6979      	ldr	r1, [r7, #20]
 801b81c:	f7ff fbc2 	bl	801afa4 <udp_sendto_if_src>
 801b820:	4603      	mov	r3, r0
 801b822:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801b824:	6978      	ldr	r0, [r7, #20]
 801b826:	f7f8 fc83 	bl	8014130 <pbuf_free>
 801b82a:	e001      	b.n	801b830 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801b82c:	23ff      	movs	r3, #255	; 0xff
 801b82e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801b830:	69bb      	ldr	r3, [r7, #24]
 801b832:	799b      	ldrb	r3, [r3, #6]
 801b834:	2bff      	cmp	r3, #255	; 0xff
 801b836:	d005      	beq.n	801b844 <dhcp_select+0x184>
    dhcp->tries++;
 801b838:	69bb      	ldr	r3, [r7, #24]
 801b83a:	799b      	ldrb	r3, [r3, #6]
 801b83c:	3301      	adds	r3, #1
 801b83e:	b2da      	uxtb	r2, r3
 801b840:	69bb      	ldr	r3, [r7, #24]
 801b842:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801b844:	69bb      	ldr	r3, [r7, #24]
 801b846:	799b      	ldrb	r3, [r3, #6]
 801b848:	2b05      	cmp	r3, #5
 801b84a:	d80d      	bhi.n	801b868 <dhcp_select+0x1a8>
 801b84c:	69bb      	ldr	r3, [r7, #24]
 801b84e:	799b      	ldrb	r3, [r3, #6]
 801b850:	461a      	mov	r2, r3
 801b852:	2301      	movs	r3, #1
 801b854:	4093      	lsls	r3, r2
 801b856:	b29b      	uxth	r3, r3
 801b858:	461a      	mov	r2, r3
 801b85a:	0152      	lsls	r2, r2, #5
 801b85c:	1ad2      	subs	r2, r2, r3
 801b85e:	0092      	lsls	r2, r2, #2
 801b860:	4413      	add	r3, r2
 801b862:	00db      	lsls	r3, r3, #3
 801b864:	b29b      	uxth	r3, r3
 801b866:	e001      	b.n	801b86c <dhcp_select+0x1ac>
 801b868:	f64e 2360 	movw	r3, #60000	; 0xea60
 801b86c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801b86e:	89fb      	ldrh	r3, [r7, #14]
 801b870:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801b874:	4a0f      	ldr	r2, [pc, #60]	; (801b8b4 <dhcp_select+0x1f4>)
 801b876:	fb82 1203 	smull	r1, r2, r2, r3
 801b87a:	1152      	asrs	r2, r2, #5
 801b87c:	17db      	asrs	r3, r3, #31
 801b87e:	1ad3      	subs	r3, r2, r3
 801b880:	b29a      	uxth	r2, r3
 801b882:	69bb      	ldr	r3, [r7, #24]
 801b884:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801b886:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b88a:	4618      	mov	r0, r3
 801b88c:	3720      	adds	r7, #32
 801b88e:	46bd      	mov	sp, r7
 801b890:	bdb0      	pop	{r4, r5, r7, pc}
 801b892:	bf00      	nop
 801b894:	080263ac 	.word	0x080263ac
 801b898:	08026458 	.word	0x08026458
 801b89c:	0802640c 	.word	0x0802640c
 801b8a0:	08026474 	.word	0x08026474
 801b8a4:	20000030 	.word	0x20000030
 801b8a8:	20012358 	.word	0x20012358
 801b8ac:	08027070 	.word	0x08027070
 801b8b0:	08027074 	.word	0x08027074
 801b8b4:	10624dd3 	.word	0x10624dd3

0801b8b8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801b8b8:	b580      	push	{r7, lr}
 801b8ba:	b082      	sub	sp, #8
 801b8bc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801b8be:	4b27      	ldr	r3, [pc, #156]	; (801b95c <dhcp_coarse_tmr+0xa4>)
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	607b      	str	r3, [r7, #4]
 801b8c4:	e042      	b.n	801b94c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801b8c6:	687b      	ldr	r3, [r7, #4]
 801b8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b8ca:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801b8cc:	683b      	ldr	r3, [r7, #0]
 801b8ce:	2b00      	cmp	r3, #0
 801b8d0:	d039      	beq.n	801b946 <dhcp_coarse_tmr+0x8e>
 801b8d2:	683b      	ldr	r3, [r7, #0]
 801b8d4:	795b      	ldrb	r3, [r3, #5]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d035      	beq.n	801b946 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801b8da:	683b      	ldr	r3, [r7, #0]
 801b8dc:	8a9b      	ldrh	r3, [r3, #20]
 801b8de:	2b00      	cmp	r3, #0
 801b8e0:	d012      	beq.n	801b908 <dhcp_coarse_tmr+0x50>
 801b8e2:	683b      	ldr	r3, [r7, #0]
 801b8e4:	8a5b      	ldrh	r3, [r3, #18]
 801b8e6:	3301      	adds	r3, #1
 801b8e8:	b29a      	uxth	r2, r3
 801b8ea:	683b      	ldr	r3, [r7, #0]
 801b8ec:	825a      	strh	r2, [r3, #18]
 801b8ee:	683b      	ldr	r3, [r7, #0]
 801b8f0:	8a5a      	ldrh	r2, [r3, #18]
 801b8f2:	683b      	ldr	r3, [r7, #0]
 801b8f4:	8a9b      	ldrh	r3, [r3, #20]
 801b8f6:	429a      	cmp	r2, r3
 801b8f8:	d106      	bne.n	801b908 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801b8fa:	6878      	ldr	r0, [r7, #4]
 801b8fc:	f000 fe32 	bl	801c564 <dhcp_release_and_stop>
        dhcp_start(netif);
 801b900:	6878      	ldr	r0, [r7, #4]
 801b902:	f000 f969 	bl	801bbd8 <dhcp_start>
 801b906:	e01e      	b.n	801b946 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801b908:	683b      	ldr	r3, [r7, #0]
 801b90a:	8a1b      	ldrh	r3, [r3, #16]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d00b      	beq.n	801b928 <dhcp_coarse_tmr+0x70>
 801b910:	683b      	ldr	r3, [r7, #0]
 801b912:	8a1b      	ldrh	r3, [r3, #16]
 801b914:	1e5a      	subs	r2, r3, #1
 801b916:	b291      	uxth	r1, r2
 801b918:	683a      	ldr	r2, [r7, #0]
 801b91a:	8211      	strh	r1, [r2, #16]
 801b91c:	2b01      	cmp	r3, #1
 801b91e:	d103      	bne.n	801b928 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801b920:	6878      	ldr	r0, [r7, #4]
 801b922:	f000 f8c6 	bl	801bab2 <dhcp_t2_timeout>
 801b926:	e00e      	b.n	801b946 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801b928:	683b      	ldr	r3, [r7, #0]
 801b92a:	89db      	ldrh	r3, [r3, #14]
 801b92c:	2b00      	cmp	r3, #0
 801b92e:	d00a      	beq.n	801b946 <dhcp_coarse_tmr+0x8e>
 801b930:	683b      	ldr	r3, [r7, #0]
 801b932:	89db      	ldrh	r3, [r3, #14]
 801b934:	1e5a      	subs	r2, r3, #1
 801b936:	b291      	uxth	r1, r2
 801b938:	683a      	ldr	r2, [r7, #0]
 801b93a:	81d1      	strh	r1, [r2, #14]
 801b93c:	2b01      	cmp	r3, #1
 801b93e:	d102      	bne.n	801b946 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801b940:	6878      	ldr	r0, [r7, #4]
 801b942:	f000 f888 	bl	801ba56 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	607b      	str	r3, [r7, #4]
 801b94c:	687b      	ldr	r3, [r7, #4]
 801b94e:	2b00      	cmp	r3, #0
 801b950:	d1b9      	bne.n	801b8c6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 801b952:	bf00      	nop
 801b954:	bf00      	nop
 801b956:	3708      	adds	r7, #8
 801b958:	46bd      	mov	sp, r7
 801b95a:	bd80      	pop	{r7, pc}
 801b95c:	200122c4 	.word	0x200122c4

0801b960 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801b960:	b580      	push	{r7, lr}
 801b962:	b082      	sub	sp, #8
 801b964:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801b966:	4b16      	ldr	r3, [pc, #88]	; (801b9c0 <dhcp_fine_tmr+0x60>)
 801b968:	681b      	ldr	r3, [r3, #0]
 801b96a:	607b      	str	r3, [r7, #4]
 801b96c:	e020      	b.n	801b9b0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b972:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 801b974:	683b      	ldr	r3, [r7, #0]
 801b976:	2b00      	cmp	r3, #0
 801b978:	d017      	beq.n	801b9aa <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801b97a:	683b      	ldr	r3, [r7, #0]
 801b97c:	891b      	ldrh	r3, [r3, #8]
 801b97e:	2b01      	cmp	r3, #1
 801b980:	d906      	bls.n	801b990 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801b982:	683b      	ldr	r3, [r7, #0]
 801b984:	891b      	ldrh	r3, [r3, #8]
 801b986:	3b01      	subs	r3, #1
 801b988:	b29a      	uxth	r2, r3
 801b98a:	683b      	ldr	r3, [r7, #0]
 801b98c:	811a      	strh	r2, [r3, #8]
 801b98e:	e00c      	b.n	801b9aa <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 801b990:	683b      	ldr	r3, [r7, #0]
 801b992:	891b      	ldrh	r3, [r3, #8]
 801b994:	2b01      	cmp	r3, #1
 801b996:	d108      	bne.n	801b9aa <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801b998:	683b      	ldr	r3, [r7, #0]
 801b99a:	891b      	ldrh	r3, [r3, #8]
 801b99c:	3b01      	subs	r3, #1
 801b99e:	b29a      	uxth	r2, r3
 801b9a0:	683b      	ldr	r3, [r7, #0]
 801b9a2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 801b9a4:	6878      	ldr	r0, [r7, #4]
 801b9a6:	f000 f80d 	bl	801b9c4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801b9aa:	687b      	ldr	r3, [r7, #4]
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	607b      	str	r3, [r7, #4]
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	2b00      	cmp	r3, #0
 801b9b4:	d1db      	bne.n	801b96e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801b9b6:	bf00      	nop
 801b9b8:	bf00      	nop
 801b9ba:	3708      	adds	r7, #8
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	bd80      	pop	{r7, pc}
 801b9c0:	200122c4 	.word	0x200122c4

0801b9c4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 801b9c4:	b580      	push	{r7, lr}
 801b9c6:	b084      	sub	sp, #16
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801b9cc:	687b      	ldr	r3, [r7, #4]
 801b9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b9d0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801b9d2:	68fb      	ldr	r3, [r7, #12]
 801b9d4:	795b      	ldrb	r3, [r3, #5]
 801b9d6:	2b0c      	cmp	r3, #12
 801b9d8:	d003      	beq.n	801b9e2 <dhcp_timeout+0x1e>
 801b9da:	68fb      	ldr	r3, [r7, #12]
 801b9dc:	795b      	ldrb	r3, [r3, #5]
 801b9de:	2b06      	cmp	r3, #6
 801b9e0:	d103      	bne.n	801b9ea <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 801b9e2:	6878      	ldr	r0, [r7, #4]
 801b9e4:	f000 fa54 	bl	801be90 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801b9e8:	e031      	b.n	801ba4e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801b9ea:	68fb      	ldr	r3, [r7, #12]
 801b9ec:	795b      	ldrb	r3, [r3, #5]
 801b9ee:	2b01      	cmp	r3, #1
 801b9f0:	d10e      	bne.n	801ba10 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 801b9f2:	68fb      	ldr	r3, [r7, #12]
 801b9f4:	799b      	ldrb	r3, [r3, #6]
 801b9f6:	2b05      	cmp	r3, #5
 801b9f8:	d803      	bhi.n	801ba02 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801b9fa:	6878      	ldr	r0, [r7, #4]
 801b9fc:	f7ff fe60 	bl	801b6c0 <dhcp_select>
}
 801ba00:	e025      	b.n	801ba4e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 801ba02:	6878      	ldr	r0, [r7, #4]
 801ba04:	f000 fdae 	bl	801c564 <dhcp_release_and_stop>
      dhcp_start(netif);
 801ba08:	6878      	ldr	r0, [r7, #4]
 801ba0a:	f000 f8e5 	bl	801bbd8 <dhcp_start>
}
 801ba0e:	e01e      	b.n	801ba4e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801ba10:	68fb      	ldr	r3, [r7, #12]
 801ba12:	795b      	ldrb	r3, [r3, #5]
 801ba14:	2b08      	cmp	r3, #8
 801ba16:	d10b      	bne.n	801ba30 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 801ba18:	68fb      	ldr	r3, [r7, #12]
 801ba1a:	799b      	ldrb	r3, [r3, #6]
 801ba1c:	2b01      	cmp	r3, #1
 801ba1e:	d803      	bhi.n	801ba28 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801ba20:	6878      	ldr	r0, [r7, #4]
 801ba22:	f7ff fdf3 	bl	801b60c <dhcp_check>
}
 801ba26:	e012      	b.n	801ba4e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 801ba28:	6878      	ldr	r0, [r7, #4]
 801ba2a:	f000 fad3 	bl	801bfd4 <dhcp_bind>
}
 801ba2e:	e00e      	b.n	801ba4e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801ba30:	68fb      	ldr	r3, [r7, #12]
 801ba32:	795b      	ldrb	r3, [r3, #5]
 801ba34:	2b03      	cmp	r3, #3
 801ba36:	d10a      	bne.n	801ba4e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	799b      	ldrb	r3, [r3, #6]
 801ba3c:	2b01      	cmp	r3, #1
 801ba3e:	d803      	bhi.n	801ba48 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801ba40:	6878      	ldr	r0, [r7, #4]
 801ba42:	f000 fcd9 	bl	801c3f8 <dhcp_reboot>
}
 801ba46:	e002      	b.n	801ba4e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801ba48:	6878      	ldr	r0, [r7, #4]
 801ba4a:	f000 fa21 	bl	801be90 <dhcp_discover>
}
 801ba4e:	bf00      	nop
 801ba50:	3710      	adds	r7, #16
 801ba52:	46bd      	mov	sp, r7
 801ba54:	bd80      	pop	{r7, pc}

0801ba56 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801ba56:	b580      	push	{r7, lr}
 801ba58:	b084      	sub	sp, #16
 801ba5a:	af00      	add	r7, sp, #0
 801ba5c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ba62:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ba64:	68fb      	ldr	r3, [r7, #12]
 801ba66:	795b      	ldrb	r3, [r3, #5]
 801ba68:	2b01      	cmp	r3, #1
 801ba6a:	d007      	beq.n	801ba7c <dhcp_t1_timeout+0x26>
 801ba6c:	68fb      	ldr	r3, [r7, #12]
 801ba6e:	795b      	ldrb	r3, [r3, #5]
 801ba70:	2b0a      	cmp	r3, #10
 801ba72:	d003      	beq.n	801ba7c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 801ba74:	68fb      	ldr	r3, [r7, #12]
 801ba76:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801ba78:	2b05      	cmp	r3, #5
 801ba7a:	d116      	bne.n	801baaa <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 801ba7c:	6878      	ldr	r0, [r7, #4]
 801ba7e:	f000 fb83 	bl	801c188 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801ba82:	68fb      	ldr	r3, [r7, #12]
 801ba84:	899b      	ldrh	r3, [r3, #12]
 801ba86:	461a      	mov	r2, r3
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	8a5b      	ldrh	r3, [r3, #18]
 801ba8c:	1ad3      	subs	r3, r2, r3
 801ba8e:	2b01      	cmp	r3, #1
 801ba90:	dd0b      	ble.n	801baaa <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801ba92:	68fb      	ldr	r3, [r7, #12]
 801ba94:	899b      	ldrh	r3, [r3, #12]
 801ba96:	461a      	mov	r2, r3
 801ba98:	68fb      	ldr	r3, [r7, #12]
 801ba9a:	8a5b      	ldrh	r3, [r3, #18]
 801ba9c:	1ad3      	subs	r3, r2, r3
 801ba9e:	0fda      	lsrs	r2, r3, #31
 801baa0:	4413      	add	r3, r2
 801baa2:	105b      	asrs	r3, r3, #1
 801baa4:	b29a      	uxth	r2, r3
 801baa6:	68fb      	ldr	r3, [r7, #12]
 801baa8:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801baaa:	bf00      	nop
 801baac:	3710      	adds	r7, #16
 801baae:	46bd      	mov	sp, r7
 801bab0:	bd80      	pop	{r7, pc}

0801bab2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 801bab2:	b580      	push	{r7, lr}
 801bab4:	b084      	sub	sp, #16
 801bab6:	af00      	add	r7, sp, #0
 801bab8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801babe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801bac0:	68fb      	ldr	r3, [r7, #12]
 801bac2:	795b      	ldrb	r3, [r3, #5]
 801bac4:	2b01      	cmp	r3, #1
 801bac6:	d00b      	beq.n	801bae0 <dhcp_t2_timeout+0x2e>
 801bac8:	68fb      	ldr	r3, [r7, #12]
 801baca:	795b      	ldrb	r3, [r3, #5]
 801bacc:	2b0a      	cmp	r3, #10
 801bace:	d007      	beq.n	801bae0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801bad4:	2b05      	cmp	r3, #5
 801bad6:	d003      	beq.n	801bae0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801bad8:	68fb      	ldr	r3, [r7, #12]
 801bada:	795b      	ldrb	r3, [r3, #5]
 801badc:	2b04      	cmp	r3, #4
 801bade:	d116      	bne.n	801bb0e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 801bae0:	6878      	ldr	r0, [r7, #4]
 801bae2:	f000 fbed 	bl	801c2c0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801bae6:	68fb      	ldr	r3, [r7, #12]
 801bae8:	8a9b      	ldrh	r3, [r3, #20]
 801baea:	461a      	mov	r2, r3
 801baec:	68fb      	ldr	r3, [r7, #12]
 801baee:	8a5b      	ldrh	r3, [r3, #18]
 801baf0:	1ad3      	subs	r3, r2, r3
 801baf2:	2b01      	cmp	r3, #1
 801baf4:	dd0b      	ble.n	801bb0e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	8a9b      	ldrh	r3, [r3, #20]
 801bafa:	461a      	mov	r2, r3
 801bafc:	68fb      	ldr	r3, [r7, #12]
 801bafe:	8a5b      	ldrh	r3, [r3, #18]
 801bb00:	1ad3      	subs	r3, r2, r3
 801bb02:	0fda      	lsrs	r2, r3, #31
 801bb04:	4413      	add	r3, r2
 801bb06:	105b      	asrs	r3, r3, #1
 801bb08:	b29a      	uxth	r2, r3
 801bb0a:	68fb      	ldr	r3, [r7, #12]
 801bb0c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801bb0e:	bf00      	nop
 801bb10:	3710      	adds	r7, #16
 801bb12:	46bd      	mov	sp, r7
 801bb14:	bd80      	pop	{r7, pc}
	...

0801bb18 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801bb18:	b580      	push	{r7, lr}
 801bb1a:	b084      	sub	sp, #16
 801bb1c:	af00      	add	r7, sp, #0
 801bb1e:	6078      	str	r0, [r7, #4]
 801bb20:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb26:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801bb28:	68fb      	ldr	r3, [r7, #12]
 801bb2a:	2200      	movs	r2, #0
 801bb2c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801bb2e:	68fb      	ldr	r3, [r7, #12]
 801bb30:	2200      	movs	r2, #0
 801bb32:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801bb34:	4b26      	ldr	r3, [pc, #152]	; (801bbd0 <dhcp_handle_ack+0xb8>)
 801bb36:	78db      	ldrb	r3, [r3, #3]
 801bb38:	2b00      	cmp	r3, #0
 801bb3a:	d003      	beq.n	801bb44 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801bb3c:	4b25      	ldr	r3, [pc, #148]	; (801bbd4 <dhcp_handle_ack+0xbc>)
 801bb3e:	68da      	ldr	r2, [r3, #12]
 801bb40:	68fb      	ldr	r3, [r7, #12]
 801bb42:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801bb44:	4b22      	ldr	r3, [pc, #136]	; (801bbd0 <dhcp_handle_ack+0xb8>)
 801bb46:	791b      	ldrb	r3, [r3, #4]
 801bb48:	2b00      	cmp	r3, #0
 801bb4a:	d004      	beq.n	801bb56 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801bb4c:	4b21      	ldr	r3, [pc, #132]	; (801bbd4 <dhcp_handle_ack+0xbc>)
 801bb4e:	691a      	ldr	r2, [r3, #16]
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	62da      	str	r2, [r3, #44]	; 0x2c
 801bb54:	e004      	b.n	801bb60 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801bb56:	68fb      	ldr	r3, [r7, #12]
 801bb58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb5a:	085a      	lsrs	r2, r3, #1
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801bb60:	4b1b      	ldr	r3, [pc, #108]	; (801bbd0 <dhcp_handle_ack+0xb8>)
 801bb62:	795b      	ldrb	r3, [r3, #5]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	d004      	beq.n	801bb72 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801bb68:	4b1a      	ldr	r3, [pc, #104]	; (801bbd4 <dhcp_handle_ack+0xbc>)
 801bb6a:	695a      	ldr	r2, [r3, #20]
 801bb6c:	68fb      	ldr	r3, [r7, #12]
 801bb6e:	631a      	str	r2, [r3, #48]	; 0x30
 801bb70:	e007      	b.n	801bb82 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801bb72:	68fb      	ldr	r3, [r7, #12]
 801bb74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bb76:	4613      	mov	r3, r2
 801bb78:	00db      	lsls	r3, r3, #3
 801bb7a:	1a9b      	subs	r3, r3, r2
 801bb7c:	08da      	lsrs	r2, r3, #3
 801bb7e:	68fb      	ldr	r3, [r7, #12]
 801bb80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801bb82:	683b      	ldr	r3, [r7, #0]
 801bb84:	691a      	ldr	r2, [r3, #16]
 801bb86:	68fb      	ldr	r3, [r7, #12]
 801bb88:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801bb8a:	4b11      	ldr	r3, [pc, #68]	; (801bbd0 <dhcp_handle_ack+0xb8>)
 801bb8c:	799b      	ldrb	r3, [r3, #6]
 801bb8e:	2b00      	cmp	r3, #0
 801bb90:	d00b      	beq.n	801bbaa <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801bb92:	4b10      	ldr	r3, [pc, #64]	; (801bbd4 <dhcp_handle_ack+0xbc>)
 801bb94:	699b      	ldr	r3, [r3, #24]
 801bb96:	4618      	mov	r0, r3
 801bb98:	f7f6 fee1 	bl	801295e <lwip_htonl>
 801bb9c:	4602      	mov	r2, r0
 801bb9e:	68fb      	ldr	r3, [r7, #12]
 801bba0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	2201      	movs	r2, #1
 801bba6:	71da      	strb	r2, [r3, #7]
 801bba8:	e002      	b.n	801bbb0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	2200      	movs	r2, #0
 801bbae:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801bbb0:	4b07      	ldr	r3, [pc, #28]	; (801bbd0 <dhcp_handle_ack+0xb8>)
 801bbb2:	79db      	ldrb	r3, [r3, #7]
 801bbb4:	2b00      	cmp	r3, #0
 801bbb6:	d007      	beq.n	801bbc8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801bbb8:	4b06      	ldr	r3, [pc, #24]	; (801bbd4 <dhcp_handle_ack+0xbc>)
 801bbba:	69db      	ldr	r3, [r3, #28]
 801bbbc:	4618      	mov	r0, r3
 801bbbe:	f7f6 fece 	bl	801295e <lwip_htonl>
 801bbc2:	4602      	mov	r2, r0
 801bbc4:	68fb      	ldr	r3, [r7, #12]
 801bbc6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801bbc8:	bf00      	nop
 801bbca:	3710      	adds	r7, #16
 801bbcc:	46bd      	mov	sp, r7
 801bbce:	bd80      	pop	{r7, pc}
 801bbd0:	20012350 	.word	0x20012350
 801bbd4:	20012330 	.word	0x20012330

0801bbd8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801bbd8:	b580      	push	{r7, lr}
 801bbda:	b084      	sub	sp, #16
 801bbdc:	af00      	add	r7, sp, #0
 801bbde:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801bbe0:	687b      	ldr	r3, [r7, #4]
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d109      	bne.n	801bbfa <dhcp_start+0x22>
 801bbe6:	4b37      	ldr	r3, [pc, #220]	; (801bcc4 <dhcp_start+0xec>)
 801bbe8:	f240 22e7 	movw	r2, #743	; 0x2e7
 801bbec:	4936      	ldr	r1, [pc, #216]	; (801bcc8 <dhcp_start+0xf0>)
 801bbee:	4837      	ldr	r0, [pc, #220]	; (801bccc <dhcp_start+0xf4>)
 801bbf0:	f005 fbe2 	bl	80213b8 <iprintf>
 801bbf4:	f06f 030f 	mvn.w	r3, #15
 801bbf8:	e060      	b.n	801bcbc <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bc00:	f003 0301 	and.w	r3, r3, #1
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d109      	bne.n	801bc1c <dhcp_start+0x44>
 801bc08:	4b2e      	ldr	r3, [pc, #184]	; (801bcc4 <dhcp_start+0xec>)
 801bc0a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801bc0e:	4930      	ldr	r1, [pc, #192]	; (801bcd0 <dhcp_start+0xf8>)
 801bc10:	482e      	ldr	r0, [pc, #184]	; (801bccc <dhcp_start+0xf4>)
 801bc12:	f005 fbd1 	bl	80213b8 <iprintf>
 801bc16:	f06f 030f 	mvn.w	r3, #15
 801bc1a:	e04f      	b.n	801bcbc <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc20:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bc26:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801bc2a:	d202      	bcs.n	801bc32 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 801bc2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bc30:	e044      	b.n	801bcbc <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801bc32:	68fb      	ldr	r3, [r7, #12]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d10d      	bne.n	801bc54 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801bc38:	2034      	movs	r0, #52	; 0x34
 801bc3a:	f7f7 f9af 	bl	8012f9c <mem_malloc>
 801bc3e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d102      	bne.n	801bc4c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801bc46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bc4a:	e037      	b.n	801bcbc <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	68fa      	ldr	r2, [r7, #12]
 801bc50:	625a      	str	r2, [r3, #36]	; 0x24
 801bc52:	e005      	b.n	801bc60 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801bc54:	68fb      	ldr	r3, [r7, #12]
 801bc56:	791b      	ldrb	r3, [r3, #4]
 801bc58:	2b00      	cmp	r3, #0
 801bc5a:	d001      	beq.n	801bc60 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801bc5c:	f7ff fc92 	bl	801b584 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 801bc60:	2234      	movs	r2, #52	; 0x34
 801bc62:	2100      	movs	r1, #0
 801bc64:	68f8      	ldr	r0, [r7, #12]
 801bc66:	f005 fdbd 	bl	80217e4 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801bc6a:	f7ff fc39 	bl	801b4e0 <dhcp_inc_pcb_refcount>
 801bc6e:	4603      	mov	r3, r0
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	d002      	beq.n	801bc7a <dhcp_start+0xa2>
    return ERR_MEM;
 801bc74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bc78:	e020      	b.n	801bcbc <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	2201      	movs	r2, #1
 801bc7e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801bc86:	f003 0304 	and.w	r3, r3, #4
 801bc8a:	2b00      	cmp	r3, #0
 801bc8c:	d105      	bne.n	801bc9a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801bc8e:	2102      	movs	r1, #2
 801bc90:	68f8      	ldr	r0, [r7, #12]
 801bc92:	f000 fd01 	bl	801c698 <dhcp_set_state>
    return ERR_OK;
 801bc96:	2300      	movs	r3, #0
 801bc98:	e010      	b.n	801bcbc <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801bc9a:	6878      	ldr	r0, [r7, #4]
 801bc9c:	f000 f8f8 	bl	801be90 <dhcp_discover>
 801bca0:	4603      	mov	r3, r0
 801bca2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801bca4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801bca8:	2b00      	cmp	r3, #0
 801bcaa:	d005      	beq.n	801bcb8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801bcac:	6878      	ldr	r0, [r7, #4]
 801bcae:	f000 fc59 	bl	801c564 <dhcp_release_and_stop>
    return ERR_MEM;
 801bcb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801bcb6:	e001      	b.n	801bcbc <dhcp_start+0xe4>
  }
  return result;
 801bcb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801bcbc:	4618      	mov	r0, r3
 801bcbe:	3710      	adds	r7, #16
 801bcc0:	46bd      	mov	sp, r7
 801bcc2:	bd80      	pop	{r7, pc}
 801bcc4:	080263ac 	.word	0x080263ac
 801bcc8:	08026490 	.word	0x08026490
 801bccc:	0802640c 	.word	0x0802640c
 801bcd0:	080264d4 	.word	0x080264d4

0801bcd4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 801bcd4:	b580      	push	{r7, lr}
 801bcd6:	b084      	sub	sp, #16
 801bcd8:	af00      	add	r7, sp, #0
 801bcda:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bcdc:	687b      	ldr	r3, [r7, #4]
 801bcde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bce0:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801bce2:	68fb      	ldr	r3, [r7, #12]
 801bce4:	2b00      	cmp	r3, #0
 801bce6:	d025      	beq.n	801bd34 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	795b      	ldrb	r3, [r3, #5]
 801bcec:	2b0a      	cmp	r3, #10
 801bcee:	d008      	beq.n	801bd02 <dhcp_network_changed+0x2e>
 801bcf0:	2b0a      	cmp	r3, #10
 801bcf2:	dc0d      	bgt.n	801bd10 <dhcp_network_changed+0x3c>
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	d01f      	beq.n	801bd38 <dhcp_network_changed+0x64>
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	db09      	blt.n	801bd10 <dhcp_network_changed+0x3c>
 801bcfc:	3b03      	subs	r3, #3
 801bcfe:	2b02      	cmp	r3, #2
 801bd00:	d806      	bhi.n	801bd10 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801bd02:	68fb      	ldr	r3, [r7, #12]
 801bd04:	2200      	movs	r2, #0
 801bd06:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801bd08:	6878      	ldr	r0, [r7, #4]
 801bd0a:	f000 fb75 	bl	801c3f8 <dhcp_reboot>
      break;
 801bd0e:	e014      	b.n	801bd3a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801bd10:	68fb      	ldr	r3, [r7, #12]
 801bd12:	795b      	ldrb	r3, [r3, #5]
 801bd14:	2b0c      	cmp	r3, #12
 801bd16:	d906      	bls.n	801bd26 <dhcp_network_changed+0x52>
 801bd18:	4b09      	ldr	r3, [pc, #36]	; (801bd40 <dhcp_network_changed+0x6c>)
 801bd1a:	f240 326d 	movw	r2, #877	; 0x36d
 801bd1e:	4909      	ldr	r1, [pc, #36]	; (801bd44 <dhcp_network_changed+0x70>)
 801bd20:	4809      	ldr	r0, [pc, #36]	; (801bd48 <dhcp_network_changed+0x74>)
 801bd22:	f005 fb49 	bl	80213b8 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801bd26:	68fb      	ldr	r3, [r7, #12]
 801bd28:	2200      	movs	r2, #0
 801bd2a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 801bd2c:	6878      	ldr	r0, [r7, #4]
 801bd2e:	f000 f8af 	bl	801be90 <dhcp_discover>
      break;
 801bd32:	e002      	b.n	801bd3a <dhcp_network_changed+0x66>
    return;
 801bd34:	bf00      	nop
 801bd36:	e000      	b.n	801bd3a <dhcp_network_changed+0x66>
      break;
 801bd38:	bf00      	nop
  }
}
 801bd3a:	3710      	adds	r7, #16
 801bd3c:	46bd      	mov	sp, r7
 801bd3e:	bd80      	pop	{r7, pc}
 801bd40:	080263ac 	.word	0x080263ac
 801bd44:	080264f8 	.word	0x080264f8
 801bd48:	0802640c 	.word	0x0802640c

0801bd4c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 801bd4c:	b580      	push	{r7, lr}
 801bd4e:	b084      	sub	sp, #16
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	6078      	str	r0, [r7, #4]
 801bd54:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	d107      	bne.n	801bd6c <dhcp_arp_reply+0x20>
 801bd5c:	4b0e      	ldr	r3, [pc, #56]	; (801bd98 <dhcp_arp_reply+0x4c>)
 801bd5e:	f240 328b 	movw	r2, #907	; 0x38b
 801bd62:	490e      	ldr	r1, [pc, #56]	; (801bd9c <dhcp_arp_reply+0x50>)
 801bd64:	480e      	ldr	r0, [pc, #56]	; (801bda0 <dhcp_arp_reply+0x54>)
 801bd66:	f005 fb27 	bl	80213b8 <iprintf>
 801bd6a:	e012      	b.n	801bd92 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801bd6c:	687b      	ldr	r3, [r7, #4]
 801bd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd70:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801bd72:	68fb      	ldr	r3, [r7, #12]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d00c      	beq.n	801bd92 <dhcp_arp_reply+0x46>
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	795b      	ldrb	r3, [r3, #5]
 801bd7c:	2b08      	cmp	r3, #8
 801bd7e:	d108      	bne.n	801bd92 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801bd80:	683b      	ldr	r3, [r7, #0]
 801bd82:	681a      	ldr	r2, [r3, #0]
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	69db      	ldr	r3, [r3, #28]
 801bd88:	429a      	cmp	r2, r3
 801bd8a:	d102      	bne.n	801bd92 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801bd8c:	6878      	ldr	r0, [r7, #4]
 801bd8e:	f000 f809 	bl	801bda4 <dhcp_decline>
    }
  }
}
 801bd92:	3710      	adds	r7, #16
 801bd94:	46bd      	mov	sp, r7
 801bd96:	bd80      	pop	{r7, pc}
 801bd98:	080263ac 	.word	0x080263ac
 801bd9c:	08026490 	.word	0x08026490
 801bda0:	0802640c 	.word	0x0802640c

0801bda4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801bda4:	b5b0      	push	{r4, r5, r7, lr}
 801bda6:	b08a      	sub	sp, #40	; 0x28
 801bda8:	af02      	add	r7, sp, #8
 801bdaa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801bdac:	687b      	ldr	r3, [r7, #4]
 801bdae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bdb0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801bdb2:	210c      	movs	r1, #12
 801bdb4:	69b8      	ldr	r0, [r7, #24]
 801bdb6:	f000 fc6f 	bl	801c698 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801bdba:	f107 030c 	add.w	r3, r7, #12
 801bdbe:	2204      	movs	r2, #4
 801bdc0:	69b9      	ldr	r1, [r7, #24]
 801bdc2:	6878      	ldr	r0, [r7, #4]
 801bdc4:	f001 f8f4 	bl	801cfb0 <dhcp_create_msg>
 801bdc8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801bdca:	697b      	ldr	r3, [r7, #20]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d035      	beq.n	801be3c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801bdd0:	697b      	ldr	r3, [r7, #20]
 801bdd2:	685b      	ldr	r3, [r3, #4]
 801bdd4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801bdd6:	89b8      	ldrh	r0, [r7, #12]
 801bdd8:	693b      	ldr	r3, [r7, #16]
 801bdda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bdde:	2304      	movs	r3, #4
 801bde0:	2232      	movs	r2, #50	; 0x32
 801bde2:	f000 fc73 	bl	801c6cc <dhcp_option>
 801bde6:	4603      	mov	r3, r0
 801bde8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801bdea:	89bc      	ldrh	r4, [r7, #12]
 801bdec:	693b      	ldr	r3, [r7, #16]
 801bdee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801bdf2:	69bb      	ldr	r3, [r7, #24]
 801bdf4:	69db      	ldr	r3, [r3, #28]
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	f7f6 fdb1 	bl	801295e <lwip_htonl>
 801bdfc:	4603      	mov	r3, r0
 801bdfe:	461a      	mov	r2, r3
 801be00:	4629      	mov	r1, r5
 801be02:	4620      	mov	r0, r4
 801be04:	f000 fcee 	bl	801c7e4 <dhcp_option_long>
 801be08:	4603      	mov	r3, r0
 801be0a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801be0c:	89b8      	ldrh	r0, [r7, #12]
 801be0e:	693b      	ldr	r3, [r7, #16]
 801be10:	33f0      	adds	r3, #240	; 0xf0
 801be12:	697a      	ldr	r2, [r7, #20]
 801be14:	4619      	mov	r1, r3
 801be16:	f001 f9a1 	bl	801d15c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801be1a:	4b19      	ldr	r3, [pc, #100]	; (801be80 <dhcp_decline+0xdc>)
 801be1c:	6818      	ldr	r0, [r3, #0]
 801be1e:	4b19      	ldr	r3, [pc, #100]	; (801be84 <dhcp_decline+0xe0>)
 801be20:	9301      	str	r3, [sp, #4]
 801be22:	687b      	ldr	r3, [r7, #4]
 801be24:	9300      	str	r3, [sp, #0]
 801be26:	2343      	movs	r3, #67	; 0x43
 801be28:	4a17      	ldr	r2, [pc, #92]	; (801be88 <dhcp_decline+0xe4>)
 801be2a:	6979      	ldr	r1, [r7, #20]
 801be2c:	f7ff f8ba 	bl	801afa4 <udp_sendto_if_src>
 801be30:	4603      	mov	r3, r0
 801be32:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801be34:	6978      	ldr	r0, [r7, #20]
 801be36:	f7f8 f97b 	bl	8014130 <pbuf_free>
 801be3a:	e001      	b.n	801be40 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801be3c:	23ff      	movs	r3, #255	; 0xff
 801be3e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801be40:	69bb      	ldr	r3, [r7, #24]
 801be42:	799b      	ldrb	r3, [r3, #6]
 801be44:	2bff      	cmp	r3, #255	; 0xff
 801be46:	d005      	beq.n	801be54 <dhcp_decline+0xb0>
    dhcp->tries++;
 801be48:	69bb      	ldr	r3, [r7, #24]
 801be4a:	799b      	ldrb	r3, [r3, #6]
 801be4c:	3301      	adds	r3, #1
 801be4e:	b2da      	uxtb	r2, r3
 801be50:	69bb      	ldr	r3, [r7, #24]
 801be52:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801be54:	f242 7310 	movw	r3, #10000	; 0x2710
 801be58:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801be5a:	89fb      	ldrh	r3, [r7, #14]
 801be5c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801be60:	4a0a      	ldr	r2, [pc, #40]	; (801be8c <dhcp_decline+0xe8>)
 801be62:	fb82 1203 	smull	r1, r2, r2, r3
 801be66:	1152      	asrs	r2, r2, #5
 801be68:	17db      	asrs	r3, r3, #31
 801be6a:	1ad3      	subs	r3, r2, r3
 801be6c:	b29a      	uxth	r2, r3
 801be6e:	69bb      	ldr	r3, [r7, #24]
 801be70:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801be72:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801be76:	4618      	mov	r0, r3
 801be78:	3720      	adds	r7, #32
 801be7a:	46bd      	mov	sp, r7
 801be7c:	bdb0      	pop	{r4, r5, r7, pc}
 801be7e:	bf00      	nop
 801be80:	20012358 	.word	0x20012358
 801be84:	08027070 	.word	0x08027070
 801be88:	08027074 	.word	0x08027074
 801be8c:	10624dd3 	.word	0x10624dd3

0801be90 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 801be90:	b580      	push	{r7, lr}
 801be92:	b08a      	sub	sp, #40	; 0x28
 801be94:	af02      	add	r7, sp, #8
 801be96:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be9c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801be9e:	2300      	movs	r3, #0
 801bea0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801bea2:	69bb      	ldr	r3, [r7, #24]
 801bea4:	2200      	movs	r2, #0
 801bea6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801bea8:	2106      	movs	r1, #6
 801beaa:	69b8      	ldr	r0, [r7, #24]
 801beac:	f000 fbf4 	bl	801c698 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801beb0:	f107 0308 	add.w	r3, r7, #8
 801beb4:	2201      	movs	r2, #1
 801beb6:	69b9      	ldr	r1, [r7, #24]
 801beb8:	6878      	ldr	r0, [r7, #4]
 801beba:	f001 f879 	bl	801cfb0 <dhcp_create_msg>
 801bebe:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801bec0:	693b      	ldr	r3, [r7, #16]
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d04b      	beq.n	801bf5e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801bec6:	693b      	ldr	r3, [r7, #16]
 801bec8:	685b      	ldr	r3, [r3, #4]
 801beca:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801becc:	8938      	ldrh	r0, [r7, #8]
 801bece:	68fb      	ldr	r3, [r7, #12]
 801bed0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bed4:	2302      	movs	r3, #2
 801bed6:	2239      	movs	r2, #57	; 0x39
 801bed8:	f000 fbf8 	bl	801c6cc <dhcp_option>
 801bedc:	4603      	mov	r3, r0
 801bede:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801bee0:	8938      	ldrh	r0, [r7, #8]
 801bee2:	68fb      	ldr	r3, [r7, #12]
 801bee4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bee8:	687b      	ldr	r3, [r7, #4]
 801beea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801beec:	461a      	mov	r2, r3
 801beee:	f000 fc47 	bl	801c780 <dhcp_option_short>
 801bef2:	4603      	mov	r3, r0
 801bef4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801bef6:	8938      	ldrh	r0, [r7, #8]
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801befe:	2303      	movs	r3, #3
 801bf00:	2237      	movs	r2, #55	; 0x37
 801bf02:	f000 fbe3 	bl	801c6cc <dhcp_option>
 801bf06:	4603      	mov	r3, r0
 801bf08:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bf0a:	2300      	movs	r3, #0
 801bf0c:	77fb      	strb	r3, [r7, #31]
 801bf0e:	e00e      	b.n	801bf2e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801bf10:	8938      	ldrh	r0, [r7, #8]
 801bf12:	68fb      	ldr	r3, [r7, #12]
 801bf14:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801bf18:	7ffb      	ldrb	r3, [r7, #31]
 801bf1a:	4a29      	ldr	r2, [pc, #164]	; (801bfc0 <dhcp_discover+0x130>)
 801bf1c:	5cd3      	ldrb	r3, [r2, r3]
 801bf1e:	461a      	mov	r2, r3
 801bf20:	f000 fc08 	bl	801c734 <dhcp_option_byte>
 801bf24:	4603      	mov	r3, r0
 801bf26:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801bf28:	7ffb      	ldrb	r3, [r7, #31]
 801bf2a:	3301      	adds	r3, #1
 801bf2c:	77fb      	strb	r3, [r7, #31]
 801bf2e:	7ffb      	ldrb	r3, [r7, #31]
 801bf30:	2b02      	cmp	r3, #2
 801bf32:	d9ed      	bls.n	801bf10 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801bf34:	8938      	ldrh	r0, [r7, #8]
 801bf36:	68fb      	ldr	r3, [r7, #12]
 801bf38:	33f0      	adds	r3, #240	; 0xf0
 801bf3a:	693a      	ldr	r2, [r7, #16]
 801bf3c:	4619      	mov	r1, r3
 801bf3e:	f001 f90d 	bl	801d15c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801bf42:	4b20      	ldr	r3, [pc, #128]	; (801bfc4 <dhcp_discover+0x134>)
 801bf44:	6818      	ldr	r0, [r3, #0]
 801bf46:	4b20      	ldr	r3, [pc, #128]	; (801bfc8 <dhcp_discover+0x138>)
 801bf48:	9301      	str	r3, [sp, #4]
 801bf4a:	687b      	ldr	r3, [r7, #4]
 801bf4c:	9300      	str	r3, [sp, #0]
 801bf4e:	2343      	movs	r3, #67	; 0x43
 801bf50:	4a1e      	ldr	r2, [pc, #120]	; (801bfcc <dhcp_discover+0x13c>)
 801bf52:	6939      	ldr	r1, [r7, #16]
 801bf54:	f7ff f826 	bl	801afa4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 801bf58:	6938      	ldr	r0, [r7, #16]
 801bf5a:	f7f8 f8e9 	bl	8014130 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801bf5e:	69bb      	ldr	r3, [r7, #24]
 801bf60:	799b      	ldrb	r3, [r3, #6]
 801bf62:	2bff      	cmp	r3, #255	; 0xff
 801bf64:	d005      	beq.n	801bf72 <dhcp_discover+0xe2>
    dhcp->tries++;
 801bf66:	69bb      	ldr	r3, [r7, #24]
 801bf68:	799b      	ldrb	r3, [r3, #6]
 801bf6a:	3301      	adds	r3, #1
 801bf6c:	b2da      	uxtb	r2, r3
 801bf6e:	69bb      	ldr	r3, [r7, #24]
 801bf70:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801bf72:	69bb      	ldr	r3, [r7, #24]
 801bf74:	799b      	ldrb	r3, [r3, #6]
 801bf76:	2b05      	cmp	r3, #5
 801bf78:	d80d      	bhi.n	801bf96 <dhcp_discover+0x106>
 801bf7a:	69bb      	ldr	r3, [r7, #24]
 801bf7c:	799b      	ldrb	r3, [r3, #6]
 801bf7e:	461a      	mov	r2, r3
 801bf80:	2301      	movs	r3, #1
 801bf82:	4093      	lsls	r3, r2
 801bf84:	b29b      	uxth	r3, r3
 801bf86:	461a      	mov	r2, r3
 801bf88:	0152      	lsls	r2, r2, #5
 801bf8a:	1ad2      	subs	r2, r2, r3
 801bf8c:	0092      	lsls	r2, r2, #2
 801bf8e:	4413      	add	r3, r2
 801bf90:	00db      	lsls	r3, r3, #3
 801bf92:	b29b      	uxth	r3, r3
 801bf94:	e001      	b.n	801bf9a <dhcp_discover+0x10a>
 801bf96:	f64e 2360 	movw	r3, #60000	; 0xea60
 801bf9a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801bf9c:	897b      	ldrh	r3, [r7, #10]
 801bf9e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801bfa2:	4a0b      	ldr	r2, [pc, #44]	; (801bfd0 <dhcp_discover+0x140>)
 801bfa4:	fb82 1203 	smull	r1, r2, r2, r3
 801bfa8:	1152      	asrs	r2, r2, #5
 801bfaa:	17db      	asrs	r3, r3, #31
 801bfac:	1ad3      	subs	r3, r2, r3
 801bfae:	b29a      	uxth	r2, r3
 801bfb0:	69bb      	ldr	r3, [r7, #24]
 801bfb2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801bfb4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bfb8:	4618      	mov	r0, r3
 801bfba:	3720      	adds	r7, #32
 801bfbc:	46bd      	mov	sp, r7
 801bfbe:	bd80      	pop	{r7, pc}
 801bfc0:	20000030 	.word	0x20000030
 801bfc4:	20012358 	.word	0x20012358
 801bfc8:	08027070 	.word	0x08027070
 801bfcc:	08027074 	.word	0x08027074
 801bfd0:	10624dd3 	.word	0x10624dd3

0801bfd4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801bfd4:	b580      	push	{r7, lr}
 801bfd6:	b088      	sub	sp, #32
 801bfd8:	af00      	add	r7, sp, #0
 801bfda:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	2b00      	cmp	r3, #0
 801bfe0:	d107      	bne.n	801bff2 <dhcp_bind+0x1e>
 801bfe2:	4b64      	ldr	r3, [pc, #400]	; (801c174 <dhcp_bind+0x1a0>)
 801bfe4:	f240 4215 	movw	r2, #1045	; 0x415
 801bfe8:	4963      	ldr	r1, [pc, #396]	; (801c178 <dhcp_bind+0x1a4>)
 801bfea:	4864      	ldr	r0, [pc, #400]	; (801c17c <dhcp_bind+0x1a8>)
 801bfec:	f005 f9e4 	bl	80213b8 <iprintf>
 801bff0:	e0bc      	b.n	801c16c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801bff2:	687b      	ldr	r3, [r7, #4]
 801bff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bff6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801bff8:	69bb      	ldr	r3, [r7, #24]
 801bffa:	2b00      	cmp	r3, #0
 801bffc:	d107      	bne.n	801c00e <dhcp_bind+0x3a>
 801bffe:	4b5d      	ldr	r3, [pc, #372]	; (801c174 <dhcp_bind+0x1a0>)
 801c000:	f240 4217 	movw	r2, #1047	; 0x417
 801c004:	495e      	ldr	r1, [pc, #376]	; (801c180 <dhcp_bind+0x1ac>)
 801c006:	485d      	ldr	r0, [pc, #372]	; (801c17c <dhcp_bind+0x1a8>)
 801c008:	f005 f9d6 	bl	80213b8 <iprintf>
 801c00c:	e0ae      	b.n	801c16c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801c00e:	69bb      	ldr	r3, [r7, #24]
 801c010:	2200      	movs	r2, #0
 801c012:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801c014:	69bb      	ldr	r3, [r7, #24]
 801c016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c018:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c01c:	d019      	beq.n	801c052 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c01e:	69bb      	ldr	r3, [r7, #24]
 801c020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c022:	331e      	adds	r3, #30
 801c024:	4a57      	ldr	r2, [pc, #348]	; (801c184 <dhcp_bind+0x1b0>)
 801c026:	fba2 2303 	umull	r2, r3, r2, r3
 801c02a:	095b      	lsrs	r3, r3, #5
 801c02c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c02e:	69fb      	ldr	r3, [r7, #28]
 801c030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c034:	d302      	bcc.n	801c03c <dhcp_bind+0x68>
      timeout = 0xffff;
 801c036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c03a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801c03c:	69fb      	ldr	r3, [r7, #28]
 801c03e:	b29a      	uxth	r2, r3
 801c040:	69bb      	ldr	r3, [r7, #24]
 801c042:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 801c044:	69bb      	ldr	r3, [r7, #24]
 801c046:	8a9b      	ldrh	r3, [r3, #20]
 801c048:	2b00      	cmp	r3, #0
 801c04a:	d102      	bne.n	801c052 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801c04c:	69bb      	ldr	r3, [r7, #24]
 801c04e:	2201      	movs	r2, #1
 801c050:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801c052:	69bb      	ldr	r3, [r7, #24]
 801c054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c05a:	d01d      	beq.n	801c098 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c05c:	69bb      	ldr	r3, [r7, #24]
 801c05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c060:	331e      	adds	r3, #30
 801c062:	4a48      	ldr	r2, [pc, #288]	; (801c184 <dhcp_bind+0x1b0>)
 801c064:	fba2 2303 	umull	r2, r3, r2, r3
 801c068:	095b      	lsrs	r3, r3, #5
 801c06a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c06c:	69fb      	ldr	r3, [r7, #28]
 801c06e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c072:	d302      	bcc.n	801c07a <dhcp_bind+0xa6>
      timeout = 0xffff;
 801c074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c078:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801c07a:	69fb      	ldr	r3, [r7, #28]
 801c07c:	b29a      	uxth	r2, r3
 801c07e:	69bb      	ldr	r3, [r7, #24]
 801c080:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 801c082:	69bb      	ldr	r3, [r7, #24]
 801c084:	895b      	ldrh	r3, [r3, #10]
 801c086:	2b00      	cmp	r3, #0
 801c088:	d102      	bne.n	801c090 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801c08a:	69bb      	ldr	r3, [r7, #24]
 801c08c:	2201      	movs	r2, #1
 801c08e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801c090:	69bb      	ldr	r3, [r7, #24]
 801c092:	895a      	ldrh	r2, [r3, #10]
 801c094:	69bb      	ldr	r3, [r7, #24]
 801c096:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801c098:	69bb      	ldr	r3, [r7, #24]
 801c09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c09c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801c0a0:	d01d      	beq.n	801c0de <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801c0a2:	69bb      	ldr	r3, [r7, #24]
 801c0a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c0a6:	331e      	adds	r3, #30
 801c0a8:	4a36      	ldr	r2, [pc, #216]	; (801c184 <dhcp_bind+0x1b0>)
 801c0aa:	fba2 2303 	umull	r2, r3, r2, r3
 801c0ae:	095b      	lsrs	r3, r3, #5
 801c0b0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801c0b2:	69fb      	ldr	r3, [r7, #28]
 801c0b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c0b8:	d302      	bcc.n	801c0c0 <dhcp_bind+0xec>
      timeout = 0xffff;
 801c0ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c0be:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801c0c0:	69fb      	ldr	r3, [r7, #28]
 801c0c2:	b29a      	uxth	r2, r3
 801c0c4:	69bb      	ldr	r3, [r7, #24]
 801c0c6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801c0c8:	69bb      	ldr	r3, [r7, #24]
 801c0ca:	899b      	ldrh	r3, [r3, #12]
 801c0cc:	2b00      	cmp	r3, #0
 801c0ce:	d102      	bne.n	801c0d6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801c0d0:	69bb      	ldr	r3, [r7, #24]
 801c0d2:	2201      	movs	r2, #1
 801c0d4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801c0d6:	69bb      	ldr	r3, [r7, #24]
 801c0d8:	899a      	ldrh	r2, [r3, #12]
 801c0da:	69bb      	ldr	r3, [r7, #24]
 801c0dc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801c0de:	69bb      	ldr	r3, [r7, #24]
 801c0e0:	895a      	ldrh	r2, [r3, #10]
 801c0e2:	69bb      	ldr	r3, [r7, #24]
 801c0e4:	899b      	ldrh	r3, [r3, #12]
 801c0e6:	429a      	cmp	r2, r3
 801c0e8:	d306      	bcc.n	801c0f8 <dhcp_bind+0x124>
 801c0ea:	69bb      	ldr	r3, [r7, #24]
 801c0ec:	899b      	ldrh	r3, [r3, #12]
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d002      	beq.n	801c0f8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801c0f2:	69bb      	ldr	r3, [r7, #24]
 801c0f4:	2200      	movs	r2, #0
 801c0f6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801c0f8:	69bb      	ldr	r3, [r7, #24]
 801c0fa:	79db      	ldrb	r3, [r3, #7]
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d003      	beq.n	801c108 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801c100:	69bb      	ldr	r3, [r7, #24]
 801c102:	6a1b      	ldr	r3, [r3, #32]
 801c104:	613b      	str	r3, [r7, #16]
 801c106:	e014      	b.n	801c132 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801c108:	69bb      	ldr	r3, [r7, #24]
 801c10a:	331c      	adds	r3, #28
 801c10c:	781b      	ldrb	r3, [r3, #0]
 801c10e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801c110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c114:	2b00      	cmp	r3, #0
 801c116:	db02      	blt.n	801c11e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801c118:	23ff      	movs	r3, #255	; 0xff
 801c11a:	613b      	str	r3, [r7, #16]
 801c11c:	e009      	b.n	801c132 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801c11e:	7dfb      	ldrb	r3, [r7, #23]
 801c120:	2bbf      	cmp	r3, #191	; 0xbf
 801c122:	d903      	bls.n	801c12c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801c124:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 801c128:	613b      	str	r3, [r7, #16]
 801c12a:	e002      	b.n	801c132 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801c12c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c130:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801c132:	69bb      	ldr	r3, [r7, #24]
 801c134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c136:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801c138:	68fb      	ldr	r3, [r7, #12]
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d108      	bne.n	801c150 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801c13e:	69bb      	ldr	r3, [r7, #24]
 801c140:	69da      	ldr	r2, [r3, #28]
 801c142:	693b      	ldr	r3, [r7, #16]
 801c144:	4013      	ands	r3, r2
 801c146:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c14e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 801c150:	210a      	movs	r1, #10
 801c152:	69b8      	ldr	r0, [r7, #24]
 801c154:	f000 faa0 	bl	801c698 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801c158:	69bb      	ldr	r3, [r7, #24]
 801c15a:	f103 011c 	add.w	r1, r3, #28
 801c15e:	f107 030c 	add.w	r3, r7, #12
 801c162:	f107 0210 	add.w	r2, r7, #16
 801c166:	6878      	ldr	r0, [r7, #4]
 801c168:	f7f7 fad4 	bl	8013714 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801c16c:	3720      	adds	r7, #32
 801c16e:	46bd      	mov	sp, r7
 801c170:	bd80      	pop	{r7, pc}
 801c172:	bf00      	nop
 801c174:	080263ac 	.word	0x080263ac
 801c178:	0802650c 	.word	0x0802650c
 801c17c:	0802640c 	.word	0x0802640c
 801c180:	08026528 	.word	0x08026528
 801c184:	88888889 	.word	0x88888889

0801c188 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b08a      	sub	sp, #40	; 0x28
 801c18c:	af02      	add	r7, sp, #8
 801c18e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c190:	687b      	ldr	r3, [r7, #4]
 801c192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c194:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801c196:	2105      	movs	r1, #5
 801c198:	69b8      	ldr	r0, [r7, #24]
 801c19a:	f000 fa7d 	bl	801c698 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c19e:	f107 030c 	add.w	r3, r7, #12
 801c1a2:	2203      	movs	r2, #3
 801c1a4:	69b9      	ldr	r1, [r7, #24]
 801c1a6:	6878      	ldr	r0, [r7, #4]
 801c1a8:	f000 ff02 	bl	801cfb0 <dhcp_create_msg>
 801c1ac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c1ae:	697b      	ldr	r3, [r7, #20]
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d04e      	beq.n	801c252 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c1b4:	697b      	ldr	r3, [r7, #20]
 801c1b6:	685b      	ldr	r3, [r3, #4]
 801c1b8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c1ba:	89b8      	ldrh	r0, [r7, #12]
 801c1bc:	693b      	ldr	r3, [r7, #16]
 801c1be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c1c2:	2302      	movs	r3, #2
 801c1c4:	2239      	movs	r2, #57	; 0x39
 801c1c6:	f000 fa81 	bl	801c6cc <dhcp_option>
 801c1ca:	4603      	mov	r3, r0
 801c1cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c1ce:	89b8      	ldrh	r0, [r7, #12]
 801c1d0:	693b      	ldr	r3, [r7, #16]
 801c1d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c1da:	461a      	mov	r2, r3
 801c1dc:	f000 fad0 	bl	801c780 <dhcp_option_short>
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c1e4:	89b8      	ldrh	r0, [r7, #12]
 801c1e6:	693b      	ldr	r3, [r7, #16]
 801c1e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c1ec:	2303      	movs	r3, #3
 801c1ee:	2237      	movs	r2, #55	; 0x37
 801c1f0:	f000 fa6c 	bl	801c6cc <dhcp_option>
 801c1f4:	4603      	mov	r3, r0
 801c1f6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	77bb      	strb	r3, [r7, #30]
 801c1fc:	e00e      	b.n	801c21c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c1fe:	89b8      	ldrh	r0, [r7, #12]
 801c200:	693b      	ldr	r3, [r7, #16]
 801c202:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c206:	7fbb      	ldrb	r3, [r7, #30]
 801c208:	4a2a      	ldr	r2, [pc, #168]	; (801c2b4 <dhcp_renew+0x12c>)
 801c20a:	5cd3      	ldrb	r3, [r2, r3]
 801c20c:	461a      	mov	r2, r3
 801c20e:	f000 fa91 	bl	801c734 <dhcp_option_byte>
 801c212:	4603      	mov	r3, r0
 801c214:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c216:	7fbb      	ldrb	r3, [r7, #30]
 801c218:	3301      	adds	r3, #1
 801c21a:	77bb      	strb	r3, [r7, #30]
 801c21c:	7fbb      	ldrb	r3, [r7, #30]
 801c21e:	2b02      	cmp	r3, #2
 801c220:	d9ed      	bls.n	801c1fe <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c222:	89b8      	ldrh	r0, [r7, #12]
 801c224:	693b      	ldr	r3, [r7, #16]
 801c226:	33f0      	adds	r3, #240	; 0xf0
 801c228:	697a      	ldr	r2, [r7, #20]
 801c22a:	4619      	mov	r1, r3
 801c22c:	f000 ff96 	bl	801d15c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c230:	4b21      	ldr	r3, [pc, #132]	; (801c2b8 <dhcp_renew+0x130>)
 801c232:	6818      	ldr	r0, [r3, #0]
 801c234:	69bb      	ldr	r3, [r7, #24]
 801c236:	f103 0218 	add.w	r2, r3, #24
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	9300      	str	r3, [sp, #0]
 801c23e:	2343      	movs	r3, #67	; 0x43
 801c240:	6979      	ldr	r1, [r7, #20]
 801c242:	f7fe fe3b 	bl	801aebc <udp_sendto_if>
 801c246:	4603      	mov	r3, r0
 801c248:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c24a:	6978      	ldr	r0, [r7, #20]
 801c24c:	f7f7 ff70 	bl	8014130 <pbuf_free>
 801c250:	e001      	b.n	801c256 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c252:	23ff      	movs	r3, #255	; 0xff
 801c254:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c256:	69bb      	ldr	r3, [r7, #24]
 801c258:	799b      	ldrb	r3, [r3, #6]
 801c25a:	2bff      	cmp	r3, #255	; 0xff
 801c25c:	d005      	beq.n	801c26a <dhcp_renew+0xe2>
    dhcp->tries++;
 801c25e:	69bb      	ldr	r3, [r7, #24]
 801c260:	799b      	ldrb	r3, [r3, #6]
 801c262:	3301      	adds	r3, #1
 801c264:	b2da      	uxtb	r2, r3
 801c266:	69bb      	ldr	r3, [r7, #24]
 801c268:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801c26a:	69bb      	ldr	r3, [r7, #24]
 801c26c:	799b      	ldrb	r3, [r3, #6]
 801c26e:	2b09      	cmp	r3, #9
 801c270:	d80a      	bhi.n	801c288 <dhcp_renew+0x100>
 801c272:	69bb      	ldr	r3, [r7, #24]
 801c274:	799b      	ldrb	r3, [r3, #6]
 801c276:	b29b      	uxth	r3, r3
 801c278:	461a      	mov	r2, r3
 801c27a:	0152      	lsls	r2, r2, #5
 801c27c:	1ad2      	subs	r2, r2, r3
 801c27e:	0092      	lsls	r2, r2, #2
 801c280:	4413      	add	r3, r2
 801c282:	011b      	lsls	r3, r3, #4
 801c284:	b29b      	uxth	r3, r3
 801c286:	e001      	b.n	801c28c <dhcp_renew+0x104>
 801c288:	f644 6320 	movw	r3, #20000	; 0x4e20
 801c28c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c28e:	89fb      	ldrh	r3, [r7, #14]
 801c290:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c294:	4a09      	ldr	r2, [pc, #36]	; (801c2bc <dhcp_renew+0x134>)
 801c296:	fb82 1203 	smull	r1, r2, r2, r3
 801c29a:	1152      	asrs	r2, r2, #5
 801c29c:	17db      	asrs	r3, r3, #31
 801c29e:	1ad3      	subs	r3, r2, r3
 801c2a0:	b29a      	uxth	r2, r3
 801c2a2:	69bb      	ldr	r3, [r7, #24]
 801c2a4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c2a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c2aa:	4618      	mov	r0, r3
 801c2ac:	3720      	adds	r7, #32
 801c2ae:	46bd      	mov	sp, r7
 801c2b0:	bd80      	pop	{r7, pc}
 801c2b2:	bf00      	nop
 801c2b4:	20000030 	.word	0x20000030
 801c2b8:	20012358 	.word	0x20012358
 801c2bc:	10624dd3 	.word	0x10624dd3

0801c2c0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801c2c0:	b580      	push	{r7, lr}
 801c2c2:	b08a      	sub	sp, #40	; 0x28
 801c2c4:	af02      	add	r7, sp, #8
 801c2c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c2c8:	687b      	ldr	r3, [r7, #4]
 801c2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2cc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801c2ce:	2104      	movs	r1, #4
 801c2d0:	69b8      	ldr	r0, [r7, #24]
 801c2d2:	f000 f9e1 	bl	801c698 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c2d6:	f107 030c 	add.w	r3, r7, #12
 801c2da:	2203      	movs	r2, #3
 801c2dc:	69b9      	ldr	r1, [r7, #24]
 801c2de:	6878      	ldr	r0, [r7, #4]
 801c2e0:	f000 fe66 	bl	801cfb0 <dhcp_create_msg>
 801c2e4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c2e6:	697b      	ldr	r3, [r7, #20]
 801c2e8:	2b00      	cmp	r3, #0
 801c2ea:	d04c      	beq.n	801c386 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c2ec:	697b      	ldr	r3, [r7, #20]
 801c2ee:	685b      	ldr	r3, [r3, #4]
 801c2f0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c2f2:	89b8      	ldrh	r0, [r7, #12]
 801c2f4:	693b      	ldr	r3, [r7, #16]
 801c2f6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c2fa:	2302      	movs	r3, #2
 801c2fc:	2239      	movs	r2, #57	; 0x39
 801c2fe:	f000 f9e5 	bl	801c6cc <dhcp_option>
 801c302:	4603      	mov	r3, r0
 801c304:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801c306:	89b8      	ldrh	r0, [r7, #12]
 801c308:	693b      	ldr	r3, [r7, #16]
 801c30a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c30e:	687b      	ldr	r3, [r7, #4]
 801c310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801c312:	461a      	mov	r2, r3
 801c314:	f000 fa34 	bl	801c780 <dhcp_option_short>
 801c318:	4603      	mov	r3, r0
 801c31a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c31c:	89b8      	ldrh	r0, [r7, #12]
 801c31e:	693b      	ldr	r3, [r7, #16]
 801c320:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c324:	2303      	movs	r3, #3
 801c326:	2237      	movs	r2, #55	; 0x37
 801c328:	f000 f9d0 	bl	801c6cc <dhcp_option>
 801c32c:	4603      	mov	r3, r0
 801c32e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c330:	2300      	movs	r3, #0
 801c332:	77bb      	strb	r3, [r7, #30]
 801c334:	e00e      	b.n	801c354 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c336:	89b8      	ldrh	r0, [r7, #12]
 801c338:	693b      	ldr	r3, [r7, #16]
 801c33a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c33e:	7fbb      	ldrb	r3, [r7, #30]
 801c340:	4a29      	ldr	r2, [pc, #164]	; (801c3e8 <dhcp_rebind+0x128>)
 801c342:	5cd3      	ldrb	r3, [r2, r3]
 801c344:	461a      	mov	r2, r3
 801c346:	f000 f9f5 	bl	801c734 <dhcp_option_byte>
 801c34a:	4603      	mov	r3, r0
 801c34c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c34e:	7fbb      	ldrb	r3, [r7, #30]
 801c350:	3301      	adds	r3, #1
 801c352:	77bb      	strb	r3, [r7, #30]
 801c354:	7fbb      	ldrb	r3, [r7, #30]
 801c356:	2b02      	cmp	r3, #2
 801c358:	d9ed      	bls.n	801c336 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c35a:	89b8      	ldrh	r0, [r7, #12]
 801c35c:	693b      	ldr	r3, [r7, #16]
 801c35e:	33f0      	adds	r3, #240	; 0xf0
 801c360:	697a      	ldr	r2, [r7, #20]
 801c362:	4619      	mov	r1, r3
 801c364:	f000 fefa 	bl	801d15c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c368:	4b20      	ldr	r3, [pc, #128]	; (801c3ec <dhcp_rebind+0x12c>)
 801c36a:	6818      	ldr	r0, [r3, #0]
 801c36c:	687b      	ldr	r3, [r7, #4]
 801c36e:	9300      	str	r3, [sp, #0]
 801c370:	2343      	movs	r3, #67	; 0x43
 801c372:	4a1f      	ldr	r2, [pc, #124]	; (801c3f0 <dhcp_rebind+0x130>)
 801c374:	6979      	ldr	r1, [r7, #20]
 801c376:	f7fe fda1 	bl	801aebc <udp_sendto_if>
 801c37a:	4603      	mov	r3, r0
 801c37c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c37e:	6978      	ldr	r0, [r7, #20]
 801c380:	f7f7 fed6 	bl	8014130 <pbuf_free>
 801c384:	e001      	b.n	801c38a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c386:	23ff      	movs	r3, #255	; 0xff
 801c388:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c38a:	69bb      	ldr	r3, [r7, #24]
 801c38c:	799b      	ldrb	r3, [r3, #6]
 801c38e:	2bff      	cmp	r3, #255	; 0xff
 801c390:	d005      	beq.n	801c39e <dhcp_rebind+0xde>
    dhcp->tries++;
 801c392:	69bb      	ldr	r3, [r7, #24]
 801c394:	799b      	ldrb	r3, [r3, #6]
 801c396:	3301      	adds	r3, #1
 801c398:	b2da      	uxtb	r2, r3
 801c39a:	69bb      	ldr	r3, [r7, #24]
 801c39c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c39e:	69bb      	ldr	r3, [r7, #24]
 801c3a0:	799b      	ldrb	r3, [r3, #6]
 801c3a2:	2b09      	cmp	r3, #9
 801c3a4:	d80a      	bhi.n	801c3bc <dhcp_rebind+0xfc>
 801c3a6:	69bb      	ldr	r3, [r7, #24]
 801c3a8:	799b      	ldrb	r3, [r3, #6]
 801c3aa:	b29b      	uxth	r3, r3
 801c3ac:	461a      	mov	r2, r3
 801c3ae:	0152      	lsls	r2, r2, #5
 801c3b0:	1ad2      	subs	r2, r2, r3
 801c3b2:	0092      	lsls	r2, r2, #2
 801c3b4:	4413      	add	r3, r2
 801c3b6:	00db      	lsls	r3, r3, #3
 801c3b8:	b29b      	uxth	r3, r3
 801c3ba:	e001      	b.n	801c3c0 <dhcp_rebind+0x100>
 801c3bc:	f242 7310 	movw	r3, #10000	; 0x2710
 801c3c0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c3c2:	89fb      	ldrh	r3, [r7, #14]
 801c3c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c3c8:	4a0a      	ldr	r2, [pc, #40]	; (801c3f4 <dhcp_rebind+0x134>)
 801c3ca:	fb82 1203 	smull	r1, r2, r2, r3
 801c3ce:	1152      	asrs	r2, r2, #5
 801c3d0:	17db      	asrs	r3, r3, #31
 801c3d2:	1ad3      	subs	r3, r2, r3
 801c3d4:	b29a      	uxth	r2, r3
 801c3d6:	69bb      	ldr	r3, [r7, #24]
 801c3d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c3da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c3de:	4618      	mov	r0, r3
 801c3e0:	3720      	adds	r7, #32
 801c3e2:	46bd      	mov	sp, r7
 801c3e4:	bd80      	pop	{r7, pc}
 801c3e6:	bf00      	nop
 801c3e8:	20000030 	.word	0x20000030
 801c3ec:	20012358 	.word	0x20012358
 801c3f0:	08027074 	.word	0x08027074
 801c3f4:	10624dd3 	.word	0x10624dd3

0801c3f8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 801c3f8:	b5b0      	push	{r4, r5, r7, lr}
 801c3fa:	b08a      	sub	sp, #40	; 0x28
 801c3fc:	af02      	add	r7, sp, #8
 801c3fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c404:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801c406:	2103      	movs	r1, #3
 801c408:	69b8      	ldr	r0, [r7, #24]
 801c40a:	f000 f945 	bl	801c698 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801c40e:	f107 030c 	add.w	r3, r7, #12
 801c412:	2203      	movs	r2, #3
 801c414:	69b9      	ldr	r1, [r7, #24]
 801c416:	6878      	ldr	r0, [r7, #4]
 801c418:	f000 fdca 	bl	801cfb0 <dhcp_create_msg>
 801c41c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801c41e:	697b      	ldr	r3, [r7, #20]
 801c420:	2b00      	cmp	r3, #0
 801c422:	d066      	beq.n	801c4f2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c424:	697b      	ldr	r3, [r7, #20]
 801c426:	685b      	ldr	r3, [r3, #4]
 801c428:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801c42a:	89b8      	ldrh	r0, [r7, #12]
 801c42c:	693b      	ldr	r3, [r7, #16]
 801c42e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c432:	2302      	movs	r3, #2
 801c434:	2239      	movs	r2, #57	; 0x39
 801c436:	f000 f949 	bl	801c6cc <dhcp_option>
 801c43a:	4603      	mov	r3, r0
 801c43c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801c43e:	89b8      	ldrh	r0, [r7, #12]
 801c440:	693b      	ldr	r3, [r7, #16]
 801c442:	33f0      	adds	r3, #240	; 0xf0
 801c444:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c448:	4619      	mov	r1, r3
 801c44a:	f000 f999 	bl	801c780 <dhcp_option_short>
 801c44e:	4603      	mov	r3, r0
 801c450:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801c452:	89b8      	ldrh	r0, [r7, #12]
 801c454:	693b      	ldr	r3, [r7, #16]
 801c456:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c45a:	2304      	movs	r3, #4
 801c45c:	2232      	movs	r2, #50	; 0x32
 801c45e:	f000 f935 	bl	801c6cc <dhcp_option>
 801c462:	4603      	mov	r3, r0
 801c464:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801c466:	89bc      	ldrh	r4, [r7, #12]
 801c468:	693b      	ldr	r3, [r7, #16]
 801c46a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c46e:	69bb      	ldr	r3, [r7, #24]
 801c470:	69db      	ldr	r3, [r3, #28]
 801c472:	4618      	mov	r0, r3
 801c474:	f7f6 fa73 	bl	801295e <lwip_htonl>
 801c478:	4603      	mov	r3, r0
 801c47a:	461a      	mov	r2, r3
 801c47c:	4629      	mov	r1, r5
 801c47e:	4620      	mov	r0, r4
 801c480:	f000 f9b0 	bl	801c7e4 <dhcp_option_long>
 801c484:	4603      	mov	r3, r0
 801c486:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801c488:	89b8      	ldrh	r0, [r7, #12]
 801c48a:	693b      	ldr	r3, [r7, #16]
 801c48c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c490:	2303      	movs	r3, #3
 801c492:	2237      	movs	r2, #55	; 0x37
 801c494:	f000 f91a 	bl	801c6cc <dhcp_option>
 801c498:	4603      	mov	r3, r0
 801c49a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c49c:	2300      	movs	r3, #0
 801c49e:	77bb      	strb	r3, [r7, #30]
 801c4a0:	e00e      	b.n	801c4c0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801c4a2:	89b8      	ldrh	r0, [r7, #12]
 801c4a4:	693b      	ldr	r3, [r7, #16]
 801c4a6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c4aa:	7fbb      	ldrb	r3, [r7, #30]
 801c4ac:	4a29      	ldr	r2, [pc, #164]	; (801c554 <dhcp_reboot+0x15c>)
 801c4ae:	5cd3      	ldrb	r3, [r2, r3]
 801c4b0:	461a      	mov	r2, r3
 801c4b2:	f000 f93f 	bl	801c734 <dhcp_option_byte>
 801c4b6:	4603      	mov	r3, r0
 801c4b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801c4ba:	7fbb      	ldrb	r3, [r7, #30]
 801c4bc:	3301      	adds	r3, #1
 801c4be:	77bb      	strb	r3, [r7, #30]
 801c4c0:	7fbb      	ldrb	r3, [r7, #30]
 801c4c2:	2b02      	cmp	r3, #2
 801c4c4:	d9ed      	bls.n	801c4a2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c4c6:	89b8      	ldrh	r0, [r7, #12]
 801c4c8:	693b      	ldr	r3, [r7, #16]
 801c4ca:	33f0      	adds	r3, #240	; 0xf0
 801c4cc:	697a      	ldr	r2, [r7, #20]
 801c4ce:	4619      	mov	r1, r3
 801c4d0:	f000 fe44 	bl	801d15c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c4d4:	4b20      	ldr	r3, [pc, #128]	; (801c558 <dhcp_reboot+0x160>)
 801c4d6:	6818      	ldr	r0, [r3, #0]
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	9300      	str	r3, [sp, #0]
 801c4dc:	2343      	movs	r3, #67	; 0x43
 801c4de:	4a1f      	ldr	r2, [pc, #124]	; (801c55c <dhcp_reboot+0x164>)
 801c4e0:	6979      	ldr	r1, [r7, #20]
 801c4e2:	f7fe fceb 	bl	801aebc <udp_sendto_if>
 801c4e6:	4603      	mov	r3, r0
 801c4e8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801c4ea:	6978      	ldr	r0, [r7, #20]
 801c4ec:	f7f7 fe20 	bl	8014130 <pbuf_free>
 801c4f0:	e001      	b.n	801c4f6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801c4f2:	23ff      	movs	r3, #255	; 0xff
 801c4f4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801c4f6:	69bb      	ldr	r3, [r7, #24]
 801c4f8:	799b      	ldrb	r3, [r3, #6]
 801c4fa:	2bff      	cmp	r3, #255	; 0xff
 801c4fc:	d005      	beq.n	801c50a <dhcp_reboot+0x112>
    dhcp->tries++;
 801c4fe:	69bb      	ldr	r3, [r7, #24]
 801c500:	799b      	ldrb	r3, [r3, #6]
 801c502:	3301      	adds	r3, #1
 801c504:	b2da      	uxtb	r2, r3
 801c506:	69bb      	ldr	r3, [r7, #24]
 801c508:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801c50a:	69bb      	ldr	r3, [r7, #24]
 801c50c:	799b      	ldrb	r3, [r3, #6]
 801c50e:	2b09      	cmp	r3, #9
 801c510:	d80a      	bhi.n	801c528 <dhcp_reboot+0x130>
 801c512:	69bb      	ldr	r3, [r7, #24]
 801c514:	799b      	ldrb	r3, [r3, #6]
 801c516:	b29b      	uxth	r3, r3
 801c518:	461a      	mov	r2, r3
 801c51a:	0152      	lsls	r2, r2, #5
 801c51c:	1ad2      	subs	r2, r2, r3
 801c51e:	0092      	lsls	r2, r2, #2
 801c520:	4413      	add	r3, r2
 801c522:	00db      	lsls	r3, r3, #3
 801c524:	b29b      	uxth	r3, r3
 801c526:	e001      	b.n	801c52c <dhcp_reboot+0x134>
 801c528:	f242 7310 	movw	r3, #10000	; 0x2710
 801c52c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801c52e:	89fb      	ldrh	r3, [r7, #14]
 801c530:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801c534:	4a0a      	ldr	r2, [pc, #40]	; (801c560 <dhcp_reboot+0x168>)
 801c536:	fb82 1203 	smull	r1, r2, r2, r3
 801c53a:	1152      	asrs	r2, r2, #5
 801c53c:	17db      	asrs	r3, r3, #31
 801c53e:	1ad3      	subs	r3, r2, r3
 801c540:	b29a      	uxth	r2, r3
 801c542:	69bb      	ldr	r3, [r7, #24]
 801c544:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801c546:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	3720      	adds	r7, #32
 801c54e:	46bd      	mov	sp, r7
 801c550:	bdb0      	pop	{r4, r5, r7, pc}
 801c552:	bf00      	nop
 801c554:	20000030 	.word	0x20000030
 801c558:	20012358 	.word	0x20012358
 801c55c:	08027074 	.word	0x08027074
 801c560:	10624dd3 	.word	0x10624dd3

0801c564 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801c564:	b5b0      	push	{r4, r5, r7, lr}
 801c566:	b08a      	sub	sp, #40	; 0x28
 801c568:	af02      	add	r7, sp, #8
 801c56a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801c56c:	687b      	ldr	r3, [r7, #4]
 801c56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c570:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801c572:	69fb      	ldr	r3, [r7, #28]
 801c574:	2b00      	cmp	r3, #0
 801c576:	f000 8084 	beq.w	801c682 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801c57a:	69fb      	ldr	r3, [r7, #28]
 801c57c:	795b      	ldrb	r3, [r3, #5]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	f000 8081 	beq.w	801c686 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801c584:	69fb      	ldr	r3, [r7, #28]
 801c586:	699b      	ldr	r3, [r3, #24]
 801c588:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801c58a:	69fb      	ldr	r3, [r7, #28]
 801c58c:	2200      	movs	r2, #0
 801c58e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801c590:	69fb      	ldr	r3, [r7, #28]
 801c592:	2200      	movs	r2, #0
 801c594:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801c596:	69fb      	ldr	r3, [r7, #28]
 801c598:	2200      	movs	r2, #0
 801c59a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801c59c:	69fb      	ldr	r3, [r7, #28]
 801c59e:	2200      	movs	r2, #0
 801c5a0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801c5a2:	69fb      	ldr	r3, [r7, #28]
 801c5a4:	2200      	movs	r2, #0
 801c5a6:	631a      	str	r2, [r3, #48]	; 0x30
 801c5a8:	69fb      	ldr	r3, [r7, #28]
 801c5aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c5ac:	69fb      	ldr	r3, [r7, #28]
 801c5ae:	62da      	str	r2, [r3, #44]	; 0x2c
 801c5b0:	69fb      	ldr	r3, [r7, #28]
 801c5b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c5b4:	69fb      	ldr	r3, [r7, #28]
 801c5b6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801c5b8:	69fb      	ldr	r3, [r7, #28]
 801c5ba:	2200      	movs	r2, #0
 801c5bc:	829a      	strh	r2, [r3, #20]
 801c5be:	69fb      	ldr	r3, [r7, #28]
 801c5c0:	8a9a      	ldrh	r2, [r3, #20]
 801c5c2:	69fb      	ldr	r3, [r7, #28]
 801c5c4:	825a      	strh	r2, [r3, #18]
 801c5c6:	69fb      	ldr	r3, [r7, #28]
 801c5c8:	8a5a      	ldrh	r2, [r3, #18]
 801c5ca:	69fb      	ldr	r3, [r7, #28]
 801c5cc:	821a      	strh	r2, [r3, #16]
 801c5ce:	69fb      	ldr	r3, [r7, #28]
 801c5d0:	8a1a      	ldrh	r2, [r3, #16]
 801c5d2:	69fb      	ldr	r3, [r7, #28]
 801c5d4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801c5d6:	6878      	ldr	r0, [r7, #4]
 801c5d8:	f000 fdee 	bl	801d1b8 <dhcp_supplied_address>
 801c5dc:	4603      	mov	r3, r0
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d03b      	beq.n	801c65a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801c5e2:	f107 030e 	add.w	r3, r7, #14
 801c5e6:	2207      	movs	r2, #7
 801c5e8:	69f9      	ldr	r1, [r7, #28]
 801c5ea:	6878      	ldr	r0, [r7, #4]
 801c5ec:	f000 fce0 	bl	801cfb0 <dhcp_create_msg>
 801c5f0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801c5f2:	69bb      	ldr	r3, [r7, #24]
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d030      	beq.n	801c65a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801c5f8:	69bb      	ldr	r3, [r7, #24]
 801c5fa:	685b      	ldr	r3, [r3, #4]
 801c5fc:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801c5fe:	89f8      	ldrh	r0, [r7, #14]
 801c600:	697b      	ldr	r3, [r7, #20]
 801c602:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801c606:	2304      	movs	r3, #4
 801c608:	2236      	movs	r2, #54	; 0x36
 801c60a:	f000 f85f 	bl	801c6cc <dhcp_option>
 801c60e:	4603      	mov	r3, r0
 801c610:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801c612:	89fc      	ldrh	r4, [r7, #14]
 801c614:	697b      	ldr	r3, [r7, #20]
 801c616:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801c61a:	693b      	ldr	r3, [r7, #16]
 801c61c:	4618      	mov	r0, r3
 801c61e:	f7f6 f99e 	bl	801295e <lwip_htonl>
 801c622:	4603      	mov	r3, r0
 801c624:	461a      	mov	r2, r3
 801c626:	4629      	mov	r1, r5
 801c628:	4620      	mov	r0, r4
 801c62a:	f000 f8db 	bl	801c7e4 <dhcp_option_long>
 801c62e:	4603      	mov	r3, r0
 801c630:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801c632:	89f8      	ldrh	r0, [r7, #14]
 801c634:	697b      	ldr	r3, [r7, #20]
 801c636:	33f0      	adds	r3, #240	; 0xf0
 801c638:	69ba      	ldr	r2, [r7, #24]
 801c63a:	4619      	mov	r1, r3
 801c63c:	f000 fd8e 	bl	801d15c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801c640:	4b13      	ldr	r3, [pc, #76]	; (801c690 <dhcp_release_and_stop+0x12c>)
 801c642:	6818      	ldr	r0, [r3, #0]
 801c644:	f107 0210 	add.w	r2, r7, #16
 801c648:	687b      	ldr	r3, [r7, #4]
 801c64a:	9300      	str	r3, [sp, #0]
 801c64c:	2343      	movs	r3, #67	; 0x43
 801c64e:	69b9      	ldr	r1, [r7, #24]
 801c650:	f7fe fc34 	bl	801aebc <udp_sendto_if>
      pbuf_free(p_out);
 801c654:	69b8      	ldr	r0, [r7, #24]
 801c656:	f7f7 fd6b 	bl	8014130 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801c65a:	4b0e      	ldr	r3, [pc, #56]	; (801c694 <dhcp_release_and_stop+0x130>)
 801c65c:	4a0d      	ldr	r2, [pc, #52]	; (801c694 <dhcp_release_and_stop+0x130>)
 801c65e:	490d      	ldr	r1, [pc, #52]	; (801c694 <dhcp_release_and_stop+0x130>)
 801c660:	6878      	ldr	r0, [r7, #4]
 801c662:	f7f7 f857 	bl	8013714 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801c666:	2100      	movs	r1, #0
 801c668:	69f8      	ldr	r0, [r7, #28]
 801c66a:	f000 f815 	bl	801c698 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801c66e:	69fb      	ldr	r3, [r7, #28]
 801c670:	791b      	ldrb	r3, [r3, #4]
 801c672:	2b00      	cmp	r3, #0
 801c674:	d008      	beq.n	801c688 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801c676:	f7fe ff85 	bl	801b584 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801c67a:	69fb      	ldr	r3, [r7, #28]
 801c67c:	2200      	movs	r2, #0
 801c67e:	711a      	strb	r2, [r3, #4]
 801c680:	e002      	b.n	801c688 <dhcp_release_and_stop+0x124>
    return;
 801c682:	bf00      	nop
 801c684:	e000      	b.n	801c688 <dhcp_release_and_stop+0x124>
    return;
 801c686:	bf00      	nop
  }
}
 801c688:	3720      	adds	r7, #32
 801c68a:	46bd      	mov	sp, r7
 801c68c:	bdb0      	pop	{r4, r5, r7, pc}
 801c68e:	bf00      	nop
 801c690:	20012358 	.word	0x20012358
 801c694:	08027070 	.word	0x08027070

0801c698 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801c698:	b480      	push	{r7}
 801c69a:	b083      	sub	sp, #12
 801c69c:	af00      	add	r7, sp, #0
 801c69e:	6078      	str	r0, [r7, #4]
 801c6a0:	460b      	mov	r3, r1
 801c6a2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	795b      	ldrb	r3, [r3, #5]
 801c6a8:	78fa      	ldrb	r2, [r7, #3]
 801c6aa:	429a      	cmp	r2, r3
 801c6ac:	d008      	beq.n	801c6c0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	78fa      	ldrb	r2, [r7, #3]
 801c6b2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	2200      	movs	r2, #0
 801c6b8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	2200      	movs	r2, #0
 801c6be:	811a      	strh	r2, [r3, #8]
  }
}
 801c6c0:	bf00      	nop
 801c6c2:	370c      	adds	r7, #12
 801c6c4:	46bd      	mov	sp, r7
 801c6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6ca:	4770      	bx	lr

0801c6cc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801c6cc:	b580      	push	{r7, lr}
 801c6ce:	b082      	sub	sp, #8
 801c6d0:	af00      	add	r7, sp, #0
 801c6d2:	6039      	str	r1, [r7, #0]
 801c6d4:	4611      	mov	r1, r2
 801c6d6:	461a      	mov	r2, r3
 801c6d8:	4603      	mov	r3, r0
 801c6da:	80fb      	strh	r3, [r7, #6]
 801c6dc:	460b      	mov	r3, r1
 801c6de:	717b      	strb	r3, [r7, #5]
 801c6e0:	4613      	mov	r3, r2
 801c6e2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801c6e4:	88fa      	ldrh	r2, [r7, #6]
 801c6e6:	793b      	ldrb	r3, [r7, #4]
 801c6e8:	4413      	add	r3, r2
 801c6ea:	3302      	adds	r3, #2
 801c6ec:	2b44      	cmp	r3, #68	; 0x44
 801c6ee:	d906      	bls.n	801c6fe <dhcp_option+0x32>
 801c6f0:	4b0d      	ldr	r3, [pc, #52]	; (801c728 <dhcp_option+0x5c>)
 801c6f2:	f240 529a 	movw	r2, #1434	; 0x59a
 801c6f6:	490d      	ldr	r1, [pc, #52]	; (801c72c <dhcp_option+0x60>)
 801c6f8:	480d      	ldr	r0, [pc, #52]	; (801c730 <dhcp_option+0x64>)
 801c6fa:	f004 fe5d 	bl	80213b8 <iprintf>
  options[options_out_len++] = option_type;
 801c6fe:	88fb      	ldrh	r3, [r7, #6]
 801c700:	1c5a      	adds	r2, r3, #1
 801c702:	80fa      	strh	r2, [r7, #6]
 801c704:	461a      	mov	r2, r3
 801c706:	683b      	ldr	r3, [r7, #0]
 801c708:	4413      	add	r3, r2
 801c70a:	797a      	ldrb	r2, [r7, #5]
 801c70c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801c70e:	88fb      	ldrh	r3, [r7, #6]
 801c710:	1c5a      	adds	r2, r3, #1
 801c712:	80fa      	strh	r2, [r7, #6]
 801c714:	461a      	mov	r2, r3
 801c716:	683b      	ldr	r3, [r7, #0]
 801c718:	4413      	add	r3, r2
 801c71a:	793a      	ldrb	r2, [r7, #4]
 801c71c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c71e:	88fb      	ldrh	r3, [r7, #6]
}
 801c720:	4618      	mov	r0, r3
 801c722:	3708      	adds	r7, #8
 801c724:	46bd      	mov	sp, r7
 801c726:	bd80      	pop	{r7, pc}
 801c728:	080263ac 	.word	0x080263ac
 801c72c:	08026540 	.word	0x08026540
 801c730:	0802640c 	.word	0x0802640c

0801c734 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801c734:	b580      	push	{r7, lr}
 801c736:	b082      	sub	sp, #8
 801c738:	af00      	add	r7, sp, #0
 801c73a:	4603      	mov	r3, r0
 801c73c:	6039      	str	r1, [r7, #0]
 801c73e:	80fb      	strh	r3, [r7, #6]
 801c740:	4613      	mov	r3, r2
 801c742:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801c744:	88fb      	ldrh	r3, [r7, #6]
 801c746:	2b43      	cmp	r3, #67	; 0x43
 801c748:	d906      	bls.n	801c758 <dhcp_option_byte+0x24>
 801c74a:	4b0a      	ldr	r3, [pc, #40]	; (801c774 <dhcp_option_byte+0x40>)
 801c74c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801c750:	4909      	ldr	r1, [pc, #36]	; (801c778 <dhcp_option_byte+0x44>)
 801c752:	480a      	ldr	r0, [pc, #40]	; (801c77c <dhcp_option_byte+0x48>)
 801c754:	f004 fe30 	bl	80213b8 <iprintf>
  options[options_out_len++] = value;
 801c758:	88fb      	ldrh	r3, [r7, #6]
 801c75a:	1c5a      	adds	r2, r3, #1
 801c75c:	80fa      	strh	r2, [r7, #6]
 801c75e:	461a      	mov	r2, r3
 801c760:	683b      	ldr	r3, [r7, #0]
 801c762:	4413      	add	r3, r2
 801c764:	797a      	ldrb	r2, [r7, #5]
 801c766:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c768:	88fb      	ldrh	r3, [r7, #6]
}
 801c76a:	4618      	mov	r0, r3
 801c76c:	3708      	adds	r7, #8
 801c76e:	46bd      	mov	sp, r7
 801c770:	bd80      	pop	{r7, pc}
 801c772:	bf00      	nop
 801c774:	080263ac 	.word	0x080263ac
 801c778:	08026584 	.word	0x08026584
 801c77c:	0802640c 	.word	0x0802640c

0801c780 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801c780:	b580      	push	{r7, lr}
 801c782:	b082      	sub	sp, #8
 801c784:	af00      	add	r7, sp, #0
 801c786:	4603      	mov	r3, r0
 801c788:	6039      	str	r1, [r7, #0]
 801c78a:	80fb      	strh	r3, [r7, #6]
 801c78c:	4613      	mov	r3, r2
 801c78e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801c790:	88fb      	ldrh	r3, [r7, #6]
 801c792:	3302      	adds	r3, #2
 801c794:	2b44      	cmp	r3, #68	; 0x44
 801c796:	d906      	bls.n	801c7a6 <dhcp_option_short+0x26>
 801c798:	4b0f      	ldr	r3, [pc, #60]	; (801c7d8 <dhcp_option_short+0x58>)
 801c79a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801c79e:	490f      	ldr	r1, [pc, #60]	; (801c7dc <dhcp_option_short+0x5c>)
 801c7a0:	480f      	ldr	r0, [pc, #60]	; (801c7e0 <dhcp_option_short+0x60>)
 801c7a2:	f004 fe09 	bl	80213b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801c7a6:	88bb      	ldrh	r3, [r7, #4]
 801c7a8:	0a1b      	lsrs	r3, r3, #8
 801c7aa:	b29a      	uxth	r2, r3
 801c7ac:	88fb      	ldrh	r3, [r7, #6]
 801c7ae:	1c59      	adds	r1, r3, #1
 801c7b0:	80f9      	strh	r1, [r7, #6]
 801c7b2:	4619      	mov	r1, r3
 801c7b4:	683b      	ldr	r3, [r7, #0]
 801c7b6:	440b      	add	r3, r1
 801c7b8:	b2d2      	uxtb	r2, r2
 801c7ba:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801c7bc:	88fb      	ldrh	r3, [r7, #6]
 801c7be:	1c5a      	adds	r2, r3, #1
 801c7c0:	80fa      	strh	r2, [r7, #6]
 801c7c2:	461a      	mov	r2, r3
 801c7c4:	683b      	ldr	r3, [r7, #0]
 801c7c6:	4413      	add	r3, r2
 801c7c8:	88ba      	ldrh	r2, [r7, #4]
 801c7ca:	b2d2      	uxtb	r2, r2
 801c7cc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c7ce:	88fb      	ldrh	r3, [r7, #6]
}
 801c7d0:	4618      	mov	r0, r3
 801c7d2:	3708      	adds	r7, #8
 801c7d4:	46bd      	mov	sp, r7
 801c7d6:	bd80      	pop	{r7, pc}
 801c7d8:	080263ac 	.word	0x080263ac
 801c7dc:	080265bc 	.word	0x080265bc
 801c7e0:	0802640c 	.word	0x0802640c

0801c7e4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801c7e4:	b580      	push	{r7, lr}
 801c7e6:	b084      	sub	sp, #16
 801c7e8:	af00      	add	r7, sp, #0
 801c7ea:	4603      	mov	r3, r0
 801c7ec:	60b9      	str	r1, [r7, #8]
 801c7ee:	607a      	str	r2, [r7, #4]
 801c7f0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801c7f2:	89fb      	ldrh	r3, [r7, #14]
 801c7f4:	3304      	adds	r3, #4
 801c7f6:	2b44      	cmp	r3, #68	; 0x44
 801c7f8:	d906      	bls.n	801c808 <dhcp_option_long+0x24>
 801c7fa:	4b19      	ldr	r3, [pc, #100]	; (801c860 <dhcp_option_long+0x7c>)
 801c7fc:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801c800:	4918      	ldr	r1, [pc, #96]	; (801c864 <dhcp_option_long+0x80>)
 801c802:	4819      	ldr	r0, [pc, #100]	; (801c868 <dhcp_option_long+0x84>)
 801c804:	f004 fdd8 	bl	80213b8 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	0e1a      	lsrs	r2, r3, #24
 801c80c:	89fb      	ldrh	r3, [r7, #14]
 801c80e:	1c59      	adds	r1, r3, #1
 801c810:	81f9      	strh	r1, [r7, #14]
 801c812:	4619      	mov	r1, r3
 801c814:	68bb      	ldr	r3, [r7, #8]
 801c816:	440b      	add	r3, r1
 801c818:	b2d2      	uxtb	r2, r2
 801c81a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801c81c:	687b      	ldr	r3, [r7, #4]
 801c81e:	0c1a      	lsrs	r2, r3, #16
 801c820:	89fb      	ldrh	r3, [r7, #14]
 801c822:	1c59      	adds	r1, r3, #1
 801c824:	81f9      	strh	r1, [r7, #14]
 801c826:	4619      	mov	r1, r3
 801c828:	68bb      	ldr	r3, [r7, #8]
 801c82a:	440b      	add	r3, r1
 801c82c:	b2d2      	uxtb	r2, r2
 801c82e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	0a1a      	lsrs	r2, r3, #8
 801c834:	89fb      	ldrh	r3, [r7, #14]
 801c836:	1c59      	adds	r1, r3, #1
 801c838:	81f9      	strh	r1, [r7, #14]
 801c83a:	4619      	mov	r1, r3
 801c83c:	68bb      	ldr	r3, [r7, #8]
 801c83e:	440b      	add	r3, r1
 801c840:	b2d2      	uxtb	r2, r2
 801c842:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801c844:	89fb      	ldrh	r3, [r7, #14]
 801c846:	1c5a      	adds	r2, r3, #1
 801c848:	81fa      	strh	r2, [r7, #14]
 801c84a:	461a      	mov	r2, r3
 801c84c:	68bb      	ldr	r3, [r7, #8]
 801c84e:	4413      	add	r3, r2
 801c850:	687a      	ldr	r2, [r7, #4]
 801c852:	b2d2      	uxtb	r2, r2
 801c854:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801c856:	89fb      	ldrh	r3, [r7, #14]
}
 801c858:	4618      	mov	r0, r3
 801c85a:	3710      	adds	r7, #16
 801c85c:	46bd      	mov	sp, r7
 801c85e:	bd80      	pop	{r7, pc}
 801c860:	080263ac 	.word	0x080263ac
 801c864:	080265f8 	.word	0x080265f8
 801c868:	0802640c 	.word	0x0802640c

0801c86c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801c86c:	b580      	push	{r7, lr}
 801c86e:	b090      	sub	sp, #64	; 0x40
 801c870:	af00      	add	r7, sp, #0
 801c872:	6078      	str	r0, [r7, #4]
 801c874:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801c876:	2300      	movs	r3, #0
 801c878:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 801c87a:	2300      	movs	r3, #0
 801c87c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801c87e:	2208      	movs	r2, #8
 801c880:	2100      	movs	r1, #0
 801c882:	48b5      	ldr	r0, [pc, #724]	; (801cb58 <dhcp_parse_reply+0x2ec>)
 801c884:	f004 ffae 	bl	80217e4 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	895b      	ldrh	r3, [r3, #10]
 801c88c:	2b2b      	cmp	r3, #43	; 0x2b
 801c88e:	d802      	bhi.n	801c896 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801c890:	f06f 0301 	mvn.w	r3, #1
 801c894:	e2a7      	b.n	801cde6 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801c896:	687b      	ldr	r3, [r7, #4]
 801c898:	685b      	ldr	r3, [r3, #4]
 801c89a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801c89c:	23f0      	movs	r3, #240	; 0xf0
 801c89e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	891b      	ldrh	r3, [r3, #8]
 801c8a4:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801c8aa:	e00c      	b.n	801c8c6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8ae:	895b      	ldrh	r3, [r3, #10]
 801c8b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801c8b2:	1ad3      	subs	r3, r2, r3
 801c8b4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801c8b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8b8:	895b      	ldrh	r3, [r3, #10]
 801c8ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 801c8bc:	1ad3      	subs	r3, r2, r3
 801c8be:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 801c8c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8c2:	681b      	ldr	r3, [r3, #0]
 801c8c4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801c8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d004      	beq.n	801c8d6 <dhcp_parse_reply+0x6a>
 801c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8ce:	895b      	ldrh	r3, [r3, #10]
 801c8d0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801c8d2:	429a      	cmp	r2, r3
 801c8d4:	d2ea      	bcs.n	801c8ac <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d102      	bne.n	801c8e2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801c8dc:	f06f 0301 	mvn.w	r3, #1
 801c8e0:	e281      	b.n	801cde6 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 801c8e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801c8e4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 801c8e6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c8e8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 801c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8ec:	685b      	ldr	r3, [r3, #4]
 801c8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801c8f0:	e239      	b.n	801cd66 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 801c8f2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c8f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c8f6:	4413      	add	r3, r2
 801c8f8:	781b      	ldrb	r3, [r3, #0]
 801c8fa:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801c8fc:	2300      	movs	r3, #0
 801c8fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 801c902:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801c906:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801c908:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c90a:	3302      	adds	r3, #2
 801c90c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801c90e:	8bfa      	ldrh	r2, [r7, #30]
 801c910:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c912:	429a      	cmp	r2, r3
 801c914:	d202      	bcs.n	801c91c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801c916:	f06f 0301 	mvn.w	r3, #1
 801c91a:	e264      	b.n	801cde6 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801c91c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c91e:	3301      	adds	r3, #1
 801c920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c922:	8952      	ldrh	r2, [r2, #10]
 801c924:	4293      	cmp	r3, r2
 801c926:	da07      	bge.n	801c938 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801c928:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c92a:	3301      	adds	r3, #1
 801c92c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c92e:	4413      	add	r3, r2
 801c930:	781b      	ldrb	r3, [r3, #0]
 801c932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c936:	e00b      	b.n	801c950 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801c938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c93a:	681b      	ldr	r3, [r3, #0]
 801c93c:	2b00      	cmp	r3, #0
 801c93e:	d004      	beq.n	801c94a <dhcp_parse_reply+0xde>
 801c940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	685b      	ldr	r3, [r3, #4]
 801c946:	781b      	ldrb	r3, [r3, #0]
 801c948:	e000      	b.n	801c94c <dhcp_parse_reply+0xe0>
 801c94a:	2300      	movs	r3, #0
 801c94c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801c950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c954:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 801c958:	7dfb      	ldrb	r3, [r7, #23]
 801c95a:	2b3b      	cmp	r3, #59	; 0x3b
 801c95c:	f200 812c 	bhi.w	801cbb8 <dhcp_parse_reply+0x34c>
 801c960:	a201      	add	r2, pc, #4	; (adr r2, 801c968 <dhcp_parse_reply+0xfc>)
 801c962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c966:	bf00      	nop
 801c968:	0801ca59 	.word	0x0801ca59
 801c96c:	0801ca69 	.word	0x0801ca69
 801c970:	0801cbb9 	.word	0x0801cbb9
 801c974:	0801ca8b 	.word	0x0801ca8b
 801c978:	0801cbb9 	.word	0x0801cbb9
 801c97c:	0801cbb9 	.word	0x0801cbb9
 801c980:	0801cbb9 	.word	0x0801cbb9
 801c984:	0801cbb9 	.word	0x0801cbb9
 801c988:	0801cbb9 	.word	0x0801cbb9
 801c98c:	0801cbb9 	.word	0x0801cbb9
 801c990:	0801cbb9 	.word	0x0801cbb9
 801c994:	0801cbb9 	.word	0x0801cbb9
 801c998:	0801cbb9 	.word	0x0801cbb9
 801c99c:	0801cbb9 	.word	0x0801cbb9
 801c9a0:	0801cbb9 	.word	0x0801cbb9
 801c9a4:	0801cbb9 	.word	0x0801cbb9
 801c9a8:	0801cbb9 	.word	0x0801cbb9
 801c9ac:	0801cbb9 	.word	0x0801cbb9
 801c9b0:	0801cbb9 	.word	0x0801cbb9
 801c9b4:	0801cbb9 	.word	0x0801cbb9
 801c9b8:	0801cbb9 	.word	0x0801cbb9
 801c9bc:	0801cbb9 	.word	0x0801cbb9
 801c9c0:	0801cbb9 	.word	0x0801cbb9
 801c9c4:	0801cbb9 	.word	0x0801cbb9
 801c9c8:	0801cbb9 	.word	0x0801cbb9
 801c9cc:	0801cbb9 	.word	0x0801cbb9
 801c9d0:	0801cbb9 	.word	0x0801cbb9
 801c9d4:	0801cbb9 	.word	0x0801cbb9
 801c9d8:	0801cbb9 	.word	0x0801cbb9
 801c9dc:	0801cbb9 	.word	0x0801cbb9
 801c9e0:	0801cbb9 	.word	0x0801cbb9
 801c9e4:	0801cbb9 	.word	0x0801cbb9
 801c9e8:	0801cbb9 	.word	0x0801cbb9
 801c9ec:	0801cbb9 	.word	0x0801cbb9
 801c9f0:	0801cbb9 	.word	0x0801cbb9
 801c9f4:	0801cbb9 	.word	0x0801cbb9
 801c9f8:	0801cbb9 	.word	0x0801cbb9
 801c9fc:	0801cbb9 	.word	0x0801cbb9
 801ca00:	0801cbb9 	.word	0x0801cbb9
 801ca04:	0801cbb9 	.word	0x0801cbb9
 801ca08:	0801cbb9 	.word	0x0801cbb9
 801ca0c:	0801cbb9 	.word	0x0801cbb9
 801ca10:	0801cbb9 	.word	0x0801cbb9
 801ca14:	0801cbb9 	.word	0x0801cbb9
 801ca18:	0801cbb9 	.word	0x0801cbb9
 801ca1c:	0801cbb9 	.word	0x0801cbb9
 801ca20:	0801cbb9 	.word	0x0801cbb9
 801ca24:	0801cbb9 	.word	0x0801cbb9
 801ca28:	0801cbb9 	.word	0x0801cbb9
 801ca2c:	0801cbb9 	.word	0x0801cbb9
 801ca30:	0801cbb9 	.word	0x0801cbb9
 801ca34:	0801cab7 	.word	0x0801cab7
 801ca38:	0801cad9 	.word	0x0801cad9
 801ca3c:	0801cb15 	.word	0x0801cb15
 801ca40:	0801cb37 	.word	0x0801cb37
 801ca44:	0801cbb9 	.word	0x0801cbb9
 801ca48:	0801cbb9 	.word	0x0801cbb9
 801ca4c:	0801cbb9 	.word	0x0801cbb9
 801ca50:	0801cb75 	.word	0x0801cb75
 801ca54:	0801cb97 	.word	0x0801cb97
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801ca58:	2300      	movs	r3, #0
 801ca5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ca5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ca62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801ca66:	e0ab      	b.n	801cbc0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801ca68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ca6c:	2b04      	cmp	r3, #4
 801ca6e:	d009      	beq.n	801ca84 <dhcp_parse_reply+0x218>
 801ca70:	4b3a      	ldr	r3, [pc, #232]	; (801cb5c <dhcp_parse_reply+0x2f0>)
 801ca72:	f240 622e 	movw	r2, #1582	; 0x62e
 801ca76:	493a      	ldr	r1, [pc, #232]	; (801cb60 <dhcp_parse_reply+0x2f4>)
 801ca78:	483a      	ldr	r0, [pc, #232]	; (801cb64 <dhcp_parse_reply+0x2f8>)
 801ca7a:	f004 fc9d 	bl	80213b8 <iprintf>
 801ca7e:	f06f 0305 	mvn.w	r3, #5
 801ca82:	e1b0      	b.n	801cde6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801ca84:	2306      	movs	r3, #6
 801ca86:	623b      	str	r3, [r7, #32]
        break;
 801ca88:	e09a      	b.n	801cbc0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801ca8a:	2304      	movs	r3, #4
 801ca8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801ca90:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ca94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ca98:	429a      	cmp	r2, r3
 801ca9a:	d209      	bcs.n	801cab0 <dhcp_parse_reply+0x244>
 801ca9c:	4b2f      	ldr	r3, [pc, #188]	; (801cb5c <dhcp_parse_reply+0x2f0>)
 801ca9e:	f240 6233 	movw	r2, #1587	; 0x633
 801caa2:	4931      	ldr	r1, [pc, #196]	; (801cb68 <dhcp_parse_reply+0x2fc>)
 801caa4:	482f      	ldr	r0, [pc, #188]	; (801cb64 <dhcp_parse_reply+0x2f8>)
 801caa6:	f004 fc87 	bl	80213b8 <iprintf>
 801caaa:	f06f 0305 	mvn.w	r3, #5
 801caae:	e19a      	b.n	801cde6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801cab0:	2307      	movs	r3, #7
 801cab2:	623b      	str	r3, [r7, #32]
        break;
 801cab4:	e084      	b.n	801cbc0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801caba:	2b04      	cmp	r3, #4
 801cabc:	d009      	beq.n	801cad2 <dhcp_parse_reply+0x266>
 801cabe:	4b27      	ldr	r3, [pc, #156]	; (801cb5c <dhcp_parse_reply+0x2f0>)
 801cac0:	f240 6241 	movw	r2, #1601	; 0x641
 801cac4:	4926      	ldr	r1, [pc, #152]	; (801cb60 <dhcp_parse_reply+0x2f4>)
 801cac6:	4827      	ldr	r0, [pc, #156]	; (801cb64 <dhcp_parse_reply+0x2f8>)
 801cac8:	f004 fc76 	bl	80213b8 <iprintf>
 801cacc:	f06f 0305 	mvn.w	r3, #5
 801cad0:	e189      	b.n	801cde6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801cad2:	2303      	movs	r3, #3
 801cad4:	623b      	str	r3, [r7, #32]
        break;
 801cad6:	e073      	b.n	801cbc0 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801cad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cadc:	2b01      	cmp	r3, #1
 801cade:	d009      	beq.n	801caf4 <dhcp_parse_reply+0x288>
 801cae0:	4b1e      	ldr	r3, [pc, #120]	; (801cb5c <dhcp_parse_reply+0x2f0>)
 801cae2:	f240 624f 	movw	r2, #1615	; 0x64f
 801cae6:	4921      	ldr	r1, [pc, #132]	; (801cb6c <dhcp_parse_reply+0x300>)
 801cae8:	481e      	ldr	r0, [pc, #120]	; (801cb64 <dhcp_parse_reply+0x2f8>)
 801caea:	f004 fc65 	bl	80213b8 <iprintf>
 801caee:	f06f 0305 	mvn.w	r3, #5
 801caf2:	e178      	b.n	801cde6 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801caf4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801caf6:	2bf0      	cmp	r3, #240	; 0xf0
 801caf8:	d009      	beq.n	801cb0e <dhcp_parse_reply+0x2a2>
 801cafa:	4b18      	ldr	r3, [pc, #96]	; (801cb5c <dhcp_parse_reply+0x2f0>)
 801cafc:	f240 6251 	movw	r2, #1617	; 0x651
 801cb00:	491b      	ldr	r1, [pc, #108]	; (801cb70 <dhcp_parse_reply+0x304>)
 801cb02:	4818      	ldr	r0, [pc, #96]	; (801cb64 <dhcp_parse_reply+0x2f8>)
 801cb04:	f004 fc58 	bl	80213b8 <iprintf>
 801cb08:	f06f 0305 	mvn.w	r3, #5
 801cb0c:	e16b      	b.n	801cde6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801cb0e:	2300      	movs	r3, #0
 801cb10:	623b      	str	r3, [r7, #32]
        break;
 801cb12:	e055      	b.n	801cbc0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801cb14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb18:	2b01      	cmp	r3, #1
 801cb1a:	d009      	beq.n	801cb30 <dhcp_parse_reply+0x2c4>
 801cb1c:	4b0f      	ldr	r3, [pc, #60]	; (801cb5c <dhcp_parse_reply+0x2f0>)
 801cb1e:	f240 6255 	movw	r2, #1621	; 0x655
 801cb22:	4912      	ldr	r1, [pc, #72]	; (801cb6c <dhcp_parse_reply+0x300>)
 801cb24:	480f      	ldr	r0, [pc, #60]	; (801cb64 <dhcp_parse_reply+0x2f8>)
 801cb26:	f004 fc47 	bl	80213b8 <iprintf>
 801cb2a:	f06f 0305 	mvn.w	r3, #5
 801cb2e:	e15a      	b.n	801cde6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801cb30:	2301      	movs	r3, #1
 801cb32:	623b      	str	r3, [r7, #32]
        break;
 801cb34:	e044      	b.n	801cbc0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cb36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb3a:	2b04      	cmp	r3, #4
 801cb3c:	d009      	beq.n	801cb52 <dhcp_parse_reply+0x2e6>
 801cb3e:	4b07      	ldr	r3, [pc, #28]	; (801cb5c <dhcp_parse_reply+0x2f0>)
 801cb40:	f240 6259 	movw	r2, #1625	; 0x659
 801cb44:	4906      	ldr	r1, [pc, #24]	; (801cb60 <dhcp_parse_reply+0x2f4>)
 801cb46:	4807      	ldr	r0, [pc, #28]	; (801cb64 <dhcp_parse_reply+0x2f8>)
 801cb48:	f004 fc36 	bl	80213b8 <iprintf>
 801cb4c:	f06f 0305 	mvn.w	r3, #5
 801cb50:	e149      	b.n	801cde6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801cb52:	2302      	movs	r3, #2
 801cb54:	623b      	str	r3, [r7, #32]
        break;
 801cb56:	e033      	b.n	801cbc0 <dhcp_parse_reply+0x354>
 801cb58:	20012350 	.word	0x20012350
 801cb5c:	080263ac 	.word	0x080263ac
 801cb60:	08026634 	.word	0x08026634
 801cb64:	0802640c 	.word	0x0802640c
 801cb68:	08026640 	.word	0x08026640
 801cb6c:	08026654 	.word	0x08026654
 801cb70:	08026660 	.word	0x08026660
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cb74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb78:	2b04      	cmp	r3, #4
 801cb7a:	d009      	beq.n	801cb90 <dhcp_parse_reply+0x324>
 801cb7c:	4b9c      	ldr	r3, [pc, #624]	; (801cdf0 <dhcp_parse_reply+0x584>)
 801cb7e:	f240 625d 	movw	r2, #1629	; 0x65d
 801cb82:	499c      	ldr	r1, [pc, #624]	; (801cdf4 <dhcp_parse_reply+0x588>)
 801cb84:	489c      	ldr	r0, [pc, #624]	; (801cdf8 <dhcp_parse_reply+0x58c>)
 801cb86:	f004 fc17 	bl	80213b8 <iprintf>
 801cb8a:	f06f 0305 	mvn.w	r3, #5
 801cb8e:	e12a      	b.n	801cde6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 801cb90:	2304      	movs	r3, #4
 801cb92:	623b      	str	r3, [r7, #32]
        break;
 801cb94:	e014      	b.n	801cbc0 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801cb96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cb9a:	2b04      	cmp	r3, #4
 801cb9c:	d009      	beq.n	801cbb2 <dhcp_parse_reply+0x346>
 801cb9e:	4b94      	ldr	r3, [pc, #592]	; (801cdf0 <dhcp_parse_reply+0x584>)
 801cba0:	f240 6261 	movw	r2, #1633	; 0x661
 801cba4:	4993      	ldr	r1, [pc, #588]	; (801cdf4 <dhcp_parse_reply+0x588>)
 801cba6:	4894      	ldr	r0, [pc, #592]	; (801cdf8 <dhcp_parse_reply+0x58c>)
 801cba8:	f004 fc06 	bl	80213b8 <iprintf>
 801cbac:	f06f 0305 	mvn.w	r3, #5
 801cbb0:	e119      	b.n	801cde6 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801cbb2:	2305      	movs	r3, #5
 801cbb4:	623b      	str	r3, [r7, #32]
        break;
 801cbb6:	e003      	b.n	801cbc0 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 801cbb8:	2300      	movs	r3, #0
 801cbba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801cbbe:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801cbc0:	7dfb      	ldrb	r3, [r7, #23]
 801cbc2:	2b00      	cmp	r3, #0
 801cbc4:	d103      	bne.n	801cbce <dhcp_parse_reply+0x362>
      offset++;
 801cbc6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cbc8:	3301      	adds	r3, #1
 801cbca:	877b      	strh	r3, [r7, #58]	; 0x3a
 801cbcc:	e0a1      	b.n	801cd12 <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801cbce:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cbd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cbd4:	4413      	add	r3, r2
 801cbd6:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 801cbda:	4293      	cmp	r3, r2
 801cbdc:	dd02      	ble.n	801cbe4 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 801cbde:	f06f 0301 	mvn.w	r3, #1
 801cbe2:	e100      	b.n	801cde6 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 801cbe4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cbe8:	b29a      	uxth	r2, r3
 801cbea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cbec:	4413      	add	r3, r2
 801cbee:	b29b      	uxth	r3, r3
 801cbf0:	3302      	adds	r3, #2
 801cbf2:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801cbf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cbf8:	2b00      	cmp	r3, #0
 801cbfa:	f000 808a 	beq.w	801cd12 <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 801cbfe:	2300      	movs	r3, #0
 801cc00:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801cc02:	6a3b      	ldr	r3, [r7, #32]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	db02      	blt.n	801cc0e <dhcp_parse_reply+0x3a2>
 801cc08:	6a3b      	ldr	r3, [r7, #32]
 801cc0a:	2b07      	cmp	r3, #7
 801cc0c:	dd06      	ble.n	801cc1c <dhcp_parse_reply+0x3b0>
 801cc0e:	4b78      	ldr	r3, [pc, #480]	; (801cdf0 <dhcp_parse_reply+0x584>)
 801cc10:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801cc14:	4979      	ldr	r1, [pc, #484]	; (801cdfc <dhcp_parse_reply+0x590>)
 801cc16:	4878      	ldr	r0, [pc, #480]	; (801cdf8 <dhcp_parse_reply+0x58c>)
 801cc18:	f004 fbce 	bl	80213b8 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801cc1c:	4a78      	ldr	r2, [pc, #480]	; (801ce00 <dhcp_parse_reply+0x594>)
 801cc1e:	6a3b      	ldr	r3, [r7, #32]
 801cc20:	4413      	add	r3, r2
 801cc22:	781b      	ldrb	r3, [r3, #0]
 801cc24:	2b00      	cmp	r3, #0
 801cc26:	d174      	bne.n	801cd12 <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 801cc28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cc2c:	2b04      	cmp	r3, #4
 801cc2e:	bf28      	it	cs
 801cc30:	2304      	movcs	r3, #4
 801cc32:	b2db      	uxtb	r3, r3
 801cc34:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801cc36:	8bfb      	ldrh	r3, [r7, #30]
 801cc38:	8aba      	ldrh	r2, [r7, #20]
 801cc3a:	f107 0108 	add.w	r1, r7, #8
 801cc3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801cc40:	f7f7 fc7c 	bl	801453c <pbuf_copy_partial>
 801cc44:	4603      	mov	r3, r0
 801cc46:	461a      	mov	r2, r3
 801cc48:	8abb      	ldrh	r3, [r7, #20]
 801cc4a:	4293      	cmp	r3, r2
 801cc4c:	d002      	beq.n	801cc54 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 801cc4e:	f06f 0301 	mvn.w	r3, #1
 801cc52:	e0c8      	b.n	801cde6 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801cc54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cc58:	2b04      	cmp	r3, #4
 801cc5a:	d933      	bls.n	801ccc4 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801cc5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cc60:	f003 0303 	and.w	r3, r3, #3
 801cc64:	b2db      	uxtb	r3, r3
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	d009      	beq.n	801cc7e <dhcp_parse_reply+0x412>
 801cc6a:	4b61      	ldr	r3, [pc, #388]	; (801cdf0 <dhcp_parse_reply+0x584>)
 801cc6c:	f240 6281 	movw	r2, #1665	; 0x681
 801cc70:	4964      	ldr	r1, [pc, #400]	; (801ce04 <dhcp_parse_reply+0x598>)
 801cc72:	4861      	ldr	r0, [pc, #388]	; (801cdf8 <dhcp_parse_reply+0x58c>)
 801cc74:	f004 fba0 	bl	80213b8 <iprintf>
 801cc78:	f06f 0305 	mvn.w	r3, #5
 801cc7c:	e0b3      	b.n	801cde6 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 801cc7e:	4a60      	ldr	r2, [pc, #384]	; (801ce00 <dhcp_parse_reply+0x594>)
 801cc80:	6a3b      	ldr	r3, [r7, #32]
 801cc82:	4413      	add	r3, r2
 801cc84:	2201      	movs	r2, #1
 801cc86:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801cc88:	68bb      	ldr	r3, [r7, #8]
 801cc8a:	4618      	mov	r0, r3
 801cc8c:	f7f5 fe67 	bl	801295e <lwip_htonl>
 801cc90:	4602      	mov	r2, r0
 801cc92:	495d      	ldr	r1, [pc, #372]	; (801ce08 <dhcp_parse_reply+0x59c>)
 801cc94:	6a3b      	ldr	r3, [r7, #32]
 801cc96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801cc9a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cc9e:	3b04      	subs	r3, #4
 801cca0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801cca4:	8bfb      	ldrh	r3, [r7, #30]
 801cca6:	3304      	adds	r3, #4
 801cca8:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801ccaa:	8a7a      	ldrh	r2, [r7, #18]
 801ccac:	8bfb      	ldrh	r3, [r7, #30]
 801ccae:	429a      	cmp	r2, r3
 801ccb0:	d202      	bcs.n	801ccb8 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801ccb2:	f06f 0301 	mvn.w	r3, #1
 801ccb6:	e096      	b.n	801cde6 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 801ccb8:	8a7b      	ldrh	r3, [r7, #18]
 801ccba:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801ccbc:	6a3b      	ldr	r3, [r7, #32]
 801ccbe:	3301      	adds	r3, #1
 801ccc0:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801ccc2:	e79e      	b.n	801cc02 <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801ccc4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ccc8:	2b04      	cmp	r3, #4
 801ccca:	d106      	bne.n	801ccda <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 801cccc:	68bb      	ldr	r3, [r7, #8]
 801ccce:	4618      	mov	r0, r3
 801ccd0:	f7f5 fe45 	bl	801295e <lwip_htonl>
 801ccd4:	4603      	mov	r3, r0
 801ccd6:	60bb      	str	r3, [r7, #8]
 801ccd8:	e011      	b.n	801ccfe <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801ccda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ccde:	2b01      	cmp	r3, #1
 801cce0:	d009      	beq.n	801ccf6 <dhcp_parse_reply+0x48a>
 801cce2:	4b43      	ldr	r3, [pc, #268]	; (801cdf0 <dhcp_parse_reply+0x584>)
 801cce4:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801cce8:	4948      	ldr	r1, [pc, #288]	; (801ce0c <dhcp_parse_reply+0x5a0>)
 801ccea:	4843      	ldr	r0, [pc, #268]	; (801cdf8 <dhcp_parse_reply+0x58c>)
 801ccec:	f004 fb64 	bl	80213b8 <iprintf>
 801ccf0:	f06f 0305 	mvn.w	r3, #5
 801ccf4:	e077      	b.n	801cde6 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 801ccf6:	f107 0308 	add.w	r3, r7, #8
 801ccfa:	781b      	ldrb	r3, [r3, #0]
 801ccfc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801ccfe:	4a40      	ldr	r2, [pc, #256]	; (801ce00 <dhcp_parse_reply+0x594>)
 801cd00:	6a3b      	ldr	r3, [r7, #32]
 801cd02:	4413      	add	r3, r2
 801cd04:	2201      	movs	r2, #1
 801cd06:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801cd08:	68ba      	ldr	r2, [r7, #8]
 801cd0a:	493f      	ldr	r1, [pc, #252]	; (801ce08 <dhcp_parse_reply+0x59c>)
 801cd0c:	6a3b      	ldr	r3, [r7, #32]
 801cd0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801cd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd14:	895b      	ldrh	r3, [r3, #10]
 801cd16:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cd18:	429a      	cmp	r2, r3
 801cd1a:	d324      	bcc.n	801cd66 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 801cd1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd1e:	895b      	ldrh	r3, [r3, #10]
 801cd20:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cd22:	1ad3      	subs	r3, r2, r3
 801cd24:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801cd26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd28:	895b      	ldrh	r3, [r3, #10]
 801cd2a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 801cd2c:	1ad3      	subs	r3, r2, r3
 801cd2e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801cd30:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cd32:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801cd34:	429a      	cmp	r2, r3
 801cd36:	d213      	bcs.n	801cd60 <dhcp_parse_reply+0x4f4>
        q = q->next;
 801cd38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801cd3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd40:	2b00      	cmp	r3, #0
 801cd42:	d109      	bne.n	801cd58 <dhcp_parse_reply+0x4ec>
 801cd44:	4b2a      	ldr	r3, [pc, #168]	; (801cdf0 <dhcp_parse_reply+0x584>)
 801cd46:	f240 629d 	movw	r2, #1693	; 0x69d
 801cd4a:	4931      	ldr	r1, [pc, #196]	; (801ce10 <dhcp_parse_reply+0x5a4>)
 801cd4c:	482a      	ldr	r0, [pc, #168]	; (801cdf8 <dhcp_parse_reply+0x58c>)
 801cd4e:	f004 fb33 	bl	80213b8 <iprintf>
 801cd52:	f06f 0305 	mvn.w	r3, #5
 801cd56:	e046      	b.n	801cde6 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 801cd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd5a:	685b      	ldr	r3, [r3, #4]
 801cd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cd5e:	e002      	b.n	801cd66 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801cd60:	f06f 0301 	mvn.w	r3, #1
 801cd64:	e03f      	b.n	801cde6 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801cd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cd68:	2b00      	cmp	r3, #0
 801cd6a:	d00a      	beq.n	801cd82 <dhcp_parse_reply+0x516>
 801cd6c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801cd6e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801cd70:	429a      	cmp	r2, r3
 801cd72:	d206      	bcs.n	801cd82 <dhcp_parse_reply+0x516>
 801cd74:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801cd76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cd78:	4413      	add	r3, r2
 801cd7a:	781b      	ldrb	r3, [r3, #0]
 801cd7c:	2bff      	cmp	r3, #255	; 0xff
 801cd7e:	f47f adb8 	bne.w	801c8f2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801cd82:	4b1f      	ldr	r3, [pc, #124]	; (801ce00 <dhcp_parse_reply+0x594>)
 801cd84:	781b      	ldrb	r3, [r3, #0]
 801cd86:	2b00      	cmp	r3, #0
 801cd88:	d018      	beq.n	801cdbc <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801cd8a:	4b1f      	ldr	r3, [pc, #124]	; (801ce08 <dhcp_parse_reply+0x59c>)
 801cd8c:	681b      	ldr	r3, [r3, #0]
 801cd8e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801cd90:	4b1b      	ldr	r3, [pc, #108]	; (801ce00 <dhcp_parse_reply+0x594>)
 801cd92:	2200      	movs	r2, #0
 801cd94:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801cd96:	68fb      	ldr	r3, [r7, #12]
 801cd98:	2b01      	cmp	r3, #1
 801cd9a:	d102      	bne.n	801cda2 <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 801cd9c:	2301      	movs	r3, #1
 801cd9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cda0:	e00c      	b.n	801cdbc <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	2b02      	cmp	r3, #2
 801cda6:	d102      	bne.n	801cdae <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 801cda8:	2301      	movs	r3, #1
 801cdaa:	62bb      	str	r3, [r7, #40]	; 0x28
 801cdac:	e006      	b.n	801cdbc <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801cdae:	68fb      	ldr	r3, [r7, #12]
 801cdb0:	2b03      	cmp	r3, #3
 801cdb2:	d103      	bne.n	801cdbc <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801cdb4:	2301      	movs	r3, #1
 801cdb6:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 801cdb8:	2301      	movs	r3, #1
 801cdba:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d006      	beq.n	801cdd0 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801cdc6:	236c      	movs	r3, #108	; 0x6c
 801cdc8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801cdca:	23ec      	movs	r3, #236	; 0xec
 801cdcc:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801cdce:	e56a      	b.n	801c8a6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801cdd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801cdd2:	2b00      	cmp	r3, #0
 801cdd4:	d006      	beq.n	801cde4 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 801cdd6:	2300      	movs	r3, #0
 801cdd8:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 801cdda:	232c      	movs	r3, #44	; 0x2c
 801cddc:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801cdde:	236c      	movs	r3, #108	; 0x6c
 801cde0:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801cde2:	e560      	b.n	801c8a6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801cde4:	2300      	movs	r3, #0
}
 801cde6:	4618      	mov	r0, r3
 801cde8:	3740      	adds	r7, #64	; 0x40
 801cdea:	46bd      	mov	sp, r7
 801cdec:	bd80      	pop	{r7, pc}
 801cdee:	bf00      	nop
 801cdf0:	080263ac 	.word	0x080263ac
 801cdf4:	08026634 	.word	0x08026634
 801cdf8:	0802640c 	.word	0x0802640c
 801cdfc:	08026678 	.word	0x08026678
 801ce00:	20012350 	.word	0x20012350
 801ce04:	0802668c 	.word	0x0802668c
 801ce08:	20012330 	.word	0x20012330
 801ce0c:	080266a4 	.word	0x080266a4
 801ce10:	080266b8 	.word	0x080266b8

0801ce14 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801ce14:	b580      	push	{r7, lr}
 801ce16:	b08a      	sub	sp, #40	; 0x28
 801ce18:	af00      	add	r7, sp, #0
 801ce1a:	60f8      	str	r0, [r7, #12]
 801ce1c:	60b9      	str	r1, [r7, #8]
 801ce1e:	607a      	str	r2, [r7, #4]
 801ce20:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801ce22:	4b60      	ldr	r3, [pc, #384]	; (801cfa4 <dhcp_recv+0x190>)
 801ce24:	685b      	ldr	r3, [r3, #4]
 801ce26:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ce28:	6a3b      	ldr	r3, [r7, #32]
 801ce2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce2c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801ce2e:	687b      	ldr	r3, [r7, #4]
 801ce30:	685b      	ldr	r3, [r3, #4]
 801ce32:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801ce34:	69fb      	ldr	r3, [r7, #28]
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	f000 809d 	beq.w	801cf76 <dhcp_recv+0x162>
 801ce3c:	69fb      	ldr	r3, [r7, #28]
 801ce3e:	791b      	ldrb	r3, [r3, #4]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	f000 8098 	beq.w	801cf76 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	895b      	ldrh	r3, [r3, #10]
 801ce4a:	2b2b      	cmp	r3, #43	; 0x2b
 801ce4c:	f240 8095 	bls.w	801cf7a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801ce50:	69bb      	ldr	r3, [r7, #24]
 801ce52:	781b      	ldrb	r3, [r3, #0]
 801ce54:	2b02      	cmp	r3, #2
 801ce56:	f040 8092 	bne.w	801cf7e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ce5a:	2300      	movs	r3, #0
 801ce5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ce60:	e012      	b.n	801ce88 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801ce62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce66:	6a3a      	ldr	r2, [r7, #32]
 801ce68:	4413      	add	r3, r2
 801ce6a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801ce6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce72:	69b9      	ldr	r1, [r7, #24]
 801ce74:	440b      	add	r3, r1
 801ce76:	7f1b      	ldrb	r3, [r3, #28]
 801ce78:	429a      	cmp	r2, r3
 801ce7a:	f040 8082 	bne.w	801cf82 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801ce7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce82:	3301      	adds	r3, #1
 801ce84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ce88:	6a3b      	ldr	r3, [r7, #32]
 801ce8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ce8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ce92:	429a      	cmp	r2, r3
 801ce94:	d203      	bcs.n	801ce9e <dhcp_recv+0x8a>
 801ce96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ce9a:	2b05      	cmp	r3, #5
 801ce9c:	d9e1      	bls.n	801ce62 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801ce9e:	69bb      	ldr	r3, [r7, #24]
 801cea0:	685b      	ldr	r3, [r3, #4]
 801cea2:	4618      	mov	r0, r3
 801cea4:	f7f5 fd5b 	bl	801295e <lwip_htonl>
 801cea8:	4602      	mov	r2, r0
 801ceaa:	69fb      	ldr	r3, [r7, #28]
 801ceac:	681b      	ldr	r3, [r3, #0]
 801ceae:	429a      	cmp	r2, r3
 801ceb0:	d169      	bne.n	801cf86 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801ceb2:	69f9      	ldr	r1, [r7, #28]
 801ceb4:	6878      	ldr	r0, [r7, #4]
 801ceb6:	f7ff fcd9 	bl	801c86c <dhcp_parse_reply>
 801ceba:	4603      	mov	r3, r0
 801cebc:	2b00      	cmp	r3, #0
 801cebe:	d164      	bne.n	801cf8a <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801cec0:	4b39      	ldr	r3, [pc, #228]	; (801cfa8 <dhcp_recv+0x194>)
 801cec2:	785b      	ldrb	r3, [r3, #1]
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d062      	beq.n	801cf8e <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	685b      	ldr	r3, [r3, #4]
 801cecc:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801cece:	4b37      	ldr	r3, [pc, #220]	; (801cfac <dhcp_recv+0x198>)
 801ced0:	685b      	ldr	r3, [r3, #4]
 801ced2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801ced4:	7cfb      	ldrb	r3, [r7, #19]
 801ced6:	2b05      	cmp	r3, #5
 801ced8:	d12a      	bne.n	801cf30 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801ceda:	69fb      	ldr	r3, [r7, #28]
 801cedc:	795b      	ldrb	r3, [r3, #5]
 801cede:	2b01      	cmp	r3, #1
 801cee0:	d112      	bne.n	801cf08 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801cee2:	6979      	ldr	r1, [r7, #20]
 801cee4:	6a38      	ldr	r0, [r7, #32]
 801cee6:	f7fe fe17 	bl	801bb18 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801ceea:	6a3b      	ldr	r3, [r7, #32]
 801ceec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cef0:	f003 0308 	and.w	r3, r3, #8
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d003      	beq.n	801cf00 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801cef8:	6a38      	ldr	r0, [r7, #32]
 801cefa:	f7fe fb87 	bl	801b60c <dhcp_check>
 801cefe:	e049      	b.n	801cf94 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801cf00:	6a38      	ldr	r0, [r7, #32]
 801cf02:	f7ff f867 	bl	801bfd4 <dhcp_bind>
 801cf06:	e045      	b.n	801cf94 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801cf08:	69fb      	ldr	r3, [r7, #28]
 801cf0a:	795b      	ldrb	r3, [r3, #5]
 801cf0c:	2b03      	cmp	r3, #3
 801cf0e:	d007      	beq.n	801cf20 <dhcp_recv+0x10c>
 801cf10:	69fb      	ldr	r3, [r7, #28]
 801cf12:	795b      	ldrb	r3, [r3, #5]
 801cf14:	2b04      	cmp	r3, #4
 801cf16:	d003      	beq.n	801cf20 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801cf18:	69fb      	ldr	r3, [r7, #28]
 801cf1a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801cf1c:	2b05      	cmp	r3, #5
 801cf1e:	d139      	bne.n	801cf94 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801cf20:	6979      	ldr	r1, [r7, #20]
 801cf22:	6a38      	ldr	r0, [r7, #32]
 801cf24:	f7fe fdf8 	bl	801bb18 <dhcp_handle_ack>
      dhcp_bind(netif);
 801cf28:	6a38      	ldr	r0, [r7, #32]
 801cf2a:	f7ff f853 	bl	801bfd4 <dhcp_bind>
 801cf2e:	e031      	b.n	801cf94 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801cf30:	7cfb      	ldrb	r3, [r7, #19]
 801cf32:	2b06      	cmp	r3, #6
 801cf34:	d113      	bne.n	801cf5e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801cf36:	69fb      	ldr	r3, [r7, #28]
 801cf38:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801cf3a:	2b03      	cmp	r3, #3
 801cf3c:	d00b      	beq.n	801cf56 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801cf3e:	69fb      	ldr	r3, [r7, #28]
 801cf40:	795b      	ldrb	r3, [r3, #5]
 801cf42:	2b01      	cmp	r3, #1
 801cf44:	d007      	beq.n	801cf56 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801cf46:	69fb      	ldr	r3, [r7, #28]
 801cf48:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801cf4a:	2b04      	cmp	r3, #4
 801cf4c:	d003      	beq.n	801cf56 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801cf4e:	69fb      	ldr	r3, [r7, #28]
 801cf50:	795b      	ldrb	r3, [r3, #5]
 801cf52:	2b05      	cmp	r3, #5
 801cf54:	d103      	bne.n	801cf5e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801cf56:	6a38      	ldr	r0, [r7, #32]
 801cf58:	f7fe fb3e 	bl	801b5d8 <dhcp_handle_nak>
 801cf5c:	e01a      	b.n	801cf94 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801cf5e:	7cfb      	ldrb	r3, [r7, #19]
 801cf60:	2b02      	cmp	r3, #2
 801cf62:	d116      	bne.n	801cf92 <dhcp_recv+0x17e>
 801cf64:	69fb      	ldr	r3, [r7, #28]
 801cf66:	795b      	ldrb	r3, [r3, #5]
 801cf68:	2b06      	cmp	r3, #6
 801cf6a:	d112      	bne.n	801cf92 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801cf6c:	6979      	ldr	r1, [r7, #20]
 801cf6e:	6a38      	ldr	r0, [r7, #32]
 801cf70:	f7fe fb80 	bl	801b674 <dhcp_handle_offer>
 801cf74:	e00e      	b.n	801cf94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf76:	bf00      	nop
 801cf78:	e00c      	b.n	801cf94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf7a:	bf00      	nop
 801cf7c:	e00a      	b.n	801cf94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf7e:	bf00      	nop
 801cf80:	e008      	b.n	801cf94 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801cf82:	bf00      	nop
 801cf84:	e006      	b.n	801cf94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf86:	bf00      	nop
 801cf88:	e004      	b.n	801cf94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf8a:	bf00      	nop
 801cf8c:	e002      	b.n	801cf94 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801cf8e:	bf00      	nop
 801cf90:	e000      	b.n	801cf94 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801cf92:	bf00      	nop
  pbuf_free(p);
 801cf94:	6878      	ldr	r0, [r7, #4]
 801cf96:	f7f7 f8cb 	bl	8014130 <pbuf_free>
}
 801cf9a:	bf00      	nop
 801cf9c:	3728      	adds	r7, #40	; 0x28
 801cf9e:	46bd      	mov	sp, r7
 801cfa0:	bd80      	pop	{r7, pc}
 801cfa2:	bf00      	nop
 801cfa4:	2000eb24 	.word	0x2000eb24
 801cfa8:	20012350 	.word	0x20012350
 801cfac:	20012330 	.word	0x20012330

0801cfb0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801cfb0:	b580      	push	{r7, lr}
 801cfb2:	b088      	sub	sp, #32
 801cfb4:	af00      	add	r7, sp, #0
 801cfb6:	60f8      	str	r0, [r7, #12]
 801cfb8:	60b9      	str	r1, [r7, #8]
 801cfba:	603b      	str	r3, [r7, #0]
 801cfbc:	4613      	mov	r3, r2
 801cfbe:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	2b00      	cmp	r3, #0
 801cfc4:	d108      	bne.n	801cfd8 <dhcp_create_msg+0x28>
 801cfc6:	4b5f      	ldr	r3, [pc, #380]	; (801d144 <dhcp_create_msg+0x194>)
 801cfc8:	f240 7269 	movw	r2, #1897	; 0x769
 801cfcc:	495e      	ldr	r1, [pc, #376]	; (801d148 <dhcp_create_msg+0x198>)
 801cfce:	485f      	ldr	r0, [pc, #380]	; (801d14c <dhcp_create_msg+0x19c>)
 801cfd0:	f004 f9f2 	bl	80213b8 <iprintf>
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	e0b1      	b.n	801d13c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801cfd8:	68bb      	ldr	r3, [r7, #8]
 801cfda:	2b00      	cmp	r3, #0
 801cfdc:	d108      	bne.n	801cff0 <dhcp_create_msg+0x40>
 801cfde:	4b59      	ldr	r3, [pc, #356]	; (801d144 <dhcp_create_msg+0x194>)
 801cfe0:	f240 726a 	movw	r2, #1898	; 0x76a
 801cfe4:	495a      	ldr	r1, [pc, #360]	; (801d150 <dhcp_create_msg+0x1a0>)
 801cfe6:	4859      	ldr	r0, [pc, #356]	; (801d14c <dhcp_create_msg+0x19c>)
 801cfe8:	f004 f9e6 	bl	80213b8 <iprintf>
 801cfec:	2300      	movs	r3, #0
 801cfee:	e0a5      	b.n	801d13c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801cff0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cff4:	f44f 719a 	mov.w	r1, #308	; 0x134
 801cff8:	2036      	movs	r0, #54	; 0x36
 801cffa:	f7f6 fdb5 	bl	8013b68 <pbuf_alloc>
 801cffe:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801d000:	69bb      	ldr	r3, [r7, #24]
 801d002:	2b00      	cmp	r3, #0
 801d004:	d101      	bne.n	801d00a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801d006:	2300      	movs	r3, #0
 801d008:	e098      	b.n	801d13c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801d00a:	69bb      	ldr	r3, [r7, #24]
 801d00c:	895b      	ldrh	r3, [r3, #10]
 801d00e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801d012:	d206      	bcs.n	801d022 <dhcp_create_msg+0x72>
 801d014:	4b4b      	ldr	r3, [pc, #300]	; (801d144 <dhcp_create_msg+0x194>)
 801d016:	f240 7271 	movw	r2, #1905	; 0x771
 801d01a:	494e      	ldr	r1, [pc, #312]	; (801d154 <dhcp_create_msg+0x1a4>)
 801d01c:	484b      	ldr	r0, [pc, #300]	; (801d14c <dhcp_create_msg+0x19c>)
 801d01e:	f004 f9cb 	bl	80213b8 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801d022:	79fb      	ldrb	r3, [r7, #7]
 801d024:	2b03      	cmp	r3, #3
 801d026:	d103      	bne.n	801d030 <dhcp_create_msg+0x80>
 801d028:	68bb      	ldr	r3, [r7, #8]
 801d02a:	795b      	ldrb	r3, [r3, #5]
 801d02c:	2b03      	cmp	r3, #3
 801d02e:	d10d      	bne.n	801d04c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801d030:	68bb      	ldr	r3, [r7, #8]
 801d032:	799b      	ldrb	r3, [r3, #6]
 801d034:	2b00      	cmp	r3, #0
 801d036:	d105      	bne.n	801d044 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801d038:	f004 f842 	bl	80210c0 <rand>
 801d03c:	4603      	mov	r3, r0
 801d03e:	461a      	mov	r2, r3
 801d040:	4b45      	ldr	r3, [pc, #276]	; (801d158 <dhcp_create_msg+0x1a8>)
 801d042:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801d044:	4b44      	ldr	r3, [pc, #272]	; (801d158 <dhcp_create_msg+0x1a8>)
 801d046:	681a      	ldr	r2, [r3, #0]
 801d048:	68bb      	ldr	r3, [r7, #8]
 801d04a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801d04c:	69bb      	ldr	r3, [r7, #24]
 801d04e:	685b      	ldr	r3, [r3, #4]
 801d050:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801d052:	f44f 729a 	mov.w	r2, #308	; 0x134
 801d056:	2100      	movs	r1, #0
 801d058:	6978      	ldr	r0, [r7, #20]
 801d05a:	f004 fbc3 	bl	80217e4 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801d05e:	697b      	ldr	r3, [r7, #20]
 801d060:	2201      	movs	r2, #1
 801d062:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801d064:	697b      	ldr	r3, [r7, #20]
 801d066:	2201      	movs	r2, #1
 801d068:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801d06a:	68fb      	ldr	r3, [r7, #12]
 801d06c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801d070:	697b      	ldr	r3, [r7, #20]
 801d072:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801d074:	68bb      	ldr	r3, [r7, #8]
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	4618      	mov	r0, r3
 801d07a:	f7f5 fc70 	bl	801295e <lwip_htonl>
 801d07e:	4602      	mov	r2, r0
 801d080:	697b      	ldr	r3, [r7, #20]
 801d082:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801d084:	79fb      	ldrb	r3, [r7, #7]
 801d086:	2b08      	cmp	r3, #8
 801d088:	d010      	beq.n	801d0ac <dhcp_create_msg+0xfc>
 801d08a:	79fb      	ldrb	r3, [r7, #7]
 801d08c:	2b04      	cmp	r3, #4
 801d08e:	d00d      	beq.n	801d0ac <dhcp_create_msg+0xfc>
 801d090:	79fb      	ldrb	r3, [r7, #7]
 801d092:	2b07      	cmp	r3, #7
 801d094:	d00a      	beq.n	801d0ac <dhcp_create_msg+0xfc>
 801d096:	79fb      	ldrb	r3, [r7, #7]
 801d098:	2b03      	cmp	r3, #3
 801d09a:	d10c      	bne.n	801d0b6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801d09c:	68bb      	ldr	r3, [r7, #8]
 801d09e:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801d0a0:	2b05      	cmp	r3, #5
 801d0a2:	d003      	beq.n	801d0ac <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801d0a4:	68bb      	ldr	r3, [r7, #8]
 801d0a6:	795b      	ldrb	r3, [r3, #5]
 801d0a8:	2b04      	cmp	r3, #4
 801d0aa:	d104      	bne.n	801d0b6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801d0ac:	68fb      	ldr	r3, [r7, #12]
 801d0ae:	3304      	adds	r3, #4
 801d0b0:	681a      	ldr	r2, [r3, #0]
 801d0b2:	697b      	ldr	r3, [r7, #20]
 801d0b4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	83fb      	strh	r3, [r7, #30]
 801d0ba:	e00c      	b.n	801d0d6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801d0bc:	8bfa      	ldrh	r2, [r7, #30]
 801d0be:	8bfb      	ldrh	r3, [r7, #30]
 801d0c0:	68f9      	ldr	r1, [r7, #12]
 801d0c2:	440a      	add	r2, r1
 801d0c4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801d0c8:	697a      	ldr	r2, [r7, #20]
 801d0ca:	4413      	add	r3, r2
 801d0cc:	460a      	mov	r2, r1
 801d0ce:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801d0d0:	8bfb      	ldrh	r3, [r7, #30]
 801d0d2:	3301      	adds	r3, #1
 801d0d4:	83fb      	strh	r3, [r7, #30]
 801d0d6:	8bfb      	ldrh	r3, [r7, #30]
 801d0d8:	2b05      	cmp	r3, #5
 801d0da:	d9ef      	bls.n	801d0bc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801d0dc:	697b      	ldr	r3, [r7, #20]
 801d0de:	2200      	movs	r2, #0
 801d0e0:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801d0e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801d0e8:	2200      	movs	r2, #0
 801d0ea:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801d0ee:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801d0f2:	2200      	movs	r2, #0
 801d0f4:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801d0f8:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801d0fc:	2200      	movs	r2, #0
 801d0fe:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801d102:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801d106:	697b      	ldr	r3, [r7, #20]
 801d108:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d10c:	2301      	movs	r3, #1
 801d10e:	2235      	movs	r2, #53	; 0x35
 801d110:	2000      	movs	r0, #0
 801d112:	f7ff fadb 	bl	801c6cc <dhcp_option>
 801d116:	4603      	mov	r3, r0
 801d118:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801d11a:	697b      	ldr	r3, [r7, #20]
 801d11c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801d120:	79fa      	ldrb	r2, [r7, #7]
 801d122:	8a7b      	ldrh	r3, [r7, #18]
 801d124:	4618      	mov	r0, r3
 801d126:	f7ff fb05 	bl	801c734 <dhcp_option_byte>
 801d12a:	4603      	mov	r3, r0
 801d12c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801d12e:	683b      	ldr	r3, [r7, #0]
 801d130:	2b00      	cmp	r3, #0
 801d132:	d002      	beq.n	801d13a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801d134:	683b      	ldr	r3, [r7, #0]
 801d136:	8a7a      	ldrh	r2, [r7, #18]
 801d138:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801d13a:	69bb      	ldr	r3, [r7, #24]
}
 801d13c:	4618      	mov	r0, r3
 801d13e:	3720      	adds	r7, #32
 801d140:	46bd      	mov	sp, r7
 801d142:	bd80      	pop	{r7, pc}
 801d144:	080263ac 	.word	0x080263ac
 801d148:	080266cc 	.word	0x080266cc
 801d14c:	0802640c 	.word	0x0802640c
 801d150:	080266ec 	.word	0x080266ec
 801d154:	0802670c 	.word	0x0802670c
 801d158:	20012360 	.word	0x20012360

0801d15c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801d15c:	b580      	push	{r7, lr}
 801d15e:	b084      	sub	sp, #16
 801d160:	af00      	add	r7, sp, #0
 801d162:	4603      	mov	r3, r0
 801d164:	60b9      	str	r1, [r7, #8]
 801d166:	607a      	str	r2, [r7, #4]
 801d168:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801d16a:	89fb      	ldrh	r3, [r7, #14]
 801d16c:	1c5a      	adds	r2, r3, #1
 801d16e:	81fa      	strh	r2, [r7, #14]
 801d170:	461a      	mov	r2, r3
 801d172:	68bb      	ldr	r3, [r7, #8]
 801d174:	4413      	add	r3, r2
 801d176:	22ff      	movs	r2, #255	; 0xff
 801d178:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801d17a:	e007      	b.n	801d18c <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801d17c:	89fb      	ldrh	r3, [r7, #14]
 801d17e:	1c5a      	adds	r2, r3, #1
 801d180:	81fa      	strh	r2, [r7, #14]
 801d182:	461a      	mov	r2, r3
 801d184:	68bb      	ldr	r3, [r7, #8]
 801d186:	4413      	add	r3, r2
 801d188:	2200      	movs	r2, #0
 801d18a:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801d18c:	89fb      	ldrh	r3, [r7, #14]
 801d18e:	2b43      	cmp	r3, #67	; 0x43
 801d190:	d904      	bls.n	801d19c <dhcp_option_trailer+0x40>
 801d192:	89fb      	ldrh	r3, [r7, #14]
 801d194:	f003 0303 	and.w	r3, r3, #3
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d002      	beq.n	801d1a2 <dhcp_option_trailer+0x46>
 801d19c:	89fb      	ldrh	r3, [r7, #14]
 801d19e:	2b43      	cmp	r3, #67	; 0x43
 801d1a0:	d9ec      	bls.n	801d17c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801d1a2:	89fb      	ldrh	r3, [r7, #14]
 801d1a4:	33f0      	adds	r3, #240	; 0xf0
 801d1a6:	b29b      	uxth	r3, r3
 801d1a8:	4619      	mov	r1, r3
 801d1aa:	6878      	ldr	r0, [r7, #4]
 801d1ac:	f7f6 fe3a 	bl	8013e24 <pbuf_realloc>
}
 801d1b0:	bf00      	nop
 801d1b2:	3710      	adds	r7, #16
 801d1b4:	46bd      	mov	sp, r7
 801d1b6:	bd80      	pop	{r7, pc}

0801d1b8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801d1b8:	b480      	push	{r7}
 801d1ba:	b085      	sub	sp, #20
 801d1bc:	af00      	add	r7, sp, #0
 801d1be:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d017      	beq.n	801d1f6 <dhcp_supplied_address+0x3e>
 801d1c6:	687b      	ldr	r3, [r7, #4]
 801d1c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1ca:	2b00      	cmp	r3, #0
 801d1cc:	d013      	beq.n	801d1f6 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1d2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d1d4:	68fb      	ldr	r3, [r7, #12]
 801d1d6:	795b      	ldrb	r3, [r3, #5]
 801d1d8:	2b0a      	cmp	r3, #10
 801d1da:	d007      	beq.n	801d1ec <dhcp_supplied_address+0x34>
 801d1dc:	68fb      	ldr	r3, [r7, #12]
 801d1de:	795b      	ldrb	r3, [r3, #5]
 801d1e0:	2b05      	cmp	r3, #5
 801d1e2:	d003      	beq.n	801d1ec <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801d1e4:	68fb      	ldr	r3, [r7, #12]
 801d1e6:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801d1e8:	2b04      	cmp	r3, #4
 801d1ea:	d101      	bne.n	801d1f0 <dhcp_supplied_address+0x38>
 801d1ec:	2301      	movs	r3, #1
 801d1ee:	e000      	b.n	801d1f2 <dhcp_supplied_address+0x3a>
 801d1f0:	2300      	movs	r3, #0
 801d1f2:	b2db      	uxtb	r3, r3
 801d1f4:	e000      	b.n	801d1f8 <dhcp_supplied_address+0x40>
  }
  return 0;
 801d1f6:	2300      	movs	r3, #0
}
 801d1f8:	4618      	mov	r0, r3
 801d1fa:	3714      	adds	r7, #20
 801d1fc:	46bd      	mov	sp, r7
 801d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d202:	4770      	bx	lr

0801d204 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801d204:	b580      	push	{r7, lr}
 801d206:	b082      	sub	sp, #8
 801d208:	af00      	add	r7, sp, #0
 801d20a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801d20c:	4915      	ldr	r1, [pc, #84]	; (801d264 <etharp_free_entry+0x60>)
 801d20e:	687a      	ldr	r2, [r7, #4]
 801d210:	4613      	mov	r3, r2
 801d212:	005b      	lsls	r3, r3, #1
 801d214:	4413      	add	r3, r2
 801d216:	00db      	lsls	r3, r3, #3
 801d218:	440b      	add	r3, r1
 801d21a:	681b      	ldr	r3, [r3, #0]
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	d013      	beq.n	801d248 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801d220:	4910      	ldr	r1, [pc, #64]	; (801d264 <etharp_free_entry+0x60>)
 801d222:	687a      	ldr	r2, [r7, #4]
 801d224:	4613      	mov	r3, r2
 801d226:	005b      	lsls	r3, r3, #1
 801d228:	4413      	add	r3, r2
 801d22a:	00db      	lsls	r3, r3, #3
 801d22c:	440b      	add	r3, r1
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	4618      	mov	r0, r3
 801d232:	f7f6 ff7d 	bl	8014130 <pbuf_free>
    arp_table[i].q = NULL;
 801d236:	490b      	ldr	r1, [pc, #44]	; (801d264 <etharp_free_entry+0x60>)
 801d238:	687a      	ldr	r2, [r7, #4]
 801d23a:	4613      	mov	r3, r2
 801d23c:	005b      	lsls	r3, r3, #1
 801d23e:	4413      	add	r3, r2
 801d240:	00db      	lsls	r3, r3, #3
 801d242:	440b      	add	r3, r1
 801d244:	2200      	movs	r2, #0
 801d246:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801d248:	4906      	ldr	r1, [pc, #24]	; (801d264 <etharp_free_entry+0x60>)
 801d24a:	687a      	ldr	r2, [r7, #4]
 801d24c:	4613      	mov	r3, r2
 801d24e:	005b      	lsls	r3, r3, #1
 801d250:	4413      	add	r3, r2
 801d252:	00db      	lsls	r3, r3, #3
 801d254:	440b      	add	r3, r1
 801d256:	3314      	adds	r3, #20
 801d258:	2200      	movs	r2, #0
 801d25a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801d25c:	bf00      	nop
 801d25e:	3708      	adds	r7, #8
 801d260:	46bd      	mov	sp, r7
 801d262:	bd80      	pop	{r7, pc}
 801d264:	20012364 	.word	0x20012364

0801d268 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801d268:	b580      	push	{r7, lr}
 801d26a:	b082      	sub	sp, #8
 801d26c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d26e:	2300      	movs	r3, #0
 801d270:	607b      	str	r3, [r7, #4]
 801d272:	e096      	b.n	801d3a2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801d274:	494f      	ldr	r1, [pc, #316]	; (801d3b4 <etharp_tmr+0x14c>)
 801d276:	687a      	ldr	r2, [r7, #4]
 801d278:	4613      	mov	r3, r2
 801d27a:	005b      	lsls	r3, r3, #1
 801d27c:	4413      	add	r3, r2
 801d27e:	00db      	lsls	r3, r3, #3
 801d280:	440b      	add	r3, r1
 801d282:	3314      	adds	r3, #20
 801d284:	781b      	ldrb	r3, [r3, #0]
 801d286:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801d288:	78fb      	ldrb	r3, [r7, #3]
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	f000 8086 	beq.w	801d39c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801d290:	4948      	ldr	r1, [pc, #288]	; (801d3b4 <etharp_tmr+0x14c>)
 801d292:	687a      	ldr	r2, [r7, #4]
 801d294:	4613      	mov	r3, r2
 801d296:	005b      	lsls	r3, r3, #1
 801d298:	4413      	add	r3, r2
 801d29a:	00db      	lsls	r3, r3, #3
 801d29c:	440b      	add	r3, r1
 801d29e:	3312      	adds	r3, #18
 801d2a0:	881b      	ldrh	r3, [r3, #0]
 801d2a2:	3301      	adds	r3, #1
 801d2a4:	b298      	uxth	r0, r3
 801d2a6:	4943      	ldr	r1, [pc, #268]	; (801d3b4 <etharp_tmr+0x14c>)
 801d2a8:	687a      	ldr	r2, [r7, #4]
 801d2aa:	4613      	mov	r3, r2
 801d2ac:	005b      	lsls	r3, r3, #1
 801d2ae:	4413      	add	r3, r2
 801d2b0:	00db      	lsls	r3, r3, #3
 801d2b2:	440b      	add	r3, r1
 801d2b4:	3312      	adds	r3, #18
 801d2b6:	4602      	mov	r2, r0
 801d2b8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d2ba:	493e      	ldr	r1, [pc, #248]	; (801d3b4 <etharp_tmr+0x14c>)
 801d2bc:	687a      	ldr	r2, [r7, #4]
 801d2be:	4613      	mov	r3, r2
 801d2c0:	005b      	lsls	r3, r3, #1
 801d2c2:	4413      	add	r3, r2
 801d2c4:	00db      	lsls	r3, r3, #3
 801d2c6:	440b      	add	r3, r1
 801d2c8:	3312      	adds	r3, #18
 801d2ca:	881b      	ldrh	r3, [r3, #0]
 801d2cc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801d2d0:	d215      	bcs.n	801d2fe <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d2d2:	4938      	ldr	r1, [pc, #224]	; (801d3b4 <etharp_tmr+0x14c>)
 801d2d4:	687a      	ldr	r2, [r7, #4]
 801d2d6:	4613      	mov	r3, r2
 801d2d8:	005b      	lsls	r3, r3, #1
 801d2da:	4413      	add	r3, r2
 801d2dc:	00db      	lsls	r3, r3, #3
 801d2de:	440b      	add	r3, r1
 801d2e0:	3314      	adds	r3, #20
 801d2e2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801d2e4:	2b01      	cmp	r3, #1
 801d2e6:	d10e      	bne.n	801d306 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801d2e8:	4932      	ldr	r1, [pc, #200]	; (801d3b4 <etharp_tmr+0x14c>)
 801d2ea:	687a      	ldr	r2, [r7, #4]
 801d2ec:	4613      	mov	r3, r2
 801d2ee:	005b      	lsls	r3, r3, #1
 801d2f0:	4413      	add	r3, r2
 801d2f2:	00db      	lsls	r3, r3, #3
 801d2f4:	440b      	add	r3, r1
 801d2f6:	3312      	adds	r3, #18
 801d2f8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801d2fa:	2b04      	cmp	r3, #4
 801d2fc:	d903      	bls.n	801d306 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801d2fe:	6878      	ldr	r0, [r7, #4]
 801d300:	f7ff ff80 	bl	801d204 <etharp_free_entry>
 801d304:	e04a      	b.n	801d39c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801d306:	492b      	ldr	r1, [pc, #172]	; (801d3b4 <etharp_tmr+0x14c>)
 801d308:	687a      	ldr	r2, [r7, #4]
 801d30a:	4613      	mov	r3, r2
 801d30c:	005b      	lsls	r3, r3, #1
 801d30e:	4413      	add	r3, r2
 801d310:	00db      	lsls	r3, r3, #3
 801d312:	440b      	add	r3, r1
 801d314:	3314      	adds	r3, #20
 801d316:	781b      	ldrb	r3, [r3, #0]
 801d318:	2b03      	cmp	r3, #3
 801d31a:	d10a      	bne.n	801d332 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801d31c:	4925      	ldr	r1, [pc, #148]	; (801d3b4 <etharp_tmr+0x14c>)
 801d31e:	687a      	ldr	r2, [r7, #4]
 801d320:	4613      	mov	r3, r2
 801d322:	005b      	lsls	r3, r3, #1
 801d324:	4413      	add	r3, r2
 801d326:	00db      	lsls	r3, r3, #3
 801d328:	440b      	add	r3, r1
 801d32a:	3314      	adds	r3, #20
 801d32c:	2204      	movs	r2, #4
 801d32e:	701a      	strb	r2, [r3, #0]
 801d330:	e034      	b.n	801d39c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801d332:	4920      	ldr	r1, [pc, #128]	; (801d3b4 <etharp_tmr+0x14c>)
 801d334:	687a      	ldr	r2, [r7, #4]
 801d336:	4613      	mov	r3, r2
 801d338:	005b      	lsls	r3, r3, #1
 801d33a:	4413      	add	r3, r2
 801d33c:	00db      	lsls	r3, r3, #3
 801d33e:	440b      	add	r3, r1
 801d340:	3314      	adds	r3, #20
 801d342:	781b      	ldrb	r3, [r3, #0]
 801d344:	2b04      	cmp	r3, #4
 801d346:	d10a      	bne.n	801d35e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801d348:	491a      	ldr	r1, [pc, #104]	; (801d3b4 <etharp_tmr+0x14c>)
 801d34a:	687a      	ldr	r2, [r7, #4]
 801d34c:	4613      	mov	r3, r2
 801d34e:	005b      	lsls	r3, r3, #1
 801d350:	4413      	add	r3, r2
 801d352:	00db      	lsls	r3, r3, #3
 801d354:	440b      	add	r3, r1
 801d356:	3314      	adds	r3, #20
 801d358:	2202      	movs	r2, #2
 801d35a:	701a      	strb	r2, [r3, #0]
 801d35c:	e01e      	b.n	801d39c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801d35e:	4915      	ldr	r1, [pc, #84]	; (801d3b4 <etharp_tmr+0x14c>)
 801d360:	687a      	ldr	r2, [r7, #4]
 801d362:	4613      	mov	r3, r2
 801d364:	005b      	lsls	r3, r3, #1
 801d366:	4413      	add	r3, r2
 801d368:	00db      	lsls	r3, r3, #3
 801d36a:	440b      	add	r3, r1
 801d36c:	3314      	adds	r3, #20
 801d36e:	781b      	ldrb	r3, [r3, #0]
 801d370:	2b01      	cmp	r3, #1
 801d372:	d113      	bne.n	801d39c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801d374:	490f      	ldr	r1, [pc, #60]	; (801d3b4 <etharp_tmr+0x14c>)
 801d376:	687a      	ldr	r2, [r7, #4]
 801d378:	4613      	mov	r3, r2
 801d37a:	005b      	lsls	r3, r3, #1
 801d37c:	4413      	add	r3, r2
 801d37e:	00db      	lsls	r3, r3, #3
 801d380:	440b      	add	r3, r1
 801d382:	3308      	adds	r3, #8
 801d384:	6818      	ldr	r0, [r3, #0]
 801d386:	687a      	ldr	r2, [r7, #4]
 801d388:	4613      	mov	r3, r2
 801d38a:	005b      	lsls	r3, r3, #1
 801d38c:	4413      	add	r3, r2
 801d38e:	00db      	lsls	r3, r3, #3
 801d390:	4a08      	ldr	r2, [pc, #32]	; (801d3b4 <etharp_tmr+0x14c>)
 801d392:	4413      	add	r3, r2
 801d394:	3304      	adds	r3, #4
 801d396:	4619      	mov	r1, r3
 801d398:	f000 fe72 	bl	801e080 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	3301      	adds	r3, #1
 801d3a0:	607b      	str	r3, [r7, #4]
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	2b09      	cmp	r3, #9
 801d3a6:	f77f af65 	ble.w	801d274 <etharp_tmr+0xc>
      }
    }
  }
}
 801d3aa:	bf00      	nop
 801d3ac:	bf00      	nop
 801d3ae:	3708      	adds	r7, #8
 801d3b0:	46bd      	mov	sp, r7
 801d3b2:	bd80      	pop	{r7, pc}
 801d3b4:	20012364 	.word	0x20012364

0801d3b8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801d3b8:	b580      	push	{r7, lr}
 801d3ba:	b08a      	sub	sp, #40	; 0x28
 801d3bc:	af00      	add	r7, sp, #0
 801d3be:	60f8      	str	r0, [r7, #12]
 801d3c0:	460b      	mov	r3, r1
 801d3c2:	607a      	str	r2, [r7, #4]
 801d3c4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801d3c6:	230a      	movs	r3, #10
 801d3c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 801d3ca:	230a      	movs	r3, #10
 801d3cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801d3ce:	230a      	movs	r3, #10
 801d3d0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801d3d2:	2300      	movs	r3, #0
 801d3d4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801d3d6:	230a      	movs	r3, #10
 801d3d8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801d3da:	2300      	movs	r3, #0
 801d3dc:	83bb      	strh	r3, [r7, #28]
 801d3de:	2300      	movs	r3, #0
 801d3e0:	837b      	strh	r3, [r7, #26]
 801d3e2:	2300      	movs	r3, #0
 801d3e4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d3e6:	2300      	movs	r3, #0
 801d3e8:	843b      	strh	r3, [r7, #32]
 801d3ea:	e0ae      	b.n	801d54a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801d3ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d3f0:	49a6      	ldr	r1, [pc, #664]	; (801d68c <etharp_find_entry+0x2d4>)
 801d3f2:	4613      	mov	r3, r2
 801d3f4:	005b      	lsls	r3, r3, #1
 801d3f6:	4413      	add	r3, r2
 801d3f8:	00db      	lsls	r3, r3, #3
 801d3fa:	440b      	add	r3, r1
 801d3fc:	3314      	adds	r3, #20
 801d3fe:	781b      	ldrb	r3, [r3, #0]
 801d400:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801d402:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d406:	2b0a      	cmp	r3, #10
 801d408:	d105      	bne.n	801d416 <etharp_find_entry+0x5e>
 801d40a:	7dfb      	ldrb	r3, [r7, #23]
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d102      	bne.n	801d416 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801d410:	8c3b      	ldrh	r3, [r7, #32]
 801d412:	847b      	strh	r3, [r7, #34]	; 0x22
 801d414:	e095      	b.n	801d542 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801d416:	7dfb      	ldrb	r3, [r7, #23]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	f000 8092 	beq.w	801d542 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801d41e:	7dfb      	ldrb	r3, [r7, #23]
 801d420:	2b01      	cmp	r3, #1
 801d422:	d009      	beq.n	801d438 <etharp_find_entry+0x80>
 801d424:	7dfb      	ldrb	r3, [r7, #23]
 801d426:	2b01      	cmp	r3, #1
 801d428:	d806      	bhi.n	801d438 <etharp_find_entry+0x80>
 801d42a:	4b99      	ldr	r3, [pc, #612]	; (801d690 <etharp_find_entry+0x2d8>)
 801d42c:	f240 1223 	movw	r2, #291	; 0x123
 801d430:	4998      	ldr	r1, [pc, #608]	; (801d694 <etharp_find_entry+0x2dc>)
 801d432:	4899      	ldr	r0, [pc, #612]	; (801d698 <etharp_find_entry+0x2e0>)
 801d434:	f003 ffc0 	bl	80213b8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801d438:	68fb      	ldr	r3, [r7, #12]
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d020      	beq.n	801d480 <etharp_find_entry+0xc8>
 801d43e:	68fb      	ldr	r3, [r7, #12]
 801d440:	6819      	ldr	r1, [r3, #0]
 801d442:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d446:	4891      	ldr	r0, [pc, #580]	; (801d68c <etharp_find_entry+0x2d4>)
 801d448:	4613      	mov	r3, r2
 801d44a:	005b      	lsls	r3, r3, #1
 801d44c:	4413      	add	r3, r2
 801d44e:	00db      	lsls	r3, r3, #3
 801d450:	4403      	add	r3, r0
 801d452:	3304      	adds	r3, #4
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	4299      	cmp	r1, r3
 801d458:	d112      	bne.n	801d480 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801d45a:	687b      	ldr	r3, [r7, #4]
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d00c      	beq.n	801d47a <etharp_find_entry+0xc2>
 801d460:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d464:	4989      	ldr	r1, [pc, #548]	; (801d68c <etharp_find_entry+0x2d4>)
 801d466:	4613      	mov	r3, r2
 801d468:	005b      	lsls	r3, r3, #1
 801d46a:	4413      	add	r3, r2
 801d46c:	00db      	lsls	r3, r3, #3
 801d46e:	440b      	add	r3, r1
 801d470:	3308      	adds	r3, #8
 801d472:	681b      	ldr	r3, [r3, #0]
 801d474:	687a      	ldr	r2, [r7, #4]
 801d476:	429a      	cmp	r2, r3
 801d478:	d102      	bne.n	801d480 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801d47a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d47e:	e100      	b.n	801d682 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801d480:	7dfb      	ldrb	r3, [r7, #23]
 801d482:	2b01      	cmp	r3, #1
 801d484:	d140      	bne.n	801d508 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801d486:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d48a:	4980      	ldr	r1, [pc, #512]	; (801d68c <etharp_find_entry+0x2d4>)
 801d48c:	4613      	mov	r3, r2
 801d48e:	005b      	lsls	r3, r3, #1
 801d490:	4413      	add	r3, r2
 801d492:	00db      	lsls	r3, r3, #3
 801d494:	440b      	add	r3, r1
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	2b00      	cmp	r3, #0
 801d49a:	d01a      	beq.n	801d4d2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801d49c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d4a0:	497a      	ldr	r1, [pc, #488]	; (801d68c <etharp_find_entry+0x2d4>)
 801d4a2:	4613      	mov	r3, r2
 801d4a4:	005b      	lsls	r3, r3, #1
 801d4a6:	4413      	add	r3, r2
 801d4a8:	00db      	lsls	r3, r3, #3
 801d4aa:	440b      	add	r3, r1
 801d4ac:	3312      	adds	r3, #18
 801d4ae:	881b      	ldrh	r3, [r3, #0]
 801d4b0:	8bba      	ldrh	r2, [r7, #28]
 801d4b2:	429a      	cmp	r2, r3
 801d4b4:	d845      	bhi.n	801d542 <etharp_find_entry+0x18a>
            old_queue = i;
 801d4b6:	8c3b      	ldrh	r3, [r7, #32]
 801d4b8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801d4ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d4be:	4973      	ldr	r1, [pc, #460]	; (801d68c <etharp_find_entry+0x2d4>)
 801d4c0:	4613      	mov	r3, r2
 801d4c2:	005b      	lsls	r3, r3, #1
 801d4c4:	4413      	add	r3, r2
 801d4c6:	00db      	lsls	r3, r3, #3
 801d4c8:	440b      	add	r3, r1
 801d4ca:	3312      	adds	r3, #18
 801d4cc:	881b      	ldrh	r3, [r3, #0]
 801d4ce:	83bb      	strh	r3, [r7, #28]
 801d4d0:	e037      	b.n	801d542 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801d4d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d4d6:	496d      	ldr	r1, [pc, #436]	; (801d68c <etharp_find_entry+0x2d4>)
 801d4d8:	4613      	mov	r3, r2
 801d4da:	005b      	lsls	r3, r3, #1
 801d4dc:	4413      	add	r3, r2
 801d4de:	00db      	lsls	r3, r3, #3
 801d4e0:	440b      	add	r3, r1
 801d4e2:	3312      	adds	r3, #18
 801d4e4:	881b      	ldrh	r3, [r3, #0]
 801d4e6:	8b7a      	ldrh	r2, [r7, #26]
 801d4e8:	429a      	cmp	r2, r3
 801d4ea:	d82a      	bhi.n	801d542 <etharp_find_entry+0x18a>
            old_pending = i;
 801d4ec:	8c3b      	ldrh	r3, [r7, #32]
 801d4ee:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801d4f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d4f4:	4965      	ldr	r1, [pc, #404]	; (801d68c <etharp_find_entry+0x2d4>)
 801d4f6:	4613      	mov	r3, r2
 801d4f8:	005b      	lsls	r3, r3, #1
 801d4fa:	4413      	add	r3, r2
 801d4fc:	00db      	lsls	r3, r3, #3
 801d4fe:	440b      	add	r3, r1
 801d500:	3312      	adds	r3, #18
 801d502:	881b      	ldrh	r3, [r3, #0]
 801d504:	837b      	strh	r3, [r7, #26]
 801d506:	e01c      	b.n	801d542 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801d508:	7dfb      	ldrb	r3, [r7, #23]
 801d50a:	2b01      	cmp	r3, #1
 801d50c:	d919      	bls.n	801d542 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801d50e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d512:	495e      	ldr	r1, [pc, #376]	; (801d68c <etharp_find_entry+0x2d4>)
 801d514:	4613      	mov	r3, r2
 801d516:	005b      	lsls	r3, r3, #1
 801d518:	4413      	add	r3, r2
 801d51a:	00db      	lsls	r3, r3, #3
 801d51c:	440b      	add	r3, r1
 801d51e:	3312      	adds	r3, #18
 801d520:	881b      	ldrh	r3, [r3, #0]
 801d522:	8b3a      	ldrh	r2, [r7, #24]
 801d524:	429a      	cmp	r2, r3
 801d526:	d80c      	bhi.n	801d542 <etharp_find_entry+0x18a>
            old_stable = i;
 801d528:	8c3b      	ldrh	r3, [r7, #32]
 801d52a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801d52c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d530:	4956      	ldr	r1, [pc, #344]	; (801d68c <etharp_find_entry+0x2d4>)
 801d532:	4613      	mov	r3, r2
 801d534:	005b      	lsls	r3, r3, #1
 801d536:	4413      	add	r3, r2
 801d538:	00db      	lsls	r3, r3, #3
 801d53a:	440b      	add	r3, r1
 801d53c:	3312      	adds	r3, #18
 801d53e:	881b      	ldrh	r3, [r3, #0]
 801d540:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d542:	8c3b      	ldrh	r3, [r7, #32]
 801d544:	3301      	adds	r3, #1
 801d546:	b29b      	uxth	r3, r3
 801d548:	843b      	strh	r3, [r7, #32]
 801d54a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d54e:	2b09      	cmp	r3, #9
 801d550:	f77f af4c 	ble.w	801d3ec <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801d554:	7afb      	ldrb	r3, [r7, #11]
 801d556:	f003 0302 	and.w	r3, r3, #2
 801d55a:	2b00      	cmp	r3, #0
 801d55c:	d108      	bne.n	801d570 <etharp_find_entry+0x1b8>
 801d55e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d562:	2b0a      	cmp	r3, #10
 801d564:	d107      	bne.n	801d576 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801d566:	7afb      	ldrb	r3, [r7, #11]
 801d568:	f003 0301 	and.w	r3, r3, #1
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d102      	bne.n	801d576 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801d570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d574:	e085      	b.n	801d682 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801d576:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801d57a:	2b09      	cmp	r3, #9
 801d57c:	dc02      	bgt.n	801d584 <etharp_find_entry+0x1cc>
    i = empty;
 801d57e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801d580:	843b      	strh	r3, [r7, #32]
 801d582:	e039      	b.n	801d5f8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801d584:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801d588:	2b09      	cmp	r3, #9
 801d58a:	dc14      	bgt.n	801d5b6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801d58c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d58e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801d590:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d594:	493d      	ldr	r1, [pc, #244]	; (801d68c <etharp_find_entry+0x2d4>)
 801d596:	4613      	mov	r3, r2
 801d598:	005b      	lsls	r3, r3, #1
 801d59a:	4413      	add	r3, r2
 801d59c:	00db      	lsls	r3, r3, #3
 801d59e:	440b      	add	r3, r1
 801d5a0:	681b      	ldr	r3, [r3, #0]
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d018      	beq.n	801d5d8 <etharp_find_entry+0x220>
 801d5a6:	4b3a      	ldr	r3, [pc, #232]	; (801d690 <etharp_find_entry+0x2d8>)
 801d5a8:	f240 126d 	movw	r2, #365	; 0x16d
 801d5ac:	493b      	ldr	r1, [pc, #236]	; (801d69c <etharp_find_entry+0x2e4>)
 801d5ae:	483a      	ldr	r0, [pc, #232]	; (801d698 <etharp_find_entry+0x2e0>)
 801d5b0:	f003 ff02 	bl	80213b8 <iprintf>
 801d5b4:	e010      	b.n	801d5d8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801d5b6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d5ba:	2b09      	cmp	r3, #9
 801d5bc:	dc02      	bgt.n	801d5c4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801d5be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d5c0:	843b      	strh	r3, [r7, #32]
 801d5c2:	e009      	b.n	801d5d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801d5c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d5c8:	2b09      	cmp	r3, #9
 801d5ca:	dc02      	bgt.n	801d5d2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801d5cc:	8bfb      	ldrh	r3, [r7, #30]
 801d5ce:	843b      	strh	r3, [r7, #32]
 801d5d0:	e002      	b.n	801d5d8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801d5d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801d5d6:	e054      	b.n	801d682 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d5d8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d5dc:	2b09      	cmp	r3, #9
 801d5de:	dd06      	ble.n	801d5ee <etharp_find_entry+0x236>
 801d5e0:	4b2b      	ldr	r3, [pc, #172]	; (801d690 <etharp_find_entry+0x2d8>)
 801d5e2:	f240 127f 	movw	r2, #383	; 0x17f
 801d5e6:	492e      	ldr	r1, [pc, #184]	; (801d6a0 <etharp_find_entry+0x2e8>)
 801d5e8:	482b      	ldr	r0, [pc, #172]	; (801d698 <etharp_find_entry+0x2e0>)
 801d5ea:	f003 fee5 	bl	80213b8 <iprintf>
    etharp_free_entry(i);
 801d5ee:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d5f2:	4618      	mov	r0, r3
 801d5f4:	f7ff fe06 	bl	801d204 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801d5f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801d5fc:	2b09      	cmp	r3, #9
 801d5fe:	dd06      	ble.n	801d60e <etharp_find_entry+0x256>
 801d600:	4b23      	ldr	r3, [pc, #140]	; (801d690 <etharp_find_entry+0x2d8>)
 801d602:	f240 1283 	movw	r2, #387	; 0x183
 801d606:	4926      	ldr	r1, [pc, #152]	; (801d6a0 <etharp_find_entry+0x2e8>)
 801d608:	4823      	ldr	r0, [pc, #140]	; (801d698 <etharp_find_entry+0x2e0>)
 801d60a:	f003 fed5 	bl	80213b8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801d60e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d612:	491e      	ldr	r1, [pc, #120]	; (801d68c <etharp_find_entry+0x2d4>)
 801d614:	4613      	mov	r3, r2
 801d616:	005b      	lsls	r3, r3, #1
 801d618:	4413      	add	r3, r2
 801d61a:	00db      	lsls	r3, r3, #3
 801d61c:	440b      	add	r3, r1
 801d61e:	3314      	adds	r3, #20
 801d620:	781b      	ldrb	r3, [r3, #0]
 801d622:	2b00      	cmp	r3, #0
 801d624:	d006      	beq.n	801d634 <etharp_find_entry+0x27c>
 801d626:	4b1a      	ldr	r3, [pc, #104]	; (801d690 <etharp_find_entry+0x2d8>)
 801d628:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801d62c:	491d      	ldr	r1, [pc, #116]	; (801d6a4 <etharp_find_entry+0x2ec>)
 801d62e:	481a      	ldr	r0, [pc, #104]	; (801d698 <etharp_find_entry+0x2e0>)
 801d630:	f003 fec2 	bl	80213b8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801d634:	68fb      	ldr	r3, [r7, #12]
 801d636:	2b00      	cmp	r3, #0
 801d638:	d00b      	beq.n	801d652 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801d63a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d63e:	68fb      	ldr	r3, [r7, #12]
 801d640:	6819      	ldr	r1, [r3, #0]
 801d642:	4812      	ldr	r0, [pc, #72]	; (801d68c <etharp_find_entry+0x2d4>)
 801d644:	4613      	mov	r3, r2
 801d646:	005b      	lsls	r3, r3, #1
 801d648:	4413      	add	r3, r2
 801d64a:	00db      	lsls	r3, r3, #3
 801d64c:	4403      	add	r3, r0
 801d64e:	3304      	adds	r3, #4
 801d650:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801d652:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d656:	490d      	ldr	r1, [pc, #52]	; (801d68c <etharp_find_entry+0x2d4>)
 801d658:	4613      	mov	r3, r2
 801d65a:	005b      	lsls	r3, r3, #1
 801d65c:	4413      	add	r3, r2
 801d65e:	00db      	lsls	r3, r3, #3
 801d660:	440b      	add	r3, r1
 801d662:	3312      	adds	r3, #18
 801d664:	2200      	movs	r2, #0
 801d666:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801d668:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801d66c:	4907      	ldr	r1, [pc, #28]	; (801d68c <etharp_find_entry+0x2d4>)
 801d66e:	4613      	mov	r3, r2
 801d670:	005b      	lsls	r3, r3, #1
 801d672:	4413      	add	r3, r2
 801d674:	00db      	lsls	r3, r3, #3
 801d676:	440b      	add	r3, r1
 801d678:	3308      	adds	r3, #8
 801d67a:	687a      	ldr	r2, [r7, #4]
 801d67c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801d67e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801d682:	4618      	mov	r0, r3
 801d684:	3728      	adds	r7, #40	; 0x28
 801d686:	46bd      	mov	sp, r7
 801d688:	bd80      	pop	{r7, pc}
 801d68a:	bf00      	nop
 801d68c:	20012364 	.word	0x20012364
 801d690:	0802674c 	.word	0x0802674c
 801d694:	08026784 	.word	0x08026784
 801d698:	080267c4 	.word	0x080267c4
 801d69c:	080267ec 	.word	0x080267ec
 801d6a0:	08026804 	.word	0x08026804
 801d6a4:	08026818 	.word	0x08026818

0801d6a8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801d6a8:	b580      	push	{r7, lr}
 801d6aa:	b088      	sub	sp, #32
 801d6ac:	af02      	add	r7, sp, #8
 801d6ae:	60f8      	str	r0, [r7, #12]
 801d6b0:	60b9      	str	r1, [r7, #8]
 801d6b2:	607a      	str	r2, [r7, #4]
 801d6b4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801d6b6:	68fb      	ldr	r3, [r7, #12]
 801d6b8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801d6bc:	2b06      	cmp	r3, #6
 801d6be:	d006      	beq.n	801d6ce <etharp_update_arp_entry+0x26>
 801d6c0:	4b48      	ldr	r3, [pc, #288]	; (801d7e4 <etharp_update_arp_entry+0x13c>)
 801d6c2:	f240 12a9 	movw	r2, #425	; 0x1a9
 801d6c6:	4948      	ldr	r1, [pc, #288]	; (801d7e8 <etharp_update_arp_entry+0x140>)
 801d6c8:	4848      	ldr	r0, [pc, #288]	; (801d7ec <etharp_update_arp_entry+0x144>)
 801d6ca:	f003 fe75 	bl	80213b8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801d6ce:	68bb      	ldr	r3, [r7, #8]
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	d012      	beq.n	801d6fa <etharp_update_arp_entry+0x52>
 801d6d4:	68bb      	ldr	r3, [r7, #8]
 801d6d6:	681b      	ldr	r3, [r3, #0]
 801d6d8:	2b00      	cmp	r3, #0
 801d6da:	d00e      	beq.n	801d6fa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d6dc:	68bb      	ldr	r3, [r7, #8]
 801d6de:	681b      	ldr	r3, [r3, #0]
 801d6e0:	68f9      	ldr	r1, [r7, #12]
 801d6e2:	4618      	mov	r0, r3
 801d6e4:	f001 f920 	bl	801e928 <ip4_addr_isbroadcast_u32>
 801d6e8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801d6ea:	2b00      	cmp	r3, #0
 801d6ec:	d105      	bne.n	801d6fa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801d6ee:	68bb      	ldr	r3, [r7, #8]
 801d6f0:	681b      	ldr	r3, [r3, #0]
 801d6f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801d6f6:	2be0      	cmp	r3, #224	; 0xe0
 801d6f8:	d102      	bne.n	801d700 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801d6fa:	f06f 030f 	mvn.w	r3, #15
 801d6fe:	e06c      	b.n	801d7da <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801d700:	78fb      	ldrb	r3, [r7, #3]
 801d702:	68fa      	ldr	r2, [r7, #12]
 801d704:	4619      	mov	r1, r3
 801d706:	68b8      	ldr	r0, [r7, #8]
 801d708:	f7ff fe56 	bl	801d3b8 <etharp_find_entry>
 801d70c:	4603      	mov	r3, r0
 801d70e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801d710:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801d714:	2b00      	cmp	r3, #0
 801d716:	da02      	bge.n	801d71e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801d718:	8afb      	ldrh	r3, [r7, #22]
 801d71a:	b25b      	sxtb	r3, r3
 801d71c:	e05d      	b.n	801d7da <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801d71e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d722:	4933      	ldr	r1, [pc, #204]	; (801d7f0 <etharp_update_arp_entry+0x148>)
 801d724:	4613      	mov	r3, r2
 801d726:	005b      	lsls	r3, r3, #1
 801d728:	4413      	add	r3, r2
 801d72a:	00db      	lsls	r3, r3, #3
 801d72c:	440b      	add	r3, r1
 801d72e:	3314      	adds	r3, #20
 801d730:	2202      	movs	r2, #2
 801d732:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801d734:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d738:	492d      	ldr	r1, [pc, #180]	; (801d7f0 <etharp_update_arp_entry+0x148>)
 801d73a:	4613      	mov	r3, r2
 801d73c:	005b      	lsls	r3, r3, #1
 801d73e:	4413      	add	r3, r2
 801d740:	00db      	lsls	r3, r3, #3
 801d742:	440b      	add	r3, r1
 801d744:	3308      	adds	r3, #8
 801d746:	68fa      	ldr	r2, [r7, #12]
 801d748:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801d74a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d74e:	4613      	mov	r3, r2
 801d750:	005b      	lsls	r3, r3, #1
 801d752:	4413      	add	r3, r2
 801d754:	00db      	lsls	r3, r3, #3
 801d756:	3308      	adds	r3, #8
 801d758:	4a25      	ldr	r2, [pc, #148]	; (801d7f0 <etharp_update_arp_entry+0x148>)
 801d75a:	4413      	add	r3, r2
 801d75c:	3304      	adds	r3, #4
 801d75e:	2206      	movs	r2, #6
 801d760:	6879      	ldr	r1, [r7, #4]
 801d762:	4618      	mov	r0, r3
 801d764:	f004 f947 	bl	80219f6 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801d768:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d76c:	4920      	ldr	r1, [pc, #128]	; (801d7f0 <etharp_update_arp_entry+0x148>)
 801d76e:	4613      	mov	r3, r2
 801d770:	005b      	lsls	r3, r3, #1
 801d772:	4413      	add	r3, r2
 801d774:	00db      	lsls	r3, r3, #3
 801d776:	440b      	add	r3, r1
 801d778:	3312      	adds	r3, #18
 801d77a:	2200      	movs	r2, #0
 801d77c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801d77e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d782:	491b      	ldr	r1, [pc, #108]	; (801d7f0 <etharp_update_arp_entry+0x148>)
 801d784:	4613      	mov	r3, r2
 801d786:	005b      	lsls	r3, r3, #1
 801d788:	4413      	add	r3, r2
 801d78a:	00db      	lsls	r3, r3, #3
 801d78c:	440b      	add	r3, r1
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	2b00      	cmp	r3, #0
 801d792:	d021      	beq.n	801d7d8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801d794:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d798:	4915      	ldr	r1, [pc, #84]	; (801d7f0 <etharp_update_arp_entry+0x148>)
 801d79a:	4613      	mov	r3, r2
 801d79c:	005b      	lsls	r3, r3, #1
 801d79e:	4413      	add	r3, r2
 801d7a0:	00db      	lsls	r3, r3, #3
 801d7a2:	440b      	add	r3, r1
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801d7a8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801d7ac:	4910      	ldr	r1, [pc, #64]	; (801d7f0 <etharp_update_arp_entry+0x148>)
 801d7ae:	4613      	mov	r3, r2
 801d7b0:	005b      	lsls	r3, r3, #1
 801d7b2:	4413      	add	r3, r2
 801d7b4:	00db      	lsls	r3, r3, #3
 801d7b6:	440b      	add	r3, r1
 801d7b8:	2200      	movs	r2, #0
 801d7ba:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801d7bc:	68fb      	ldr	r3, [r7, #12]
 801d7be:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801d7c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d7c6:	9300      	str	r3, [sp, #0]
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	6939      	ldr	r1, [r7, #16]
 801d7cc:	68f8      	ldr	r0, [r7, #12]
 801d7ce:	f002 f849 	bl	801f864 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801d7d2:	6938      	ldr	r0, [r7, #16]
 801d7d4:	f7f6 fcac 	bl	8014130 <pbuf_free>
  }
  return ERR_OK;
 801d7d8:	2300      	movs	r3, #0
}
 801d7da:	4618      	mov	r0, r3
 801d7dc:	3718      	adds	r7, #24
 801d7de:	46bd      	mov	sp, r7
 801d7e0:	bd80      	pop	{r7, pc}
 801d7e2:	bf00      	nop
 801d7e4:	0802674c 	.word	0x0802674c
 801d7e8:	08026844 	.word	0x08026844
 801d7ec:	080267c4 	.word	0x080267c4
 801d7f0:	20012364 	.word	0x20012364

0801d7f4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801d7f4:	b580      	push	{r7, lr}
 801d7f6:	b084      	sub	sp, #16
 801d7f8:	af00      	add	r7, sp, #0
 801d7fa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d7fc:	2300      	movs	r3, #0
 801d7fe:	60fb      	str	r3, [r7, #12]
 801d800:	e01e      	b.n	801d840 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801d802:	4913      	ldr	r1, [pc, #76]	; (801d850 <etharp_cleanup_netif+0x5c>)
 801d804:	68fa      	ldr	r2, [r7, #12]
 801d806:	4613      	mov	r3, r2
 801d808:	005b      	lsls	r3, r3, #1
 801d80a:	4413      	add	r3, r2
 801d80c:	00db      	lsls	r3, r3, #3
 801d80e:	440b      	add	r3, r1
 801d810:	3314      	adds	r3, #20
 801d812:	781b      	ldrb	r3, [r3, #0]
 801d814:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801d816:	7afb      	ldrb	r3, [r7, #11]
 801d818:	2b00      	cmp	r3, #0
 801d81a:	d00e      	beq.n	801d83a <etharp_cleanup_netif+0x46>
 801d81c:	490c      	ldr	r1, [pc, #48]	; (801d850 <etharp_cleanup_netif+0x5c>)
 801d81e:	68fa      	ldr	r2, [r7, #12]
 801d820:	4613      	mov	r3, r2
 801d822:	005b      	lsls	r3, r3, #1
 801d824:	4413      	add	r3, r2
 801d826:	00db      	lsls	r3, r3, #3
 801d828:	440b      	add	r3, r1
 801d82a:	3308      	adds	r3, #8
 801d82c:	681b      	ldr	r3, [r3, #0]
 801d82e:	687a      	ldr	r2, [r7, #4]
 801d830:	429a      	cmp	r2, r3
 801d832:	d102      	bne.n	801d83a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801d834:	68f8      	ldr	r0, [r7, #12]
 801d836:	f7ff fce5 	bl	801d204 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801d83a:	68fb      	ldr	r3, [r7, #12]
 801d83c:	3301      	adds	r3, #1
 801d83e:	60fb      	str	r3, [r7, #12]
 801d840:	68fb      	ldr	r3, [r7, #12]
 801d842:	2b09      	cmp	r3, #9
 801d844:	dddd      	ble.n	801d802 <etharp_cleanup_netif+0xe>
    }
  }
}
 801d846:	bf00      	nop
 801d848:	bf00      	nop
 801d84a:	3710      	adds	r7, #16
 801d84c:	46bd      	mov	sp, r7
 801d84e:	bd80      	pop	{r7, pc}
 801d850:	20012364 	.word	0x20012364

0801d854 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801d854:	b5b0      	push	{r4, r5, r7, lr}
 801d856:	b08a      	sub	sp, #40	; 0x28
 801d858:	af04      	add	r7, sp, #16
 801d85a:	6078      	str	r0, [r7, #4]
 801d85c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801d85e:	683b      	ldr	r3, [r7, #0]
 801d860:	2b00      	cmp	r3, #0
 801d862:	d107      	bne.n	801d874 <etharp_input+0x20>
 801d864:	4b3f      	ldr	r3, [pc, #252]	; (801d964 <etharp_input+0x110>)
 801d866:	f240 228a 	movw	r2, #650	; 0x28a
 801d86a:	493f      	ldr	r1, [pc, #252]	; (801d968 <etharp_input+0x114>)
 801d86c:	483f      	ldr	r0, [pc, #252]	; (801d96c <etharp_input+0x118>)
 801d86e:	f003 fda3 	bl	80213b8 <iprintf>
 801d872:	e074      	b.n	801d95e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801d874:	687b      	ldr	r3, [r7, #4]
 801d876:	685b      	ldr	r3, [r3, #4]
 801d878:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d87a:	693b      	ldr	r3, [r7, #16]
 801d87c:	881b      	ldrh	r3, [r3, #0]
 801d87e:	b29b      	uxth	r3, r3
 801d880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d884:	d10c      	bne.n	801d8a0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d886:	693b      	ldr	r3, [r7, #16]
 801d888:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801d88a:	2b06      	cmp	r3, #6
 801d88c:	d108      	bne.n	801d8a0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d88e:	693b      	ldr	r3, [r7, #16]
 801d890:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801d892:	2b04      	cmp	r3, #4
 801d894:	d104      	bne.n	801d8a0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801d896:	693b      	ldr	r3, [r7, #16]
 801d898:	885b      	ldrh	r3, [r3, #2]
 801d89a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801d89c:	2b08      	cmp	r3, #8
 801d89e:	d003      	beq.n	801d8a8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801d8a0:	6878      	ldr	r0, [r7, #4]
 801d8a2:	f7f6 fc45 	bl	8014130 <pbuf_free>
    return;
 801d8a6:	e05a      	b.n	801d95e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801d8a8:	693b      	ldr	r3, [r7, #16]
 801d8aa:	330e      	adds	r3, #14
 801d8ac:	681b      	ldr	r3, [r3, #0]
 801d8ae:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801d8b0:	693b      	ldr	r3, [r7, #16]
 801d8b2:	3318      	adds	r3, #24
 801d8b4:	681b      	ldr	r3, [r3, #0]
 801d8b6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801d8b8:	683b      	ldr	r3, [r7, #0]
 801d8ba:	3304      	adds	r3, #4
 801d8bc:	681b      	ldr	r3, [r3, #0]
 801d8be:	2b00      	cmp	r3, #0
 801d8c0:	d102      	bne.n	801d8c8 <etharp_input+0x74>
    for_us = 0;
 801d8c2:	2300      	movs	r3, #0
 801d8c4:	75fb      	strb	r3, [r7, #23]
 801d8c6:	e009      	b.n	801d8dc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801d8c8:	68ba      	ldr	r2, [r7, #8]
 801d8ca:	683b      	ldr	r3, [r7, #0]
 801d8cc:	3304      	adds	r3, #4
 801d8ce:	681b      	ldr	r3, [r3, #0]
 801d8d0:	429a      	cmp	r2, r3
 801d8d2:	bf0c      	ite	eq
 801d8d4:	2301      	moveq	r3, #1
 801d8d6:	2300      	movne	r3, #0
 801d8d8:	b2db      	uxtb	r3, r3
 801d8da:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801d8dc:	693b      	ldr	r3, [r7, #16]
 801d8de:	f103 0208 	add.w	r2, r3, #8
 801d8e2:	7dfb      	ldrb	r3, [r7, #23]
 801d8e4:	2b00      	cmp	r3, #0
 801d8e6:	d001      	beq.n	801d8ec <etharp_input+0x98>
 801d8e8:	2301      	movs	r3, #1
 801d8ea:	e000      	b.n	801d8ee <etharp_input+0x9a>
 801d8ec:	2302      	movs	r3, #2
 801d8ee:	f107 010c 	add.w	r1, r7, #12
 801d8f2:	6838      	ldr	r0, [r7, #0]
 801d8f4:	f7ff fed8 	bl	801d6a8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801d8f8:	693b      	ldr	r3, [r7, #16]
 801d8fa:	88db      	ldrh	r3, [r3, #6]
 801d8fc:	b29b      	uxth	r3, r3
 801d8fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d902:	d003      	beq.n	801d90c <etharp_input+0xb8>
 801d904:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d908:	d01e      	beq.n	801d948 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801d90a:	e025      	b.n	801d958 <etharp_input+0x104>
      if (for_us) {
 801d90c:	7dfb      	ldrb	r3, [r7, #23]
 801d90e:	2b00      	cmp	r3, #0
 801d910:	d021      	beq.n	801d956 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801d912:	683b      	ldr	r3, [r7, #0]
 801d914:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801d918:	693b      	ldr	r3, [r7, #16]
 801d91a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801d91e:	683b      	ldr	r3, [r7, #0]
 801d920:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 801d924:	683b      	ldr	r3, [r7, #0]
 801d926:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801d928:	693a      	ldr	r2, [r7, #16]
 801d92a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801d92c:	2102      	movs	r1, #2
 801d92e:	9103      	str	r1, [sp, #12]
 801d930:	f107 010c 	add.w	r1, r7, #12
 801d934:	9102      	str	r1, [sp, #8]
 801d936:	9201      	str	r2, [sp, #4]
 801d938:	9300      	str	r3, [sp, #0]
 801d93a:	462b      	mov	r3, r5
 801d93c:	4622      	mov	r2, r4
 801d93e:	4601      	mov	r1, r0
 801d940:	6838      	ldr	r0, [r7, #0]
 801d942:	f000 faef 	bl	801df24 <etharp_raw>
      break;
 801d946:	e006      	b.n	801d956 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801d948:	f107 030c 	add.w	r3, r7, #12
 801d94c:	4619      	mov	r1, r3
 801d94e:	6838      	ldr	r0, [r7, #0]
 801d950:	f7fe f9fc 	bl	801bd4c <dhcp_arp_reply>
      break;
 801d954:	e000      	b.n	801d958 <etharp_input+0x104>
      break;
 801d956:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801d958:	6878      	ldr	r0, [r7, #4]
 801d95a:	f7f6 fbe9 	bl	8014130 <pbuf_free>
}
 801d95e:	3718      	adds	r7, #24
 801d960:	46bd      	mov	sp, r7
 801d962:	bdb0      	pop	{r4, r5, r7, pc}
 801d964:	0802674c 	.word	0x0802674c
 801d968:	0802689c 	.word	0x0802689c
 801d96c:	080267c4 	.word	0x080267c4

0801d970 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801d970:	b580      	push	{r7, lr}
 801d972:	b086      	sub	sp, #24
 801d974:	af02      	add	r7, sp, #8
 801d976:	60f8      	str	r0, [r7, #12]
 801d978:	60b9      	str	r1, [r7, #8]
 801d97a:	4613      	mov	r3, r2
 801d97c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801d97e:	79fa      	ldrb	r2, [r7, #7]
 801d980:	4944      	ldr	r1, [pc, #272]	; (801da94 <etharp_output_to_arp_index+0x124>)
 801d982:	4613      	mov	r3, r2
 801d984:	005b      	lsls	r3, r3, #1
 801d986:	4413      	add	r3, r2
 801d988:	00db      	lsls	r3, r3, #3
 801d98a:	440b      	add	r3, r1
 801d98c:	3314      	adds	r3, #20
 801d98e:	781b      	ldrb	r3, [r3, #0]
 801d990:	2b01      	cmp	r3, #1
 801d992:	d806      	bhi.n	801d9a2 <etharp_output_to_arp_index+0x32>
 801d994:	4b40      	ldr	r3, [pc, #256]	; (801da98 <etharp_output_to_arp_index+0x128>)
 801d996:	f240 22ee 	movw	r2, #750	; 0x2ee
 801d99a:	4940      	ldr	r1, [pc, #256]	; (801da9c <etharp_output_to_arp_index+0x12c>)
 801d99c:	4840      	ldr	r0, [pc, #256]	; (801daa0 <etharp_output_to_arp_index+0x130>)
 801d99e:	f003 fd0b 	bl	80213b8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801d9a2:	79fa      	ldrb	r2, [r7, #7]
 801d9a4:	493b      	ldr	r1, [pc, #236]	; (801da94 <etharp_output_to_arp_index+0x124>)
 801d9a6:	4613      	mov	r3, r2
 801d9a8:	005b      	lsls	r3, r3, #1
 801d9aa:	4413      	add	r3, r2
 801d9ac:	00db      	lsls	r3, r3, #3
 801d9ae:	440b      	add	r3, r1
 801d9b0:	3314      	adds	r3, #20
 801d9b2:	781b      	ldrb	r3, [r3, #0]
 801d9b4:	2b02      	cmp	r3, #2
 801d9b6:	d153      	bne.n	801da60 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801d9b8:	79fa      	ldrb	r2, [r7, #7]
 801d9ba:	4936      	ldr	r1, [pc, #216]	; (801da94 <etharp_output_to_arp_index+0x124>)
 801d9bc:	4613      	mov	r3, r2
 801d9be:	005b      	lsls	r3, r3, #1
 801d9c0:	4413      	add	r3, r2
 801d9c2:	00db      	lsls	r3, r3, #3
 801d9c4:	440b      	add	r3, r1
 801d9c6:	3312      	adds	r3, #18
 801d9c8:	881b      	ldrh	r3, [r3, #0]
 801d9ca:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801d9ce:	d919      	bls.n	801da04 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801d9d0:	79fa      	ldrb	r2, [r7, #7]
 801d9d2:	4613      	mov	r3, r2
 801d9d4:	005b      	lsls	r3, r3, #1
 801d9d6:	4413      	add	r3, r2
 801d9d8:	00db      	lsls	r3, r3, #3
 801d9da:	4a2e      	ldr	r2, [pc, #184]	; (801da94 <etharp_output_to_arp_index+0x124>)
 801d9dc:	4413      	add	r3, r2
 801d9de:	3304      	adds	r3, #4
 801d9e0:	4619      	mov	r1, r3
 801d9e2:	68f8      	ldr	r0, [r7, #12]
 801d9e4:	f000 fb4c 	bl	801e080 <etharp_request>
 801d9e8:	4603      	mov	r3, r0
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d138      	bne.n	801da60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801d9ee:	79fa      	ldrb	r2, [r7, #7]
 801d9f0:	4928      	ldr	r1, [pc, #160]	; (801da94 <etharp_output_to_arp_index+0x124>)
 801d9f2:	4613      	mov	r3, r2
 801d9f4:	005b      	lsls	r3, r3, #1
 801d9f6:	4413      	add	r3, r2
 801d9f8:	00db      	lsls	r3, r3, #3
 801d9fa:	440b      	add	r3, r1
 801d9fc:	3314      	adds	r3, #20
 801d9fe:	2203      	movs	r2, #3
 801da00:	701a      	strb	r2, [r3, #0]
 801da02:	e02d      	b.n	801da60 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801da04:	79fa      	ldrb	r2, [r7, #7]
 801da06:	4923      	ldr	r1, [pc, #140]	; (801da94 <etharp_output_to_arp_index+0x124>)
 801da08:	4613      	mov	r3, r2
 801da0a:	005b      	lsls	r3, r3, #1
 801da0c:	4413      	add	r3, r2
 801da0e:	00db      	lsls	r3, r3, #3
 801da10:	440b      	add	r3, r1
 801da12:	3312      	adds	r3, #18
 801da14:	881b      	ldrh	r3, [r3, #0]
 801da16:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801da1a:	d321      	bcc.n	801da60 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801da1c:	79fa      	ldrb	r2, [r7, #7]
 801da1e:	4613      	mov	r3, r2
 801da20:	005b      	lsls	r3, r3, #1
 801da22:	4413      	add	r3, r2
 801da24:	00db      	lsls	r3, r3, #3
 801da26:	4a1b      	ldr	r2, [pc, #108]	; (801da94 <etharp_output_to_arp_index+0x124>)
 801da28:	4413      	add	r3, r2
 801da2a:	1d19      	adds	r1, r3, #4
 801da2c:	79fa      	ldrb	r2, [r7, #7]
 801da2e:	4613      	mov	r3, r2
 801da30:	005b      	lsls	r3, r3, #1
 801da32:	4413      	add	r3, r2
 801da34:	00db      	lsls	r3, r3, #3
 801da36:	3308      	adds	r3, #8
 801da38:	4a16      	ldr	r2, [pc, #88]	; (801da94 <etharp_output_to_arp_index+0x124>)
 801da3a:	4413      	add	r3, r2
 801da3c:	3304      	adds	r3, #4
 801da3e:	461a      	mov	r2, r3
 801da40:	68f8      	ldr	r0, [r7, #12]
 801da42:	f000 fafb 	bl	801e03c <etharp_request_dst>
 801da46:	4603      	mov	r3, r0
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d109      	bne.n	801da60 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801da4c:	79fa      	ldrb	r2, [r7, #7]
 801da4e:	4911      	ldr	r1, [pc, #68]	; (801da94 <etharp_output_to_arp_index+0x124>)
 801da50:	4613      	mov	r3, r2
 801da52:	005b      	lsls	r3, r3, #1
 801da54:	4413      	add	r3, r2
 801da56:	00db      	lsls	r3, r3, #3
 801da58:	440b      	add	r3, r1
 801da5a:	3314      	adds	r3, #20
 801da5c:	2203      	movs	r2, #3
 801da5e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801da60:	68fb      	ldr	r3, [r7, #12]
 801da62:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801da66:	79fa      	ldrb	r2, [r7, #7]
 801da68:	4613      	mov	r3, r2
 801da6a:	005b      	lsls	r3, r3, #1
 801da6c:	4413      	add	r3, r2
 801da6e:	00db      	lsls	r3, r3, #3
 801da70:	3308      	adds	r3, #8
 801da72:	4a08      	ldr	r2, [pc, #32]	; (801da94 <etharp_output_to_arp_index+0x124>)
 801da74:	4413      	add	r3, r2
 801da76:	3304      	adds	r3, #4
 801da78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801da7c:	9200      	str	r2, [sp, #0]
 801da7e:	460a      	mov	r2, r1
 801da80:	68b9      	ldr	r1, [r7, #8]
 801da82:	68f8      	ldr	r0, [r7, #12]
 801da84:	f001 feee 	bl	801f864 <ethernet_output>
 801da88:	4603      	mov	r3, r0
}
 801da8a:	4618      	mov	r0, r3
 801da8c:	3710      	adds	r7, #16
 801da8e:	46bd      	mov	sp, r7
 801da90:	bd80      	pop	{r7, pc}
 801da92:	bf00      	nop
 801da94:	20012364 	.word	0x20012364
 801da98:	0802674c 	.word	0x0802674c
 801da9c:	080268bc 	.word	0x080268bc
 801daa0:	080267c4 	.word	0x080267c4

0801daa4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801daa4:	b580      	push	{r7, lr}
 801daa6:	b08a      	sub	sp, #40	; 0x28
 801daa8:	af02      	add	r7, sp, #8
 801daaa:	60f8      	str	r0, [r7, #12]
 801daac:	60b9      	str	r1, [r7, #8]
 801daae:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801dab4:	68fb      	ldr	r3, [r7, #12]
 801dab6:	2b00      	cmp	r3, #0
 801dab8:	d106      	bne.n	801dac8 <etharp_output+0x24>
 801daba:	4b73      	ldr	r3, [pc, #460]	; (801dc88 <etharp_output+0x1e4>)
 801dabc:	f240 321e 	movw	r2, #798	; 0x31e
 801dac0:	4972      	ldr	r1, [pc, #456]	; (801dc8c <etharp_output+0x1e8>)
 801dac2:	4873      	ldr	r0, [pc, #460]	; (801dc90 <etharp_output+0x1ec>)
 801dac4:	f003 fc78 	bl	80213b8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801dac8:	68bb      	ldr	r3, [r7, #8]
 801daca:	2b00      	cmp	r3, #0
 801dacc:	d106      	bne.n	801dadc <etharp_output+0x38>
 801dace:	4b6e      	ldr	r3, [pc, #440]	; (801dc88 <etharp_output+0x1e4>)
 801dad0:	f240 321f 	movw	r2, #799	; 0x31f
 801dad4:	496f      	ldr	r1, [pc, #444]	; (801dc94 <etharp_output+0x1f0>)
 801dad6:	486e      	ldr	r0, [pc, #440]	; (801dc90 <etharp_output+0x1ec>)
 801dad8:	f003 fc6e 	bl	80213b8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	d106      	bne.n	801daf0 <etharp_output+0x4c>
 801dae2:	4b69      	ldr	r3, [pc, #420]	; (801dc88 <etharp_output+0x1e4>)
 801dae4:	f44f 7248 	mov.w	r2, #800	; 0x320
 801dae8:	496b      	ldr	r1, [pc, #428]	; (801dc98 <etharp_output+0x1f4>)
 801daea:	4869      	ldr	r0, [pc, #420]	; (801dc90 <etharp_output+0x1ec>)
 801daec:	f003 fc64 	bl	80213b8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801daf0:	687b      	ldr	r3, [r7, #4]
 801daf2:	681b      	ldr	r3, [r3, #0]
 801daf4:	68f9      	ldr	r1, [r7, #12]
 801daf6:	4618      	mov	r0, r3
 801daf8:	f000 ff16 	bl	801e928 <ip4_addr_isbroadcast_u32>
 801dafc:	4603      	mov	r3, r0
 801dafe:	2b00      	cmp	r3, #0
 801db00:	d002      	beq.n	801db08 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801db02:	4b66      	ldr	r3, [pc, #408]	; (801dc9c <etharp_output+0x1f8>)
 801db04:	61fb      	str	r3, [r7, #28]
 801db06:	e0af      	b.n	801dc68 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	681b      	ldr	r3, [r3, #0]
 801db0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801db10:	2be0      	cmp	r3, #224	; 0xe0
 801db12:	d118      	bne.n	801db46 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801db14:	2301      	movs	r3, #1
 801db16:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801db18:	2300      	movs	r3, #0
 801db1a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801db1c:	235e      	movs	r3, #94	; 0x5e
 801db1e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801db20:	687b      	ldr	r3, [r7, #4]
 801db22:	3301      	adds	r3, #1
 801db24:	781b      	ldrb	r3, [r3, #0]
 801db26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db2a:	b2db      	uxtb	r3, r3
 801db2c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	3302      	adds	r3, #2
 801db32:	781b      	ldrb	r3, [r3, #0]
 801db34:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801db36:	687b      	ldr	r3, [r7, #4]
 801db38:	3303      	adds	r3, #3
 801db3a:	781b      	ldrb	r3, [r3, #0]
 801db3c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801db3e:	f107 0310 	add.w	r3, r7, #16
 801db42:	61fb      	str	r3, [r7, #28]
 801db44:	e090      	b.n	801dc68 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801db46:	687b      	ldr	r3, [r7, #4]
 801db48:	681a      	ldr	r2, [r3, #0]
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	3304      	adds	r3, #4
 801db4e:	681b      	ldr	r3, [r3, #0]
 801db50:	405a      	eors	r2, r3
 801db52:	68fb      	ldr	r3, [r7, #12]
 801db54:	3308      	adds	r3, #8
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	4013      	ands	r3, r2
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d012      	beq.n	801db84 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801db5e:	687b      	ldr	r3, [r7, #4]
 801db60:	681b      	ldr	r3, [r3, #0]
 801db62:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801db64:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801db68:	4293      	cmp	r3, r2
 801db6a:	d00b      	beq.n	801db84 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	330c      	adds	r3, #12
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	2b00      	cmp	r3, #0
 801db74:	d003      	beq.n	801db7e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801db76:	68fb      	ldr	r3, [r7, #12]
 801db78:	330c      	adds	r3, #12
 801db7a:	61bb      	str	r3, [r7, #24]
 801db7c:	e002      	b.n	801db84 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801db7e:	f06f 0303 	mvn.w	r3, #3
 801db82:	e07d      	b.n	801dc80 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801db84:	4b46      	ldr	r3, [pc, #280]	; (801dca0 <etharp_output+0x1fc>)
 801db86:	781b      	ldrb	r3, [r3, #0]
 801db88:	4619      	mov	r1, r3
 801db8a:	4a46      	ldr	r2, [pc, #280]	; (801dca4 <etharp_output+0x200>)
 801db8c:	460b      	mov	r3, r1
 801db8e:	005b      	lsls	r3, r3, #1
 801db90:	440b      	add	r3, r1
 801db92:	00db      	lsls	r3, r3, #3
 801db94:	4413      	add	r3, r2
 801db96:	3314      	adds	r3, #20
 801db98:	781b      	ldrb	r3, [r3, #0]
 801db9a:	2b01      	cmp	r3, #1
 801db9c:	d925      	bls.n	801dbea <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801db9e:	4b40      	ldr	r3, [pc, #256]	; (801dca0 <etharp_output+0x1fc>)
 801dba0:	781b      	ldrb	r3, [r3, #0]
 801dba2:	4619      	mov	r1, r3
 801dba4:	4a3f      	ldr	r2, [pc, #252]	; (801dca4 <etharp_output+0x200>)
 801dba6:	460b      	mov	r3, r1
 801dba8:	005b      	lsls	r3, r3, #1
 801dbaa:	440b      	add	r3, r1
 801dbac:	00db      	lsls	r3, r3, #3
 801dbae:	4413      	add	r3, r2
 801dbb0:	3308      	adds	r3, #8
 801dbb2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801dbb4:	68fa      	ldr	r2, [r7, #12]
 801dbb6:	429a      	cmp	r2, r3
 801dbb8:	d117      	bne.n	801dbea <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801dbba:	69bb      	ldr	r3, [r7, #24]
 801dbbc:	681a      	ldr	r2, [r3, #0]
 801dbbe:	4b38      	ldr	r3, [pc, #224]	; (801dca0 <etharp_output+0x1fc>)
 801dbc0:	781b      	ldrb	r3, [r3, #0]
 801dbc2:	4618      	mov	r0, r3
 801dbc4:	4937      	ldr	r1, [pc, #220]	; (801dca4 <etharp_output+0x200>)
 801dbc6:	4603      	mov	r3, r0
 801dbc8:	005b      	lsls	r3, r3, #1
 801dbca:	4403      	add	r3, r0
 801dbcc:	00db      	lsls	r3, r3, #3
 801dbce:	440b      	add	r3, r1
 801dbd0:	3304      	adds	r3, #4
 801dbd2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801dbd4:	429a      	cmp	r2, r3
 801dbd6:	d108      	bne.n	801dbea <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801dbd8:	4b31      	ldr	r3, [pc, #196]	; (801dca0 <etharp_output+0x1fc>)
 801dbda:	781b      	ldrb	r3, [r3, #0]
 801dbdc:	461a      	mov	r2, r3
 801dbde:	68b9      	ldr	r1, [r7, #8]
 801dbe0:	68f8      	ldr	r0, [r7, #12]
 801dbe2:	f7ff fec5 	bl	801d970 <etharp_output_to_arp_index>
 801dbe6:	4603      	mov	r3, r0
 801dbe8:	e04a      	b.n	801dc80 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801dbea:	2300      	movs	r3, #0
 801dbec:	75fb      	strb	r3, [r7, #23]
 801dbee:	e031      	b.n	801dc54 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801dbf0:	7dfa      	ldrb	r2, [r7, #23]
 801dbf2:	492c      	ldr	r1, [pc, #176]	; (801dca4 <etharp_output+0x200>)
 801dbf4:	4613      	mov	r3, r2
 801dbf6:	005b      	lsls	r3, r3, #1
 801dbf8:	4413      	add	r3, r2
 801dbfa:	00db      	lsls	r3, r3, #3
 801dbfc:	440b      	add	r3, r1
 801dbfe:	3314      	adds	r3, #20
 801dc00:	781b      	ldrb	r3, [r3, #0]
 801dc02:	2b01      	cmp	r3, #1
 801dc04:	d923      	bls.n	801dc4e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801dc06:	7dfa      	ldrb	r2, [r7, #23]
 801dc08:	4926      	ldr	r1, [pc, #152]	; (801dca4 <etharp_output+0x200>)
 801dc0a:	4613      	mov	r3, r2
 801dc0c:	005b      	lsls	r3, r3, #1
 801dc0e:	4413      	add	r3, r2
 801dc10:	00db      	lsls	r3, r3, #3
 801dc12:	440b      	add	r3, r1
 801dc14:	3308      	adds	r3, #8
 801dc16:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801dc18:	68fa      	ldr	r2, [r7, #12]
 801dc1a:	429a      	cmp	r2, r3
 801dc1c:	d117      	bne.n	801dc4e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801dc1e:	69bb      	ldr	r3, [r7, #24]
 801dc20:	6819      	ldr	r1, [r3, #0]
 801dc22:	7dfa      	ldrb	r2, [r7, #23]
 801dc24:	481f      	ldr	r0, [pc, #124]	; (801dca4 <etharp_output+0x200>)
 801dc26:	4613      	mov	r3, r2
 801dc28:	005b      	lsls	r3, r3, #1
 801dc2a:	4413      	add	r3, r2
 801dc2c:	00db      	lsls	r3, r3, #3
 801dc2e:	4403      	add	r3, r0
 801dc30:	3304      	adds	r3, #4
 801dc32:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801dc34:	4299      	cmp	r1, r3
 801dc36:	d10a      	bne.n	801dc4e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801dc38:	4a19      	ldr	r2, [pc, #100]	; (801dca0 <etharp_output+0x1fc>)
 801dc3a:	7dfb      	ldrb	r3, [r7, #23]
 801dc3c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801dc3e:	7dfb      	ldrb	r3, [r7, #23]
 801dc40:	461a      	mov	r2, r3
 801dc42:	68b9      	ldr	r1, [r7, #8]
 801dc44:	68f8      	ldr	r0, [r7, #12]
 801dc46:	f7ff fe93 	bl	801d970 <etharp_output_to_arp_index>
 801dc4a:	4603      	mov	r3, r0
 801dc4c:	e018      	b.n	801dc80 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801dc4e:	7dfb      	ldrb	r3, [r7, #23]
 801dc50:	3301      	adds	r3, #1
 801dc52:	75fb      	strb	r3, [r7, #23]
 801dc54:	7dfb      	ldrb	r3, [r7, #23]
 801dc56:	2b09      	cmp	r3, #9
 801dc58:	d9ca      	bls.n	801dbf0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801dc5a:	68ba      	ldr	r2, [r7, #8]
 801dc5c:	69b9      	ldr	r1, [r7, #24]
 801dc5e:	68f8      	ldr	r0, [r7, #12]
 801dc60:	f000 f822 	bl	801dca8 <etharp_query>
 801dc64:	4603      	mov	r3, r0
 801dc66:	e00b      	b.n	801dc80 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801dc6e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801dc72:	9300      	str	r3, [sp, #0]
 801dc74:	69fb      	ldr	r3, [r7, #28]
 801dc76:	68b9      	ldr	r1, [r7, #8]
 801dc78:	68f8      	ldr	r0, [r7, #12]
 801dc7a:	f001 fdf3 	bl	801f864 <ethernet_output>
 801dc7e:	4603      	mov	r3, r0
}
 801dc80:	4618      	mov	r0, r3
 801dc82:	3720      	adds	r7, #32
 801dc84:	46bd      	mov	sp, r7
 801dc86:	bd80      	pop	{r7, pc}
 801dc88:	0802674c 	.word	0x0802674c
 801dc8c:	0802689c 	.word	0x0802689c
 801dc90:	080267c4 	.word	0x080267c4
 801dc94:	080268ec 	.word	0x080268ec
 801dc98:	0802688c 	.word	0x0802688c
 801dc9c:	08027078 	.word	0x08027078
 801dca0:	20012454 	.word	0x20012454
 801dca4:	20012364 	.word	0x20012364

0801dca8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801dca8:	b580      	push	{r7, lr}
 801dcaa:	b08c      	sub	sp, #48	; 0x30
 801dcac:	af02      	add	r7, sp, #8
 801dcae:	60f8      	str	r0, [r7, #12]
 801dcb0:	60b9      	str	r1, [r7, #8]
 801dcb2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801dcb4:	68fb      	ldr	r3, [r7, #12]
 801dcb6:	332a      	adds	r3, #42	; 0x2a
 801dcb8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801dcba:	23ff      	movs	r3, #255	; 0xff
 801dcbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801dcc0:	2300      	movs	r3, #0
 801dcc2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801dcc4:	68bb      	ldr	r3, [r7, #8]
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	68f9      	ldr	r1, [r7, #12]
 801dcca:	4618      	mov	r0, r3
 801dccc:	f000 fe2c 	bl	801e928 <ip4_addr_isbroadcast_u32>
 801dcd0:	4603      	mov	r3, r0
 801dcd2:	2b00      	cmp	r3, #0
 801dcd4:	d10c      	bne.n	801dcf0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801dcd6:	68bb      	ldr	r3, [r7, #8]
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801dcde:	2be0      	cmp	r3, #224	; 0xe0
 801dce0:	d006      	beq.n	801dcf0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801dce2:	68bb      	ldr	r3, [r7, #8]
 801dce4:	2b00      	cmp	r3, #0
 801dce6:	d003      	beq.n	801dcf0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801dce8:	68bb      	ldr	r3, [r7, #8]
 801dcea:	681b      	ldr	r3, [r3, #0]
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d102      	bne.n	801dcf6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801dcf0:	f06f 030f 	mvn.w	r3, #15
 801dcf4:	e101      	b.n	801defa <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801dcf6:	68fa      	ldr	r2, [r7, #12]
 801dcf8:	2101      	movs	r1, #1
 801dcfa:	68b8      	ldr	r0, [r7, #8]
 801dcfc:	f7ff fb5c 	bl	801d3b8 <etharp_find_entry>
 801dd00:	4603      	mov	r3, r0
 801dd02:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801dd04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	da02      	bge.n	801dd12 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801dd0c:	8a7b      	ldrh	r3, [r7, #18]
 801dd0e:	b25b      	sxtb	r3, r3
 801dd10:	e0f3      	b.n	801defa <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801dd12:	8a7b      	ldrh	r3, [r7, #18]
 801dd14:	2b7e      	cmp	r3, #126	; 0x7e
 801dd16:	d906      	bls.n	801dd26 <etharp_query+0x7e>
 801dd18:	4b7a      	ldr	r3, [pc, #488]	; (801df04 <etharp_query+0x25c>)
 801dd1a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801dd1e:	497a      	ldr	r1, [pc, #488]	; (801df08 <etharp_query+0x260>)
 801dd20:	487a      	ldr	r0, [pc, #488]	; (801df0c <etharp_query+0x264>)
 801dd22:	f003 fb49 	bl	80213b8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801dd26:	8a7b      	ldrh	r3, [r7, #18]
 801dd28:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801dd2a:	7c7a      	ldrb	r2, [r7, #17]
 801dd2c:	4978      	ldr	r1, [pc, #480]	; (801df10 <etharp_query+0x268>)
 801dd2e:	4613      	mov	r3, r2
 801dd30:	005b      	lsls	r3, r3, #1
 801dd32:	4413      	add	r3, r2
 801dd34:	00db      	lsls	r3, r3, #3
 801dd36:	440b      	add	r3, r1
 801dd38:	3314      	adds	r3, #20
 801dd3a:	781b      	ldrb	r3, [r3, #0]
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	d115      	bne.n	801dd6c <etharp_query+0xc4>
    is_new_entry = 1;
 801dd40:	2301      	movs	r3, #1
 801dd42:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801dd44:	7c7a      	ldrb	r2, [r7, #17]
 801dd46:	4972      	ldr	r1, [pc, #456]	; (801df10 <etharp_query+0x268>)
 801dd48:	4613      	mov	r3, r2
 801dd4a:	005b      	lsls	r3, r3, #1
 801dd4c:	4413      	add	r3, r2
 801dd4e:	00db      	lsls	r3, r3, #3
 801dd50:	440b      	add	r3, r1
 801dd52:	3314      	adds	r3, #20
 801dd54:	2201      	movs	r2, #1
 801dd56:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801dd58:	7c7a      	ldrb	r2, [r7, #17]
 801dd5a:	496d      	ldr	r1, [pc, #436]	; (801df10 <etharp_query+0x268>)
 801dd5c:	4613      	mov	r3, r2
 801dd5e:	005b      	lsls	r3, r3, #1
 801dd60:	4413      	add	r3, r2
 801dd62:	00db      	lsls	r3, r3, #3
 801dd64:	440b      	add	r3, r1
 801dd66:	3308      	adds	r3, #8
 801dd68:	68fa      	ldr	r2, [r7, #12]
 801dd6a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801dd6c:	7c7a      	ldrb	r2, [r7, #17]
 801dd6e:	4968      	ldr	r1, [pc, #416]	; (801df10 <etharp_query+0x268>)
 801dd70:	4613      	mov	r3, r2
 801dd72:	005b      	lsls	r3, r3, #1
 801dd74:	4413      	add	r3, r2
 801dd76:	00db      	lsls	r3, r3, #3
 801dd78:	440b      	add	r3, r1
 801dd7a:	3314      	adds	r3, #20
 801dd7c:	781b      	ldrb	r3, [r3, #0]
 801dd7e:	2b01      	cmp	r3, #1
 801dd80:	d011      	beq.n	801dda6 <etharp_query+0xfe>
 801dd82:	7c7a      	ldrb	r2, [r7, #17]
 801dd84:	4962      	ldr	r1, [pc, #392]	; (801df10 <etharp_query+0x268>)
 801dd86:	4613      	mov	r3, r2
 801dd88:	005b      	lsls	r3, r3, #1
 801dd8a:	4413      	add	r3, r2
 801dd8c:	00db      	lsls	r3, r3, #3
 801dd8e:	440b      	add	r3, r1
 801dd90:	3314      	adds	r3, #20
 801dd92:	781b      	ldrb	r3, [r3, #0]
 801dd94:	2b01      	cmp	r3, #1
 801dd96:	d806      	bhi.n	801dda6 <etharp_query+0xfe>
 801dd98:	4b5a      	ldr	r3, [pc, #360]	; (801df04 <etharp_query+0x25c>)
 801dd9a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801dd9e:	495d      	ldr	r1, [pc, #372]	; (801df14 <etharp_query+0x26c>)
 801dda0:	485a      	ldr	r0, [pc, #360]	; (801df0c <etharp_query+0x264>)
 801dda2:	f003 fb09 	bl	80213b8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801dda6:	6a3b      	ldr	r3, [r7, #32]
 801dda8:	2b00      	cmp	r3, #0
 801ddaa:	d102      	bne.n	801ddb2 <etharp_query+0x10a>
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	2b00      	cmp	r3, #0
 801ddb0:	d10c      	bne.n	801ddcc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ddb2:	68b9      	ldr	r1, [r7, #8]
 801ddb4:	68f8      	ldr	r0, [r7, #12]
 801ddb6:	f000 f963 	bl	801e080 <etharp_request>
 801ddba:	4603      	mov	r3, r0
 801ddbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ddc0:	687b      	ldr	r3, [r7, #4]
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d102      	bne.n	801ddcc <etharp_query+0x124>
      return result;
 801ddc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801ddca:	e096      	b.n	801defa <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	2b00      	cmp	r3, #0
 801ddd0:	d106      	bne.n	801dde0 <etharp_query+0x138>
 801ddd2:	4b4c      	ldr	r3, [pc, #304]	; (801df04 <etharp_query+0x25c>)
 801ddd4:	f240 32e1 	movw	r2, #993	; 0x3e1
 801ddd8:	494f      	ldr	r1, [pc, #316]	; (801df18 <etharp_query+0x270>)
 801ddda:	484c      	ldr	r0, [pc, #304]	; (801df0c <etharp_query+0x264>)
 801dddc:	f003 faec 	bl	80213b8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801dde0:	7c7a      	ldrb	r2, [r7, #17]
 801dde2:	494b      	ldr	r1, [pc, #300]	; (801df10 <etharp_query+0x268>)
 801dde4:	4613      	mov	r3, r2
 801dde6:	005b      	lsls	r3, r3, #1
 801dde8:	4413      	add	r3, r2
 801ddea:	00db      	lsls	r3, r3, #3
 801ddec:	440b      	add	r3, r1
 801ddee:	3314      	adds	r3, #20
 801ddf0:	781b      	ldrb	r3, [r3, #0]
 801ddf2:	2b01      	cmp	r3, #1
 801ddf4:	d917      	bls.n	801de26 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ddf6:	4a49      	ldr	r2, [pc, #292]	; (801df1c <etharp_query+0x274>)
 801ddf8:	7c7b      	ldrb	r3, [r7, #17]
 801ddfa:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ddfc:	7c7a      	ldrb	r2, [r7, #17]
 801ddfe:	4613      	mov	r3, r2
 801de00:	005b      	lsls	r3, r3, #1
 801de02:	4413      	add	r3, r2
 801de04:	00db      	lsls	r3, r3, #3
 801de06:	3308      	adds	r3, #8
 801de08:	4a41      	ldr	r2, [pc, #260]	; (801df10 <etharp_query+0x268>)
 801de0a:	4413      	add	r3, r2
 801de0c:	3304      	adds	r3, #4
 801de0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801de12:	9200      	str	r2, [sp, #0]
 801de14:	697a      	ldr	r2, [r7, #20]
 801de16:	6879      	ldr	r1, [r7, #4]
 801de18:	68f8      	ldr	r0, [r7, #12]
 801de1a:	f001 fd23 	bl	801f864 <ethernet_output>
 801de1e:	4603      	mov	r3, r0
 801de20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801de24:	e067      	b.n	801def6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801de26:	7c7a      	ldrb	r2, [r7, #17]
 801de28:	4939      	ldr	r1, [pc, #228]	; (801df10 <etharp_query+0x268>)
 801de2a:	4613      	mov	r3, r2
 801de2c:	005b      	lsls	r3, r3, #1
 801de2e:	4413      	add	r3, r2
 801de30:	00db      	lsls	r3, r3, #3
 801de32:	440b      	add	r3, r1
 801de34:	3314      	adds	r3, #20
 801de36:	781b      	ldrb	r3, [r3, #0]
 801de38:	2b01      	cmp	r3, #1
 801de3a:	d15c      	bne.n	801def6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801de3c:	2300      	movs	r3, #0
 801de3e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801de40:	687b      	ldr	r3, [r7, #4]
 801de42:	61fb      	str	r3, [r7, #28]
    while (p) {
 801de44:	e01c      	b.n	801de80 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801de46:	69fb      	ldr	r3, [r7, #28]
 801de48:	895a      	ldrh	r2, [r3, #10]
 801de4a:	69fb      	ldr	r3, [r7, #28]
 801de4c:	891b      	ldrh	r3, [r3, #8]
 801de4e:	429a      	cmp	r2, r3
 801de50:	d10a      	bne.n	801de68 <etharp_query+0x1c0>
 801de52:	69fb      	ldr	r3, [r7, #28]
 801de54:	681b      	ldr	r3, [r3, #0]
 801de56:	2b00      	cmp	r3, #0
 801de58:	d006      	beq.n	801de68 <etharp_query+0x1c0>
 801de5a:	4b2a      	ldr	r3, [pc, #168]	; (801df04 <etharp_query+0x25c>)
 801de5c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801de60:	492f      	ldr	r1, [pc, #188]	; (801df20 <etharp_query+0x278>)
 801de62:	482a      	ldr	r0, [pc, #168]	; (801df0c <etharp_query+0x264>)
 801de64:	f003 faa8 	bl	80213b8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801de68:	69fb      	ldr	r3, [r7, #28]
 801de6a:	7b1b      	ldrb	r3, [r3, #12]
 801de6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801de70:	2b00      	cmp	r3, #0
 801de72:	d002      	beq.n	801de7a <etharp_query+0x1d2>
        copy_needed = 1;
 801de74:	2301      	movs	r3, #1
 801de76:	61bb      	str	r3, [r7, #24]
        break;
 801de78:	e005      	b.n	801de86 <etharp_query+0x1de>
      }
      p = p->next;
 801de7a:	69fb      	ldr	r3, [r7, #28]
 801de7c:	681b      	ldr	r3, [r3, #0]
 801de7e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801de80:	69fb      	ldr	r3, [r7, #28]
 801de82:	2b00      	cmp	r3, #0
 801de84:	d1df      	bne.n	801de46 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801de86:	69bb      	ldr	r3, [r7, #24]
 801de88:	2b00      	cmp	r3, #0
 801de8a:	d007      	beq.n	801de9c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801de8c:	687a      	ldr	r2, [r7, #4]
 801de8e:	f44f 7120 	mov.w	r1, #640	; 0x280
 801de92:	200e      	movs	r0, #14
 801de94:	f7f6 fbc4 	bl	8014620 <pbuf_clone>
 801de98:	61f8      	str	r0, [r7, #28]
 801de9a:	e004      	b.n	801dea6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801de9c:	687b      	ldr	r3, [r7, #4]
 801de9e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801dea0:	69f8      	ldr	r0, [r7, #28]
 801dea2:	f7f6 f9eb 	bl	801427c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801dea6:	69fb      	ldr	r3, [r7, #28]
 801dea8:	2b00      	cmp	r3, #0
 801deaa:	d021      	beq.n	801def0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801deac:	7c7a      	ldrb	r2, [r7, #17]
 801deae:	4918      	ldr	r1, [pc, #96]	; (801df10 <etharp_query+0x268>)
 801deb0:	4613      	mov	r3, r2
 801deb2:	005b      	lsls	r3, r3, #1
 801deb4:	4413      	add	r3, r2
 801deb6:	00db      	lsls	r3, r3, #3
 801deb8:	440b      	add	r3, r1
 801deba:	681b      	ldr	r3, [r3, #0]
 801debc:	2b00      	cmp	r3, #0
 801debe:	d00a      	beq.n	801ded6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801dec0:	7c7a      	ldrb	r2, [r7, #17]
 801dec2:	4913      	ldr	r1, [pc, #76]	; (801df10 <etharp_query+0x268>)
 801dec4:	4613      	mov	r3, r2
 801dec6:	005b      	lsls	r3, r3, #1
 801dec8:	4413      	add	r3, r2
 801deca:	00db      	lsls	r3, r3, #3
 801decc:	440b      	add	r3, r1
 801dece:	681b      	ldr	r3, [r3, #0]
 801ded0:	4618      	mov	r0, r3
 801ded2:	f7f6 f92d 	bl	8014130 <pbuf_free>
      }
      arp_table[i].q = p;
 801ded6:	7c7a      	ldrb	r2, [r7, #17]
 801ded8:	490d      	ldr	r1, [pc, #52]	; (801df10 <etharp_query+0x268>)
 801deda:	4613      	mov	r3, r2
 801dedc:	005b      	lsls	r3, r3, #1
 801dede:	4413      	add	r3, r2
 801dee0:	00db      	lsls	r3, r3, #3
 801dee2:	440b      	add	r3, r1
 801dee4:	69fa      	ldr	r2, [r7, #28]
 801dee6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801dee8:	2300      	movs	r3, #0
 801deea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801deee:	e002      	b.n	801def6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801def0:	23ff      	movs	r3, #255	; 0xff
 801def2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801def6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801defa:	4618      	mov	r0, r3
 801defc:	3728      	adds	r7, #40	; 0x28
 801defe:	46bd      	mov	sp, r7
 801df00:	bd80      	pop	{r7, pc}
 801df02:	bf00      	nop
 801df04:	0802674c 	.word	0x0802674c
 801df08:	080268f8 	.word	0x080268f8
 801df0c:	080267c4 	.word	0x080267c4
 801df10:	20012364 	.word	0x20012364
 801df14:	08026908 	.word	0x08026908
 801df18:	080268ec 	.word	0x080268ec
 801df1c:	20012454 	.word	0x20012454
 801df20:	08026930 	.word	0x08026930

0801df24 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801df24:	b580      	push	{r7, lr}
 801df26:	b08a      	sub	sp, #40	; 0x28
 801df28:	af02      	add	r7, sp, #8
 801df2a:	60f8      	str	r0, [r7, #12]
 801df2c:	60b9      	str	r1, [r7, #8]
 801df2e:	607a      	str	r2, [r7, #4]
 801df30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801df32:	2300      	movs	r3, #0
 801df34:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	2b00      	cmp	r3, #0
 801df3a:	d106      	bne.n	801df4a <etharp_raw+0x26>
 801df3c:	4b3a      	ldr	r3, [pc, #232]	; (801e028 <etharp_raw+0x104>)
 801df3e:	f240 4257 	movw	r2, #1111	; 0x457
 801df42:	493a      	ldr	r1, [pc, #232]	; (801e02c <etharp_raw+0x108>)
 801df44:	483a      	ldr	r0, [pc, #232]	; (801e030 <etharp_raw+0x10c>)
 801df46:	f003 fa37 	bl	80213b8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801df4a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801df4e:	211c      	movs	r1, #28
 801df50:	200e      	movs	r0, #14
 801df52:	f7f5 fe09 	bl	8013b68 <pbuf_alloc>
 801df56:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801df58:	69bb      	ldr	r3, [r7, #24]
 801df5a:	2b00      	cmp	r3, #0
 801df5c:	d102      	bne.n	801df64 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801df5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801df62:	e05d      	b.n	801e020 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801df64:	69bb      	ldr	r3, [r7, #24]
 801df66:	895b      	ldrh	r3, [r3, #10]
 801df68:	2b1b      	cmp	r3, #27
 801df6a:	d806      	bhi.n	801df7a <etharp_raw+0x56>
 801df6c:	4b2e      	ldr	r3, [pc, #184]	; (801e028 <etharp_raw+0x104>)
 801df6e:	f240 4262 	movw	r2, #1122	; 0x462
 801df72:	4930      	ldr	r1, [pc, #192]	; (801e034 <etharp_raw+0x110>)
 801df74:	482e      	ldr	r0, [pc, #184]	; (801e030 <etharp_raw+0x10c>)
 801df76:	f003 fa1f 	bl	80213b8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801df7a:	69bb      	ldr	r3, [r7, #24]
 801df7c:	685b      	ldr	r3, [r3, #4]
 801df7e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801df80:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801df82:	4618      	mov	r0, r3
 801df84:	f7f4 fcd6 	bl	8012934 <lwip_htons>
 801df88:	4603      	mov	r3, r0
 801df8a:	461a      	mov	r2, r3
 801df8c:	697b      	ldr	r3, [r7, #20]
 801df8e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801df90:	68fb      	ldr	r3, [r7, #12]
 801df92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801df96:	2b06      	cmp	r3, #6
 801df98:	d006      	beq.n	801dfa8 <etharp_raw+0x84>
 801df9a:	4b23      	ldr	r3, [pc, #140]	; (801e028 <etharp_raw+0x104>)
 801df9c:	f240 4269 	movw	r2, #1129	; 0x469
 801dfa0:	4925      	ldr	r1, [pc, #148]	; (801e038 <etharp_raw+0x114>)
 801dfa2:	4823      	ldr	r0, [pc, #140]	; (801e030 <etharp_raw+0x10c>)
 801dfa4:	f003 fa08 	bl	80213b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801dfa8:	697b      	ldr	r3, [r7, #20]
 801dfaa:	3308      	adds	r3, #8
 801dfac:	2206      	movs	r2, #6
 801dfae:	6839      	ldr	r1, [r7, #0]
 801dfb0:	4618      	mov	r0, r3
 801dfb2:	f003 fd20 	bl	80219f6 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801dfb6:	697b      	ldr	r3, [r7, #20]
 801dfb8:	3312      	adds	r3, #18
 801dfba:	2206      	movs	r2, #6
 801dfbc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801dfbe:	4618      	mov	r0, r3
 801dfc0:	f003 fd19 	bl	80219f6 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801dfc4:	697b      	ldr	r3, [r7, #20]
 801dfc6:	330e      	adds	r3, #14
 801dfc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dfca:	6812      	ldr	r2, [r2, #0]
 801dfcc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801dfce:	697b      	ldr	r3, [r7, #20]
 801dfd0:	3318      	adds	r3, #24
 801dfd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dfd4:	6812      	ldr	r2, [r2, #0]
 801dfd6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801dfd8:	697b      	ldr	r3, [r7, #20]
 801dfda:	2200      	movs	r2, #0
 801dfdc:	701a      	strb	r2, [r3, #0]
 801dfde:	2200      	movs	r2, #0
 801dfe0:	f042 0201 	orr.w	r2, r2, #1
 801dfe4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801dfe6:	697b      	ldr	r3, [r7, #20]
 801dfe8:	2200      	movs	r2, #0
 801dfea:	f042 0208 	orr.w	r2, r2, #8
 801dfee:	709a      	strb	r2, [r3, #2]
 801dff0:	2200      	movs	r2, #0
 801dff2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801dff4:	697b      	ldr	r3, [r7, #20]
 801dff6:	2206      	movs	r2, #6
 801dff8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801dffa:	697b      	ldr	r3, [r7, #20]
 801dffc:	2204      	movs	r2, #4
 801dffe:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801e000:	f640 0306 	movw	r3, #2054	; 0x806
 801e004:	9300      	str	r3, [sp, #0]
 801e006:	687b      	ldr	r3, [r7, #4]
 801e008:	68ba      	ldr	r2, [r7, #8]
 801e00a:	69b9      	ldr	r1, [r7, #24]
 801e00c:	68f8      	ldr	r0, [r7, #12]
 801e00e:	f001 fc29 	bl	801f864 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801e012:	69b8      	ldr	r0, [r7, #24]
 801e014:	f7f6 f88c 	bl	8014130 <pbuf_free>
  p = NULL;
 801e018:	2300      	movs	r3, #0
 801e01a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801e01c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801e020:	4618      	mov	r0, r3
 801e022:	3720      	adds	r7, #32
 801e024:	46bd      	mov	sp, r7
 801e026:	bd80      	pop	{r7, pc}
 801e028:	0802674c 	.word	0x0802674c
 801e02c:	0802689c 	.word	0x0802689c
 801e030:	080267c4 	.word	0x080267c4
 801e034:	0802694c 	.word	0x0802694c
 801e038:	08026980 	.word	0x08026980

0801e03c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801e03c:	b580      	push	{r7, lr}
 801e03e:	b088      	sub	sp, #32
 801e040:	af04      	add	r7, sp, #16
 801e042:	60f8      	str	r0, [r7, #12]
 801e044:	60b9      	str	r1, [r7, #8]
 801e046:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801e04e:	68fb      	ldr	r3, [r7, #12]
 801e050:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801e058:	2201      	movs	r2, #1
 801e05a:	9203      	str	r2, [sp, #12]
 801e05c:	68ba      	ldr	r2, [r7, #8]
 801e05e:	9202      	str	r2, [sp, #8]
 801e060:	4a06      	ldr	r2, [pc, #24]	; (801e07c <etharp_request_dst+0x40>)
 801e062:	9201      	str	r2, [sp, #4]
 801e064:	9300      	str	r3, [sp, #0]
 801e066:	4603      	mov	r3, r0
 801e068:	687a      	ldr	r2, [r7, #4]
 801e06a:	68f8      	ldr	r0, [r7, #12]
 801e06c:	f7ff ff5a 	bl	801df24 <etharp_raw>
 801e070:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801e072:	4618      	mov	r0, r3
 801e074:	3710      	adds	r7, #16
 801e076:	46bd      	mov	sp, r7
 801e078:	bd80      	pop	{r7, pc}
 801e07a:	bf00      	nop
 801e07c:	08027080 	.word	0x08027080

0801e080 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801e080:	b580      	push	{r7, lr}
 801e082:	b082      	sub	sp, #8
 801e084:	af00      	add	r7, sp, #0
 801e086:	6078      	str	r0, [r7, #4]
 801e088:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801e08a:	4a05      	ldr	r2, [pc, #20]	; (801e0a0 <etharp_request+0x20>)
 801e08c:	6839      	ldr	r1, [r7, #0]
 801e08e:	6878      	ldr	r0, [r7, #4]
 801e090:	f7ff ffd4 	bl	801e03c <etharp_request_dst>
 801e094:	4603      	mov	r3, r0
}
 801e096:	4618      	mov	r0, r3
 801e098:	3708      	adds	r7, #8
 801e09a:	46bd      	mov	sp, r7
 801e09c:	bd80      	pop	{r7, pc}
 801e09e:	bf00      	nop
 801e0a0:	08027078 	.word	0x08027078

0801e0a4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801e0a4:	b580      	push	{r7, lr}
 801e0a6:	b08e      	sub	sp, #56	; 0x38
 801e0a8:	af04      	add	r7, sp, #16
 801e0aa:	6078      	str	r0, [r7, #4]
 801e0ac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801e0ae:	4b79      	ldr	r3, [pc, #484]	; (801e294 <icmp_input+0x1f0>)
 801e0b0:	689b      	ldr	r3, [r3, #8]
 801e0b2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801e0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0b6:	781b      	ldrb	r3, [r3, #0]
 801e0b8:	f003 030f 	and.w	r3, r3, #15
 801e0bc:	b2db      	uxtb	r3, r3
 801e0be:	009b      	lsls	r3, r3, #2
 801e0c0:	b2db      	uxtb	r3, r3
 801e0c2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801e0c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e0c6:	2b13      	cmp	r3, #19
 801e0c8:	f240 80cd 	bls.w	801e266 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801e0cc:	687b      	ldr	r3, [r7, #4]
 801e0ce:	895b      	ldrh	r3, [r3, #10]
 801e0d0:	2b03      	cmp	r3, #3
 801e0d2:	f240 80ca 	bls.w	801e26a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801e0d6:	687b      	ldr	r3, [r7, #4]
 801e0d8:	685b      	ldr	r3, [r3, #4]
 801e0da:	781b      	ldrb	r3, [r3, #0]
 801e0dc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801e0e0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801e0e4:	2b00      	cmp	r3, #0
 801e0e6:	f000 80b7 	beq.w	801e258 <icmp_input+0x1b4>
 801e0ea:	2b08      	cmp	r3, #8
 801e0ec:	f040 80b7 	bne.w	801e25e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801e0f0:	4b69      	ldr	r3, [pc, #420]	; (801e298 <icmp_input+0x1f4>)
 801e0f2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e0f4:	4b67      	ldr	r3, [pc, #412]	; (801e294 <icmp_input+0x1f0>)
 801e0f6:	695b      	ldr	r3, [r3, #20]
 801e0f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e0fc:	2be0      	cmp	r3, #224	; 0xe0
 801e0fe:	f000 80bb 	beq.w	801e278 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801e102:	4b64      	ldr	r3, [pc, #400]	; (801e294 <icmp_input+0x1f0>)
 801e104:	695b      	ldr	r3, [r3, #20]
 801e106:	4a63      	ldr	r2, [pc, #396]	; (801e294 <icmp_input+0x1f0>)
 801e108:	6812      	ldr	r2, [r2, #0]
 801e10a:	4611      	mov	r1, r2
 801e10c:	4618      	mov	r0, r3
 801e10e:	f000 fc0b 	bl	801e928 <ip4_addr_isbroadcast_u32>
 801e112:	4603      	mov	r3, r0
 801e114:	2b00      	cmp	r3, #0
 801e116:	f040 80b1 	bne.w	801e27c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801e11a:	687b      	ldr	r3, [r7, #4]
 801e11c:	891b      	ldrh	r3, [r3, #8]
 801e11e:	2b07      	cmp	r3, #7
 801e120:	f240 80a5 	bls.w	801e26e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e126:	330e      	adds	r3, #14
 801e128:	4619      	mov	r1, r3
 801e12a:	6878      	ldr	r0, [r7, #4]
 801e12c:	f7f5 ff6a 	bl	8014004 <pbuf_add_header>
 801e130:	4603      	mov	r3, r0
 801e132:	2b00      	cmp	r3, #0
 801e134:	d04b      	beq.n	801e1ce <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801e136:	687b      	ldr	r3, [r7, #4]
 801e138:	891a      	ldrh	r2, [r3, #8]
 801e13a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e13c:	4413      	add	r3, r2
 801e13e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801e140:	687b      	ldr	r3, [r7, #4]
 801e142:	891b      	ldrh	r3, [r3, #8]
 801e144:	8b7a      	ldrh	r2, [r7, #26]
 801e146:	429a      	cmp	r2, r3
 801e148:	f0c0 809a 	bcc.w	801e280 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801e14c:	8b7b      	ldrh	r3, [r7, #26]
 801e14e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e152:	4619      	mov	r1, r3
 801e154:	200e      	movs	r0, #14
 801e156:	f7f5 fd07 	bl	8013b68 <pbuf_alloc>
 801e15a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801e15c:	697b      	ldr	r3, [r7, #20]
 801e15e:	2b00      	cmp	r3, #0
 801e160:	f000 8090 	beq.w	801e284 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801e164:	697b      	ldr	r3, [r7, #20]
 801e166:	895b      	ldrh	r3, [r3, #10]
 801e168:	461a      	mov	r2, r3
 801e16a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e16c:	3308      	adds	r3, #8
 801e16e:	429a      	cmp	r2, r3
 801e170:	d203      	bcs.n	801e17a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801e172:	6978      	ldr	r0, [r7, #20]
 801e174:	f7f5 ffdc 	bl	8014130 <pbuf_free>
          goto icmperr;
 801e178:	e085      	b.n	801e286 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801e17a:	697b      	ldr	r3, [r7, #20]
 801e17c:	685b      	ldr	r3, [r3, #4]
 801e17e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801e180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801e182:	4618      	mov	r0, r3
 801e184:	f003 fc37 	bl	80219f6 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801e188:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e18a:	4619      	mov	r1, r3
 801e18c:	6978      	ldr	r0, [r7, #20]
 801e18e:	f7f5 ff49 	bl	8014024 <pbuf_remove_header>
 801e192:	4603      	mov	r3, r0
 801e194:	2b00      	cmp	r3, #0
 801e196:	d009      	beq.n	801e1ac <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801e198:	4b40      	ldr	r3, [pc, #256]	; (801e29c <icmp_input+0x1f8>)
 801e19a:	22b6      	movs	r2, #182	; 0xb6
 801e19c:	4940      	ldr	r1, [pc, #256]	; (801e2a0 <icmp_input+0x1fc>)
 801e19e:	4841      	ldr	r0, [pc, #260]	; (801e2a4 <icmp_input+0x200>)
 801e1a0:	f003 f90a 	bl	80213b8 <iprintf>
          pbuf_free(r);
 801e1a4:	6978      	ldr	r0, [r7, #20]
 801e1a6:	f7f5 ffc3 	bl	8014130 <pbuf_free>
          goto icmperr;
 801e1aa:	e06c      	b.n	801e286 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801e1ac:	6879      	ldr	r1, [r7, #4]
 801e1ae:	6978      	ldr	r0, [r7, #20]
 801e1b0:	f7f6 f8f2 	bl	8014398 <pbuf_copy>
 801e1b4:	4603      	mov	r3, r0
 801e1b6:	2b00      	cmp	r3, #0
 801e1b8:	d003      	beq.n	801e1c2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801e1ba:	6978      	ldr	r0, [r7, #20]
 801e1bc:	f7f5 ffb8 	bl	8014130 <pbuf_free>
          goto icmperr;
 801e1c0:	e061      	b.n	801e286 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801e1c2:	6878      	ldr	r0, [r7, #4]
 801e1c4:	f7f5 ffb4 	bl	8014130 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801e1c8:	697b      	ldr	r3, [r7, #20]
 801e1ca:	607b      	str	r3, [r7, #4]
 801e1cc:	e00f      	b.n	801e1ee <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801e1ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e1d0:	330e      	adds	r3, #14
 801e1d2:	4619      	mov	r1, r3
 801e1d4:	6878      	ldr	r0, [r7, #4]
 801e1d6:	f7f5 ff25 	bl	8014024 <pbuf_remove_header>
 801e1da:	4603      	mov	r3, r0
 801e1dc:	2b00      	cmp	r3, #0
 801e1de:	d006      	beq.n	801e1ee <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801e1e0:	4b2e      	ldr	r3, [pc, #184]	; (801e29c <icmp_input+0x1f8>)
 801e1e2:	22c7      	movs	r2, #199	; 0xc7
 801e1e4:	4930      	ldr	r1, [pc, #192]	; (801e2a8 <icmp_input+0x204>)
 801e1e6:	482f      	ldr	r0, [pc, #188]	; (801e2a4 <icmp_input+0x200>)
 801e1e8:	f003 f8e6 	bl	80213b8 <iprintf>
          goto icmperr;
 801e1ec:	e04b      	b.n	801e286 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801e1ee:	687b      	ldr	r3, [r7, #4]
 801e1f0:	685b      	ldr	r3, [r3, #4]
 801e1f2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801e1f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e1f6:	4619      	mov	r1, r3
 801e1f8:	6878      	ldr	r0, [r7, #4]
 801e1fa:	f7f5 ff03 	bl	8014004 <pbuf_add_header>
 801e1fe:	4603      	mov	r3, r0
 801e200:	2b00      	cmp	r3, #0
 801e202:	d12b      	bne.n	801e25c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801e204:	687b      	ldr	r3, [r7, #4]
 801e206:	685b      	ldr	r3, [r3, #4]
 801e208:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801e20a:	69fb      	ldr	r3, [r7, #28]
 801e20c:	681a      	ldr	r2, [r3, #0]
 801e20e:	68fb      	ldr	r3, [r7, #12]
 801e210:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801e212:	4b20      	ldr	r3, [pc, #128]	; (801e294 <icmp_input+0x1f0>)
 801e214:	691a      	ldr	r2, [r3, #16]
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801e21a:	693b      	ldr	r3, [r7, #16]
 801e21c:	2200      	movs	r2, #0
 801e21e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801e220:	693b      	ldr	r3, [r7, #16]
 801e222:	2200      	movs	r2, #0
 801e224:	709a      	strb	r2, [r3, #2]
 801e226:	2200      	movs	r2, #0
 801e228:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801e22a:	68fb      	ldr	r3, [r7, #12]
 801e22c:	22ff      	movs	r2, #255	; 0xff
 801e22e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	2200      	movs	r2, #0
 801e234:	729a      	strb	r2, [r3, #10]
 801e236:	2200      	movs	r2, #0
 801e238:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801e23a:	683b      	ldr	r3, [r7, #0]
 801e23c:	9302      	str	r3, [sp, #8]
 801e23e:	2301      	movs	r3, #1
 801e240:	9301      	str	r3, [sp, #4]
 801e242:	2300      	movs	r3, #0
 801e244:	9300      	str	r3, [sp, #0]
 801e246:	23ff      	movs	r3, #255	; 0xff
 801e248:	2200      	movs	r2, #0
 801e24a:	69f9      	ldr	r1, [r7, #28]
 801e24c:	6878      	ldr	r0, [r7, #4]
 801e24e:	f000 fa93 	bl	801e778 <ip4_output_if>
 801e252:	4603      	mov	r3, r0
 801e254:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801e256:	e001      	b.n	801e25c <icmp_input+0x1b8>
      break;
 801e258:	bf00      	nop
 801e25a:	e000      	b.n	801e25e <icmp_input+0x1ba>
      break;
 801e25c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801e25e:	6878      	ldr	r0, [r7, #4]
 801e260:	f7f5 ff66 	bl	8014130 <pbuf_free>
  return;
 801e264:	e013      	b.n	801e28e <icmp_input+0x1ea>
    goto lenerr;
 801e266:	bf00      	nop
 801e268:	e002      	b.n	801e270 <icmp_input+0x1cc>
    goto lenerr;
 801e26a:	bf00      	nop
 801e26c:	e000      	b.n	801e270 <icmp_input+0x1cc>
        goto lenerr;
 801e26e:	bf00      	nop
lenerr:
  pbuf_free(p);
 801e270:	6878      	ldr	r0, [r7, #4]
 801e272:	f7f5 ff5d 	bl	8014130 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e276:	e00a      	b.n	801e28e <icmp_input+0x1ea>
        goto icmperr;
 801e278:	bf00      	nop
 801e27a:	e004      	b.n	801e286 <icmp_input+0x1e2>
        goto icmperr;
 801e27c:	bf00      	nop
 801e27e:	e002      	b.n	801e286 <icmp_input+0x1e2>
          goto icmperr;
 801e280:	bf00      	nop
 801e282:	e000      	b.n	801e286 <icmp_input+0x1e2>
          goto icmperr;
 801e284:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801e286:	6878      	ldr	r0, [r7, #4]
 801e288:	f7f5 ff52 	bl	8014130 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801e28c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801e28e:	3728      	adds	r7, #40	; 0x28
 801e290:	46bd      	mov	sp, r7
 801e292:	bd80      	pop	{r7, pc}
 801e294:	2000eb24 	.word	0x2000eb24
 801e298:	2000eb38 	.word	0x2000eb38
 801e29c:	080269c4 	.word	0x080269c4
 801e2a0:	080269fc 	.word	0x080269fc
 801e2a4:	08026a34 	.word	0x08026a34
 801e2a8:	08026a5c 	.word	0x08026a5c

0801e2ac <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801e2ac:	b580      	push	{r7, lr}
 801e2ae:	b082      	sub	sp, #8
 801e2b0:	af00      	add	r7, sp, #0
 801e2b2:	6078      	str	r0, [r7, #4]
 801e2b4:	460b      	mov	r3, r1
 801e2b6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801e2b8:	78fb      	ldrb	r3, [r7, #3]
 801e2ba:	461a      	mov	r2, r3
 801e2bc:	2103      	movs	r1, #3
 801e2be:	6878      	ldr	r0, [r7, #4]
 801e2c0:	f000 f814 	bl	801e2ec <icmp_send_response>
}
 801e2c4:	bf00      	nop
 801e2c6:	3708      	adds	r7, #8
 801e2c8:	46bd      	mov	sp, r7
 801e2ca:	bd80      	pop	{r7, pc}

0801e2cc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801e2cc:	b580      	push	{r7, lr}
 801e2ce:	b082      	sub	sp, #8
 801e2d0:	af00      	add	r7, sp, #0
 801e2d2:	6078      	str	r0, [r7, #4]
 801e2d4:	460b      	mov	r3, r1
 801e2d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801e2d8:	78fb      	ldrb	r3, [r7, #3]
 801e2da:	461a      	mov	r2, r3
 801e2dc:	210b      	movs	r1, #11
 801e2de:	6878      	ldr	r0, [r7, #4]
 801e2e0:	f000 f804 	bl	801e2ec <icmp_send_response>
}
 801e2e4:	bf00      	nop
 801e2e6:	3708      	adds	r7, #8
 801e2e8:	46bd      	mov	sp, r7
 801e2ea:	bd80      	pop	{r7, pc}

0801e2ec <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801e2ec:	b580      	push	{r7, lr}
 801e2ee:	b08c      	sub	sp, #48	; 0x30
 801e2f0:	af04      	add	r7, sp, #16
 801e2f2:	6078      	str	r0, [r7, #4]
 801e2f4:	460b      	mov	r3, r1
 801e2f6:	70fb      	strb	r3, [r7, #3]
 801e2f8:	4613      	mov	r3, r2
 801e2fa:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801e2fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e300:	2124      	movs	r1, #36	; 0x24
 801e302:	2022      	movs	r0, #34	; 0x22
 801e304:	f7f5 fc30 	bl	8013b68 <pbuf_alloc>
 801e308:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801e30a:	69fb      	ldr	r3, [r7, #28]
 801e30c:	2b00      	cmp	r3, #0
 801e30e:	d04c      	beq.n	801e3aa <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801e310:	69fb      	ldr	r3, [r7, #28]
 801e312:	895b      	ldrh	r3, [r3, #10]
 801e314:	2b23      	cmp	r3, #35	; 0x23
 801e316:	d806      	bhi.n	801e326 <icmp_send_response+0x3a>
 801e318:	4b26      	ldr	r3, [pc, #152]	; (801e3b4 <icmp_send_response+0xc8>)
 801e31a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801e31e:	4926      	ldr	r1, [pc, #152]	; (801e3b8 <icmp_send_response+0xcc>)
 801e320:	4826      	ldr	r0, [pc, #152]	; (801e3bc <icmp_send_response+0xd0>)
 801e322:	f003 f849 	bl	80213b8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	685b      	ldr	r3, [r3, #4]
 801e32a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801e32c:	69fb      	ldr	r3, [r7, #28]
 801e32e:	685b      	ldr	r3, [r3, #4]
 801e330:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801e332:	697b      	ldr	r3, [r7, #20]
 801e334:	78fa      	ldrb	r2, [r7, #3]
 801e336:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801e338:	697b      	ldr	r3, [r7, #20]
 801e33a:	78ba      	ldrb	r2, [r7, #2]
 801e33c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801e33e:	697b      	ldr	r3, [r7, #20]
 801e340:	2200      	movs	r2, #0
 801e342:	711a      	strb	r2, [r3, #4]
 801e344:	2200      	movs	r2, #0
 801e346:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801e348:	697b      	ldr	r3, [r7, #20]
 801e34a:	2200      	movs	r2, #0
 801e34c:	719a      	strb	r2, [r3, #6]
 801e34e:	2200      	movs	r2, #0
 801e350:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801e352:	69fb      	ldr	r3, [r7, #28]
 801e354:	685b      	ldr	r3, [r3, #4]
 801e356:	f103 0008 	add.w	r0, r3, #8
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	685b      	ldr	r3, [r3, #4]
 801e35e:	221c      	movs	r2, #28
 801e360:	4619      	mov	r1, r3
 801e362:	f003 fb48 	bl	80219f6 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801e366:	69bb      	ldr	r3, [r7, #24]
 801e368:	68db      	ldr	r3, [r3, #12]
 801e36a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801e36c:	f107 030c 	add.w	r3, r7, #12
 801e370:	4618      	mov	r0, r3
 801e372:	f000 f825 	bl	801e3c0 <ip4_route>
 801e376:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801e378:	693b      	ldr	r3, [r7, #16]
 801e37a:	2b00      	cmp	r3, #0
 801e37c:	d011      	beq.n	801e3a2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801e37e:	697b      	ldr	r3, [r7, #20]
 801e380:	2200      	movs	r2, #0
 801e382:	709a      	strb	r2, [r3, #2]
 801e384:	2200      	movs	r2, #0
 801e386:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801e388:	f107 020c 	add.w	r2, r7, #12
 801e38c:	693b      	ldr	r3, [r7, #16]
 801e38e:	9302      	str	r3, [sp, #8]
 801e390:	2301      	movs	r3, #1
 801e392:	9301      	str	r3, [sp, #4]
 801e394:	2300      	movs	r3, #0
 801e396:	9300      	str	r3, [sp, #0]
 801e398:	23ff      	movs	r3, #255	; 0xff
 801e39a:	2100      	movs	r1, #0
 801e39c:	69f8      	ldr	r0, [r7, #28]
 801e39e:	f000 f9eb 	bl	801e778 <ip4_output_if>
  }
  pbuf_free(q);
 801e3a2:	69f8      	ldr	r0, [r7, #28]
 801e3a4:	f7f5 fec4 	bl	8014130 <pbuf_free>
 801e3a8:	e000      	b.n	801e3ac <icmp_send_response+0xc0>
    return;
 801e3aa:	bf00      	nop
}
 801e3ac:	3720      	adds	r7, #32
 801e3ae:	46bd      	mov	sp, r7
 801e3b0:	bd80      	pop	{r7, pc}
 801e3b2:	bf00      	nop
 801e3b4:	080269c4 	.word	0x080269c4
 801e3b8:	08026a90 	.word	0x08026a90
 801e3bc:	08026a34 	.word	0x08026a34

0801e3c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801e3c0:	b480      	push	{r7}
 801e3c2:	b085      	sub	sp, #20
 801e3c4:	af00      	add	r7, sp, #0
 801e3c6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801e3c8:	4b33      	ldr	r3, [pc, #204]	; (801e498 <ip4_route+0xd8>)
 801e3ca:	681b      	ldr	r3, [r3, #0]
 801e3cc:	60fb      	str	r3, [r7, #12]
 801e3ce:	e036      	b.n	801e43e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e3d0:	68fb      	ldr	r3, [r7, #12]
 801e3d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e3d6:	f003 0301 	and.w	r3, r3, #1
 801e3da:	b2db      	uxtb	r3, r3
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d02b      	beq.n	801e438 <ip4_route+0x78>
 801e3e0:	68fb      	ldr	r3, [r7, #12]
 801e3e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e3e6:	089b      	lsrs	r3, r3, #2
 801e3e8:	f003 0301 	and.w	r3, r3, #1
 801e3ec:	b2db      	uxtb	r3, r3
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	d022      	beq.n	801e438 <ip4_route+0x78>
 801e3f2:	68fb      	ldr	r3, [r7, #12]
 801e3f4:	3304      	adds	r3, #4
 801e3f6:	681b      	ldr	r3, [r3, #0]
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	d01d      	beq.n	801e438 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	681a      	ldr	r2, [r3, #0]
 801e400:	68fb      	ldr	r3, [r7, #12]
 801e402:	3304      	adds	r3, #4
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	405a      	eors	r2, r3
 801e408:	68fb      	ldr	r3, [r7, #12]
 801e40a:	3308      	adds	r3, #8
 801e40c:	681b      	ldr	r3, [r3, #0]
 801e40e:	4013      	ands	r3, r2
 801e410:	2b00      	cmp	r3, #0
 801e412:	d101      	bne.n	801e418 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801e414:	68fb      	ldr	r3, [r7, #12]
 801e416:	e038      	b.n	801e48a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801e418:	68fb      	ldr	r3, [r7, #12]
 801e41a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e41e:	f003 0302 	and.w	r3, r3, #2
 801e422:	2b00      	cmp	r3, #0
 801e424:	d108      	bne.n	801e438 <ip4_route+0x78>
 801e426:	687b      	ldr	r3, [r7, #4]
 801e428:	681a      	ldr	r2, [r3, #0]
 801e42a:	68fb      	ldr	r3, [r7, #12]
 801e42c:	330c      	adds	r3, #12
 801e42e:	681b      	ldr	r3, [r3, #0]
 801e430:	429a      	cmp	r2, r3
 801e432:	d101      	bne.n	801e438 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801e434:	68fb      	ldr	r3, [r7, #12]
 801e436:	e028      	b.n	801e48a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801e438:	68fb      	ldr	r3, [r7, #12]
 801e43a:	681b      	ldr	r3, [r3, #0]
 801e43c:	60fb      	str	r3, [r7, #12]
 801e43e:	68fb      	ldr	r3, [r7, #12]
 801e440:	2b00      	cmp	r3, #0
 801e442:	d1c5      	bne.n	801e3d0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e444:	4b15      	ldr	r3, [pc, #84]	; (801e49c <ip4_route+0xdc>)
 801e446:	681b      	ldr	r3, [r3, #0]
 801e448:	2b00      	cmp	r3, #0
 801e44a:	d01a      	beq.n	801e482 <ip4_route+0xc2>
 801e44c:	4b13      	ldr	r3, [pc, #76]	; (801e49c <ip4_route+0xdc>)
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e454:	f003 0301 	and.w	r3, r3, #1
 801e458:	2b00      	cmp	r3, #0
 801e45a:	d012      	beq.n	801e482 <ip4_route+0xc2>
 801e45c:	4b0f      	ldr	r3, [pc, #60]	; (801e49c <ip4_route+0xdc>)
 801e45e:	681b      	ldr	r3, [r3, #0]
 801e460:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e464:	f003 0304 	and.w	r3, r3, #4
 801e468:	2b00      	cmp	r3, #0
 801e46a:	d00a      	beq.n	801e482 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e46c:	4b0b      	ldr	r3, [pc, #44]	; (801e49c <ip4_route+0xdc>)
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	3304      	adds	r3, #4
 801e472:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801e474:	2b00      	cmp	r3, #0
 801e476:	d004      	beq.n	801e482 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	b2db      	uxtb	r3, r3
 801e47e:	2b7f      	cmp	r3, #127	; 0x7f
 801e480:	d101      	bne.n	801e486 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801e482:	2300      	movs	r3, #0
 801e484:	e001      	b.n	801e48a <ip4_route+0xca>
  }

  return netif_default;
 801e486:	4b05      	ldr	r3, [pc, #20]	; (801e49c <ip4_route+0xdc>)
 801e488:	681b      	ldr	r3, [r3, #0]
}
 801e48a:	4618      	mov	r0, r3
 801e48c:	3714      	adds	r7, #20
 801e48e:	46bd      	mov	sp, r7
 801e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e494:	4770      	bx	lr
 801e496:	bf00      	nop
 801e498:	200122c4 	.word	0x200122c4
 801e49c:	200122c8 	.word	0x200122c8

0801e4a0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801e4a0:	b580      	push	{r7, lr}
 801e4a2:	b082      	sub	sp, #8
 801e4a4:	af00      	add	r7, sp, #0
 801e4a6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e4ae:	f003 0301 	and.w	r3, r3, #1
 801e4b2:	b2db      	uxtb	r3, r3
 801e4b4:	2b00      	cmp	r3, #0
 801e4b6:	d016      	beq.n	801e4e6 <ip4_input_accept+0x46>
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	3304      	adds	r3, #4
 801e4bc:	681b      	ldr	r3, [r3, #0]
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	d011      	beq.n	801e4e6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e4c2:	4b0b      	ldr	r3, [pc, #44]	; (801e4f0 <ip4_input_accept+0x50>)
 801e4c4:	695a      	ldr	r2, [r3, #20]
 801e4c6:	687b      	ldr	r3, [r7, #4]
 801e4c8:	3304      	adds	r3, #4
 801e4ca:	681b      	ldr	r3, [r3, #0]
 801e4cc:	429a      	cmp	r2, r3
 801e4ce:	d008      	beq.n	801e4e2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801e4d0:	4b07      	ldr	r3, [pc, #28]	; (801e4f0 <ip4_input_accept+0x50>)
 801e4d2:	695b      	ldr	r3, [r3, #20]
 801e4d4:	6879      	ldr	r1, [r7, #4]
 801e4d6:	4618      	mov	r0, r3
 801e4d8:	f000 fa26 	bl	801e928 <ip4_addr_isbroadcast_u32>
 801e4dc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801e4de:	2b00      	cmp	r3, #0
 801e4e0:	d001      	beq.n	801e4e6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801e4e2:	2301      	movs	r3, #1
 801e4e4:	e000      	b.n	801e4e8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801e4e6:	2300      	movs	r3, #0
}
 801e4e8:	4618      	mov	r0, r3
 801e4ea:	3708      	adds	r7, #8
 801e4ec:	46bd      	mov	sp, r7
 801e4ee:	bd80      	pop	{r7, pc}
 801e4f0:	2000eb24 	.word	0x2000eb24

0801e4f4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801e4f4:	b580      	push	{r7, lr}
 801e4f6:	b088      	sub	sp, #32
 801e4f8:	af00      	add	r7, sp, #0
 801e4fa:	6078      	str	r0, [r7, #4]
 801e4fc:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801e4fe:	2301      	movs	r3, #1
 801e500:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801e502:	687b      	ldr	r3, [r7, #4]
 801e504:	685b      	ldr	r3, [r3, #4]
 801e506:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801e508:	69fb      	ldr	r3, [r7, #28]
 801e50a:	781b      	ldrb	r3, [r3, #0]
 801e50c:	091b      	lsrs	r3, r3, #4
 801e50e:	b2db      	uxtb	r3, r3
 801e510:	2b04      	cmp	r3, #4
 801e512:	d004      	beq.n	801e51e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801e514:	6878      	ldr	r0, [r7, #4]
 801e516:	f7f5 fe0b 	bl	8014130 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801e51a:	2300      	movs	r3, #0
 801e51c:	e123      	b.n	801e766 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801e51e:	69fb      	ldr	r3, [r7, #28]
 801e520:	781b      	ldrb	r3, [r3, #0]
 801e522:	f003 030f 	and.w	r3, r3, #15
 801e526:	b2db      	uxtb	r3, r3
 801e528:	009b      	lsls	r3, r3, #2
 801e52a:	b2db      	uxtb	r3, r3
 801e52c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801e52e:	69fb      	ldr	r3, [r7, #28]
 801e530:	885b      	ldrh	r3, [r3, #2]
 801e532:	b29b      	uxth	r3, r3
 801e534:	4618      	mov	r0, r3
 801e536:	f7f4 f9fd 	bl	8012934 <lwip_htons>
 801e53a:	4603      	mov	r3, r0
 801e53c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801e53e:	687b      	ldr	r3, [r7, #4]
 801e540:	891b      	ldrh	r3, [r3, #8]
 801e542:	8a3a      	ldrh	r2, [r7, #16]
 801e544:	429a      	cmp	r2, r3
 801e546:	d204      	bcs.n	801e552 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801e548:	8a3b      	ldrh	r3, [r7, #16]
 801e54a:	4619      	mov	r1, r3
 801e54c:	6878      	ldr	r0, [r7, #4]
 801e54e:	f7f5 fc69 	bl	8013e24 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801e552:	687b      	ldr	r3, [r7, #4]
 801e554:	895b      	ldrh	r3, [r3, #10]
 801e556:	8a7a      	ldrh	r2, [r7, #18]
 801e558:	429a      	cmp	r2, r3
 801e55a:	d807      	bhi.n	801e56c <ip4_input+0x78>
 801e55c:	687b      	ldr	r3, [r7, #4]
 801e55e:	891b      	ldrh	r3, [r3, #8]
 801e560:	8a3a      	ldrh	r2, [r7, #16]
 801e562:	429a      	cmp	r2, r3
 801e564:	d802      	bhi.n	801e56c <ip4_input+0x78>
 801e566:	8a7b      	ldrh	r3, [r7, #18]
 801e568:	2b13      	cmp	r3, #19
 801e56a:	d804      	bhi.n	801e576 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801e56c:	6878      	ldr	r0, [r7, #4]
 801e56e:	f7f5 fddf 	bl	8014130 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801e572:	2300      	movs	r3, #0
 801e574:	e0f7      	b.n	801e766 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801e576:	69fb      	ldr	r3, [r7, #28]
 801e578:	691b      	ldr	r3, [r3, #16]
 801e57a:	4a7d      	ldr	r2, [pc, #500]	; (801e770 <ip4_input+0x27c>)
 801e57c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801e57e:	69fb      	ldr	r3, [r7, #28]
 801e580:	68db      	ldr	r3, [r3, #12]
 801e582:	4a7b      	ldr	r2, [pc, #492]	; (801e770 <ip4_input+0x27c>)
 801e584:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e586:	4b7a      	ldr	r3, [pc, #488]	; (801e770 <ip4_input+0x27c>)
 801e588:	695b      	ldr	r3, [r3, #20]
 801e58a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801e58e:	2be0      	cmp	r3, #224	; 0xe0
 801e590:	d112      	bne.n	801e5b8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801e592:	683b      	ldr	r3, [r7, #0]
 801e594:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e598:	f003 0301 	and.w	r3, r3, #1
 801e59c:	b2db      	uxtb	r3, r3
 801e59e:	2b00      	cmp	r3, #0
 801e5a0:	d007      	beq.n	801e5b2 <ip4_input+0xbe>
 801e5a2:	683b      	ldr	r3, [r7, #0]
 801e5a4:	3304      	adds	r3, #4
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	d002      	beq.n	801e5b2 <ip4_input+0xbe>
      netif = inp;
 801e5ac:	683b      	ldr	r3, [r7, #0]
 801e5ae:	61bb      	str	r3, [r7, #24]
 801e5b0:	e02a      	b.n	801e608 <ip4_input+0x114>
    } else {
      netif = NULL;
 801e5b2:	2300      	movs	r3, #0
 801e5b4:	61bb      	str	r3, [r7, #24]
 801e5b6:	e027      	b.n	801e608 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801e5b8:	6838      	ldr	r0, [r7, #0]
 801e5ba:	f7ff ff71 	bl	801e4a0 <ip4_input_accept>
 801e5be:	4603      	mov	r3, r0
 801e5c0:	2b00      	cmp	r3, #0
 801e5c2:	d002      	beq.n	801e5ca <ip4_input+0xd6>
      netif = inp;
 801e5c4:	683b      	ldr	r3, [r7, #0]
 801e5c6:	61bb      	str	r3, [r7, #24]
 801e5c8:	e01e      	b.n	801e608 <ip4_input+0x114>
    } else {
      netif = NULL;
 801e5ca:	2300      	movs	r3, #0
 801e5cc:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801e5ce:	4b68      	ldr	r3, [pc, #416]	; (801e770 <ip4_input+0x27c>)
 801e5d0:	695b      	ldr	r3, [r3, #20]
 801e5d2:	b2db      	uxtb	r3, r3
 801e5d4:	2b7f      	cmp	r3, #127	; 0x7f
 801e5d6:	d017      	beq.n	801e608 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801e5d8:	4b66      	ldr	r3, [pc, #408]	; (801e774 <ip4_input+0x280>)
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	61bb      	str	r3, [r7, #24]
 801e5de:	e00e      	b.n	801e5fe <ip4_input+0x10a>
          if (netif == inp) {
 801e5e0:	69ba      	ldr	r2, [r7, #24]
 801e5e2:	683b      	ldr	r3, [r7, #0]
 801e5e4:	429a      	cmp	r2, r3
 801e5e6:	d006      	beq.n	801e5f6 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801e5e8:	69b8      	ldr	r0, [r7, #24]
 801e5ea:	f7ff ff59 	bl	801e4a0 <ip4_input_accept>
 801e5ee:	4603      	mov	r3, r0
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d108      	bne.n	801e606 <ip4_input+0x112>
 801e5f4:	e000      	b.n	801e5f8 <ip4_input+0x104>
            continue;
 801e5f6:	bf00      	nop
        NETIF_FOREACH(netif) {
 801e5f8:	69bb      	ldr	r3, [r7, #24]
 801e5fa:	681b      	ldr	r3, [r3, #0]
 801e5fc:	61bb      	str	r3, [r7, #24]
 801e5fe:	69bb      	ldr	r3, [r7, #24]
 801e600:	2b00      	cmp	r3, #0
 801e602:	d1ed      	bne.n	801e5e0 <ip4_input+0xec>
 801e604:	e000      	b.n	801e608 <ip4_input+0x114>
            break;
 801e606:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801e608:	69bb      	ldr	r3, [r7, #24]
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d111      	bne.n	801e632 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801e60e:	69fb      	ldr	r3, [r7, #28]
 801e610:	7a5b      	ldrb	r3, [r3, #9]
 801e612:	2b11      	cmp	r3, #17
 801e614:	d10d      	bne.n	801e632 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801e616:	8a7b      	ldrh	r3, [r7, #18]
 801e618:	69fa      	ldr	r2, [r7, #28]
 801e61a:	4413      	add	r3, r2
 801e61c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801e61e:	68fb      	ldr	r3, [r7, #12]
 801e620:	885b      	ldrh	r3, [r3, #2]
 801e622:	b29b      	uxth	r3, r3
 801e624:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 801e628:	d103      	bne.n	801e632 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801e62a:	683b      	ldr	r3, [r7, #0]
 801e62c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801e62e:	2300      	movs	r3, #0
 801e630:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801e632:	697b      	ldr	r3, [r7, #20]
 801e634:	2b00      	cmp	r3, #0
 801e636:	d017      	beq.n	801e668 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801e638:	4b4d      	ldr	r3, [pc, #308]	; (801e770 <ip4_input+0x27c>)
 801e63a:	691b      	ldr	r3, [r3, #16]
 801e63c:	2b00      	cmp	r3, #0
 801e63e:	d013      	beq.n	801e668 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e640:	4b4b      	ldr	r3, [pc, #300]	; (801e770 <ip4_input+0x27c>)
 801e642:	691b      	ldr	r3, [r3, #16]
 801e644:	6839      	ldr	r1, [r7, #0]
 801e646:	4618      	mov	r0, r3
 801e648:	f000 f96e 	bl	801e928 <ip4_addr_isbroadcast_u32>
 801e64c:	4603      	mov	r3, r0
 801e64e:	2b00      	cmp	r3, #0
 801e650:	d105      	bne.n	801e65e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801e652:	4b47      	ldr	r3, [pc, #284]	; (801e770 <ip4_input+0x27c>)
 801e654:	691b      	ldr	r3, [r3, #16]
 801e656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801e65a:	2be0      	cmp	r3, #224	; 0xe0
 801e65c:	d104      	bne.n	801e668 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801e65e:	6878      	ldr	r0, [r7, #4]
 801e660:	f7f5 fd66 	bl	8014130 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801e664:	2300      	movs	r3, #0
 801e666:	e07e      	b.n	801e766 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801e668:	69bb      	ldr	r3, [r7, #24]
 801e66a:	2b00      	cmp	r3, #0
 801e66c:	d104      	bne.n	801e678 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801e66e:	6878      	ldr	r0, [r7, #4]
 801e670:	f7f5 fd5e 	bl	8014130 <pbuf_free>
    return ERR_OK;
 801e674:	2300      	movs	r3, #0
 801e676:	e076      	b.n	801e766 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801e678:	69fb      	ldr	r3, [r7, #28]
 801e67a:	88db      	ldrh	r3, [r3, #6]
 801e67c:	b29b      	uxth	r3, r3
 801e67e:	461a      	mov	r2, r3
 801e680:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801e684:	4013      	ands	r3, r2
 801e686:	2b00      	cmp	r3, #0
 801e688:	d00b      	beq.n	801e6a2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801e68a:	6878      	ldr	r0, [r7, #4]
 801e68c:	f000 fd22 	bl	801f0d4 <ip4_reass>
 801e690:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801e692:	687b      	ldr	r3, [r7, #4]
 801e694:	2b00      	cmp	r3, #0
 801e696:	d101      	bne.n	801e69c <ip4_input+0x1a8>
      return ERR_OK;
 801e698:	2300      	movs	r3, #0
 801e69a:	e064      	b.n	801e766 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801e69c:	687b      	ldr	r3, [r7, #4]
 801e69e:	685b      	ldr	r3, [r3, #4]
 801e6a0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801e6a2:	4a33      	ldr	r2, [pc, #204]	; (801e770 <ip4_input+0x27c>)
 801e6a4:	69bb      	ldr	r3, [r7, #24]
 801e6a6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801e6a8:	4a31      	ldr	r2, [pc, #196]	; (801e770 <ip4_input+0x27c>)
 801e6aa:	683b      	ldr	r3, [r7, #0]
 801e6ac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801e6ae:	4a30      	ldr	r2, [pc, #192]	; (801e770 <ip4_input+0x27c>)
 801e6b0:	69fb      	ldr	r3, [r7, #28]
 801e6b2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801e6b4:	69fb      	ldr	r3, [r7, #28]
 801e6b6:	781b      	ldrb	r3, [r3, #0]
 801e6b8:	f003 030f 	and.w	r3, r3, #15
 801e6bc:	b2db      	uxtb	r3, r3
 801e6be:	009b      	lsls	r3, r3, #2
 801e6c0:	b2db      	uxtb	r3, r3
 801e6c2:	b29a      	uxth	r2, r3
 801e6c4:	4b2a      	ldr	r3, [pc, #168]	; (801e770 <ip4_input+0x27c>)
 801e6c6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801e6c8:	8a7b      	ldrh	r3, [r7, #18]
 801e6ca:	4619      	mov	r1, r3
 801e6cc:	6878      	ldr	r0, [r7, #4]
 801e6ce:	f7f5 fca9 	bl	8014024 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801e6d2:	69fb      	ldr	r3, [r7, #28]
 801e6d4:	7a5b      	ldrb	r3, [r3, #9]
 801e6d6:	2b11      	cmp	r3, #17
 801e6d8:	d006      	beq.n	801e6e8 <ip4_input+0x1f4>
 801e6da:	2b11      	cmp	r3, #17
 801e6dc:	dc13      	bgt.n	801e706 <ip4_input+0x212>
 801e6de:	2b01      	cmp	r3, #1
 801e6e0:	d00c      	beq.n	801e6fc <ip4_input+0x208>
 801e6e2:	2b06      	cmp	r3, #6
 801e6e4:	d005      	beq.n	801e6f2 <ip4_input+0x1fe>
 801e6e6:	e00e      	b.n	801e706 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801e6e8:	6839      	ldr	r1, [r7, #0]
 801e6ea:	6878      	ldr	r0, [r7, #4]
 801e6ec:	f7fc fac6 	bl	801ac7c <udp_input>
        break;
 801e6f0:	e026      	b.n	801e740 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801e6f2:	6839      	ldr	r1, [r7, #0]
 801e6f4:	6878      	ldr	r0, [r7, #4]
 801e6f6:	f7f7 fe71 	bl	80163dc <tcp_input>
        break;
 801e6fa:	e021      	b.n	801e740 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801e6fc:	6839      	ldr	r1, [r7, #0]
 801e6fe:	6878      	ldr	r0, [r7, #4]
 801e700:	f7ff fcd0 	bl	801e0a4 <icmp_input>
        break;
 801e704:	e01c      	b.n	801e740 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e706:	4b1a      	ldr	r3, [pc, #104]	; (801e770 <ip4_input+0x27c>)
 801e708:	695b      	ldr	r3, [r3, #20]
 801e70a:	69b9      	ldr	r1, [r7, #24]
 801e70c:	4618      	mov	r0, r3
 801e70e:	f000 f90b 	bl	801e928 <ip4_addr_isbroadcast_u32>
 801e712:	4603      	mov	r3, r0
 801e714:	2b00      	cmp	r3, #0
 801e716:	d10f      	bne.n	801e738 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801e718:	4b15      	ldr	r3, [pc, #84]	; (801e770 <ip4_input+0x27c>)
 801e71a:	695b      	ldr	r3, [r3, #20]
 801e71c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801e720:	2be0      	cmp	r3, #224	; 0xe0
 801e722:	d009      	beq.n	801e738 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801e724:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801e728:	4619      	mov	r1, r3
 801e72a:	6878      	ldr	r0, [r7, #4]
 801e72c:	f7f5 fced 	bl	801410a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801e730:	2102      	movs	r1, #2
 801e732:	6878      	ldr	r0, [r7, #4]
 801e734:	f7ff fdba 	bl	801e2ac <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801e738:	6878      	ldr	r0, [r7, #4]
 801e73a:	f7f5 fcf9 	bl	8014130 <pbuf_free>
        break;
 801e73e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801e740:	4b0b      	ldr	r3, [pc, #44]	; (801e770 <ip4_input+0x27c>)
 801e742:	2200      	movs	r2, #0
 801e744:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801e746:	4b0a      	ldr	r3, [pc, #40]	; (801e770 <ip4_input+0x27c>)
 801e748:	2200      	movs	r2, #0
 801e74a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801e74c:	4b08      	ldr	r3, [pc, #32]	; (801e770 <ip4_input+0x27c>)
 801e74e:	2200      	movs	r2, #0
 801e750:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801e752:	4b07      	ldr	r3, [pc, #28]	; (801e770 <ip4_input+0x27c>)
 801e754:	2200      	movs	r2, #0
 801e756:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801e758:	4b05      	ldr	r3, [pc, #20]	; (801e770 <ip4_input+0x27c>)
 801e75a:	2200      	movs	r2, #0
 801e75c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801e75e:	4b04      	ldr	r3, [pc, #16]	; (801e770 <ip4_input+0x27c>)
 801e760:	2200      	movs	r2, #0
 801e762:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801e764:	2300      	movs	r3, #0
}
 801e766:	4618      	mov	r0, r3
 801e768:	3720      	adds	r7, #32
 801e76a:	46bd      	mov	sp, r7
 801e76c:	bd80      	pop	{r7, pc}
 801e76e:	bf00      	nop
 801e770:	2000eb24 	.word	0x2000eb24
 801e774:	200122c4 	.word	0x200122c4

0801e778 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801e778:	b580      	push	{r7, lr}
 801e77a:	b08a      	sub	sp, #40	; 0x28
 801e77c:	af04      	add	r7, sp, #16
 801e77e:	60f8      	str	r0, [r7, #12]
 801e780:	60b9      	str	r1, [r7, #8]
 801e782:	607a      	str	r2, [r7, #4]
 801e784:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801e786:	68bb      	ldr	r3, [r7, #8]
 801e788:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d009      	beq.n	801e7a4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801e790:	68bb      	ldr	r3, [r7, #8]
 801e792:	2b00      	cmp	r3, #0
 801e794:	d003      	beq.n	801e79e <ip4_output_if+0x26>
 801e796:	68bb      	ldr	r3, [r7, #8]
 801e798:	681b      	ldr	r3, [r3, #0]
 801e79a:	2b00      	cmp	r3, #0
 801e79c:	d102      	bne.n	801e7a4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801e79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7a0:	3304      	adds	r3, #4
 801e7a2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801e7a4:	78fa      	ldrb	r2, [r7, #3]
 801e7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e7a8:	9302      	str	r3, [sp, #8]
 801e7aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801e7ae:	9301      	str	r3, [sp, #4]
 801e7b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 801e7b4:	9300      	str	r3, [sp, #0]
 801e7b6:	4613      	mov	r3, r2
 801e7b8:	687a      	ldr	r2, [r7, #4]
 801e7ba:	6979      	ldr	r1, [r7, #20]
 801e7bc:	68f8      	ldr	r0, [r7, #12]
 801e7be:	f000 f805 	bl	801e7cc <ip4_output_if_src>
 801e7c2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801e7c4:	4618      	mov	r0, r3
 801e7c6:	3718      	adds	r7, #24
 801e7c8:	46bd      	mov	sp, r7
 801e7ca:	bd80      	pop	{r7, pc}

0801e7cc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801e7cc:	b580      	push	{r7, lr}
 801e7ce:	b088      	sub	sp, #32
 801e7d0:	af00      	add	r7, sp, #0
 801e7d2:	60f8      	str	r0, [r7, #12]
 801e7d4:	60b9      	str	r1, [r7, #8]
 801e7d6:	607a      	str	r2, [r7, #4]
 801e7d8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	7b9b      	ldrb	r3, [r3, #14]
 801e7de:	2b01      	cmp	r3, #1
 801e7e0:	d006      	beq.n	801e7f0 <ip4_output_if_src+0x24>
 801e7e2:	4b4b      	ldr	r3, [pc, #300]	; (801e910 <ip4_output_if_src+0x144>)
 801e7e4:	f44f 7255 	mov.w	r2, #852	; 0x354
 801e7e8:	494a      	ldr	r1, [pc, #296]	; (801e914 <ip4_output_if_src+0x148>)
 801e7ea:	484b      	ldr	r0, [pc, #300]	; (801e918 <ip4_output_if_src+0x14c>)
 801e7ec:	f002 fde4 	bl	80213b8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801e7f0:	687b      	ldr	r3, [r7, #4]
 801e7f2:	2b00      	cmp	r3, #0
 801e7f4:	d060      	beq.n	801e8b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801e7f6:	2314      	movs	r3, #20
 801e7f8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801e7fa:	2114      	movs	r1, #20
 801e7fc:	68f8      	ldr	r0, [r7, #12]
 801e7fe:	f7f5 fc01 	bl	8014004 <pbuf_add_header>
 801e802:	4603      	mov	r3, r0
 801e804:	2b00      	cmp	r3, #0
 801e806:	d002      	beq.n	801e80e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e808:	f06f 0301 	mvn.w	r3, #1
 801e80c:	e07c      	b.n	801e908 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801e80e:	68fb      	ldr	r3, [r7, #12]
 801e810:	685b      	ldr	r3, [r3, #4]
 801e812:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801e814:	68fb      	ldr	r3, [r7, #12]
 801e816:	895b      	ldrh	r3, [r3, #10]
 801e818:	2b13      	cmp	r3, #19
 801e81a:	d806      	bhi.n	801e82a <ip4_output_if_src+0x5e>
 801e81c:	4b3c      	ldr	r3, [pc, #240]	; (801e910 <ip4_output_if_src+0x144>)
 801e81e:	f44f 7262 	mov.w	r2, #904	; 0x388
 801e822:	493e      	ldr	r1, [pc, #248]	; (801e91c <ip4_output_if_src+0x150>)
 801e824:	483c      	ldr	r0, [pc, #240]	; (801e918 <ip4_output_if_src+0x14c>)
 801e826:	f002 fdc7 	bl	80213b8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801e82a:	69fb      	ldr	r3, [r7, #28]
 801e82c:	78fa      	ldrb	r2, [r7, #3]
 801e82e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801e830:	69fb      	ldr	r3, [r7, #28]
 801e832:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801e836:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	681a      	ldr	r2, [r3, #0]
 801e83c:	69fb      	ldr	r3, [r7, #28]
 801e83e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801e840:	8b7b      	ldrh	r3, [r7, #26]
 801e842:	089b      	lsrs	r3, r3, #2
 801e844:	b29b      	uxth	r3, r3
 801e846:	b2db      	uxtb	r3, r3
 801e848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e84c:	b2da      	uxtb	r2, r3
 801e84e:	69fb      	ldr	r3, [r7, #28]
 801e850:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801e852:	69fb      	ldr	r3, [r7, #28]
 801e854:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801e858:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801e85a:	68fb      	ldr	r3, [r7, #12]
 801e85c:	891b      	ldrh	r3, [r3, #8]
 801e85e:	4618      	mov	r0, r3
 801e860:	f7f4 f868 	bl	8012934 <lwip_htons>
 801e864:	4603      	mov	r3, r0
 801e866:	461a      	mov	r2, r3
 801e868:	69fb      	ldr	r3, [r7, #28]
 801e86a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801e86c:	69fb      	ldr	r3, [r7, #28]
 801e86e:	2200      	movs	r2, #0
 801e870:	719a      	strb	r2, [r3, #6]
 801e872:	2200      	movs	r2, #0
 801e874:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801e876:	4b2a      	ldr	r3, [pc, #168]	; (801e920 <ip4_output_if_src+0x154>)
 801e878:	881b      	ldrh	r3, [r3, #0]
 801e87a:	4618      	mov	r0, r3
 801e87c:	f7f4 f85a 	bl	8012934 <lwip_htons>
 801e880:	4603      	mov	r3, r0
 801e882:	461a      	mov	r2, r3
 801e884:	69fb      	ldr	r3, [r7, #28]
 801e886:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801e888:	4b25      	ldr	r3, [pc, #148]	; (801e920 <ip4_output_if_src+0x154>)
 801e88a:	881b      	ldrh	r3, [r3, #0]
 801e88c:	3301      	adds	r3, #1
 801e88e:	b29a      	uxth	r2, r3
 801e890:	4b23      	ldr	r3, [pc, #140]	; (801e920 <ip4_output_if_src+0x154>)
 801e892:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801e894:	68bb      	ldr	r3, [r7, #8]
 801e896:	2b00      	cmp	r3, #0
 801e898:	d104      	bne.n	801e8a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801e89a:	4b22      	ldr	r3, [pc, #136]	; (801e924 <ip4_output_if_src+0x158>)
 801e89c:	681a      	ldr	r2, [r3, #0]
 801e89e:	69fb      	ldr	r3, [r7, #28]
 801e8a0:	60da      	str	r2, [r3, #12]
 801e8a2:	e003      	b.n	801e8ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801e8a4:	68bb      	ldr	r3, [r7, #8]
 801e8a6:	681a      	ldr	r2, [r3, #0]
 801e8a8:	69fb      	ldr	r3, [r7, #28]
 801e8aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801e8ac:	69fb      	ldr	r3, [r7, #28]
 801e8ae:	2200      	movs	r2, #0
 801e8b0:	729a      	strb	r2, [r3, #10]
 801e8b2:	2200      	movs	r2, #0
 801e8b4:	72da      	strb	r2, [r3, #11]
 801e8b6:	e00f      	b.n	801e8d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801e8b8:	68fb      	ldr	r3, [r7, #12]
 801e8ba:	895b      	ldrh	r3, [r3, #10]
 801e8bc:	2b13      	cmp	r3, #19
 801e8be:	d802      	bhi.n	801e8c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801e8c0:	f06f 0301 	mvn.w	r3, #1
 801e8c4:	e020      	b.n	801e908 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801e8c6:	68fb      	ldr	r3, [r7, #12]
 801e8c8:	685b      	ldr	r3, [r3, #4]
 801e8ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801e8cc:	69fb      	ldr	r3, [r7, #28]
 801e8ce:	691b      	ldr	r3, [r3, #16]
 801e8d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801e8d2:	f107 0314 	add.w	r3, r7, #20
 801e8d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801e8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	d00c      	beq.n	801e8fa <ip4_output_if_src+0x12e>
 801e8e0:	68fb      	ldr	r3, [r7, #12]
 801e8e2:	891a      	ldrh	r2, [r3, #8]
 801e8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801e8e8:	429a      	cmp	r2, r3
 801e8ea:	d906      	bls.n	801e8fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801e8ec:	687a      	ldr	r2, [r7, #4]
 801e8ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e8f0:	68f8      	ldr	r0, [r7, #12]
 801e8f2:	f000 fde3 	bl	801f4bc <ip4_frag>
 801e8f6:	4603      	mov	r3, r0
 801e8f8:	e006      	b.n	801e908 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801e8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e8fc:	695b      	ldr	r3, [r3, #20]
 801e8fe:	687a      	ldr	r2, [r7, #4]
 801e900:	68f9      	ldr	r1, [r7, #12]
 801e902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e904:	4798      	blx	r3
 801e906:	4603      	mov	r3, r0
}
 801e908:	4618      	mov	r0, r3
 801e90a:	3720      	adds	r7, #32
 801e90c:	46bd      	mov	sp, r7
 801e90e:	bd80      	pop	{r7, pc}
 801e910:	08026abc 	.word	0x08026abc
 801e914:	08026af0 	.word	0x08026af0
 801e918:	08026afc 	.word	0x08026afc
 801e91c:	08026b24 	.word	0x08026b24
 801e920:	20012456 	.word	0x20012456
 801e924:	08027070 	.word	0x08027070

0801e928 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801e928:	b480      	push	{r7}
 801e92a:	b085      	sub	sp, #20
 801e92c:	af00      	add	r7, sp, #0
 801e92e:	6078      	str	r0, [r7, #4]
 801e930:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801e936:	687b      	ldr	r3, [r7, #4]
 801e938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801e93c:	d002      	beq.n	801e944 <ip4_addr_isbroadcast_u32+0x1c>
 801e93e:	687b      	ldr	r3, [r7, #4]
 801e940:	2b00      	cmp	r3, #0
 801e942:	d101      	bne.n	801e948 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801e944:	2301      	movs	r3, #1
 801e946:	e02a      	b.n	801e99e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801e948:	683b      	ldr	r3, [r7, #0]
 801e94a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e94e:	f003 0302 	and.w	r3, r3, #2
 801e952:	2b00      	cmp	r3, #0
 801e954:	d101      	bne.n	801e95a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801e956:	2300      	movs	r3, #0
 801e958:	e021      	b.n	801e99e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801e95a:	683b      	ldr	r3, [r7, #0]
 801e95c:	3304      	adds	r3, #4
 801e95e:	681b      	ldr	r3, [r3, #0]
 801e960:	687a      	ldr	r2, [r7, #4]
 801e962:	429a      	cmp	r2, r3
 801e964:	d101      	bne.n	801e96a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801e966:	2300      	movs	r3, #0
 801e968:	e019      	b.n	801e99e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801e96a:	68fa      	ldr	r2, [r7, #12]
 801e96c:	683b      	ldr	r3, [r7, #0]
 801e96e:	3304      	adds	r3, #4
 801e970:	681b      	ldr	r3, [r3, #0]
 801e972:	405a      	eors	r2, r3
 801e974:	683b      	ldr	r3, [r7, #0]
 801e976:	3308      	adds	r3, #8
 801e978:	681b      	ldr	r3, [r3, #0]
 801e97a:	4013      	ands	r3, r2
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d10d      	bne.n	801e99c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e980:	683b      	ldr	r3, [r7, #0]
 801e982:	3308      	adds	r3, #8
 801e984:	681b      	ldr	r3, [r3, #0]
 801e986:	43da      	mvns	r2, r3
 801e988:	687b      	ldr	r3, [r7, #4]
 801e98a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801e98c:	683b      	ldr	r3, [r7, #0]
 801e98e:	3308      	adds	r3, #8
 801e990:	681b      	ldr	r3, [r3, #0]
 801e992:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801e994:	429a      	cmp	r2, r3
 801e996:	d101      	bne.n	801e99c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801e998:	2301      	movs	r3, #1
 801e99a:	e000      	b.n	801e99e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801e99c:	2300      	movs	r3, #0
  }
}
 801e99e:	4618      	mov	r0, r3
 801e9a0:	3714      	adds	r7, #20
 801e9a2:	46bd      	mov	sp, r7
 801e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9a8:	4770      	bx	lr
	...

0801e9ac <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801e9ac:	b580      	push	{r7, lr}
 801e9ae:	b082      	sub	sp, #8
 801e9b0:	af00      	add	r7, sp, #0
 801e9b2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801e9b4:	2210      	movs	r2, #16
 801e9b6:	4904      	ldr	r1, [pc, #16]	; (801e9c8 <ip4addr_ntoa+0x1c>)
 801e9b8:	6878      	ldr	r0, [r7, #4]
 801e9ba:	f000 f807 	bl	801e9cc <ip4addr_ntoa_r>
 801e9be:	4603      	mov	r3, r0
}
 801e9c0:	4618      	mov	r0, r3
 801e9c2:	3708      	adds	r7, #8
 801e9c4:	46bd      	mov	sp, r7
 801e9c6:	bd80      	pop	{r7, pc}
 801e9c8:	20012458 	.word	0x20012458

0801e9cc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801e9cc:	b480      	push	{r7}
 801e9ce:	b08d      	sub	sp, #52	; 0x34
 801e9d0:	af00      	add	r7, sp, #0
 801e9d2:	60f8      	str	r0, [r7, #12]
 801e9d4:	60b9      	str	r1, [r7, #8]
 801e9d6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801e9d8:	2300      	movs	r3, #0
 801e9da:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801e9dc:	68fb      	ldr	r3, [r7, #12]
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801e9e2:	68bb      	ldr	r3, [r7, #8]
 801e9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801e9e6:	f107 0318 	add.w	r3, r7, #24
 801e9ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801e9ec:	2300      	movs	r3, #0
 801e9ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801e9f2:	e058      	b.n	801eaa6 <ip4addr_ntoa_r+0xda>
    i = 0;
 801e9f4:	2300      	movs	r3, #0
 801e9f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801e9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e9fc:	781a      	ldrb	r2, [r3, #0]
 801e9fe:	4b32      	ldr	r3, [pc, #200]	; (801eac8 <ip4addr_ntoa_r+0xfc>)
 801ea00:	fba3 1302 	umull	r1, r3, r3, r2
 801ea04:	08d9      	lsrs	r1, r3, #3
 801ea06:	460b      	mov	r3, r1
 801ea08:	009b      	lsls	r3, r3, #2
 801ea0a:	440b      	add	r3, r1
 801ea0c:	005b      	lsls	r3, r3, #1
 801ea0e:	1ad3      	subs	r3, r2, r3
 801ea10:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801ea12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea14:	781b      	ldrb	r3, [r3, #0]
 801ea16:	4a2c      	ldr	r2, [pc, #176]	; (801eac8 <ip4addr_ntoa_r+0xfc>)
 801ea18:	fba2 2303 	umull	r2, r3, r2, r3
 801ea1c:	08db      	lsrs	r3, r3, #3
 801ea1e:	b2da      	uxtb	r2, r3
 801ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea22:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801ea24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ea28:	1c5a      	adds	r2, r3, #1
 801ea2a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801ea2e:	4619      	mov	r1, r3
 801ea30:	7ffb      	ldrb	r3, [r7, #31]
 801ea32:	3330      	adds	r3, #48	; 0x30
 801ea34:	b2da      	uxtb	r2, r3
 801ea36:	f101 0330 	add.w	r3, r1, #48	; 0x30
 801ea3a:	443b      	add	r3, r7
 801ea3c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801ea40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea42:	781b      	ldrb	r3, [r3, #0]
 801ea44:	2b00      	cmp	r3, #0
 801ea46:	d1d8      	bne.n	801e9fa <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801ea48:	e011      	b.n	801ea6e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 801ea4a:	6a3b      	ldr	r3, [r7, #32]
 801ea4c:	1c5a      	adds	r2, r3, #1
 801ea4e:	623a      	str	r2, [r7, #32]
 801ea50:	687a      	ldr	r2, [r7, #4]
 801ea52:	429a      	cmp	r2, r3
 801ea54:	dc01      	bgt.n	801ea5a <ip4addr_ntoa_r+0x8e>
        return NULL;
 801ea56:	2300      	movs	r3, #0
 801ea58:	e030      	b.n	801eabc <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 801ea5a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801ea5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea60:	1c59      	adds	r1, r3, #1
 801ea62:	62f9      	str	r1, [r7, #44]	; 0x2c
 801ea64:	3230      	adds	r2, #48	; 0x30
 801ea66:	443a      	add	r2, r7
 801ea68:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801ea6c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801ea6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801ea72:	1e5a      	subs	r2, r3, #1
 801ea74:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801ea78:	2b00      	cmp	r3, #0
 801ea7a:	d1e6      	bne.n	801ea4a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801ea7c:	6a3b      	ldr	r3, [r7, #32]
 801ea7e:	1c5a      	adds	r2, r3, #1
 801ea80:	623a      	str	r2, [r7, #32]
 801ea82:	687a      	ldr	r2, [r7, #4]
 801ea84:	429a      	cmp	r2, r3
 801ea86:	dc01      	bgt.n	801ea8c <ip4addr_ntoa_r+0xc0>
      return NULL;
 801ea88:	2300      	movs	r3, #0
 801ea8a:	e017      	b.n	801eabc <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 801ea8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ea8e:	1c5a      	adds	r2, r3, #1
 801ea90:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ea92:	222e      	movs	r2, #46	; 0x2e
 801ea94:	701a      	strb	r2, [r3, #0]
    ap++;
 801ea96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ea98:	3301      	adds	r3, #1
 801ea9a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801ea9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eaa0:	3301      	adds	r3, #1
 801eaa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801eaa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801eaaa:	2b03      	cmp	r3, #3
 801eaac:	d9a2      	bls.n	801e9f4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801eaae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eab0:	3b01      	subs	r3, #1
 801eab2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801eab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eab6:	2200      	movs	r2, #0
 801eab8:	701a      	strb	r2, [r3, #0]
  return buf;
 801eaba:	68bb      	ldr	r3, [r7, #8]
}
 801eabc:	4618      	mov	r0, r3
 801eabe:	3734      	adds	r7, #52	; 0x34
 801eac0:	46bd      	mov	sp, r7
 801eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eac6:	4770      	bx	lr
 801eac8:	cccccccd 	.word	0xcccccccd

0801eacc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801eacc:	b580      	push	{r7, lr}
 801eace:	b084      	sub	sp, #16
 801ead0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ead2:	2300      	movs	r3, #0
 801ead4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ead6:	4b12      	ldr	r3, [pc, #72]	; (801eb20 <ip_reass_tmr+0x54>)
 801ead8:	681b      	ldr	r3, [r3, #0]
 801eada:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801eadc:	e018      	b.n	801eb10 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801eade:	68fb      	ldr	r3, [r7, #12]
 801eae0:	7fdb      	ldrb	r3, [r3, #31]
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	d00b      	beq.n	801eafe <ip_reass_tmr+0x32>
      r->timer--;
 801eae6:	68fb      	ldr	r3, [r7, #12]
 801eae8:	7fdb      	ldrb	r3, [r3, #31]
 801eaea:	3b01      	subs	r3, #1
 801eaec:	b2da      	uxtb	r2, r3
 801eaee:	68fb      	ldr	r3, [r7, #12]
 801eaf0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801eaf2:	68fb      	ldr	r3, [r7, #12]
 801eaf4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801eaf6:	68fb      	ldr	r3, [r7, #12]
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	60fb      	str	r3, [r7, #12]
 801eafc:	e008      	b.n	801eb10 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801eafe:	68fb      	ldr	r3, [r7, #12]
 801eb00:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801eb02:	68fb      	ldr	r3, [r7, #12]
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801eb08:	68b9      	ldr	r1, [r7, #8]
 801eb0a:	6878      	ldr	r0, [r7, #4]
 801eb0c:	f000 f80a 	bl	801eb24 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801eb10:	68fb      	ldr	r3, [r7, #12]
 801eb12:	2b00      	cmp	r3, #0
 801eb14:	d1e3      	bne.n	801eade <ip_reass_tmr+0x12>
    }
  }
}
 801eb16:	bf00      	nop
 801eb18:	bf00      	nop
 801eb1a:	3710      	adds	r7, #16
 801eb1c:	46bd      	mov	sp, r7
 801eb1e:	bd80      	pop	{r7, pc}
 801eb20:	20012468 	.word	0x20012468

0801eb24 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801eb24:	b580      	push	{r7, lr}
 801eb26:	b088      	sub	sp, #32
 801eb28:	af00      	add	r7, sp, #0
 801eb2a:	6078      	str	r0, [r7, #4]
 801eb2c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801eb2e:	2300      	movs	r3, #0
 801eb30:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801eb32:	683a      	ldr	r2, [r7, #0]
 801eb34:	687b      	ldr	r3, [r7, #4]
 801eb36:	429a      	cmp	r2, r3
 801eb38:	d105      	bne.n	801eb46 <ip_reass_free_complete_datagram+0x22>
 801eb3a:	4b45      	ldr	r3, [pc, #276]	; (801ec50 <ip_reass_free_complete_datagram+0x12c>)
 801eb3c:	22ab      	movs	r2, #171	; 0xab
 801eb3e:	4945      	ldr	r1, [pc, #276]	; (801ec54 <ip_reass_free_complete_datagram+0x130>)
 801eb40:	4845      	ldr	r0, [pc, #276]	; (801ec58 <ip_reass_free_complete_datagram+0x134>)
 801eb42:	f002 fc39 	bl	80213b8 <iprintf>
  if (prev != NULL) {
 801eb46:	683b      	ldr	r3, [r7, #0]
 801eb48:	2b00      	cmp	r3, #0
 801eb4a:	d00a      	beq.n	801eb62 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801eb4c:	683b      	ldr	r3, [r7, #0]
 801eb4e:	681b      	ldr	r3, [r3, #0]
 801eb50:	687a      	ldr	r2, [r7, #4]
 801eb52:	429a      	cmp	r2, r3
 801eb54:	d005      	beq.n	801eb62 <ip_reass_free_complete_datagram+0x3e>
 801eb56:	4b3e      	ldr	r3, [pc, #248]	; (801ec50 <ip_reass_free_complete_datagram+0x12c>)
 801eb58:	22ad      	movs	r2, #173	; 0xad
 801eb5a:	4940      	ldr	r1, [pc, #256]	; (801ec5c <ip_reass_free_complete_datagram+0x138>)
 801eb5c:	483e      	ldr	r0, [pc, #248]	; (801ec58 <ip_reass_free_complete_datagram+0x134>)
 801eb5e:	f002 fc2b 	bl	80213b8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801eb62:	687b      	ldr	r3, [r7, #4]
 801eb64:	685b      	ldr	r3, [r3, #4]
 801eb66:	685b      	ldr	r3, [r3, #4]
 801eb68:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801eb6a:	697b      	ldr	r3, [r7, #20]
 801eb6c:	889b      	ldrh	r3, [r3, #4]
 801eb6e:	b29b      	uxth	r3, r3
 801eb70:	2b00      	cmp	r3, #0
 801eb72:	d12a      	bne.n	801ebca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	685b      	ldr	r3, [r3, #4]
 801eb78:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801eb7a:	697b      	ldr	r3, [r7, #20]
 801eb7c:	681a      	ldr	r2, [r3, #0]
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801eb82:	69bb      	ldr	r3, [r7, #24]
 801eb84:	6858      	ldr	r0, [r3, #4]
 801eb86:	687b      	ldr	r3, [r7, #4]
 801eb88:	3308      	adds	r3, #8
 801eb8a:	2214      	movs	r2, #20
 801eb8c:	4619      	mov	r1, r3
 801eb8e:	f002 ff32 	bl	80219f6 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801eb92:	2101      	movs	r1, #1
 801eb94:	69b8      	ldr	r0, [r7, #24]
 801eb96:	f7ff fb99 	bl	801e2cc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801eb9a:	69b8      	ldr	r0, [r7, #24]
 801eb9c:	f7f5 fb56 	bl	801424c <pbuf_clen>
 801eba0:	4603      	mov	r3, r0
 801eba2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801eba4:	8bfa      	ldrh	r2, [r7, #30]
 801eba6:	8a7b      	ldrh	r3, [r7, #18]
 801eba8:	4413      	add	r3, r2
 801ebaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ebae:	db05      	blt.n	801ebbc <ip_reass_free_complete_datagram+0x98>
 801ebb0:	4b27      	ldr	r3, [pc, #156]	; (801ec50 <ip_reass_free_complete_datagram+0x12c>)
 801ebb2:	22bc      	movs	r2, #188	; 0xbc
 801ebb4:	492a      	ldr	r1, [pc, #168]	; (801ec60 <ip_reass_free_complete_datagram+0x13c>)
 801ebb6:	4828      	ldr	r0, [pc, #160]	; (801ec58 <ip_reass_free_complete_datagram+0x134>)
 801ebb8:	f002 fbfe 	bl	80213b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ebbc:	8bfa      	ldrh	r2, [r7, #30]
 801ebbe:	8a7b      	ldrh	r3, [r7, #18]
 801ebc0:	4413      	add	r3, r2
 801ebc2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801ebc4:	69b8      	ldr	r0, [r7, #24]
 801ebc6:	f7f5 fab3 	bl	8014130 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801ebca:	687b      	ldr	r3, [r7, #4]
 801ebcc:	685b      	ldr	r3, [r3, #4]
 801ebce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801ebd0:	e01f      	b.n	801ec12 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801ebd2:	69bb      	ldr	r3, [r7, #24]
 801ebd4:	685b      	ldr	r3, [r3, #4]
 801ebd6:	617b      	str	r3, [r7, #20]
    pcur = p;
 801ebd8:	69bb      	ldr	r3, [r7, #24]
 801ebda:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801ebdc:	697b      	ldr	r3, [r7, #20]
 801ebde:	681b      	ldr	r3, [r3, #0]
 801ebe0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801ebe2:	68f8      	ldr	r0, [r7, #12]
 801ebe4:	f7f5 fb32 	bl	801424c <pbuf_clen>
 801ebe8:	4603      	mov	r3, r0
 801ebea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801ebec:	8bfa      	ldrh	r2, [r7, #30]
 801ebee:	8a7b      	ldrh	r3, [r7, #18]
 801ebf0:	4413      	add	r3, r2
 801ebf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ebf6:	db05      	blt.n	801ec04 <ip_reass_free_complete_datagram+0xe0>
 801ebf8:	4b15      	ldr	r3, [pc, #84]	; (801ec50 <ip_reass_free_complete_datagram+0x12c>)
 801ebfa:	22cc      	movs	r2, #204	; 0xcc
 801ebfc:	4918      	ldr	r1, [pc, #96]	; (801ec60 <ip_reass_free_complete_datagram+0x13c>)
 801ebfe:	4816      	ldr	r0, [pc, #88]	; (801ec58 <ip_reass_free_complete_datagram+0x134>)
 801ec00:	f002 fbda 	bl	80213b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801ec04:	8bfa      	ldrh	r2, [r7, #30]
 801ec06:	8a7b      	ldrh	r3, [r7, #18]
 801ec08:	4413      	add	r3, r2
 801ec0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801ec0c:	68f8      	ldr	r0, [r7, #12]
 801ec0e:	f7f5 fa8f 	bl	8014130 <pbuf_free>
  while (p != NULL) {
 801ec12:	69bb      	ldr	r3, [r7, #24]
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	d1dc      	bne.n	801ebd2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801ec18:	6839      	ldr	r1, [r7, #0]
 801ec1a:	6878      	ldr	r0, [r7, #4]
 801ec1c:	f000 f8c2 	bl	801eda4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801ec20:	4b10      	ldr	r3, [pc, #64]	; (801ec64 <ip_reass_free_complete_datagram+0x140>)
 801ec22:	881b      	ldrh	r3, [r3, #0]
 801ec24:	8bfa      	ldrh	r2, [r7, #30]
 801ec26:	429a      	cmp	r2, r3
 801ec28:	d905      	bls.n	801ec36 <ip_reass_free_complete_datagram+0x112>
 801ec2a:	4b09      	ldr	r3, [pc, #36]	; (801ec50 <ip_reass_free_complete_datagram+0x12c>)
 801ec2c:	22d2      	movs	r2, #210	; 0xd2
 801ec2e:	490e      	ldr	r1, [pc, #56]	; (801ec68 <ip_reass_free_complete_datagram+0x144>)
 801ec30:	4809      	ldr	r0, [pc, #36]	; (801ec58 <ip_reass_free_complete_datagram+0x134>)
 801ec32:	f002 fbc1 	bl	80213b8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801ec36:	4b0b      	ldr	r3, [pc, #44]	; (801ec64 <ip_reass_free_complete_datagram+0x140>)
 801ec38:	881a      	ldrh	r2, [r3, #0]
 801ec3a:	8bfb      	ldrh	r3, [r7, #30]
 801ec3c:	1ad3      	subs	r3, r2, r3
 801ec3e:	b29a      	uxth	r2, r3
 801ec40:	4b08      	ldr	r3, [pc, #32]	; (801ec64 <ip_reass_free_complete_datagram+0x140>)
 801ec42:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801ec44:	8bfb      	ldrh	r3, [r7, #30]
}
 801ec46:	4618      	mov	r0, r3
 801ec48:	3720      	adds	r7, #32
 801ec4a:	46bd      	mov	sp, r7
 801ec4c:	bd80      	pop	{r7, pc}
 801ec4e:	bf00      	nop
 801ec50:	08026b54 	.word	0x08026b54
 801ec54:	08026b90 	.word	0x08026b90
 801ec58:	08026b9c 	.word	0x08026b9c
 801ec5c:	08026bc4 	.word	0x08026bc4
 801ec60:	08026bd8 	.word	0x08026bd8
 801ec64:	2001246c 	.word	0x2001246c
 801ec68:	08026bf8 	.word	0x08026bf8

0801ec6c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ec6c:	b580      	push	{r7, lr}
 801ec6e:	b08a      	sub	sp, #40	; 0x28
 801ec70:	af00      	add	r7, sp, #0
 801ec72:	6078      	str	r0, [r7, #4]
 801ec74:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ec76:	2300      	movs	r3, #0
 801ec78:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ec7a:	2300      	movs	r3, #0
 801ec7c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ec7e:	2300      	movs	r3, #0
 801ec80:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ec82:	2300      	movs	r3, #0
 801ec84:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ec86:	2300      	movs	r3, #0
 801ec88:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ec8a:	4b28      	ldr	r3, [pc, #160]	; (801ed2c <ip_reass_remove_oldest_datagram+0xc0>)
 801ec8c:	681b      	ldr	r3, [r3, #0]
 801ec8e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ec90:	e030      	b.n	801ecf4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ec92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ec94:	695a      	ldr	r2, [r3, #20]
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	68db      	ldr	r3, [r3, #12]
 801ec9a:	429a      	cmp	r2, r3
 801ec9c:	d10c      	bne.n	801ecb8 <ip_reass_remove_oldest_datagram+0x4c>
 801ec9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eca0:	699a      	ldr	r2, [r3, #24]
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	691b      	ldr	r3, [r3, #16]
 801eca6:	429a      	cmp	r2, r3
 801eca8:	d106      	bne.n	801ecb8 <ip_reass_remove_oldest_datagram+0x4c>
 801ecaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecac:	899a      	ldrh	r2, [r3, #12]
 801ecae:	687b      	ldr	r3, [r7, #4]
 801ecb0:	889b      	ldrh	r3, [r3, #4]
 801ecb2:	b29b      	uxth	r3, r3
 801ecb4:	429a      	cmp	r2, r3
 801ecb6:	d014      	beq.n	801ece2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ecb8:	693b      	ldr	r3, [r7, #16]
 801ecba:	3301      	adds	r3, #1
 801ecbc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ecbe:	6a3b      	ldr	r3, [r7, #32]
 801ecc0:	2b00      	cmp	r3, #0
 801ecc2:	d104      	bne.n	801ecce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ecc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecc6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ecc8:	69fb      	ldr	r3, [r7, #28]
 801ecca:	61bb      	str	r3, [r7, #24]
 801eccc:	e009      	b.n	801ece2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ecce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecd0:	7fda      	ldrb	r2, [r3, #31]
 801ecd2:	6a3b      	ldr	r3, [r7, #32]
 801ecd4:	7fdb      	ldrb	r3, [r3, #31]
 801ecd6:	429a      	cmp	r2, r3
 801ecd8:	d803      	bhi.n	801ece2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ecda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecdc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ecde:	69fb      	ldr	r3, [r7, #28]
 801ece0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801ece2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ece4:	681b      	ldr	r3, [r3, #0]
 801ece6:	2b00      	cmp	r3, #0
 801ece8:	d001      	beq.n	801ecee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801ecea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801ecee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecf0:	681b      	ldr	r3, [r3, #0]
 801ecf2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ecf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ecf6:	2b00      	cmp	r3, #0
 801ecf8:	d1cb      	bne.n	801ec92 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801ecfa:	6a3b      	ldr	r3, [r7, #32]
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d008      	beq.n	801ed12 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801ed00:	69b9      	ldr	r1, [r7, #24]
 801ed02:	6a38      	ldr	r0, [r7, #32]
 801ed04:	f7ff ff0e 	bl	801eb24 <ip_reass_free_complete_datagram>
 801ed08:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801ed0a:	697a      	ldr	r2, [r7, #20]
 801ed0c:	68fb      	ldr	r3, [r7, #12]
 801ed0e:	4413      	add	r3, r2
 801ed10:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801ed12:	697a      	ldr	r2, [r7, #20]
 801ed14:	683b      	ldr	r3, [r7, #0]
 801ed16:	429a      	cmp	r2, r3
 801ed18:	da02      	bge.n	801ed20 <ip_reass_remove_oldest_datagram+0xb4>
 801ed1a:	693b      	ldr	r3, [r7, #16]
 801ed1c:	2b01      	cmp	r3, #1
 801ed1e:	dcac      	bgt.n	801ec7a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801ed20:	697b      	ldr	r3, [r7, #20]
}
 801ed22:	4618      	mov	r0, r3
 801ed24:	3728      	adds	r7, #40	; 0x28
 801ed26:	46bd      	mov	sp, r7
 801ed28:	bd80      	pop	{r7, pc}
 801ed2a:	bf00      	nop
 801ed2c:	20012468 	.word	0x20012468

0801ed30 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801ed30:	b580      	push	{r7, lr}
 801ed32:	b084      	sub	sp, #16
 801ed34:	af00      	add	r7, sp, #0
 801ed36:	6078      	str	r0, [r7, #4]
 801ed38:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ed3a:	2004      	movs	r0, #4
 801ed3c:	f7f4 fad2 	bl	80132e4 <memp_malloc>
 801ed40:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801ed42:	68fb      	ldr	r3, [r7, #12]
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	d110      	bne.n	801ed6a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801ed48:	6839      	ldr	r1, [r7, #0]
 801ed4a:	6878      	ldr	r0, [r7, #4]
 801ed4c:	f7ff ff8e 	bl	801ec6c <ip_reass_remove_oldest_datagram>
 801ed50:	4602      	mov	r2, r0
 801ed52:	683b      	ldr	r3, [r7, #0]
 801ed54:	4293      	cmp	r3, r2
 801ed56:	dc03      	bgt.n	801ed60 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801ed58:	2004      	movs	r0, #4
 801ed5a:	f7f4 fac3 	bl	80132e4 <memp_malloc>
 801ed5e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801ed60:	68fb      	ldr	r3, [r7, #12]
 801ed62:	2b00      	cmp	r3, #0
 801ed64:	d101      	bne.n	801ed6a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801ed66:	2300      	movs	r3, #0
 801ed68:	e016      	b.n	801ed98 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801ed6a:	2220      	movs	r2, #32
 801ed6c:	2100      	movs	r1, #0
 801ed6e:	68f8      	ldr	r0, [r7, #12]
 801ed70:	f002 fd38 	bl	80217e4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801ed74:	68fb      	ldr	r3, [r7, #12]
 801ed76:	220f      	movs	r2, #15
 801ed78:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801ed7a:	4b09      	ldr	r3, [pc, #36]	; (801eda0 <ip_reass_enqueue_new_datagram+0x70>)
 801ed7c:	681a      	ldr	r2, [r3, #0]
 801ed7e:	68fb      	ldr	r3, [r7, #12]
 801ed80:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801ed82:	4a07      	ldr	r2, [pc, #28]	; (801eda0 <ip_reass_enqueue_new_datagram+0x70>)
 801ed84:	68fb      	ldr	r3, [r7, #12]
 801ed86:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801ed88:	68fb      	ldr	r3, [r7, #12]
 801ed8a:	3308      	adds	r3, #8
 801ed8c:	2214      	movs	r2, #20
 801ed8e:	6879      	ldr	r1, [r7, #4]
 801ed90:	4618      	mov	r0, r3
 801ed92:	f002 fe30 	bl	80219f6 <memcpy>
  return ipr;
 801ed96:	68fb      	ldr	r3, [r7, #12]
}
 801ed98:	4618      	mov	r0, r3
 801ed9a:	3710      	adds	r7, #16
 801ed9c:	46bd      	mov	sp, r7
 801ed9e:	bd80      	pop	{r7, pc}
 801eda0:	20012468 	.word	0x20012468

0801eda4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801eda4:	b580      	push	{r7, lr}
 801eda6:	b082      	sub	sp, #8
 801eda8:	af00      	add	r7, sp, #0
 801edaa:	6078      	str	r0, [r7, #4]
 801edac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801edae:	4b10      	ldr	r3, [pc, #64]	; (801edf0 <ip_reass_dequeue_datagram+0x4c>)
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	687a      	ldr	r2, [r7, #4]
 801edb4:	429a      	cmp	r2, r3
 801edb6:	d104      	bne.n	801edc2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	681b      	ldr	r3, [r3, #0]
 801edbc:	4a0c      	ldr	r2, [pc, #48]	; (801edf0 <ip_reass_dequeue_datagram+0x4c>)
 801edbe:	6013      	str	r3, [r2, #0]
 801edc0:	e00d      	b.n	801edde <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801edc2:	683b      	ldr	r3, [r7, #0]
 801edc4:	2b00      	cmp	r3, #0
 801edc6:	d106      	bne.n	801edd6 <ip_reass_dequeue_datagram+0x32>
 801edc8:	4b0a      	ldr	r3, [pc, #40]	; (801edf4 <ip_reass_dequeue_datagram+0x50>)
 801edca:	f240 1245 	movw	r2, #325	; 0x145
 801edce:	490a      	ldr	r1, [pc, #40]	; (801edf8 <ip_reass_dequeue_datagram+0x54>)
 801edd0:	480a      	ldr	r0, [pc, #40]	; (801edfc <ip_reass_dequeue_datagram+0x58>)
 801edd2:	f002 faf1 	bl	80213b8 <iprintf>
    prev->next = ipr->next;
 801edd6:	687b      	ldr	r3, [r7, #4]
 801edd8:	681a      	ldr	r2, [r3, #0]
 801edda:	683b      	ldr	r3, [r7, #0]
 801eddc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801edde:	6879      	ldr	r1, [r7, #4]
 801ede0:	2004      	movs	r0, #4
 801ede2:	f7f4 faf5 	bl	80133d0 <memp_free>
}
 801ede6:	bf00      	nop
 801ede8:	3708      	adds	r7, #8
 801edea:	46bd      	mov	sp, r7
 801edec:	bd80      	pop	{r7, pc}
 801edee:	bf00      	nop
 801edf0:	20012468 	.word	0x20012468
 801edf4:	08026b54 	.word	0x08026b54
 801edf8:	08026c1c 	.word	0x08026c1c
 801edfc:	08026b9c 	.word	0x08026b9c

0801ee00 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801ee00:	b580      	push	{r7, lr}
 801ee02:	b08c      	sub	sp, #48	; 0x30
 801ee04:	af00      	add	r7, sp, #0
 801ee06:	60f8      	str	r0, [r7, #12]
 801ee08:	60b9      	str	r1, [r7, #8]
 801ee0a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801ee0c:	2300      	movs	r3, #0
 801ee0e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801ee10:	2301      	movs	r3, #1
 801ee12:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801ee14:	68bb      	ldr	r3, [r7, #8]
 801ee16:	685b      	ldr	r3, [r3, #4]
 801ee18:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801ee1a:	69fb      	ldr	r3, [r7, #28]
 801ee1c:	885b      	ldrh	r3, [r3, #2]
 801ee1e:	b29b      	uxth	r3, r3
 801ee20:	4618      	mov	r0, r3
 801ee22:	f7f3 fd87 	bl	8012934 <lwip_htons>
 801ee26:	4603      	mov	r3, r0
 801ee28:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801ee2a:	69fb      	ldr	r3, [r7, #28]
 801ee2c:	781b      	ldrb	r3, [r3, #0]
 801ee2e:	f003 030f 	and.w	r3, r3, #15
 801ee32:	b2db      	uxtb	r3, r3
 801ee34:	009b      	lsls	r3, r3, #2
 801ee36:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801ee38:	7e7b      	ldrb	r3, [r7, #25]
 801ee3a:	b29b      	uxth	r3, r3
 801ee3c:	8b7a      	ldrh	r2, [r7, #26]
 801ee3e:	429a      	cmp	r2, r3
 801ee40:	d202      	bcs.n	801ee48 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ee42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ee46:	e135      	b.n	801f0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801ee48:	7e7b      	ldrb	r3, [r7, #25]
 801ee4a:	b29b      	uxth	r3, r3
 801ee4c:	8b7a      	ldrh	r2, [r7, #26]
 801ee4e:	1ad3      	subs	r3, r2, r3
 801ee50:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801ee52:	69fb      	ldr	r3, [r7, #28]
 801ee54:	88db      	ldrh	r3, [r3, #6]
 801ee56:	b29b      	uxth	r3, r3
 801ee58:	4618      	mov	r0, r3
 801ee5a:	f7f3 fd6b 	bl	8012934 <lwip_htons>
 801ee5e:	4603      	mov	r3, r0
 801ee60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ee64:	b29b      	uxth	r3, r3
 801ee66:	00db      	lsls	r3, r3, #3
 801ee68:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801ee6a:	68bb      	ldr	r3, [r7, #8]
 801ee6c:	685b      	ldr	r3, [r3, #4]
 801ee6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801ee70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee72:	2200      	movs	r2, #0
 801ee74:	701a      	strb	r2, [r3, #0]
 801ee76:	2200      	movs	r2, #0
 801ee78:	705a      	strb	r2, [r3, #1]
 801ee7a:	2200      	movs	r2, #0
 801ee7c:	709a      	strb	r2, [r3, #2]
 801ee7e:	2200      	movs	r2, #0
 801ee80:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801ee82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee84:	8afa      	ldrh	r2, [r7, #22]
 801ee86:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801ee88:	8afa      	ldrh	r2, [r7, #22]
 801ee8a:	8b7b      	ldrh	r3, [r7, #26]
 801ee8c:	4413      	add	r3, r2
 801ee8e:	b29a      	uxth	r2, r3
 801ee90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee92:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801ee94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ee96:	88db      	ldrh	r3, [r3, #6]
 801ee98:	b29b      	uxth	r3, r3
 801ee9a:	8afa      	ldrh	r2, [r7, #22]
 801ee9c:	429a      	cmp	r2, r3
 801ee9e:	d902      	bls.n	801eea6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801eea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801eea4:	e106      	b.n	801f0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801eea6:	68fb      	ldr	r3, [r7, #12]
 801eea8:	685b      	ldr	r3, [r3, #4]
 801eeaa:	627b      	str	r3, [r7, #36]	; 0x24
 801eeac:	e068      	b.n	801ef80 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801eeae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eeb0:	685b      	ldr	r3, [r3, #4]
 801eeb2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801eeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eeb6:	889b      	ldrh	r3, [r3, #4]
 801eeb8:	b29a      	uxth	r2, r3
 801eeba:	693b      	ldr	r3, [r7, #16]
 801eebc:	889b      	ldrh	r3, [r3, #4]
 801eebe:	b29b      	uxth	r3, r3
 801eec0:	429a      	cmp	r2, r3
 801eec2:	d235      	bcs.n	801ef30 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801eec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eec8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801eeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eecc:	2b00      	cmp	r3, #0
 801eece:	d020      	beq.n	801ef12 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801eed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eed2:	889b      	ldrh	r3, [r3, #4]
 801eed4:	b29a      	uxth	r2, r3
 801eed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eed8:	88db      	ldrh	r3, [r3, #6]
 801eeda:	b29b      	uxth	r3, r3
 801eedc:	429a      	cmp	r2, r3
 801eede:	d307      	bcc.n	801eef0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801eee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801eee2:	88db      	ldrh	r3, [r3, #6]
 801eee4:	b29a      	uxth	r2, r3
 801eee6:	693b      	ldr	r3, [r7, #16]
 801eee8:	889b      	ldrh	r3, [r3, #4]
 801eeea:	b29b      	uxth	r3, r3
 801eeec:	429a      	cmp	r2, r3
 801eeee:	d902      	bls.n	801eef6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801eef0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801eef4:	e0de      	b.n	801f0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801eef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eef8:	68ba      	ldr	r2, [r7, #8]
 801eefa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801eefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801eefe:	88db      	ldrh	r3, [r3, #6]
 801ef00:	b29a      	uxth	r2, r3
 801ef02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef04:	889b      	ldrh	r3, [r3, #4]
 801ef06:	b29b      	uxth	r3, r3
 801ef08:	429a      	cmp	r2, r3
 801ef0a:	d03d      	beq.n	801ef88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ef0c:	2300      	movs	r3, #0
 801ef0e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801ef10:	e03a      	b.n	801ef88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801ef12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef14:	88db      	ldrh	r3, [r3, #6]
 801ef16:	b29a      	uxth	r2, r3
 801ef18:	693b      	ldr	r3, [r7, #16]
 801ef1a:	889b      	ldrh	r3, [r3, #4]
 801ef1c:	b29b      	uxth	r3, r3
 801ef1e:	429a      	cmp	r2, r3
 801ef20:	d902      	bls.n	801ef28 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ef22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ef26:	e0c5      	b.n	801f0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801ef28:	68fb      	ldr	r3, [r7, #12]
 801ef2a:	68ba      	ldr	r2, [r7, #8]
 801ef2c:	605a      	str	r2, [r3, #4]
      break;
 801ef2e:	e02b      	b.n	801ef88 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801ef30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef32:	889b      	ldrh	r3, [r3, #4]
 801ef34:	b29a      	uxth	r2, r3
 801ef36:	693b      	ldr	r3, [r7, #16]
 801ef38:	889b      	ldrh	r3, [r3, #4]
 801ef3a:	b29b      	uxth	r3, r3
 801ef3c:	429a      	cmp	r2, r3
 801ef3e:	d102      	bne.n	801ef46 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ef40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ef44:	e0b6      	b.n	801f0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801ef46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef48:	889b      	ldrh	r3, [r3, #4]
 801ef4a:	b29a      	uxth	r2, r3
 801ef4c:	693b      	ldr	r3, [r7, #16]
 801ef4e:	88db      	ldrh	r3, [r3, #6]
 801ef50:	b29b      	uxth	r3, r3
 801ef52:	429a      	cmp	r2, r3
 801ef54:	d202      	bcs.n	801ef5c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801ef56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801ef5a:	e0ab      	b.n	801f0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801ef5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d009      	beq.n	801ef76 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801ef62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef64:	88db      	ldrh	r3, [r3, #6]
 801ef66:	b29a      	uxth	r2, r3
 801ef68:	693b      	ldr	r3, [r7, #16]
 801ef6a:	889b      	ldrh	r3, [r3, #4]
 801ef6c:	b29b      	uxth	r3, r3
 801ef6e:	429a      	cmp	r2, r3
 801ef70:	d001      	beq.n	801ef76 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801ef72:	2300      	movs	r3, #0
 801ef74:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801ef76:	693b      	ldr	r3, [r7, #16]
 801ef78:	681b      	ldr	r3, [r3, #0]
 801ef7a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801ef7c:	693b      	ldr	r3, [r7, #16]
 801ef7e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801ef80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef82:	2b00      	cmp	r3, #0
 801ef84:	d193      	bne.n	801eeae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801ef86:	e000      	b.n	801ef8a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801ef88:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801ef8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ef8c:	2b00      	cmp	r3, #0
 801ef8e:	d12d      	bne.n	801efec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801ef90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	d01c      	beq.n	801efd0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801ef96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ef98:	88db      	ldrh	r3, [r3, #6]
 801ef9a:	b29a      	uxth	r2, r3
 801ef9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ef9e:	889b      	ldrh	r3, [r3, #4]
 801efa0:	b29b      	uxth	r3, r3
 801efa2:	429a      	cmp	r2, r3
 801efa4:	d906      	bls.n	801efb4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801efa6:	4b45      	ldr	r3, [pc, #276]	; (801f0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801efa8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801efac:	4944      	ldr	r1, [pc, #272]	; (801f0c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801efae:	4845      	ldr	r0, [pc, #276]	; (801f0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801efb0:	f002 fa02 	bl	80213b8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801efb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801efb6:	68ba      	ldr	r2, [r7, #8]
 801efb8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801efba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801efbc:	88db      	ldrh	r3, [r3, #6]
 801efbe:	b29a      	uxth	r2, r3
 801efc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801efc2:	889b      	ldrh	r3, [r3, #4]
 801efc4:	b29b      	uxth	r3, r3
 801efc6:	429a      	cmp	r2, r3
 801efc8:	d010      	beq.n	801efec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801efca:	2300      	movs	r3, #0
 801efcc:	623b      	str	r3, [r7, #32]
 801efce:	e00d      	b.n	801efec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801efd0:	68fb      	ldr	r3, [r7, #12]
 801efd2:	685b      	ldr	r3, [r3, #4]
 801efd4:	2b00      	cmp	r3, #0
 801efd6:	d006      	beq.n	801efe6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801efd8:	4b38      	ldr	r3, [pc, #224]	; (801f0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801efda:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801efde:	493a      	ldr	r1, [pc, #232]	; (801f0c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801efe0:	4838      	ldr	r0, [pc, #224]	; (801f0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801efe2:	f002 f9e9 	bl	80213b8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801efe6:	68fb      	ldr	r3, [r7, #12]
 801efe8:	68ba      	ldr	r2, [r7, #8]
 801efea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801efec:	687b      	ldr	r3, [r7, #4]
 801efee:	2b00      	cmp	r3, #0
 801eff0:	d105      	bne.n	801effe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801eff2:	68fb      	ldr	r3, [r7, #12]
 801eff4:	7f9b      	ldrb	r3, [r3, #30]
 801eff6:	f003 0301 	and.w	r3, r3, #1
 801effa:	2b00      	cmp	r3, #0
 801effc:	d059      	beq.n	801f0b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801effe:	6a3b      	ldr	r3, [r7, #32]
 801f000:	2b00      	cmp	r3, #0
 801f002:	d04f      	beq.n	801f0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801f004:	68fb      	ldr	r3, [r7, #12]
 801f006:	685b      	ldr	r3, [r3, #4]
 801f008:	2b00      	cmp	r3, #0
 801f00a:	d006      	beq.n	801f01a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801f00c:	68fb      	ldr	r3, [r7, #12]
 801f00e:	685b      	ldr	r3, [r3, #4]
 801f010:	685b      	ldr	r3, [r3, #4]
 801f012:	889b      	ldrh	r3, [r3, #4]
 801f014:	b29b      	uxth	r3, r3
 801f016:	2b00      	cmp	r3, #0
 801f018:	d002      	beq.n	801f020 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801f01a:	2300      	movs	r3, #0
 801f01c:	623b      	str	r3, [r7, #32]
 801f01e:	e041      	b.n	801f0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801f020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f022:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801f024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f026:	681b      	ldr	r3, [r3, #0]
 801f028:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801f02a:	e012      	b.n	801f052 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801f02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f02e:	685b      	ldr	r3, [r3, #4]
 801f030:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801f032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f034:	88db      	ldrh	r3, [r3, #6]
 801f036:	b29a      	uxth	r2, r3
 801f038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f03a:	889b      	ldrh	r3, [r3, #4]
 801f03c:	b29b      	uxth	r3, r3
 801f03e:	429a      	cmp	r2, r3
 801f040:	d002      	beq.n	801f048 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801f042:	2300      	movs	r3, #0
 801f044:	623b      	str	r3, [r7, #32]
            break;
 801f046:	e007      	b.n	801f058 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801f048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f04a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801f04c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f04e:	681b      	ldr	r3, [r3, #0]
 801f050:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801f052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f054:	2b00      	cmp	r3, #0
 801f056:	d1e9      	bne.n	801f02c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801f058:	6a3b      	ldr	r3, [r7, #32]
 801f05a:	2b00      	cmp	r3, #0
 801f05c:	d022      	beq.n	801f0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801f05e:	68fb      	ldr	r3, [r7, #12]
 801f060:	685b      	ldr	r3, [r3, #4]
 801f062:	2b00      	cmp	r3, #0
 801f064:	d106      	bne.n	801f074 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801f066:	4b15      	ldr	r3, [pc, #84]	; (801f0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f068:	f240 12df 	movw	r2, #479	; 0x1df
 801f06c:	4917      	ldr	r1, [pc, #92]	; (801f0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f06e:	4815      	ldr	r0, [pc, #84]	; (801f0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f070:	f002 f9a2 	bl	80213b8 <iprintf>
          LWIP_ASSERT("sanity check",
 801f074:	68fb      	ldr	r3, [r7, #12]
 801f076:	685b      	ldr	r3, [r3, #4]
 801f078:	685b      	ldr	r3, [r3, #4]
 801f07a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f07c:	429a      	cmp	r2, r3
 801f07e:	d106      	bne.n	801f08e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801f080:	4b0e      	ldr	r3, [pc, #56]	; (801f0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f082:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801f086:	4911      	ldr	r1, [pc, #68]	; (801f0cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801f088:	480e      	ldr	r0, [pc, #56]	; (801f0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f08a:	f002 f995 	bl	80213b8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801f08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f090:	681b      	ldr	r3, [r3, #0]
 801f092:	2b00      	cmp	r3, #0
 801f094:	d006      	beq.n	801f0a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801f096:	4b09      	ldr	r3, [pc, #36]	; (801f0bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801f098:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801f09c:	490c      	ldr	r1, [pc, #48]	; (801f0d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801f09e:	4809      	ldr	r0, [pc, #36]	; (801f0c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801f0a0:	f002 f98a 	bl	80213b8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801f0a4:	6a3b      	ldr	r3, [r7, #32]
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	bf14      	ite	ne
 801f0aa:	2301      	movne	r3, #1
 801f0ac:	2300      	moveq	r3, #0
 801f0ae:	b2db      	uxtb	r3, r3
 801f0b0:	e000      	b.n	801f0b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801f0b2:	2300      	movs	r3, #0
}
 801f0b4:	4618      	mov	r0, r3
 801f0b6:	3730      	adds	r7, #48	; 0x30
 801f0b8:	46bd      	mov	sp, r7
 801f0ba:	bd80      	pop	{r7, pc}
 801f0bc:	08026b54 	.word	0x08026b54
 801f0c0:	08026c38 	.word	0x08026c38
 801f0c4:	08026b9c 	.word	0x08026b9c
 801f0c8:	08026c58 	.word	0x08026c58
 801f0cc:	08026c90 	.word	0x08026c90
 801f0d0:	08026ca0 	.word	0x08026ca0

0801f0d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801f0d4:	b580      	push	{r7, lr}
 801f0d6:	b08e      	sub	sp, #56	; 0x38
 801f0d8:	af00      	add	r7, sp, #0
 801f0da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801f0dc:	687b      	ldr	r3, [r7, #4]
 801f0de:	685b      	ldr	r3, [r3, #4]
 801f0e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801f0e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0e4:	781b      	ldrb	r3, [r3, #0]
 801f0e6:	f003 030f 	and.w	r3, r3, #15
 801f0ea:	b2db      	uxtb	r3, r3
 801f0ec:	009b      	lsls	r3, r3, #2
 801f0ee:	b2db      	uxtb	r3, r3
 801f0f0:	2b14      	cmp	r3, #20
 801f0f2:	f040 8171 	bne.w	801f3d8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801f0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f0f8:	88db      	ldrh	r3, [r3, #6]
 801f0fa:	b29b      	uxth	r3, r3
 801f0fc:	4618      	mov	r0, r3
 801f0fe:	f7f3 fc19 	bl	8012934 <lwip_htons>
 801f102:	4603      	mov	r3, r0
 801f104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f108:	b29b      	uxth	r3, r3
 801f10a:	00db      	lsls	r3, r3, #3
 801f10c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801f10e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f110:	885b      	ldrh	r3, [r3, #2]
 801f112:	b29b      	uxth	r3, r3
 801f114:	4618      	mov	r0, r3
 801f116:	f7f3 fc0d 	bl	8012934 <lwip_htons>
 801f11a:	4603      	mov	r3, r0
 801f11c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801f11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f120:	781b      	ldrb	r3, [r3, #0]
 801f122:	f003 030f 	and.w	r3, r3, #15
 801f126:	b2db      	uxtb	r3, r3
 801f128:	009b      	lsls	r3, r3, #2
 801f12a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801f12e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f132:	b29b      	uxth	r3, r3
 801f134:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f136:	429a      	cmp	r2, r3
 801f138:	f0c0 8150 	bcc.w	801f3dc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801f13c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801f140:	b29b      	uxth	r3, r3
 801f142:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801f144:	1ad3      	subs	r3, r2, r3
 801f146:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801f148:	6878      	ldr	r0, [r7, #4]
 801f14a:	f7f5 f87f 	bl	801424c <pbuf_clen>
 801f14e:	4603      	mov	r3, r0
 801f150:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801f152:	4b8c      	ldr	r3, [pc, #560]	; (801f384 <ip4_reass+0x2b0>)
 801f154:	881b      	ldrh	r3, [r3, #0]
 801f156:	461a      	mov	r2, r3
 801f158:	8c3b      	ldrh	r3, [r7, #32]
 801f15a:	4413      	add	r3, r2
 801f15c:	2b0a      	cmp	r3, #10
 801f15e:	dd10      	ble.n	801f182 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f160:	8c3b      	ldrh	r3, [r7, #32]
 801f162:	4619      	mov	r1, r3
 801f164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f166:	f7ff fd81 	bl	801ec6c <ip_reass_remove_oldest_datagram>
 801f16a:	4603      	mov	r3, r0
 801f16c:	2b00      	cmp	r3, #0
 801f16e:	f000 8137 	beq.w	801f3e0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801f172:	4b84      	ldr	r3, [pc, #528]	; (801f384 <ip4_reass+0x2b0>)
 801f174:	881b      	ldrh	r3, [r3, #0]
 801f176:	461a      	mov	r2, r3
 801f178:	8c3b      	ldrh	r3, [r7, #32]
 801f17a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801f17c:	2b0a      	cmp	r3, #10
 801f17e:	f300 812f 	bgt.w	801f3e0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f182:	4b81      	ldr	r3, [pc, #516]	; (801f388 <ip4_reass+0x2b4>)
 801f184:	681b      	ldr	r3, [r3, #0]
 801f186:	633b      	str	r3, [r7, #48]	; 0x30
 801f188:	e015      	b.n	801f1b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801f18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f18c:	695a      	ldr	r2, [r3, #20]
 801f18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f190:	68db      	ldr	r3, [r3, #12]
 801f192:	429a      	cmp	r2, r3
 801f194:	d10c      	bne.n	801f1b0 <ip4_reass+0xdc>
 801f196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f198:	699a      	ldr	r2, [r3, #24]
 801f19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f19c:	691b      	ldr	r3, [r3, #16]
 801f19e:	429a      	cmp	r2, r3
 801f1a0:	d106      	bne.n	801f1b0 <ip4_reass+0xdc>
 801f1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1a4:	899a      	ldrh	r2, [r3, #12]
 801f1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f1a8:	889b      	ldrh	r3, [r3, #4]
 801f1aa:	b29b      	uxth	r3, r3
 801f1ac:	429a      	cmp	r2, r3
 801f1ae:	d006      	beq.n	801f1be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801f1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1b2:	681b      	ldr	r3, [r3, #0]
 801f1b4:	633b      	str	r3, [r7, #48]	; 0x30
 801f1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1b8:	2b00      	cmp	r3, #0
 801f1ba:	d1e6      	bne.n	801f18a <ip4_reass+0xb6>
 801f1bc:	e000      	b.n	801f1c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801f1be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801f1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	d109      	bne.n	801f1da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801f1c6:	8c3b      	ldrh	r3, [r7, #32]
 801f1c8:	4619      	mov	r1, r3
 801f1ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f1cc:	f7ff fdb0 	bl	801ed30 <ip_reass_enqueue_new_datagram>
 801f1d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801f1d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1d4:	2b00      	cmp	r3, #0
 801f1d6:	d11c      	bne.n	801f212 <ip4_reass+0x13e>
      goto nullreturn;
 801f1d8:	e105      	b.n	801f3e6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f1da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f1dc:	88db      	ldrh	r3, [r3, #6]
 801f1de:	b29b      	uxth	r3, r3
 801f1e0:	4618      	mov	r0, r3
 801f1e2:	f7f3 fba7 	bl	8012934 <lwip_htons>
 801f1e6:	4603      	mov	r3, r0
 801f1e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f1ec:	2b00      	cmp	r3, #0
 801f1ee:	d110      	bne.n	801f212 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801f1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f1f2:	89db      	ldrh	r3, [r3, #14]
 801f1f4:	4618      	mov	r0, r3
 801f1f6:	f7f3 fb9d 	bl	8012934 <lwip_htons>
 801f1fa:	4603      	mov	r3, r0
 801f1fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801f200:	2b00      	cmp	r3, #0
 801f202:	d006      	beq.n	801f212 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801f204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f206:	3308      	adds	r3, #8
 801f208:	2214      	movs	r2, #20
 801f20a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f20c:	4618      	mov	r0, r3
 801f20e:	f002 fbf2 	bl	80219f6 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801f212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f214:	88db      	ldrh	r3, [r3, #6]
 801f216:	b29b      	uxth	r3, r3
 801f218:	f003 0320 	and.w	r3, r3, #32
 801f21c:	2b00      	cmp	r3, #0
 801f21e:	bf0c      	ite	eq
 801f220:	2301      	moveq	r3, #1
 801f222:	2300      	movne	r3, #0
 801f224:	b2db      	uxtb	r3, r3
 801f226:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801f228:	69fb      	ldr	r3, [r7, #28]
 801f22a:	2b00      	cmp	r3, #0
 801f22c:	d00e      	beq.n	801f24c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801f22e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801f230:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f232:	4413      	add	r3, r2
 801f234:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801f236:	8b7a      	ldrh	r2, [r7, #26]
 801f238:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801f23a:	429a      	cmp	r2, r3
 801f23c:	f0c0 80a0 	bcc.w	801f380 <ip4_reass+0x2ac>
 801f240:	8b7b      	ldrh	r3, [r7, #26]
 801f242:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801f246:	4293      	cmp	r3, r2
 801f248:	f200 809a 	bhi.w	801f380 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801f24c:	69fa      	ldr	r2, [r7, #28]
 801f24e:	6879      	ldr	r1, [r7, #4]
 801f250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f252:	f7ff fdd5 	bl	801ee00 <ip_reass_chain_frag_into_datagram_and_validate>
 801f256:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801f258:	697b      	ldr	r3, [r7, #20]
 801f25a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801f25e:	f000 809b 	beq.w	801f398 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801f262:	4b48      	ldr	r3, [pc, #288]	; (801f384 <ip4_reass+0x2b0>)
 801f264:	881a      	ldrh	r2, [r3, #0]
 801f266:	8c3b      	ldrh	r3, [r7, #32]
 801f268:	4413      	add	r3, r2
 801f26a:	b29a      	uxth	r2, r3
 801f26c:	4b45      	ldr	r3, [pc, #276]	; (801f384 <ip4_reass+0x2b0>)
 801f26e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801f270:	69fb      	ldr	r3, [r7, #28]
 801f272:	2b00      	cmp	r3, #0
 801f274:	d00d      	beq.n	801f292 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801f276:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801f278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f27a:	4413      	add	r3, r2
 801f27c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801f27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f280:	8a7a      	ldrh	r2, [r7, #18]
 801f282:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801f284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f286:	7f9b      	ldrb	r3, [r3, #30]
 801f288:	f043 0301 	orr.w	r3, r3, #1
 801f28c:	b2da      	uxtb	r2, r3
 801f28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f290:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801f292:	697b      	ldr	r3, [r7, #20]
 801f294:	2b01      	cmp	r3, #1
 801f296:	d171      	bne.n	801f37c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801f298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f29a:	8b9b      	ldrh	r3, [r3, #28]
 801f29c:	3314      	adds	r3, #20
 801f29e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801f2a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f2a2:	685b      	ldr	r3, [r3, #4]
 801f2a4:	685b      	ldr	r3, [r3, #4]
 801f2a6:	681b      	ldr	r3, [r3, #0]
 801f2a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801f2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f2ac:	685b      	ldr	r3, [r3, #4]
 801f2ae:	685b      	ldr	r3, [r3, #4]
 801f2b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801f2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f2b4:	3308      	adds	r3, #8
 801f2b6:	2214      	movs	r2, #20
 801f2b8:	4619      	mov	r1, r3
 801f2ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801f2bc:	f002 fb9b 	bl	80219f6 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801f2c0:	8a3b      	ldrh	r3, [r7, #16]
 801f2c2:	4618      	mov	r0, r3
 801f2c4:	f7f3 fb36 	bl	8012934 <lwip_htons>
 801f2c8:	4603      	mov	r3, r0
 801f2ca:	461a      	mov	r2, r3
 801f2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801f2d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2d2:	2200      	movs	r2, #0
 801f2d4:	719a      	strb	r2, [r3, #6]
 801f2d6:	2200      	movs	r2, #0
 801f2d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801f2da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f2dc:	2200      	movs	r2, #0
 801f2de:	729a      	strb	r2, [r3, #10]
 801f2e0:	2200      	movs	r2, #0
 801f2e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801f2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f2e6:	685b      	ldr	r3, [r3, #4]
 801f2e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801f2ea:	e00d      	b.n	801f308 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801f2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f2ee:	685b      	ldr	r3, [r3, #4]
 801f2f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801f2f2:	2114      	movs	r1, #20
 801f2f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801f2f6:	f7f4 fe95 	bl	8014024 <pbuf_remove_header>
      pbuf_cat(p, r);
 801f2fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f2fc:	6878      	ldr	r0, [r7, #4]
 801f2fe:	f7f4 ffe5 	bl	80142cc <pbuf_cat>
      r = iprh->next_pbuf;
 801f302:	68fb      	ldr	r3, [r7, #12]
 801f304:	681b      	ldr	r3, [r3, #0]
 801f306:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801f308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f30a:	2b00      	cmp	r3, #0
 801f30c:	d1ee      	bne.n	801f2ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801f30e:	4b1e      	ldr	r3, [pc, #120]	; (801f388 <ip4_reass+0x2b4>)
 801f310:	681b      	ldr	r3, [r3, #0]
 801f312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f314:	429a      	cmp	r2, r3
 801f316:	d102      	bne.n	801f31e <ip4_reass+0x24a>
      ipr_prev = NULL;
 801f318:	2300      	movs	r3, #0
 801f31a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f31c:	e010      	b.n	801f340 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f31e:	4b1a      	ldr	r3, [pc, #104]	; (801f388 <ip4_reass+0x2b4>)
 801f320:	681b      	ldr	r3, [r3, #0]
 801f322:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f324:	e007      	b.n	801f336 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801f326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f328:	681b      	ldr	r3, [r3, #0]
 801f32a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f32c:	429a      	cmp	r2, r3
 801f32e:	d006      	beq.n	801f33e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801f330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f332:	681b      	ldr	r3, [r3, #0]
 801f334:	62fb      	str	r3, [r7, #44]	; 0x2c
 801f336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f338:	2b00      	cmp	r3, #0
 801f33a:	d1f4      	bne.n	801f326 <ip4_reass+0x252>
 801f33c:	e000      	b.n	801f340 <ip4_reass+0x26c>
          break;
 801f33e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801f340:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f342:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f344:	f7ff fd2e 	bl	801eda4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801f348:	6878      	ldr	r0, [r7, #4]
 801f34a:	f7f4 ff7f 	bl	801424c <pbuf_clen>
 801f34e:	4603      	mov	r3, r0
 801f350:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801f352:	4b0c      	ldr	r3, [pc, #48]	; (801f384 <ip4_reass+0x2b0>)
 801f354:	881b      	ldrh	r3, [r3, #0]
 801f356:	8c3a      	ldrh	r2, [r7, #32]
 801f358:	429a      	cmp	r2, r3
 801f35a:	d906      	bls.n	801f36a <ip4_reass+0x296>
 801f35c:	4b0b      	ldr	r3, [pc, #44]	; (801f38c <ip4_reass+0x2b8>)
 801f35e:	f240 229b 	movw	r2, #667	; 0x29b
 801f362:	490b      	ldr	r1, [pc, #44]	; (801f390 <ip4_reass+0x2bc>)
 801f364:	480b      	ldr	r0, [pc, #44]	; (801f394 <ip4_reass+0x2c0>)
 801f366:	f002 f827 	bl	80213b8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801f36a:	4b06      	ldr	r3, [pc, #24]	; (801f384 <ip4_reass+0x2b0>)
 801f36c:	881a      	ldrh	r2, [r3, #0]
 801f36e:	8c3b      	ldrh	r3, [r7, #32]
 801f370:	1ad3      	subs	r3, r2, r3
 801f372:	b29a      	uxth	r2, r3
 801f374:	4b03      	ldr	r3, [pc, #12]	; (801f384 <ip4_reass+0x2b0>)
 801f376:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	e038      	b.n	801f3ee <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801f37c:	2300      	movs	r3, #0
 801f37e:	e036      	b.n	801f3ee <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801f380:	bf00      	nop
 801f382:	e00a      	b.n	801f39a <ip4_reass+0x2c6>
 801f384:	2001246c 	.word	0x2001246c
 801f388:	20012468 	.word	0x20012468
 801f38c:	08026b54 	.word	0x08026b54
 801f390:	08026cc4 	.word	0x08026cc4
 801f394:	08026b9c 	.word	0x08026b9c
    goto nullreturn_ipr;
 801f398:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801f39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f39c:	2b00      	cmp	r3, #0
 801f39e:	d106      	bne.n	801f3ae <ip4_reass+0x2da>
 801f3a0:	4b15      	ldr	r3, [pc, #84]	; (801f3f8 <ip4_reass+0x324>)
 801f3a2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801f3a6:	4915      	ldr	r1, [pc, #84]	; (801f3fc <ip4_reass+0x328>)
 801f3a8:	4815      	ldr	r0, [pc, #84]	; (801f400 <ip4_reass+0x32c>)
 801f3aa:	f002 f805 	bl	80213b8 <iprintf>
  if (ipr->p == NULL) {
 801f3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f3b0:	685b      	ldr	r3, [r3, #4]
 801f3b2:	2b00      	cmp	r3, #0
 801f3b4:	d116      	bne.n	801f3e4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801f3b6:	4b13      	ldr	r3, [pc, #76]	; (801f404 <ip4_reass+0x330>)
 801f3b8:	681b      	ldr	r3, [r3, #0]
 801f3ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f3bc:	429a      	cmp	r2, r3
 801f3be:	d006      	beq.n	801f3ce <ip4_reass+0x2fa>
 801f3c0:	4b0d      	ldr	r3, [pc, #52]	; (801f3f8 <ip4_reass+0x324>)
 801f3c2:	f240 22ab 	movw	r2, #683	; 0x2ab
 801f3c6:	4910      	ldr	r1, [pc, #64]	; (801f408 <ip4_reass+0x334>)
 801f3c8:	480d      	ldr	r0, [pc, #52]	; (801f400 <ip4_reass+0x32c>)
 801f3ca:	f001 fff5 	bl	80213b8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801f3ce:	2100      	movs	r1, #0
 801f3d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801f3d2:	f7ff fce7 	bl	801eda4 <ip_reass_dequeue_datagram>
 801f3d6:	e006      	b.n	801f3e6 <ip4_reass+0x312>
    goto nullreturn;
 801f3d8:	bf00      	nop
 801f3da:	e004      	b.n	801f3e6 <ip4_reass+0x312>
    goto nullreturn;
 801f3dc:	bf00      	nop
 801f3de:	e002      	b.n	801f3e6 <ip4_reass+0x312>
      goto nullreturn;
 801f3e0:	bf00      	nop
 801f3e2:	e000      	b.n	801f3e6 <ip4_reass+0x312>
  }

nullreturn:
 801f3e4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801f3e6:	6878      	ldr	r0, [r7, #4]
 801f3e8:	f7f4 fea2 	bl	8014130 <pbuf_free>
  return NULL;
 801f3ec:	2300      	movs	r3, #0
}
 801f3ee:	4618      	mov	r0, r3
 801f3f0:	3738      	adds	r7, #56	; 0x38
 801f3f2:	46bd      	mov	sp, r7
 801f3f4:	bd80      	pop	{r7, pc}
 801f3f6:	bf00      	nop
 801f3f8:	08026b54 	.word	0x08026b54
 801f3fc:	08026ce0 	.word	0x08026ce0
 801f400:	08026b9c 	.word	0x08026b9c
 801f404:	20012468 	.word	0x20012468
 801f408:	08026cec 	.word	0x08026cec

0801f40c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801f40c:	b580      	push	{r7, lr}
 801f40e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801f410:	2005      	movs	r0, #5
 801f412:	f7f3 ff67 	bl	80132e4 <memp_malloc>
 801f416:	4603      	mov	r3, r0
}
 801f418:	4618      	mov	r0, r3
 801f41a:	bd80      	pop	{r7, pc}

0801f41c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801f41c:	b580      	push	{r7, lr}
 801f41e:	b082      	sub	sp, #8
 801f420:	af00      	add	r7, sp, #0
 801f422:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801f424:	687b      	ldr	r3, [r7, #4]
 801f426:	2b00      	cmp	r3, #0
 801f428:	d106      	bne.n	801f438 <ip_frag_free_pbuf_custom_ref+0x1c>
 801f42a:	4b07      	ldr	r3, [pc, #28]	; (801f448 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801f42c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801f430:	4906      	ldr	r1, [pc, #24]	; (801f44c <ip_frag_free_pbuf_custom_ref+0x30>)
 801f432:	4807      	ldr	r0, [pc, #28]	; (801f450 <ip_frag_free_pbuf_custom_ref+0x34>)
 801f434:	f001 ffc0 	bl	80213b8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801f438:	6879      	ldr	r1, [r7, #4]
 801f43a:	2005      	movs	r0, #5
 801f43c:	f7f3 ffc8 	bl	80133d0 <memp_free>
}
 801f440:	bf00      	nop
 801f442:	3708      	adds	r7, #8
 801f444:	46bd      	mov	sp, r7
 801f446:	bd80      	pop	{r7, pc}
 801f448:	08026b54 	.word	0x08026b54
 801f44c:	08026d0c 	.word	0x08026d0c
 801f450:	08026b9c 	.word	0x08026b9c

0801f454 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801f454:	b580      	push	{r7, lr}
 801f456:	b084      	sub	sp, #16
 801f458:	af00      	add	r7, sp, #0
 801f45a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801f460:	68fb      	ldr	r3, [r7, #12]
 801f462:	2b00      	cmp	r3, #0
 801f464:	d106      	bne.n	801f474 <ipfrag_free_pbuf_custom+0x20>
 801f466:	4b11      	ldr	r3, [pc, #68]	; (801f4ac <ipfrag_free_pbuf_custom+0x58>)
 801f468:	f240 22ce 	movw	r2, #718	; 0x2ce
 801f46c:	4910      	ldr	r1, [pc, #64]	; (801f4b0 <ipfrag_free_pbuf_custom+0x5c>)
 801f46e:	4811      	ldr	r0, [pc, #68]	; (801f4b4 <ipfrag_free_pbuf_custom+0x60>)
 801f470:	f001 ffa2 	bl	80213b8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801f474:	68fa      	ldr	r2, [r7, #12]
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	429a      	cmp	r2, r3
 801f47a:	d006      	beq.n	801f48a <ipfrag_free_pbuf_custom+0x36>
 801f47c:	4b0b      	ldr	r3, [pc, #44]	; (801f4ac <ipfrag_free_pbuf_custom+0x58>)
 801f47e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801f482:	490d      	ldr	r1, [pc, #52]	; (801f4b8 <ipfrag_free_pbuf_custom+0x64>)
 801f484:	480b      	ldr	r0, [pc, #44]	; (801f4b4 <ipfrag_free_pbuf_custom+0x60>)
 801f486:	f001 ff97 	bl	80213b8 <iprintf>
  if (pcr->original != NULL) {
 801f48a:	68fb      	ldr	r3, [r7, #12]
 801f48c:	695b      	ldr	r3, [r3, #20]
 801f48e:	2b00      	cmp	r3, #0
 801f490:	d004      	beq.n	801f49c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801f492:	68fb      	ldr	r3, [r7, #12]
 801f494:	695b      	ldr	r3, [r3, #20]
 801f496:	4618      	mov	r0, r3
 801f498:	f7f4 fe4a 	bl	8014130 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801f49c:	68f8      	ldr	r0, [r7, #12]
 801f49e:	f7ff ffbd 	bl	801f41c <ip_frag_free_pbuf_custom_ref>
}
 801f4a2:	bf00      	nop
 801f4a4:	3710      	adds	r7, #16
 801f4a6:	46bd      	mov	sp, r7
 801f4a8:	bd80      	pop	{r7, pc}
 801f4aa:	bf00      	nop
 801f4ac:	08026b54 	.word	0x08026b54
 801f4b0:	08026d18 	.word	0x08026d18
 801f4b4:	08026b9c 	.word	0x08026b9c
 801f4b8:	08026d24 	.word	0x08026d24

0801f4bc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801f4bc:	b580      	push	{r7, lr}
 801f4be:	b094      	sub	sp, #80	; 0x50
 801f4c0:	af02      	add	r7, sp, #8
 801f4c2:	60f8      	str	r0, [r7, #12]
 801f4c4:	60b9      	str	r1, [r7, #8]
 801f4c6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801f4c8:	2300      	movs	r3, #0
 801f4ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801f4ce:	68bb      	ldr	r3, [r7, #8]
 801f4d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f4d2:	3b14      	subs	r3, #20
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	da00      	bge.n	801f4da <ip4_frag+0x1e>
 801f4d8:	3307      	adds	r3, #7
 801f4da:	10db      	asrs	r3, r3, #3
 801f4dc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801f4de:	2314      	movs	r3, #20
 801f4e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801f4e2:	68fb      	ldr	r3, [r7, #12]
 801f4e4:	685b      	ldr	r3, [r3, #4]
 801f4e6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801f4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f4ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801f4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f4ee:	781b      	ldrb	r3, [r3, #0]
 801f4f0:	f003 030f 	and.w	r3, r3, #15
 801f4f4:	b2db      	uxtb	r3, r3
 801f4f6:	009b      	lsls	r3, r3, #2
 801f4f8:	b2db      	uxtb	r3, r3
 801f4fa:	2b14      	cmp	r3, #20
 801f4fc:	d002      	beq.n	801f504 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801f4fe:	f06f 0305 	mvn.w	r3, #5
 801f502:	e110      	b.n	801f726 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801f504:	68fb      	ldr	r3, [r7, #12]
 801f506:	895b      	ldrh	r3, [r3, #10]
 801f508:	2b13      	cmp	r3, #19
 801f50a:	d809      	bhi.n	801f520 <ip4_frag+0x64>
 801f50c:	4b88      	ldr	r3, [pc, #544]	; (801f730 <ip4_frag+0x274>)
 801f50e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801f512:	4988      	ldr	r1, [pc, #544]	; (801f734 <ip4_frag+0x278>)
 801f514:	4888      	ldr	r0, [pc, #544]	; (801f738 <ip4_frag+0x27c>)
 801f516:	f001 ff4f 	bl	80213b8 <iprintf>
 801f51a:	f06f 0305 	mvn.w	r3, #5
 801f51e:	e102      	b.n	801f726 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801f520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f522:	88db      	ldrh	r3, [r3, #6]
 801f524:	b29b      	uxth	r3, r3
 801f526:	4618      	mov	r0, r3
 801f528:	f7f3 fa04 	bl	8012934 <lwip_htons>
 801f52c:	4603      	mov	r3, r0
 801f52e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801f530:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f532:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f536:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801f53a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f53c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801f540:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801f542:	68fb      	ldr	r3, [r7, #12]
 801f544:	891b      	ldrh	r3, [r3, #8]
 801f546:	3b14      	subs	r3, #20
 801f548:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801f54c:	e0e1      	b.n	801f712 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801f54e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801f550:	00db      	lsls	r3, r3, #3
 801f552:	b29b      	uxth	r3, r3
 801f554:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f558:	4293      	cmp	r3, r2
 801f55a:	bf28      	it	cs
 801f55c:	4613      	movcs	r3, r2
 801f55e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801f560:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f564:	2114      	movs	r1, #20
 801f566:	200e      	movs	r0, #14
 801f568:	f7f4 fafe 	bl	8013b68 <pbuf_alloc>
 801f56c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801f56e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f570:	2b00      	cmp	r3, #0
 801f572:	f000 80d5 	beq.w	801f720 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801f576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f578:	895b      	ldrh	r3, [r3, #10]
 801f57a:	2b13      	cmp	r3, #19
 801f57c:	d806      	bhi.n	801f58c <ip4_frag+0xd0>
 801f57e:	4b6c      	ldr	r3, [pc, #432]	; (801f730 <ip4_frag+0x274>)
 801f580:	f44f 7249 	mov.w	r2, #804	; 0x324
 801f584:	496d      	ldr	r1, [pc, #436]	; (801f73c <ip4_frag+0x280>)
 801f586:	486c      	ldr	r0, [pc, #432]	; (801f738 <ip4_frag+0x27c>)
 801f588:	f001 ff16 	bl	80213b8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801f58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f58e:	685b      	ldr	r3, [r3, #4]
 801f590:	2214      	movs	r2, #20
 801f592:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801f594:	4618      	mov	r0, r3
 801f596:	f002 fa2e 	bl	80219f6 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801f59a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f59c:	685b      	ldr	r3, [r3, #4]
 801f59e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801f5a0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801f5a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801f5a6:	e064      	b.n	801f672 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801f5a8:	68fb      	ldr	r3, [r7, #12]
 801f5aa:	895a      	ldrh	r2, [r3, #10]
 801f5ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f5ae:	1ad3      	subs	r3, r2, r3
 801f5b0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801f5b2:	68fb      	ldr	r3, [r7, #12]
 801f5b4:	895b      	ldrh	r3, [r3, #10]
 801f5b6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801f5b8:	429a      	cmp	r2, r3
 801f5ba:	d906      	bls.n	801f5ca <ip4_frag+0x10e>
 801f5bc:	4b5c      	ldr	r3, [pc, #368]	; (801f730 <ip4_frag+0x274>)
 801f5be:	f240 322d 	movw	r2, #813	; 0x32d
 801f5c2:	495f      	ldr	r1, [pc, #380]	; (801f740 <ip4_frag+0x284>)
 801f5c4:	485c      	ldr	r0, [pc, #368]	; (801f738 <ip4_frag+0x27c>)
 801f5c6:	f001 fef7 	bl	80213b8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801f5ca:	8bfa      	ldrh	r2, [r7, #30]
 801f5cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801f5d0:	4293      	cmp	r3, r2
 801f5d2:	bf28      	it	cs
 801f5d4:	4613      	movcs	r3, r2
 801f5d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801f5da:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801f5de:	2b00      	cmp	r3, #0
 801f5e0:	d105      	bne.n	801f5ee <ip4_frag+0x132>
        poff = 0;
 801f5e2:	2300      	movs	r3, #0
 801f5e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801f5e6:	68fb      	ldr	r3, [r7, #12]
 801f5e8:	681b      	ldr	r3, [r3, #0]
 801f5ea:	60fb      	str	r3, [r7, #12]
        continue;
 801f5ec:	e041      	b.n	801f672 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801f5ee:	f7ff ff0d 	bl	801f40c <ip_frag_alloc_pbuf_custom_ref>
 801f5f2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801f5f4:	69bb      	ldr	r3, [r7, #24]
 801f5f6:	2b00      	cmp	r3, #0
 801f5f8:	d103      	bne.n	801f602 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801f5fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f5fc:	f7f4 fd98 	bl	8014130 <pbuf_free>
        goto memerr;
 801f600:	e08f      	b.n	801f722 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f602:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801f608:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801f60a:	4413      	add	r3, r2
 801f60c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801f610:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801f614:	9201      	str	r2, [sp, #4]
 801f616:	9300      	str	r3, [sp, #0]
 801f618:	4603      	mov	r3, r0
 801f61a:	2241      	movs	r2, #65	; 0x41
 801f61c:	2000      	movs	r0, #0
 801f61e:	f7f4 fbcd 	bl	8013dbc <pbuf_alloced_custom>
 801f622:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801f624:	697b      	ldr	r3, [r7, #20]
 801f626:	2b00      	cmp	r3, #0
 801f628:	d106      	bne.n	801f638 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801f62a:	69b8      	ldr	r0, [r7, #24]
 801f62c:	f7ff fef6 	bl	801f41c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801f630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f632:	f7f4 fd7d 	bl	8014130 <pbuf_free>
        goto memerr;
 801f636:	e074      	b.n	801f722 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801f638:	68f8      	ldr	r0, [r7, #12]
 801f63a:	f7f4 fe1f 	bl	801427c <pbuf_ref>
      pcr->original = p;
 801f63e:	69bb      	ldr	r3, [r7, #24]
 801f640:	68fa      	ldr	r2, [r7, #12]
 801f642:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801f644:	69bb      	ldr	r3, [r7, #24]
 801f646:	4a3f      	ldr	r2, [pc, #252]	; (801f744 <ip4_frag+0x288>)
 801f648:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801f64a:	6979      	ldr	r1, [r7, #20]
 801f64c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f64e:	f7f4 fe3d 	bl	80142cc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801f652:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801f656:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801f65a:	1ad3      	subs	r3, r2, r3
 801f65c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801f660:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801f664:	2b00      	cmp	r3, #0
 801f666:	d004      	beq.n	801f672 <ip4_frag+0x1b6>
        poff = 0;
 801f668:	2300      	movs	r3, #0
 801f66a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801f66c:	68fb      	ldr	r3, [r7, #12]
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801f672:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801f676:	2b00      	cmp	r3, #0
 801f678:	d196      	bne.n	801f5a8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801f67a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801f67c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801f680:	4413      	add	r3, r2
 801f682:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801f684:	68bb      	ldr	r3, [r7, #8]
 801f686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801f688:	f1a3 0213 	sub.w	r2, r3, #19
 801f68c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f690:	429a      	cmp	r2, r3
 801f692:	bfcc      	ite	gt
 801f694:	2301      	movgt	r3, #1
 801f696:	2300      	movle	r3, #0
 801f698:	b2db      	uxtb	r3, r3
 801f69a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801f69c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801f6a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801f6a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801f6a6:	6a3b      	ldr	r3, [r7, #32]
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d002      	beq.n	801f6b2 <ip4_frag+0x1f6>
 801f6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f6ae:	2b00      	cmp	r3, #0
 801f6b0:	d003      	beq.n	801f6ba <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801f6b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f6b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801f6b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801f6ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801f6bc:	4618      	mov	r0, r3
 801f6be:	f7f3 f939 	bl	8012934 <lwip_htons>
 801f6c2:	4603      	mov	r3, r0
 801f6c4:	461a      	mov	r2, r3
 801f6c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6c8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801f6ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801f6cc:	3314      	adds	r3, #20
 801f6ce:	b29b      	uxth	r3, r3
 801f6d0:	4618      	mov	r0, r3
 801f6d2:	f7f3 f92f 	bl	8012934 <lwip_htons>
 801f6d6:	4603      	mov	r3, r0
 801f6d8:	461a      	mov	r2, r3
 801f6da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6dc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801f6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f6e0:	2200      	movs	r2, #0
 801f6e2:	729a      	strb	r2, [r3, #10]
 801f6e4:	2200      	movs	r2, #0
 801f6e6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801f6e8:	68bb      	ldr	r3, [r7, #8]
 801f6ea:	695b      	ldr	r3, [r3, #20]
 801f6ec:	687a      	ldr	r2, [r7, #4]
 801f6ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f6f0:	68b8      	ldr	r0, [r7, #8]
 801f6f2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801f6f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f6f6:	f7f4 fd1b 	bl	8014130 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801f6fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801f6fe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801f700:	1ad3      	subs	r3, r2, r3
 801f702:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801f706:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801f70a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801f70c:	4413      	add	r3, r2
 801f70e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801f712:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801f716:	2b00      	cmp	r3, #0
 801f718:	f47f af19 	bne.w	801f54e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801f71c:	2300      	movs	r3, #0
 801f71e:	e002      	b.n	801f726 <ip4_frag+0x26a>
      goto memerr;
 801f720:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801f722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801f726:	4618      	mov	r0, r3
 801f728:	3748      	adds	r7, #72	; 0x48
 801f72a:	46bd      	mov	sp, r7
 801f72c:	bd80      	pop	{r7, pc}
 801f72e:	bf00      	nop
 801f730:	08026b54 	.word	0x08026b54
 801f734:	08026d30 	.word	0x08026d30
 801f738:	08026b9c 	.word	0x08026b9c
 801f73c:	08026d4c 	.word	0x08026d4c
 801f740:	08026d6c 	.word	0x08026d6c
 801f744:	0801f455 	.word	0x0801f455

0801f748 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801f748:	b580      	push	{r7, lr}
 801f74a:	b086      	sub	sp, #24
 801f74c:	af00      	add	r7, sp, #0
 801f74e:	6078      	str	r0, [r7, #4]
 801f750:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801f752:	230e      	movs	r3, #14
 801f754:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801f756:	687b      	ldr	r3, [r7, #4]
 801f758:	895b      	ldrh	r3, [r3, #10]
 801f75a:	2b0e      	cmp	r3, #14
 801f75c:	d96e      	bls.n	801f83c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	7bdb      	ldrb	r3, [r3, #15]
 801f762:	2b00      	cmp	r3, #0
 801f764:	d106      	bne.n	801f774 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801f766:	683b      	ldr	r3, [r7, #0]
 801f768:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f76c:	3301      	adds	r3, #1
 801f76e:	b2da      	uxtb	r2, r3
 801f770:	687b      	ldr	r3, [r7, #4]
 801f772:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	685b      	ldr	r3, [r3, #4]
 801f778:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801f77a:	693b      	ldr	r3, [r7, #16]
 801f77c:	7b1a      	ldrb	r2, [r3, #12]
 801f77e:	7b5b      	ldrb	r3, [r3, #13]
 801f780:	021b      	lsls	r3, r3, #8
 801f782:	4313      	orrs	r3, r2
 801f784:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801f786:	693b      	ldr	r3, [r7, #16]
 801f788:	781b      	ldrb	r3, [r3, #0]
 801f78a:	f003 0301 	and.w	r3, r3, #1
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d023      	beq.n	801f7da <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801f792:	693b      	ldr	r3, [r7, #16]
 801f794:	781b      	ldrb	r3, [r3, #0]
 801f796:	2b01      	cmp	r3, #1
 801f798:	d10f      	bne.n	801f7ba <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f79a:	693b      	ldr	r3, [r7, #16]
 801f79c:	785b      	ldrb	r3, [r3, #1]
 801f79e:	2b00      	cmp	r3, #0
 801f7a0:	d11b      	bne.n	801f7da <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801f7a2:	693b      	ldr	r3, [r7, #16]
 801f7a4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801f7a6:	2b5e      	cmp	r3, #94	; 0x5e
 801f7a8:	d117      	bne.n	801f7da <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801f7aa:	687b      	ldr	r3, [r7, #4]
 801f7ac:	7b5b      	ldrb	r3, [r3, #13]
 801f7ae:	f043 0310 	orr.w	r3, r3, #16
 801f7b2:	b2da      	uxtb	r2, r3
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	735a      	strb	r2, [r3, #13]
 801f7b8:	e00f      	b.n	801f7da <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801f7ba:	693b      	ldr	r3, [r7, #16]
 801f7bc:	2206      	movs	r2, #6
 801f7be:	4928      	ldr	r1, [pc, #160]	; (801f860 <ethernet_input+0x118>)
 801f7c0:	4618      	mov	r0, r3
 801f7c2:	f001 ffe5 	bl	8021790 <memcmp>
 801f7c6:	4603      	mov	r3, r0
 801f7c8:	2b00      	cmp	r3, #0
 801f7ca:	d106      	bne.n	801f7da <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	7b5b      	ldrb	r3, [r3, #13]
 801f7d0:	f043 0308 	orr.w	r3, r3, #8
 801f7d4:	b2da      	uxtb	r2, r3
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801f7da:	89fb      	ldrh	r3, [r7, #14]
 801f7dc:	2b08      	cmp	r3, #8
 801f7de:	d003      	beq.n	801f7e8 <ethernet_input+0xa0>
 801f7e0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801f7e4:	d014      	beq.n	801f810 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801f7e6:	e032      	b.n	801f84e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f7e8:	683b      	ldr	r3, [r7, #0]
 801f7ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f7ee:	f003 0308 	and.w	r3, r3, #8
 801f7f2:	2b00      	cmp	r3, #0
 801f7f4:	d024      	beq.n	801f840 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f7f6:	8afb      	ldrh	r3, [r7, #22]
 801f7f8:	4619      	mov	r1, r3
 801f7fa:	6878      	ldr	r0, [r7, #4]
 801f7fc:	f7f4 fc12 	bl	8014024 <pbuf_remove_header>
 801f800:	4603      	mov	r3, r0
 801f802:	2b00      	cmp	r3, #0
 801f804:	d11e      	bne.n	801f844 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801f806:	6839      	ldr	r1, [r7, #0]
 801f808:	6878      	ldr	r0, [r7, #4]
 801f80a:	f7fe fe73 	bl	801e4f4 <ip4_input>
      break;
 801f80e:	e013      	b.n	801f838 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801f810:	683b      	ldr	r3, [r7, #0]
 801f812:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801f816:	f003 0308 	and.w	r3, r3, #8
 801f81a:	2b00      	cmp	r3, #0
 801f81c:	d014      	beq.n	801f848 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801f81e:	8afb      	ldrh	r3, [r7, #22]
 801f820:	4619      	mov	r1, r3
 801f822:	6878      	ldr	r0, [r7, #4]
 801f824:	f7f4 fbfe 	bl	8014024 <pbuf_remove_header>
 801f828:	4603      	mov	r3, r0
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d10e      	bne.n	801f84c <ethernet_input+0x104>
        etharp_input(p, netif);
 801f82e:	6839      	ldr	r1, [r7, #0]
 801f830:	6878      	ldr	r0, [r7, #4]
 801f832:	f7fe f80f 	bl	801d854 <etharp_input>
      break;
 801f836:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801f838:	2300      	movs	r3, #0
 801f83a:	e00c      	b.n	801f856 <ethernet_input+0x10e>
    goto free_and_return;
 801f83c:	bf00      	nop
 801f83e:	e006      	b.n	801f84e <ethernet_input+0x106>
        goto free_and_return;
 801f840:	bf00      	nop
 801f842:	e004      	b.n	801f84e <ethernet_input+0x106>
        goto free_and_return;
 801f844:	bf00      	nop
 801f846:	e002      	b.n	801f84e <ethernet_input+0x106>
        goto free_and_return;
 801f848:	bf00      	nop
 801f84a:	e000      	b.n	801f84e <ethernet_input+0x106>
        goto free_and_return;
 801f84c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801f84e:	6878      	ldr	r0, [r7, #4]
 801f850:	f7f4 fc6e 	bl	8014130 <pbuf_free>
  return ERR_OK;
 801f854:	2300      	movs	r3, #0
}
 801f856:	4618      	mov	r0, r3
 801f858:	3718      	adds	r7, #24
 801f85a:	46bd      	mov	sp, r7
 801f85c:	bd80      	pop	{r7, pc}
 801f85e:	bf00      	nop
 801f860:	08027078 	.word	0x08027078

0801f864 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801f864:	b580      	push	{r7, lr}
 801f866:	b086      	sub	sp, #24
 801f868:	af00      	add	r7, sp, #0
 801f86a:	60f8      	str	r0, [r7, #12]
 801f86c:	60b9      	str	r1, [r7, #8]
 801f86e:	607a      	str	r2, [r7, #4]
 801f870:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801f872:	8c3b      	ldrh	r3, [r7, #32]
 801f874:	4618      	mov	r0, r3
 801f876:	f7f3 f85d 	bl	8012934 <lwip_htons>
 801f87a:	4603      	mov	r3, r0
 801f87c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801f87e:	210e      	movs	r1, #14
 801f880:	68b8      	ldr	r0, [r7, #8]
 801f882:	f7f4 fbbf 	bl	8014004 <pbuf_add_header>
 801f886:	4603      	mov	r3, r0
 801f888:	2b00      	cmp	r3, #0
 801f88a:	d125      	bne.n	801f8d8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801f88c:	68bb      	ldr	r3, [r7, #8]
 801f88e:	685b      	ldr	r3, [r3, #4]
 801f890:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801f892:	693b      	ldr	r3, [r7, #16]
 801f894:	8afa      	ldrh	r2, [r7, #22]
 801f896:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801f898:	693b      	ldr	r3, [r7, #16]
 801f89a:	2206      	movs	r2, #6
 801f89c:	6839      	ldr	r1, [r7, #0]
 801f89e:	4618      	mov	r0, r3
 801f8a0:	f002 f8a9 	bl	80219f6 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801f8a4:	693b      	ldr	r3, [r7, #16]
 801f8a6:	3306      	adds	r3, #6
 801f8a8:	2206      	movs	r2, #6
 801f8aa:	6879      	ldr	r1, [r7, #4]
 801f8ac:	4618      	mov	r0, r3
 801f8ae:	f002 f8a2 	bl	80219f6 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801f8b2:	68fb      	ldr	r3, [r7, #12]
 801f8b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801f8b8:	2b06      	cmp	r3, #6
 801f8ba:	d006      	beq.n	801f8ca <ethernet_output+0x66>
 801f8bc:	4b0a      	ldr	r3, [pc, #40]	; (801f8e8 <ethernet_output+0x84>)
 801f8be:	f44f 7299 	mov.w	r2, #306	; 0x132
 801f8c2:	490a      	ldr	r1, [pc, #40]	; (801f8ec <ethernet_output+0x88>)
 801f8c4:	480a      	ldr	r0, [pc, #40]	; (801f8f0 <ethernet_output+0x8c>)
 801f8c6:	f001 fd77 	bl	80213b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801f8ca:	68fb      	ldr	r3, [r7, #12]
 801f8cc:	699b      	ldr	r3, [r3, #24]
 801f8ce:	68b9      	ldr	r1, [r7, #8]
 801f8d0:	68f8      	ldr	r0, [r7, #12]
 801f8d2:	4798      	blx	r3
 801f8d4:	4603      	mov	r3, r0
 801f8d6:	e002      	b.n	801f8de <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801f8d8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801f8da:	f06f 0301 	mvn.w	r3, #1
}
 801f8de:	4618      	mov	r0, r3
 801f8e0:	3718      	adds	r7, #24
 801f8e2:	46bd      	mov	sp, r7
 801f8e4:	bd80      	pop	{r7, pc}
 801f8e6:	bf00      	nop
 801f8e8:	08026d7c 	.word	0x08026d7c
 801f8ec:	08026db4 	.word	0x08026db4
 801f8f0:	08026de8 	.word	0x08026de8

0801f8f4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801f8f4:	b580      	push	{r7, lr}
 801f8f6:	b086      	sub	sp, #24
 801f8f8:	af00      	add	r7, sp, #0
 801f8fa:	6078      	str	r0, [r7, #4]
 801f8fc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801f8fe:	683b      	ldr	r3, [r7, #0]
 801f900:	60bb      	str	r3, [r7, #8]
 801f902:	2304      	movs	r3, #4
 801f904:	60fb      	str	r3, [r7, #12]
 801f906:	2300      	movs	r3, #0
 801f908:	613b      	str	r3, [r7, #16]
 801f90a:	2300      	movs	r3, #0
 801f90c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801f90e:	f107 0308 	add.w	r3, r7, #8
 801f912:	2100      	movs	r1, #0
 801f914:	4618      	mov	r0, r3
 801f916:	f7e7 fbec 	bl	80070f2 <osMessageCreate>
 801f91a:	4602      	mov	r2, r0
 801f91c:	687b      	ldr	r3, [r7, #4]
 801f91e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	681b      	ldr	r3, [r3, #0]
 801f924:	2b00      	cmp	r3, #0
 801f926:	d102      	bne.n	801f92e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801f928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f92c:	e000      	b.n	801f930 <sys_mbox_new+0x3c>

  return ERR_OK;
 801f92e:	2300      	movs	r3, #0
}
 801f930:	4618      	mov	r0, r3
 801f932:	3718      	adds	r7, #24
 801f934:	46bd      	mov	sp, r7
 801f936:	bd80      	pop	{r7, pc}

0801f938 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801f938:	b580      	push	{r7, lr}
 801f93a:	b082      	sub	sp, #8
 801f93c:	af00      	add	r7, sp, #0
 801f93e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801f940:	687b      	ldr	r3, [r7, #4]
 801f942:	681b      	ldr	r3, [r3, #0]
 801f944:	4618      	mov	r0, r3
 801f946:	f7e7 fcb1 	bl	80072ac <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801f94a:	687b      	ldr	r3, [r7, #4]
 801f94c:	681b      	ldr	r3, [r3, #0]
 801f94e:	4618      	mov	r0, r3
 801f950:	f7e7 fcc2 	bl	80072d8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801f954:	bf00      	nop
 801f956:	3708      	adds	r7, #8
 801f958:	46bd      	mov	sp, r7
 801f95a:	bd80      	pop	{r7, pc}

0801f95c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801f95c:	b580      	push	{r7, lr}
 801f95e:	b084      	sub	sp, #16
 801f960:	af00      	add	r7, sp, #0
 801f962:	6078      	str	r0, [r7, #4]
 801f964:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801f966:	687b      	ldr	r3, [r7, #4]
 801f968:	681b      	ldr	r3, [r3, #0]
 801f96a:	6839      	ldr	r1, [r7, #0]
 801f96c:	2200      	movs	r2, #0
 801f96e:	4618      	mov	r0, r3
 801f970:	f7e7 fbe8 	bl	8007144 <osMessagePut>
 801f974:	4603      	mov	r3, r0
 801f976:	2b00      	cmp	r3, #0
 801f978:	d102      	bne.n	801f980 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801f97a:	2300      	movs	r3, #0
 801f97c:	73fb      	strb	r3, [r7, #15]
 801f97e:	e001      	b.n	801f984 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801f980:	23ff      	movs	r3, #255	; 0xff
 801f982:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801f984:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f988:	4618      	mov	r0, r3
 801f98a:	3710      	adds	r7, #16
 801f98c:	46bd      	mov	sp, r7
 801f98e:	bd80      	pop	{r7, pc}

0801f990 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801f990:	b580      	push	{r7, lr}
 801f992:	b08c      	sub	sp, #48	; 0x30
 801f994:	af00      	add	r7, sp, #0
 801f996:	61f8      	str	r0, [r7, #28]
 801f998:	61b9      	str	r1, [r7, #24]
 801f99a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801f99c:	f7e7 f9d4 	bl	8006d48 <osKernelSysTick>
 801f9a0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801f9a2:	697b      	ldr	r3, [r7, #20]
 801f9a4:	2b00      	cmp	r3, #0
 801f9a6:	d017      	beq.n	801f9d8 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801f9a8:	69fb      	ldr	r3, [r7, #28]
 801f9aa:	6819      	ldr	r1, [r3, #0]
 801f9ac:	f107 0320 	add.w	r3, r7, #32
 801f9b0:	697a      	ldr	r2, [r7, #20]
 801f9b2:	4618      	mov	r0, r3
 801f9b4:	f7e7 fc06 	bl	80071c4 <osMessageGet>

    if(event.status == osEventMessage)
 801f9b8:	6a3b      	ldr	r3, [r7, #32]
 801f9ba:	2b10      	cmp	r3, #16
 801f9bc:	d109      	bne.n	801f9d2 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801f9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9c0:	461a      	mov	r2, r3
 801f9c2:	69bb      	ldr	r3, [r7, #24]
 801f9c4:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801f9c6:	f7e7 f9bf 	bl	8006d48 <osKernelSysTick>
 801f9ca:	4602      	mov	r2, r0
 801f9cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f9ce:	1ad3      	subs	r3, r2, r3
 801f9d0:	e019      	b.n	801fa06 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801f9d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f9d6:	e016      	b.n	801fa06 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801f9d8:	69fb      	ldr	r3, [r7, #28]
 801f9da:	6819      	ldr	r1, [r3, #0]
 801f9dc:	463b      	mov	r3, r7
 801f9de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f9e2:	4618      	mov	r0, r3
 801f9e4:	f7e7 fbee 	bl	80071c4 <osMessageGet>
 801f9e8:	f107 0320 	add.w	r3, r7, #32
 801f9ec:	463a      	mov	r2, r7
 801f9ee:	ca07      	ldmia	r2, {r0, r1, r2}
 801f9f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801f9f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9f6:	461a      	mov	r2, r3
 801f9f8:	69bb      	ldr	r3, [r7, #24]
 801f9fa:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801f9fc:	f7e7 f9a4 	bl	8006d48 <osKernelSysTick>
 801fa00:	4602      	mov	r2, r0
 801fa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fa04:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801fa06:	4618      	mov	r0, r3
 801fa08:	3730      	adds	r7, #48	; 0x30
 801fa0a:	46bd      	mov	sp, r7
 801fa0c:	bd80      	pop	{r7, pc}

0801fa0e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801fa0e:	b580      	push	{r7, lr}
 801fa10:	b086      	sub	sp, #24
 801fa12:	af00      	add	r7, sp, #0
 801fa14:	6078      	str	r0, [r7, #4]
 801fa16:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801fa18:	687b      	ldr	r3, [r7, #4]
 801fa1a:	6819      	ldr	r1, [r3, #0]
 801fa1c:	f107 030c 	add.w	r3, r7, #12
 801fa20:	2200      	movs	r2, #0
 801fa22:	4618      	mov	r0, r3
 801fa24:	f7e7 fbce 	bl	80071c4 <osMessageGet>

  if(event.status == osEventMessage)
 801fa28:	68fb      	ldr	r3, [r7, #12]
 801fa2a:	2b10      	cmp	r3, #16
 801fa2c:	d105      	bne.n	801fa3a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801fa2e:	693b      	ldr	r3, [r7, #16]
 801fa30:	461a      	mov	r2, r3
 801fa32:	683b      	ldr	r3, [r7, #0]
 801fa34:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801fa36:	2300      	movs	r3, #0
 801fa38:	e001      	b.n	801fa3e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801fa3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 801fa3e:	4618      	mov	r0, r3
 801fa40:	3718      	adds	r7, #24
 801fa42:	46bd      	mov	sp, r7
 801fa44:	bd80      	pop	{r7, pc}

0801fa46 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801fa46:	b480      	push	{r7}
 801fa48:	b083      	sub	sp, #12
 801fa4a:	af00      	add	r7, sp, #0
 801fa4c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801fa4e:	687b      	ldr	r3, [r7, #4]
 801fa50:	681b      	ldr	r3, [r3, #0]
 801fa52:	2b00      	cmp	r3, #0
 801fa54:	d101      	bne.n	801fa5a <sys_mbox_valid+0x14>
    return 0;
 801fa56:	2300      	movs	r3, #0
 801fa58:	e000      	b.n	801fa5c <sys_mbox_valid+0x16>
  else
    return 1;
 801fa5a:	2301      	movs	r3, #1
}
 801fa5c:	4618      	mov	r0, r3
 801fa5e:	370c      	adds	r7, #12
 801fa60:	46bd      	mov	sp, r7
 801fa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa66:	4770      	bx	lr

0801fa68 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801fa68:	b480      	push	{r7}
 801fa6a:	b083      	sub	sp, #12
 801fa6c:	af00      	add	r7, sp, #0
 801fa6e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	2200      	movs	r2, #0
 801fa74:	601a      	str	r2, [r3, #0]
}
 801fa76:	bf00      	nop
 801fa78:	370c      	adds	r7, #12
 801fa7a:	46bd      	mov	sp, r7
 801fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa80:	4770      	bx	lr

0801fa82 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801fa82:	b580      	push	{r7, lr}
 801fa84:	b084      	sub	sp, #16
 801fa86:	af00      	add	r7, sp, #0
 801fa88:	6078      	str	r0, [r7, #4]
 801fa8a:	460b      	mov	r3, r1
 801fa8c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801fa8e:	2300      	movs	r3, #0
 801fa90:	60bb      	str	r3, [r7, #8]
 801fa92:	2300      	movs	r3, #0
 801fa94:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801fa96:	f107 0308 	add.w	r3, r7, #8
 801fa9a:	2101      	movs	r1, #1
 801fa9c:	4618      	mov	r0, r3
 801fa9e:	f7e7 fa5f 	bl	8006f60 <osSemaphoreCreate>
 801faa2:	4602      	mov	r2, r0
 801faa4:	687b      	ldr	r3, [r7, #4]
 801faa6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801faa8:	687b      	ldr	r3, [r7, #4]
 801faaa:	681b      	ldr	r3, [r3, #0]
 801faac:	2b00      	cmp	r3, #0
 801faae:	d102      	bne.n	801fab6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801fab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fab4:	e009      	b.n	801faca <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801fab6:	78fb      	ldrb	r3, [r7, #3]
 801fab8:	2b00      	cmp	r3, #0
 801faba:	d105      	bne.n	801fac8 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801fabc:	687b      	ldr	r3, [r7, #4]
 801fabe:	681b      	ldr	r3, [r3, #0]
 801fac0:	2100      	movs	r1, #0
 801fac2:	4618      	mov	r0, r3
 801fac4:	f7e7 fa7e 	bl	8006fc4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801fac8:	2300      	movs	r3, #0
}
 801faca:	4618      	mov	r0, r3
 801facc:	3710      	adds	r7, #16
 801face:	46bd      	mov	sp, r7
 801fad0:	bd80      	pop	{r7, pc}

0801fad2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801fad2:	b580      	push	{r7, lr}
 801fad4:	b084      	sub	sp, #16
 801fad6:	af00      	add	r7, sp, #0
 801fad8:	6078      	str	r0, [r7, #4]
 801fada:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801fadc:	f7e7 f934 	bl	8006d48 <osKernelSysTick>
 801fae0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801fae2:	683b      	ldr	r3, [r7, #0]
 801fae4:	2b00      	cmp	r3, #0
 801fae6:	d011      	beq.n	801fb0c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801fae8:	687b      	ldr	r3, [r7, #4]
 801faea:	681b      	ldr	r3, [r3, #0]
 801faec:	6839      	ldr	r1, [r7, #0]
 801faee:	4618      	mov	r0, r3
 801faf0:	f7e7 fa68 	bl	8006fc4 <osSemaphoreWait>
 801faf4:	4603      	mov	r3, r0
 801faf6:	2b00      	cmp	r3, #0
 801faf8:	d105      	bne.n	801fb06 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801fafa:	f7e7 f925 	bl	8006d48 <osKernelSysTick>
 801fafe:	4602      	mov	r2, r0
 801fb00:	68fb      	ldr	r3, [r7, #12]
 801fb02:	1ad3      	subs	r3, r2, r3
 801fb04:	e012      	b.n	801fb2c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801fb06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fb0a:	e00f      	b.n	801fb2c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801fb0c:	bf00      	nop
 801fb0e:	687b      	ldr	r3, [r7, #4]
 801fb10:	681b      	ldr	r3, [r3, #0]
 801fb12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801fb16:	4618      	mov	r0, r3
 801fb18:	f7e7 fa54 	bl	8006fc4 <osSemaphoreWait>
 801fb1c:	4603      	mov	r3, r0
 801fb1e:	2b00      	cmp	r3, #0
 801fb20:	d1f5      	bne.n	801fb0e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801fb22:	f7e7 f911 	bl	8006d48 <osKernelSysTick>
 801fb26:	4602      	mov	r2, r0
 801fb28:	68fb      	ldr	r3, [r7, #12]
 801fb2a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801fb2c:	4618      	mov	r0, r3
 801fb2e:	3710      	adds	r7, #16
 801fb30:	46bd      	mov	sp, r7
 801fb32:	bd80      	pop	{r7, pc}

0801fb34 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801fb34:	b580      	push	{r7, lr}
 801fb36:	b082      	sub	sp, #8
 801fb38:	af00      	add	r7, sp, #0
 801fb3a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	681b      	ldr	r3, [r3, #0]
 801fb40:	4618      	mov	r0, r3
 801fb42:	f7e7 fa8d 	bl	8007060 <osSemaphoreRelease>
}
 801fb46:	bf00      	nop
 801fb48:	3708      	adds	r7, #8
 801fb4a:	46bd      	mov	sp, r7
 801fb4c:	bd80      	pop	{r7, pc}

0801fb4e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801fb4e:	b580      	push	{r7, lr}
 801fb50:	b082      	sub	sp, #8
 801fb52:	af00      	add	r7, sp, #0
 801fb54:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801fb56:	687b      	ldr	r3, [r7, #4]
 801fb58:	681b      	ldr	r3, [r3, #0]
 801fb5a:	4618      	mov	r0, r3
 801fb5c:	f7e7 fab6 	bl	80070cc <osSemaphoreDelete>
}
 801fb60:	bf00      	nop
 801fb62:	3708      	adds	r7, #8
 801fb64:	46bd      	mov	sp, r7
 801fb66:	bd80      	pop	{r7, pc}

0801fb68 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801fb68:	b480      	push	{r7}
 801fb6a:	b083      	sub	sp, #12
 801fb6c:	af00      	add	r7, sp, #0
 801fb6e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801fb70:	687b      	ldr	r3, [r7, #4]
 801fb72:	681b      	ldr	r3, [r3, #0]
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	d101      	bne.n	801fb7c <sys_sem_valid+0x14>
    return 0;
 801fb78:	2300      	movs	r3, #0
 801fb7a:	e000      	b.n	801fb7e <sys_sem_valid+0x16>
  else
    return 1;
 801fb7c:	2301      	movs	r3, #1
}
 801fb7e:	4618      	mov	r0, r3
 801fb80:	370c      	adds	r7, #12
 801fb82:	46bd      	mov	sp, r7
 801fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb88:	4770      	bx	lr

0801fb8a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801fb8a:	b480      	push	{r7}
 801fb8c:	b083      	sub	sp, #12
 801fb8e:	af00      	add	r7, sp, #0
 801fb90:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801fb92:	687b      	ldr	r3, [r7, #4]
 801fb94:	2200      	movs	r2, #0
 801fb96:	601a      	str	r2, [r3, #0]
}
 801fb98:	bf00      	nop
 801fb9a:	370c      	adds	r7, #12
 801fb9c:	46bd      	mov	sp, r7
 801fb9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fba2:	4770      	bx	lr

0801fba4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801fba4:	b580      	push	{r7, lr}
 801fba6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801fba8:	4803      	ldr	r0, [pc, #12]	; (801fbb8 <sys_init+0x14>)
 801fbaa:	f7e7 f93d 	bl	8006e28 <osMutexCreate>
 801fbae:	4603      	mov	r3, r0
 801fbb0:	4a02      	ldr	r2, [pc, #8]	; (801fbbc <sys_init+0x18>)
 801fbb2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801fbb4:	bf00      	nop
 801fbb6:	bd80      	pop	{r7, pc}
 801fbb8:	08027088 	.word	0x08027088
 801fbbc:	20012470 	.word	0x20012470

0801fbc0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801fbc0:	b580      	push	{r7, lr}
 801fbc2:	b084      	sub	sp, #16
 801fbc4:	af00      	add	r7, sp, #0
 801fbc6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801fbc8:	2300      	movs	r3, #0
 801fbca:	60bb      	str	r3, [r7, #8]
 801fbcc:	2300      	movs	r3, #0
 801fbce:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801fbd0:	f107 0308 	add.w	r3, r7, #8
 801fbd4:	4618      	mov	r0, r3
 801fbd6:	f7e7 f927 	bl	8006e28 <osMutexCreate>
 801fbda:	4602      	mov	r2, r0
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801fbe0:	687b      	ldr	r3, [r7, #4]
 801fbe2:	681b      	ldr	r3, [r3, #0]
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d102      	bne.n	801fbee <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801fbe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fbec:	e000      	b.n	801fbf0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801fbee:	2300      	movs	r3, #0
}
 801fbf0:	4618      	mov	r0, r3
 801fbf2:	3710      	adds	r7, #16
 801fbf4:	46bd      	mov	sp, r7
 801fbf6:	bd80      	pop	{r7, pc}

0801fbf8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801fbf8:	b580      	push	{r7, lr}
 801fbfa:	b082      	sub	sp, #8
 801fbfc:	af00      	add	r7, sp, #0
 801fbfe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801fc00:	687b      	ldr	r3, [r7, #4]
 801fc02:	681b      	ldr	r3, [r3, #0]
 801fc04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801fc08:	4618      	mov	r0, r3
 801fc0a:	f7e7 f925 	bl	8006e58 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801fc0e:	bf00      	nop
 801fc10:	3708      	adds	r7, #8
 801fc12:	46bd      	mov	sp, r7
 801fc14:	bd80      	pop	{r7, pc}

0801fc16 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801fc16:	b580      	push	{r7, lr}
 801fc18:	b082      	sub	sp, #8
 801fc1a:	af00      	add	r7, sp, #0
 801fc1c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801fc1e:	687b      	ldr	r3, [r7, #4]
 801fc20:	681b      	ldr	r3, [r3, #0]
 801fc22:	4618      	mov	r0, r3
 801fc24:	f7e7 f966 	bl	8006ef4 <osMutexRelease>
}
 801fc28:	bf00      	nop
 801fc2a:	3708      	adds	r7, #8
 801fc2c:	46bd      	mov	sp, r7
 801fc2e:	bd80      	pop	{r7, pc}

0801fc30 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801fc30:	b580      	push	{r7, lr}
 801fc32:	b08c      	sub	sp, #48	; 0x30
 801fc34:	af00      	add	r7, sp, #0
 801fc36:	60f8      	str	r0, [r7, #12]
 801fc38:	60b9      	str	r1, [r7, #8]
 801fc3a:	607a      	str	r2, [r7, #4]
 801fc3c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801fc3e:	f107 0314 	add.w	r3, r7, #20
 801fc42:	2200      	movs	r2, #0
 801fc44:	601a      	str	r2, [r3, #0]
 801fc46:	605a      	str	r2, [r3, #4]
 801fc48:	609a      	str	r2, [r3, #8]
 801fc4a:	60da      	str	r2, [r3, #12]
 801fc4c:	611a      	str	r2, [r3, #16]
 801fc4e:	615a      	str	r2, [r3, #20]
 801fc50:	619a      	str	r2, [r3, #24]
 801fc52:	68fb      	ldr	r3, [r7, #12]
 801fc54:	617b      	str	r3, [r7, #20]
 801fc56:	68bb      	ldr	r3, [r7, #8]
 801fc58:	61bb      	str	r3, [r7, #24]
 801fc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc5c:	b21b      	sxth	r3, r3
 801fc5e:	83bb      	strh	r3, [r7, #28]
 801fc60:	683b      	ldr	r3, [r7, #0]
 801fc62:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801fc64:	f107 0314 	add.w	r3, r7, #20
 801fc68:	6879      	ldr	r1, [r7, #4]
 801fc6a:	4618      	mov	r0, r3
 801fc6c:	f7e7 f87c 	bl	8006d68 <osThreadCreate>
 801fc70:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801fc72:	4618      	mov	r0, r3
 801fc74:	3730      	adds	r7, #48	; 0x30
 801fc76:	46bd      	mov	sp, r7
 801fc78:	bd80      	pop	{r7, pc}
	...

0801fc7c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801fc7c:	b580      	push	{r7, lr}
 801fc7e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801fc80:	4b04      	ldr	r3, [pc, #16]	; (801fc94 <sys_arch_protect+0x18>)
 801fc82:	681b      	ldr	r3, [r3, #0]
 801fc84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801fc88:	4618      	mov	r0, r3
 801fc8a:	f7e7 f8e5 	bl	8006e58 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801fc8e:	2301      	movs	r3, #1
}
 801fc90:	4618      	mov	r0, r3
 801fc92:	bd80      	pop	{r7, pc}
 801fc94:	20012470 	.word	0x20012470

0801fc98 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801fc98:	b580      	push	{r7, lr}
 801fc9a:	b082      	sub	sp, #8
 801fc9c:	af00      	add	r7, sp, #0
 801fc9e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801fca0:	4b04      	ldr	r3, [pc, #16]	; (801fcb4 <sys_arch_unprotect+0x1c>)
 801fca2:	681b      	ldr	r3, [r3, #0]
 801fca4:	4618      	mov	r0, r3
 801fca6:	f7e7 f925 	bl	8006ef4 <osMutexRelease>
}
 801fcaa:	bf00      	nop
 801fcac:	3708      	adds	r7, #8
 801fcae:	46bd      	mov	sp, r7
 801fcb0:	bd80      	pop	{r7, pc}
 801fcb2:	bf00      	nop
 801fcb4:	20012470 	.word	0x20012470

0801fcb8 <CalculaCRCByte>:





uint16_t CalculaCRCByte ( uint16_t crc, uint8_t byte ) {
 801fcb8:	b480      	push	{r7}
 801fcba:	b085      	sub	sp, #20
 801fcbc:	af00      	add	r7, sp, #0
 801fcbe:	4603      	mov	r3, r0
 801fcc0:	460a      	mov	r2, r1
 801fcc2:	80fb      	strh	r3, [r7, #6]
 801fcc4:	4613      	mov	r3, r2
 801fcc6:	717b      	strb	r3, [r7, #5]
  uint8_t i;
  crc = crc^byte;
 801fcc8:	797b      	ldrb	r3, [r7, #5]
 801fcca:	b29a      	uxth	r2, r3
 801fccc:	88fb      	ldrh	r3, [r7, #6]
 801fcce:	4053      	eors	r3, r2
 801fcd0:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 801fcd2:	2300      	movs	r3, #0
 801fcd4:	73fb      	strb	r3, [r7, #15]
 801fcd6:	e011      	b.n	801fcfc <CalculaCRCByte+0x44>
    if ( ( crc & 1 ) == 1 ) crc = ( crc >> 1 ) ^cPOLINOMIO;
 801fcd8:	88fb      	ldrh	r3, [r7, #6]
 801fcda:	f003 0301 	and.w	r3, r3, #1
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	d006      	beq.n	801fcf0 <CalculaCRCByte+0x38>
 801fce2:	88fb      	ldrh	r3, [r7, #6]
 801fce4:	085b      	lsrs	r3, r3, #1
 801fce6:	b29a      	uxth	r2, r3
 801fce8:	4b09      	ldr	r3, [pc, #36]	; (801fd10 <CalculaCRCByte+0x58>)
 801fcea:	4053      	eors	r3, r2
 801fcec:	80fb      	strh	r3, [r7, #6]
 801fcee:	e002      	b.n	801fcf6 <CalculaCRCByte+0x3e>
    else crc = crc >> 1;
 801fcf0:	88fb      	ldrh	r3, [r7, #6]
 801fcf2:	085b      	lsrs	r3, r3, #1
 801fcf4:	80fb      	strh	r3, [r7, #6]
  for ( i = 0; i < 8; i++ ) {
 801fcf6:	7bfb      	ldrb	r3, [r7, #15]
 801fcf8:	3301      	adds	r3, #1
 801fcfa:	73fb      	strb	r3, [r7, #15]
 801fcfc:	7bfb      	ldrb	r3, [r7, #15]
 801fcfe:	2b07      	cmp	r3, #7
 801fd00:	d9ea      	bls.n	801fcd8 <CalculaCRCByte+0x20>
  }
  return crc;
 801fd02:	88fb      	ldrh	r3, [r7, #6]
}
 801fd04:	4618      	mov	r0, r3
 801fd06:	3714      	adds	r7, #20
 801fd08:	46bd      	mov	sp, r7
 801fd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd0e:	4770      	bx	lr
 801fd10:	ffffa001 	.word	0xffffa001

0801fd14 <CalculaCRCStream>:


uint16_t CalculaCRCStream ( uint8_t *str, uint16_t tam ) {
 801fd14:	b580      	push	{r7, lr}
 801fd16:	b084      	sub	sp, #16
 801fd18:	af00      	add	r7, sp, #0
 801fd1a:	6078      	str	r0, [r7, #4]
 801fd1c:	460b      	mov	r3, r1
 801fd1e:	807b      	strh	r3, [r7, #2]
  uint16_t i,crc;
  crc = 0xFFFF;
 801fd20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801fd24:	81bb      	strh	r3, [r7, #12]
  for( i = 0; i < tam; i++, str++ ) crc = CalculaCRCByte ( crc, *str );
 801fd26:	2300      	movs	r3, #0
 801fd28:	81fb      	strh	r3, [r7, #14]
 801fd2a:	e00e      	b.n	801fd4a <CalculaCRCStream+0x36>
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	781a      	ldrb	r2, [r3, #0]
 801fd30:	89bb      	ldrh	r3, [r7, #12]
 801fd32:	4611      	mov	r1, r2
 801fd34:	4618      	mov	r0, r3
 801fd36:	f7ff ffbf 	bl	801fcb8 <CalculaCRCByte>
 801fd3a:	4603      	mov	r3, r0
 801fd3c:	81bb      	strh	r3, [r7, #12]
 801fd3e:	89fb      	ldrh	r3, [r7, #14]
 801fd40:	3301      	adds	r3, #1
 801fd42:	81fb      	strh	r3, [r7, #14]
 801fd44:	687b      	ldr	r3, [r7, #4]
 801fd46:	3301      	adds	r3, #1
 801fd48:	607b      	str	r3, [r7, #4]
 801fd4a:	89fa      	ldrh	r2, [r7, #14]
 801fd4c:	887b      	ldrh	r3, [r7, #2]
 801fd4e:	429a      	cmp	r2, r3
 801fd50:	d3ec      	bcc.n	801fd2c <CalculaCRCStream+0x18>
  return crc;
 801fd52:	89bb      	ldrh	r3, [r7, #12]
}
 801fd54:	4618      	mov	r0, r3
 801fd56:	3710      	adds	r7, #16
 801fd58:	46bd      	mov	sp, r7
 801fd5a:	bd80      	pop	{r7, pc}

0801fd5c <ReadCoilRegister>:


uint8_t ReadCoilRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801fd5c:	b580      	push	{r7, lr}
 801fd5e:	b084      	sub	sp, #16
 801fd60:	af00      	add	r7, sp, #0
 801fd62:	6078      	str	r0, [r7, #4]
 801fd64:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	3305      	adds	r3, #5
 801fd6a:	781b      	ldrb	r3, [r3, #0]
 801fd6c:	005b      	lsls	r3, r3, #1
 801fd6e:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	3302      	adds	r3, #2
 801fd74:	7bba      	ldrb	r2, [r7, #14]
 801fd76:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801fd78:	2300      	movs	r3, #0
 801fd7a:	73fb      	strb	r3, [r7, #15]
 801fd7c:	e015      	b.n	801fdaa <ReadCoilRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 801fd7e:	7bfb      	ldrb	r3, [r7, #15]
 801fd80:	3301      	adds	r3, #1
 801fd82:	683a      	ldr	r2, [r7, #0]
 801fd84:	441a      	add	r2, r3
 801fd86:	7bfb      	ldrb	r3, [r7, #15]
 801fd88:	3303      	adds	r3, #3
 801fd8a:	6879      	ldr	r1, [r7, #4]
 801fd8c:	440b      	add	r3, r1
 801fd8e:	7812      	ldrb	r2, [r2, #0]
 801fd90:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 801fd92:	7bfb      	ldrb	r3, [r7, #15]
 801fd94:	683a      	ldr	r2, [r7, #0]
 801fd96:	441a      	add	r2, r3
 801fd98:	7bfb      	ldrb	r3, [r7, #15]
 801fd9a:	3304      	adds	r3, #4
 801fd9c:	6879      	ldr	r1, [r7, #4]
 801fd9e:	440b      	add	r3, r1
 801fda0:	7812      	ldrb	r2, [r2, #0]
 801fda2:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801fda4:	7bfb      	ldrb	r3, [r7, #15]
 801fda6:	3302      	adds	r3, #2
 801fda8:	73fb      	strb	r3, [r7, #15]
 801fdaa:	7bfa      	ldrb	r2, [r7, #15]
 801fdac:	7bbb      	ldrb	r3, [r7, #14]
 801fdae:	429a      	cmp	r2, r3
 801fdb0:	d3e5      	bcc.n	801fd7e <ReadCoilRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 801fdb2:	7bbb      	ldrb	r3, [r7, #14]
 801fdb4:	b29b      	uxth	r3, r3
 801fdb6:	3303      	adds	r3, #3
 801fdb8:	b29b      	uxth	r3, r3
 801fdba:	4619      	mov	r1, r3
 801fdbc:	6878      	ldr	r0, [r7, #4]
 801fdbe:	f7ff ffa9 	bl	801fd14 <CalculaCRCStream>
 801fdc2:	4603      	mov	r3, r0
 801fdc4:	81bb      	strh	r3, [r7, #12]
	buffer [ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 801fdc6:	7bbb      	ldrb	r3, [r7, #14]
 801fdc8:	3303      	adds	r3, #3
 801fdca:	687a      	ldr	r2, [r7, #4]
 801fdcc:	4413      	add	r3, r2
 801fdce:	89ba      	ldrh	r2, [r7, #12]
 801fdd0:	b2d2      	uxtb	r2, r2
 801fdd2:	701a      	strb	r2, [r3, #0]
	buffer [ bytecount + 4 ] = ( uint8_t ) ( crc >> 8);
 801fdd4:	89bb      	ldrh	r3, [r7, #12]
 801fdd6:	0a1b      	lsrs	r3, r3, #8
 801fdd8:	b299      	uxth	r1, r3
 801fdda:	7bbb      	ldrb	r3, [r7, #14]
 801fddc:	3304      	adds	r3, #4
 801fdde:	687a      	ldr	r2, [r7, #4]
 801fde0:	4413      	add	r3, r2
 801fde2:	b2ca      	uxtb	r2, r1
 801fde4:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 801fde6:	7bbb      	ldrb	r3, [r7, #14]
 801fde8:	3305      	adds	r3, #5
 801fdea:	b2db      	uxtb	r3, r3
}
 801fdec:	4618      	mov	r0, r3
 801fdee:	3710      	adds	r7, #16
 801fdf0:	46bd      	mov	sp, r7
 801fdf2:	bd80      	pop	{r7, pc}

0801fdf4 <ReadInputRegister>:


uint8_t ReadInputRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801fdf4:	b580      	push	{r7, lr}
 801fdf6:	b084      	sub	sp, #16
 801fdf8:	af00      	add	r7, sp, #0
 801fdfa:	6078      	str	r0, [r7, #4]
 801fdfc:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 801fdfe:	687b      	ldr	r3, [r7, #4]
 801fe00:	3305      	adds	r3, #5
 801fe02:	781b      	ldrb	r3, [r3, #0]
 801fe04:	005b      	lsls	r3, r3, #1
 801fe06:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 801fe08:	687b      	ldr	r3, [r7, #4]
 801fe0a:	3302      	adds	r3, #2
 801fe0c:	7bba      	ldrb	r2, [r7, #14]
 801fe0e:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801fe10:	2300      	movs	r3, #0
 801fe12:	73fb      	strb	r3, [r7, #15]
 801fe14:	e015      	b.n	801fe42 <ReadInputRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 801fe16:	7bfb      	ldrb	r3, [r7, #15]
 801fe18:	3301      	adds	r3, #1
 801fe1a:	683a      	ldr	r2, [r7, #0]
 801fe1c:	441a      	add	r2, r3
 801fe1e:	7bfb      	ldrb	r3, [r7, #15]
 801fe20:	3303      	adds	r3, #3
 801fe22:	6879      	ldr	r1, [r7, #4]
 801fe24:	440b      	add	r3, r1
 801fe26:	7812      	ldrb	r2, [r2, #0]
 801fe28:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 801fe2a:	7bfb      	ldrb	r3, [r7, #15]
 801fe2c:	683a      	ldr	r2, [r7, #0]
 801fe2e:	441a      	add	r2, r3
 801fe30:	7bfb      	ldrb	r3, [r7, #15]
 801fe32:	3304      	adds	r3, #4
 801fe34:	6879      	ldr	r1, [r7, #4]
 801fe36:	440b      	add	r3, r1
 801fe38:	7812      	ldrb	r2, [r2, #0]
 801fe3a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801fe3c:	7bfb      	ldrb	r3, [r7, #15]
 801fe3e:	3302      	adds	r3, #2
 801fe40:	73fb      	strb	r3, [r7, #15]
 801fe42:	7bfa      	ldrb	r2, [r7, #15]
 801fe44:	7bbb      	ldrb	r3, [r7, #14]
 801fe46:	429a      	cmp	r2, r3
 801fe48:	d3e5      	bcc.n	801fe16 <ReadInputRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ] = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream ( buffer, bytecount + 3 );
 801fe4a:	7bbb      	ldrb	r3, [r7, #14]
 801fe4c:	b29b      	uxth	r3, r3
 801fe4e:	3303      	adds	r3, #3
 801fe50:	b29b      	uxth	r3, r3
 801fe52:	4619      	mov	r1, r3
 801fe54:	6878      	ldr	r0, [r7, #4]
 801fe56:	f7ff ff5d 	bl	801fd14 <CalculaCRCStream>
 801fe5a:	4603      	mov	r3, r0
 801fe5c:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 801fe5e:	7bbb      	ldrb	r3, [r7, #14]
 801fe60:	3303      	adds	r3, #3
 801fe62:	687a      	ldr	r2, [r7, #4]
 801fe64:	4413      	add	r3, r2
 801fe66:	89ba      	ldrh	r2, [r7, #12]
 801fe68:	b2d2      	uxtb	r2, r2
 801fe6a:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 801fe6c:	89bb      	ldrh	r3, [r7, #12]
 801fe6e:	0a1b      	lsrs	r3, r3, #8
 801fe70:	b299      	uxth	r1, r3
 801fe72:	7bbb      	ldrb	r3, [r7, #14]
 801fe74:	3304      	adds	r3, #4
 801fe76:	687a      	ldr	r2, [r7, #4]
 801fe78:	4413      	add	r3, r2
 801fe7a:	b2ca      	uxtb	r2, r1
 801fe7c:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 801fe7e:	7bbb      	ldrb	r3, [r7, #14]
 801fe80:	3305      	adds	r3, #5
 801fe82:	b2db      	uxtb	r3, r3
}
 801fe84:	4618      	mov	r0, r3
 801fe86:	3710      	adds	r7, #16
 801fe88:	46bd      	mov	sp, r7
 801fe8a:	bd80      	pop	{r7, pc}

0801fe8c <ReadHoldingRegister>:


uint8_t ReadHoldingRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801fe8c:	b580      	push	{r7, lr}
 801fe8e:	b084      	sub	sp, #16
 801fe90:	af00      	add	r7, sp, #0
 801fe92:	6078      	str	r0, [r7, #4]
 801fe94:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = 2 * buffer [ 5 ];
 801fe96:	687b      	ldr	r3, [r7, #4]
 801fe98:	3305      	adds	r3, #5
 801fe9a:	781b      	ldrb	r3, [r3, #0]
 801fe9c:	005b      	lsls	r3, r3, #1
 801fe9e:	73bb      	strb	r3, [r7, #14]
	buffer [ 2 ] = bytecount;
 801fea0:	687b      	ldr	r3, [r7, #4]
 801fea2:	3302      	adds	r3, #2
 801fea4:	7bba      	ldrb	r2, [r7, #14]
 801fea6:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 801fea8:	2300      	movs	r3, #0
 801feaa:	73fb      	strb	r3, [r7, #15]
 801feac:	e015      	b.n	801feda <ReadHoldingRegister+0x4e>
		#ifdef LITTLE_ENDIAN
		buffer [ i + 3 ] = *( ptr + i + 1 );
 801feae:	7bfb      	ldrb	r3, [r7, #15]
 801feb0:	3301      	adds	r3, #1
 801feb2:	683a      	ldr	r2, [r7, #0]
 801feb4:	441a      	add	r2, r3
 801feb6:	7bfb      	ldrb	r3, [r7, #15]
 801feb8:	3303      	adds	r3, #3
 801feba:	6879      	ldr	r1, [r7, #4]
 801febc:	440b      	add	r3, r1
 801febe:	7812      	ldrb	r2, [r2, #0]
 801fec0:	701a      	strb	r2, [r3, #0]
		buffer [ i + 3 + 1 ] = *( ptr + i );
 801fec2:	7bfb      	ldrb	r3, [r7, #15]
 801fec4:	683a      	ldr	r2, [r7, #0]
 801fec6:	441a      	add	r2, r3
 801fec8:	7bfb      	ldrb	r3, [r7, #15]
 801feca:	3304      	adds	r3, #4
 801fecc:	6879      	ldr	r1, [r7, #4]
 801fece:	440b      	add	r3, r1
 801fed0:	7812      	ldrb	r2, [r2, #0]
 801fed2:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < bytecount; i += 2) {
 801fed4:	7bfb      	ldrb	r3, [r7, #15]
 801fed6:	3302      	adds	r3, #2
 801fed8:	73fb      	strb	r3, [r7, #15]
 801feda:	7bfa      	ldrb	r2, [r7, #15]
 801fedc:	7bbb      	ldrb	r3, [r7, #14]
 801fede:	429a      	cmp	r2, r3
 801fee0:	d3e5      	bcc.n	801feae <ReadHoldingRegister+0x22>
		#ifdef BIG_ENDIAN
		buffer [ i + 3 ]   = *( ptr + i );
		buffer [ i + 3 + 1 ] = *( ptr + i + 1 );
		#endif
	}
	crc = CalculaCRCStream(buffer, bytecount + 3 );
 801fee2:	7bbb      	ldrb	r3, [r7, #14]
 801fee4:	b29b      	uxth	r3, r3
 801fee6:	3303      	adds	r3, #3
 801fee8:	b29b      	uxth	r3, r3
 801feea:	4619      	mov	r1, r3
 801feec:	6878      	ldr	r0, [r7, #4]
 801feee:	f7ff ff11 	bl	801fd14 <CalculaCRCStream>
 801fef2:	4603      	mov	r3, r0
 801fef4:	81bb      	strh	r3, [r7, #12]
	buffer[ bytecount + 3 ] = ( uint8_t ) ( crc & 0x00FF );
 801fef6:	7bbb      	ldrb	r3, [r7, #14]
 801fef8:	3303      	adds	r3, #3
 801fefa:	687a      	ldr	r2, [r7, #4]
 801fefc:	4413      	add	r3, r2
 801fefe:	89ba      	ldrh	r2, [r7, #12]
 801ff00:	b2d2      	uxtb	r2, r2
 801ff02:	701a      	strb	r2, [r3, #0]
	buffer[ bytecount + 4 ] = ( uint8_t ) ( crc >> 8 );
 801ff04:	89bb      	ldrh	r3, [r7, #12]
 801ff06:	0a1b      	lsrs	r3, r3, #8
 801ff08:	b299      	uxth	r1, r3
 801ff0a:	7bbb      	ldrb	r3, [r7, #14]
 801ff0c:	3304      	adds	r3, #4
 801ff0e:	687a      	ldr	r2, [r7, #4]
 801ff10:	4413      	add	r3, r2
 801ff12:	b2ca      	uxtb	r2, r1
 801ff14:	701a      	strb	r2, [r3, #0]
	return ( bytecount + 5 );
 801ff16:	7bbb      	ldrb	r3, [r7, #14]
 801ff18:	3305      	adds	r3, #5
 801ff1a:	b2db      	uxtb	r3, r3
}
 801ff1c:	4618      	mov	r0, r3
 801ff1e:	3710      	adds	r7, #16
 801ff20:	46bd      	mov	sp, r7
 801ff22:	bd80      	pop	{r7, pc}

0801ff24 <PresetSingleRegister>:


uint8_t PresetSingleRegister ( uint8_t *buffer, uint8_t *ptr ) {
 801ff24:	b480      	push	{r7}
 801ff26:	b083      	sub	sp, #12
 801ff28:	af00      	add	r7, sp, #0
 801ff2a:	6078      	str	r0, [r7, #4]
 801ff2c:	6039      	str	r1, [r7, #0]
	#ifdef LITTLE_ENDIAN
	*( ptr ) = buffer [ 5 ];
 801ff2e:	687b      	ldr	r3, [r7, #4]
 801ff30:	795a      	ldrb	r2, [r3, #5]
 801ff32:	683b      	ldr	r3, [r7, #0]
 801ff34:	701a      	strb	r2, [r3, #0]
	*( ptr + 1 ) = buffer [ 4 ];
 801ff36:	683b      	ldr	r3, [r7, #0]
 801ff38:	3301      	adds	r3, #1
 801ff3a:	687a      	ldr	r2, [r7, #4]
 801ff3c:	7912      	ldrb	r2, [r2, #4]
 801ff3e:	701a      	strb	r2, [r3, #0]
	#endif
	#ifdef BIG_ENDIAN
	*( ptr ) = buffer [ 4 ];
	*( ptr + 1 ) = buffer [ 5 ];
	#endif
	return ( 8 );
 801ff40:	2308      	movs	r3, #8
}
 801ff42:	4618      	mov	r0, r3
 801ff44:	370c      	adds	r7, #12
 801ff46:	46bd      	mov	sp, r7
 801ff48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff4c:	4770      	bx	lr

0801ff4e <PresetMultipleRegisters>:


uint8_t PresetMultipleRegisters ( uint8_t *buffer, uint8_t *ptr ) {
 801ff4e:	b580      	push	{r7, lr}
 801ff50:	b084      	sub	sp, #16
 801ff52:	af00      	add	r7, sp, #0
 801ff54:	6078      	str	r0, [r7, #4]
 801ff56:	6039      	str	r1, [r7, #0]
	uint8_t bytecount, i;
	uint16_t crc;
	bytecount = buffer [ 6 ];
 801ff58:	687b      	ldr	r3, [r7, #4]
 801ff5a:	799b      	ldrb	r3, [r3, #6]
 801ff5c:	73bb      	strb	r3, [r7, #14]
	for ( i = 0; i < bytecount; i += 2 ) {
 801ff5e:	2300      	movs	r3, #0
 801ff60:	73fb      	strb	r3, [r7, #15]
 801ff62:	e016      	b.n	801ff92 <PresetMultipleRegisters+0x44>
		#ifdef LITTLE_ENDIAN
		*( ptr + i ) = buffer [ 7 + i + 1 ];
 801ff64:	7bfb      	ldrb	r3, [r7, #15]
 801ff66:	3308      	adds	r3, #8
 801ff68:	687a      	ldr	r2, [r7, #4]
 801ff6a:	441a      	add	r2, r3
 801ff6c:	7bfb      	ldrb	r3, [r7, #15]
 801ff6e:	6839      	ldr	r1, [r7, #0]
 801ff70:	440b      	add	r3, r1
 801ff72:	7812      	ldrb	r2, [r2, #0]
 801ff74:	701a      	strb	r2, [r3, #0]
		*( ptr + i + 1 ) = buffer [ 7 + i ];
 801ff76:	7bfb      	ldrb	r3, [r7, #15]
 801ff78:	3307      	adds	r3, #7
 801ff7a:	461a      	mov	r2, r3
 801ff7c:	687b      	ldr	r3, [r7, #4]
 801ff7e:	441a      	add	r2, r3
 801ff80:	7bfb      	ldrb	r3, [r7, #15]
 801ff82:	3301      	adds	r3, #1
 801ff84:	6839      	ldr	r1, [r7, #0]
 801ff86:	440b      	add	r3, r1
 801ff88:	7812      	ldrb	r2, [r2, #0]
 801ff8a:	701a      	strb	r2, [r3, #0]
	for ( i = 0; i < bytecount; i += 2 ) {
 801ff8c:	7bfb      	ldrb	r3, [r7, #15]
 801ff8e:	3302      	adds	r3, #2
 801ff90:	73fb      	strb	r3, [r7, #15]
 801ff92:	7bfa      	ldrb	r2, [r7, #15]
 801ff94:	7bbb      	ldrb	r3, [r7, #14]
 801ff96:	429a      	cmp	r2, r3
 801ff98:	d3e4      	bcc.n	801ff64 <PresetMultipleRegisters+0x16>
		#ifdef BIG_ENDIAN
		*( ptr + i ) = buffer [ 7 + i ];
		*( ptr + i + 1 ) = buffer [ 7 + i + 1 ];
		#endif
	}
	crc = CalculaCRCStream ( buffer, 6 );
 801ff9a:	2106      	movs	r1, #6
 801ff9c:	6878      	ldr	r0, [r7, #4]
 801ff9e:	f7ff feb9 	bl	801fd14 <CalculaCRCStream>
 801ffa2:	4603      	mov	r3, r0
 801ffa4:	81bb      	strh	r3, [r7, #12]
	buffer [ 6 ] = ( uint8_t ) ( crc & 0x00FF );
 801ffa6:	687b      	ldr	r3, [r7, #4]
 801ffa8:	3306      	adds	r3, #6
 801ffaa:	89ba      	ldrh	r2, [r7, #12]
 801ffac:	b2d2      	uxtb	r2, r2
 801ffae:	701a      	strb	r2, [r3, #0]
	buffer [ 7 ] = ( uint8_t ) ( crc >> 8 );
 801ffb0:	89bb      	ldrh	r3, [r7, #12]
 801ffb2:	0a1b      	lsrs	r3, r3, #8
 801ffb4:	b29a      	uxth	r2, r3
 801ffb6:	687b      	ldr	r3, [r7, #4]
 801ffb8:	3307      	adds	r3, #7
 801ffba:	b2d2      	uxtb	r2, r2
 801ffbc:	701a      	strb	r2, [r3, #0]
	return ( 8 );
 801ffbe:	2308      	movs	r3, #8
}
 801ffc0:	4618      	mov	r0, r3
 801ffc2:	3710      	adds	r7, #16
 801ffc4:	46bd      	mov	sp, r7
 801ffc6:	bd80      	pop	{r7, pc}

0801ffc8 <InterpreterMODBUS>:


MB modbus;

uint16_t InterpreterMODBUS(uint8_t *msg, uint16_t len)
{
 801ffc8:	b580      	push	{r7, lr}
 801ffca:	b086      	sub	sp, #24
 801ffcc:	af00      	add	r7, sp, #0
 801ffce:	6078      	str	r0, [r7, #4]
 801ffd0:	460b      	mov	r3, r1
 801ffd2:	807b      	strh	r3, [r7, #2]
	uint8_t *ptr;
	uint16_t crccal, crcrec, address, totalbytes;

	crccal = 0;
 801ffd4:	2300      	movs	r3, #0
 801ffd6:	82bb      	strh	r3, [r7, #20]
	crcrec = 0;
 801ffd8:	2300      	movs	r3, #0
 801ffda:	827b      	strh	r3, [r7, #18]
	address = (msg[2] << 8) | msg[3];
 801ffdc:	687b      	ldr	r3, [r7, #4]
 801ffde:	3302      	adds	r3, #2
 801ffe0:	781b      	ldrb	r3, [r3, #0]
 801ffe2:	021b      	lsls	r3, r3, #8
 801ffe4:	b21a      	sxth	r2, r3
 801ffe6:	687b      	ldr	r3, [r7, #4]
 801ffe8:	3303      	adds	r3, #3
 801ffea:	781b      	ldrb	r3, [r3, #0]
 801ffec:	b21b      	sxth	r3, r3
 801ffee:	4313      	orrs	r3, r2
 801fff0:	b21b      	sxth	r3, r3
 801fff2:	823b      	strh	r3, [r7, #16]
	//bytecount = msg[6];
	crccal = CalculaCRCStream(msg, len - 2);
 801fff4:	887b      	ldrh	r3, [r7, #2]
 801fff6:	3b02      	subs	r3, #2
 801fff8:	b29b      	uxth	r3, r3
 801fffa:	4619      	mov	r1, r3
 801fffc:	6878      	ldr	r0, [r7, #4]
 801fffe:	f7ff fe89 	bl	801fd14 <CalculaCRCStream>
 8020002:	4603      	mov	r3, r0
 8020004:	82bb      	strh	r3, [r7, #20]
	crcrec = (msg[len - 1] << 8) | msg[len - 2];
 8020006:	887b      	ldrh	r3, [r7, #2]
 8020008:	3b01      	subs	r3, #1
 802000a:	687a      	ldr	r2, [r7, #4]
 802000c:	4413      	add	r3, r2
 802000e:	781b      	ldrb	r3, [r3, #0]
 8020010:	021b      	lsls	r3, r3, #8
 8020012:	b21a      	sxth	r2, r3
 8020014:	887b      	ldrh	r3, [r7, #2]
 8020016:	3b02      	subs	r3, #2
 8020018:	6879      	ldr	r1, [r7, #4]
 802001a:	440b      	add	r3, r1
 802001c:	781b      	ldrb	r3, [r3, #0]
 802001e:	b21b      	sxth	r3, r3
 8020020:	4313      	orrs	r3, r2
 8020022:	b21b      	sxth	r3, r3
 8020024:	827b      	strh	r3, [r7, #18]

	if (crccal == crcrec)
 8020026:	8aba      	ldrh	r2, [r7, #20]
 8020028:	8a7b      	ldrh	r3, [r7, #18]
 802002a:	429a      	cmp	r2, r3
 802002c:	f040 80ac 	bne.w	8020188 <InterpreterMODBUS+0x1c0>
	{
		switch (msg[0])
 8020030:	687b      	ldr	r3, [r7, #4]
 8020032:	781b      	ldrb	r3, [r3, #0]
 8020034:	2b01      	cmp	r3, #1
 8020036:	f040 80ab 	bne.w	8020190 <InterpreterMODBUS+0x1c8>
		{
		case 0x01: // Escravo 1
			switch (msg[1])
 802003a:	687b      	ldr	r3, [r7, #4]
 802003c:	3301      	adds	r3, #1
 802003e:	781b      	ldrb	r3, [r3, #0]
 8020040:	3b01      	subs	r3, #1
 8020042:	2b0f      	cmp	r3, #15
 8020044:	f200 80a3 	bhi.w	802018e <InterpreterMODBUS+0x1c6>
 8020048:	a201      	add	r2, pc, #4	; (adr r2, 8020050 <InterpreterMODBUS+0x88>)
 802004a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802004e:	bf00      	nop
 8020050:	08020091 	.word	0x08020091
 8020054:	08020185 	.word	0x08020185
 8020058:	080200a9 	.word	0x080200a9
 802005c:	080200c1 	.word	0x080200c1
 8020060:	08020185 	.word	0x08020185
 8020064:	080200d9 	.word	0x080200d9
 8020068:	0802018f 	.word	0x0802018f
 802006c:	0802018f 	.word	0x0802018f
 8020070:	0802018f 	.word	0x0802018f
 8020074:	0802018f 	.word	0x0802018f
 8020078:	0802018f 	.word	0x0802018f
 802007c:	0802018f 	.word	0x0802018f
 8020080:	0802018f 	.word	0x0802018f
 8020084:	0802018f 	.word	0x0802018f
 8020088:	08020185 	.word	0x08020185
 802008c:	0802012f 	.word	0x0802012f
			{
			case 0x01: // Read coil registers

				ptr = GetAddrCoilRegister(address); // Pega o endereco real na memeria do CR
 8020090:	8a3b      	ldrh	r3, [r7, #16]
 8020092:	4618      	mov	r0, r3
 8020094:	f000 f884 	bl	80201a0 <GetAddrCoilRegister>
 8020098:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadCoilRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 802009a:	68f9      	ldr	r1, [r7, #12]
 802009c:	6878      	ldr	r0, [r7, #4]
 802009e:	f7ff fe5d 	bl	801fd5c <ReadCoilRegister>
 80200a2:	4603      	mov	r3, r0
 80200a4:	82fb      	strh	r3, [r7, #22]

				break;
 80200a6:	e06e      	b.n	8020186 <InterpreterMODBUS+0x1be>
			case 0x02: // Read input status
				break;
			case 0x03: // Read holding registers
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 80200a8:	8a3b      	ldrh	r3, [r7, #16]
 80200aa:	4618      	mov	r0, r3
 80200ac:	f000 f8c2 	bl	8020234 <GetAddrHoldingRegister>
 80200b0:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadHoldingRegister(msg, ptr);	// Le o valor do IR e monta parte da mensagem
 80200b2:	68f9      	ldr	r1, [r7, #12]
 80200b4:	6878      	ldr	r0, [r7, #4]
 80200b6:	f7ff fee9 	bl	801fe8c <ReadHoldingRegister>
 80200ba:	4603      	mov	r3, r0
 80200bc:	82fb      	strh	r3, [r7, #22]
				break;
 80200be:	e062      	b.n	8020186 <InterpreterMODBUS+0x1be>
			case 0x04: // Read input registers
				ptr = GetAddrInputRegister(address); // Pega o endereco real na memoria do IR
 80200c0:	8a3b      	ldrh	r3, [r7, #16]
 80200c2:	4618      	mov	r0, r3
 80200c4:	f000 f892 	bl	80201ec <GetAddrInputRegister>
 80200c8:	60f8      	str	r0, [r7, #12]
				totalbytes = ReadInputRegister(msg, ptr); // Le o valor do IR e monta parte da mensagem
 80200ca:	68f9      	ldr	r1, [r7, #12]
 80200cc:	6878      	ldr	r0, [r7, #4]
 80200ce:	f7ff fe91 	bl	801fdf4 <ReadInputRegister>
 80200d2:	4603      	mov	r3, r0
 80200d4:	82fb      	strh	r3, [r7, #22]
				break;
 80200d6:	e056      	b.n	8020186 <InterpreterMODBUS+0x1be>
			case 0x05: // Force single coil
				break;
			case 0x06: // Preset single register
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 80200d8:	8a3b      	ldrh	r3, [r7, #16]
 80200da:	4618      	mov	r0, r3
 80200dc:	f000 f8aa 	bl	8020234 <GetAddrHoldingRegister>
 80200e0:	60f8      	str	r0, [r7, #12]
				totalbytes = PresetSingleRegister(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 80200e2:	68f9      	ldr	r1, [r7, #12]
 80200e4:	6878      	ldr	r0, [r7, #4]
 80200e6:	f7ff ff1d 	bl	801ff24 <PresetSingleRegister>
 80200ea:	4603      	mov	r3, r0
 80200ec:	82fb      	strh	r3, [r7, #22]


				//eeprom_write_char ( address, *( ptr ) );
				//eeprom_write_char ( address + 1, *( ptr + 1 ) );

				if (totalbytes)
 80200ee:	8afb      	ldrh	r3, [r7, #22]
 80200f0:	2b00      	cmp	r3, #0
 80200f2:	d016      	beq.n	8020122 <InterpreterMODBUS+0x15a>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (modbus.INPUTREGISTERS[ADD_TIPO_HARDW] != modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 80200f4:	4b29      	ldr	r3, [pc, #164]	; (802019c <InterpreterMODBUS+0x1d4>)
 80200f6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80200fa:	2b00      	cmp	r3, #0
 80200fc:	d011      	beq.n	8020122 <InterpreterMODBUS+0x15a>
 80200fe:	4b27      	ldr	r3, [pc, #156]	; (802019c <InterpreterMODBUS+0x1d4>)
 8020100:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 8020104:	4b25      	ldr	r3, [pc, #148]	; (802019c <InterpreterMODBUS+0x1d4>)
 8020106:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 802010a:	429a      	cmp	r2, r3
 802010c:	d009      	beq.n	8020122 <InterpreterMODBUS+0x15a>
					{
						//if((modbusMapa.COPIA_TIPO_HARDW != 0) && (modbusMapa.TIPO_HARDW != modbusMapa.COPIA_TIPO_HARDW)){

						modbus.INPUTREGISTERS[ADD_TIPO_HARDW] =modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 802010e:	4b23      	ldr	r3, [pc, #140]	; (802019c <InterpreterMODBUS+0x1d4>)
 8020110:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 8020114:	4b21      	ldr	r3, [pc, #132]	; (802019c <InterpreterMODBUS+0x1d4>)
 8020116:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						//modbusMapa.TIPO_HARDW = modbusMapa.COPIA_TIPO_HARDW;

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 802011a:	206f      	movs	r0, #111	; 0x6f
 802011c:	f000 f866 	bl	80201ec <GetAddrInputRegister>
 8020120:	60f8      	str	r0, [r7, #12]
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8020122:	8a3b      	ldrh	r3, [r7, #16]
 8020124:	4618      	mov	r0, r3
 8020126:	f000 f885 	bl	8020234 <GetAddrHoldingRegister>
 802012a:	60f8      	str	r0, [r7, #12]

				//eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 802012c:	e02b      	b.n	8020186 <InterpreterMODBUS+0x1be>
			case 0x0F: // Preset multiple coils
				break;
			case 0x10: // Preset multiple resgisters
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memeria do HR
 802012e:	8a3b      	ldrh	r3, [r7, #16]
 8020130:	4618      	mov	r0, r3
 8020132:	f000 f87f 	bl	8020234 <GetAddrHoldingRegister>
 8020136:	60f8      	str	r0, [r7, #12]

				totalbytes = PresetMultipleRegisters(msg, ptr); // Grava o valor do HR e monta parte da mensagem
 8020138:	68f9      	ldr	r1, [r7, #12]
 802013a:	6878      	ldr	r0, [r7, #4]
 802013c:	f7ff ff07 	bl	801ff4e <PresetMultipleRegisters>
 8020140:	4603      	mov	r3, r0
 8020142:	82fb      	strh	r3, [r7, #22]

				//eeprom_write_stream((address * 2), bytecount, ptr);

				if (totalbytes)
 8020144:	8afb      	ldrh	r3, [r7, #22]
 8020146:	2b00      	cmp	r3, #0
 8020148:	d016      	beq.n	8020178 <InterpreterMODBUS+0x1b0>
				{ //Implementado para possibilitar a gravacao do Tipo de Hardware (Input Register) via CfgHorus

					if ((modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW] != 0) && (modbus.INPUTREGISTERS[ADD_TIPO_HARDW] != modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW]))
 802014a:	4b14      	ldr	r3, [pc, #80]	; (802019c <InterpreterMODBUS+0x1d4>)
 802014c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8020150:	2b00      	cmp	r3, #0
 8020152:	d011      	beq.n	8020178 <InterpreterMODBUS+0x1b0>
 8020154:	4b11      	ldr	r3, [pc, #68]	; (802019c <InterpreterMODBUS+0x1d4>)
 8020156:	f8b3 23d4 	ldrh.w	r2, [r3, #980]	; 0x3d4
 802015a:	4b10      	ldr	r3, [pc, #64]	; (802019c <InterpreterMODBUS+0x1d4>)
 802015c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 8020160:	429a      	cmp	r2, r3
 8020162:	d009      	beq.n	8020178 <InterpreterMODBUS+0x1b0>
					{
						modbus.INPUTREGISTERS[ADD_TIPO_HARDW] = modbus.HOLDINGREGISTERS[ADD_COPIA_TIPO_HARDW];
 8020164:	4b0d      	ldr	r3, [pc, #52]	; (802019c <InterpreterMODBUS+0x1d4>)
 8020166:	f8b3 20ac 	ldrh.w	r2, [r3, #172]	; 0xac
 802016a:	4b0c      	ldr	r3, [pc, #48]	; (802019c <InterpreterMODBUS+0x1d4>)
 802016c:	f8a3 23d4 	strh.w	r2, [r3, #980]	; 0x3d4

						ptr = (uint8_t*) GetAddrInputRegister(ADD_TIPO_HARDW);
 8020170:	206f      	movs	r0, #111	; 0x6f
 8020172:	f000 f83b 	bl	80201ec <GetAddrInputRegister>
 8020176:	60f8      	str	r0, [r7, #12]
				}
#ifdef WATCHDOG
        fWatchDogReset();
#endif
				//Carrega conte�do gravado para RAM para comparacao no CfgHorus
				ptr = GetAddrHoldingRegister(address); // Pega o endereco real na memoria do HR
 8020178:	8a3b      	ldrh	r3, [r7, #16]
 802017a:	4618      	mov	r0, r3
 802017c:	f000 f85a 	bl	8020234 <GetAddrHoldingRegister>
 8020180:	60f8      	str	r0, [r7, #12]
				// eeprom_read_stream(ptr, bytecount, (address * 2));
				break;
 8020182:	e000      	b.n	8020186 <InterpreterMODBUS+0x1be>
				break;
 8020184:	bf00      	nop
			}
			break;
 8020186:	e002      	b.n	802018e <InterpreterMODBUS+0x1c6>
		}
	}
	else
	{

		totalbytes = 0;
 8020188:	2300      	movs	r3, #0
 802018a:	82fb      	strh	r3, [r7, #22]
 802018c:	e000      	b.n	8020190 <InterpreterMODBUS+0x1c8>
			break;
 802018e:	bf00      	nop
	}

	return totalbytes;
 8020190:	8afb      	ldrh	r3, [r7, #22]
}
 8020192:	4618      	mov	r0, r3
 8020194:	3718      	adds	r7, #24
 8020196:	46bd      	mov	sp, r7
 8020198:	bd80      	pop	{r7, pc}
 802019a:	bf00      	nop
 802019c:	20012474 	.word	0x20012474

080201a0 <GetAddrCoilRegister>:

uint8_t* GetAddrCoilRegister(uint16_t address)
{
 80201a0:	b480      	push	{r7}
 80201a2:	b085      	sub	sp, #20
 80201a4:	af00      	add	r7, sp, #0
 80201a6:	4603      	mov	r3, r0
 80201a8:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	switch (address)
 80201aa:	88fb      	ldrh	r3, [r7, #6]
 80201ac:	2b02      	cmp	r3, #2
 80201ae:	d00c      	beq.n	80201ca <GetAddrCoilRegister+0x2a>
 80201b0:	2b02      	cmp	r3, #2
 80201b2:	dc0d      	bgt.n	80201d0 <GetAddrCoilRegister+0x30>
 80201b4:	2b00      	cmp	r3, #0
 80201b6:	d002      	beq.n	80201be <GetAddrCoilRegister+0x1e>
 80201b8:	2b01      	cmp	r3, #1
 80201ba:	d003      	beq.n	80201c4 <GetAddrCoilRegister+0x24>
 80201bc:	e008      	b.n	80201d0 <GetAddrCoilRegister+0x30>
	{

	case ADD_IN_1:
		ptr = (uint8_t*) &modbus.COILS[ADD_IN_1];
 80201be:	4b08      	ldr	r3, [pc, #32]	; (80201e0 <GetAddrCoilRegister+0x40>)
 80201c0:	60fb      	str	r3, [r7, #12]
		break;
 80201c2:	e005      	b.n	80201d0 <GetAddrCoilRegister+0x30>
	case ADD_IN_2:
		ptr = (uint8_t*) &modbus.COILS[ADD_IN_2];
 80201c4:	4b07      	ldr	r3, [pc, #28]	; (80201e4 <GetAddrCoilRegister+0x44>)
 80201c6:	60fb      	str	r3, [r7, #12]
		break;
 80201c8:	e002      	b.n	80201d0 <GetAddrCoilRegister+0x30>
	case ADD_OUT_1:
		ptr = (uint8_t*) &modbus.COILS[ADD_OUT_1];
 80201ca:	4b07      	ldr	r3, [pc, #28]	; (80201e8 <GetAddrCoilRegister+0x48>)
 80201cc:	60fb      	str	r3, [r7, #12]
		break;
 80201ce:	bf00      	nop
	}
	return ptr;
 80201d0:	68fb      	ldr	r3, [r7, #12]
}
 80201d2:	4618      	mov	r0, r3
 80201d4:	3714      	adds	r7, #20
 80201d6:	46bd      	mov	sp, r7
 80201d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201dc:	4770      	bx	lr
 80201de:	bf00      	nop
 80201e0:	20012474 	.word	0x20012474
 80201e4:	20012476 	.word	0x20012476
 80201e8:	20012478 	.word	0x20012478

080201ec <GetAddrInputRegister>:

uint8_t* GetAddrInputRegister(uint16_t address)
{
 80201ec:	b480      	push	{r7}
 80201ee:	b085      	sub	sp, #20
 80201f0:	af00      	add	r7, sp, #0
 80201f2:	4603      	mov	r3, r0
 80201f4:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 256)
 80201f6:	88fb      	ldrh	r3, [r7, #6]
 80201f8:	2bff      	cmp	r3, #255	; 0xff
 80201fa:	d808      	bhi.n	802020e <GetAddrInputRegister+0x22>

		ptr = (uint8_t*) &modbus.INPUTREGISTERS[ADD_IMEI_1 + (address)];
 80201fc:	88fb      	ldrh	r3, [r7, #6]
 80201fe:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8020202:	005b      	lsls	r3, r3, #1
 8020204:	4a0a      	ldr	r2, [pc, #40]	; (8020230 <GetAddrInputRegister+0x44>)
 8020206:	4413      	add	r3, r2
 8020208:	3306      	adds	r3, #6
 802020a:	60fb      	str	r3, [r7, #12]
 802020c:	e009      	b.n	8020222 <GetAddrInputRegister+0x36>
	else
		ptr = (uint8_t*) &modbus.ESPELHO[ADD_IMEI_1 + ((address - 256))];
 802020e:	88fb      	ldrh	r3, [r7, #6]
 8020210:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8020214:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8020218:	005b      	lsls	r3, r3, #1
 802021a:	4a05      	ldr	r2, [pc, #20]	; (8020230 <GetAddrInputRegister+0x44>)
 802021c:	4413      	add	r3, r2
 802021e:	3304      	adds	r3, #4
 8020220:	60fb      	str	r3, [r7, #12]
	return ptr;
 8020222:	68fb      	ldr	r3, [r7, #12]
}
 8020224:	4618      	mov	r0, r3
 8020226:	3714      	adds	r7, #20
 8020228:	46bd      	mov	sp, r7
 802022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802022e:	4770      	bx	lr
 8020230:	20012474 	.word	0x20012474

08020234 <GetAddrHoldingRegister>:

uint8_t* GetAddrHoldingRegister(uint16_t address)
{
 8020234:	b480      	push	{r7}
 8020236:	b085      	sub	sp, #20
 8020238:	af00      	add	r7, sp, #0
 802023a:	4603      	mov	r3, r0
 802023c:	80fb      	strh	r3, [r7, #6]

	uint8_t *ptr;

	if (address < 500)
 802023e:	88fb      	ldrh	r3, [r7, #6]
 8020240:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8020244:	d206      	bcs.n	8020254 <GetAddrHoldingRegister+0x20>

		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[ADD_TEMVALCONGPR + (address)];
 8020246:	88fb      	ldrh	r3, [r7, #6]
 8020248:	005b      	lsls	r3, r3, #1
 802024a:	4a09      	ldr	r2, [pc, #36]	; (8020270 <GetAddrHoldingRegister+0x3c>)
 802024c:	4413      	add	r3, r2
 802024e:	3306      	adds	r3, #6
 8020250:	60fb      	str	r3, [r7, #12]
 8020252:	e006      	b.n	8020262 <GetAddrHoldingRegister+0x2e>
	//ptr = (uint8_t*) &modbusMapa.TEMVALCONGPR + (address * 2);
	else
		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[(ADD_NUMSER_1 - 130)
				+ (address - 500)];
 8020254:	88fb      	ldrh	r3, [r7, #6]
 8020256:	3b82      	subs	r3, #130	; 0x82
		ptr = (uint8_t*) &modbus.HOLDINGREGISTERS[(ADD_NUMSER_1 - 130)
 8020258:	005b      	lsls	r3, r3, #1
 802025a:	4a05      	ldr	r2, [pc, #20]	; (8020270 <GetAddrHoldingRegister+0x3c>)
 802025c:	4413      	add	r3, r2
 802025e:	3306      	adds	r3, #6
 8020260:	60fb      	str	r3, [r7, #12]
	//ptr = (uint8_t*) &modbusMapa.NUMSER_1 + ((address - 500) * 2);
	return ptr;
 8020262:	68fb      	ldr	r3, [r7, #12]
}
 8020264:	4618      	mov	r0, r3
 8020266:	3714      	adds	r7, #20
 8020268:	46bd      	mov	sp, r7
 802026a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802026e:	4770      	bx	lr
 8020270:	20012474 	.word	0x20012474

08020274 <LoadMapFromFile>:




void LoadMapFromFile ()
{
 8020274:	b580      	push	{r7, lr}
 8020276:	af00      	add	r7, sp, #0
	load_mb_from_file(&modbus);
 8020278:	4802      	ldr	r0, [pc, #8]	; (8020284 <LoadMapFromFile+0x10>)
 802027a:	f7e0 fc51 	bl	8000b20 <load_mb_from_file>

}
 802027e:	bf00      	nop
 8020280:	bd80      	pop	{r7, pc}
 8020282:	bf00      	nop
 8020284:	20012474 	.word	0x20012474

08020288 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8020288:	b480      	push	{r7}
 802028a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 802028c:	bf00      	nop
 802028e:	46bd      	mov	sp, r7
 8020290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020294:	4770      	bx	lr
	...

08020298 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8020298:	b580      	push	{r7, lr}
 802029a:	b086      	sub	sp, #24
 802029c:	af04      	add	r7, sp, #16
 802029e:	4603      	mov	r3, r0
 80202a0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80202a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80202a6:	9302      	str	r3, [sp, #8]
 80202a8:	2301      	movs	r3, #1
 80202aa:	9301      	str	r3, [sp, #4]
 80202ac:	1dfb      	adds	r3, r7, #7
 80202ae:	9300      	str	r3, [sp, #0]
 80202b0:	2301      	movs	r3, #1
 80202b2:	2200      	movs	r2, #0
 80202b4:	2178      	movs	r1, #120	; 0x78
 80202b6:	4803      	ldr	r0, [pc, #12]	; (80202c4 <ssd1306_WriteCommand+0x2c>)
 80202b8:	f7e3 fcd2 	bl	8003c60 <HAL_I2C_Mem_Write>
}
 80202bc:	bf00      	nop
 80202be:	3708      	adds	r7, #8
 80202c0:	46bd      	mov	sp, r7
 80202c2:	bd80      	pop	{r7, pc}
 80202c4:	2000096c 	.word	0x2000096c

080202c8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80202c8:	b580      	push	{r7, lr}
 80202ca:	b086      	sub	sp, #24
 80202cc:	af04      	add	r7, sp, #16
 80202ce:	6078      	str	r0, [r7, #4]
 80202d0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80202d2:	683b      	ldr	r3, [r7, #0]
 80202d4:	b29b      	uxth	r3, r3
 80202d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80202da:	9202      	str	r2, [sp, #8]
 80202dc:	9301      	str	r3, [sp, #4]
 80202de:	687b      	ldr	r3, [r7, #4]
 80202e0:	9300      	str	r3, [sp, #0]
 80202e2:	2301      	movs	r3, #1
 80202e4:	2240      	movs	r2, #64	; 0x40
 80202e6:	2178      	movs	r1, #120	; 0x78
 80202e8:	4803      	ldr	r0, [pc, #12]	; (80202f8 <ssd1306_WriteData+0x30>)
 80202ea:	f7e3 fcb9 	bl	8003c60 <HAL_I2C_Mem_Write>
}
 80202ee:	bf00      	nop
 80202f0:	3708      	adds	r7, #8
 80202f2:	46bd      	mov	sp, r7
 80202f4:	bd80      	pop	{r7, pc}
 80202f6:	bf00      	nop
 80202f8:	2000096c 	.word	0x2000096c

080202fc <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80202fc:	b580      	push	{r7, lr}
 80202fe:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8020300:	f7ff ffc2 	bl	8020288 <ssd1306_Reset>

    // Wait for the screen to boot
    //HAL_Delay(100);

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8020304:	2000      	movs	r0, #0
 8020306:	f000 f9cf 	bl	80206a8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 802030a:	2020      	movs	r0, #32
 802030c:	f7ff ffc4 	bl	8020298 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8020310:	2000      	movs	r0, #0
 8020312:	f7ff ffc1 	bl	8020298 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8020316:	20b0      	movs	r0, #176	; 0xb0
 8020318:	f7ff ffbe 	bl	8020298 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 802031c:	20c8      	movs	r0, #200	; 0xc8
 802031e:	f7ff ffbb 	bl	8020298 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8020322:	2000      	movs	r0, #0
 8020324:	f7ff ffb8 	bl	8020298 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8020328:	2010      	movs	r0, #16
 802032a:	f7ff ffb5 	bl	8020298 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 802032e:	2040      	movs	r0, #64	; 0x40
 8020330:	f7ff ffb2 	bl	8020298 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8020334:	20ff      	movs	r0, #255	; 0xff
 8020336:	f000 f9a3 	bl	8020680 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 802033a:	20a1      	movs	r0, #161	; 0xa1
 802033c:	f7ff ffac 	bl	8020298 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8020340:	20a6      	movs	r0, #166	; 0xa6
 8020342:	f7ff ffa9 	bl	8020298 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8020346:	20a8      	movs	r0, #168	; 0xa8
 8020348:	f7ff ffa6 	bl	8020298 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 802034c:	201f      	movs	r0, #31
 802034e:	f7ff ffa3 	bl	8020298 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8020352:	20a4      	movs	r0, #164	; 0xa4
 8020354:	f7ff ffa0 	bl	8020298 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8020358:	20d3      	movs	r0, #211	; 0xd3
 802035a:	f7ff ff9d 	bl	8020298 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 802035e:	2000      	movs	r0, #0
 8020360:	f7ff ff9a 	bl	8020298 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8020364:	20d5      	movs	r0, #213	; 0xd5
 8020366:	f7ff ff97 	bl	8020298 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 802036a:	20f0      	movs	r0, #240	; 0xf0
 802036c:	f7ff ff94 	bl	8020298 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8020370:	20d9      	movs	r0, #217	; 0xd9
 8020372:	f7ff ff91 	bl	8020298 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8020376:	2022      	movs	r0, #34	; 0x22
 8020378:	f7ff ff8e 	bl	8020298 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 802037c:	20da      	movs	r0, #218	; 0xda
 802037e:	f7ff ff8b 	bl	8020298 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8020382:	2002      	movs	r0, #2
 8020384:	f7ff ff88 	bl	8020298 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8020388:	20db      	movs	r0, #219	; 0xdb
 802038a:	f7ff ff85 	bl	8020298 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 802038e:	2020      	movs	r0, #32
 8020390:	f7ff ff82 	bl	8020298 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8020394:	208d      	movs	r0, #141	; 0x8d
 8020396:	f7ff ff7f 	bl	8020298 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 802039a:	2014      	movs	r0, #20
 802039c:	f7ff ff7c 	bl	8020298 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80203a0:	2001      	movs	r0, #1
 80203a2:	f000 f981 	bl	80206a8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80203a6:	2000      	movs	r0, #0
 80203a8:	f000 f810 	bl	80203cc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80203ac:	f000 f826 	bl	80203fc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80203b0:	4b05      	ldr	r3, [pc, #20]	; (80203c8 <ssd1306_Init+0xcc>)
 80203b2:	2200      	movs	r2, #0
 80203b4:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80203b6:	4b04      	ldr	r3, [pc, #16]	; (80203c8 <ssd1306_Init+0xcc>)
 80203b8:	2200      	movs	r2, #0
 80203ba:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80203bc:	4b02      	ldr	r3, [pc, #8]	; (80203c8 <ssd1306_Init+0xcc>)
 80203be:	2201      	movs	r2, #1
 80203c0:	711a      	strb	r2, [r3, #4]
}
 80203c2:	bf00      	nop
 80203c4:	bd80      	pop	{r7, pc}
 80203c6:	bf00      	nop
 80203c8:	20012af0 	.word	0x20012af0

080203cc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80203cc:	b580      	push	{r7, lr}
 80203ce:	b082      	sub	sp, #8
 80203d0:	af00      	add	r7, sp, #0
 80203d2:	4603      	mov	r3, r0
 80203d4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80203d6:	79fb      	ldrb	r3, [r7, #7]
 80203d8:	2b00      	cmp	r3, #0
 80203da:	d101      	bne.n	80203e0 <ssd1306_Fill+0x14>
 80203dc:	2300      	movs	r3, #0
 80203de:	e000      	b.n	80203e2 <ssd1306_Fill+0x16>
 80203e0:	23ff      	movs	r3, #255	; 0xff
 80203e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80203e6:	4619      	mov	r1, r3
 80203e8:	4803      	ldr	r0, [pc, #12]	; (80203f8 <ssd1306_Fill+0x2c>)
 80203ea:	f001 f9fb 	bl	80217e4 <memset>
}
 80203ee:	bf00      	nop
 80203f0:	3708      	adds	r7, #8
 80203f2:	46bd      	mov	sp, r7
 80203f4:	bd80      	pop	{r7, pc}
 80203f6:	bf00      	nop
 80203f8:	200128f0 	.word	0x200128f0

080203fc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80203fc:	b580      	push	{r7, lr}
 80203fe:	b082      	sub	sp, #8
 8020400:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8020402:	2300      	movs	r3, #0
 8020404:	71fb      	strb	r3, [r7, #7]
 8020406:	e016      	b.n	8020436 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8020408:	79fb      	ldrb	r3, [r7, #7]
 802040a:	3b50      	subs	r3, #80	; 0x50
 802040c:	b2db      	uxtb	r3, r3
 802040e:	4618      	mov	r0, r3
 8020410:	f7ff ff42 	bl	8020298 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8020414:	2000      	movs	r0, #0
 8020416:	f7ff ff3f 	bl	8020298 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 802041a:	2010      	movs	r0, #16
 802041c:	f7ff ff3c 	bl	8020298 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8020420:	79fb      	ldrb	r3, [r7, #7]
 8020422:	01db      	lsls	r3, r3, #7
 8020424:	4a08      	ldr	r2, [pc, #32]	; (8020448 <ssd1306_UpdateScreen+0x4c>)
 8020426:	4413      	add	r3, r2
 8020428:	2180      	movs	r1, #128	; 0x80
 802042a:	4618      	mov	r0, r3
 802042c:	f7ff ff4c 	bl	80202c8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8020430:	79fb      	ldrb	r3, [r7, #7]
 8020432:	3301      	adds	r3, #1
 8020434:	71fb      	strb	r3, [r7, #7]
 8020436:	79fb      	ldrb	r3, [r7, #7]
 8020438:	2b03      	cmp	r3, #3
 802043a:	d9e5      	bls.n	8020408 <ssd1306_UpdateScreen+0xc>
    }
}
 802043c:	bf00      	nop
 802043e:	bf00      	nop
 8020440:	3708      	adds	r7, #8
 8020442:	46bd      	mov	sp, r7
 8020444:	bd80      	pop	{r7, pc}
 8020446:	bf00      	nop
 8020448:	200128f0 	.word	0x200128f0

0802044c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 802044c:	b480      	push	{r7}
 802044e:	b083      	sub	sp, #12
 8020450:	af00      	add	r7, sp, #0
 8020452:	4603      	mov	r3, r0
 8020454:	71fb      	strb	r3, [r7, #7]
 8020456:	460b      	mov	r3, r1
 8020458:	71bb      	strb	r3, [r7, #6]
 802045a:	4613      	mov	r3, r2
 802045c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 802045e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8020462:	2b00      	cmp	r3, #0
 8020464:	db3d      	blt.n	80204e2 <ssd1306_DrawPixel+0x96>
 8020466:	79bb      	ldrb	r3, [r7, #6]
 8020468:	2b1f      	cmp	r3, #31
 802046a:	d83a      	bhi.n	80204e2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 802046c:	797b      	ldrb	r3, [r7, #5]
 802046e:	2b01      	cmp	r3, #1
 8020470:	d11a      	bne.n	80204a8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8020472:	79fa      	ldrb	r2, [r7, #7]
 8020474:	79bb      	ldrb	r3, [r7, #6]
 8020476:	08db      	lsrs	r3, r3, #3
 8020478:	b2d8      	uxtb	r0, r3
 802047a:	4603      	mov	r3, r0
 802047c:	01db      	lsls	r3, r3, #7
 802047e:	4413      	add	r3, r2
 8020480:	4a1b      	ldr	r2, [pc, #108]	; (80204f0 <ssd1306_DrawPixel+0xa4>)
 8020482:	5cd3      	ldrb	r3, [r2, r3]
 8020484:	b25a      	sxtb	r2, r3
 8020486:	79bb      	ldrb	r3, [r7, #6]
 8020488:	f003 0307 	and.w	r3, r3, #7
 802048c:	2101      	movs	r1, #1
 802048e:	fa01 f303 	lsl.w	r3, r1, r3
 8020492:	b25b      	sxtb	r3, r3
 8020494:	4313      	orrs	r3, r2
 8020496:	b259      	sxtb	r1, r3
 8020498:	79fa      	ldrb	r2, [r7, #7]
 802049a:	4603      	mov	r3, r0
 802049c:	01db      	lsls	r3, r3, #7
 802049e:	4413      	add	r3, r2
 80204a0:	b2c9      	uxtb	r1, r1
 80204a2:	4a13      	ldr	r2, [pc, #76]	; (80204f0 <ssd1306_DrawPixel+0xa4>)
 80204a4:	54d1      	strb	r1, [r2, r3]
 80204a6:	e01d      	b.n	80204e4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80204a8:	79fa      	ldrb	r2, [r7, #7]
 80204aa:	79bb      	ldrb	r3, [r7, #6]
 80204ac:	08db      	lsrs	r3, r3, #3
 80204ae:	b2d8      	uxtb	r0, r3
 80204b0:	4603      	mov	r3, r0
 80204b2:	01db      	lsls	r3, r3, #7
 80204b4:	4413      	add	r3, r2
 80204b6:	4a0e      	ldr	r2, [pc, #56]	; (80204f0 <ssd1306_DrawPixel+0xa4>)
 80204b8:	5cd3      	ldrb	r3, [r2, r3]
 80204ba:	b25a      	sxtb	r2, r3
 80204bc:	79bb      	ldrb	r3, [r7, #6]
 80204be:	f003 0307 	and.w	r3, r3, #7
 80204c2:	2101      	movs	r1, #1
 80204c4:	fa01 f303 	lsl.w	r3, r1, r3
 80204c8:	b25b      	sxtb	r3, r3
 80204ca:	43db      	mvns	r3, r3
 80204cc:	b25b      	sxtb	r3, r3
 80204ce:	4013      	ands	r3, r2
 80204d0:	b259      	sxtb	r1, r3
 80204d2:	79fa      	ldrb	r2, [r7, #7]
 80204d4:	4603      	mov	r3, r0
 80204d6:	01db      	lsls	r3, r3, #7
 80204d8:	4413      	add	r3, r2
 80204da:	b2c9      	uxtb	r1, r1
 80204dc:	4a04      	ldr	r2, [pc, #16]	; (80204f0 <ssd1306_DrawPixel+0xa4>)
 80204de:	54d1      	strb	r1, [r2, r3]
 80204e0:	e000      	b.n	80204e4 <ssd1306_DrawPixel+0x98>
        return;
 80204e2:	bf00      	nop
    }
}
 80204e4:	370c      	adds	r7, #12
 80204e6:	46bd      	mov	sp, r7
 80204e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204ec:	4770      	bx	lr
 80204ee:	bf00      	nop
 80204f0:	200128f0 	.word	0x200128f0

080204f4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80204f4:	b590      	push	{r4, r7, lr}
 80204f6:	b089      	sub	sp, #36	; 0x24
 80204f8:	af00      	add	r7, sp, #0
 80204fa:	4604      	mov	r4, r0
 80204fc:	1d38      	adds	r0, r7, #4
 80204fe:	e880 0006 	stmia.w	r0, {r1, r2}
 8020502:	461a      	mov	r2, r3
 8020504:	4623      	mov	r3, r4
 8020506:	73fb      	strb	r3, [r7, #15]
 8020508:	4613      	mov	r3, r2
 802050a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 802050c:	7bfb      	ldrb	r3, [r7, #15]
 802050e:	2b1f      	cmp	r3, #31
 8020510:	d902      	bls.n	8020518 <ssd1306_WriteChar+0x24>
 8020512:	7bfb      	ldrb	r3, [r7, #15]
 8020514:	2b7e      	cmp	r3, #126	; 0x7e
 8020516:	d901      	bls.n	802051c <ssd1306_WriteChar+0x28>
        return 0;
 8020518:	2300      	movs	r3, #0
 802051a:	e06d      	b.n	80205f8 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 802051c:	4b38      	ldr	r3, [pc, #224]	; (8020600 <ssd1306_WriteChar+0x10c>)
 802051e:	881b      	ldrh	r3, [r3, #0]
 8020520:	461a      	mov	r2, r3
 8020522:	793b      	ldrb	r3, [r7, #4]
 8020524:	4413      	add	r3, r2
 8020526:	2b80      	cmp	r3, #128	; 0x80
 8020528:	dc06      	bgt.n	8020538 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 802052a:	4b35      	ldr	r3, [pc, #212]	; (8020600 <ssd1306_WriteChar+0x10c>)
 802052c:	885b      	ldrh	r3, [r3, #2]
 802052e:	461a      	mov	r2, r3
 8020530:	797b      	ldrb	r3, [r7, #5]
 8020532:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8020534:	2b20      	cmp	r3, #32
 8020536:	dd01      	ble.n	802053c <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8020538:	2300      	movs	r3, #0
 802053a:	e05d      	b.n	80205f8 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 802053c:	2300      	movs	r3, #0
 802053e:	61fb      	str	r3, [r7, #28]
 8020540:	e04c      	b.n	80205dc <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8020542:	68ba      	ldr	r2, [r7, #8]
 8020544:	7bfb      	ldrb	r3, [r7, #15]
 8020546:	3b20      	subs	r3, #32
 8020548:	7979      	ldrb	r1, [r7, #5]
 802054a:	fb01 f303 	mul.w	r3, r1, r3
 802054e:	4619      	mov	r1, r3
 8020550:	69fb      	ldr	r3, [r7, #28]
 8020552:	440b      	add	r3, r1
 8020554:	005b      	lsls	r3, r3, #1
 8020556:	4413      	add	r3, r2
 8020558:	881b      	ldrh	r3, [r3, #0]
 802055a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 802055c:	2300      	movs	r3, #0
 802055e:	61bb      	str	r3, [r7, #24]
 8020560:	e034      	b.n	80205cc <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8020562:	697a      	ldr	r2, [r7, #20]
 8020564:	69bb      	ldr	r3, [r7, #24]
 8020566:	fa02 f303 	lsl.w	r3, r2, r3
 802056a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 802056e:	2b00      	cmp	r3, #0
 8020570:	d012      	beq.n	8020598 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8020572:	4b23      	ldr	r3, [pc, #140]	; (8020600 <ssd1306_WriteChar+0x10c>)
 8020574:	881b      	ldrh	r3, [r3, #0]
 8020576:	b2da      	uxtb	r2, r3
 8020578:	69bb      	ldr	r3, [r7, #24]
 802057a:	b2db      	uxtb	r3, r3
 802057c:	4413      	add	r3, r2
 802057e:	b2d8      	uxtb	r0, r3
 8020580:	4b1f      	ldr	r3, [pc, #124]	; (8020600 <ssd1306_WriteChar+0x10c>)
 8020582:	885b      	ldrh	r3, [r3, #2]
 8020584:	b2da      	uxtb	r2, r3
 8020586:	69fb      	ldr	r3, [r7, #28]
 8020588:	b2db      	uxtb	r3, r3
 802058a:	4413      	add	r3, r2
 802058c:	b2db      	uxtb	r3, r3
 802058e:	7bba      	ldrb	r2, [r7, #14]
 8020590:	4619      	mov	r1, r3
 8020592:	f7ff ff5b 	bl	802044c <ssd1306_DrawPixel>
 8020596:	e016      	b.n	80205c6 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8020598:	4b19      	ldr	r3, [pc, #100]	; (8020600 <ssd1306_WriteChar+0x10c>)
 802059a:	881b      	ldrh	r3, [r3, #0]
 802059c:	b2da      	uxtb	r2, r3
 802059e:	69bb      	ldr	r3, [r7, #24]
 80205a0:	b2db      	uxtb	r3, r3
 80205a2:	4413      	add	r3, r2
 80205a4:	b2d8      	uxtb	r0, r3
 80205a6:	4b16      	ldr	r3, [pc, #88]	; (8020600 <ssd1306_WriteChar+0x10c>)
 80205a8:	885b      	ldrh	r3, [r3, #2]
 80205aa:	b2da      	uxtb	r2, r3
 80205ac:	69fb      	ldr	r3, [r7, #28]
 80205ae:	b2db      	uxtb	r3, r3
 80205b0:	4413      	add	r3, r2
 80205b2:	b2d9      	uxtb	r1, r3
 80205b4:	7bbb      	ldrb	r3, [r7, #14]
 80205b6:	2b00      	cmp	r3, #0
 80205b8:	bf0c      	ite	eq
 80205ba:	2301      	moveq	r3, #1
 80205bc:	2300      	movne	r3, #0
 80205be:	b2db      	uxtb	r3, r3
 80205c0:	461a      	mov	r2, r3
 80205c2:	f7ff ff43 	bl	802044c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 80205c6:	69bb      	ldr	r3, [r7, #24]
 80205c8:	3301      	adds	r3, #1
 80205ca:	61bb      	str	r3, [r7, #24]
 80205cc:	793b      	ldrb	r3, [r7, #4]
 80205ce:	461a      	mov	r2, r3
 80205d0:	69bb      	ldr	r3, [r7, #24]
 80205d2:	4293      	cmp	r3, r2
 80205d4:	d3c5      	bcc.n	8020562 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 80205d6:	69fb      	ldr	r3, [r7, #28]
 80205d8:	3301      	adds	r3, #1
 80205da:	61fb      	str	r3, [r7, #28]
 80205dc:	797b      	ldrb	r3, [r7, #5]
 80205de:	461a      	mov	r2, r3
 80205e0:	69fb      	ldr	r3, [r7, #28]
 80205e2:	4293      	cmp	r3, r2
 80205e4:	d3ad      	bcc.n	8020542 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80205e6:	4b06      	ldr	r3, [pc, #24]	; (8020600 <ssd1306_WriteChar+0x10c>)
 80205e8:	881a      	ldrh	r2, [r3, #0]
 80205ea:	793b      	ldrb	r3, [r7, #4]
 80205ec:	b29b      	uxth	r3, r3
 80205ee:	4413      	add	r3, r2
 80205f0:	b29a      	uxth	r2, r3
 80205f2:	4b03      	ldr	r3, [pc, #12]	; (8020600 <ssd1306_WriteChar+0x10c>)
 80205f4:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80205f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80205f8:	4618      	mov	r0, r3
 80205fa:	3724      	adds	r7, #36	; 0x24
 80205fc:	46bd      	mov	sp, r7
 80205fe:	bd90      	pop	{r4, r7, pc}
 8020600:	20012af0 	.word	0x20012af0

08020604 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8020604:	b580      	push	{r7, lr}
 8020606:	b084      	sub	sp, #16
 8020608:	af00      	add	r7, sp, #0
 802060a:	60f8      	str	r0, [r7, #12]
 802060c:	1d38      	adds	r0, r7, #4
 802060e:	e880 0006 	stmia.w	r0, {r1, r2}
 8020612:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8020614:	e012      	b.n	802063c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8020616:	68fb      	ldr	r3, [r7, #12]
 8020618:	7818      	ldrb	r0, [r3, #0]
 802061a:	78fb      	ldrb	r3, [r7, #3]
 802061c:	1d3a      	adds	r2, r7, #4
 802061e:	ca06      	ldmia	r2, {r1, r2}
 8020620:	f7ff ff68 	bl	80204f4 <ssd1306_WriteChar>
 8020624:	4603      	mov	r3, r0
 8020626:	461a      	mov	r2, r3
 8020628:	68fb      	ldr	r3, [r7, #12]
 802062a:	781b      	ldrb	r3, [r3, #0]
 802062c:	429a      	cmp	r2, r3
 802062e:	d002      	beq.n	8020636 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8020630:	68fb      	ldr	r3, [r7, #12]
 8020632:	781b      	ldrb	r3, [r3, #0]
 8020634:	e008      	b.n	8020648 <ssd1306_WriteString+0x44>
        }
        str++;
 8020636:	68fb      	ldr	r3, [r7, #12]
 8020638:	3301      	adds	r3, #1
 802063a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 802063c:	68fb      	ldr	r3, [r7, #12]
 802063e:	781b      	ldrb	r3, [r3, #0]
 8020640:	2b00      	cmp	r3, #0
 8020642:	d1e8      	bne.n	8020616 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8020644:	68fb      	ldr	r3, [r7, #12]
 8020646:	781b      	ldrb	r3, [r3, #0]
}
 8020648:	4618      	mov	r0, r3
 802064a:	3710      	adds	r7, #16
 802064c:	46bd      	mov	sp, r7
 802064e:	bd80      	pop	{r7, pc}

08020650 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8020650:	b480      	push	{r7}
 8020652:	b083      	sub	sp, #12
 8020654:	af00      	add	r7, sp, #0
 8020656:	4603      	mov	r3, r0
 8020658:	460a      	mov	r2, r1
 802065a:	71fb      	strb	r3, [r7, #7]
 802065c:	4613      	mov	r3, r2
 802065e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8020660:	79fb      	ldrb	r3, [r7, #7]
 8020662:	b29a      	uxth	r2, r3
 8020664:	4b05      	ldr	r3, [pc, #20]	; (802067c <ssd1306_SetCursor+0x2c>)
 8020666:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8020668:	79bb      	ldrb	r3, [r7, #6]
 802066a:	b29a      	uxth	r2, r3
 802066c:	4b03      	ldr	r3, [pc, #12]	; (802067c <ssd1306_SetCursor+0x2c>)
 802066e:	805a      	strh	r2, [r3, #2]
}
 8020670:	bf00      	nop
 8020672:	370c      	adds	r7, #12
 8020674:	46bd      	mov	sp, r7
 8020676:	f85d 7b04 	ldr.w	r7, [sp], #4
 802067a:	4770      	bx	lr
 802067c:	20012af0 	.word	0x20012af0

08020680 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8020680:	b580      	push	{r7, lr}
 8020682:	b084      	sub	sp, #16
 8020684:	af00      	add	r7, sp, #0
 8020686:	4603      	mov	r3, r0
 8020688:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 802068a:	2381      	movs	r3, #129	; 0x81
 802068c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 802068e:	7bfb      	ldrb	r3, [r7, #15]
 8020690:	4618      	mov	r0, r3
 8020692:	f7ff fe01 	bl	8020298 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8020696:	79fb      	ldrb	r3, [r7, #7]
 8020698:	4618      	mov	r0, r3
 802069a:	f7ff fdfd 	bl	8020298 <ssd1306_WriteCommand>
}
 802069e:	bf00      	nop
 80206a0:	3710      	adds	r7, #16
 80206a2:	46bd      	mov	sp, r7
 80206a4:	bd80      	pop	{r7, pc}
	...

080206a8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80206a8:	b580      	push	{r7, lr}
 80206aa:	b084      	sub	sp, #16
 80206ac:	af00      	add	r7, sp, #0
 80206ae:	4603      	mov	r3, r0
 80206b0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80206b2:	79fb      	ldrb	r3, [r7, #7]
 80206b4:	2b00      	cmp	r3, #0
 80206b6:	d005      	beq.n	80206c4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80206b8:	23af      	movs	r3, #175	; 0xaf
 80206ba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80206bc:	4b08      	ldr	r3, [pc, #32]	; (80206e0 <ssd1306_SetDisplayOn+0x38>)
 80206be:	2201      	movs	r2, #1
 80206c0:	715a      	strb	r2, [r3, #5]
 80206c2:	e004      	b.n	80206ce <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80206c4:	23ae      	movs	r3, #174	; 0xae
 80206c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80206c8:	4b05      	ldr	r3, [pc, #20]	; (80206e0 <ssd1306_SetDisplayOn+0x38>)
 80206ca:	2200      	movs	r2, #0
 80206cc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80206ce:	7bfb      	ldrb	r3, [r7, #15]
 80206d0:	4618      	mov	r0, r3
 80206d2:	f7ff fde1 	bl	8020298 <ssd1306_WriteCommand>
}
 80206d6:	bf00      	nop
 80206d8:	3710      	adds	r7, #16
 80206da:	46bd      	mov	sp, r7
 80206dc:	bd80      	pop	{r7, pc}
 80206de:	bf00      	nop
 80206e0:	20012af0 	.word	0x20012af0

080206e4 <W25qxx_Spi>:
#else
#define W25qxx_Delay(delay) HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data)
{
 80206e4:	b580      	push	{r7, lr}
 80206e6:	b086      	sub	sp, #24
 80206e8:	af02      	add	r7, sp, #8
 80206ea:	4603      	mov	r3, r0
 80206ec:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;

 HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 80206ee:	f107 020f 	add.w	r2, r7, #15
 80206f2:	1df9      	adds	r1, r7, #7
 80206f4:	2364      	movs	r3, #100	; 0x64
 80206f6:	9300      	str	r3, [sp, #0]
 80206f8:	2301      	movs	r3, #1
 80206fa:	4804      	ldr	r0, [pc, #16]	; (802070c <W25qxx_Spi+0x28>)
 80206fc:	f7e4 fd88 	bl	8005210 <HAL_SPI_TransmitReceive>


	return ret;
 8020700:	7bfb      	ldrb	r3, [r7, #15]
}
 8020702:	4618      	mov	r0, r3
 8020704:	3710      	adds	r7, #16
 8020706:	46bd      	mov	sp, r7
 8020708:	bd80      	pop	{r7, pc}
 802070a:	bf00      	nop
 802070c:	20000a1c 	.word	0x20000a1c

08020710 <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void)
{
 8020710:	b580      	push	{r7, lr}
 8020712:	b084      	sub	sp, #16
 8020714:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 8020716:	2300      	movs	r3, #0
 8020718:	60fb      	str	r3, [r7, #12]
 802071a:	2300      	movs	r3, #0
 802071c:	60bb      	str	r3, [r7, #8]
 802071e:	2300      	movs	r3, #0
 8020720:	607b      	str	r3, [r7, #4]
 8020722:	2300      	movs	r3, #0
 8020724:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020726:	2200      	movs	r2, #0
 8020728:	2108      	movs	r1, #8
 802072a:	4813      	ldr	r0, [pc, #76]	; (8020778 <W25qxx_ReadID+0x68>)
 802072c:	f7e3 f93a 	bl	80039a4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 8020730:	209f      	movs	r0, #159	; 0x9f
 8020732:	f7ff ffd7 	bl	80206e4 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020736:	20a5      	movs	r0, #165	; 0xa5
 8020738:	f7ff ffd4 	bl	80206e4 <W25qxx_Spi>
 802073c:	4603      	mov	r3, r0
 802073e:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020740:	20a5      	movs	r0, #165	; 0xa5
 8020742:	f7ff ffcf 	bl	80206e4 <W25qxx_Spi>
 8020746:	4603      	mov	r3, r0
 8020748:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 802074a:	20a5      	movs	r0, #165	; 0xa5
 802074c:	f7ff ffca 	bl	80206e4 <W25qxx_Spi>
 8020750:	4603      	mov	r3, r0
 8020752:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020754:	2201      	movs	r2, #1
 8020756:	2108      	movs	r1, #8
 8020758:	4807      	ldr	r0, [pc, #28]	; (8020778 <W25qxx_ReadID+0x68>)
 802075a:	f7e3 f923 	bl	80039a4 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 802075e:	68bb      	ldr	r3, [r7, #8]
 8020760:	041a      	lsls	r2, r3, #16
 8020762:	687b      	ldr	r3, [r7, #4]
 8020764:	021b      	lsls	r3, r3, #8
 8020766:	4313      	orrs	r3, r2
 8020768:	683a      	ldr	r2, [r7, #0]
 802076a:	4313      	orrs	r3, r2
 802076c:	60fb      	str	r3, [r7, #12]
	return Temp;
 802076e:	68fb      	ldr	r3, [r7, #12]
}
 8020770:	4618      	mov	r0, r3
 8020772:	3710      	adds	r7, #16
 8020774:	46bd      	mov	sp, r7
 8020776:	bd80      	pop	{r7, pc}
 8020778:	40021000 	.word	0x40021000

0802077c <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void)
{
 802077c:	b590      	push	{r4, r7, lr}
 802077e:	b083      	sub	sp, #12
 8020780:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020782:	2200      	movs	r2, #0
 8020784:	2108      	movs	r1, #8
 8020786:	4816      	ldr	r0, [pc, #88]	; (80207e0 <W25qxx_ReadUniqID+0x64>)
 8020788:	f7e3 f90c 	bl	80039a4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 802078c:	204b      	movs	r0, #75	; 0x4b
 802078e:	f7ff ffa9 	bl	80206e4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 8020792:	2300      	movs	r3, #0
 8020794:	71fb      	strb	r3, [r7, #7]
 8020796:	e005      	b.n	80207a4 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020798:	20a5      	movs	r0, #165	; 0xa5
 802079a:	f7ff ffa3 	bl	80206e4 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 802079e:	79fb      	ldrb	r3, [r7, #7]
 80207a0:	3301      	adds	r3, #1
 80207a2:	71fb      	strb	r3, [r7, #7]
 80207a4:	79fb      	ldrb	r3, [r7, #7]
 80207a6:	2b03      	cmp	r3, #3
 80207a8:	d9f6      	bls.n	8020798 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 80207aa:	2300      	movs	r3, #0
 80207ac:	71bb      	strb	r3, [r7, #6]
 80207ae:	e00b      	b.n	80207c8 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80207b0:	79bc      	ldrb	r4, [r7, #6]
 80207b2:	20a5      	movs	r0, #165	; 0xa5
 80207b4:	f7ff ff96 	bl	80206e4 <W25qxx_Spi>
 80207b8:	4603      	mov	r3, r0
 80207ba:	461a      	mov	r2, r3
 80207bc:	4b09      	ldr	r3, [pc, #36]	; (80207e4 <W25qxx_ReadUniqID+0x68>)
 80207be:	4423      	add	r3, r4
 80207c0:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 80207c2:	79bb      	ldrb	r3, [r7, #6]
 80207c4:	3301      	adds	r3, #1
 80207c6:	71bb      	strb	r3, [r7, #6]
 80207c8:	79bb      	ldrb	r3, [r7, #6]
 80207ca:	2b07      	cmp	r3, #7
 80207cc:	d9f0      	bls.n	80207b0 <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80207ce:	2201      	movs	r2, #1
 80207d0:	2108      	movs	r1, #8
 80207d2:	4803      	ldr	r0, [pc, #12]	; (80207e0 <W25qxx_ReadUniqID+0x64>)
 80207d4:	f7e3 f8e6 	bl	80039a4 <HAL_GPIO_WritePin>
}
 80207d8:	bf00      	nop
 80207da:	370c      	adds	r7, #12
 80207dc:	46bd      	mov	sp, r7
 80207de:	bd90      	pop	{r4, r7, pc}
 80207e0:	40021000 	.word	0x40021000
 80207e4:	20012af8 	.word	0x20012af8

080207e8 <W25qxx_WriteEnable>:
//###################################################################################################################
void W25qxx_WriteEnable(void)
{
 80207e8:	b580      	push	{r7, lr}
 80207ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80207ec:	2200      	movs	r2, #0
 80207ee:	2108      	movs	r1, #8
 80207f0:	4807      	ldr	r0, [pc, #28]	; (8020810 <W25qxx_WriteEnable+0x28>)
 80207f2:	f7e3 f8d7 	bl	80039a4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x06);
 80207f6:	2006      	movs	r0, #6
 80207f8:	f7ff ff74 	bl	80206e4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80207fc:	2201      	movs	r2, #1
 80207fe:	2108      	movs	r1, #8
 8020800:	4803      	ldr	r0, [pc, #12]	; (8020810 <W25qxx_WriteEnable+0x28>)
 8020802:	f7e3 f8cf 	bl	80039a4 <HAL_GPIO_WritePin>
	W25qxx_Delay(1);
 8020806:	2001      	movs	r0, #1
 8020808:	f7e1 fbce 	bl	8001fa8 <HAL_Delay>
}
 802080c:	bf00      	nop
 802080e:	bd80      	pop	{r7, pc}
 8020810:	40021000 	.word	0x40021000

08020814 <W25qxx_ReadStatusRegister>:
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3)
{
 8020814:	b580      	push	{r7, lr}
 8020816:	b084      	sub	sp, #16
 8020818:	af00      	add	r7, sp, #0
 802081a:	4603      	mov	r3, r0
 802081c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 802081e:	2300      	movs	r3, #0
 8020820:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020822:	2200      	movs	r2, #0
 8020824:	2108      	movs	r1, #8
 8020826:	481c      	ldr	r0, [pc, #112]	; (8020898 <W25qxx_ReadStatusRegister+0x84>)
 8020828:	f7e3 f8bc 	bl	80039a4 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1)
 802082c:	79fb      	ldrb	r3, [r7, #7]
 802082e:	2b01      	cmp	r3, #1
 8020830:	d10c      	bne.n	802084c <W25qxx_ReadStatusRegister+0x38>
	{
		W25qxx_Spi(0x05);
 8020832:	2005      	movs	r0, #5
 8020834:	f7ff ff56 	bl	80206e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020838:	20a5      	movs	r0, #165	; 0xa5
 802083a:	f7ff ff53 	bl	80206e4 <W25qxx_Spi>
 802083e:	4603      	mov	r3, r0
 8020840:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 8020842:	4a16      	ldr	r2, [pc, #88]	; (802089c <W25qxx_ReadStatusRegister+0x88>)
 8020844:	7bfb      	ldrb	r3, [r7, #15]
 8020846:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 802084a:	e01b      	b.n	8020884 <W25qxx_ReadStatusRegister+0x70>
	}
	else if (SelectStatusRegister_1_2_3 == 2)
 802084c:	79fb      	ldrb	r3, [r7, #7]
 802084e:	2b02      	cmp	r3, #2
 8020850:	d10c      	bne.n	802086c <W25qxx_ReadStatusRegister+0x58>
	{
		W25qxx_Spi(0x35);
 8020852:	2035      	movs	r0, #53	; 0x35
 8020854:	f7ff ff46 	bl	80206e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020858:	20a5      	movs	r0, #165	; 0xa5
 802085a:	f7ff ff43 	bl	80206e4 <W25qxx_Spi>
 802085e:	4603      	mov	r3, r0
 8020860:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 8020862:	4a0e      	ldr	r2, [pc, #56]	; (802089c <W25qxx_ReadStatusRegister+0x88>)
 8020864:	7bfb      	ldrb	r3, [r7, #15]
 8020866:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 802086a:	e00b      	b.n	8020884 <W25qxx_ReadStatusRegister+0x70>
	}
	else
	{
		W25qxx_Spi(0x15);
 802086c:	2015      	movs	r0, #21
 802086e:	f7ff ff39 	bl	80206e4 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8020872:	20a5      	movs	r0, #165	; 0xa5
 8020874:	f7ff ff36 	bl	80206e4 <W25qxx_Spi>
 8020878:	4603      	mov	r3, r0
 802087a:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 802087c:	4a07      	ldr	r2, [pc, #28]	; (802089c <W25qxx_ReadStatusRegister+0x88>)
 802087e:	7bfb      	ldrb	r3, [r7, #15]
 8020880:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020884:	2201      	movs	r2, #1
 8020886:	2108      	movs	r1, #8
 8020888:	4803      	ldr	r0, [pc, #12]	; (8020898 <W25qxx_ReadStatusRegister+0x84>)
 802088a:	f7e3 f88b 	bl	80039a4 <HAL_GPIO_WritePin>
	return status;
 802088e:	7bfb      	ldrb	r3, [r7, #15]
}
 8020890:	4618      	mov	r0, r3
 8020892:	3710      	adds	r7, #16
 8020894:	46bd      	mov	sp, r7
 8020896:	bd80      	pop	{r7, pc}
 8020898:	40021000 	.word	0x40021000
 802089c:	20012af8 	.word	0x20012af8

080208a0 <W25qxx_WaitForWriteEnd>:
	W25qxx_Spi(Data);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
void W25qxx_WaitForWriteEnd(void)
{
 80208a0:	b580      	push	{r7, lr}
 80208a2:	af00      	add	r7, sp, #0
	W25qxx_Delay(1);
 80208a4:	2001      	movs	r0, #1
 80208a6:	f7e1 fb7f 	bl	8001fa8 <HAL_Delay>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80208aa:	2200      	movs	r2, #0
 80208ac:	2108      	movs	r1, #8
 80208ae:	480f      	ldr	r0, [pc, #60]	; (80208ec <W25qxx_WaitForWriteEnd+0x4c>)
 80208b0:	f7e3 f878 	bl	80039a4 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x05);
 80208b4:	2005      	movs	r0, #5
 80208b6:	f7ff ff15 	bl	80206e4 <W25qxx_Spi>
	do
	{
		w25qxx.StatusRegister1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80208ba:	20a5      	movs	r0, #165	; 0xa5
 80208bc:	f7ff ff12 	bl	80206e4 <W25qxx_Spi>
 80208c0:	4603      	mov	r3, r0
 80208c2:	461a      	mov	r2, r3
 80208c4:	4b0a      	ldr	r3, [pc, #40]	; (80208f0 <W25qxx_WaitForWriteEnd+0x50>)
 80208c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		W25qxx_Delay(1);
 80208ca:	2001      	movs	r0, #1
 80208cc:	f7e1 fb6c 	bl	8001fa8 <HAL_Delay>
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
 80208d0:	4b07      	ldr	r3, [pc, #28]	; (80208f0 <W25qxx_WaitForWriteEnd+0x50>)
 80208d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80208d6:	f003 0301 	and.w	r3, r3, #1
 80208da:	2b00      	cmp	r3, #0
 80208dc:	d1ed      	bne.n	80208ba <W25qxx_WaitForWriteEnd+0x1a>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 80208de:	2201      	movs	r2, #1
 80208e0:	2108      	movs	r1, #8
 80208e2:	4802      	ldr	r0, [pc, #8]	; (80208ec <W25qxx_WaitForWriteEnd+0x4c>)
 80208e4:	f7e3 f85e 	bl	80039a4 <HAL_GPIO_WritePin>
}
 80208e8:	bf00      	nop
 80208ea:	bd80      	pop	{r7, pc}
 80208ec:	40021000 	.word	0x40021000
 80208f0:	20012af8 	.word	0x20012af8

080208f4 <W25qxx_Init>:
//###################################################################################################################
bool W25qxx_Init(void)
{
 80208f4:	b580      	push	{r7, lr}
 80208f6:	b082      	sub	sp, #8
 80208f8:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 80208fa:	4b65      	ldr	r3, [pc, #404]	; (8020a90 <W25qxx_Init+0x19c>)
 80208fc:	2201      	movs	r2, #1
 80208fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 8020902:	e002      	b.n	802090a <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8020904:	2001      	movs	r0, #1
 8020906:	f7e1 fb4f 	bl	8001fa8 <HAL_Delay>
	while (HAL_GetTick() < 100)
 802090a:	f7e1 fb41 	bl	8001f90 <HAL_GetTick>
 802090e:	4603      	mov	r3, r0
 8020910:	2b63      	cmp	r3, #99	; 0x63
 8020912:	d9f7      	bls.n	8020904 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020914:	2201      	movs	r2, #1
 8020916:	2108      	movs	r1, #8
 8020918:	485e      	ldr	r0, [pc, #376]	; (8020a94 <W25qxx_Init+0x1a0>)
 802091a:	f7e3 f843 	bl	80039a4 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 802091e:	2064      	movs	r0, #100	; 0x64
 8020920:	f7e1 fb42 	bl	8001fa8 <HAL_Delay>
	uint32_t id;
#if (_W25QXX_DEBUG == 1)
	printf("w25qxx Init Begin...\r\n");
#endif
	id = W25qxx_ReadID();
 8020924:	f7ff fef4 	bl	8020710 <W25qxx_ReadID>
 8020928:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx ID:0x%X\r\n", id);
#endif
	switch (id & 0x000000FF)
 802092a:	687b      	ldr	r3, [r7, #4]
 802092c:	b2db      	uxtb	r3, r3
 802092e:	3b11      	subs	r3, #17
 8020930:	2b0f      	cmp	r3, #15
 8020932:	d86c      	bhi.n	8020a0e <W25qxx_Init+0x11a>
 8020934:	a201      	add	r2, pc, #4	; (adr r2, 802093c <W25qxx_Init+0x48>)
 8020936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802093a:	bf00      	nop
 802093c:	08020a01 	.word	0x08020a01
 8020940:	080209f3 	.word	0x080209f3
 8020944:	080209e5 	.word	0x080209e5
 8020948:	080209d7 	.word	0x080209d7
 802094c:	080209c9 	.word	0x080209c9
 8020950:	080209bb 	.word	0x080209bb
 8020954:	080209ad 	.word	0x080209ad
 8020958:	0802099d 	.word	0x0802099d
 802095c:	0802098d 	.word	0x0802098d
 8020960:	08020a0f 	.word	0x08020a0f
 8020964:	08020a0f 	.word	0x08020a0f
 8020968:	08020a0f 	.word	0x08020a0f
 802096c:	08020a0f 	.word	0x08020a0f
 8020970:	08020a0f 	.word	0x08020a0f
 8020974:	08020a0f 	.word	0x08020a0f
 8020978:	0802097d 	.word	0x0802097d
	{
	case 0x20: // 	w25q512
		w25qxx.ID = W25Q512;
 802097c:	4b44      	ldr	r3, [pc, #272]	; (8020a90 <W25qxx_Init+0x19c>)
 802097e:	220a      	movs	r2, #10
 8020980:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 8020982:	4b43      	ldr	r3, [pc, #268]	; (8020a90 <W25qxx_Init+0x19c>)
 8020984:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8020988:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q512\r\n");
#endif
		break;
 802098a:	e046      	b.n	8020a1a <W25qxx_Init+0x126>
	case 0x19: // 	w25q256
		w25qxx.ID = W25Q256;
 802098c:	4b40      	ldr	r3, [pc, #256]	; (8020a90 <W25qxx_Init+0x19c>)
 802098e:	2209      	movs	r2, #9
 8020990:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 8020992:	4b3f      	ldr	r3, [pc, #252]	; (8020a90 <W25qxx_Init+0x19c>)
 8020994:	f44f 7200 	mov.w	r2, #512	; 0x200
 8020998:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q256\r\n");
#endif
		break;
 802099a:	e03e      	b.n	8020a1a <W25qxx_Init+0x126>
	case 0x18: // 	w25q128
		w25qxx.ID = W25Q128;
 802099c:	4b3c      	ldr	r3, [pc, #240]	; (8020a90 <W25qxx_Init+0x19c>)
 802099e:	2208      	movs	r2, #8
 80209a0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80209a2:	4b3b      	ldr	r3, [pc, #236]	; (8020a90 <W25qxx_Init+0x19c>)
 80209a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80209a8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q128\r\n");
#endif
		break;
 80209aa:	e036      	b.n	8020a1a <W25qxx_Init+0x126>
	case 0x17: //	w25q64
		w25qxx.ID = W25Q64;
 80209ac:	4b38      	ldr	r3, [pc, #224]	; (8020a90 <W25qxx_Init+0x19c>)
 80209ae:	2207      	movs	r2, #7
 80209b0:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80209b2:	4b37      	ldr	r3, [pc, #220]	; (8020a90 <W25qxx_Init+0x19c>)
 80209b4:	2280      	movs	r2, #128	; 0x80
 80209b6:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q64\r\n");
#endif
		break;
 80209b8:	e02f      	b.n	8020a1a <W25qxx_Init+0x126>
	case 0x16: //	w25q32
		w25qxx.ID = W25Q32;
 80209ba:	4b35      	ldr	r3, [pc, #212]	; (8020a90 <W25qxx_Init+0x19c>)
 80209bc:	2206      	movs	r2, #6
 80209be:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80209c0:	4b33      	ldr	r3, [pc, #204]	; (8020a90 <W25qxx_Init+0x19c>)
 80209c2:	2240      	movs	r2, #64	; 0x40
 80209c4:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q32\r\n");
#endif
		break;
 80209c6:	e028      	b.n	8020a1a <W25qxx_Init+0x126>
	case 0x15: //	w25q16
		w25qxx.ID = W25Q16;
 80209c8:	4b31      	ldr	r3, [pc, #196]	; (8020a90 <W25qxx_Init+0x19c>)
 80209ca:	2205      	movs	r2, #5
 80209cc:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80209ce:	4b30      	ldr	r3, [pc, #192]	; (8020a90 <W25qxx_Init+0x19c>)
 80209d0:	2220      	movs	r2, #32
 80209d2:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q16\r\n");
#endif
		break;
 80209d4:	e021      	b.n	8020a1a <W25qxx_Init+0x126>
	case 0x14: //	w25q80
		w25qxx.ID = W25Q80;
 80209d6:	4b2e      	ldr	r3, [pc, #184]	; (8020a90 <W25qxx_Init+0x19c>)
 80209d8:	2204      	movs	r2, #4
 80209da:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80209dc:	4b2c      	ldr	r3, [pc, #176]	; (8020a90 <W25qxx_Init+0x19c>)
 80209de:	2210      	movs	r2, #16
 80209e0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q80\r\n");
#endif
		break;
 80209e2:	e01a      	b.n	8020a1a <W25qxx_Init+0x126>
	case 0x13: //	w25q40
		w25qxx.ID = W25Q40;
 80209e4:	4b2a      	ldr	r3, [pc, #168]	; (8020a90 <W25qxx_Init+0x19c>)
 80209e6:	2203      	movs	r2, #3
 80209e8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 80209ea:	4b29      	ldr	r3, [pc, #164]	; (8020a90 <W25qxx_Init+0x19c>)
 80209ec:	2208      	movs	r2, #8
 80209ee:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q40\r\n");
#endif
		break;
 80209f0:	e013      	b.n	8020a1a <W25qxx_Init+0x126>
	case 0x12: //	w25q20
		w25qxx.ID = W25Q20;
 80209f2:	4b27      	ldr	r3, [pc, #156]	; (8020a90 <W25qxx_Init+0x19c>)
 80209f4:	2202      	movs	r2, #2
 80209f6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 80209f8:	4b25      	ldr	r3, [pc, #148]	; (8020a90 <W25qxx_Init+0x19c>)
 80209fa:	2204      	movs	r2, #4
 80209fc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q20\r\n");
#endif
		break;
 80209fe:	e00c      	b.n	8020a1a <W25qxx_Init+0x126>
	case 0x11: //	w25q10
		w25qxx.ID = W25Q10;
 8020a00:	4b23      	ldr	r3, [pc, #140]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a02:	2201      	movs	r2, #1
 8020a04:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 8020a06:	4b22      	ldr	r3, [pc, #136]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a08:	2202      	movs	r2, #2
 8020a0a:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Chip: w25q10\r\n");
#endif
		break;
 8020a0c:	e005      	b.n	8020a1a <W25qxx_Init+0x126>
	default:
#if (_W25QXX_DEBUG == 1)
		printf("w25qxx Unknown ID\r\n");
#endif
		w25qxx.Lock = 0;
 8020a0e:	4b20      	ldr	r3, [pc, #128]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a10:	2200      	movs	r2, #0
 8020a12:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 8020a16:	2300      	movs	r3, #0
 8020a18:	e036      	b.n	8020a88 <W25qxx_Init+0x194>
	}
	w25qxx.PageSize = 256;
 8020a1a:	4b1d      	ldr	r3, [pc, #116]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8020a20:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 8020a22:	4b1b      	ldr	r3, [pc, #108]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8020a28:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8020a2a:	4b19      	ldr	r3, [pc, #100]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a2c:	69db      	ldr	r3, [r3, #28]
 8020a2e:	011b      	lsls	r3, r3, #4
 8020a30:	4a17      	ldr	r2, [pc, #92]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a32:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize) / w25qxx.PageSize;
 8020a34:	4b16      	ldr	r3, [pc, #88]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a36:	695b      	ldr	r3, [r3, #20]
 8020a38:	4a15      	ldr	r2, [pc, #84]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a3a:	6912      	ldr	r2, [r2, #16]
 8020a3c:	fb02 f303 	mul.w	r3, r2, r3
 8020a40:	4a13      	ldr	r2, [pc, #76]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a42:	8952      	ldrh	r2, [r2, #10]
 8020a44:	fbb3 f3f2 	udiv	r3, r3, r2
 8020a48:	4a11      	ldr	r2, [pc, #68]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a4a:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8020a4c:	4b10      	ldr	r3, [pc, #64]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a4e:	691b      	ldr	r3, [r3, #16]
 8020a50:	011b      	lsls	r3, r3, #4
 8020a52:	4a0f      	ldr	r2, [pc, #60]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a54:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 8020a56:	4b0e      	ldr	r3, [pc, #56]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a58:	695b      	ldr	r3, [r3, #20]
 8020a5a:	4a0d      	ldr	r2, [pc, #52]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a5c:	6912      	ldr	r2, [r2, #16]
 8020a5e:	fb02 f303 	mul.w	r3, r2, r3
 8020a62:	0a9b      	lsrs	r3, r3, #10
 8020a64:	4a0a      	ldr	r2, [pc, #40]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a66:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8020a68:	f7ff fe88 	bl	802077c <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8020a6c:	2001      	movs	r0, #1
 8020a6e:	f7ff fed1 	bl	8020814 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 8020a72:	2002      	movs	r0, #2
 8020a74:	f7ff fece 	bl	8020814 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8020a78:	2003      	movs	r0, #3
 8020a7a:	f7ff fecb 	bl	8020814 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n", w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n", w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n", w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
#endif
	w25qxx.Lock = 0;
 8020a7e:	4b04      	ldr	r3, [pc, #16]	; (8020a90 <W25qxx_Init+0x19c>)
 8020a80:	2200      	movs	r2, #0
 8020a82:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 8020a86:	2301      	movs	r3, #1
}
 8020a88:	4618      	mov	r0, r3
 8020a8a:	3708      	adds	r7, #8
 8020a8c:	46bd      	mov	sp, r7
 8020a8e:	bd80      	pop	{r7, pc}
 8020a90:	20012af8 	.word	0x20012af8
 8020a94:	40021000 	.word	0x40021000

08020a98 <W25qxx_EraseSector>:
#endif
	W25qxx_Delay(10);
	w25qxx.Lock = 0;
}
//###################################################################################################################
uint8_t W25qxx_EraseSector(uint32_t SectorAddr) {
 8020a98:	b580      	push	{r7, lr}
 8020a9a:	b082      	sub	sp, #8
 8020a9c:	af00      	add	r7, sp, #0
 8020a9e:	6078      	str	r0, [r7, #4]
	while (w25qxx.Lock == 1)
 8020aa0:	e002      	b.n	8020aa8 <W25qxx_EraseSector+0x10>
		W25qxx_Delay(1);
 8020aa2:	2001      	movs	r0, #1
 8020aa4:	f7e1 fa80 	bl	8001fa8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8020aa8:	4b26      	ldr	r3, [pc, #152]	; (8020b44 <W25qxx_EraseSector+0xac>)
 8020aaa:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8020aae:	2b01      	cmp	r3, #1
 8020ab0:	d0f7      	beq.n	8020aa2 <W25qxx_EraseSector+0xa>
	w25qxx.Lock = 1;
 8020ab2:	4b24      	ldr	r3, [pc, #144]	; (8020b44 <W25qxx_EraseSector+0xac>)
 8020ab4:	2201      	movs	r2, #1
 8020ab6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
#if (_W25QXX_DEBUG == 1)
	uint32_t StartTime = HAL_GetTick();
	printf("w25qxx EraseSector %d Begin...\r\n", SectorAddr);
#endif
	W25qxx_WaitForWriteEnd();
 8020aba:	f7ff fef1 	bl	80208a0 <W25qxx_WaitForWriteEnd>
	SectorAddr = SectorAddr * w25qxx.SectorSize;
 8020abe:	4b21      	ldr	r3, [pc, #132]	; (8020b44 <W25qxx_EraseSector+0xac>)
 8020ac0:	691a      	ldr	r2, [r3, #16]
 8020ac2:	687b      	ldr	r3, [r7, #4]
 8020ac4:	fb02 f303 	mul.w	r3, r2, r3
 8020ac8:	607b      	str	r3, [r7, #4]
	W25qxx_WriteEnable();
 8020aca:	f7ff fe8d 	bl	80207e8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020ace:	2200      	movs	r2, #0
 8020ad0:	2108      	movs	r1, #8
 8020ad2:	481d      	ldr	r0, [pc, #116]	; (8020b48 <W25qxx_EraseSector+0xb0>)
 8020ad4:	f7e2 ff66 	bl	80039a4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256) {
 8020ad8:	4b1a      	ldr	r3, [pc, #104]	; (8020b44 <W25qxx_EraseSector+0xac>)
 8020ada:	781b      	ldrb	r3, [r3, #0]
 8020adc:	2b08      	cmp	r3, #8
 8020ade:	d909      	bls.n	8020af4 <W25qxx_EraseSector+0x5c>
		W25qxx_Spi(0x21);
 8020ae0:	2021      	movs	r0, #33	; 0x21
 8020ae2:	f7ff fdff 	bl	80206e4 <W25qxx_Spi>
		W25qxx_Spi((SectorAddr & 0xFF000000) >> 24);
 8020ae6:	687b      	ldr	r3, [r7, #4]
 8020ae8:	0e1b      	lsrs	r3, r3, #24
 8020aea:	b2db      	uxtb	r3, r3
 8020aec:	4618      	mov	r0, r3
 8020aee:	f7ff fdf9 	bl	80206e4 <W25qxx_Spi>
 8020af2:	e002      	b.n	8020afa <W25qxx_EraseSector+0x62>
	} else {
		W25qxx_Spi(0x20);
 8020af4:	2020      	movs	r0, #32
 8020af6:	f7ff fdf5 	bl	80206e4 <W25qxx_Spi>
	}
	W25qxx_Spi((SectorAddr & 0xFF0000) >> 16);
 8020afa:	687b      	ldr	r3, [r7, #4]
 8020afc:	0c1b      	lsrs	r3, r3, #16
 8020afe:	b2db      	uxtb	r3, r3
 8020b00:	4618      	mov	r0, r3
 8020b02:	f7ff fdef 	bl	80206e4 <W25qxx_Spi>
	W25qxx_Spi((SectorAddr & 0xFF00) >> 8);
 8020b06:	687b      	ldr	r3, [r7, #4]
 8020b08:	0a1b      	lsrs	r3, r3, #8
 8020b0a:	b2db      	uxtb	r3, r3
 8020b0c:	4618      	mov	r0, r3
 8020b0e:	f7ff fde9 	bl	80206e4 <W25qxx_Spi>
	W25qxx_Spi(SectorAddr & 0xFF);
 8020b12:	687b      	ldr	r3, [r7, #4]
 8020b14:	b2db      	uxtb	r3, r3
 8020b16:	4618      	mov	r0, r3
 8020b18:	f7ff fde4 	bl	80206e4 <W25qxx_Spi>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020b1c:	2201      	movs	r2, #1
 8020b1e:	2108      	movs	r1, #8
 8020b20:	4809      	ldr	r0, [pc, #36]	; (8020b48 <W25qxx_EraseSector+0xb0>)
 8020b22:	f7e2 ff3f 	bl	80039a4 <HAL_GPIO_WritePin>

	W25qxx_WaitForWriteEnd();
 8020b26:	f7ff febb 	bl	80208a0 <W25qxx_WaitForWriteEnd>

#if (_W25QXX_DEBUG == 1)
	printf("w25qxx EraseSector done after %d ms\r\n", HAL_GetTick() - StartTime);
#endif
	W25qxx_Delay(1);
 8020b2a:	2001      	movs	r0, #1
 8020b2c:	f7e1 fa3c 	bl	8001fa8 <HAL_Delay>
	w25qxx.Lock = 0;
 8020b30:	4b04      	ldr	r3, [pc, #16]	; (8020b44 <W25qxx_EraseSector+0xac>)
 8020b32:	2200      	movs	r2, #0
 8020b34:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

}
 8020b38:	bf00      	nop
 8020b3a:	4618      	mov	r0, r3
 8020b3c:	3708      	adds	r7, #8
 8020b3e:	46bd      	mov	sp, r7
 8020b40:	bd80      	pop	{r7, pc}
 8020b42:	bf00      	nop
 8020b44:	20012af8 	.word	0x20012af8
 8020b48:	40021000 	.word	0x40021000

08020b4c <W25qxx_SectorToPage>:
{
	return ((SectorAddress * w25qxx.SectorSize) / w25qxx.BlockSize);
}
//###################################################################################################################
uint32_t W25qxx_SectorToPage(uint32_t SectorAddress)
{
 8020b4c:	b480      	push	{r7}
 8020b4e:	b083      	sub	sp, #12
 8020b50:	af00      	add	r7, sp, #0
 8020b52:	6078      	str	r0, [r7, #4]
	return (SectorAddress * w25qxx.SectorSize) / w25qxx.PageSize;
 8020b54:	4b07      	ldr	r3, [pc, #28]	; (8020b74 <W25qxx_SectorToPage+0x28>)
 8020b56:	691b      	ldr	r3, [r3, #16]
 8020b58:	687a      	ldr	r2, [r7, #4]
 8020b5a:	fb02 f303 	mul.w	r3, r2, r3
 8020b5e:	4a05      	ldr	r2, [pc, #20]	; (8020b74 <W25qxx_SectorToPage+0x28>)
 8020b60:	8952      	ldrh	r2, [r2, #10]
 8020b62:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8020b66:	4618      	mov	r0, r3
 8020b68:	370c      	adds	r7, #12
 8020b6a:	46bd      	mov	sp, r7
 8020b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b70:	4770      	bx	lr
 8020b72:	bf00      	nop
 8020b74:	20012af8 	.word	0x20012af8

08020b78 <W25qxx_WritePage>:
#endif
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_WritePage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_PageSize)
{
 8020b78:	b580      	push	{r7, lr}
 8020b7a:	b084      	sub	sp, #16
 8020b7c:	af00      	add	r7, sp, #0
 8020b7e:	60f8      	str	r0, [r7, #12]
 8020b80:	60b9      	str	r1, [r7, #8]
 8020b82:	607a      	str	r2, [r7, #4]
 8020b84:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8020b86:	e002      	b.n	8020b8e <W25qxx_WritePage+0x16>
		W25qxx_Delay(1);
 8020b88:	2001      	movs	r0, #1
 8020b8a:	f7e1 fa0d 	bl	8001fa8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8020b8e:	4b39      	ldr	r3, [pc, #228]	; (8020c74 <W25qxx_WritePage+0xfc>)
 8020b90:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8020b94:	2b01      	cmp	r3, #1
 8020b96:	d0f7      	beq.n	8020b88 <W25qxx_WritePage+0x10>
	w25qxx.Lock = 1;
 8020b98:	4b36      	ldr	r3, [pc, #216]	; (8020c74 <W25qxx_WritePage+0xfc>)
 8020b9a:	2201      	movs	r2, #1
 8020b9c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if (((NumByteToWrite_up_to_PageSize + OffsetInByte) > w25qxx.PageSize) || (NumByteToWrite_up_to_PageSize == 0))
 8020ba0:	683a      	ldr	r2, [r7, #0]
 8020ba2:	687b      	ldr	r3, [r7, #4]
 8020ba4:	4413      	add	r3, r2
 8020ba6:	4a33      	ldr	r2, [pc, #204]	; (8020c74 <W25qxx_WritePage+0xfc>)
 8020ba8:	8952      	ldrh	r2, [r2, #10]
 8020baa:	4293      	cmp	r3, r2
 8020bac:	d802      	bhi.n	8020bb4 <W25qxx_WritePage+0x3c>
 8020bae:	683b      	ldr	r3, [r7, #0]
 8020bb0:	2b00      	cmp	r3, #0
 8020bb2:	d105      	bne.n	8020bc0 <W25qxx_WritePage+0x48>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8020bb4:	4b2f      	ldr	r3, [pc, #188]	; (8020c74 <W25qxx_WritePage+0xfc>)
 8020bb6:	895b      	ldrh	r3, [r3, #10]
 8020bb8:	461a      	mov	r2, r3
 8020bba:	687b      	ldr	r3, [r7, #4]
 8020bbc:	1ad3      	subs	r3, r2, r3
 8020bbe:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToWrite_up_to_PageSize) > w25qxx.PageSize)
 8020bc0:	687a      	ldr	r2, [r7, #4]
 8020bc2:	683b      	ldr	r3, [r7, #0]
 8020bc4:	4413      	add	r3, r2
 8020bc6:	4a2b      	ldr	r2, [pc, #172]	; (8020c74 <W25qxx_WritePage+0xfc>)
 8020bc8:	8952      	ldrh	r2, [r2, #10]
 8020bca:	4293      	cmp	r3, r2
 8020bcc:	d905      	bls.n	8020bda <W25qxx_WritePage+0x62>
		NumByteToWrite_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8020bce:	4b29      	ldr	r3, [pc, #164]	; (8020c74 <W25qxx_WritePage+0xfc>)
 8020bd0:	895b      	ldrh	r3, [r3, #10]
 8020bd2:	461a      	mov	r2, r3
 8020bd4:	687b      	ldr	r3, [r7, #4]
 8020bd6:	1ad3      	subs	r3, r2, r3
 8020bd8:	603b      	str	r3, [r7, #0]

	printf("w25qxx WritePage:%d, Offset:%d ,Writes %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToWrite_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();
#endif

	W25qxx_WaitForWriteEnd();
 8020bda:	f7ff fe61 	bl	80208a0 <W25qxx_WaitForWriteEnd>
	W25qxx_WriteEnable();
 8020bde:	f7ff fe03 	bl	80207e8 <W25qxx_WriteEnable>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020be2:	2200      	movs	r2, #0
 8020be4:	2108      	movs	r1, #8
 8020be6:	4824      	ldr	r0, [pc, #144]	; (8020c78 <W25qxx_WritePage+0x100>)
 8020be8:	f7e2 fedc 	bl	80039a4 <HAL_GPIO_WritePin>
	Page_Address = (Page_Address * w25qxx.PageSize) + OffsetInByte;
 8020bec:	4b21      	ldr	r3, [pc, #132]	; (8020c74 <W25qxx_WritePage+0xfc>)
 8020bee:	895b      	ldrh	r3, [r3, #10]
 8020bf0:	461a      	mov	r2, r3
 8020bf2:	68bb      	ldr	r3, [r7, #8]
 8020bf4:	fb02 f303 	mul.w	r3, r2, r3
 8020bf8:	687a      	ldr	r2, [r7, #4]
 8020bfa:	4413      	add	r3, r2
 8020bfc:	60bb      	str	r3, [r7, #8]
	if (w25qxx.ID >= W25Q256)
 8020bfe:	4b1d      	ldr	r3, [pc, #116]	; (8020c74 <W25qxx_WritePage+0xfc>)
 8020c00:	781b      	ldrb	r3, [r3, #0]
 8020c02:	2b08      	cmp	r3, #8
 8020c04:	d909      	bls.n	8020c1a <W25qxx_WritePage+0xa2>
	{
		W25qxx_Spi(0x12);
 8020c06:	2012      	movs	r0, #18
 8020c08:	f7ff fd6c 	bl	80206e4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8020c0c:	68bb      	ldr	r3, [r7, #8]
 8020c0e:	0e1b      	lsrs	r3, r3, #24
 8020c10:	b2db      	uxtb	r3, r3
 8020c12:	4618      	mov	r0, r3
 8020c14:	f7ff fd66 	bl	80206e4 <W25qxx_Spi>
 8020c18:	e002      	b.n	8020c20 <W25qxx_WritePage+0xa8>
	}
	else
	{
		W25qxx_Spi(0x02);
 8020c1a:	2002      	movs	r0, #2
 8020c1c:	f7ff fd62 	bl	80206e4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8020c20:	68bb      	ldr	r3, [r7, #8]
 8020c22:	0c1b      	lsrs	r3, r3, #16
 8020c24:	b2db      	uxtb	r3, r3
 8020c26:	4618      	mov	r0, r3
 8020c28:	f7ff fd5c 	bl	80206e4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8020c2c:	68bb      	ldr	r3, [r7, #8]
 8020c2e:	0a1b      	lsrs	r3, r3, #8
 8020c30:	b2db      	uxtb	r3, r3
 8020c32:	4618      	mov	r0, r3
 8020c34:	f7ff fd56 	bl	80206e4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8020c38:	68bb      	ldr	r3, [r7, #8]
 8020c3a:	b2db      	uxtb	r3, r3
 8020c3c:	4618      	mov	r0, r3
 8020c3e:	f7ff fd51 	bl	80206e4 <W25qxx_Spi>
	HAL_SPI_Transmit(&_W25QXX_SPI, pBuffer, NumByteToWrite_up_to_PageSize, 100);
 8020c42:	683b      	ldr	r3, [r7, #0]
 8020c44:	b29a      	uxth	r2, r3
 8020c46:	2364      	movs	r3, #100	; 0x64
 8020c48:	68f9      	ldr	r1, [r7, #12]
 8020c4a:	480c      	ldr	r0, [pc, #48]	; (8020c7c <W25qxx_WritePage+0x104>)
 8020c4c:	f7e4 f885 	bl	8004d5a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020c50:	2201      	movs	r2, #1
 8020c52:	2108      	movs	r1, #8
 8020c54:	4808      	ldr	r0, [pc, #32]	; (8020c78 <W25qxx_WritePage+0x100>)
 8020c56:	f7e2 fea5 	bl	80039a4 <HAL_GPIO_WritePin>
	W25qxx_WaitForWriteEnd();
 8020c5a:	f7ff fe21 	bl	80208a0 <W25qxx_WaitForWriteEnd>
	}
	printf("\r\n");
	printf("w25qxx WritePage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8020c5e:	2001      	movs	r0, #1
 8020c60:	f7e1 f9a2 	bl	8001fa8 <HAL_Delay>
	w25qxx.Lock = 0;
 8020c64:	4b03      	ldr	r3, [pc, #12]	; (8020c74 <W25qxx_WritePage+0xfc>)
 8020c66:	2200      	movs	r2, #0
 8020c68:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8020c6c:	bf00      	nop
 8020c6e:	3710      	adds	r7, #16
 8020c70:	46bd      	mov	sp, r7
 8020c72:	bd80      	pop	{r7, pc}
 8020c74:	20012af8 	.word	0x20012af8
 8020c78:	40021000 	.word	0x40021000
 8020c7c:	20000a1c 	.word	0x20000a1c

08020c80 <W25qxx_WriteSector>:
//###################################################################################################################
uint8_t W25qxx_WriteSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToWrite_up_to_SectorSize)
{
 8020c80:	b580      	push	{r7, lr}
 8020c82:	b088      	sub	sp, #32
 8020c84:	af00      	add	r7, sp, #0
 8020c86:	60f8      	str	r0, [r7, #12]
 8020c88:	60b9      	str	r1, [r7, #8]
 8020c8a:	607a      	str	r2, [r7, #4]
 8020c8c:	603b      	str	r3, [r7, #0]
	if ((NumByteToWrite_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToWrite_up_to_SectorSize == 0))
 8020c8e:	4b2d      	ldr	r3, [pc, #180]	; (8020d44 <W25qxx_WriteSector+0xc4>)
 8020c90:	691b      	ldr	r3, [r3, #16]
 8020c92:	683a      	ldr	r2, [r7, #0]
 8020c94:	429a      	cmp	r2, r3
 8020c96:	d802      	bhi.n	8020c9e <W25qxx_WriteSector+0x1e>
 8020c98:	683b      	ldr	r3, [r7, #0]
 8020c9a:	2b00      	cmp	r3, #0
 8020c9c:	d102      	bne.n	8020ca4 <W25qxx_WriteSector+0x24>
		NumByteToWrite_up_to_SectorSize = w25qxx.SectorSize;
 8020c9e:	4b29      	ldr	r3, [pc, #164]	; (8020d44 <W25qxx_WriteSector+0xc4>)
 8020ca0:	691b      	ldr	r3, [r3, #16]
 8020ca2:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx WriteSector:%d, Offset:%d ,Write %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToWrite_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8020ca4:	4b27      	ldr	r3, [pc, #156]	; (8020d44 <W25qxx_WriteSector+0xc4>)
 8020ca6:	691b      	ldr	r3, [r3, #16]
 8020ca8:	687a      	ldr	r2, [r7, #4]
 8020caa:	429a      	cmp	r2, r3
 8020cac:	d301      	bcc.n	8020cb2 <W25qxx_WriteSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx WriteSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 8020cae:	2300      	movs	r3, #0
 8020cb0:	e043      	b.n	8020d3a <W25qxx_WriteSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToWrite;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToWrite_up_to_SectorSize) > w25qxx.SectorSize)
 8020cb2:	687a      	ldr	r2, [r7, #4]
 8020cb4:	683b      	ldr	r3, [r7, #0]
 8020cb6:	441a      	add	r2, r3
 8020cb8:	4b22      	ldr	r3, [pc, #136]	; (8020d44 <W25qxx_WriteSector+0xc4>)
 8020cba:	691b      	ldr	r3, [r3, #16]
 8020cbc:	429a      	cmp	r2, r3
 8020cbe:	d905      	bls.n	8020ccc <W25qxx_WriteSector+0x4c>
		BytesToWrite = w25qxx.SectorSize - OffsetInByte;
 8020cc0:	4b20      	ldr	r3, [pc, #128]	; (8020d44 <W25qxx_WriteSector+0xc4>)
 8020cc2:	691a      	ldr	r2, [r3, #16]
 8020cc4:	687b      	ldr	r3, [r7, #4]
 8020cc6:	1ad3      	subs	r3, r2, r3
 8020cc8:	61bb      	str	r3, [r7, #24]
 8020cca:	e001      	b.n	8020cd0 <W25qxx_WriteSector+0x50>
	else
		BytesToWrite = NumByteToWrite_up_to_SectorSize;
 8020ccc:	683b      	ldr	r3, [r7, #0]
 8020cce:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8020cd0:	68b8      	ldr	r0, [r7, #8]
 8020cd2:	f7ff ff3b 	bl	8020b4c <W25qxx_SectorToPage>
 8020cd6:	4602      	mov	r2, r0
 8020cd8:	4b1a      	ldr	r3, [pc, #104]	; (8020d44 <W25qxx_WriteSector+0xc4>)
 8020cda:	895b      	ldrh	r3, [r3, #10]
 8020cdc:	4619      	mov	r1, r3
 8020cde:	687b      	ldr	r3, [r7, #4]
 8020ce0:	fbb3 f3f1 	udiv	r3, r3, r1
 8020ce4:	4413      	add	r3, r2
 8020ce6:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8020ce8:	4b16      	ldr	r3, [pc, #88]	; (8020d44 <W25qxx_WriteSector+0xc4>)
 8020cea:	895b      	ldrh	r3, [r3, #10]
 8020cec:	461a      	mov	r2, r3
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8020cf4:	fb01 f202 	mul.w	r2, r1, r2
 8020cf8:	1a9b      	subs	r3, r3, r2
 8020cfa:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_WritePage(pBuffer, StartPage, LocalOffset, BytesToWrite);
 8020cfc:	69bb      	ldr	r3, [r7, #24]
 8020cfe:	697a      	ldr	r2, [r7, #20]
 8020d00:	69f9      	ldr	r1, [r7, #28]
 8020d02:	68f8      	ldr	r0, [r7, #12]
 8020d04:	f7ff ff38 	bl	8020b78 <W25qxx_WritePage>
		StartPage++;
 8020d08:	69fb      	ldr	r3, [r7, #28]
 8020d0a:	3301      	adds	r3, #1
 8020d0c:	61fb      	str	r3, [r7, #28]
		BytesToWrite -= w25qxx.PageSize - LocalOffset;
 8020d0e:	4b0d      	ldr	r3, [pc, #52]	; (8020d44 <W25qxx_WriteSector+0xc4>)
 8020d10:	895b      	ldrh	r3, [r3, #10]
 8020d12:	461a      	mov	r2, r3
 8020d14:	697b      	ldr	r3, [r7, #20]
 8020d16:	1a9a      	subs	r2, r3, r2
 8020d18:	69bb      	ldr	r3, [r7, #24]
 8020d1a:	4413      	add	r3, r2
 8020d1c:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8020d1e:	4b09      	ldr	r3, [pc, #36]	; (8020d44 <W25qxx_WriteSector+0xc4>)
 8020d20:	895b      	ldrh	r3, [r3, #10]
 8020d22:	461a      	mov	r2, r3
 8020d24:	697b      	ldr	r3, [r7, #20]
 8020d26:	1ad3      	subs	r3, r2, r3
 8020d28:	68fa      	ldr	r2, [r7, #12]
 8020d2a:	4413      	add	r3, r2
 8020d2c:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8020d2e:	2300      	movs	r3, #0
 8020d30:	617b      	str	r3, [r7, #20]
	} while (BytesToWrite > 0);
 8020d32:	69bb      	ldr	r3, [r7, #24]
 8020d34:	2b00      	cmp	r3, #0
 8020d36:	dce1      	bgt.n	8020cfc <W25qxx_WriteSector+0x7c>
#if (_W25QXX_DEBUG == 1)
	printf("---w25qxx WriteSector Done\r\n");
	W25qxx_Delay(100);
#endif

	return 1;
 8020d38:	2301      	movs	r3, #1

}
 8020d3a:	4618      	mov	r0, r3
 8020d3c:	3720      	adds	r7, #32
 8020d3e:	46bd      	mov	sp, r7
 8020d40:	bd80      	pop	{r7, pc}
 8020d42:	bf00      	nop
 8020d44:	20012af8 	.word	0x20012af8

08020d48 <W25qxx_ReadPage>:
	W25qxx_Delay(1);
	w25qxx.Lock = 0;
}
//###################################################################################################################
void W25qxx_ReadPage(uint8_t *pBuffer, uint32_t Page_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_PageSize)
{
 8020d48:	b580      	push	{r7, lr}
 8020d4a:	b084      	sub	sp, #16
 8020d4c:	af00      	add	r7, sp, #0
 8020d4e:	60f8      	str	r0, [r7, #12]
 8020d50:	60b9      	str	r1, [r7, #8]
 8020d52:	607a      	str	r2, [r7, #4]
 8020d54:	603b      	str	r3, [r7, #0]
	while (w25qxx.Lock == 1)
 8020d56:	e002      	b.n	8020d5e <W25qxx_ReadPage+0x16>
		W25qxx_Delay(1);
 8020d58:	2001      	movs	r0, #1
 8020d5a:	f7e1 f925 	bl	8001fa8 <HAL_Delay>
	while (w25qxx.Lock == 1)
 8020d5e:	4b36      	ldr	r3, [pc, #216]	; (8020e38 <W25qxx_ReadPage+0xf0>)
 8020d60:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8020d64:	2b01      	cmp	r3, #1
 8020d66:	d0f7      	beq.n	8020d58 <W25qxx_ReadPage+0x10>
	w25qxx.Lock = 1;
 8020d68:	4b33      	ldr	r3, [pc, #204]	; (8020e38 <W25qxx_ReadPage+0xf0>)
 8020d6a:	2201      	movs	r2, #1
 8020d6c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	if ((NumByteToRead_up_to_PageSize > w25qxx.PageSize) || (NumByteToRead_up_to_PageSize == 0))
 8020d70:	4b31      	ldr	r3, [pc, #196]	; (8020e38 <W25qxx_ReadPage+0xf0>)
 8020d72:	895b      	ldrh	r3, [r3, #10]
 8020d74:	461a      	mov	r2, r3
 8020d76:	683b      	ldr	r3, [r7, #0]
 8020d78:	4293      	cmp	r3, r2
 8020d7a:	d802      	bhi.n	8020d82 <W25qxx_ReadPage+0x3a>
 8020d7c:	683b      	ldr	r3, [r7, #0]
 8020d7e:	2b00      	cmp	r3, #0
 8020d80:	d102      	bne.n	8020d88 <W25qxx_ReadPage+0x40>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize;
 8020d82:	4b2d      	ldr	r3, [pc, #180]	; (8020e38 <W25qxx_ReadPage+0xf0>)
 8020d84:	895b      	ldrh	r3, [r3, #10]
 8020d86:	603b      	str	r3, [r7, #0]
	if ((OffsetInByte + NumByteToRead_up_to_PageSize) > w25qxx.PageSize)
 8020d88:	687a      	ldr	r2, [r7, #4]
 8020d8a:	683b      	ldr	r3, [r7, #0]
 8020d8c:	4413      	add	r3, r2
 8020d8e:	4a2a      	ldr	r2, [pc, #168]	; (8020e38 <W25qxx_ReadPage+0xf0>)
 8020d90:	8952      	ldrh	r2, [r2, #10]
 8020d92:	4293      	cmp	r3, r2
 8020d94:	d905      	bls.n	8020da2 <W25qxx_ReadPage+0x5a>
		NumByteToRead_up_to_PageSize = w25qxx.PageSize - OffsetInByte;
 8020d96:	4b28      	ldr	r3, [pc, #160]	; (8020e38 <W25qxx_ReadPage+0xf0>)
 8020d98:	895b      	ldrh	r3, [r3, #10]
 8020d9a:	461a      	mov	r2, r3
 8020d9c:	687b      	ldr	r3, [r7, #4]
 8020d9e:	1ad3      	subs	r3, r2, r3
 8020da0:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG_1 == 1)
	printf("w25qxx ReadPage:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Page_Address, OffsetInByte, NumByteToRead_up_to_PageSize);
	uint32_t StartTime = HAL_GetTick();

#endif
	Page_Address = Page_Address * w25qxx.PageSize + OffsetInByte;
 8020da2:	4b25      	ldr	r3, [pc, #148]	; (8020e38 <W25qxx_ReadPage+0xf0>)
 8020da4:	895b      	ldrh	r3, [r3, #10]
 8020da6:	461a      	mov	r2, r3
 8020da8:	68bb      	ldr	r3, [r7, #8]
 8020daa:	fb02 f303 	mul.w	r3, r2, r3
 8020dae:	687a      	ldr	r2, [r7, #4]
 8020db0:	4413      	add	r3, r2
 8020db2:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 8020db4:	2200      	movs	r2, #0
 8020db6:	2108      	movs	r1, #8
 8020db8:	4820      	ldr	r0, [pc, #128]	; (8020e3c <W25qxx_ReadPage+0xf4>)
 8020dba:	f7e2 fdf3 	bl	80039a4 <HAL_GPIO_WritePin>
	if (w25qxx.ID >= W25Q256)
 8020dbe:	4b1e      	ldr	r3, [pc, #120]	; (8020e38 <W25qxx_ReadPage+0xf0>)
 8020dc0:	781b      	ldrb	r3, [r3, #0]
 8020dc2:	2b08      	cmp	r3, #8
 8020dc4:	d909      	bls.n	8020dda <W25qxx_ReadPage+0x92>
	{
		W25qxx_Spi(0x0C);
 8020dc6:	200c      	movs	r0, #12
 8020dc8:	f7ff fc8c 	bl	80206e4 <W25qxx_Spi>
		W25qxx_Spi((Page_Address & 0xFF000000) >> 24);
 8020dcc:	68bb      	ldr	r3, [r7, #8]
 8020dce:	0e1b      	lsrs	r3, r3, #24
 8020dd0:	b2db      	uxtb	r3, r3
 8020dd2:	4618      	mov	r0, r3
 8020dd4:	f7ff fc86 	bl	80206e4 <W25qxx_Spi>
 8020dd8:	e002      	b.n	8020de0 <W25qxx_ReadPage+0x98>
	}
	else
	{
		W25qxx_Spi(0x0B);
 8020dda:	200b      	movs	r0, #11
 8020ddc:	f7ff fc82 	bl	80206e4 <W25qxx_Spi>
	}
	W25qxx_Spi((Page_Address & 0xFF0000) >> 16);
 8020de0:	68bb      	ldr	r3, [r7, #8]
 8020de2:	0c1b      	lsrs	r3, r3, #16
 8020de4:	b2db      	uxtb	r3, r3
 8020de6:	4618      	mov	r0, r3
 8020de8:	f7ff fc7c 	bl	80206e4 <W25qxx_Spi>
	W25qxx_Spi((Page_Address & 0xFF00) >> 8);
 8020dec:	68bb      	ldr	r3, [r7, #8]
 8020dee:	0a1b      	lsrs	r3, r3, #8
 8020df0:	b2db      	uxtb	r3, r3
 8020df2:	4618      	mov	r0, r3
 8020df4:	f7ff fc76 	bl	80206e4 <W25qxx_Spi>
	W25qxx_Spi(Page_Address & 0xFF);
 8020df8:	68bb      	ldr	r3, [r7, #8]
 8020dfa:	b2db      	uxtb	r3, r3
 8020dfc:	4618      	mov	r0, r3
 8020dfe:	f7ff fc71 	bl	80206e4 <W25qxx_Spi>
	W25qxx_Spi(0);
 8020e02:	2000      	movs	r0, #0
 8020e04:	f7ff fc6e 	bl	80206e4 <W25qxx_Spi>
	HAL_SPI_Receive(&_W25QXX_SPI, pBuffer, NumByteToRead_up_to_PageSize, 100);
 8020e08:	683b      	ldr	r3, [r7, #0]
 8020e0a:	b29a      	uxth	r2, r3
 8020e0c:	2364      	movs	r3, #100	; 0x64
 8020e0e:	68f9      	ldr	r1, [r7, #12]
 8020e10:	480b      	ldr	r0, [pc, #44]	; (8020e40 <W25qxx_ReadPage+0xf8>)
 8020e12:	f7e4 f8e5 	bl	8004fe0 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8020e16:	2201      	movs	r2, #1
 8020e18:	2108      	movs	r1, #8
 8020e1a:	4808      	ldr	r0, [pc, #32]	; (8020e3c <W25qxx_ReadPage+0xf4>)
 8020e1c:	f7e2 fdc2 	bl	80039a4 <HAL_GPIO_WritePin>
	}
	printf("\r\n");
	printf("w25qxx ReadPage done after %d ms\r\n", StartTime);
	W25qxx_Delay(100);
#endif
	W25qxx_Delay(1);
 8020e20:	2001      	movs	r0, #1
 8020e22:	f7e1 f8c1 	bl	8001fa8 <HAL_Delay>
	w25qxx.Lock = 0;
 8020e26:	4b04      	ldr	r3, [pc, #16]	; (8020e38 <W25qxx_ReadPage+0xf0>)
 8020e28:	2200      	movs	r2, #0
 8020e2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
}
 8020e2e:	bf00      	nop
 8020e30:	3710      	adds	r7, #16
 8020e32:	46bd      	mov	sp, r7
 8020e34:	bd80      	pop	{r7, pc}
 8020e36:	bf00      	nop
 8020e38:	20012af8 	.word	0x20012af8
 8020e3c:	40021000 	.word	0x40021000
 8020e40:	20000a1c 	.word	0x20000a1c

08020e44 <W25qxx_ReadSector>:
//###################################################################################################################
uint8_t W25qxx_ReadSector(uint8_t *pBuffer, uint32_t Sector_Address, uint32_t OffsetInByte, uint32_t NumByteToRead_up_to_SectorSize)
{
 8020e44:	b580      	push	{r7, lr}
 8020e46:	b088      	sub	sp, #32
 8020e48:	af00      	add	r7, sp, #0
 8020e4a:	60f8      	str	r0, [r7, #12]
 8020e4c:	60b9      	str	r1, [r7, #8]
 8020e4e:	607a      	str	r2, [r7, #4]
 8020e50:	603b      	str	r3, [r7, #0]
	if ((NumByteToRead_up_to_SectorSize > w25qxx.SectorSize) || (NumByteToRead_up_to_SectorSize == 0))
 8020e52:	4b2d      	ldr	r3, [pc, #180]	; (8020f08 <W25qxx_ReadSector+0xc4>)
 8020e54:	691b      	ldr	r3, [r3, #16]
 8020e56:	683a      	ldr	r2, [r7, #0]
 8020e58:	429a      	cmp	r2, r3
 8020e5a:	d802      	bhi.n	8020e62 <W25qxx_ReadSector+0x1e>
 8020e5c:	683b      	ldr	r3, [r7, #0]
 8020e5e:	2b00      	cmp	r3, #0
 8020e60:	d102      	bne.n	8020e68 <W25qxx_ReadSector+0x24>
		NumByteToRead_up_to_SectorSize = w25qxx.SectorSize;
 8020e62:	4b29      	ldr	r3, [pc, #164]	; (8020f08 <W25qxx_ReadSector+0xc4>)
 8020e64:	691b      	ldr	r3, [r3, #16]
 8020e66:	603b      	str	r3, [r7, #0]
#if (_W25QXX_DEBUG == 1)
	printf("+++w25qxx ReadSector:%d, Offset:%d ,Read %d Bytes, begin...\r\n", Sector_Address, OffsetInByte, NumByteToRead_up_to_SectorSize);
	W25qxx_Delay(100);
#endif
	if (OffsetInByte >= w25qxx.SectorSize)
 8020e68:	4b27      	ldr	r3, [pc, #156]	; (8020f08 <W25qxx_ReadSector+0xc4>)
 8020e6a:	691b      	ldr	r3, [r3, #16]
 8020e6c:	687a      	ldr	r2, [r7, #4]
 8020e6e:	429a      	cmp	r2, r3
 8020e70:	d301      	bcc.n	8020e76 <W25qxx_ReadSector+0x32>
	{
#if (_W25QXX_DEBUG == 1)
		printf("---w25qxx ReadSector Faild!\r\n");
		W25qxx_Delay(100);
#endif
		return 0;
 8020e72:	2300      	movs	r3, #0
 8020e74:	e043      	b.n	8020efe <W25qxx_ReadSector+0xba>
	}
	uint32_t StartPage;
	int32_t BytesToRead;
	uint32_t LocalOffset;
	if ((OffsetInByte + NumByteToRead_up_to_SectorSize) > w25qxx.SectorSize)
 8020e76:	687a      	ldr	r2, [r7, #4]
 8020e78:	683b      	ldr	r3, [r7, #0]
 8020e7a:	441a      	add	r2, r3
 8020e7c:	4b22      	ldr	r3, [pc, #136]	; (8020f08 <W25qxx_ReadSector+0xc4>)
 8020e7e:	691b      	ldr	r3, [r3, #16]
 8020e80:	429a      	cmp	r2, r3
 8020e82:	d905      	bls.n	8020e90 <W25qxx_ReadSector+0x4c>
		BytesToRead = w25qxx.SectorSize - OffsetInByte;
 8020e84:	4b20      	ldr	r3, [pc, #128]	; (8020f08 <W25qxx_ReadSector+0xc4>)
 8020e86:	691a      	ldr	r2, [r3, #16]
 8020e88:	687b      	ldr	r3, [r7, #4]
 8020e8a:	1ad3      	subs	r3, r2, r3
 8020e8c:	61bb      	str	r3, [r7, #24]
 8020e8e:	e001      	b.n	8020e94 <W25qxx_ReadSector+0x50>
	else
		BytesToRead = NumByteToRead_up_to_SectorSize;
 8020e90:	683b      	ldr	r3, [r7, #0]
 8020e92:	61bb      	str	r3, [r7, #24]
	StartPage = W25qxx_SectorToPage(Sector_Address) + (OffsetInByte / w25qxx.PageSize);
 8020e94:	68b8      	ldr	r0, [r7, #8]
 8020e96:	f7ff fe59 	bl	8020b4c <W25qxx_SectorToPage>
 8020e9a:	4602      	mov	r2, r0
 8020e9c:	4b1a      	ldr	r3, [pc, #104]	; (8020f08 <W25qxx_ReadSector+0xc4>)
 8020e9e:	895b      	ldrh	r3, [r3, #10]
 8020ea0:	4619      	mov	r1, r3
 8020ea2:	687b      	ldr	r3, [r7, #4]
 8020ea4:	fbb3 f3f1 	udiv	r3, r3, r1
 8020ea8:	4413      	add	r3, r2
 8020eaa:	61fb      	str	r3, [r7, #28]
	LocalOffset = OffsetInByte % w25qxx.PageSize;
 8020eac:	4b16      	ldr	r3, [pc, #88]	; (8020f08 <W25qxx_ReadSector+0xc4>)
 8020eae:	895b      	ldrh	r3, [r3, #10]
 8020eb0:	461a      	mov	r2, r3
 8020eb2:	687b      	ldr	r3, [r7, #4]
 8020eb4:	fbb3 f1f2 	udiv	r1, r3, r2
 8020eb8:	fb01 f202 	mul.w	r2, r1, r2
 8020ebc:	1a9b      	subs	r3, r3, r2
 8020ebe:	617b      	str	r3, [r7, #20]
	do
	{
		W25qxx_ReadPage(pBuffer, StartPage, LocalOffset, BytesToRead);
 8020ec0:	69bb      	ldr	r3, [r7, #24]
 8020ec2:	697a      	ldr	r2, [r7, #20]
 8020ec4:	69f9      	ldr	r1, [r7, #28]
 8020ec6:	68f8      	ldr	r0, [r7, #12]
 8020ec8:	f7ff ff3e 	bl	8020d48 <W25qxx_ReadPage>
		StartPage++;
 8020ecc:	69fb      	ldr	r3, [r7, #28]
 8020ece:	3301      	adds	r3, #1
 8020ed0:	61fb      	str	r3, [r7, #28]
		BytesToRead -= w25qxx.PageSize - LocalOffset;
 8020ed2:	4b0d      	ldr	r3, [pc, #52]	; (8020f08 <W25qxx_ReadSector+0xc4>)
 8020ed4:	895b      	ldrh	r3, [r3, #10]
 8020ed6:	461a      	mov	r2, r3
 8020ed8:	697b      	ldr	r3, [r7, #20]
 8020eda:	1a9a      	subs	r2, r3, r2
 8020edc:	69bb      	ldr	r3, [r7, #24]
 8020ede:	4413      	add	r3, r2
 8020ee0:	61bb      	str	r3, [r7, #24]
		pBuffer += w25qxx.PageSize - LocalOffset;
 8020ee2:	4b09      	ldr	r3, [pc, #36]	; (8020f08 <W25qxx_ReadSector+0xc4>)
 8020ee4:	895b      	ldrh	r3, [r3, #10]
 8020ee6:	461a      	mov	r2, r3
 8020ee8:	697b      	ldr	r3, [r7, #20]
 8020eea:	1ad3      	subs	r3, r2, r3
 8020eec:	68fa      	ldr	r2, [r7, #12]
 8020eee:	4413      	add	r3, r2
 8020ef0:	60fb      	str	r3, [r7, #12]
		LocalOffset = 0;
 8020ef2:	2300      	movs	r3, #0
 8020ef4:	617b      	str	r3, [r7, #20]
	} while (BytesToRead > 0);
 8020ef6:	69bb      	ldr	r3, [r7, #24]
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	dce1      	bgt.n	8020ec0 <W25qxx_ReadSector+0x7c>
	printf("---w25qxx ReadSector Done\r\n");
	W25qxx_Delay(100);
#endif


	return 1;
 8020efc:	2301      	movs	r3, #1
}
 8020efe:	4618      	mov	r0, r3
 8020f00:	3720      	adds	r7, #32
 8020f02:	46bd      	mov	sp, r7
 8020f04:	bd80      	pop	{r7, pc}
 8020f06:	bf00      	nop
 8020f08:	20012af8 	.word	0x20012af8

08020f0c <__assert_func>:
 8020f0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020f0e:	4614      	mov	r4, r2
 8020f10:	461a      	mov	r2, r3
 8020f12:	4b09      	ldr	r3, [pc, #36]	; (8020f38 <__assert_func+0x2c>)
 8020f14:	681b      	ldr	r3, [r3, #0]
 8020f16:	4605      	mov	r5, r0
 8020f18:	68d8      	ldr	r0, [r3, #12]
 8020f1a:	b14c      	cbz	r4, 8020f30 <__assert_func+0x24>
 8020f1c:	4b07      	ldr	r3, [pc, #28]	; (8020f3c <__assert_func+0x30>)
 8020f1e:	9100      	str	r1, [sp, #0]
 8020f20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020f24:	4906      	ldr	r1, [pc, #24]	; (8020f40 <__assert_func+0x34>)
 8020f26:	462b      	mov	r3, r5
 8020f28:	f000 f9ac 	bl	8021284 <fiprintf>
 8020f2c:	f000 fd71 	bl	8021a12 <abort>
 8020f30:	4b04      	ldr	r3, [pc, #16]	; (8020f44 <__assert_func+0x38>)
 8020f32:	461c      	mov	r4, r3
 8020f34:	e7f3      	b.n	8020f1e <__assert_func+0x12>
 8020f36:	bf00      	nop
 8020f38:	20000094 	.word	0x20000094
 8020f3c:	08027680 	.word	0x08027680
 8020f40:	0802768d 	.word	0x0802768d
 8020f44:	080276bb 	.word	0x080276bb

08020f48 <malloc>:
 8020f48:	4b02      	ldr	r3, [pc, #8]	; (8020f54 <malloc+0xc>)
 8020f4a:	4601      	mov	r1, r0
 8020f4c:	6818      	ldr	r0, [r3, #0]
 8020f4e:	f000 b82b 	b.w	8020fa8 <_malloc_r>
 8020f52:	bf00      	nop
 8020f54:	20000094 	.word	0x20000094

08020f58 <free>:
 8020f58:	4b02      	ldr	r3, [pc, #8]	; (8020f64 <free+0xc>)
 8020f5a:	4601      	mov	r1, r0
 8020f5c:	6818      	ldr	r0, [r3, #0]
 8020f5e:	f000 bd5f 	b.w	8021a20 <_free_r>
 8020f62:	bf00      	nop
 8020f64:	20000094 	.word	0x20000094

08020f68 <sbrk_aligned>:
 8020f68:	b570      	push	{r4, r5, r6, lr}
 8020f6a:	4e0e      	ldr	r6, [pc, #56]	; (8020fa4 <sbrk_aligned+0x3c>)
 8020f6c:	460c      	mov	r4, r1
 8020f6e:	6831      	ldr	r1, [r6, #0]
 8020f70:	4605      	mov	r5, r0
 8020f72:	b911      	cbnz	r1, 8020f7a <sbrk_aligned+0x12>
 8020f74:	f000 fcf6 	bl	8021964 <_sbrk_r>
 8020f78:	6030      	str	r0, [r6, #0]
 8020f7a:	4621      	mov	r1, r4
 8020f7c:	4628      	mov	r0, r5
 8020f7e:	f000 fcf1 	bl	8021964 <_sbrk_r>
 8020f82:	1c43      	adds	r3, r0, #1
 8020f84:	d00a      	beq.n	8020f9c <sbrk_aligned+0x34>
 8020f86:	1cc4      	adds	r4, r0, #3
 8020f88:	f024 0403 	bic.w	r4, r4, #3
 8020f8c:	42a0      	cmp	r0, r4
 8020f8e:	d007      	beq.n	8020fa0 <sbrk_aligned+0x38>
 8020f90:	1a21      	subs	r1, r4, r0
 8020f92:	4628      	mov	r0, r5
 8020f94:	f000 fce6 	bl	8021964 <_sbrk_r>
 8020f98:	3001      	adds	r0, #1
 8020f9a:	d101      	bne.n	8020fa0 <sbrk_aligned+0x38>
 8020f9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8020fa0:	4620      	mov	r0, r4
 8020fa2:	bd70      	pop	{r4, r5, r6, pc}
 8020fa4:	20012b24 	.word	0x20012b24

08020fa8 <_malloc_r>:
 8020fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020fac:	1ccd      	adds	r5, r1, #3
 8020fae:	f025 0503 	bic.w	r5, r5, #3
 8020fb2:	3508      	adds	r5, #8
 8020fb4:	2d0c      	cmp	r5, #12
 8020fb6:	bf38      	it	cc
 8020fb8:	250c      	movcc	r5, #12
 8020fba:	2d00      	cmp	r5, #0
 8020fbc:	4607      	mov	r7, r0
 8020fbe:	db01      	blt.n	8020fc4 <_malloc_r+0x1c>
 8020fc0:	42a9      	cmp	r1, r5
 8020fc2:	d905      	bls.n	8020fd0 <_malloc_r+0x28>
 8020fc4:	230c      	movs	r3, #12
 8020fc6:	603b      	str	r3, [r7, #0]
 8020fc8:	2600      	movs	r6, #0
 8020fca:	4630      	mov	r0, r6
 8020fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020fd0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80210a4 <_malloc_r+0xfc>
 8020fd4:	f000 f868 	bl	80210a8 <__malloc_lock>
 8020fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8020fdc:	461c      	mov	r4, r3
 8020fde:	bb5c      	cbnz	r4, 8021038 <_malloc_r+0x90>
 8020fe0:	4629      	mov	r1, r5
 8020fe2:	4638      	mov	r0, r7
 8020fe4:	f7ff ffc0 	bl	8020f68 <sbrk_aligned>
 8020fe8:	1c43      	adds	r3, r0, #1
 8020fea:	4604      	mov	r4, r0
 8020fec:	d155      	bne.n	802109a <_malloc_r+0xf2>
 8020fee:	f8d8 4000 	ldr.w	r4, [r8]
 8020ff2:	4626      	mov	r6, r4
 8020ff4:	2e00      	cmp	r6, #0
 8020ff6:	d145      	bne.n	8021084 <_malloc_r+0xdc>
 8020ff8:	2c00      	cmp	r4, #0
 8020ffa:	d048      	beq.n	802108e <_malloc_r+0xe6>
 8020ffc:	6823      	ldr	r3, [r4, #0]
 8020ffe:	4631      	mov	r1, r6
 8021000:	4638      	mov	r0, r7
 8021002:	eb04 0903 	add.w	r9, r4, r3
 8021006:	f000 fcad 	bl	8021964 <_sbrk_r>
 802100a:	4581      	cmp	r9, r0
 802100c:	d13f      	bne.n	802108e <_malloc_r+0xe6>
 802100e:	6821      	ldr	r1, [r4, #0]
 8021010:	1a6d      	subs	r5, r5, r1
 8021012:	4629      	mov	r1, r5
 8021014:	4638      	mov	r0, r7
 8021016:	f7ff ffa7 	bl	8020f68 <sbrk_aligned>
 802101a:	3001      	adds	r0, #1
 802101c:	d037      	beq.n	802108e <_malloc_r+0xe6>
 802101e:	6823      	ldr	r3, [r4, #0]
 8021020:	442b      	add	r3, r5
 8021022:	6023      	str	r3, [r4, #0]
 8021024:	f8d8 3000 	ldr.w	r3, [r8]
 8021028:	2b00      	cmp	r3, #0
 802102a:	d038      	beq.n	802109e <_malloc_r+0xf6>
 802102c:	685a      	ldr	r2, [r3, #4]
 802102e:	42a2      	cmp	r2, r4
 8021030:	d12b      	bne.n	802108a <_malloc_r+0xe2>
 8021032:	2200      	movs	r2, #0
 8021034:	605a      	str	r2, [r3, #4]
 8021036:	e00f      	b.n	8021058 <_malloc_r+0xb0>
 8021038:	6822      	ldr	r2, [r4, #0]
 802103a:	1b52      	subs	r2, r2, r5
 802103c:	d41f      	bmi.n	802107e <_malloc_r+0xd6>
 802103e:	2a0b      	cmp	r2, #11
 8021040:	d917      	bls.n	8021072 <_malloc_r+0xca>
 8021042:	1961      	adds	r1, r4, r5
 8021044:	42a3      	cmp	r3, r4
 8021046:	6025      	str	r5, [r4, #0]
 8021048:	bf18      	it	ne
 802104a:	6059      	strne	r1, [r3, #4]
 802104c:	6863      	ldr	r3, [r4, #4]
 802104e:	bf08      	it	eq
 8021050:	f8c8 1000 	streq.w	r1, [r8]
 8021054:	5162      	str	r2, [r4, r5]
 8021056:	604b      	str	r3, [r1, #4]
 8021058:	4638      	mov	r0, r7
 802105a:	f104 060b 	add.w	r6, r4, #11
 802105e:	f000 f829 	bl	80210b4 <__malloc_unlock>
 8021062:	f026 0607 	bic.w	r6, r6, #7
 8021066:	1d23      	adds	r3, r4, #4
 8021068:	1af2      	subs	r2, r6, r3
 802106a:	d0ae      	beq.n	8020fca <_malloc_r+0x22>
 802106c:	1b9b      	subs	r3, r3, r6
 802106e:	50a3      	str	r3, [r4, r2]
 8021070:	e7ab      	b.n	8020fca <_malloc_r+0x22>
 8021072:	42a3      	cmp	r3, r4
 8021074:	6862      	ldr	r2, [r4, #4]
 8021076:	d1dd      	bne.n	8021034 <_malloc_r+0x8c>
 8021078:	f8c8 2000 	str.w	r2, [r8]
 802107c:	e7ec      	b.n	8021058 <_malloc_r+0xb0>
 802107e:	4623      	mov	r3, r4
 8021080:	6864      	ldr	r4, [r4, #4]
 8021082:	e7ac      	b.n	8020fde <_malloc_r+0x36>
 8021084:	4634      	mov	r4, r6
 8021086:	6876      	ldr	r6, [r6, #4]
 8021088:	e7b4      	b.n	8020ff4 <_malloc_r+0x4c>
 802108a:	4613      	mov	r3, r2
 802108c:	e7cc      	b.n	8021028 <_malloc_r+0x80>
 802108e:	230c      	movs	r3, #12
 8021090:	603b      	str	r3, [r7, #0]
 8021092:	4638      	mov	r0, r7
 8021094:	f000 f80e 	bl	80210b4 <__malloc_unlock>
 8021098:	e797      	b.n	8020fca <_malloc_r+0x22>
 802109a:	6025      	str	r5, [r4, #0]
 802109c:	e7dc      	b.n	8021058 <_malloc_r+0xb0>
 802109e:	605b      	str	r3, [r3, #4]
 80210a0:	deff      	udf	#255	; 0xff
 80210a2:	bf00      	nop
 80210a4:	20012b20 	.word	0x20012b20

080210a8 <__malloc_lock>:
 80210a8:	4801      	ldr	r0, [pc, #4]	; (80210b0 <__malloc_lock+0x8>)
 80210aa:	f000 bca2 	b.w	80219f2 <__retarget_lock_acquire_recursive>
 80210ae:	bf00      	nop
 80210b0:	20012c68 	.word	0x20012c68

080210b4 <__malloc_unlock>:
 80210b4:	4801      	ldr	r0, [pc, #4]	; (80210bc <__malloc_unlock+0x8>)
 80210b6:	f000 bc9d 	b.w	80219f4 <__retarget_lock_release_recursive>
 80210ba:	bf00      	nop
 80210bc:	20012c68 	.word	0x20012c68

080210c0 <rand>:
 80210c0:	4b16      	ldr	r3, [pc, #88]	; (802111c <rand+0x5c>)
 80210c2:	b510      	push	{r4, lr}
 80210c4:	681c      	ldr	r4, [r3, #0]
 80210c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80210c8:	b9b3      	cbnz	r3, 80210f8 <rand+0x38>
 80210ca:	2018      	movs	r0, #24
 80210cc:	f7ff ff3c 	bl	8020f48 <malloc>
 80210d0:	4602      	mov	r2, r0
 80210d2:	6320      	str	r0, [r4, #48]	; 0x30
 80210d4:	b920      	cbnz	r0, 80210e0 <rand+0x20>
 80210d6:	4b12      	ldr	r3, [pc, #72]	; (8021120 <rand+0x60>)
 80210d8:	4812      	ldr	r0, [pc, #72]	; (8021124 <rand+0x64>)
 80210da:	2152      	movs	r1, #82	; 0x52
 80210dc:	f7ff ff16 	bl	8020f0c <__assert_func>
 80210e0:	4911      	ldr	r1, [pc, #68]	; (8021128 <rand+0x68>)
 80210e2:	4b12      	ldr	r3, [pc, #72]	; (802112c <rand+0x6c>)
 80210e4:	e9c0 1300 	strd	r1, r3, [r0]
 80210e8:	4b11      	ldr	r3, [pc, #68]	; (8021130 <rand+0x70>)
 80210ea:	6083      	str	r3, [r0, #8]
 80210ec:	230b      	movs	r3, #11
 80210ee:	8183      	strh	r3, [r0, #12]
 80210f0:	2100      	movs	r1, #0
 80210f2:	2001      	movs	r0, #1
 80210f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80210f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80210fa:	480e      	ldr	r0, [pc, #56]	; (8021134 <rand+0x74>)
 80210fc:	690b      	ldr	r3, [r1, #16]
 80210fe:	694c      	ldr	r4, [r1, #20]
 8021100:	4a0d      	ldr	r2, [pc, #52]	; (8021138 <rand+0x78>)
 8021102:	4358      	muls	r0, r3
 8021104:	fb02 0004 	mla	r0, r2, r4, r0
 8021108:	fba3 3202 	umull	r3, r2, r3, r2
 802110c:	3301      	adds	r3, #1
 802110e:	eb40 0002 	adc.w	r0, r0, r2
 8021112:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021116:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802111a:	bd10      	pop	{r4, pc}
 802111c:	20000094 	.word	0x20000094
 8021120:	080276bc 	.word	0x080276bc
 8021124:	080276d3 	.word	0x080276d3
 8021128:	abcd330e 	.word	0xabcd330e
 802112c:	e66d1234 	.word	0xe66d1234
 8021130:	0005deec 	.word	0x0005deec
 8021134:	5851f42d 	.word	0x5851f42d
 8021138:	4c957f2d 	.word	0x4c957f2d

0802113c <std>:
 802113c:	2300      	movs	r3, #0
 802113e:	b510      	push	{r4, lr}
 8021140:	4604      	mov	r4, r0
 8021142:	e9c0 3300 	strd	r3, r3, [r0]
 8021146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802114a:	6083      	str	r3, [r0, #8]
 802114c:	8181      	strh	r1, [r0, #12]
 802114e:	6643      	str	r3, [r0, #100]	; 0x64
 8021150:	81c2      	strh	r2, [r0, #14]
 8021152:	6183      	str	r3, [r0, #24]
 8021154:	4619      	mov	r1, r3
 8021156:	2208      	movs	r2, #8
 8021158:	305c      	adds	r0, #92	; 0x5c
 802115a:	f000 fb43 	bl	80217e4 <memset>
 802115e:	4b0d      	ldr	r3, [pc, #52]	; (8021194 <std+0x58>)
 8021160:	6263      	str	r3, [r4, #36]	; 0x24
 8021162:	4b0d      	ldr	r3, [pc, #52]	; (8021198 <std+0x5c>)
 8021164:	62a3      	str	r3, [r4, #40]	; 0x28
 8021166:	4b0d      	ldr	r3, [pc, #52]	; (802119c <std+0x60>)
 8021168:	62e3      	str	r3, [r4, #44]	; 0x2c
 802116a:	4b0d      	ldr	r3, [pc, #52]	; (80211a0 <std+0x64>)
 802116c:	6323      	str	r3, [r4, #48]	; 0x30
 802116e:	4b0d      	ldr	r3, [pc, #52]	; (80211a4 <std+0x68>)
 8021170:	6224      	str	r4, [r4, #32]
 8021172:	429c      	cmp	r4, r3
 8021174:	d006      	beq.n	8021184 <std+0x48>
 8021176:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802117a:	4294      	cmp	r4, r2
 802117c:	d002      	beq.n	8021184 <std+0x48>
 802117e:	33d0      	adds	r3, #208	; 0xd0
 8021180:	429c      	cmp	r4, r3
 8021182:	d105      	bne.n	8021190 <std+0x54>
 8021184:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802118c:	f000 bc30 	b.w	80219f0 <__retarget_lock_init_recursive>
 8021190:	bd10      	pop	{r4, pc}
 8021192:	bf00      	nop
 8021194:	080215e1 	.word	0x080215e1
 8021198:	08021603 	.word	0x08021603
 802119c:	0802163b 	.word	0x0802163b
 80211a0:	0802165f 	.word	0x0802165f
 80211a4:	20012b28 	.word	0x20012b28

080211a8 <stdio_exit_handler>:
 80211a8:	4a02      	ldr	r2, [pc, #8]	; (80211b4 <stdio_exit_handler+0xc>)
 80211aa:	4903      	ldr	r1, [pc, #12]	; (80211b8 <stdio_exit_handler+0x10>)
 80211ac:	4803      	ldr	r0, [pc, #12]	; (80211bc <stdio_exit_handler+0x14>)
 80211ae:	f000 b8e5 	b.w	802137c <_fwalk_sglue>
 80211b2:	bf00      	nop
 80211b4:	2000003c 	.word	0x2000003c
 80211b8:	0802241d 	.word	0x0802241d
 80211bc:	20000048 	.word	0x20000048

080211c0 <cleanup_stdio>:
 80211c0:	6841      	ldr	r1, [r0, #4]
 80211c2:	4b0c      	ldr	r3, [pc, #48]	; (80211f4 <cleanup_stdio+0x34>)
 80211c4:	4299      	cmp	r1, r3
 80211c6:	b510      	push	{r4, lr}
 80211c8:	4604      	mov	r4, r0
 80211ca:	d001      	beq.n	80211d0 <cleanup_stdio+0x10>
 80211cc:	f001 f926 	bl	802241c <_fflush_r>
 80211d0:	68a1      	ldr	r1, [r4, #8]
 80211d2:	4b09      	ldr	r3, [pc, #36]	; (80211f8 <cleanup_stdio+0x38>)
 80211d4:	4299      	cmp	r1, r3
 80211d6:	d002      	beq.n	80211de <cleanup_stdio+0x1e>
 80211d8:	4620      	mov	r0, r4
 80211da:	f001 f91f 	bl	802241c <_fflush_r>
 80211de:	68e1      	ldr	r1, [r4, #12]
 80211e0:	4b06      	ldr	r3, [pc, #24]	; (80211fc <cleanup_stdio+0x3c>)
 80211e2:	4299      	cmp	r1, r3
 80211e4:	d004      	beq.n	80211f0 <cleanup_stdio+0x30>
 80211e6:	4620      	mov	r0, r4
 80211e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80211ec:	f001 b916 	b.w	802241c <_fflush_r>
 80211f0:	bd10      	pop	{r4, pc}
 80211f2:	bf00      	nop
 80211f4:	20012b28 	.word	0x20012b28
 80211f8:	20012b90 	.word	0x20012b90
 80211fc:	20012bf8 	.word	0x20012bf8

08021200 <global_stdio_init.part.0>:
 8021200:	b510      	push	{r4, lr}
 8021202:	4b0b      	ldr	r3, [pc, #44]	; (8021230 <global_stdio_init.part.0+0x30>)
 8021204:	4c0b      	ldr	r4, [pc, #44]	; (8021234 <global_stdio_init.part.0+0x34>)
 8021206:	4a0c      	ldr	r2, [pc, #48]	; (8021238 <global_stdio_init.part.0+0x38>)
 8021208:	601a      	str	r2, [r3, #0]
 802120a:	4620      	mov	r0, r4
 802120c:	2200      	movs	r2, #0
 802120e:	2104      	movs	r1, #4
 8021210:	f7ff ff94 	bl	802113c <std>
 8021214:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8021218:	2201      	movs	r2, #1
 802121a:	2109      	movs	r1, #9
 802121c:	f7ff ff8e 	bl	802113c <std>
 8021220:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8021224:	2202      	movs	r2, #2
 8021226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802122a:	2112      	movs	r1, #18
 802122c:	f7ff bf86 	b.w	802113c <std>
 8021230:	20012c60 	.word	0x20012c60
 8021234:	20012b28 	.word	0x20012b28
 8021238:	080211a9 	.word	0x080211a9

0802123c <__sfp_lock_acquire>:
 802123c:	4801      	ldr	r0, [pc, #4]	; (8021244 <__sfp_lock_acquire+0x8>)
 802123e:	f000 bbd8 	b.w	80219f2 <__retarget_lock_acquire_recursive>
 8021242:	bf00      	nop
 8021244:	20012c69 	.word	0x20012c69

08021248 <__sfp_lock_release>:
 8021248:	4801      	ldr	r0, [pc, #4]	; (8021250 <__sfp_lock_release+0x8>)
 802124a:	f000 bbd3 	b.w	80219f4 <__retarget_lock_release_recursive>
 802124e:	bf00      	nop
 8021250:	20012c69 	.word	0x20012c69

08021254 <__sinit>:
 8021254:	b510      	push	{r4, lr}
 8021256:	4604      	mov	r4, r0
 8021258:	f7ff fff0 	bl	802123c <__sfp_lock_acquire>
 802125c:	6a23      	ldr	r3, [r4, #32]
 802125e:	b11b      	cbz	r3, 8021268 <__sinit+0x14>
 8021260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021264:	f7ff bff0 	b.w	8021248 <__sfp_lock_release>
 8021268:	4b04      	ldr	r3, [pc, #16]	; (802127c <__sinit+0x28>)
 802126a:	6223      	str	r3, [r4, #32]
 802126c:	4b04      	ldr	r3, [pc, #16]	; (8021280 <__sinit+0x2c>)
 802126e:	681b      	ldr	r3, [r3, #0]
 8021270:	2b00      	cmp	r3, #0
 8021272:	d1f5      	bne.n	8021260 <__sinit+0xc>
 8021274:	f7ff ffc4 	bl	8021200 <global_stdio_init.part.0>
 8021278:	e7f2      	b.n	8021260 <__sinit+0xc>
 802127a:	bf00      	nop
 802127c:	080211c1 	.word	0x080211c1
 8021280:	20012c60 	.word	0x20012c60

08021284 <fiprintf>:
 8021284:	b40e      	push	{r1, r2, r3}
 8021286:	b503      	push	{r0, r1, lr}
 8021288:	4601      	mov	r1, r0
 802128a:	ab03      	add	r3, sp, #12
 802128c:	4805      	ldr	r0, [pc, #20]	; (80212a4 <fiprintf+0x20>)
 802128e:	f853 2b04 	ldr.w	r2, [r3], #4
 8021292:	6800      	ldr	r0, [r0, #0]
 8021294:	9301      	str	r3, [sp, #4]
 8021296:	f000 fd91 	bl	8021dbc <_vfiprintf_r>
 802129a:	b002      	add	sp, #8
 802129c:	f85d eb04 	ldr.w	lr, [sp], #4
 80212a0:	b003      	add	sp, #12
 80212a2:	4770      	bx	lr
 80212a4:	20000094 	.word	0x20000094

080212a8 <_fread_r>:
 80212a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80212ac:	461e      	mov	r6, r3
 80212ae:	4613      	mov	r3, r2
 80212b0:	4373      	muls	r3, r6
 80212b2:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80212b4:	4682      	mov	sl, r0
 80212b6:	4688      	mov	r8, r1
 80212b8:	4691      	mov	r9, r2
 80212ba:	469b      	mov	fp, r3
 80212bc:	d04e      	beq.n	802135c <_fread_r+0xb4>
 80212be:	b118      	cbz	r0, 80212c8 <_fread_r+0x20>
 80212c0:	6a03      	ldr	r3, [r0, #32]
 80212c2:	b90b      	cbnz	r3, 80212c8 <_fread_r+0x20>
 80212c4:	f7ff ffc6 	bl	8021254 <__sinit>
 80212c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80212ca:	07df      	lsls	r7, r3, #31
 80212cc:	d405      	bmi.n	80212da <_fread_r+0x32>
 80212ce:	89a3      	ldrh	r3, [r4, #12]
 80212d0:	059d      	lsls	r5, r3, #22
 80212d2:	d402      	bmi.n	80212da <_fread_r+0x32>
 80212d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80212d6:	f000 fb8c 	bl	80219f2 <__retarget_lock_acquire_recursive>
 80212da:	6863      	ldr	r3, [r4, #4]
 80212dc:	2b00      	cmp	r3, #0
 80212de:	da01      	bge.n	80212e4 <_fread_r+0x3c>
 80212e0:	2300      	movs	r3, #0
 80212e2:	6063      	str	r3, [r4, #4]
 80212e4:	465f      	mov	r7, fp
 80212e6:	e9d4 1500 	ldrd	r1, r5, [r4]
 80212ea:	42bd      	cmp	r5, r7
 80212ec:	d313      	bcc.n	8021316 <_fread_r+0x6e>
 80212ee:	463a      	mov	r2, r7
 80212f0:	4640      	mov	r0, r8
 80212f2:	f000 fb80 	bl	80219f6 <memcpy>
 80212f6:	6862      	ldr	r2, [r4, #4]
 80212f8:	6821      	ldr	r1, [r4, #0]
 80212fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80212fc:	1bd2      	subs	r2, r2, r7
 80212fe:	6062      	str	r2, [r4, #4]
 8021300:	4439      	add	r1, r7
 8021302:	07da      	lsls	r2, r3, #31
 8021304:	6021      	str	r1, [r4, #0]
 8021306:	d423      	bmi.n	8021350 <_fread_r+0xa8>
 8021308:	89a3      	ldrh	r3, [r4, #12]
 802130a:	059b      	lsls	r3, r3, #22
 802130c:	d420      	bmi.n	8021350 <_fread_r+0xa8>
 802130e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021310:	f000 fb70 	bl	80219f4 <__retarget_lock_release_recursive>
 8021314:	e01c      	b.n	8021350 <_fread_r+0xa8>
 8021316:	462a      	mov	r2, r5
 8021318:	4640      	mov	r0, r8
 802131a:	f000 fb6c 	bl	80219f6 <memcpy>
 802131e:	6823      	ldr	r3, [r4, #0]
 8021320:	442b      	add	r3, r5
 8021322:	6023      	str	r3, [r4, #0]
 8021324:	4621      	mov	r1, r4
 8021326:	1b7b      	subs	r3, r7, r5
 8021328:	4650      	mov	r0, sl
 802132a:	9301      	str	r3, [sp, #4]
 802132c:	f000 f8c0 	bl	80214b0 <__srefill_r>
 8021330:	44a8      	add	r8, r5
 8021332:	9b01      	ldr	r3, [sp, #4]
 8021334:	b180      	cbz	r0, 8021358 <_fread_r+0xb0>
 8021336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8021338:	07d8      	lsls	r0, r3, #31
 802133a:	d405      	bmi.n	8021348 <_fread_r+0xa0>
 802133c:	89a3      	ldrh	r3, [r4, #12]
 802133e:	0599      	lsls	r1, r3, #22
 8021340:	d402      	bmi.n	8021348 <_fread_r+0xa0>
 8021342:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8021344:	f000 fb56 	bl	80219f4 <__retarget_lock_release_recursive>
 8021348:	445d      	add	r5, fp
 802134a:	1beb      	subs	r3, r5, r7
 802134c:	fbb3 f6f9 	udiv	r6, r3, r9
 8021350:	4630      	mov	r0, r6
 8021352:	b003      	add	sp, #12
 8021354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021358:	461f      	mov	r7, r3
 802135a:	e7c4      	b.n	80212e6 <_fread_r+0x3e>
 802135c:	461e      	mov	r6, r3
 802135e:	e7f7      	b.n	8021350 <_fread_r+0xa8>

08021360 <fread>:
 8021360:	b507      	push	{r0, r1, r2, lr}
 8021362:	9300      	str	r3, [sp, #0]
 8021364:	4613      	mov	r3, r2
 8021366:	460a      	mov	r2, r1
 8021368:	4601      	mov	r1, r0
 802136a:	4803      	ldr	r0, [pc, #12]	; (8021378 <fread+0x18>)
 802136c:	6800      	ldr	r0, [r0, #0]
 802136e:	f7ff ff9b 	bl	80212a8 <_fread_r>
 8021372:	b003      	add	sp, #12
 8021374:	f85d fb04 	ldr.w	pc, [sp], #4
 8021378:	20000094 	.word	0x20000094

0802137c <_fwalk_sglue>:
 802137c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021380:	4607      	mov	r7, r0
 8021382:	4688      	mov	r8, r1
 8021384:	4614      	mov	r4, r2
 8021386:	2600      	movs	r6, #0
 8021388:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802138c:	f1b9 0901 	subs.w	r9, r9, #1
 8021390:	d505      	bpl.n	802139e <_fwalk_sglue+0x22>
 8021392:	6824      	ldr	r4, [r4, #0]
 8021394:	2c00      	cmp	r4, #0
 8021396:	d1f7      	bne.n	8021388 <_fwalk_sglue+0xc>
 8021398:	4630      	mov	r0, r6
 802139a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802139e:	89ab      	ldrh	r3, [r5, #12]
 80213a0:	2b01      	cmp	r3, #1
 80213a2:	d907      	bls.n	80213b4 <_fwalk_sglue+0x38>
 80213a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80213a8:	3301      	adds	r3, #1
 80213aa:	d003      	beq.n	80213b4 <_fwalk_sglue+0x38>
 80213ac:	4629      	mov	r1, r5
 80213ae:	4638      	mov	r0, r7
 80213b0:	47c0      	blx	r8
 80213b2:	4306      	orrs	r6, r0
 80213b4:	3568      	adds	r5, #104	; 0x68
 80213b6:	e7e9      	b.n	802138c <_fwalk_sglue+0x10>

080213b8 <iprintf>:
 80213b8:	b40f      	push	{r0, r1, r2, r3}
 80213ba:	b507      	push	{r0, r1, r2, lr}
 80213bc:	4906      	ldr	r1, [pc, #24]	; (80213d8 <iprintf+0x20>)
 80213be:	ab04      	add	r3, sp, #16
 80213c0:	6808      	ldr	r0, [r1, #0]
 80213c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80213c6:	6881      	ldr	r1, [r0, #8]
 80213c8:	9301      	str	r3, [sp, #4]
 80213ca:	f000 fcf7 	bl	8021dbc <_vfiprintf_r>
 80213ce:	b003      	add	sp, #12
 80213d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80213d4:	b004      	add	sp, #16
 80213d6:	4770      	bx	lr
 80213d8:	20000094 	.word	0x20000094

080213dc <_puts_r>:
 80213dc:	6a03      	ldr	r3, [r0, #32]
 80213de:	b570      	push	{r4, r5, r6, lr}
 80213e0:	6884      	ldr	r4, [r0, #8]
 80213e2:	4605      	mov	r5, r0
 80213e4:	460e      	mov	r6, r1
 80213e6:	b90b      	cbnz	r3, 80213ec <_puts_r+0x10>
 80213e8:	f7ff ff34 	bl	8021254 <__sinit>
 80213ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80213ee:	07db      	lsls	r3, r3, #31
 80213f0:	d405      	bmi.n	80213fe <_puts_r+0x22>
 80213f2:	89a3      	ldrh	r3, [r4, #12]
 80213f4:	0598      	lsls	r0, r3, #22
 80213f6:	d402      	bmi.n	80213fe <_puts_r+0x22>
 80213f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80213fa:	f000 fafa 	bl	80219f2 <__retarget_lock_acquire_recursive>
 80213fe:	89a3      	ldrh	r3, [r4, #12]
 8021400:	0719      	lsls	r1, r3, #28
 8021402:	d513      	bpl.n	802142c <_puts_r+0x50>
 8021404:	6923      	ldr	r3, [r4, #16]
 8021406:	b18b      	cbz	r3, 802142c <_puts_r+0x50>
 8021408:	3e01      	subs	r6, #1
 802140a:	68a3      	ldr	r3, [r4, #8]
 802140c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8021410:	3b01      	subs	r3, #1
 8021412:	60a3      	str	r3, [r4, #8]
 8021414:	b9e9      	cbnz	r1, 8021452 <_puts_r+0x76>
 8021416:	2b00      	cmp	r3, #0
 8021418:	da2e      	bge.n	8021478 <_puts_r+0x9c>
 802141a:	4622      	mov	r2, r4
 802141c:	210a      	movs	r1, #10
 802141e:	4628      	mov	r0, r5
 8021420:	f000 f921 	bl	8021666 <__swbuf_r>
 8021424:	3001      	adds	r0, #1
 8021426:	d007      	beq.n	8021438 <_puts_r+0x5c>
 8021428:	250a      	movs	r5, #10
 802142a:	e007      	b.n	802143c <_puts_r+0x60>
 802142c:	4621      	mov	r1, r4
 802142e:	4628      	mov	r0, r5
 8021430:	f000 f956 	bl	80216e0 <__swsetup_r>
 8021434:	2800      	cmp	r0, #0
 8021436:	d0e7      	beq.n	8021408 <_puts_r+0x2c>
 8021438:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 802143c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802143e:	07da      	lsls	r2, r3, #31
 8021440:	d405      	bmi.n	802144e <_puts_r+0x72>
 8021442:	89a3      	ldrh	r3, [r4, #12]
 8021444:	059b      	lsls	r3, r3, #22
 8021446:	d402      	bmi.n	802144e <_puts_r+0x72>
 8021448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802144a:	f000 fad3 	bl	80219f4 <__retarget_lock_release_recursive>
 802144e:	4628      	mov	r0, r5
 8021450:	bd70      	pop	{r4, r5, r6, pc}
 8021452:	2b00      	cmp	r3, #0
 8021454:	da04      	bge.n	8021460 <_puts_r+0x84>
 8021456:	69a2      	ldr	r2, [r4, #24]
 8021458:	429a      	cmp	r2, r3
 802145a:	dc06      	bgt.n	802146a <_puts_r+0x8e>
 802145c:	290a      	cmp	r1, #10
 802145e:	d004      	beq.n	802146a <_puts_r+0x8e>
 8021460:	6823      	ldr	r3, [r4, #0]
 8021462:	1c5a      	adds	r2, r3, #1
 8021464:	6022      	str	r2, [r4, #0]
 8021466:	7019      	strb	r1, [r3, #0]
 8021468:	e7cf      	b.n	802140a <_puts_r+0x2e>
 802146a:	4622      	mov	r2, r4
 802146c:	4628      	mov	r0, r5
 802146e:	f000 f8fa 	bl	8021666 <__swbuf_r>
 8021472:	3001      	adds	r0, #1
 8021474:	d1c9      	bne.n	802140a <_puts_r+0x2e>
 8021476:	e7df      	b.n	8021438 <_puts_r+0x5c>
 8021478:	6823      	ldr	r3, [r4, #0]
 802147a:	250a      	movs	r5, #10
 802147c:	1c5a      	adds	r2, r3, #1
 802147e:	6022      	str	r2, [r4, #0]
 8021480:	701d      	strb	r5, [r3, #0]
 8021482:	e7db      	b.n	802143c <_puts_r+0x60>

08021484 <puts>:
 8021484:	4b02      	ldr	r3, [pc, #8]	; (8021490 <puts+0xc>)
 8021486:	4601      	mov	r1, r0
 8021488:	6818      	ldr	r0, [r3, #0]
 802148a:	f7ff bfa7 	b.w	80213dc <_puts_r>
 802148e:	bf00      	nop
 8021490:	20000094 	.word	0x20000094

08021494 <lflush>:
 8021494:	898b      	ldrh	r3, [r1, #12]
 8021496:	f003 0309 	and.w	r3, r3, #9
 802149a:	2b09      	cmp	r3, #9
 802149c:	d103      	bne.n	80214a6 <lflush+0x12>
 802149e:	4b03      	ldr	r3, [pc, #12]	; (80214ac <lflush+0x18>)
 80214a0:	6818      	ldr	r0, [r3, #0]
 80214a2:	f000 bfbb 	b.w	802241c <_fflush_r>
 80214a6:	2000      	movs	r0, #0
 80214a8:	4770      	bx	lr
 80214aa:	bf00      	nop
 80214ac:	20000094 	.word	0x20000094

080214b0 <__srefill_r>:
 80214b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80214b2:	460c      	mov	r4, r1
 80214b4:	4605      	mov	r5, r0
 80214b6:	b118      	cbz	r0, 80214c0 <__srefill_r+0x10>
 80214b8:	6a03      	ldr	r3, [r0, #32]
 80214ba:	b90b      	cbnz	r3, 80214c0 <__srefill_r+0x10>
 80214bc:	f7ff feca 	bl	8021254 <__sinit>
 80214c0:	2300      	movs	r3, #0
 80214c2:	6063      	str	r3, [r4, #4]
 80214c4:	89a3      	ldrh	r3, [r4, #12]
 80214c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80214ca:	069e      	lsls	r6, r3, #26
 80214cc:	d502      	bpl.n	80214d4 <__srefill_r+0x24>
 80214ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80214d2:	e05c      	b.n	802158e <__srefill_r+0xde>
 80214d4:	0758      	lsls	r0, r3, #29
 80214d6:	d448      	bmi.n	802156a <__srefill_r+0xba>
 80214d8:	06d9      	lsls	r1, r3, #27
 80214da:	d405      	bmi.n	80214e8 <__srefill_r+0x38>
 80214dc:	2309      	movs	r3, #9
 80214de:	602b      	str	r3, [r5, #0]
 80214e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80214e4:	81a3      	strh	r3, [r4, #12]
 80214e6:	e7f2      	b.n	80214ce <__srefill_r+0x1e>
 80214e8:	071a      	lsls	r2, r3, #28
 80214ea:	d50b      	bpl.n	8021504 <__srefill_r+0x54>
 80214ec:	4621      	mov	r1, r4
 80214ee:	4628      	mov	r0, r5
 80214f0:	f000 ff94 	bl	802241c <_fflush_r>
 80214f4:	2800      	cmp	r0, #0
 80214f6:	d1ea      	bne.n	80214ce <__srefill_r+0x1e>
 80214f8:	89a3      	ldrh	r3, [r4, #12]
 80214fa:	60a0      	str	r0, [r4, #8]
 80214fc:	f023 0308 	bic.w	r3, r3, #8
 8021500:	81a3      	strh	r3, [r4, #12]
 8021502:	61a0      	str	r0, [r4, #24]
 8021504:	89a3      	ldrh	r3, [r4, #12]
 8021506:	f043 0304 	orr.w	r3, r3, #4
 802150a:	81a3      	strh	r3, [r4, #12]
 802150c:	6923      	ldr	r3, [r4, #16]
 802150e:	b91b      	cbnz	r3, 8021518 <__srefill_r+0x68>
 8021510:	4621      	mov	r1, r4
 8021512:	4628      	mov	r0, r5
 8021514:	f000 ffd0 	bl	80224b8 <__smakebuf_r>
 8021518:	89a6      	ldrh	r6, [r4, #12]
 802151a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 802151e:	07b3      	lsls	r3, r6, #30
 8021520:	d00f      	beq.n	8021542 <__srefill_r+0x92>
 8021522:	2301      	movs	r3, #1
 8021524:	4a1b      	ldr	r2, [pc, #108]	; (8021594 <__srefill_r+0xe4>)
 8021526:	491c      	ldr	r1, [pc, #112]	; (8021598 <__srefill_r+0xe8>)
 8021528:	481c      	ldr	r0, [pc, #112]	; (802159c <__srefill_r+0xec>)
 802152a:	81a3      	strh	r3, [r4, #12]
 802152c:	f006 0609 	and.w	r6, r6, #9
 8021530:	f7ff ff24 	bl	802137c <_fwalk_sglue>
 8021534:	2e09      	cmp	r6, #9
 8021536:	81a7      	strh	r7, [r4, #12]
 8021538:	d103      	bne.n	8021542 <__srefill_r+0x92>
 802153a:	4621      	mov	r1, r4
 802153c:	4628      	mov	r0, r5
 802153e:	f000 fee7 	bl	8022310 <__sflush_r>
 8021542:	6922      	ldr	r2, [r4, #16]
 8021544:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8021546:	6963      	ldr	r3, [r4, #20]
 8021548:	6a21      	ldr	r1, [r4, #32]
 802154a:	6022      	str	r2, [r4, #0]
 802154c:	4628      	mov	r0, r5
 802154e:	47b0      	blx	r6
 8021550:	2800      	cmp	r0, #0
 8021552:	6060      	str	r0, [r4, #4]
 8021554:	dc1c      	bgt.n	8021590 <__srefill_r+0xe0>
 8021556:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802155a:	bf17      	itett	ne
 802155c:	2200      	movne	r2, #0
 802155e:	f043 0320 	orreq.w	r3, r3, #32
 8021562:	6062      	strne	r2, [r4, #4]
 8021564:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8021568:	e7bc      	b.n	80214e4 <__srefill_r+0x34>
 802156a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802156c:	2900      	cmp	r1, #0
 802156e:	d0cd      	beq.n	802150c <__srefill_r+0x5c>
 8021570:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021574:	4299      	cmp	r1, r3
 8021576:	d002      	beq.n	802157e <__srefill_r+0xce>
 8021578:	4628      	mov	r0, r5
 802157a:	f000 fa51 	bl	8021a20 <_free_r>
 802157e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021580:	6063      	str	r3, [r4, #4]
 8021582:	2000      	movs	r0, #0
 8021584:	6360      	str	r0, [r4, #52]	; 0x34
 8021586:	2b00      	cmp	r3, #0
 8021588:	d0c0      	beq.n	802150c <__srefill_r+0x5c>
 802158a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802158c:	6023      	str	r3, [r4, #0]
 802158e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021590:	2000      	movs	r0, #0
 8021592:	e7fc      	b.n	802158e <__srefill_r+0xde>
 8021594:	2000003c 	.word	0x2000003c
 8021598:	08021495 	.word	0x08021495
 802159c:	20000048 	.word	0x20000048

080215a0 <siprintf>:
 80215a0:	b40e      	push	{r1, r2, r3}
 80215a2:	b500      	push	{lr}
 80215a4:	b09c      	sub	sp, #112	; 0x70
 80215a6:	ab1d      	add	r3, sp, #116	; 0x74
 80215a8:	9002      	str	r0, [sp, #8]
 80215aa:	9006      	str	r0, [sp, #24]
 80215ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80215b0:	4809      	ldr	r0, [pc, #36]	; (80215d8 <siprintf+0x38>)
 80215b2:	9107      	str	r1, [sp, #28]
 80215b4:	9104      	str	r1, [sp, #16]
 80215b6:	4909      	ldr	r1, [pc, #36]	; (80215dc <siprintf+0x3c>)
 80215b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80215bc:	9105      	str	r1, [sp, #20]
 80215be:	6800      	ldr	r0, [r0, #0]
 80215c0:	9301      	str	r3, [sp, #4]
 80215c2:	a902      	add	r1, sp, #8
 80215c4:	f000 fad2 	bl	8021b6c <_svfiprintf_r>
 80215c8:	9b02      	ldr	r3, [sp, #8]
 80215ca:	2200      	movs	r2, #0
 80215cc:	701a      	strb	r2, [r3, #0]
 80215ce:	b01c      	add	sp, #112	; 0x70
 80215d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80215d4:	b003      	add	sp, #12
 80215d6:	4770      	bx	lr
 80215d8:	20000094 	.word	0x20000094
 80215dc:	ffff0208 	.word	0xffff0208

080215e0 <__sread>:
 80215e0:	b510      	push	{r4, lr}
 80215e2:	460c      	mov	r4, r1
 80215e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80215e8:	f000 f9aa 	bl	8021940 <_read_r>
 80215ec:	2800      	cmp	r0, #0
 80215ee:	bfab      	itete	ge
 80215f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80215f2:	89a3      	ldrhlt	r3, [r4, #12]
 80215f4:	181b      	addge	r3, r3, r0
 80215f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80215fa:	bfac      	ite	ge
 80215fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80215fe:	81a3      	strhlt	r3, [r4, #12]
 8021600:	bd10      	pop	{r4, pc}

08021602 <__swrite>:
 8021602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021606:	461f      	mov	r7, r3
 8021608:	898b      	ldrh	r3, [r1, #12]
 802160a:	05db      	lsls	r3, r3, #23
 802160c:	4605      	mov	r5, r0
 802160e:	460c      	mov	r4, r1
 8021610:	4616      	mov	r6, r2
 8021612:	d505      	bpl.n	8021620 <__swrite+0x1e>
 8021614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021618:	2302      	movs	r3, #2
 802161a:	2200      	movs	r2, #0
 802161c:	f000 f97e 	bl	802191c <_lseek_r>
 8021620:	89a3      	ldrh	r3, [r4, #12]
 8021622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802162a:	81a3      	strh	r3, [r4, #12]
 802162c:	4632      	mov	r2, r6
 802162e:	463b      	mov	r3, r7
 8021630:	4628      	mov	r0, r5
 8021632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021636:	f000 b9a5 	b.w	8021984 <_write_r>

0802163a <__sseek>:
 802163a:	b510      	push	{r4, lr}
 802163c:	460c      	mov	r4, r1
 802163e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021642:	f000 f96b 	bl	802191c <_lseek_r>
 8021646:	1c43      	adds	r3, r0, #1
 8021648:	89a3      	ldrh	r3, [r4, #12]
 802164a:	bf15      	itete	ne
 802164c:	6560      	strne	r0, [r4, #84]	; 0x54
 802164e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8021652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8021656:	81a3      	strheq	r3, [r4, #12]
 8021658:	bf18      	it	ne
 802165a:	81a3      	strhne	r3, [r4, #12]
 802165c:	bd10      	pop	{r4, pc}

0802165e <__sclose>:
 802165e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021662:	f000 b8f5 	b.w	8021850 <_close_r>

08021666 <__swbuf_r>:
 8021666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021668:	460e      	mov	r6, r1
 802166a:	4614      	mov	r4, r2
 802166c:	4605      	mov	r5, r0
 802166e:	b118      	cbz	r0, 8021678 <__swbuf_r+0x12>
 8021670:	6a03      	ldr	r3, [r0, #32]
 8021672:	b90b      	cbnz	r3, 8021678 <__swbuf_r+0x12>
 8021674:	f7ff fdee 	bl	8021254 <__sinit>
 8021678:	69a3      	ldr	r3, [r4, #24]
 802167a:	60a3      	str	r3, [r4, #8]
 802167c:	89a3      	ldrh	r3, [r4, #12]
 802167e:	071a      	lsls	r2, r3, #28
 8021680:	d525      	bpl.n	80216ce <__swbuf_r+0x68>
 8021682:	6923      	ldr	r3, [r4, #16]
 8021684:	b31b      	cbz	r3, 80216ce <__swbuf_r+0x68>
 8021686:	6823      	ldr	r3, [r4, #0]
 8021688:	6922      	ldr	r2, [r4, #16]
 802168a:	1a98      	subs	r0, r3, r2
 802168c:	6963      	ldr	r3, [r4, #20]
 802168e:	b2f6      	uxtb	r6, r6
 8021690:	4283      	cmp	r3, r0
 8021692:	4637      	mov	r7, r6
 8021694:	dc04      	bgt.n	80216a0 <__swbuf_r+0x3a>
 8021696:	4621      	mov	r1, r4
 8021698:	4628      	mov	r0, r5
 802169a:	f000 febf 	bl	802241c <_fflush_r>
 802169e:	b9e0      	cbnz	r0, 80216da <__swbuf_r+0x74>
 80216a0:	68a3      	ldr	r3, [r4, #8]
 80216a2:	3b01      	subs	r3, #1
 80216a4:	60a3      	str	r3, [r4, #8]
 80216a6:	6823      	ldr	r3, [r4, #0]
 80216a8:	1c5a      	adds	r2, r3, #1
 80216aa:	6022      	str	r2, [r4, #0]
 80216ac:	701e      	strb	r6, [r3, #0]
 80216ae:	6962      	ldr	r2, [r4, #20]
 80216b0:	1c43      	adds	r3, r0, #1
 80216b2:	429a      	cmp	r2, r3
 80216b4:	d004      	beq.n	80216c0 <__swbuf_r+0x5a>
 80216b6:	89a3      	ldrh	r3, [r4, #12]
 80216b8:	07db      	lsls	r3, r3, #31
 80216ba:	d506      	bpl.n	80216ca <__swbuf_r+0x64>
 80216bc:	2e0a      	cmp	r6, #10
 80216be:	d104      	bne.n	80216ca <__swbuf_r+0x64>
 80216c0:	4621      	mov	r1, r4
 80216c2:	4628      	mov	r0, r5
 80216c4:	f000 feaa 	bl	802241c <_fflush_r>
 80216c8:	b938      	cbnz	r0, 80216da <__swbuf_r+0x74>
 80216ca:	4638      	mov	r0, r7
 80216cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80216ce:	4621      	mov	r1, r4
 80216d0:	4628      	mov	r0, r5
 80216d2:	f000 f805 	bl	80216e0 <__swsetup_r>
 80216d6:	2800      	cmp	r0, #0
 80216d8:	d0d5      	beq.n	8021686 <__swbuf_r+0x20>
 80216da:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80216de:	e7f4      	b.n	80216ca <__swbuf_r+0x64>

080216e0 <__swsetup_r>:
 80216e0:	b538      	push	{r3, r4, r5, lr}
 80216e2:	4b2a      	ldr	r3, [pc, #168]	; (802178c <__swsetup_r+0xac>)
 80216e4:	4605      	mov	r5, r0
 80216e6:	6818      	ldr	r0, [r3, #0]
 80216e8:	460c      	mov	r4, r1
 80216ea:	b118      	cbz	r0, 80216f4 <__swsetup_r+0x14>
 80216ec:	6a03      	ldr	r3, [r0, #32]
 80216ee:	b90b      	cbnz	r3, 80216f4 <__swsetup_r+0x14>
 80216f0:	f7ff fdb0 	bl	8021254 <__sinit>
 80216f4:	89a3      	ldrh	r3, [r4, #12]
 80216f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80216fa:	0718      	lsls	r0, r3, #28
 80216fc:	d422      	bmi.n	8021744 <__swsetup_r+0x64>
 80216fe:	06d9      	lsls	r1, r3, #27
 8021700:	d407      	bmi.n	8021712 <__swsetup_r+0x32>
 8021702:	2309      	movs	r3, #9
 8021704:	602b      	str	r3, [r5, #0]
 8021706:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 802170a:	81a3      	strh	r3, [r4, #12]
 802170c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021710:	e034      	b.n	802177c <__swsetup_r+0x9c>
 8021712:	0758      	lsls	r0, r3, #29
 8021714:	d512      	bpl.n	802173c <__swsetup_r+0x5c>
 8021716:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8021718:	b141      	cbz	r1, 802172c <__swsetup_r+0x4c>
 802171a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802171e:	4299      	cmp	r1, r3
 8021720:	d002      	beq.n	8021728 <__swsetup_r+0x48>
 8021722:	4628      	mov	r0, r5
 8021724:	f000 f97c 	bl	8021a20 <_free_r>
 8021728:	2300      	movs	r3, #0
 802172a:	6363      	str	r3, [r4, #52]	; 0x34
 802172c:	89a3      	ldrh	r3, [r4, #12]
 802172e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8021732:	81a3      	strh	r3, [r4, #12]
 8021734:	2300      	movs	r3, #0
 8021736:	6063      	str	r3, [r4, #4]
 8021738:	6923      	ldr	r3, [r4, #16]
 802173a:	6023      	str	r3, [r4, #0]
 802173c:	89a3      	ldrh	r3, [r4, #12]
 802173e:	f043 0308 	orr.w	r3, r3, #8
 8021742:	81a3      	strh	r3, [r4, #12]
 8021744:	6923      	ldr	r3, [r4, #16]
 8021746:	b94b      	cbnz	r3, 802175c <__swsetup_r+0x7c>
 8021748:	89a3      	ldrh	r3, [r4, #12]
 802174a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802174e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021752:	d003      	beq.n	802175c <__swsetup_r+0x7c>
 8021754:	4621      	mov	r1, r4
 8021756:	4628      	mov	r0, r5
 8021758:	f000 feae 	bl	80224b8 <__smakebuf_r>
 802175c:	89a0      	ldrh	r0, [r4, #12]
 802175e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021762:	f010 0301 	ands.w	r3, r0, #1
 8021766:	d00a      	beq.n	802177e <__swsetup_r+0x9e>
 8021768:	2300      	movs	r3, #0
 802176a:	60a3      	str	r3, [r4, #8]
 802176c:	6963      	ldr	r3, [r4, #20]
 802176e:	425b      	negs	r3, r3
 8021770:	61a3      	str	r3, [r4, #24]
 8021772:	6923      	ldr	r3, [r4, #16]
 8021774:	b943      	cbnz	r3, 8021788 <__swsetup_r+0xa8>
 8021776:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802177a:	d1c4      	bne.n	8021706 <__swsetup_r+0x26>
 802177c:	bd38      	pop	{r3, r4, r5, pc}
 802177e:	0781      	lsls	r1, r0, #30
 8021780:	bf58      	it	pl
 8021782:	6963      	ldrpl	r3, [r4, #20]
 8021784:	60a3      	str	r3, [r4, #8]
 8021786:	e7f4      	b.n	8021772 <__swsetup_r+0x92>
 8021788:	2000      	movs	r0, #0
 802178a:	e7f7      	b.n	802177c <__swsetup_r+0x9c>
 802178c:	20000094 	.word	0x20000094

08021790 <memcmp>:
 8021790:	b510      	push	{r4, lr}
 8021792:	3901      	subs	r1, #1
 8021794:	4402      	add	r2, r0
 8021796:	4290      	cmp	r0, r2
 8021798:	d101      	bne.n	802179e <memcmp+0xe>
 802179a:	2000      	movs	r0, #0
 802179c:	e005      	b.n	80217aa <memcmp+0x1a>
 802179e:	7803      	ldrb	r3, [r0, #0]
 80217a0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80217a4:	42a3      	cmp	r3, r4
 80217a6:	d001      	beq.n	80217ac <memcmp+0x1c>
 80217a8:	1b18      	subs	r0, r3, r4
 80217aa:	bd10      	pop	{r4, pc}
 80217ac:	3001      	adds	r0, #1
 80217ae:	e7f2      	b.n	8021796 <memcmp+0x6>

080217b0 <memmove>:
 80217b0:	4288      	cmp	r0, r1
 80217b2:	b510      	push	{r4, lr}
 80217b4:	eb01 0402 	add.w	r4, r1, r2
 80217b8:	d902      	bls.n	80217c0 <memmove+0x10>
 80217ba:	4284      	cmp	r4, r0
 80217bc:	4623      	mov	r3, r4
 80217be:	d807      	bhi.n	80217d0 <memmove+0x20>
 80217c0:	1e43      	subs	r3, r0, #1
 80217c2:	42a1      	cmp	r1, r4
 80217c4:	d008      	beq.n	80217d8 <memmove+0x28>
 80217c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80217ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80217ce:	e7f8      	b.n	80217c2 <memmove+0x12>
 80217d0:	4402      	add	r2, r0
 80217d2:	4601      	mov	r1, r0
 80217d4:	428a      	cmp	r2, r1
 80217d6:	d100      	bne.n	80217da <memmove+0x2a>
 80217d8:	bd10      	pop	{r4, pc}
 80217da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80217de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80217e2:	e7f7      	b.n	80217d4 <memmove+0x24>

080217e4 <memset>:
 80217e4:	4402      	add	r2, r0
 80217e6:	4603      	mov	r3, r0
 80217e8:	4293      	cmp	r3, r2
 80217ea:	d100      	bne.n	80217ee <memset+0xa>
 80217ec:	4770      	bx	lr
 80217ee:	f803 1b01 	strb.w	r1, [r3], #1
 80217f2:	e7f9      	b.n	80217e8 <memset+0x4>

080217f4 <strchr>:
 80217f4:	b2c9      	uxtb	r1, r1
 80217f6:	4603      	mov	r3, r0
 80217f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80217fc:	b11a      	cbz	r2, 8021806 <strchr+0x12>
 80217fe:	428a      	cmp	r2, r1
 8021800:	d1f9      	bne.n	80217f6 <strchr+0x2>
 8021802:	4618      	mov	r0, r3
 8021804:	4770      	bx	lr
 8021806:	2900      	cmp	r1, #0
 8021808:	bf18      	it	ne
 802180a:	2300      	movne	r3, #0
 802180c:	e7f9      	b.n	8021802 <strchr+0xe>

0802180e <strcspn>:
 802180e:	b570      	push	{r4, r5, r6, lr}
 8021810:	4603      	mov	r3, r0
 8021812:	461e      	mov	r6, r3
 8021814:	f813 4b01 	ldrb.w	r4, [r3], #1
 8021818:	b144      	cbz	r4, 802182c <strcspn+0x1e>
 802181a:	1e4a      	subs	r2, r1, #1
 802181c:	e001      	b.n	8021822 <strcspn+0x14>
 802181e:	42a5      	cmp	r5, r4
 8021820:	d004      	beq.n	802182c <strcspn+0x1e>
 8021822:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8021826:	2d00      	cmp	r5, #0
 8021828:	d1f9      	bne.n	802181e <strcspn+0x10>
 802182a:	e7f2      	b.n	8021812 <strcspn+0x4>
 802182c:	1a30      	subs	r0, r6, r0
 802182e:	bd70      	pop	{r4, r5, r6, pc}

08021830 <strspn>:
 8021830:	b570      	push	{r4, r5, r6, lr}
 8021832:	4603      	mov	r3, r0
 8021834:	461e      	mov	r6, r3
 8021836:	f813 4b01 	ldrb.w	r4, [r3], #1
 802183a:	b13c      	cbz	r4, 802184c <strspn+0x1c>
 802183c:	1e4a      	subs	r2, r1, #1
 802183e:	e001      	b.n	8021844 <strspn+0x14>
 8021840:	42a5      	cmp	r5, r4
 8021842:	d0f7      	beq.n	8021834 <strspn+0x4>
 8021844:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8021848:	2d00      	cmp	r5, #0
 802184a:	d1f9      	bne.n	8021840 <strspn+0x10>
 802184c:	1a30      	subs	r0, r6, r0
 802184e:	bd70      	pop	{r4, r5, r6, pc}

08021850 <_close_r>:
 8021850:	b538      	push	{r3, r4, r5, lr}
 8021852:	4d06      	ldr	r5, [pc, #24]	; (802186c <_close_r+0x1c>)
 8021854:	2300      	movs	r3, #0
 8021856:	4604      	mov	r4, r0
 8021858:	4608      	mov	r0, r1
 802185a:	602b      	str	r3, [r5, #0]
 802185c:	f7e0 f8e7 	bl	8001a2e <_close>
 8021860:	1c43      	adds	r3, r0, #1
 8021862:	d102      	bne.n	802186a <_close_r+0x1a>
 8021864:	682b      	ldr	r3, [r5, #0]
 8021866:	b103      	cbz	r3, 802186a <_close_r+0x1a>
 8021868:	6023      	str	r3, [r4, #0]
 802186a:	bd38      	pop	{r3, r4, r5, pc}
 802186c:	20012c64 	.word	0x20012c64

08021870 <_reclaim_reent>:
 8021870:	4b29      	ldr	r3, [pc, #164]	; (8021918 <_reclaim_reent+0xa8>)
 8021872:	681b      	ldr	r3, [r3, #0]
 8021874:	4283      	cmp	r3, r0
 8021876:	b570      	push	{r4, r5, r6, lr}
 8021878:	4604      	mov	r4, r0
 802187a:	d04b      	beq.n	8021914 <_reclaim_reent+0xa4>
 802187c:	69c3      	ldr	r3, [r0, #28]
 802187e:	b143      	cbz	r3, 8021892 <_reclaim_reent+0x22>
 8021880:	68db      	ldr	r3, [r3, #12]
 8021882:	2b00      	cmp	r3, #0
 8021884:	d144      	bne.n	8021910 <_reclaim_reent+0xa0>
 8021886:	69e3      	ldr	r3, [r4, #28]
 8021888:	6819      	ldr	r1, [r3, #0]
 802188a:	b111      	cbz	r1, 8021892 <_reclaim_reent+0x22>
 802188c:	4620      	mov	r0, r4
 802188e:	f000 f8c7 	bl	8021a20 <_free_r>
 8021892:	6961      	ldr	r1, [r4, #20]
 8021894:	b111      	cbz	r1, 802189c <_reclaim_reent+0x2c>
 8021896:	4620      	mov	r0, r4
 8021898:	f000 f8c2 	bl	8021a20 <_free_r>
 802189c:	69e1      	ldr	r1, [r4, #28]
 802189e:	b111      	cbz	r1, 80218a6 <_reclaim_reent+0x36>
 80218a0:	4620      	mov	r0, r4
 80218a2:	f000 f8bd 	bl	8021a20 <_free_r>
 80218a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80218a8:	b111      	cbz	r1, 80218b0 <_reclaim_reent+0x40>
 80218aa:	4620      	mov	r0, r4
 80218ac:	f000 f8b8 	bl	8021a20 <_free_r>
 80218b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80218b2:	b111      	cbz	r1, 80218ba <_reclaim_reent+0x4a>
 80218b4:	4620      	mov	r0, r4
 80218b6:	f000 f8b3 	bl	8021a20 <_free_r>
 80218ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80218bc:	b111      	cbz	r1, 80218c4 <_reclaim_reent+0x54>
 80218be:	4620      	mov	r0, r4
 80218c0:	f000 f8ae 	bl	8021a20 <_free_r>
 80218c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80218c6:	b111      	cbz	r1, 80218ce <_reclaim_reent+0x5e>
 80218c8:	4620      	mov	r0, r4
 80218ca:	f000 f8a9 	bl	8021a20 <_free_r>
 80218ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80218d0:	b111      	cbz	r1, 80218d8 <_reclaim_reent+0x68>
 80218d2:	4620      	mov	r0, r4
 80218d4:	f000 f8a4 	bl	8021a20 <_free_r>
 80218d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80218da:	b111      	cbz	r1, 80218e2 <_reclaim_reent+0x72>
 80218dc:	4620      	mov	r0, r4
 80218de:	f000 f89f 	bl	8021a20 <_free_r>
 80218e2:	6a23      	ldr	r3, [r4, #32]
 80218e4:	b1b3      	cbz	r3, 8021914 <_reclaim_reent+0xa4>
 80218e6:	4620      	mov	r0, r4
 80218e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80218ec:	4718      	bx	r3
 80218ee:	5949      	ldr	r1, [r1, r5]
 80218f0:	b941      	cbnz	r1, 8021904 <_reclaim_reent+0x94>
 80218f2:	3504      	adds	r5, #4
 80218f4:	69e3      	ldr	r3, [r4, #28]
 80218f6:	2d80      	cmp	r5, #128	; 0x80
 80218f8:	68d9      	ldr	r1, [r3, #12]
 80218fa:	d1f8      	bne.n	80218ee <_reclaim_reent+0x7e>
 80218fc:	4620      	mov	r0, r4
 80218fe:	f000 f88f 	bl	8021a20 <_free_r>
 8021902:	e7c0      	b.n	8021886 <_reclaim_reent+0x16>
 8021904:	680e      	ldr	r6, [r1, #0]
 8021906:	4620      	mov	r0, r4
 8021908:	f000 f88a 	bl	8021a20 <_free_r>
 802190c:	4631      	mov	r1, r6
 802190e:	e7ef      	b.n	80218f0 <_reclaim_reent+0x80>
 8021910:	2500      	movs	r5, #0
 8021912:	e7ef      	b.n	80218f4 <_reclaim_reent+0x84>
 8021914:	bd70      	pop	{r4, r5, r6, pc}
 8021916:	bf00      	nop
 8021918:	20000094 	.word	0x20000094

0802191c <_lseek_r>:
 802191c:	b538      	push	{r3, r4, r5, lr}
 802191e:	4d07      	ldr	r5, [pc, #28]	; (802193c <_lseek_r+0x20>)
 8021920:	4604      	mov	r4, r0
 8021922:	4608      	mov	r0, r1
 8021924:	4611      	mov	r1, r2
 8021926:	2200      	movs	r2, #0
 8021928:	602a      	str	r2, [r5, #0]
 802192a:	461a      	mov	r2, r3
 802192c:	f7e0 f8a6 	bl	8001a7c <_lseek>
 8021930:	1c43      	adds	r3, r0, #1
 8021932:	d102      	bne.n	802193a <_lseek_r+0x1e>
 8021934:	682b      	ldr	r3, [r5, #0]
 8021936:	b103      	cbz	r3, 802193a <_lseek_r+0x1e>
 8021938:	6023      	str	r3, [r4, #0]
 802193a:	bd38      	pop	{r3, r4, r5, pc}
 802193c:	20012c64 	.word	0x20012c64

08021940 <_read_r>:
 8021940:	b538      	push	{r3, r4, r5, lr}
 8021942:	4d07      	ldr	r5, [pc, #28]	; (8021960 <_read_r+0x20>)
 8021944:	4604      	mov	r4, r0
 8021946:	4608      	mov	r0, r1
 8021948:	4611      	mov	r1, r2
 802194a:	2200      	movs	r2, #0
 802194c:	602a      	str	r2, [r5, #0]
 802194e:	461a      	mov	r2, r3
 8021950:	f7e0 f834 	bl	80019bc <_read>
 8021954:	1c43      	adds	r3, r0, #1
 8021956:	d102      	bne.n	802195e <_read_r+0x1e>
 8021958:	682b      	ldr	r3, [r5, #0]
 802195a:	b103      	cbz	r3, 802195e <_read_r+0x1e>
 802195c:	6023      	str	r3, [r4, #0]
 802195e:	bd38      	pop	{r3, r4, r5, pc}
 8021960:	20012c64 	.word	0x20012c64

08021964 <_sbrk_r>:
 8021964:	b538      	push	{r3, r4, r5, lr}
 8021966:	4d06      	ldr	r5, [pc, #24]	; (8021980 <_sbrk_r+0x1c>)
 8021968:	2300      	movs	r3, #0
 802196a:	4604      	mov	r4, r0
 802196c:	4608      	mov	r0, r1
 802196e:	602b      	str	r3, [r5, #0]
 8021970:	f7e0 f892 	bl	8001a98 <_sbrk>
 8021974:	1c43      	adds	r3, r0, #1
 8021976:	d102      	bne.n	802197e <_sbrk_r+0x1a>
 8021978:	682b      	ldr	r3, [r5, #0]
 802197a:	b103      	cbz	r3, 802197e <_sbrk_r+0x1a>
 802197c:	6023      	str	r3, [r4, #0]
 802197e:	bd38      	pop	{r3, r4, r5, pc}
 8021980:	20012c64 	.word	0x20012c64

08021984 <_write_r>:
 8021984:	b538      	push	{r3, r4, r5, lr}
 8021986:	4d07      	ldr	r5, [pc, #28]	; (80219a4 <_write_r+0x20>)
 8021988:	4604      	mov	r4, r0
 802198a:	4608      	mov	r0, r1
 802198c:	4611      	mov	r1, r2
 802198e:	2200      	movs	r2, #0
 8021990:	602a      	str	r2, [r5, #0]
 8021992:	461a      	mov	r2, r3
 8021994:	f7e0 f82f 	bl	80019f6 <_write>
 8021998:	1c43      	adds	r3, r0, #1
 802199a:	d102      	bne.n	80219a2 <_write_r+0x1e>
 802199c:	682b      	ldr	r3, [r5, #0]
 802199e:	b103      	cbz	r3, 80219a2 <_write_r+0x1e>
 80219a0:	6023      	str	r3, [r4, #0]
 80219a2:	bd38      	pop	{r3, r4, r5, pc}
 80219a4:	20012c64 	.word	0x20012c64

080219a8 <__libc_init_array>:
 80219a8:	b570      	push	{r4, r5, r6, lr}
 80219aa:	4d0d      	ldr	r5, [pc, #52]	; (80219e0 <__libc_init_array+0x38>)
 80219ac:	4c0d      	ldr	r4, [pc, #52]	; (80219e4 <__libc_init_array+0x3c>)
 80219ae:	1b64      	subs	r4, r4, r5
 80219b0:	10a4      	asrs	r4, r4, #2
 80219b2:	2600      	movs	r6, #0
 80219b4:	42a6      	cmp	r6, r4
 80219b6:	d109      	bne.n	80219cc <__libc_init_array+0x24>
 80219b8:	4d0b      	ldr	r5, [pc, #44]	; (80219e8 <__libc_init_array+0x40>)
 80219ba:	4c0c      	ldr	r4, [pc, #48]	; (80219ec <__libc_init_array+0x44>)
 80219bc:	f000 fe56 	bl	802266c <_init>
 80219c0:	1b64      	subs	r4, r4, r5
 80219c2:	10a4      	asrs	r4, r4, #2
 80219c4:	2600      	movs	r6, #0
 80219c6:	42a6      	cmp	r6, r4
 80219c8:	d105      	bne.n	80219d6 <__libc_init_array+0x2e>
 80219ca:	bd70      	pop	{r4, r5, r6, pc}
 80219cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80219d0:	4798      	blx	r3
 80219d2:	3601      	adds	r6, #1
 80219d4:	e7ee      	b.n	80219b4 <__libc_init_array+0xc>
 80219d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80219da:	4798      	blx	r3
 80219dc:	3601      	adds	r6, #1
 80219de:	e7f2      	b.n	80219c6 <__libc_init_array+0x1e>
 80219e0:	08027768 	.word	0x08027768
 80219e4:	08027768 	.word	0x08027768
 80219e8:	08027768 	.word	0x08027768
 80219ec:	0802776c 	.word	0x0802776c

080219f0 <__retarget_lock_init_recursive>:
 80219f0:	4770      	bx	lr

080219f2 <__retarget_lock_acquire_recursive>:
 80219f2:	4770      	bx	lr

080219f4 <__retarget_lock_release_recursive>:
 80219f4:	4770      	bx	lr

080219f6 <memcpy>:
 80219f6:	440a      	add	r2, r1
 80219f8:	4291      	cmp	r1, r2
 80219fa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80219fe:	d100      	bne.n	8021a02 <memcpy+0xc>
 8021a00:	4770      	bx	lr
 8021a02:	b510      	push	{r4, lr}
 8021a04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021a08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021a0c:	4291      	cmp	r1, r2
 8021a0e:	d1f9      	bne.n	8021a04 <memcpy+0xe>
 8021a10:	bd10      	pop	{r4, pc}

08021a12 <abort>:
 8021a12:	b508      	push	{r3, lr}
 8021a14:	2006      	movs	r0, #6
 8021a16:	f000 fdb3 	bl	8022580 <raise>
 8021a1a:	2001      	movs	r0, #1
 8021a1c:	f7df ffc4 	bl	80019a8 <_exit>

08021a20 <_free_r>:
 8021a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021a22:	2900      	cmp	r1, #0
 8021a24:	d044      	beq.n	8021ab0 <_free_r+0x90>
 8021a26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021a2a:	9001      	str	r0, [sp, #4]
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	f1a1 0404 	sub.w	r4, r1, #4
 8021a32:	bfb8      	it	lt
 8021a34:	18e4      	addlt	r4, r4, r3
 8021a36:	f7ff fb37 	bl	80210a8 <__malloc_lock>
 8021a3a:	4a1e      	ldr	r2, [pc, #120]	; (8021ab4 <_free_r+0x94>)
 8021a3c:	9801      	ldr	r0, [sp, #4]
 8021a3e:	6813      	ldr	r3, [r2, #0]
 8021a40:	b933      	cbnz	r3, 8021a50 <_free_r+0x30>
 8021a42:	6063      	str	r3, [r4, #4]
 8021a44:	6014      	str	r4, [r2, #0]
 8021a46:	b003      	add	sp, #12
 8021a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021a4c:	f7ff bb32 	b.w	80210b4 <__malloc_unlock>
 8021a50:	42a3      	cmp	r3, r4
 8021a52:	d908      	bls.n	8021a66 <_free_r+0x46>
 8021a54:	6825      	ldr	r5, [r4, #0]
 8021a56:	1961      	adds	r1, r4, r5
 8021a58:	428b      	cmp	r3, r1
 8021a5a:	bf01      	itttt	eq
 8021a5c:	6819      	ldreq	r1, [r3, #0]
 8021a5e:	685b      	ldreq	r3, [r3, #4]
 8021a60:	1949      	addeq	r1, r1, r5
 8021a62:	6021      	streq	r1, [r4, #0]
 8021a64:	e7ed      	b.n	8021a42 <_free_r+0x22>
 8021a66:	461a      	mov	r2, r3
 8021a68:	685b      	ldr	r3, [r3, #4]
 8021a6a:	b10b      	cbz	r3, 8021a70 <_free_r+0x50>
 8021a6c:	42a3      	cmp	r3, r4
 8021a6e:	d9fa      	bls.n	8021a66 <_free_r+0x46>
 8021a70:	6811      	ldr	r1, [r2, #0]
 8021a72:	1855      	adds	r5, r2, r1
 8021a74:	42a5      	cmp	r5, r4
 8021a76:	d10b      	bne.n	8021a90 <_free_r+0x70>
 8021a78:	6824      	ldr	r4, [r4, #0]
 8021a7a:	4421      	add	r1, r4
 8021a7c:	1854      	adds	r4, r2, r1
 8021a7e:	42a3      	cmp	r3, r4
 8021a80:	6011      	str	r1, [r2, #0]
 8021a82:	d1e0      	bne.n	8021a46 <_free_r+0x26>
 8021a84:	681c      	ldr	r4, [r3, #0]
 8021a86:	685b      	ldr	r3, [r3, #4]
 8021a88:	6053      	str	r3, [r2, #4]
 8021a8a:	440c      	add	r4, r1
 8021a8c:	6014      	str	r4, [r2, #0]
 8021a8e:	e7da      	b.n	8021a46 <_free_r+0x26>
 8021a90:	d902      	bls.n	8021a98 <_free_r+0x78>
 8021a92:	230c      	movs	r3, #12
 8021a94:	6003      	str	r3, [r0, #0]
 8021a96:	e7d6      	b.n	8021a46 <_free_r+0x26>
 8021a98:	6825      	ldr	r5, [r4, #0]
 8021a9a:	1961      	adds	r1, r4, r5
 8021a9c:	428b      	cmp	r3, r1
 8021a9e:	bf04      	itt	eq
 8021aa0:	6819      	ldreq	r1, [r3, #0]
 8021aa2:	685b      	ldreq	r3, [r3, #4]
 8021aa4:	6063      	str	r3, [r4, #4]
 8021aa6:	bf04      	itt	eq
 8021aa8:	1949      	addeq	r1, r1, r5
 8021aaa:	6021      	streq	r1, [r4, #0]
 8021aac:	6054      	str	r4, [r2, #4]
 8021aae:	e7ca      	b.n	8021a46 <_free_r+0x26>
 8021ab0:	b003      	add	sp, #12
 8021ab2:	bd30      	pop	{r4, r5, pc}
 8021ab4:	20012b20 	.word	0x20012b20

08021ab8 <__ssputs_r>:
 8021ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021abc:	688e      	ldr	r6, [r1, #8]
 8021abe:	461f      	mov	r7, r3
 8021ac0:	42be      	cmp	r6, r7
 8021ac2:	680b      	ldr	r3, [r1, #0]
 8021ac4:	4682      	mov	sl, r0
 8021ac6:	460c      	mov	r4, r1
 8021ac8:	4690      	mov	r8, r2
 8021aca:	d82c      	bhi.n	8021b26 <__ssputs_r+0x6e>
 8021acc:	898a      	ldrh	r2, [r1, #12]
 8021ace:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8021ad2:	d026      	beq.n	8021b22 <__ssputs_r+0x6a>
 8021ad4:	6965      	ldr	r5, [r4, #20]
 8021ad6:	6909      	ldr	r1, [r1, #16]
 8021ad8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8021adc:	eba3 0901 	sub.w	r9, r3, r1
 8021ae0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8021ae4:	1c7b      	adds	r3, r7, #1
 8021ae6:	444b      	add	r3, r9
 8021ae8:	106d      	asrs	r5, r5, #1
 8021aea:	429d      	cmp	r5, r3
 8021aec:	bf38      	it	cc
 8021aee:	461d      	movcc	r5, r3
 8021af0:	0553      	lsls	r3, r2, #21
 8021af2:	d527      	bpl.n	8021b44 <__ssputs_r+0x8c>
 8021af4:	4629      	mov	r1, r5
 8021af6:	f7ff fa57 	bl	8020fa8 <_malloc_r>
 8021afa:	4606      	mov	r6, r0
 8021afc:	b360      	cbz	r0, 8021b58 <__ssputs_r+0xa0>
 8021afe:	6921      	ldr	r1, [r4, #16]
 8021b00:	464a      	mov	r2, r9
 8021b02:	f7ff ff78 	bl	80219f6 <memcpy>
 8021b06:	89a3      	ldrh	r3, [r4, #12]
 8021b08:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8021b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021b10:	81a3      	strh	r3, [r4, #12]
 8021b12:	6126      	str	r6, [r4, #16]
 8021b14:	6165      	str	r5, [r4, #20]
 8021b16:	444e      	add	r6, r9
 8021b18:	eba5 0509 	sub.w	r5, r5, r9
 8021b1c:	6026      	str	r6, [r4, #0]
 8021b1e:	60a5      	str	r5, [r4, #8]
 8021b20:	463e      	mov	r6, r7
 8021b22:	42be      	cmp	r6, r7
 8021b24:	d900      	bls.n	8021b28 <__ssputs_r+0x70>
 8021b26:	463e      	mov	r6, r7
 8021b28:	6820      	ldr	r0, [r4, #0]
 8021b2a:	4632      	mov	r2, r6
 8021b2c:	4641      	mov	r1, r8
 8021b2e:	f7ff fe3f 	bl	80217b0 <memmove>
 8021b32:	68a3      	ldr	r3, [r4, #8]
 8021b34:	1b9b      	subs	r3, r3, r6
 8021b36:	60a3      	str	r3, [r4, #8]
 8021b38:	6823      	ldr	r3, [r4, #0]
 8021b3a:	4433      	add	r3, r6
 8021b3c:	6023      	str	r3, [r4, #0]
 8021b3e:	2000      	movs	r0, #0
 8021b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021b44:	462a      	mov	r2, r5
 8021b46:	f000 fd59 	bl	80225fc <_realloc_r>
 8021b4a:	4606      	mov	r6, r0
 8021b4c:	2800      	cmp	r0, #0
 8021b4e:	d1e0      	bne.n	8021b12 <__ssputs_r+0x5a>
 8021b50:	6921      	ldr	r1, [r4, #16]
 8021b52:	4650      	mov	r0, sl
 8021b54:	f7ff ff64 	bl	8021a20 <_free_r>
 8021b58:	230c      	movs	r3, #12
 8021b5a:	f8ca 3000 	str.w	r3, [sl]
 8021b5e:	89a3      	ldrh	r3, [r4, #12]
 8021b60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021b64:	81a3      	strh	r3, [r4, #12]
 8021b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021b6a:	e7e9      	b.n	8021b40 <__ssputs_r+0x88>

08021b6c <_svfiprintf_r>:
 8021b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b70:	4698      	mov	r8, r3
 8021b72:	898b      	ldrh	r3, [r1, #12]
 8021b74:	061b      	lsls	r3, r3, #24
 8021b76:	b09d      	sub	sp, #116	; 0x74
 8021b78:	4607      	mov	r7, r0
 8021b7a:	460d      	mov	r5, r1
 8021b7c:	4614      	mov	r4, r2
 8021b7e:	d50e      	bpl.n	8021b9e <_svfiprintf_r+0x32>
 8021b80:	690b      	ldr	r3, [r1, #16]
 8021b82:	b963      	cbnz	r3, 8021b9e <_svfiprintf_r+0x32>
 8021b84:	2140      	movs	r1, #64	; 0x40
 8021b86:	f7ff fa0f 	bl	8020fa8 <_malloc_r>
 8021b8a:	6028      	str	r0, [r5, #0]
 8021b8c:	6128      	str	r0, [r5, #16]
 8021b8e:	b920      	cbnz	r0, 8021b9a <_svfiprintf_r+0x2e>
 8021b90:	230c      	movs	r3, #12
 8021b92:	603b      	str	r3, [r7, #0]
 8021b94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021b98:	e0d0      	b.n	8021d3c <_svfiprintf_r+0x1d0>
 8021b9a:	2340      	movs	r3, #64	; 0x40
 8021b9c:	616b      	str	r3, [r5, #20]
 8021b9e:	2300      	movs	r3, #0
 8021ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8021ba2:	2320      	movs	r3, #32
 8021ba4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021ba8:	f8cd 800c 	str.w	r8, [sp, #12]
 8021bac:	2330      	movs	r3, #48	; 0x30
 8021bae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8021d54 <_svfiprintf_r+0x1e8>
 8021bb2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021bb6:	f04f 0901 	mov.w	r9, #1
 8021bba:	4623      	mov	r3, r4
 8021bbc:	469a      	mov	sl, r3
 8021bbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021bc2:	b10a      	cbz	r2, 8021bc8 <_svfiprintf_r+0x5c>
 8021bc4:	2a25      	cmp	r2, #37	; 0x25
 8021bc6:	d1f9      	bne.n	8021bbc <_svfiprintf_r+0x50>
 8021bc8:	ebba 0b04 	subs.w	fp, sl, r4
 8021bcc:	d00b      	beq.n	8021be6 <_svfiprintf_r+0x7a>
 8021bce:	465b      	mov	r3, fp
 8021bd0:	4622      	mov	r2, r4
 8021bd2:	4629      	mov	r1, r5
 8021bd4:	4638      	mov	r0, r7
 8021bd6:	f7ff ff6f 	bl	8021ab8 <__ssputs_r>
 8021bda:	3001      	adds	r0, #1
 8021bdc:	f000 80a9 	beq.w	8021d32 <_svfiprintf_r+0x1c6>
 8021be0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021be2:	445a      	add	r2, fp
 8021be4:	9209      	str	r2, [sp, #36]	; 0x24
 8021be6:	f89a 3000 	ldrb.w	r3, [sl]
 8021bea:	2b00      	cmp	r3, #0
 8021bec:	f000 80a1 	beq.w	8021d32 <_svfiprintf_r+0x1c6>
 8021bf0:	2300      	movs	r3, #0
 8021bf2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021bf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021bfa:	f10a 0a01 	add.w	sl, sl, #1
 8021bfe:	9304      	str	r3, [sp, #16]
 8021c00:	9307      	str	r3, [sp, #28]
 8021c02:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021c06:	931a      	str	r3, [sp, #104]	; 0x68
 8021c08:	4654      	mov	r4, sl
 8021c0a:	2205      	movs	r2, #5
 8021c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021c10:	4850      	ldr	r0, [pc, #320]	; (8021d54 <_svfiprintf_r+0x1e8>)
 8021c12:	f7de fae5 	bl	80001e0 <memchr>
 8021c16:	9a04      	ldr	r2, [sp, #16]
 8021c18:	b9d8      	cbnz	r0, 8021c52 <_svfiprintf_r+0xe6>
 8021c1a:	06d0      	lsls	r0, r2, #27
 8021c1c:	bf44      	itt	mi
 8021c1e:	2320      	movmi	r3, #32
 8021c20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021c24:	0711      	lsls	r1, r2, #28
 8021c26:	bf44      	itt	mi
 8021c28:	232b      	movmi	r3, #43	; 0x2b
 8021c2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8021c32:	2b2a      	cmp	r3, #42	; 0x2a
 8021c34:	d015      	beq.n	8021c62 <_svfiprintf_r+0xf6>
 8021c36:	9a07      	ldr	r2, [sp, #28]
 8021c38:	4654      	mov	r4, sl
 8021c3a:	2000      	movs	r0, #0
 8021c3c:	f04f 0c0a 	mov.w	ip, #10
 8021c40:	4621      	mov	r1, r4
 8021c42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021c46:	3b30      	subs	r3, #48	; 0x30
 8021c48:	2b09      	cmp	r3, #9
 8021c4a:	d94d      	bls.n	8021ce8 <_svfiprintf_r+0x17c>
 8021c4c:	b1b0      	cbz	r0, 8021c7c <_svfiprintf_r+0x110>
 8021c4e:	9207      	str	r2, [sp, #28]
 8021c50:	e014      	b.n	8021c7c <_svfiprintf_r+0x110>
 8021c52:	eba0 0308 	sub.w	r3, r0, r8
 8021c56:	fa09 f303 	lsl.w	r3, r9, r3
 8021c5a:	4313      	orrs	r3, r2
 8021c5c:	9304      	str	r3, [sp, #16]
 8021c5e:	46a2      	mov	sl, r4
 8021c60:	e7d2      	b.n	8021c08 <_svfiprintf_r+0x9c>
 8021c62:	9b03      	ldr	r3, [sp, #12]
 8021c64:	1d19      	adds	r1, r3, #4
 8021c66:	681b      	ldr	r3, [r3, #0]
 8021c68:	9103      	str	r1, [sp, #12]
 8021c6a:	2b00      	cmp	r3, #0
 8021c6c:	bfbb      	ittet	lt
 8021c6e:	425b      	neglt	r3, r3
 8021c70:	f042 0202 	orrlt.w	r2, r2, #2
 8021c74:	9307      	strge	r3, [sp, #28]
 8021c76:	9307      	strlt	r3, [sp, #28]
 8021c78:	bfb8      	it	lt
 8021c7a:	9204      	strlt	r2, [sp, #16]
 8021c7c:	7823      	ldrb	r3, [r4, #0]
 8021c7e:	2b2e      	cmp	r3, #46	; 0x2e
 8021c80:	d10c      	bne.n	8021c9c <_svfiprintf_r+0x130>
 8021c82:	7863      	ldrb	r3, [r4, #1]
 8021c84:	2b2a      	cmp	r3, #42	; 0x2a
 8021c86:	d134      	bne.n	8021cf2 <_svfiprintf_r+0x186>
 8021c88:	9b03      	ldr	r3, [sp, #12]
 8021c8a:	1d1a      	adds	r2, r3, #4
 8021c8c:	681b      	ldr	r3, [r3, #0]
 8021c8e:	9203      	str	r2, [sp, #12]
 8021c90:	2b00      	cmp	r3, #0
 8021c92:	bfb8      	it	lt
 8021c94:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8021c98:	3402      	adds	r4, #2
 8021c9a:	9305      	str	r3, [sp, #20]
 8021c9c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8021d64 <_svfiprintf_r+0x1f8>
 8021ca0:	7821      	ldrb	r1, [r4, #0]
 8021ca2:	2203      	movs	r2, #3
 8021ca4:	4650      	mov	r0, sl
 8021ca6:	f7de fa9b 	bl	80001e0 <memchr>
 8021caa:	b138      	cbz	r0, 8021cbc <_svfiprintf_r+0x150>
 8021cac:	9b04      	ldr	r3, [sp, #16]
 8021cae:	eba0 000a 	sub.w	r0, r0, sl
 8021cb2:	2240      	movs	r2, #64	; 0x40
 8021cb4:	4082      	lsls	r2, r0
 8021cb6:	4313      	orrs	r3, r2
 8021cb8:	3401      	adds	r4, #1
 8021cba:	9304      	str	r3, [sp, #16]
 8021cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021cc0:	4825      	ldr	r0, [pc, #148]	; (8021d58 <_svfiprintf_r+0x1ec>)
 8021cc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021cc6:	2206      	movs	r2, #6
 8021cc8:	f7de fa8a 	bl	80001e0 <memchr>
 8021ccc:	2800      	cmp	r0, #0
 8021cce:	d038      	beq.n	8021d42 <_svfiprintf_r+0x1d6>
 8021cd0:	4b22      	ldr	r3, [pc, #136]	; (8021d5c <_svfiprintf_r+0x1f0>)
 8021cd2:	bb1b      	cbnz	r3, 8021d1c <_svfiprintf_r+0x1b0>
 8021cd4:	9b03      	ldr	r3, [sp, #12]
 8021cd6:	3307      	adds	r3, #7
 8021cd8:	f023 0307 	bic.w	r3, r3, #7
 8021cdc:	3308      	adds	r3, #8
 8021cde:	9303      	str	r3, [sp, #12]
 8021ce0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021ce2:	4433      	add	r3, r6
 8021ce4:	9309      	str	r3, [sp, #36]	; 0x24
 8021ce6:	e768      	b.n	8021bba <_svfiprintf_r+0x4e>
 8021ce8:	fb0c 3202 	mla	r2, ip, r2, r3
 8021cec:	460c      	mov	r4, r1
 8021cee:	2001      	movs	r0, #1
 8021cf0:	e7a6      	b.n	8021c40 <_svfiprintf_r+0xd4>
 8021cf2:	2300      	movs	r3, #0
 8021cf4:	3401      	adds	r4, #1
 8021cf6:	9305      	str	r3, [sp, #20]
 8021cf8:	4619      	mov	r1, r3
 8021cfa:	f04f 0c0a 	mov.w	ip, #10
 8021cfe:	4620      	mov	r0, r4
 8021d00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021d04:	3a30      	subs	r2, #48	; 0x30
 8021d06:	2a09      	cmp	r2, #9
 8021d08:	d903      	bls.n	8021d12 <_svfiprintf_r+0x1a6>
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	d0c6      	beq.n	8021c9c <_svfiprintf_r+0x130>
 8021d0e:	9105      	str	r1, [sp, #20]
 8021d10:	e7c4      	b.n	8021c9c <_svfiprintf_r+0x130>
 8021d12:	fb0c 2101 	mla	r1, ip, r1, r2
 8021d16:	4604      	mov	r4, r0
 8021d18:	2301      	movs	r3, #1
 8021d1a:	e7f0      	b.n	8021cfe <_svfiprintf_r+0x192>
 8021d1c:	ab03      	add	r3, sp, #12
 8021d1e:	9300      	str	r3, [sp, #0]
 8021d20:	462a      	mov	r2, r5
 8021d22:	4b0f      	ldr	r3, [pc, #60]	; (8021d60 <_svfiprintf_r+0x1f4>)
 8021d24:	a904      	add	r1, sp, #16
 8021d26:	4638      	mov	r0, r7
 8021d28:	f3af 8000 	nop.w
 8021d2c:	1c42      	adds	r2, r0, #1
 8021d2e:	4606      	mov	r6, r0
 8021d30:	d1d6      	bne.n	8021ce0 <_svfiprintf_r+0x174>
 8021d32:	89ab      	ldrh	r3, [r5, #12]
 8021d34:	065b      	lsls	r3, r3, #25
 8021d36:	f53f af2d 	bmi.w	8021b94 <_svfiprintf_r+0x28>
 8021d3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021d3c:	b01d      	add	sp, #116	; 0x74
 8021d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021d42:	ab03      	add	r3, sp, #12
 8021d44:	9300      	str	r3, [sp, #0]
 8021d46:	462a      	mov	r2, r5
 8021d48:	4b05      	ldr	r3, [pc, #20]	; (8021d60 <_svfiprintf_r+0x1f4>)
 8021d4a:	a904      	add	r1, sp, #16
 8021d4c:	4638      	mov	r0, r7
 8021d4e:	f000 f9bd 	bl	80220cc <_printf_i>
 8021d52:	e7eb      	b.n	8021d2c <_svfiprintf_r+0x1c0>
 8021d54:	0802772b 	.word	0x0802772b
 8021d58:	08027735 	.word	0x08027735
 8021d5c:	00000000 	.word	0x00000000
 8021d60:	08021ab9 	.word	0x08021ab9
 8021d64:	08027731 	.word	0x08027731

08021d68 <__sfputc_r>:
 8021d68:	6893      	ldr	r3, [r2, #8]
 8021d6a:	3b01      	subs	r3, #1
 8021d6c:	2b00      	cmp	r3, #0
 8021d6e:	b410      	push	{r4}
 8021d70:	6093      	str	r3, [r2, #8]
 8021d72:	da08      	bge.n	8021d86 <__sfputc_r+0x1e>
 8021d74:	6994      	ldr	r4, [r2, #24]
 8021d76:	42a3      	cmp	r3, r4
 8021d78:	db01      	blt.n	8021d7e <__sfputc_r+0x16>
 8021d7a:	290a      	cmp	r1, #10
 8021d7c:	d103      	bne.n	8021d86 <__sfputc_r+0x1e>
 8021d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d82:	f7ff bc70 	b.w	8021666 <__swbuf_r>
 8021d86:	6813      	ldr	r3, [r2, #0]
 8021d88:	1c58      	adds	r0, r3, #1
 8021d8a:	6010      	str	r0, [r2, #0]
 8021d8c:	7019      	strb	r1, [r3, #0]
 8021d8e:	4608      	mov	r0, r1
 8021d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021d94:	4770      	bx	lr

08021d96 <__sfputs_r>:
 8021d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d98:	4606      	mov	r6, r0
 8021d9a:	460f      	mov	r7, r1
 8021d9c:	4614      	mov	r4, r2
 8021d9e:	18d5      	adds	r5, r2, r3
 8021da0:	42ac      	cmp	r4, r5
 8021da2:	d101      	bne.n	8021da8 <__sfputs_r+0x12>
 8021da4:	2000      	movs	r0, #0
 8021da6:	e007      	b.n	8021db8 <__sfputs_r+0x22>
 8021da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021dac:	463a      	mov	r2, r7
 8021dae:	4630      	mov	r0, r6
 8021db0:	f7ff ffda 	bl	8021d68 <__sfputc_r>
 8021db4:	1c43      	adds	r3, r0, #1
 8021db6:	d1f3      	bne.n	8021da0 <__sfputs_r+0xa>
 8021db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021dbc <_vfiprintf_r>:
 8021dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dc0:	460d      	mov	r5, r1
 8021dc2:	b09d      	sub	sp, #116	; 0x74
 8021dc4:	4614      	mov	r4, r2
 8021dc6:	4698      	mov	r8, r3
 8021dc8:	4606      	mov	r6, r0
 8021dca:	b118      	cbz	r0, 8021dd4 <_vfiprintf_r+0x18>
 8021dcc:	6a03      	ldr	r3, [r0, #32]
 8021dce:	b90b      	cbnz	r3, 8021dd4 <_vfiprintf_r+0x18>
 8021dd0:	f7ff fa40 	bl	8021254 <__sinit>
 8021dd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021dd6:	07d9      	lsls	r1, r3, #31
 8021dd8:	d405      	bmi.n	8021de6 <_vfiprintf_r+0x2a>
 8021dda:	89ab      	ldrh	r3, [r5, #12]
 8021ddc:	059a      	lsls	r2, r3, #22
 8021dde:	d402      	bmi.n	8021de6 <_vfiprintf_r+0x2a>
 8021de0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021de2:	f7ff fe06 	bl	80219f2 <__retarget_lock_acquire_recursive>
 8021de6:	89ab      	ldrh	r3, [r5, #12]
 8021de8:	071b      	lsls	r3, r3, #28
 8021dea:	d501      	bpl.n	8021df0 <_vfiprintf_r+0x34>
 8021dec:	692b      	ldr	r3, [r5, #16]
 8021dee:	b99b      	cbnz	r3, 8021e18 <_vfiprintf_r+0x5c>
 8021df0:	4629      	mov	r1, r5
 8021df2:	4630      	mov	r0, r6
 8021df4:	f7ff fc74 	bl	80216e0 <__swsetup_r>
 8021df8:	b170      	cbz	r0, 8021e18 <_vfiprintf_r+0x5c>
 8021dfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021dfc:	07dc      	lsls	r4, r3, #31
 8021dfe:	d504      	bpl.n	8021e0a <_vfiprintf_r+0x4e>
 8021e00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8021e04:	b01d      	add	sp, #116	; 0x74
 8021e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e0a:	89ab      	ldrh	r3, [r5, #12]
 8021e0c:	0598      	lsls	r0, r3, #22
 8021e0e:	d4f7      	bmi.n	8021e00 <_vfiprintf_r+0x44>
 8021e10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021e12:	f7ff fdef 	bl	80219f4 <__retarget_lock_release_recursive>
 8021e16:	e7f3      	b.n	8021e00 <_vfiprintf_r+0x44>
 8021e18:	2300      	movs	r3, #0
 8021e1a:	9309      	str	r3, [sp, #36]	; 0x24
 8021e1c:	2320      	movs	r3, #32
 8021e1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8021e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8021e26:	2330      	movs	r3, #48	; 0x30
 8021e28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8021fdc <_vfiprintf_r+0x220>
 8021e2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8021e30:	f04f 0901 	mov.w	r9, #1
 8021e34:	4623      	mov	r3, r4
 8021e36:	469a      	mov	sl, r3
 8021e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021e3c:	b10a      	cbz	r2, 8021e42 <_vfiprintf_r+0x86>
 8021e3e:	2a25      	cmp	r2, #37	; 0x25
 8021e40:	d1f9      	bne.n	8021e36 <_vfiprintf_r+0x7a>
 8021e42:	ebba 0b04 	subs.w	fp, sl, r4
 8021e46:	d00b      	beq.n	8021e60 <_vfiprintf_r+0xa4>
 8021e48:	465b      	mov	r3, fp
 8021e4a:	4622      	mov	r2, r4
 8021e4c:	4629      	mov	r1, r5
 8021e4e:	4630      	mov	r0, r6
 8021e50:	f7ff ffa1 	bl	8021d96 <__sfputs_r>
 8021e54:	3001      	adds	r0, #1
 8021e56:	f000 80a9 	beq.w	8021fac <_vfiprintf_r+0x1f0>
 8021e5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021e5c:	445a      	add	r2, fp
 8021e5e:	9209      	str	r2, [sp, #36]	; 0x24
 8021e60:	f89a 3000 	ldrb.w	r3, [sl]
 8021e64:	2b00      	cmp	r3, #0
 8021e66:	f000 80a1 	beq.w	8021fac <_vfiprintf_r+0x1f0>
 8021e6a:	2300      	movs	r3, #0
 8021e6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8021e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021e74:	f10a 0a01 	add.w	sl, sl, #1
 8021e78:	9304      	str	r3, [sp, #16]
 8021e7a:	9307      	str	r3, [sp, #28]
 8021e7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8021e80:	931a      	str	r3, [sp, #104]	; 0x68
 8021e82:	4654      	mov	r4, sl
 8021e84:	2205      	movs	r2, #5
 8021e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021e8a:	4854      	ldr	r0, [pc, #336]	; (8021fdc <_vfiprintf_r+0x220>)
 8021e8c:	f7de f9a8 	bl	80001e0 <memchr>
 8021e90:	9a04      	ldr	r2, [sp, #16]
 8021e92:	b9d8      	cbnz	r0, 8021ecc <_vfiprintf_r+0x110>
 8021e94:	06d1      	lsls	r1, r2, #27
 8021e96:	bf44      	itt	mi
 8021e98:	2320      	movmi	r3, #32
 8021e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021e9e:	0713      	lsls	r3, r2, #28
 8021ea0:	bf44      	itt	mi
 8021ea2:	232b      	movmi	r3, #43	; 0x2b
 8021ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8021ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8021eac:	2b2a      	cmp	r3, #42	; 0x2a
 8021eae:	d015      	beq.n	8021edc <_vfiprintf_r+0x120>
 8021eb0:	9a07      	ldr	r2, [sp, #28]
 8021eb2:	4654      	mov	r4, sl
 8021eb4:	2000      	movs	r0, #0
 8021eb6:	f04f 0c0a 	mov.w	ip, #10
 8021eba:	4621      	mov	r1, r4
 8021ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021ec0:	3b30      	subs	r3, #48	; 0x30
 8021ec2:	2b09      	cmp	r3, #9
 8021ec4:	d94d      	bls.n	8021f62 <_vfiprintf_r+0x1a6>
 8021ec6:	b1b0      	cbz	r0, 8021ef6 <_vfiprintf_r+0x13a>
 8021ec8:	9207      	str	r2, [sp, #28]
 8021eca:	e014      	b.n	8021ef6 <_vfiprintf_r+0x13a>
 8021ecc:	eba0 0308 	sub.w	r3, r0, r8
 8021ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8021ed4:	4313      	orrs	r3, r2
 8021ed6:	9304      	str	r3, [sp, #16]
 8021ed8:	46a2      	mov	sl, r4
 8021eda:	e7d2      	b.n	8021e82 <_vfiprintf_r+0xc6>
 8021edc:	9b03      	ldr	r3, [sp, #12]
 8021ede:	1d19      	adds	r1, r3, #4
 8021ee0:	681b      	ldr	r3, [r3, #0]
 8021ee2:	9103      	str	r1, [sp, #12]
 8021ee4:	2b00      	cmp	r3, #0
 8021ee6:	bfbb      	ittet	lt
 8021ee8:	425b      	neglt	r3, r3
 8021eea:	f042 0202 	orrlt.w	r2, r2, #2
 8021eee:	9307      	strge	r3, [sp, #28]
 8021ef0:	9307      	strlt	r3, [sp, #28]
 8021ef2:	bfb8      	it	lt
 8021ef4:	9204      	strlt	r2, [sp, #16]
 8021ef6:	7823      	ldrb	r3, [r4, #0]
 8021ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8021efa:	d10c      	bne.n	8021f16 <_vfiprintf_r+0x15a>
 8021efc:	7863      	ldrb	r3, [r4, #1]
 8021efe:	2b2a      	cmp	r3, #42	; 0x2a
 8021f00:	d134      	bne.n	8021f6c <_vfiprintf_r+0x1b0>
 8021f02:	9b03      	ldr	r3, [sp, #12]
 8021f04:	1d1a      	adds	r2, r3, #4
 8021f06:	681b      	ldr	r3, [r3, #0]
 8021f08:	9203      	str	r2, [sp, #12]
 8021f0a:	2b00      	cmp	r3, #0
 8021f0c:	bfb8      	it	lt
 8021f0e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8021f12:	3402      	adds	r4, #2
 8021f14:	9305      	str	r3, [sp, #20]
 8021f16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8021fec <_vfiprintf_r+0x230>
 8021f1a:	7821      	ldrb	r1, [r4, #0]
 8021f1c:	2203      	movs	r2, #3
 8021f1e:	4650      	mov	r0, sl
 8021f20:	f7de f95e 	bl	80001e0 <memchr>
 8021f24:	b138      	cbz	r0, 8021f36 <_vfiprintf_r+0x17a>
 8021f26:	9b04      	ldr	r3, [sp, #16]
 8021f28:	eba0 000a 	sub.w	r0, r0, sl
 8021f2c:	2240      	movs	r2, #64	; 0x40
 8021f2e:	4082      	lsls	r2, r0
 8021f30:	4313      	orrs	r3, r2
 8021f32:	3401      	adds	r4, #1
 8021f34:	9304      	str	r3, [sp, #16]
 8021f36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f3a:	4829      	ldr	r0, [pc, #164]	; (8021fe0 <_vfiprintf_r+0x224>)
 8021f3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8021f40:	2206      	movs	r2, #6
 8021f42:	f7de f94d 	bl	80001e0 <memchr>
 8021f46:	2800      	cmp	r0, #0
 8021f48:	d03f      	beq.n	8021fca <_vfiprintf_r+0x20e>
 8021f4a:	4b26      	ldr	r3, [pc, #152]	; (8021fe4 <_vfiprintf_r+0x228>)
 8021f4c:	bb1b      	cbnz	r3, 8021f96 <_vfiprintf_r+0x1da>
 8021f4e:	9b03      	ldr	r3, [sp, #12]
 8021f50:	3307      	adds	r3, #7
 8021f52:	f023 0307 	bic.w	r3, r3, #7
 8021f56:	3308      	adds	r3, #8
 8021f58:	9303      	str	r3, [sp, #12]
 8021f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021f5c:	443b      	add	r3, r7
 8021f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8021f60:	e768      	b.n	8021e34 <_vfiprintf_r+0x78>
 8021f62:	fb0c 3202 	mla	r2, ip, r2, r3
 8021f66:	460c      	mov	r4, r1
 8021f68:	2001      	movs	r0, #1
 8021f6a:	e7a6      	b.n	8021eba <_vfiprintf_r+0xfe>
 8021f6c:	2300      	movs	r3, #0
 8021f6e:	3401      	adds	r4, #1
 8021f70:	9305      	str	r3, [sp, #20]
 8021f72:	4619      	mov	r1, r3
 8021f74:	f04f 0c0a 	mov.w	ip, #10
 8021f78:	4620      	mov	r0, r4
 8021f7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021f7e:	3a30      	subs	r2, #48	; 0x30
 8021f80:	2a09      	cmp	r2, #9
 8021f82:	d903      	bls.n	8021f8c <_vfiprintf_r+0x1d0>
 8021f84:	2b00      	cmp	r3, #0
 8021f86:	d0c6      	beq.n	8021f16 <_vfiprintf_r+0x15a>
 8021f88:	9105      	str	r1, [sp, #20]
 8021f8a:	e7c4      	b.n	8021f16 <_vfiprintf_r+0x15a>
 8021f8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021f90:	4604      	mov	r4, r0
 8021f92:	2301      	movs	r3, #1
 8021f94:	e7f0      	b.n	8021f78 <_vfiprintf_r+0x1bc>
 8021f96:	ab03      	add	r3, sp, #12
 8021f98:	9300      	str	r3, [sp, #0]
 8021f9a:	462a      	mov	r2, r5
 8021f9c:	4b12      	ldr	r3, [pc, #72]	; (8021fe8 <_vfiprintf_r+0x22c>)
 8021f9e:	a904      	add	r1, sp, #16
 8021fa0:	4630      	mov	r0, r6
 8021fa2:	f3af 8000 	nop.w
 8021fa6:	4607      	mov	r7, r0
 8021fa8:	1c78      	adds	r0, r7, #1
 8021faa:	d1d6      	bne.n	8021f5a <_vfiprintf_r+0x19e>
 8021fac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8021fae:	07d9      	lsls	r1, r3, #31
 8021fb0:	d405      	bmi.n	8021fbe <_vfiprintf_r+0x202>
 8021fb2:	89ab      	ldrh	r3, [r5, #12]
 8021fb4:	059a      	lsls	r2, r3, #22
 8021fb6:	d402      	bmi.n	8021fbe <_vfiprintf_r+0x202>
 8021fb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8021fba:	f7ff fd1b 	bl	80219f4 <__retarget_lock_release_recursive>
 8021fbe:	89ab      	ldrh	r3, [r5, #12]
 8021fc0:	065b      	lsls	r3, r3, #25
 8021fc2:	f53f af1d 	bmi.w	8021e00 <_vfiprintf_r+0x44>
 8021fc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8021fc8:	e71c      	b.n	8021e04 <_vfiprintf_r+0x48>
 8021fca:	ab03      	add	r3, sp, #12
 8021fcc:	9300      	str	r3, [sp, #0]
 8021fce:	462a      	mov	r2, r5
 8021fd0:	4b05      	ldr	r3, [pc, #20]	; (8021fe8 <_vfiprintf_r+0x22c>)
 8021fd2:	a904      	add	r1, sp, #16
 8021fd4:	4630      	mov	r0, r6
 8021fd6:	f000 f879 	bl	80220cc <_printf_i>
 8021fda:	e7e4      	b.n	8021fa6 <_vfiprintf_r+0x1ea>
 8021fdc:	0802772b 	.word	0x0802772b
 8021fe0:	08027735 	.word	0x08027735
 8021fe4:	00000000 	.word	0x00000000
 8021fe8:	08021d97 	.word	0x08021d97
 8021fec:	08027731 	.word	0x08027731

08021ff0 <_printf_common>:
 8021ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021ff4:	4616      	mov	r6, r2
 8021ff6:	4699      	mov	r9, r3
 8021ff8:	688a      	ldr	r2, [r1, #8]
 8021ffa:	690b      	ldr	r3, [r1, #16]
 8021ffc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022000:	4293      	cmp	r3, r2
 8022002:	bfb8      	it	lt
 8022004:	4613      	movlt	r3, r2
 8022006:	6033      	str	r3, [r6, #0]
 8022008:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802200c:	4607      	mov	r7, r0
 802200e:	460c      	mov	r4, r1
 8022010:	b10a      	cbz	r2, 8022016 <_printf_common+0x26>
 8022012:	3301      	adds	r3, #1
 8022014:	6033      	str	r3, [r6, #0]
 8022016:	6823      	ldr	r3, [r4, #0]
 8022018:	0699      	lsls	r1, r3, #26
 802201a:	bf42      	ittt	mi
 802201c:	6833      	ldrmi	r3, [r6, #0]
 802201e:	3302      	addmi	r3, #2
 8022020:	6033      	strmi	r3, [r6, #0]
 8022022:	6825      	ldr	r5, [r4, #0]
 8022024:	f015 0506 	ands.w	r5, r5, #6
 8022028:	d106      	bne.n	8022038 <_printf_common+0x48>
 802202a:	f104 0a19 	add.w	sl, r4, #25
 802202e:	68e3      	ldr	r3, [r4, #12]
 8022030:	6832      	ldr	r2, [r6, #0]
 8022032:	1a9b      	subs	r3, r3, r2
 8022034:	42ab      	cmp	r3, r5
 8022036:	dc26      	bgt.n	8022086 <_printf_common+0x96>
 8022038:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802203c:	1e13      	subs	r3, r2, #0
 802203e:	6822      	ldr	r2, [r4, #0]
 8022040:	bf18      	it	ne
 8022042:	2301      	movne	r3, #1
 8022044:	0692      	lsls	r2, r2, #26
 8022046:	d42b      	bmi.n	80220a0 <_printf_common+0xb0>
 8022048:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802204c:	4649      	mov	r1, r9
 802204e:	4638      	mov	r0, r7
 8022050:	47c0      	blx	r8
 8022052:	3001      	adds	r0, #1
 8022054:	d01e      	beq.n	8022094 <_printf_common+0xa4>
 8022056:	6823      	ldr	r3, [r4, #0]
 8022058:	6922      	ldr	r2, [r4, #16]
 802205a:	f003 0306 	and.w	r3, r3, #6
 802205e:	2b04      	cmp	r3, #4
 8022060:	bf02      	ittt	eq
 8022062:	68e5      	ldreq	r5, [r4, #12]
 8022064:	6833      	ldreq	r3, [r6, #0]
 8022066:	1aed      	subeq	r5, r5, r3
 8022068:	68a3      	ldr	r3, [r4, #8]
 802206a:	bf0c      	ite	eq
 802206c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022070:	2500      	movne	r5, #0
 8022072:	4293      	cmp	r3, r2
 8022074:	bfc4      	itt	gt
 8022076:	1a9b      	subgt	r3, r3, r2
 8022078:	18ed      	addgt	r5, r5, r3
 802207a:	2600      	movs	r6, #0
 802207c:	341a      	adds	r4, #26
 802207e:	42b5      	cmp	r5, r6
 8022080:	d11a      	bne.n	80220b8 <_printf_common+0xc8>
 8022082:	2000      	movs	r0, #0
 8022084:	e008      	b.n	8022098 <_printf_common+0xa8>
 8022086:	2301      	movs	r3, #1
 8022088:	4652      	mov	r2, sl
 802208a:	4649      	mov	r1, r9
 802208c:	4638      	mov	r0, r7
 802208e:	47c0      	blx	r8
 8022090:	3001      	adds	r0, #1
 8022092:	d103      	bne.n	802209c <_printf_common+0xac>
 8022094:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802209c:	3501      	adds	r5, #1
 802209e:	e7c6      	b.n	802202e <_printf_common+0x3e>
 80220a0:	18e1      	adds	r1, r4, r3
 80220a2:	1c5a      	adds	r2, r3, #1
 80220a4:	2030      	movs	r0, #48	; 0x30
 80220a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80220aa:	4422      	add	r2, r4
 80220ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80220b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80220b4:	3302      	adds	r3, #2
 80220b6:	e7c7      	b.n	8022048 <_printf_common+0x58>
 80220b8:	2301      	movs	r3, #1
 80220ba:	4622      	mov	r2, r4
 80220bc:	4649      	mov	r1, r9
 80220be:	4638      	mov	r0, r7
 80220c0:	47c0      	blx	r8
 80220c2:	3001      	adds	r0, #1
 80220c4:	d0e6      	beq.n	8022094 <_printf_common+0xa4>
 80220c6:	3601      	adds	r6, #1
 80220c8:	e7d9      	b.n	802207e <_printf_common+0x8e>
	...

080220cc <_printf_i>:
 80220cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80220d0:	7e0f      	ldrb	r7, [r1, #24]
 80220d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80220d4:	2f78      	cmp	r7, #120	; 0x78
 80220d6:	4691      	mov	r9, r2
 80220d8:	4680      	mov	r8, r0
 80220da:	460c      	mov	r4, r1
 80220dc:	469a      	mov	sl, r3
 80220de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80220e2:	d807      	bhi.n	80220f4 <_printf_i+0x28>
 80220e4:	2f62      	cmp	r7, #98	; 0x62
 80220e6:	d80a      	bhi.n	80220fe <_printf_i+0x32>
 80220e8:	2f00      	cmp	r7, #0
 80220ea:	f000 80d4 	beq.w	8022296 <_printf_i+0x1ca>
 80220ee:	2f58      	cmp	r7, #88	; 0x58
 80220f0:	f000 80c0 	beq.w	8022274 <_printf_i+0x1a8>
 80220f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80220f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80220fc:	e03a      	b.n	8022174 <_printf_i+0xa8>
 80220fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022102:	2b15      	cmp	r3, #21
 8022104:	d8f6      	bhi.n	80220f4 <_printf_i+0x28>
 8022106:	a101      	add	r1, pc, #4	; (adr r1, 802210c <_printf_i+0x40>)
 8022108:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802210c:	08022165 	.word	0x08022165
 8022110:	08022179 	.word	0x08022179
 8022114:	080220f5 	.word	0x080220f5
 8022118:	080220f5 	.word	0x080220f5
 802211c:	080220f5 	.word	0x080220f5
 8022120:	080220f5 	.word	0x080220f5
 8022124:	08022179 	.word	0x08022179
 8022128:	080220f5 	.word	0x080220f5
 802212c:	080220f5 	.word	0x080220f5
 8022130:	080220f5 	.word	0x080220f5
 8022134:	080220f5 	.word	0x080220f5
 8022138:	0802227d 	.word	0x0802227d
 802213c:	080221a5 	.word	0x080221a5
 8022140:	08022237 	.word	0x08022237
 8022144:	080220f5 	.word	0x080220f5
 8022148:	080220f5 	.word	0x080220f5
 802214c:	0802229f 	.word	0x0802229f
 8022150:	080220f5 	.word	0x080220f5
 8022154:	080221a5 	.word	0x080221a5
 8022158:	080220f5 	.word	0x080220f5
 802215c:	080220f5 	.word	0x080220f5
 8022160:	0802223f 	.word	0x0802223f
 8022164:	682b      	ldr	r3, [r5, #0]
 8022166:	1d1a      	adds	r2, r3, #4
 8022168:	681b      	ldr	r3, [r3, #0]
 802216a:	602a      	str	r2, [r5, #0]
 802216c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022170:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022174:	2301      	movs	r3, #1
 8022176:	e09f      	b.n	80222b8 <_printf_i+0x1ec>
 8022178:	6820      	ldr	r0, [r4, #0]
 802217a:	682b      	ldr	r3, [r5, #0]
 802217c:	0607      	lsls	r7, r0, #24
 802217e:	f103 0104 	add.w	r1, r3, #4
 8022182:	6029      	str	r1, [r5, #0]
 8022184:	d501      	bpl.n	802218a <_printf_i+0xbe>
 8022186:	681e      	ldr	r6, [r3, #0]
 8022188:	e003      	b.n	8022192 <_printf_i+0xc6>
 802218a:	0646      	lsls	r6, r0, #25
 802218c:	d5fb      	bpl.n	8022186 <_printf_i+0xba>
 802218e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8022192:	2e00      	cmp	r6, #0
 8022194:	da03      	bge.n	802219e <_printf_i+0xd2>
 8022196:	232d      	movs	r3, #45	; 0x2d
 8022198:	4276      	negs	r6, r6
 802219a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802219e:	485a      	ldr	r0, [pc, #360]	; (8022308 <_printf_i+0x23c>)
 80221a0:	230a      	movs	r3, #10
 80221a2:	e012      	b.n	80221ca <_printf_i+0xfe>
 80221a4:	682b      	ldr	r3, [r5, #0]
 80221a6:	6820      	ldr	r0, [r4, #0]
 80221a8:	1d19      	adds	r1, r3, #4
 80221aa:	6029      	str	r1, [r5, #0]
 80221ac:	0605      	lsls	r5, r0, #24
 80221ae:	d501      	bpl.n	80221b4 <_printf_i+0xe8>
 80221b0:	681e      	ldr	r6, [r3, #0]
 80221b2:	e002      	b.n	80221ba <_printf_i+0xee>
 80221b4:	0641      	lsls	r1, r0, #25
 80221b6:	d5fb      	bpl.n	80221b0 <_printf_i+0xe4>
 80221b8:	881e      	ldrh	r6, [r3, #0]
 80221ba:	4853      	ldr	r0, [pc, #332]	; (8022308 <_printf_i+0x23c>)
 80221bc:	2f6f      	cmp	r7, #111	; 0x6f
 80221be:	bf0c      	ite	eq
 80221c0:	2308      	moveq	r3, #8
 80221c2:	230a      	movne	r3, #10
 80221c4:	2100      	movs	r1, #0
 80221c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80221ca:	6865      	ldr	r5, [r4, #4]
 80221cc:	60a5      	str	r5, [r4, #8]
 80221ce:	2d00      	cmp	r5, #0
 80221d0:	bfa2      	ittt	ge
 80221d2:	6821      	ldrge	r1, [r4, #0]
 80221d4:	f021 0104 	bicge.w	r1, r1, #4
 80221d8:	6021      	strge	r1, [r4, #0]
 80221da:	b90e      	cbnz	r6, 80221e0 <_printf_i+0x114>
 80221dc:	2d00      	cmp	r5, #0
 80221de:	d04b      	beq.n	8022278 <_printf_i+0x1ac>
 80221e0:	4615      	mov	r5, r2
 80221e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80221e6:	fb03 6711 	mls	r7, r3, r1, r6
 80221ea:	5dc7      	ldrb	r7, [r0, r7]
 80221ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80221f0:	4637      	mov	r7, r6
 80221f2:	42bb      	cmp	r3, r7
 80221f4:	460e      	mov	r6, r1
 80221f6:	d9f4      	bls.n	80221e2 <_printf_i+0x116>
 80221f8:	2b08      	cmp	r3, #8
 80221fa:	d10b      	bne.n	8022214 <_printf_i+0x148>
 80221fc:	6823      	ldr	r3, [r4, #0]
 80221fe:	07de      	lsls	r6, r3, #31
 8022200:	d508      	bpl.n	8022214 <_printf_i+0x148>
 8022202:	6923      	ldr	r3, [r4, #16]
 8022204:	6861      	ldr	r1, [r4, #4]
 8022206:	4299      	cmp	r1, r3
 8022208:	bfde      	ittt	le
 802220a:	2330      	movle	r3, #48	; 0x30
 802220c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022210:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8022214:	1b52      	subs	r2, r2, r5
 8022216:	6122      	str	r2, [r4, #16]
 8022218:	f8cd a000 	str.w	sl, [sp]
 802221c:	464b      	mov	r3, r9
 802221e:	aa03      	add	r2, sp, #12
 8022220:	4621      	mov	r1, r4
 8022222:	4640      	mov	r0, r8
 8022224:	f7ff fee4 	bl	8021ff0 <_printf_common>
 8022228:	3001      	adds	r0, #1
 802222a:	d14a      	bne.n	80222c2 <_printf_i+0x1f6>
 802222c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022230:	b004      	add	sp, #16
 8022232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022236:	6823      	ldr	r3, [r4, #0]
 8022238:	f043 0320 	orr.w	r3, r3, #32
 802223c:	6023      	str	r3, [r4, #0]
 802223e:	4833      	ldr	r0, [pc, #204]	; (802230c <_printf_i+0x240>)
 8022240:	2778      	movs	r7, #120	; 0x78
 8022242:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022246:	6823      	ldr	r3, [r4, #0]
 8022248:	6829      	ldr	r1, [r5, #0]
 802224a:	061f      	lsls	r7, r3, #24
 802224c:	f851 6b04 	ldr.w	r6, [r1], #4
 8022250:	d402      	bmi.n	8022258 <_printf_i+0x18c>
 8022252:	065f      	lsls	r7, r3, #25
 8022254:	bf48      	it	mi
 8022256:	b2b6      	uxthmi	r6, r6
 8022258:	07df      	lsls	r7, r3, #31
 802225a:	bf48      	it	mi
 802225c:	f043 0320 	orrmi.w	r3, r3, #32
 8022260:	6029      	str	r1, [r5, #0]
 8022262:	bf48      	it	mi
 8022264:	6023      	strmi	r3, [r4, #0]
 8022266:	b91e      	cbnz	r6, 8022270 <_printf_i+0x1a4>
 8022268:	6823      	ldr	r3, [r4, #0]
 802226a:	f023 0320 	bic.w	r3, r3, #32
 802226e:	6023      	str	r3, [r4, #0]
 8022270:	2310      	movs	r3, #16
 8022272:	e7a7      	b.n	80221c4 <_printf_i+0xf8>
 8022274:	4824      	ldr	r0, [pc, #144]	; (8022308 <_printf_i+0x23c>)
 8022276:	e7e4      	b.n	8022242 <_printf_i+0x176>
 8022278:	4615      	mov	r5, r2
 802227a:	e7bd      	b.n	80221f8 <_printf_i+0x12c>
 802227c:	682b      	ldr	r3, [r5, #0]
 802227e:	6826      	ldr	r6, [r4, #0]
 8022280:	6961      	ldr	r1, [r4, #20]
 8022282:	1d18      	adds	r0, r3, #4
 8022284:	6028      	str	r0, [r5, #0]
 8022286:	0635      	lsls	r5, r6, #24
 8022288:	681b      	ldr	r3, [r3, #0]
 802228a:	d501      	bpl.n	8022290 <_printf_i+0x1c4>
 802228c:	6019      	str	r1, [r3, #0]
 802228e:	e002      	b.n	8022296 <_printf_i+0x1ca>
 8022290:	0670      	lsls	r0, r6, #25
 8022292:	d5fb      	bpl.n	802228c <_printf_i+0x1c0>
 8022294:	8019      	strh	r1, [r3, #0]
 8022296:	2300      	movs	r3, #0
 8022298:	6123      	str	r3, [r4, #16]
 802229a:	4615      	mov	r5, r2
 802229c:	e7bc      	b.n	8022218 <_printf_i+0x14c>
 802229e:	682b      	ldr	r3, [r5, #0]
 80222a0:	1d1a      	adds	r2, r3, #4
 80222a2:	602a      	str	r2, [r5, #0]
 80222a4:	681d      	ldr	r5, [r3, #0]
 80222a6:	6862      	ldr	r2, [r4, #4]
 80222a8:	2100      	movs	r1, #0
 80222aa:	4628      	mov	r0, r5
 80222ac:	f7dd ff98 	bl	80001e0 <memchr>
 80222b0:	b108      	cbz	r0, 80222b6 <_printf_i+0x1ea>
 80222b2:	1b40      	subs	r0, r0, r5
 80222b4:	6060      	str	r0, [r4, #4]
 80222b6:	6863      	ldr	r3, [r4, #4]
 80222b8:	6123      	str	r3, [r4, #16]
 80222ba:	2300      	movs	r3, #0
 80222bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80222c0:	e7aa      	b.n	8022218 <_printf_i+0x14c>
 80222c2:	6923      	ldr	r3, [r4, #16]
 80222c4:	462a      	mov	r2, r5
 80222c6:	4649      	mov	r1, r9
 80222c8:	4640      	mov	r0, r8
 80222ca:	47d0      	blx	sl
 80222cc:	3001      	adds	r0, #1
 80222ce:	d0ad      	beq.n	802222c <_printf_i+0x160>
 80222d0:	6823      	ldr	r3, [r4, #0]
 80222d2:	079b      	lsls	r3, r3, #30
 80222d4:	d413      	bmi.n	80222fe <_printf_i+0x232>
 80222d6:	68e0      	ldr	r0, [r4, #12]
 80222d8:	9b03      	ldr	r3, [sp, #12]
 80222da:	4298      	cmp	r0, r3
 80222dc:	bfb8      	it	lt
 80222de:	4618      	movlt	r0, r3
 80222e0:	e7a6      	b.n	8022230 <_printf_i+0x164>
 80222e2:	2301      	movs	r3, #1
 80222e4:	4632      	mov	r2, r6
 80222e6:	4649      	mov	r1, r9
 80222e8:	4640      	mov	r0, r8
 80222ea:	47d0      	blx	sl
 80222ec:	3001      	adds	r0, #1
 80222ee:	d09d      	beq.n	802222c <_printf_i+0x160>
 80222f0:	3501      	adds	r5, #1
 80222f2:	68e3      	ldr	r3, [r4, #12]
 80222f4:	9903      	ldr	r1, [sp, #12]
 80222f6:	1a5b      	subs	r3, r3, r1
 80222f8:	42ab      	cmp	r3, r5
 80222fa:	dcf2      	bgt.n	80222e2 <_printf_i+0x216>
 80222fc:	e7eb      	b.n	80222d6 <_printf_i+0x20a>
 80222fe:	2500      	movs	r5, #0
 8022300:	f104 0619 	add.w	r6, r4, #25
 8022304:	e7f5      	b.n	80222f2 <_printf_i+0x226>
 8022306:	bf00      	nop
 8022308:	0802773c 	.word	0x0802773c
 802230c:	0802774d 	.word	0x0802774d

08022310 <__sflush_r>:
 8022310:	898a      	ldrh	r2, [r1, #12]
 8022312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022316:	4605      	mov	r5, r0
 8022318:	0710      	lsls	r0, r2, #28
 802231a:	460c      	mov	r4, r1
 802231c:	d458      	bmi.n	80223d0 <__sflush_r+0xc0>
 802231e:	684b      	ldr	r3, [r1, #4]
 8022320:	2b00      	cmp	r3, #0
 8022322:	dc05      	bgt.n	8022330 <__sflush_r+0x20>
 8022324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022326:	2b00      	cmp	r3, #0
 8022328:	dc02      	bgt.n	8022330 <__sflush_r+0x20>
 802232a:	2000      	movs	r0, #0
 802232c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022332:	2e00      	cmp	r6, #0
 8022334:	d0f9      	beq.n	802232a <__sflush_r+0x1a>
 8022336:	2300      	movs	r3, #0
 8022338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802233c:	682f      	ldr	r7, [r5, #0]
 802233e:	6a21      	ldr	r1, [r4, #32]
 8022340:	602b      	str	r3, [r5, #0]
 8022342:	d032      	beq.n	80223aa <__sflush_r+0x9a>
 8022344:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022346:	89a3      	ldrh	r3, [r4, #12]
 8022348:	075a      	lsls	r2, r3, #29
 802234a:	d505      	bpl.n	8022358 <__sflush_r+0x48>
 802234c:	6863      	ldr	r3, [r4, #4]
 802234e:	1ac0      	subs	r0, r0, r3
 8022350:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022352:	b10b      	cbz	r3, 8022358 <__sflush_r+0x48>
 8022354:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022356:	1ac0      	subs	r0, r0, r3
 8022358:	2300      	movs	r3, #0
 802235a:	4602      	mov	r2, r0
 802235c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802235e:	6a21      	ldr	r1, [r4, #32]
 8022360:	4628      	mov	r0, r5
 8022362:	47b0      	blx	r6
 8022364:	1c43      	adds	r3, r0, #1
 8022366:	89a3      	ldrh	r3, [r4, #12]
 8022368:	d106      	bne.n	8022378 <__sflush_r+0x68>
 802236a:	6829      	ldr	r1, [r5, #0]
 802236c:	291d      	cmp	r1, #29
 802236e:	d82b      	bhi.n	80223c8 <__sflush_r+0xb8>
 8022370:	4a29      	ldr	r2, [pc, #164]	; (8022418 <__sflush_r+0x108>)
 8022372:	410a      	asrs	r2, r1
 8022374:	07d6      	lsls	r6, r2, #31
 8022376:	d427      	bmi.n	80223c8 <__sflush_r+0xb8>
 8022378:	2200      	movs	r2, #0
 802237a:	6062      	str	r2, [r4, #4]
 802237c:	04d9      	lsls	r1, r3, #19
 802237e:	6922      	ldr	r2, [r4, #16]
 8022380:	6022      	str	r2, [r4, #0]
 8022382:	d504      	bpl.n	802238e <__sflush_r+0x7e>
 8022384:	1c42      	adds	r2, r0, #1
 8022386:	d101      	bne.n	802238c <__sflush_r+0x7c>
 8022388:	682b      	ldr	r3, [r5, #0]
 802238a:	b903      	cbnz	r3, 802238e <__sflush_r+0x7e>
 802238c:	6560      	str	r0, [r4, #84]	; 0x54
 802238e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022390:	602f      	str	r7, [r5, #0]
 8022392:	2900      	cmp	r1, #0
 8022394:	d0c9      	beq.n	802232a <__sflush_r+0x1a>
 8022396:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802239a:	4299      	cmp	r1, r3
 802239c:	d002      	beq.n	80223a4 <__sflush_r+0x94>
 802239e:	4628      	mov	r0, r5
 80223a0:	f7ff fb3e 	bl	8021a20 <_free_r>
 80223a4:	2000      	movs	r0, #0
 80223a6:	6360      	str	r0, [r4, #52]	; 0x34
 80223a8:	e7c0      	b.n	802232c <__sflush_r+0x1c>
 80223aa:	2301      	movs	r3, #1
 80223ac:	4628      	mov	r0, r5
 80223ae:	47b0      	blx	r6
 80223b0:	1c41      	adds	r1, r0, #1
 80223b2:	d1c8      	bne.n	8022346 <__sflush_r+0x36>
 80223b4:	682b      	ldr	r3, [r5, #0]
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d0c5      	beq.n	8022346 <__sflush_r+0x36>
 80223ba:	2b1d      	cmp	r3, #29
 80223bc:	d001      	beq.n	80223c2 <__sflush_r+0xb2>
 80223be:	2b16      	cmp	r3, #22
 80223c0:	d101      	bne.n	80223c6 <__sflush_r+0xb6>
 80223c2:	602f      	str	r7, [r5, #0]
 80223c4:	e7b1      	b.n	802232a <__sflush_r+0x1a>
 80223c6:	89a3      	ldrh	r3, [r4, #12]
 80223c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80223cc:	81a3      	strh	r3, [r4, #12]
 80223ce:	e7ad      	b.n	802232c <__sflush_r+0x1c>
 80223d0:	690f      	ldr	r7, [r1, #16]
 80223d2:	2f00      	cmp	r7, #0
 80223d4:	d0a9      	beq.n	802232a <__sflush_r+0x1a>
 80223d6:	0793      	lsls	r3, r2, #30
 80223d8:	680e      	ldr	r6, [r1, #0]
 80223da:	bf08      	it	eq
 80223dc:	694b      	ldreq	r3, [r1, #20]
 80223de:	600f      	str	r7, [r1, #0]
 80223e0:	bf18      	it	ne
 80223e2:	2300      	movne	r3, #0
 80223e4:	eba6 0807 	sub.w	r8, r6, r7
 80223e8:	608b      	str	r3, [r1, #8]
 80223ea:	f1b8 0f00 	cmp.w	r8, #0
 80223ee:	dd9c      	ble.n	802232a <__sflush_r+0x1a>
 80223f0:	6a21      	ldr	r1, [r4, #32]
 80223f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80223f4:	4643      	mov	r3, r8
 80223f6:	463a      	mov	r2, r7
 80223f8:	4628      	mov	r0, r5
 80223fa:	47b0      	blx	r6
 80223fc:	2800      	cmp	r0, #0
 80223fe:	dc06      	bgt.n	802240e <__sflush_r+0xfe>
 8022400:	89a3      	ldrh	r3, [r4, #12]
 8022402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022406:	81a3      	strh	r3, [r4, #12]
 8022408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802240c:	e78e      	b.n	802232c <__sflush_r+0x1c>
 802240e:	4407      	add	r7, r0
 8022410:	eba8 0800 	sub.w	r8, r8, r0
 8022414:	e7e9      	b.n	80223ea <__sflush_r+0xda>
 8022416:	bf00      	nop
 8022418:	dfbffffe 	.word	0xdfbffffe

0802241c <_fflush_r>:
 802241c:	b538      	push	{r3, r4, r5, lr}
 802241e:	690b      	ldr	r3, [r1, #16]
 8022420:	4605      	mov	r5, r0
 8022422:	460c      	mov	r4, r1
 8022424:	b913      	cbnz	r3, 802242c <_fflush_r+0x10>
 8022426:	2500      	movs	r5, #0
 8022428:	4628      	mov	r0, r5
 802242a:	bd38      	pop	{r3, r4, r5, pc}
 802242c:	b118      	cbz	r0, 8022436 <_fflush_r+0x1a>
 802242e:	6a03      	ldr	r3, [r0, #32]
 8022430:	b90b      	cbnz	r3, 8022436 <_fflush_r+0x1a>
 8022432:	f7fe ff0f 	bl	8021254 <__sinit>
 8022436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802243a:	2b00      	cmp	r3, #0
 802243c:	d0f3      	beq.n	8022426 <_fflush_r+0xa>
 802243e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022440:	07d0      	lsls	r0, r2, #31
 8022442:	d404      	bmi.n	802244e <_fflush_r+0x32>
 8022444:	0599      	lsls	r1, r3, #22
 8022446:	d402      	bmi.n	802244e <_fflush_r+0x32>
 8022448:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802244a:	f7ff fad2 	bl	80219f2 <__retarget_lock_acquire_recursive>
 802244e:	4628      	mov	r0, r5
 8022450:	4621      	mov	r1, r4
 8022452:	f7ff ff5d 	bl	8022310 <__sflush_r>
 8022456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022458:	07da      	lsls	r2, r3, #31
 802245a:	4605      	mov	r5, r0
 802245c:	d4e4      	bmi.n	8022428 <_fflush_r+0xc>
 802245e:	89a3      	ldrh	r3, [r4, #12]
 8022460:	059b      	lsls	r3, r3, #22
 8022462:	d4e1      	bmi.n	8022428 <_fflush_r+0xc>
 8022464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022466:	f7ff fac5 	bl	80219f4 <__retarget_lock_release_recursive>
 802246a:	e7dd      	b.n	8022428 <_fflush_r+0xc>

0802246c <__swhatbuf_r>:
 802246c:	b570      	push	{r4, r5, r6, lr}
 802246e:	460c      	mov	r4, r1
 8022470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022474:	2900      	cmp	r1, #0
 8022476:	b096      	sub	sp, #88	; 0x58
 8022478:	4615      	mov	r5, r2
 802247a:	461e      	mov	r6, r3
 802247c:	da0d      	bge.n	802249a <__swhatbuf_r+0x2e>
 802247e:	89a3      	ldrh	r3, [r4, #12]
 8022480:	f013 0f80 	tst.w	r3, #128	; 0x80
 8022484:	f04f 0100 	mov.w	r1, #0
 8022488:	bf0c      	ite	eq
 802248a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802248e:	2340      	movne	r3, #64	; 0x40
 8022490:	2000      	movs	r0, #0
 8022492:	6031      	str	r1, [r6, #0]
 8022494:	602b      	str	r3, [r5, #0]
 8022496:	b016      	add	sp, #88	; 0x58
 8022498:	bd70      	pop	{r4, r5, r6, pc}
 802249a:	466a      	mov	r2, sp
 802249c:	f000 f878 	bl	8022590 <_fstat_r>
 80224a0:	2800      	cmp	r0, #0
 80224a2:	dbec      	blt.n	802247e <__swhatbuf_r+0x12>
 80224a4:	9901      	ldr	r1, [sp, #4]
 80224a6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80224aa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80224ae:	4259      	negs	r1, r3
 80224b0:	4159      	adcs	r1, r3
 80224b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80224b6:	e7eb      	b.n	8022490 <__swhatbuf_r+0x24>

080224b8 <__smakebuf_r>:
 80224b8:	898b      	ldrh	r3, [r1, #12]
 80224ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80224bc:	079d      	lsls	r5, r3, #30
 80224be:	4606      	mov	r6, r0
 80224c0:	460c      	mov	r4, r1
 80224c2:	d507      	bpl.n	80224d4 <__smakebuf_r+0x1c>
 80224c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80224c8:	6023      	str	r3, [r4, #0]
 80224ca:	6123      	str	r3, [r4, #16]
 80224cc:	2301      	movs	r3, #1
 80224ce:	6163      	str	r3, [r4, #20]
 80224d0:	b002      	add	sp, #8
 80224d2:	bd70      	pop	{r4, r5, r6, pc}
 80224d4:	ab01      	add	r3, sp, #4
 80224d6:	466a      	mov	r2, sp
 80224d8:	f7ff ffc8 	bl	802246c <__swhatbuf_r>
 80224dc:	9900      	ldr	r1, [sp, #0]
 80224de:	4605      	mov	r5, r0
 80224e0:	4630      	mov	r0, r6
 80224e2:	f7fe fd61 	bl	8020fa8 <_malloc_r>
 80224e6:	b948      	cbnz	r0, 80224fc <__smakebuf_r+0x44>
 80224e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80224ec:	059a      	lsls	r2, r3, #22
 80224ee:	d4ef      	bmi.n	80224d0 <__smakebuf_r+0x18>
 80224f0:	f023 0303 	bic.w	r3, r3, #3
 80224f4:	f043 0302 	orr.w	r3, r3, #2
 80224f8:	81a3      	strh	r3, [r4, #12]
 80224fa:	e7e3      	b.n	80224c4 <__smakebuf_r+0xc>
 80224fc:	89a3      	ldrh	r3, [r4, #12]
 80224fe:	6020      	str	r0, [r4, #0]
 8022500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022504:	81a3      	strh	r3, [r4, #12]
 8022506:	9b00      	ldr	r3, [sp, #0]
 8022508:	6163      	str	r3, [r4, #20]
 802250a:	9b01      	ldr	r3, [sp, #4]
 802250c:	6120      	str	r0, [r4, #16]
 802250e:	b15b      	cbz	r3, 8022528 <__smakebuf_r+0x70>
 8022510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022514:	4630      	mov	r0, r6
 8022516:	f000 f84d 	bl	80225b4 <_isatty_r>
 802251a:	b128      	cbz	r0, 8022528 <__smakebuf_r+0x70>
 802251c:	89a3      	ldrh	r3, [r4, #12]
 802251e:	f023 0303 	bic.w	r3, r3, #3
 8022522:	f043 0301 	orr.w	r3, r3, #1
 8022526:	81a3      	strh	r3, [r4, #12]
 8022528:	89a3      	ldrh	r3, [r4, #12]
 802252a:	431d      	orrs	r5, r3
 802252c:	81a5      	strh	r5, [r4, #12]
 802252e:	e7cf      	b.n	80224d0 <__smakebuf_r+0x18>

08022530 <_raise_r>:
 8022530:	291f      	cmp	r1, #31
 8022532:	b538      	push	{r3, r4, r5, lr}
 8022534:	4604      	mov	r4, r0
 8022536:	460d      	mov	r5, r1
 8022538:	d904      	bls.n	8022544 <_raise_r+0x14>
 802253a:	2316      	movs	r3, #22
 802253c:	6003      	str	r3, [r0, #0]
 802253e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8022542:	bd38      	pop	{r3, r4, r5, pc}
 8022544:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8022546:	b112      	cbz	r2, 802254e <_raise_r+0x1e>
 8022548:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802254c:	b94b      	cbnz	r3, 8022562 <_raise_r+0x32>
 802254e:	4620      	mov	r0, r4
 8022550:	f000 f852 	bl	80225f8 <_getpid_r>
 8022554:	462a      	mov	r2, r5
 8022556:	4601      	mov	r1, r0
 8022558:	4620      	mov	r0, r4
 802255a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802255e:	f000 b839 	b.w	80225d4 <_kill_r>
 8022562:	2b01      	cmp	r3, #1
 8022564:	d00a      	beq.n	802257c <_raise_r+0x4c>
 8022566:	1c59      	adds	r1, r3, #1
 8022568:	d103      	bne.n	8022572 <_raise_r+0x42>
 802256a:	2316      	movs	r3, #22
 802256c:	6003      	str	r3, [r0, #0]
 802256e:	2001      	movs	r0, #1
 8022570:	e7e7      	b.n	8022542 <_raise_r+0x12>
 8022572:	2400      	movs	r4, #0
 8022574:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022578:	4628      	mov	r0, r5
 802257a:	4798      	blx	r3
 802257c:	2000      	movs	r0, #0
 802257e:	e7e0      	b.n	8022542 <_raise_r+0x12>

08022580 <raise>:
 8022580:	4b02      	ldr	r3, [pc, #8]	; (802258c <raise+0xc>)
 8022582:	4601      	mov	r1, r0
 8022584:	6818      	ldr	r0, [r3, #0]
 8022586:	f7ff bfd3 	b.w	8022530 <_raise_r>
 802258a:	bf00      	nop
 802258c:	20000094 	.word	0x20000094

08022590 <_fstat_r>:
 8022590:	b538      	push	{r3, r4, r5, lr}
 8022592:	4d07      	ldr	r5, [pc, #28]	; (80225b0 <_fstat_r+0x20>)
 8022594:	2300      	movs	r3, #0
 8022596:	4604      	mov	r4, r0
 8022598:	4608      	mov	r0, r1
 802259a:	4611      	mov	r1, r2
 802259c:	602b      	str	r3, [r5, #0]
 802259e:	f7df fa52 	bl	8001a46 <_fstat>
 80225a2:	1c43      	adds	r3, r0, #1
 80225a4:	d102      	bne.n	80225ac <_fstat_r+0x1c>
 80225a6:	682b      	ldr	r3, [r5, #0]
 80225a8:	b103      	cbz	r3, 80225ac <_fstat_r+0x1c>
 80225aa:	6023      	str	r3, [r4, #0]
 80225ac:	bd38      	pop	{r3, r4, r5, pc}
 80225ae:	bf00      	nop
 80225b0:	20012c64 	.word	0x20012c64

080225b4 <_isatty_r>:
 80225b4:	b538      	push	{r3, r4, r5, lr}
 80225b6:	4d06      	ldr	r5, [pc, #24]	; (80225d0 <_isatty_r+0x1c>)
 80225b8:	2300      	movs	r3, #0
 80225ba:	4604      	mov	r4, r0
 80225bc:	4608      	mov	r0, r1
 80225be:	602b      	str	r3, [r5, #0]
 80225c0:	f7df fa51 	bl	8001a66 <_isatty>
 80225c4:	1c43      	adds	r3, r0, #1
 80225c6:	d102      	bne.n	80225ce <_isatty_r+0x1a>
 80225c8:	682b      	ldr	r3, [r5, #0]
 80225ca:	b103      	cbz	r3, 80225ce <_isatty_r+0x1a>
 80225cc:	6023      	str	r3, [r4, #0]
 80225ce:	bd38      	pop	{r3, r4, r5, pc}
 80225d0:	20012c64 	.word	0x20012c64

080225d4 <_kill_r>:
 80225d4:	b538      	push	{r3, r4, r5, lr}
 80225d6:	4d07      	ldr	r5, [pc, #28]	; (80225f4 <_kill_r+0x20>)
 80225d8:	2300      	movs	r3, #0
 80225da:	4604      	mov	r4, r0
 80225dc:	4608      	mov	r0, r1
 80225de:	4611      	mov	r1, r2
 80225e0:	602b      	str	r3, [r5, #0]
 80225e2:	f7df f9cf 	bl	8001984 <_kill>
 80225e6:	1c43      	adds	r3, r0, #1
 80225e8:	d102      	bne.n	80225f0 <_kill_r+0x1c>
 80225ea:	682b      	ldr	r3, [r5, #0]
 80225ec:	b103      	cbz	r3, 80225f0 <_kill_r+0x1c>
 80225ee:	6023      	str	r3, [r4, #0]
 80225f0:	bd38      	pop	{r3, r4, r5, pc}
 80225f2:	bf00      	nop
 80225f4:	20012c64 	.word	0x20012c64

080225f8 <_getpid_r>:
 80225f8:	f7df b9bc 	b.w	8001974 <_getpid>

080225fc <_realloc_r>:
 80225fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022600:	4680      	mov	r8, r0
 8022602:	4614      	mov	r4, r2
 8022604:	460e      	mov	r6, r1
 8022606:	b921      	cbnz	r1, 8022612 <_realloc_r+0x16>
 8022608:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802260c:	4611      	mov	r1, r2
 802260e:	f7fe bccb 	b.w	8020fa8 <_malloc_r>
 8022612:	b92a      	cbnz	r2, 8022620 <_realloc_r+0x24>
 8022614:	f7ff fa04 	bl	8021a20 <_free_r>
 8022618:	4625      	mov	r5, r4
 802261a:	4628      	mov	r0, r5
 802261c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022620:	f000 f81b 	bl	802265a <_malloc_usable_size_r>
 8022624:	4284      	cmp	r4, r0
 8022626:	4607      	mov	r7, r0
 8022628:	d802      	bhi.n	8022630 <_realloc_r+0x34>
 802262a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802262e:	d812      	bhi.n	8022656 <_realloc_r+0x5a>
 8022630:	4621      	mov	r1, r4
 8022632:	4640      	mov	r0, r8
 8022634:	f7fe fcb8 	bl	8020fa8 <_malloc_r>
 8022638:	4605      	mov	r5, r0
 802263a:	2800      	cmp	r0, #0
 802263c:	d0ed      	beq.n	802261a <_realloc_r+0x1e>
 802263e:	42bc      	cmp	r4, r7
 8022640:	4622      	mov	r2, r4
 8022642:	4631      	mov	r1, r6
 8022644:	bf28      	it	cs
 8022646:	463a      	movcs	r2, r7
 8022648:	f7ff f9d5 	bl	80219f6 <memcpy>
 802264c:	4631      	mov	r1, r6
 802264e:	4640      	mov	r0, r8
 8022650:	f7ff f9e6 	bl	8021a20 <_free_r>
 8022654:	e7e1      	b.n	802261a <_realloc_r+0x1e>
 8022656:	4635      	mov	r5, r6
 8022658:	e7df      	b.n	802261a <_realloc_r+0x1e>

0802265a <_malloc_usable_size_r>:
 802265a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802265e:	1f18      	subs	r0, r3, #4
 8022660:	2b00      	cmp	r3, #0
 8022662:	bfbc      	itt	lt
 8022664:	580b      	ldrlt	r3, [r1, r0]
 8022666:	18c0      	addlt	r0, r0, r3
 8022668:	4770      	bx	lr
	...

0802266c <_init>:
 802266c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802266e:	bf00      	nop
 8022670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022672:	bc08      	pop	{r3}
 8022674:	469e      	mov	lr, r3
 8022676:	4770      	bx	lr

08022678 <_fini>:
 8022678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802267a:	bf00      	nop
 802267c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802267e:	bc08      	pop	{r3}
 8022680:	469e      	mov	lr, r3
 8022682:	4770      	bx	lr
